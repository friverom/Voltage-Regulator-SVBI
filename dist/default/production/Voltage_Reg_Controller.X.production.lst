

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Nov 09 14:01:02 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F258
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	text103,global,reloc=2,class=CODE,delta=1
   119                           	psect	text104,global,reloc=2,class=CODE,delta=1
   120                           	psect	text105,global,reloc=2,class=CODE,delta=1
   121                           	psect	text106,global,reloc=2,class=CODE,delta=1
   122                           	psect	text107,global,reloc=2,class=CODE,delta=1
   123                           	psect	text108,global,reloc=2,class=CODE,delta=1
   124                           	psect	text109,global,reloc=2,class=CODE,delta=1
   125                           	psect	text110,global,reloc=2,class=CODE,delta=1
   126                           	psect	text111,global,reloc=2,class=CODE,delta=1
   127                           	psect	text112,global,reloc=2,class=CODE,delta=1
   128                           	psect	text113,global,reloc=2,class=CODE,delta=1
   129                           	psect	text114,global,reloc=2,class=CODE,delta=1
   130                           	psect	text115,global,reloc=2,class=CODE,delta=1
   131                           	psect	text116,global,reloc=2,class=CODE,delta=1
   132                           	psect	text117,global,reloc=2,class=CODE,delta=1
   133                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text119,global,reloc=2,class=CODE,delta=1
   135                           	psect	text120,global,reloc=2,class=CODE,delta=1
   136                           	psect	text121,global,reloc=2,class=CODE,delta=1
   137                           	psect	text122,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text123,global,reloc=2,class=CODE,delta=1
   139                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text134,global,reloc=2,class=CODE,delta=1
   150                           	psect	text135,global,reloc=2,class=CODE,delta=1
   151                           	psect	text136,global,reloc=2,class=CODE,delta=1
   152                           	psect	text137,global,reloc=2,class=CODE,delta=1
   153                           	psect	text138,global,reloc=2,class=CODE,delta=1
   154                           	psect	text139,global,reloc=2,class=CODE,delta=1
   155                           	psect	text140,global,reloc=2,class=CODE,delta=1
   156                           	psect	text141,global,reloc=2,class=CODE,delta=1
   157                           	psect	text142,global,reloc=2,class=CODE,delta=1
   158                           	psect	text143,global,reloc=2,class=CODE,delta=1
   159                           	psect	text144,global,reloc=2,class=CODE,delta=1
   160                           	psect	text145,global,reloc=2,class=CODE,delta=1
   161                           	psect	text146,global,reloc=2,class=CODE,delta=1
   162                           	psect	text147,global,reloc=2,class=CODE,delta=1
   163                           	psect	text148,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text149,global,reloc=2,class=CODE,delta=1
   165                           	psect	text150,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text151,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text152,global,reloc=2,class=CODE,delta=1
   168                           	psect	text153,global,reloc=2,class=CODE,delta=1,group=1
   169                           	psect	text154,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text155,global,reloc=2,class=CODE,delta=1,group=1
   171                           	psect	text156,global,reloc=2,class=CODE,delta=1,group=1
   172                           	psect	text157,global,reloc=2,class=CODE,delta=1
   173                           	psect	text158,global,reloc=2,class=CODE,delta=1
   174                           	psect	text159,global,reloc=2,class=CODE,delta=1
   175                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   176                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.43
   181                           ; Generated 25/07/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F258 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	idataBANK0
   216  000006                     __pidataBANK0:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _value
   220  000006  F0BE               	dw	61630
   221                           
   222                           	psect	mediumconst
   223  007D22                     __pmediumconst:
   224                           	opt stack 0
   225  007D22  00                 	db	0
   226  007D23                     _dpowers:
   227                           	opt stack 0
   228  007D23  0001               	dw	1
   229  007D25  0000               	dw	0
   230  007D27  000A               	dw	10
   231  007D29  0000               	dw	0
   232  007D2B  0064               	dw	100
   233  007D2D  0000               	dw	0
   234  007D2F  03E8               	dw	1000
   235  007D31  0000               	dw	0
   236  007D33  2710               	dw	10000
   237  007D35  0000               	dw	0
   238  007D37  86A0               	dw	34464
   239  007D39  0001               	dw	1
   240  007D3B  4240               	dw	16960
   241  007D3D  000F               	dw	15
   242  007D3F  9680               	dw	38528
   243  007D41  0098               	dw	152
   244  007D43  E100               	dw	57600
   245  007D45  05F5               	dw	1525
   246  007D47  CA00               	dw	51712
   247  007D49  3B9A               	dw	15258
   248  007D4B                     __end_of_dpowers:
   249                           	opt stack 0
   250  007D4B                     __powers_:
   251                           	opt stack 0
   252  007D4B  00                 	db	0
   253  007D4C  80                 	db	128
   254  007D4D  3F                 	db	63
   255  007D4E  00                 	db	0
   256  007D4F  20                 	db	32
   257  007D50  41                 	db	65
   258  007D51  00                 	db	0
   259  007D52  C8                 	db	200
   260  007D53  42                 	db	66
   261  007D54  00                 	db	0
   262  007D55  7A                 	db	122
   263  007D56  44                 	db	68
   264  007D57  40                 	db	64
   265  007D58  1C                 	db	28
   266  007D59  46                 	db	70
   267  007D5A  50                 	db	80
   268  007D5B  C3                 	db	195
   269  007D5C  47                 	db	71
   270  007D5D  24                 	db	36
   271  007D5E  74                 	db	116
   272  007D5F  49                 	db	73
   273  007D60  97                 	db	151
   274  007D61  18                 	db	24
   275  007D62  4B                 	db	75
   276  007D63  BC                 	db	188
   277  007D64  BE                 	db	190
   278  007D65  4C                 	db	76
   279  007D66  6B                 	db	107
   280  007D67  6E                 	db	110
   281  007D68  4E                 	db	78
   282  007D69  03                 	db	3
   283  007D6A  15                 	db	21
   284  007D6B  50                 	db	80
   285  007D6C  79                 	db	121
   286  007D6D  AD                 	db	173
   287  007D6E  60                 	db	96
   288  007D6F  F3                 	db	243
   289  007D70  49                 	db	73
   290  007D71  71                 	db	113
   291  007D72                     __end_of__powers_:
   292                           	opt stack 0
   293  007D72                     __npowers_:
   294                           	opt stack 0
   295  007D72  00                 	db	0
   296  007D73  80                 	db	128
   297  007D74  3F                 	db	63
   298  007D75  CD                 	db	205
   299  007D76  CC                 	db	204
   300  007D77  3D                 	db	61
   301  007D78  D7                 	db	215
   302  007D79  23                 	db	35
   303  007D7A  3C                 	db	60
   304  007D7B  12                 	db	18
   305  007D7C  83                 	db	131
   306  007D7D  3A                 	db	58
   307  007D7E  B7                 	db	183
   308  007D7F  D1                 	db	209
   309  007D80  38                 	db	56
   310  007D81  C6                 	db	198
   311  007D82  27                 	db	39
   312  007D83  37                 	db	55
   313  007D84  38                 	db	56
   314  007D85  86                 	db	134
   315  007D86  35                 	db	53
   316  007D87  C0                 	db	192
   317  007D88  D6                 	db	214
   318  007D89  33                 	db	51
   319  007D8A  CC                 	db	204
   320  007D8B  2B                 	db	43
   321  007D8C  32                 	db	50
   322  007D8D  70                 	db	112
   323  007D8E  89                 	db	137
   324  007D8F  30                 	db	48
   325  007D90  E7                 	db	231
   326  007D91  DB                 	db	219
   327  007D92  2E                 	db	46
   328  007D93  E5                 	db	229
   329  007D94  3C                 	db	60
   330  007D95  1E                 	db	30
   331  007D96  42                 	db	66
   332  007D97  A2                 	db	162
   333  007D98  0D                 	db	13
   334  007D99                     __end_of__npowers_:
   335                           	opt stack 0
   336  007D99                     _moninit:
   337                           	opt stack 0
   338  007D99  1F                 	db	31
   339  007D9A  1C                 	db	28
   340  007D9B  1F                 	db	31
   341  007D9C  1E                 	db	30
   342  007D9D  1F                 	db	31
   343  007D9E  1E                 	db	30
   344  007D9F  1F                 	db	31
   345  007DA0  1F                 	db	31
   346  007DA1  1E                 	db	30
   347  007DA2  1F                 	db	31
   348  007DA3  1E                 	db	30
   349  007DA4  1F                 	db	31
   350  007DA5                     __end_of_moninit:
   351                           	opt stack 0
   352  0000                     _SPBRG	set	4015
   353  0000                     _PIE1bits	set	3997
   354  0000                     _TXSTAbits	set	4012
   355  0000                     _TXSTA	set	4012
   356  0000                     _T0CON	set	4053
   357  0000                     _RCSTAbits	set	4011
   358  0000                     _RCREG	set	4014
   359  0000                     _RCSTA	set	4011
   360  0000                     _TXREG	set	4013
   361  0000                     _TMR0L	set	4054
   362  0000                     _TMR0H	set	4055
   363  0000                     _TRISC	set	3988
   364  0000                     _TRISB	set	3987
   365  0000                     _TRISA	set	3986
   366  0000                     _ADRESH	set	4036
   367  0000                     _ADRESL	set	4035
   368  0000                     _ADCON0bits	set	4034
   369  0000                     _ADCON1	set	4033
   370  0000                     _ADCON0	set	4034
   371  0000                     _PORTB	set	3969
   372  0000                     _LATCbits	set	3979
   373  0000                     _TRISBbits	set	3987
   374  0000                     _TRISCbits	set	3988
   375  0000                     _SSPADD	set	4040
   376  0000                     _SSPCON1bits	set	4038
   377  0000                     _SSPBUF	set	4041
   378  0000                     _PIR1bits	set	3998
   379  0000                     _SSPCON2bits	set	4037
   380  0000                     _INTCON	set	4082
   381  0000                     _SSPSTATbits	set	4039
   382  0000                     _DDRCbits	set	3988
   383  0000                     _SSPCON2	set	4037
   384  0000                     _SSPCON1	set	4038
   385  0000                     _SSPSTAT	set	4039
   386  0000                     _PIR2bits	set	4001
   387  0000                     _EECON2	set	4007
   388  0000                     _INTCONbits	set	4082
   389  0000                     _EEDATA	set	4008
   390  0000                     _EECON1bits	set	4006
   391  0000                     _EEADR	set	4009
   392  0000                     _RCIF	set	31989
   393  0000                     _TXIF	set	31988
   394  0000                     _TMR0IF	set	32658
   395  0000                     _TMR0IE	set	32661
   396  0000                     _RCIE	set	31981
   397  0000                     _TXIE	set	31980
   398  007DA5                     STR_71:
   399  007DA5  20                 	db	32
   400  007DA6  20                 	db	32
   401  007DA7  20                 	db	32
   402  007DA8  20                 	db	32
   403  007DA9  20                 	db	32
   404  007DAA  20                 	db	32
   405  007DAB  52                 	db	82	;'R'
   406  007DAC  44                 	db	68	;'D'
   407  007DAD  33                 	db	51	;'3'
   408  007DAE  20                 	db	32
   409  007DAF  43                 	db	67	;'C'
   410  007DB0  41                 	db	65	;'A'
   411  007DB1  0A                 	db	10
   412  007DB2  56                 	db	86	;'V'
   413  007DB3  52                 	db	82	;'R'
   414  007DB4  20                 	db	32
   415  007DB5  76                 	db	118	;'v'
   416  007DB6  65                 	db	101	;'e'
   417  007DB7  72                 	db	114	;'r'
   418  007DB8  73                 	db	115	;'s'
   419  007DB9  69                 	db	105	;'i'
   420  007DBA  6F                 	db	111	;'o'
   421  007DBB  6E                 	db	110	;'n'
   422  007DBC  20                 	db	32
   423  007DBD  31                 	db	49	;'1'
   424  007DBE  2E                 	db	46
   425  007DBF  31                 	db	49	;'1'
   426  007DC0  20                 	db	32
   427  007DC1  32                 	db	50	;'2'
   428  007DC2  30                 	db	48	;'0'
   429  007DC3  31                 	db	49	;'1'
   430  007DC4  37                 	db	55	;'7'
   431  007DC5  0A                 	db	10
   432  007DC6  0A                 	db	10
   433  007DC7  20                 	db	32
   434  007DC8  49                 	db	73	;'I'
   435  007DC9  6E                 	db	110	;'n'
   436  007DCA  69                 	db	105	;'i'
   437  007DCB  63                 	db	99	;'c'
   438  007DCC  69                 	db	105	;'i'
   439  007DCD  61                 	db	97	;'a'
   440  007DCE  6E                 	db	110	;'n'
   441  007DCF  64                 	db	100	;'d'
   442  007DD0  6F                 	db	111	;'o'
   443  007DD1  20                 	db	32
   444  007DD2  53                 	db	83	;'S'
   445  007DD3  69                 	db	105	;'i'
   446  007DD4  73                 	db	115	;'s'
   447  007DD5  74                 	db	116	;'t'
   448  007DD6  65                 	db	101	;'e'
   449  007DD7  6D                 	db	109	;'m'
   450  007DD8  61                 	db	97	;'a'
   451  007DD9  0A                 	db	10
   452  007DDA  00                 	db	0
   453  007DDB                     STR_74:
   454  007DDB  49                 	db	73	;'I'
   455  007DDC  6E                 	db	110	;'n'
   456  007DDD  69                 	db	105	;'i'
   457  007DDE  63                 	db	99	;'c'
   458  007DDF  69                 	db	105	;'i'
   459  007DE0  61                 	db	97	;'a'
   460  007DE1  6C                 	db	108	;'l'
   461  007DE2  69                 	db	105	;'i'
   462  007DE3  7A                 	db	122	;'z'
   463  007DE4  61                 	db	97	;'a'
   464  007DE5  6E                 	db	110	;'n'
   465  007DE6  64                 	db	100	;'d'
   466  007DE7  6F                 	db	111	;'o'
   467  007DE8  20                 	db	32
   468  007DE9  66                 	db	102	;'f'
   469  007DEA  65                 	db	101	;'e'
   470  007DEB  63                 	db	99	;'c'
   471  007DEC  68                 	db	104	;'h'
   472  007DED  61                 	db	97	;'a'
   473  007DEE  20                 	db	32
   474  007DEF  79                 	db	121	;'y'
   475  007DF0  20                 	db	32
   476  007DF1  68                 	db	104	;'h'
   477  007DF2  6F                 	db	111	;'o'
   478  007DF3  72                 	db	114	;'r'
   479  007DF4  61                 	db	97	;'a'
   480  007DF5  20                 	db	32
   481  007DF6  64                 	db	100	;'d'
   482  007DF7  65                 	db	101	;'e'
   483  007DF8  6C                 	db	108	;'l'
   484  007DF9  20                 	db	32
   485  007DFA  73                 	db	115	;'s'
   486  007DFB  69                 	db	105	;'i'
   487  007DFC  73                 	db	115	;'s'
   488  007DFD  74                 	db	116	;'t'
   489  007DFE  65                 	db	101	;'e'
   490  007DFF  6D                 	db	109	;'m'
   491  007E00  61                 	db	97	;'a'
   492  007E01  2E                 	db	46
   493  007E02  0A                 	db	10
   494  007E03  00                 	db	0
   495  007E04                     STR_89:
   496  007E04  4A                 	db	74	;'J'
   497  007E05  61                 	db	97	;'a'
   498  007E06  6E                 	db	110	;'n'
   499  007E07  46                 	db	70	;'F'
   500  007E08  65                 	db	101	;'e'
   501  007E09  62                 	db	98	;'b'
   502  007E0A  4D                 	db	77	;'M'
   503  007E0B  61                 	db	97	;'a'
   504  007E0C  72                 	db	114	;'r'
   505  007E0D  41                 	db	65	;'A'
   506  007E0E  70                 	db	112	;'p'
   507  007E0F  72                 	db	114	;'r'
   508  007E10  4D                 	db	77	;'M'
   509  007E11  61                 	db	97	;'a'
   510  007E12  79                 	db	121	;'y'
   511  007E13  4A                 	db	74	;'J'
   512  007E14  75                 	db	117	;'u'
   513  007E15  6E                 	db	110	;'n'
   514  007E16  4A                 	db	74	;'J'
   515  007E17  75                 	db	117	;'u'
   516  007E18  6C                 	db	108	;'l'
   517  007E19  41                 	db	65	;'A'
   518  007E1A  75                 	db	117	;'u'
   519  007E1B  67                 	db	103	;'g'
   520  007E1C  53                 	db	83	;'S'
   521  007E1D  65                 	db	101	;'e'
   522  007E1E  70                 	db	112	;'p'
   523  007E1F  4F                 	db	79	;'O'
   524  007E20  63                 	db	99	;'c'
   525  007E21  74                 	db	116	;'t'
   526  007E22  4E                 	db	78	;'N'
   527  007E23  6F                 	db	111	;'o'
   528  007E24  76                 	db	118	;'v'
   529  007E25  44                 	db	68	;'D'
   530  007E26  65                 	db	101	;'e'
   531  007E27  63                 	db	99	;'c'
   532  007E28  00                 	db	0
   533  007E29                     STR_75:
   534  007E29  49                 	db	73	;'I'
   535  007E2A  6E                 	db	110	;'n'
   536  007E2B  69                 	db	105	;'i'
   537  007E2C  63                 	db	99	;'c'
   538  007E2D  69                 	db	105	;'i'
   539  007E2E  61                 	db	97	;'a'
   540  007E2F  6C                 	db	108	;'l'
   541  007E30  69                 	db	105	;'i'
   542  007E31  7A                 	db	122	;'z'
   543  007E32  61                 	db	97	;'a'
   544  007E33  6E                 	db	110	;'n'
   545  007E34  64                 	db	100	;'d'
   546  007E35  6F                 	db	111	;'o'
   547  007E36  20                 	db	32
   548  007E37  6D                 	db	109	;'m'
   549  007E38  6F                 	db	111	;'o'
   550  007E39  64                 	db	100	;'d'
   551  007E3A  75                 	db	117	;'u'
   552  007E3B  6C                 	db	108	;'l'
   553  007E3C  6F                 	db	111	;'o'
   554  007E3D  20                 	db	32
   555  007E3E  49                 	db	73	;'I'
   556  007E3F  4F                 	db	79	;'O'
   557  007E40  52                 	db	82	;'R'
   558  007E41  35                 	db	53	;'5'
   559  007E42  2E                 	db	46
   560  007E43  2E                 	db	46
   561  007E44  2E                 	db	46
   562  007E45  00                 	db	0
   563  007E46                     STR_64:
   564  007E46  25                 	db	37
   565  007E47  2E                 	db	46
   566  007E48  31                 	db	49	;'1'
   567  007E49  66                 	db	102	;'f'
   568  007E4A  20                 	db	32
   569  007E4B  25                 	db	37
   570  007E4C  2E                 	db	46
   571  007E4D  31                 	db	49	;'1'
   572  007E4E  66                 	db	102	;'f'
   573  007E4F  20                 	db	32
   574  007E50  25                 	db	37
   575  007E51  2E                 	db	46
   576  007E52  31                 	db	49	;'1'
   577  007E53  66                 	db	102	;'f'
   578  007E54  20                 	db	32
   579  007E55  25                 	db	37
   580  007E56  2E                 	db	46
   581  007E57  31                 	db	49	;'1'
   582  007E58  66                 	db	102	;'f'
   583  007E59  20                 	db	32
   584  007E5A  4D                 	db	77	;'M'
   585  007E5B  41                 	db	65	;'A'
   586  007E5C  4E                 	db	78	;'N'
   587  007E5D  55                 	db	85	;'U'
   588  007E5E  41                 	db	65	;'A'
   589  007E5F  4C                 	db	76	;'L'
   590  007E60  0A                 	db	10
   591  007E61  00                 	db	0
   592  007E62                     STR_65:
   593  007E62  25                 	db	37
   594  007E63  2E                 	db	46
   595  007E64  31                 	db	49	;'1'
   596  007E65  66                 	db	102	;'f'
   597  007E66  20                 	db	32
   598  007E67  25                 	db	37
   599  007E68  2E                 	db	46
   600  007E69  31                 	db	49	;'1'
   601  007E6A  66                 	db	102	;'f'
   602  007E6B  20                 	db	32
   603  007E6C  25                 	db	37
   604  007E6D  2E                 	db	46
   605  007E6E  31                 	db	49	;'1'
   606  007E6F  66                 	db	102	;'f'
   607  007E70  20                 	db	32
   608  007E71  25                 	db	37
   609  007E72  2E                 	db	46
   610  007E73  31                 	db	49	;'1'
   611  007E74  66                 	db	102	;'f'
   612  007E75  20                 	db	32
   613  007E76  41                 	db	65	;'A'
   614  007E77  55                 	db	85	;'U'
   615  007E78  54                 	db	84	;'T'
   616  007E79  4F                 	db	79	;'O'
   617  007E7A  0A                 	db	10
   618  007E7B  00                 	db	0
   619  007E7C                     STR_72:
   620  007E7C  49                 	db	73	;'I'
   621  007E7D  6E                 	db	110	;'n'
   622  007E7E  69                 	db	105	;'i'
   623  007E7F  63                 	db	99	;'c'
   624  007E80  69                 	db	105	;'i'
   625  007E81  61                 	db	97	;'a'
   626  007E82  6C                 	db	108	;'l'
   627  007E83  69                 	db	105	;'i'
   628  007E84  7A                 	db	122	;'z'
   629  007E85  61                 	db	97	;'a'
   630  007E86  6E                 	db	110	;'n'
   631  007E87  64                 	db	100	;'d'
   632  007E88  6F                 	db	111	;'o'
   633  007E89  20                 	db	32
   634  007E8A  42                 	db	66	;'B'
   635  007E8B  75                 	db	117	;'u'
   636  007E8C  73                 	db	115	;'s'
   637  007E8D  20                 	db	32
   638  007E8E  49                 	db	73	;'I'
   639  007E8F  32                 	db	50	;'2'
   640  007E90  43                 	db	67	;'C'
   641  007E91  2E                 	db	46
   642  007E92  2E                 	db	46
   643  007E93  2E                 	db	46
   644  007E94  00                 	db	0
   645  007E95                     STR_77:
   646  007E95  41                 	db	65	;'A'
   647  007E96  44                 	db	68	;'D'
   648  007E97  43                 	db	67	;'C'
   649  007E98  20                 	db	32
   650  007E99  73                 	db	115	;'s'
   651  007E9A  69                 	db	105	;'i'
   652  007E9B  73                 	db	115	;'s'
   653  007E9C  74                 	db	116	;'t'
   654  007E9D  65                 	db	101	;'e'
   655  007E9E  6D                 	db	109	;'m'
   656  007E9F  61                 	db	97	;'a'
   657  007EA0  2E                 	db	46
   658  007EA1  2E                 	db	46
   659  007EA2  2E                 	db	46
   660  007EA3  20                 	db	32
   661  007EA4  4C                 	db	76	;'L'
   662  007EA5  69                 	db	105	;'i'
   663  007EA6  73                 	db	115	;'s'
   664  007EA7  74                 	db	116	;'t'
   665  007EA8  6F                 	db	111	;'o'
   666  007EA9  2E                 	db	46
   667  007EAA  0A                 	db	10
   668  007EAB  00                 	db	0
   669  007EAC                     STR_88:
   670  007EAC  53                 	db	83	;'S'
   671  007EAD  75                 	db	117	;'u'
   672  007EAE  6E                 	db	110	;'n'
   673  007EAF  4D                 	db	77	;'M'
   674  007EB0  6F                 	db	111	;'o'
   675  007EB1  6E                 	db	110	;'n'
   676  007EB2  54                 	db	84	;'T'
   677  007EB3  75                 	db	117	;'u'
   678  007EB4  65                 	db	101	;'e'
   679  007EB5  57                 	db	87	;'W'
   680  007EB6  65                 	db	101	;'e'
   681  007EB7  64                 	db	100	;'d'
   682  007EB8  54                 	db	84	;'T'
   683  007EB9  68                 	db	104	;'h'
   684  007EBA  75                 	db	117	;'u'
   685  007EBB  46                 	db	70	;'F'
   686  007EBC  72                 	db	114	;'r'
   687  007EBD  69                 	db	105	;'i'
   688  007EBE  53                 	db	83	;'S'
   689  007EBF  61                 	db	97	;'a'
   690  007EC0  74                 	db	116	;'t'
   691  007EC1  00                 	db	0
   692  007EC2                     STR_79:
   693  007EC2  56                 	db	86	;'V'
   694  007EC3  5F                 	db	95	;'_'
   695  007EC4  4F                 	db	79	;'O'
   696  007EC5  75                 	db	117	;'u'
   697  007EC6  74                 	db	116	;'t'
   698  007EC7  20                 	db	32
   699  007EC8  28                 	db	40
   700  007EC9  4C                 	db	76	;'L'
   701  007ECA  4E                 	db	78	;'N'
   702  007ECB  31                 	db	49	;'1'
   703  007ECC  2D                 	db	45
   704  007ECD  4C                 	db	76	;'L'
   705  007ECE  4E                 	db	78	;'N'
   706  007ECF  32                 	db	50	;'2'
   707  007ED0  2D                 	db	45
   708  007ED1  4C                 	db	76	;'L'
   709  007ED2  4E                 	db	78	;'N'
   710  007ED3  33                 	db	51	;'3'
   711  007ED4  29                 	db	41
   712  007ED5  00                 	db	0
   713  007ED6                     STR_83:
   714  007ED6  56                 	db	86	;'V'
   715  007ED7  5F                 	db	95	;'_'
   716  007ED8  49                 	db	73	;'I'
   717  007ED9  6E                 	db	110	;'n'
   718  007EDA  20                 	db	32
   719  007EDB  28                 	db	40
   720  007EDC  4D                 	db	77	;'M'
   721  007EDD  69                 	db	105	;'i'
   722  007EDE  6E                 	db	110	;'n'
   723  007EDF  20                 	db	32
   724  007EE0  41                 	db	65	;'A'
   725  007EE1  63                 	db	99	;'c'
   726  007EE2  74                 	db	116	;'t'
   727  007EE3  20                 	db	32
   728  007EE4  4D                 	db	77	;'M'
   729  007EE5  61                 	db	97	;'a'
   730  007EE6  78                 	db	120	;'x'
   731  007EE7  29                 	db	41
   732  007EE8  00                 	db	0
   733  007EE9                     STR_7:
   734  007EE9  43                 	db	67	;'C'
   735  007EEA  6F                 	db	111	;'o'
   736  007EEB  6D                 	db	109	;'m'
   737  007EEC  61                 	db	97	;'a'
   738  007EED  6E                 	db	110	;'n'
   739  007EEE  64                 	db	100	;'d'
   740  007EEF  6F                 	db	111	;'o'
   741  007EF0  20                 	db	32
   742  007EF1  69                 	db	105	;'i'
   743  007EF2  6E                 	db	110	;'n'
   744  007EF3  76                 	db	118	;'v'
   745  007EF4  61                 	db	97	;'a'
   746  007EF5  6C                 	db	108	;'l'
   747  007EF6  69                 	db	105	;'i'
   748  007EF7  64                 	db	100	;'d'
   749  007EF8  6F                 	db	111	;'o'
   750  007EF9  0A                 	db	10
   751  007EFA  00                 	db	0
   752  007EFB                     STR_21:
   753  007EFB  50                 	db	80	;'P'
   754  007EFC  61                 	db	97	;'a'
   755  007EFD  72                 	db	114	;'r'
   756  007EFE  61                 	db	97	;'a'
   757  007EFF  6D                 	db	109	;'m'
   758  007F00  65                 	db	101	;'e'
   759  007F01  74                 	db	116	;'t'
   760  007F02  72                 	db	114	;'r'
   761  007F03  6F                 	db	111	;'o'
   762  007F04  20                 	db	32
   763  007F05  65                 	db	101	;'e'
   764  007F06  72                 	db	114	;'r'
   765  007F07  72                 	db	114	;'r'
   766  007F08  61                 	db	97	;'a'
   767  007F09  64                 	db	100	;'d'
   768  007F0A  6F                 	db	111	;'o'
   769  007F0B  00                 	db	0
   770  007F0C                     STR_25:
   771  007F0C  73                 	db	115	;'s'
   772  007F0D  61                 	db	97	;'a'
   773  007F0E  6D                 	db	109	;'m'
   774  007F0F  70                 	db	112	;'p'
   775  007F10  6C                 	db	108	;'l'
   776  007F11  65                 	db	101	;'e'
   777  007F12  5F                 	db	95	;'_'
   778  007F13  74                 	db	116	;'t'
   779  007F14  69                 	db	105	;'i'
   780  007F15  6D                 	db	109	;'m'
   781  007F16  65                 	db	101	;'e'
   782  007F17  00                 	db	0
   783  007F18                     STR_60:
   784  007F18  25                 	db	37
   785  007F19  64                 	db	100	;'d'
   786  007F1A  2F                 	db	47
   787  007F1B  25                 	db	37
   788  007F1C  64                 	db	100	;'d'
   789  007F1D  2F                 	db	47
   790  007F1E  25                 	db	37
   791  007F1F  64                 	db	100	;'d'
   792  007F20  0A                 	db	10
   793  007F21  00                 	db	0
   794  007F22                     STR_62:
   795  007F22  25                 	db	37
   796  007F23  64                 	db	100	;'d'
   797  007F24  3A                 	db	58	;':'
   798  007F25  25                 	db	37
   799  007F26  64                 	db	100	;'d'
   800  007F27  3A                 	db	58	;':'
   801  007F28  25                 	db	37
   802  007F29  64                 	db	100	;'d'
   803  007F2A  0A                 	db	10
   804  007F2B  00                 	db	0
   805  007F2C                     STR_9:
   806  007F2C  62                 	db	98	;'b'
   807  007F2D  61                 	db	97	;'a'
   808  007F2E  63                 	db	99	;'c'
   809  007F2F  6B                 	db	107	;'k'
   810  007F30  6C                 	db	108	;'l'
   811  007F31  69                 	db	105	;'i'
   812  007F32  67                 	db	103	;'g'
   813  007F33  68                 	db	104	;'h'
   814  007F34  74                 	db	116	;'t'
   815  007F35  00                 	db	0
   816  007F36                     STR_27:
   817  007F36  64                 	db	100	;'d'
   818  007F37  65                 	db	101	;'e'
   819  007F38  61                 	db	97	;'a'
   820  007F39  64                 	db	100	;'d'
   821  007F3A  62                 	db	98	;'b'
   822  007F3B  61                 	db	97	;'a'
   823  007F3C  6E                 	db	110	;'n'
   824  007F3D  64                 	db	100	;'d'
   825  007F3E  00                 	db	0
   826  007F3F                     STR_40:
   827  007F3F  73                 	db	115	;'s'
   828  007F40  61                 	db	97	;'a'
   829  007F41  6D                 	db	109	;'m'
   830  007F42  70                 	db	112	;'p'
   831  007F43  6C                 	db	108	;'l'
   832  007F44  65                 	db	101	;'e'
   833  007F45  5F                 	db	95	;'_'
   834  007F46  74                 	db	116	;'t'
   835  007F47  00                 	db	0
   836  007F48                     STR_26:
   837  007F48  73                 	db	115	;'s'
   838  007F49  65                 	db	101	;'e'
   839  007F4A  74                 	db	116	;'t'
   840  007F4B  70                 	db	112	;'p'
   841  007F4C  6F                 	db	111	;'o'
   842  007F4D  69                 	db	105	;'i'
   843  007F4E  6E                 	db	110	;'n'
   844  007F4F  74                 	db	116	;'t'
   845  007F50  00                 	db	0
   846  007F51                     STR_8:
   847  007F51  63                 	db	99	;'c'
   848  007F52  6F                 	db	111	;'o'
   849  007F53  6E                 	db	110	;'n'
   850  007F54  74                 	db	116	;'t'
   851  007F55  72                 	db	114	;'r'
   852  007F56  61                 	db	97	;'a'
   853  007F57  73                 	db	115	;'s'
   854  007F58  74                 	db	116	;'t'
   855  007F59  00                 	db	0
   856  007F5A                     STR_53:
   857  007F5A  6D                 	db	109	;'m'
   858  007F5B  61                 	db	97	;'a'
   859  007F5C  6E                 	db	110	;'n'
   860  007F5D  75                 	db	117	;'u'
   861  007F5E  61                 	db	97	;'a'
   862  007F5F  6C                 	db	108	;'l'
   863  007F60  0A                 	db	10
   864  007F61  00                 	db	0
   865  007F62                     STR_87:
   866  007F62  28                 	db	40
   867  007F63  6E                 	db	110	;'n'
   868  007F64  75                 	db	117	;'u'
   869  007F65  6C                 	db	108	;'l'
   870  007F66  6C                 	db	108	;'l'
   871  007F67  29                 	db	41
   872  007F68  00                 	db	0
   873  007F69                     STR_12:
   874  007F69  45                 	db	69	;'E'
   875  007F6A  72                 	db	114	;'r'
   876  007F6B  72                 	db	114	;'r'
   877  007F6C  6F                 	db	111	;'o'
   878  007F6D  72                 	db	114	;'r'
   879  007F6E  0A                 	db	10
   880  007F6F  00                 	db	0
   881  007F70                     STR_66:
   882  007F70  70                 	db	112	;'p'
   883  007F71  69                 	db	105	;'i'
   884  007F72  64                 	db	100	;'d'
   885  007F73  6F                 	db	111	;'o'
   886  007F74  75                 	db	117	;'u'
   887  007F75  74                 	db	116	;'t'
   888  007F76  00                 	db	0
   889  007F77                     STR_35:
   890  007F77  25                 	db	37
   891  007F78  2E                 	db	46
   892  007F79  31                 	db	49	;'1'
   893  007F7A  66                 	db	102	;'f'
   894  007F7B  0A                 	db	10
   895  007F7C  00                 	db	0
   896  007F7D                     STR_47:
   897  007F7D  25                 	db	37
   898  007F7E  2E                 	db	46
   899  007F7F  32                 	db	50	;'2'
   900  007F80  66                 	db	102	;'f'
   901  007F81  0A                 	db	10
   902  007F82  00                 	db	0
   903  007F83                     STR_54:
   904  007F83  41                 	db	65	;'A'
   905  007F84  75                 	db	117	;'u'
   906  007F85  74                 	db	116	;'t'
   907  007F86  6F                 	db	111	;'o'
   908  007F87  0A                 	db	10
   909  007F88  00                 	db	0
   910  007F89                     STR_19:
   911  007F89  76                 	db	118	;'v'
   912  007F8A  69                 	db	105	;'i'
   913  007F8B  6E                 	db	110	;'n'
   914  007F8C  5F                 	db	95	;'_'
   915  007F8D  73                 	db	115	;'s'
   916  007F8E  00                 	db	0
   917  007F8F                     STR_2:
   918  007F8F  72                 	db	114	;'r'
   919  007F90  65                 	db	101	;'e'
   920  007F91  73                 	db	115	;'s'
   921  007F92  65                 	db	101	;'e'
   922  007F93  74                 	db	116	;'t'
   923  007F94  00                 	db	0
   924  007F95                     STR_20:
   925  007F95  76                 	db	118	;'v'
   926  007F96  69                 	db	105	;'i'
   927  007F97  6E                 	db	110	;'n'
   928  007F98  5F                 	db	95	;'_'
   929  007F99  7A                 	db	122	;'z'
   930  007F9A  00                 	db	0
   931  007F9B                     STR_80:
   932  007F9B  25                 	db	37
   933  007F9C  2E                 	db	46
   934  007F9D  31                 	db	49	;'1'
   935  007F9E  66                 	db	102	;'f'
   936  007F9F  00                 	db	0
   937  007FA0                     STR_63:
   938  007FA0  64                 	db	100	;'d'
   939  007FA1  61                 	db	97	;'a'
   940  007FA2  74                 	db	116	;'t'
   941  007FA3  61                 	db	97	;'a'
   942  007FA4  00                 	db	0
   943  007FA5                     STR_32:
   944  007FA5  64                 	db	100	;'d'
   945  007FA6  61                 	db	97	;'a'
   946  007FA7  74                 	db	116	;'t'
   947  007FA8  65                 	db	101	;'e'
   948  007FA9  00                 	db	0
   949  007FAA                     STR_52:
   950  007FAA  6D                 	db	109	;'m'
   951  007FAB  6F                 	db	111	;'o'
   952  007FAC  64                 	db	100	;'d'
   953  007FAD  6F                 	db	111	;'o'
   954  007FAE  00                 	db	0
   955  007FAF                     STR_16:
   956  007FAF  76                 	db	118	;'v'
   957  007FB0  31                 	db	49	;'1'
   958  007FB1  5F                 	db	95	;'_'
   959  007FB2  73                 	db	115	;'s'
   960  007FB3  00                 	db	0
   961  007FB4                     STR_17:
   962  007FB4  76                 	db	118	;'v'
   963  007FB5  32                 	db	50	;'2'
   964  007FB6  5F                 	db	95	;'_'
   965  007FB7  73                 	db	115	;'s'
   966  007FB8  00                 	db	0
   967  007FB9                     STR_18:
   968  007FB9  76                 	db	118	;'v'
   969  007FBA  33                 	db	51	;'3'
   970  007FBB  5F                 	db	95	;'_'
   971  007FBC  73                 	db	115	;'s'
   972  007FBD  00                 	db	0
   973  007FBE                     STR_13:
   974  007FBE  76                 	db	118	;'v'
   975  007FBF  31                 	db	49	;'1'
   976  007FC0  5F                 	db	95	;'_'
   977  007FC1  7A                 	db	122	;'z'
   978  007FC2  00                 	db	0
   979  007FC3                     STR_14:
   980  007FC3  76                 	db	118	;'v'
   981  007FC4  32                 	db	50	;'2'
   982  007FC5  5F                 	db	95	;'_'
   983  007FC6  7A                 	db	122	;'z'
   984  007FC7  00                 	db	0
   985  007FC8                     STR_15:
   986  007FC8  76                 	db	118	;'v'
   987  007FC9  33                 	db	51	;'3'
   988  007FCA  5F                 	db	95	;'_'
   989  007FCB  7A                 	db	122	;'z'
   990  007FCC  00                 	db	0
   991  007FCD                     STR_78:
   992  007FCD  25                 	db	37
   993  007FCE  73                 	db	115	;'s'
   994  007FCF  0A                 	db	10
   995  007FD0  00                 	db	0
   996  007FD1                     STR_6:
   997  007FD1  6C                 	db	108	;'l'
   998  007FD2  63                 	db	99	;'c'
   999  007FD3  64                 	db	100	;'d'
  1000  007FD4  00                 	db	0
  1001  007FD5                     STR_5:
  1002  007FD5  63                 	db	99	;'c'
  1003  007FD6  61                 	db	97	;'a'
  1004  007FD7  6C                 	db	108	;'l'
  1005  007FD8  00                 	db	0
  1006  007FD9                     STR_11:
  1007  007FD9  6D                 	db	109	;'m'
  1008  007FDA  69                 	db	105	;'i'
  1009  007FDB  6E                 	db	110	;'n'
  1010  007FDC  00                 	db	0
  1011  007FDD                     STR_57:
  1012  007FDD  76                 	db	118	;'v'
  1013  007FDE  69                 	db	105	;'i'
  1014  007FDF  6E                 	db	110	;'n'
  1015  007FE0  00                 	db	0
  1016  007FE1                     STR_4:
  1017  007FE1  67                 	db	103	;'g'
  1018  007FE2  65                 	db	101	;'e'
  1019  007FE3  74                 	db	116	;'t'
  1020  007FE4  00                 	db	0
  1021  007FE5                     STR_10:
  1022  007FE5  6D                 	db	109	;'m'
  1023  007FE6  61                 	db	97	;'a'
  1024  007FE7  78                 	db	120	;'x'
  1025  007FE8  00                 	db	0
  1026  007FE9                     STR_28:
  1027  007FE9  72                 	db	114	;'r'
  1028  007FEA  63                 	db	99	;'c'
  1029  007FEB  00                 	db	0
  1030  007FEC                     STR_55:
  1031  007FEC  76                 	db	118	;'v'
  1032  007FED  63                 	db	99	;'c'
  1033  007FEE  00                 	db	0
  1034  007FEF                     STR_24:
  1035  007FEF  74                 	db	116	;'t'
  1036  007FF0  64                 	db	100	;'d'
  1037  007FF1  00                 	db	0
  1038  007FF2                     STR_23:
  1039  007FF2  74                 	db	116	;'t'
  1040  007FF3  69                 	db	105	;'i'
  1041  007FF4  00                 	db	0
  1042  007FF5                     STR_22:
  1043  007FF5  6B                 	db	107	;'k'
  1044  007FF6  70                 	db	112	;'p'
  1045  007FF7  00                 	db	0
  1046  007FF8                     STR_1:
  1047  007FF8  20                 	db	32
  1048  007FF9  00                 	db	0
  1049  007FFA                     STR_69:
  1050  007FFA  2F                 	db	47
  1051  007FFB  00                 	db	0
  1052  007FFC                     STR_70:
  1053  007FFC  3A                 	db	58	;':'
  1054  007FFD  00                 	db	0
  1055  0000                     
  1056                           ; #config settings
  1057  007FFE  00                 	db	0	; dummy byte at the end
  1058  0000                     
  1059                           	psect	cinit
  1060  00575E                     __pcinit:
  1061                           	opt stack 0
  1062  00575E                     start_initialization:
  1063                           	opt stack 0
  1064  00575E                     __initialization:
  1065                           	opt stack 0
  1066                           
  1067                           ; Initialize objects allocated to BANK0 (2 bytes)
  1068                           ; load TBLPTR registers with __pidataBANK0
  1069  00575E  0E06               	movlw	low __pidataBANK0
  1070  005760  6EF6               	movwf	tblptrl,c
  1071  005762  0E00               	movlw	high __pidataBANK0
  1072  005764  6EF7               	movwf	tblptrh,c
  1073  005766  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1074  005768  6EF8               	movwf	tblptru,c
  1075  00576A  0009               	tblrd		*+	;fetch initializer
  1076  00576C  CFF5 F0FE          	movff	tablat,__pdataBANK0
  1077  005770  0009               	tblrd		*+	;fetch initializer
  1078  005772  CFF5 F0FF          	movff	tablat,__pdataBANK0+1
  1079                           
  1080                           ; Clear objects allocated to BANK1 (183 bytes)
  1081  005776  EE01  F000         	lfsr	0,__pbssBANK1
  1082  00577A  0EB7               	movlw	183
  1083  00577C                     clear_0:
  1084  00577C  6AEE               	clrf	postinc0,c
  1085  00577E  06E8               	decf	wreg,f,c
  1086  005780  E1FD               	bnz	clear_0
  1087                           
  1088                           ; Clear objects allocated to BANK0 (22 bytes)
  1089  005782  EE00  F0E8         	lfsr	0,__pbssBANK0
  1090  005786  0E16               	movlw	22
  1091  005788                     clear_1:
  1092  005788  6AEE               	clrf	postinc0,c
  1093  00578A  06E8               	decf	wreg,f,c
  1094  00578C  E1FD               	bnz	clear_1
  1095                           
  1096                           ; Clear objects allocated to COMRAM (24 bytes)
  1097  00578E  EE00  F02F         	lfsr	0,__pbssCOMRAM
  1098  005792  0E18               	movlw	24
  1099  005794                     clear_2:
  1100  005794  6AEE               	clrf	postinc0,c
  1101  005796  06E8               	decf	wreg,f,c
  1102  005798  E1FD               	bnz	clear_2
  1103  00579A                     end_of_initialization:
  1104                           	opt stack 0
  1105  00579A                     __end_of__initialization:
  1106                           	opt stack 0
  1107  00579A  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1108  00579C  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1109  00579E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1110  0057A0  6EF8               	movwf	tblptru,c
  1111  0057A2  0100               	movlb	0
  1112  0057A4  EFD8  F00D         	goto	_main	;jump to C main() function
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           
  1120                           	psect	bssCOMRAM
  1121  00002F                     __pbssCOMRAM:
  1122                           	opt stack 0
  1123  00002F                     _ti:
  1124                           	opt stack 0
  1125  00002F                     	ds	3
  1126  000032                     _Vin:
  1127                           	opt stack 0
  1128  000032                     	ds	3
  1129  000035                     _VL3:
  1130                           	opt stack 0
  1131  000035                     	ds	3
  1132  000038                     _VL2:
  1133                           	opt stack 0
  1134  000038                     	ds	3
  1135  00003B                     _VL1:
  1136                           	opt stack 0
  1137  00003B                     	ds	3
  1138  00003E                     _k1:
  1139                           	opt stack 0
  1140  00003E                     	ds	3
  1141  000041                     strtok@sp:
  1142                           	opt stack 0
  1143  000041                     	ds	2
  1144  000043                     _start_counter:
  1145                           	opt stack 0
  1146  000043                     	ds	1
  1147  000044                     _start_flag:
  1148                           	opt stack 0
  1149  000044                     	ds	1
  1150  000045                     _tx_pointer:
  1151                           	opt stack 0
  1152  000045                     	ds	1
  1153  000046                     _rx_pointer:
  1154                           	opt stack 0
  1155  000046                     	ds	1
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           
  1163                           	psect	bssBANK0
  1164  0000E8                     __pbssBANK0:
  1165                           	opt stack 0
  1166  0000E8                     _Outputs:
  1167                           	opt stack 0
  1168  0000E8                     	ds	4
  1169  0000EC                     _error:
  1170                           	opt stack 0
  1171  0000EC                     	ds	3
  1172  0000EF                     _T_sample:
  1173                           	opt stack 0
  1174  0000EF                     	ds	3
  1175  0000F2                     _VL1_zero:
  1176                           	opt stack 0
  1177  0000F2                     	ds	3
  1178  0000F5                     _start_value:
  1179                           	opt stack 0
  1180  0000F5                     	ds	2
  1181  0000F7                     _buffer:
  1182                           	opt stack 0
  1183  0000F7                     	ds	2
  1184  0000F9                     _tx_flag:
  1185                           	opt stack 0
  1186  0000F9                     	ds	1
  1187  0000FA                     _rx_flag:
  1188                           	opt stack 0
  1189  0000FA                     	ds	1
  1190  0000FB                     _Int_Flag:
  1191                           	opt stack 0
  1192  0000FB                     	ds	1
  1193  0000FC                     _status:
  1194                           	opt stack 0
  1195  0000FC                     	ds	1
  1196  0000FD                     _Inputs:
  1197                           	opt stack 0
  1198  0000FD                     	ds	1
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           
  1206                           	psect	dataBANK0
  1207  0000FE                     __pdataBANK0:
  1208                           	opt stack 0
  1209  0000FE                     _value:
  1210                           	opt stack 0
  1211  0000FE                     	ds	2
  1212                           tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           
  1219                           	psect	bssBANK1
  1220  000100                     __pbssBANK1:
  1221                           	opt stack 0
  1222  000100                     _timezone:
  1223                           	opt stack 0
  1224  000100                     	ds	4
  1225  000104                     _deadband:
  1226                           	opt stack 0
  1227  000104                     	ds	3
  1228  000107                     _setpoint:
  1229                           	opt stack 0
  1230  000107                     	ds	3
  1231  00010A                     _last_integral:
  1232                           	opt stack 0
  1233  00010A                     	ds	3
  1234  00010D                     _last_error:
  1235                           	opt stack 0
  1236  00010D                     	ds	3
  1237  000110                     _last_output:
  1238                           	opt stack 0
  1239  000110                     	ds	3
  1240  000113                     _integral:
  1241                           	opt stack 0
  1242  000113                     	ds	3
  1243  000116                     _output:
  1244                           	opt stack 0
  1245  000116                     	ds	3
  1246  000119                     _td:
  1247                           	opt stack 0
  1248  000119                     	ds	3
  1249  00011C                     _Kp:
  1250                           	opt stack 0
  1251  00011C                     	ds	3
  1252  00011F                     _max:
  1253                           	opt stack 0
  1254  00011F                     	ds	3
  1255  000122                     _min:
  1256                           	opt stack 0
  1257  000122                     	ds	3
  1258  000125                     _VL_min:
  1259                           	opt stack 0
  1260  000125                     	ds	3
  1261  000128                     _VL_max:
  1262                           	opt stack 0
  1263  000128                     	ds	3
  1264  00012B                     _Vin_Span:
  1265                           	opt stack 0
  1266  00012B                     	ds	3
  1267  00012E                     _VL3_span:
  1268                           	opt stack 0
  1269  00012E                     	ds	3
  1270  000131                     _VL2_span:
  1271                           	opt stack 0
  1272  000131                     	ds	3
  1273  000134                     _VL1_span:
  1274                           	opt stack 0
  1275  000134                     	ds	3
  1276  000137                     _Vin_zero:
  1277                           	opt stack 0
  1278  000137                     	ds	3
  1279  00013A                     _VL3_zero:
  1280                           	opt stack 0
  1281  00013A                     	ds	3
  1282  00013D                     _VL2_zero:
  1283                           	opt stack 0
  1284  00013D                     	ds	3
  1285  000140                     _Vin_last:
  1286                           	opt stack 0
  1287  000140                     	ds	3
  1288  000143                     _VL3_last:
  1289                           	opt stack 0
  1290  000143                     	ds	3
  1291  000146                     _VL2_last:
  1292                           	opt stack 0
  1293  000146                     	ds	3
  1294  000149                     _VL1_last:
  1295                           	opt stack 0
  1296  000149                     	ds	3
  1297  00014C                     _time_zone:
  1298                           	opt stack 0
  1299  00014C                     	ds	2
  1300  00014E                     _tx_buffer:
  1301                           	opt stack 0
  1302  00014E                     	ds	40
  1303  000176                     asctime@buf:
  1304                           	opt stack 0
  1305  000176                     	ds	27
  1306  000191                     _rx_buffer:
  1307                           	opt stack 0
  1308  000191                     	ds	20
  1309  0001A5                     gmtime@tim:
  1310                           	opt stack 0
  1311  0001A5                     	ds	18
  1312                           tblptru	equ	0xFF8
  1313                           tblptrh	equ	0xFF7
  1314                           tblptrl	equ	0xFF6
  1315                           tablat	equ	0xFF5
  1316                           postinc0	equ	0xFEE
  1317                           wreg	equ	0xFE8
  1318                           
  1319                           	psect	cstackBANK1
  1320  0001B7                     __pcstackBANK1:
  1321                           	opt stack 0
  1322  0001B7                     read_command@sep_tok:
  1323                           	opt stack 0
  1324  0001B7                     Display_Data@buffer:
  1325                           	opt stack 0
  1326                           
  1327                           ; 20 bytes @ 0x0
  1328  0001B7                     	ds	2
  1329  0001B9                     read_command@i:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x2
  1333  0001B9                     	ds	2
  1334  0001BB                     read_command@ptr:
  1335                           	opt stack 0
  1336                           
  1337                           ; 6 bytes @ 0x4
  1338  0001BB                     	ds	16
  1339  0001CB                     Display_Data@buff_len:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x14
  1343  0001CB                     	ds	1
  1344  0001CC                     ??_main:
  1345                           
  1346                           ; 1 bytes @ 0x15
  1347  0001CC                     	ds	1
  1348  0001CD                     main@BackLight:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x16
  1352  0001CD                     	ds	1
  1353  0001CE                     main@code:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x17
  1357  0001CE                     	ds	2
  1358  0001D0                     main@p_len:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x19
  1362  0001D0                     	ds	2
  1363  0001D2                     main@p:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x1B
  1367  0001D2                     	ds	2
  1368  0001D4                     main@voltage_status:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x1D
  1372  0001D4                     	ds	1
  1373  0001D5                     main@sys_time:
  1374                           	opt stack 0
  1375                           
  1376                           ; 4 bytes @ 0x1E
  1377  0001D5                     	ds	4
  1378  0001D9                     main@i:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x22
  1382  0001D9                     	ds	2
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           postinc0	equ	0xFEE
  1388                           wreg	equ	0xFE8
  1389                           
  1390                           	psect	cstackBANK0
  1391  000060                     __pcstackBANK0:
  1392                           	opt stack 0
  1393  000060                     ??_atoi:
  1394  000060                     ??_bcdTOint:
  1395  000060                     ?___lwdiv:
  1396                           	opt stack 0
  1397  000060                     ?___ftadd:
  1398                           	opt stack 0
  1399  000060                     ___lwdiv@dividend:
  1400                           	opt stack 0
  1401  000060                     ___ftadd@f1:
  1402                           	opt stack 0
  1403  000060                     gmtime@tc:
  1404                           	opt stack 0
  1405  000060                     Get_Variables@data:
  1406                           	opt stack 0
  1407  000060                     Save_Variables@data:
  1408                           	opt stack 0
  1409                           
  1410                           ; 53 bytes @ 0x0
  1411  000060                     	ds	2
  1412  000062                     atoi@sign:
  1413                           	opt stack 0
  1414  000062                     ___lwdiv@divisor:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x2
  1418  000062                     	ds	1
  1419  000063                     atoi@a:
  1420                           	opt stack 0
  1421  000063                     ___ftadd@f2:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x3
  1425  000063                     	ds	1
  1426  000064                     ??_localtime:
  1427  000064                     ___lwdiv@counter:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x4
  1431  000064                     	ds	1
  1432  000065                     ?_intTObcd:
  1433                           	opt stack 0
  1434  000065                     lcd_display@var:
  1435                           	opt stack 0
  1436  000065                     intTObcd@v:
  1437                           	opt stack 0
  1438  000065                     ___lwdiv@quotient:
  1439                           	opt stack 0
  1440                           
  1441                           ; 2 bytes @ 0x5
  1442  000065                     	ds	1
  1443  000066                     ??___ftadd:
  1444                           
  1445                           ; 1 bytes @ 0x6
  1446  000066                     	ds	1
  1447  000067                     ?_years_to_days:
  1448                           	opt stack 0
  1449  000067                     lcd_display@data:
  1450                           	opt stack 0
  1451  000067                     intTObcd@total:
  1452                           	opt stack 0
  1453  000067                     years_to_days@yr:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x7
  1457  000067                     	ds	1
  1458  000068                     localtime@t:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x8
  1462  000068                     	ds	1
  1463  000069                     ___ftadd@sign:
  1464                           	opt stack 0
  1465  000069                     lcd_display@val:
  1466                           	opt stack 0
  1467  000069                     intTObcd@resultbase:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x9
  1471  000069                     	ds	1
  1472  00006A                     ___ftadd@exp2:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0xA
  1476  00006A                     	ds	1
  1477  00006B                     ___ftadd@exp1:
  1478                           	opt stack 0
  1479  00006B                     date_set@dat:
  1480                           	opt stack 0
  1481  00006B                     time_set@tim:
  1482                           	opt stack 0
  1483  00006B                     years_to_days@ret:
  1484                           	opt stack 0
  1485                           
  1486                           ; 4 bytes @ 0xB
  1487  00006B                     	ds	1
  1488  00006C                     ?_asctime:
  1489                           	opt stack 0
  1490  00006C                     ?___ftmul:
  1491                           	opt stack 0
  1492  00006C                     ?___ftsub:
  1493                           	opt stack 0
  1494  00006C                     asctime@tim:
  1495                           	opt stack 0
  1496  00006C                     ___ftmul@f1:
  1497                           	opt stack 0
  1498  00006C                     ___ftsub@f1:
  1499                           	opt stack 0
  1500                           
  1501                           ; 3 bytes @ 0xC
  1502  00006C                     	ds	1
  1503  00006D                     
  1504                           ; 1 bytes @ 0xD
  1505  00006D                     	ds	1
  1506  00006E                     _asctime$3559:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0xE
  1510  00006E                     	ds	1
  1511  00006F                     ?_ymd_to_scalar:
  1512                           	opt stack 0
  1513  00006F                     ymd_to_scalar@yr:
  1514                           	opt stack 0
  1515  00006F                     asctime@s:
  1516                           	opt stack 0
  1517  00006F                     ___ftmul@f2:
  1518                           	opt stack 0
  1519  00006F                     ___ftsub@f2:
  1520                           	opt stack 0
  1521  00006F                     time_set@data:
  1522                           	opt stack 0
  1523  00006F                     date_set@ptr:
  1524                           	opt stack 0
  1525                           
  1526                           ; 10 bytes @ 0xF
  1527  00006F                     	ds	2
  1528  000071                     ymd_to_scalar@mo:
  1529                           	opt stack 0
  1530  000071                     asctime@cp:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x11
  1534  000071                     	ds	1
  1535  000072                     ??___ftmul:
  1536                           
  1537                           ; 1 bytes @ 0x12
  1538  000072                     	ds	1
  1539  000073                     ?_ctime:
  1540                           	opt stack 0
  1541  000073                     ctime@tp:
  1542                           	opt stack 0
  1543  000073                     ymd_to_scalar@day:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x13
  1547  000073                     	ds	2
  1548  000075                     ??_ymd_to_scalar:
  1549  000075                     ___ftmul@exp:
  1550                           	opt stack 0
  1551  000075                     time_set@ptr:
  1552                           	opt stack 0
  1553                           
  1554                           ; 6 bytes @ 0x15
  1555  000075                     	ds	1
  1556  000076                     ___ftmul@f3_as_product:
  1557                           	opt stack 0
  1558                           
  1559                           ; 3 bytes @ 0x16
  1560  000076                     	ds	3
  1561  000079                     ___ftmul@cntr:
  1562                           	opt stack 0
  1563  000079                     date_set@sep_tok:
  1564                           	opt stack 0
  1565  000079                     _ymd_to_scalar$2959:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x19
  1569  000079                     	ds	1
  1570  00007A                     ___ftmul@sign:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x1A
  1574  00007A                     	ds	1
  1575  00007B                     ?___ftdiv:
  1576                           	opt stack 0
  1577  00007B                     ?_LowPass_VL1:
  1578                           	opt stack 0
  1579  00007B                     ?_LowPass_VL2:
  1580                           	opt stack 0
  1581  00007B                     ?_LowPass_VL3:
  1582                           	opt stack 0
  1583  00007B                     ?_LowPass_Vin:
  1584                           	opt stack 0
  1585  00007B                     ?_fround:
  1586                           	opt stack 0
  1587  00007B                     ?_scale:
  1588                           	opt stack 0
  1589  00007B                     time_set@sep_tok:
  1590                           	opt stack 0
  1591  00007B                     LowPass_VL1@val:
  1592                           	opt stack 0
  1593  00007B                     LowPass_VL2@val:
  1594                           	opt stack 0
  1595  00007B                     LowPass_VL3@val:
  1596                           	opt stack 0
  1597  00007B                     LowPass_Vin@val:
  1598                           	opt stack 0
  1599  00007B                     ___ftdiv@f1:
  1600                           	opt stack 0
  1601  00007B                     ymd_to_scalar@scalar:
  1602                           	opt stack 0
  1603  00007B                     date_set@data:
  1604                           	opt stack 0
  1605                           
  1606                           ; 8 bytes @ 0x1B
  1607  00007B                     	ds	2
  1608  00007D                     time_set@hour:
  1609                           	opt stack 0
  1610                           
  1611                           ; 3 bytes @ 0x1D
  1612  00007D                     	ds	1
  1613  00007E                     ___ftdiv@f2:
  1614                           	opt stack 0
  1615  00007E                     _LowPass_VL1$3548:
  1616                           	opt stack 0
  1617  00007E                     _LowPass_VL2$3549:
  1618                           	opt stack 0
  1619  00007E                     _LowPass_VL3$3550:
  1620                           	opt stack 0
  1621  00007E                     _LowPass_Vin$3551:
  1622                           	opt stack 0
  1623  00007E                     _fround$3556:
  1624                           	opt stack 0
  1625  00007E                     _scale$3557:
  1626                           	opt stack 0
  1627                           
  1628                           ; 3 bytes @ 0x1E
  1629  00007E                     	ds	1
  1630  00007F                     ?_mktime:
  1631                           	opt stack 0
  1632  00007F                     mktime@timeptr:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x1F
  1636  00007F                     	ds	1
  1637  000080                     time_set@i:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x20
  1641  000080                     	ds	1
  1642  000081                     ??___ftdiv:
  1643  000081                     scale@scl:
  1644                           	opt stack 0
  1645  000081                     LowPass_VL1@Vout:
  1646                           	opt stack 0
  1647  000081                     LowPass_VL2@Vout:
  1648                           	opt stack 0
  1649  000081                     LowPass_VL3@Vout:
  1650                           	opt stack 0
  1651  000081                     LowPass_Vin@Vout:
  1652                           	opt stack 0
  1653  000081                     _fround$3555:
  1654                           	opt stack 0
  1655                           
  1656                           ; 3 bytes @ 0x21
  1657  000081                     	ds	2
  1658  000083                     ??_mktime:
  1659  000083                     date_set@date:
  1660                           	opt stack 0
  1661                           
  1662                           ; 4 bytes @ 0x23
  1663  000083                     	ds	1
  1664  000084                     fround@prec:
  1665                           	opt stack 0
  1666  000084                     ___ftdiv@cntr:
  1667                           	opt stack 0
  1668                           
  1669                           ; 1 bytes @ 0x24
  1670  000084                     	ds	1
  1671  000085                     ___ftdiv@f3:
  1672                           	opt stack 0
  1673                           
  1674                           ; 3 bytes @ 0x25
  1675  000085                     	ds	2
  1676  000087                     date_set@i:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x27
  1680  000087                     	ds	1
  1681  000088                     ___ftdiv@exp:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0x28
  1685  000088                     	ds	1
  1686  000089                     ___ftdiv@sign:
  1687                           	opt stack 0
  1688  000089                     mktime@tt:
  1689                           	opt stack 0
  1690                           
  1691                           ; 4 bytes @ 0x29
  1692  000089                     	ds	1
  1693  00008A                     ?_Get_Control_Voltage:
  1694                           	opt stack 0
  1695  00008A                     ?_PID_Controller:
  1696                           	opt stack 0
  1697  00008A                     ?_strtod:
  1698                           	opt stack 0
  1699  00008A                     ?___fttol:
  1700                           	opt stack 0
  1701  00008A                     Get_Voltage_Data@check:
  1702                           	opt stack 0
  1703  00008A                     strtod@s:
  1704                           	opt stack 0
  1705  00008A                     PID_Controller@val:
  1706                           	opt stack 0
  1707  00008A                     ___fttol@f1:
  1708                           	opt stack 0
  1709                           
  1710                           ; 3 bytes @ 0x2A
  1711  00008A                     	ds	1
  1712  00008B                     Get_Voltage_Data@v1:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x2B
  1716  00008B                     	ds	1
  1717  00008C                     strtod@res:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x2C
  1721  00008C                     	ds	1
  1722  00008D                     Get_Control_Voltage@count:
  1723                           	opt stack 0
  1724  00008D                     time@t:
  1725                           	opt stack 0
  1726  00008D                     _PID_Controller$3552:
  1727                           	opt stack 0
  1728                           
  1729                           ; 3 bytes @ 0x2D
  1730  00008D                     	ds	1
  1731  00008E                     ??___fttol:
  1732  00008E                     strtod@eexp:
  1733                           	opt stack 0
  1734  00008E                     Get_Control_Voltage@volt:
  1735                           	opt stack 0
  1736                           
  1737                           ; 3 bytes @ 0x2E
  1738  00008E                     	ds	1
  1739  00008F                     strtod@flags:
  1740                           	opt stack 0
  1741  00008F                     time@time:
  1742                           	opt stack 0
  1743                           
  1744                           ; 3 bytes @ 0x2F
  1745  00008F                     	ds	1
  1746  000090                     strtod@expon:
  1747                           	opt stack 0
  1748  000090                     _PID_Controller$3553:
  1749                           	opt stack 0
  1750                           
  1751                           ; 3 bytes @ 0x30
  1752  000090                     	ds	1
  1753  000091                     strtod@_u:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0x31
  1757  000091                     	ds	1
  1758  000092                     time@date:
  1759                           	opt stack 0
  1760                           
  1761                           ; 4 bytes @ 0x32
  1762  000092                     	ds	1
  1763  000093                     ___fttol@sign1:
  1764                           	opt stack 0
  1765  000093                     _PID_Controller$3554:
  1766                           	opt stack 0
  1767                           
  1768                           ; 3 bytes @ 0x33
  1769  000093                     	ds	1
  1770  000094                     ___fttol@lval:
  1771                           	opt stack 0
  1772                           
  1773                           ; 4 bytes @ 0x34
  1774  000094                     	ds	1
  1775  000095                     ?_atof:
  1776                           	opt stack 0
  1777  000095                     atof@s:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x35
  1781  000095                     	ds	1
  1782  000096                     Control_Loop@voltage:
  1783                           	opt stack 0
  1784  000096                     time@DateTime:
  1785                           	opt stack 0
  1786                           
  1787                           ; 18 bytes @ 0x36
  1788  000096                     	ds	2
  1789  000098                     ___fttol@exp1:
  1790                           	opt stack 0
  1791                           
  1792                           ; 1 bytes @ 0x38
  1793  000098                     	ds	1
  1794  000099                     ?__doprnt:
  1795                           	opt stack 0
  1796  000099                     __doprnt@pb:
  1797                           	opt stack 0
  1798  000099                     Control_Loop@Control_Out:
  1799                           	opt stack 0
  1800                           
  1801                           ; 3 bytes @ 0x39
  1802  000099                     	ds	2
  1803  00009B                     __doprnt@f:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x3B
  1807  00009B                     	ds	2
  1808  00009D                     __doprnt@ap:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x3D
  1812  00009D                     	ds	2
  1813  00009F                     ??__doprnt:
  1814                           
  1815                           ; 1 bytes @ 0x3F
  1816  00009F                     	ds	6
  1817  0000A5                     __doprnt$3558:
  1818                           	opt stack 0
  1819                           
  1820                           ; 3 bytes @ 0x45
  1821  0000A5                     	ds	3
  1822  0000A8                     __doprnt@len:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0x48
  1826  0000A8                     	ds	2
  1827  0000AA                     __doprnt@cp:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x4A
  1831  0000AA                     	ds	2
  1832  0000AC                     __doprnt@flag:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x4C
  1836  0000AC                     	ds	2
  1837  0000AE                     __doprnt@ccnt:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x4E
  1841  0000AE                     	ds	2
  1842  0000B0                     __doprnt@exp:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x50
  1846  0000B0                     	ds	2
  1847  0000B2                     __doprnt@val:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x52
  1851  0000B2                     	ds	4
  1852  0000B6                     __doprnt@tmpval:
  1853                           	opt stack 0
  1854                           
  1855                           ; 4 bytes @ 0x56
  1856  0000B6                     	ds	4
  1857  0000BA                     __doprnt@fval:
  1858                           	opt stack 0
  1859                           
  1860                           ; 3 bytes @ 0x5A
  1861  0000BA                     	ds	3
  1862  0000BD                     __doprnt@prec:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x5D
  1866  0000BD                     	ds	2
  1867  0000BF                     __doprnt@c:
  1868                           	opt stack 0
  1869                           
  1870                           ; 1 bytes @ 0x5F
  1871  0000BF                     	ds	1
  1872  0000C0                     ?_sprintf:
  1873                           	opt stack 0
  1874  0000C0                     ?_printf:
  1875                           	opt stack 0
  1876  0000C0                     printf@f:
  1877                           	opt stack 0
  1878  0000C0                     sprintf@wh:
  1879                           	opt stack 0
  1880                           
  1881                           ; 2 bytes @ 0x60
  1882  0000C0                     	ds	2
  1883  0000C2                     sprintf@f:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x62
  1887  0000C2                     	ds	2
  1888  0000C4                     printf@ap:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x64
  1892  0000C4                     	ds	2
  1893  0000C6                     printf@pb:
  1894                           	opt stack 0
  1895                           
  1896                           ; 4 bytes @ 0x66
  1897  0000C6                     	ds	10
  1898  0000D0                     ??_sprintf:
  1899                           
  1900                           ; 1 bytes @ 0x70
  1901  0000D0                     	ds	2
  1902  0000D2                     sprintf@ap:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x72
  1906  0000D2                     	ds	2
  1907  0000D4                     sprintf@pb:
  1908                           	opt stack 0
  1909                           
  1910                           ; 4 bytes @ 0x74
  1911  0000D4                     	ds	4
  1912  0000D8                     reset_var@var:
  1913                           	opt stack 0
  1914  0000D8                     cal_analog@var:
  1915                           	opt stack 0
  1916  0000D8                     set_list@var:
  1917                           	opt stack 0
  1918  0000D8                     get_list@var:
  1919                           	opt stack 0
  1920                           
  1921                           ; 2 bytes @ 0x78
  1922  0000D8                     	ds	2
  1923  0000DA                     ??_get_list:
  1924  0000DA                     cal_analog@data:
  1925                           	opt stack 0
  1926  0000DA                     set_list@data:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x7A
  1930  0000DA                     	ds	2
  1931  0000DC                     cal_analog@val:
  1932                           	opt stack 0
  1933  0000DC                     set_list@val:
  1934                           	opt stack 0
  1935  0000DC                     get_list@systime:
  1936                           	opt stack 0
  1937                           
  1938                           ; 4 bytes @ 0x7C
  1939  0000DC                     	ds	4
  1940  0000E0                     get_list@t:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x80
  1944  0000E0                     	ds	2
  1945  0000E2                     read_command@rx_buff:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x82
  1949  0000E2                     	ds	2
  1950  0000E4                     read_command@tx_buff:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x84
  1954  0000E4                     	ds	2
  1955  0000E6                     
  1956                           ; 1 bytes @ 0x86
  1957  0000E6                     	ds	2
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           
  1965                           	psect	cstackCOMRAM
  1966  000001                     __pcstackCOMRAM:
  1967                           	opt stack 0
  1968  000001                     ??_TimerInt:
  1969  000001                     
  1970                           ; 1 bytes @ 0x0
  1971  000001                     	ds	23
  1972  000018                     TimerInt@stat:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x17
  1976  000018                     	ds	1
  1977  000019                     ??_check_start_flag:
  1978  000019                     ??_isdigit:
  1979  000019                     ??_isspace:
  1980  000019                     ??_IdleI2C:
  1981  000019                     ?_strcmp:
  1982                           	opt stack 0
  1983  000019                     ?_Get_Analog_Channel:
  1984                           	opt stack 0
  1985  000019                     ?_strlen:
  1986                           	opt stack 0
  1987  000019                     ?_strchr:
  1988                           	opt stack 0
  1989  000019                     ?___awmod:
  1990                           	opt stack 0
  1991  000019                     ?___lwmod:
  1992                           	opt stack 0
  1993  000019                     ?_Get_Voltage_Vin:
  1994                           	opt stack 0
  1995  000019                     ?_get_PID_Kp:
  1996                           	opt stack 0
  1997  000019                     ?_get_PID_Ti:
  1998                           	opt stack 0
  1999  000019                     ?_get_PID_Td:
  2000                           	opt stack 0
  2001  000019                     ?_get_PID_T:
  2002                           	opt stack 0
  2003  000019                     ?_get_PID_setpoint:
  2004                           	opt stack 0
  2005  000019                     ?_get_PID_deadband:
  2006                           	opt stack 0
  2007  000019                     ?_get_LP_RC_Constant:
  2008                           	opt stack 0
  2009  000019                     ?_get_max_VL:
  2010                           	opt stack 0
  2011  000019                     ?_get_min_VL:
  2012                           	opt stack 0
  2013  000019                     ?_get_PID_output:
  2014                           	opt stack 0
  2015  000019                     ?___ftpack:
  2016                           	opt stack 0
  2017  000019                     ?_get_VL1_zero:
  2018                           	opt stack 0
  2019  000019                     ?_get_VL2_zero:
  2020                           	opt stack 0
  2021  000019                     ?_get_VL3_zero:
  2022                           	opt stack 0
  2023  000019                     ?_get_VL1_span:
  2024                           	opt stack 0
  2025  000019                     ?_get_VL2_span:
  2026                           	opt stack 0
  2027  000019                     ?_get_VL3_span:
  2028                           	opt stack 0
  2029  000019                     ?_get_Vin_span:
  2030                           	opt stack 0
  2031  000019                     ?_get_Vin_zero:
  2032                           	opt stack 0
  2033  000019                     ?_get_max:
  2034                           	opt stack 0
  2035  000019                     ?_get_min:
  2036                           	opt stack 0
  2037  000019                     ?_Get_Voltage_VL1:
  2038                           	opt stack 0
  2039  000019                     ?_Get_Voltage_VL2:
  2040                           	opt stack 0
  2041  000019                     ?_Get_Voltage_VL3:
  2042                           	opt stack 0
  2043  000019                     ?__tdiv_to_l_:
  2044                           	opt stack 0
  2045  000019                     ?__div_to_l_:
  2046                           	opt stack 0
  2047  000019                     ?___lmul:
  2048                           	opt stack 0
  2049  000019                     ?___aldiv:
  2050                           	opt stack 0
  2051  000019                     ?___almod:
  2052                           	opt stack 0
  2053  000019                     ?___lldiv:
  2054                           	opt stack 0
  2055  000019                     rd_byte_EE@addr:
  2056                           	opt stack 0
  2057  000019                     wr_byte_EE@data:
  2058                           	opt stack 0
  2059  000019                     OpenI2C@slew:
  2060                           	opt stack 0
  2061  000019                     StartI2C@IE_stat:
  2062                           	opt stack 0
  2063  000019                     WriteI2C@data_out:
  2064                           	opt stack 0
  2065  000019                     RestartI2C@IE_stat:
  2066                           	opt stack 0
  2067  000019                     ReadI2C@IE_stat:
  2068                           	opt stack 0
  2069  000019                     AckI2C@IE_stat:
  2070                           	opt stack 0
  2071  000019                     StopI2C@IE_stat:
  2072                           	opt stack 0
  2073  000019                     Not_AckI2C@IE_stat:
  2074                           	opt stack 0
  2075  000019                     Rd_Digital_Inputs@Port_RD:
  2076                           	opt stack 0
  2077  000019                     check_V1_status@status:
  2078                           	opt stack 0
  2079  000019                     check_V2_status@status:
  2080                           	opt stack 0
  2081  000019                     check_V3_status@status:
  2082                           	opt stack 0
  2083  000019                     Open_Timer0@IE:
  2084                           	opt stack 0
  2085  000019                     putch@byte:
  2086                           	opt stack 0
  2087  000019                     ___lbdiv@divisor:
  2088                           	opt stack 0
  2089  000019                     OpenUSART@spbrg:
  2090                           	opt stack 0
  2091  000019                     ___awmod@dividend:
  2092                           	opt stack 0
  2093  000019                     ___lwmod@dividend:
  2094                           	opt stack 0
  2095  000019                     strcmp@s1:
  2096                           	opt stack 0
  2097  000019                     strlen@s:
  2098                           	opt stack 0
  2099  000019                     strchr@ptr:
  2100                           	opt stack 0
  2101  000019                     Set_LP_RC_constant@val:
  2102                           	opt stack 0
  2103  000019                     set_VL1_zero@val:
  2104                           	opt stack 0
  2105  000019                     set_VL2_zero@val:
  2106                           	opt stack 0
  2107  000019                     set_VL3_zero@val:
  2108                           	opt stack 0
  2109  000019                     set_Vin_zero@val:
  2110                           	opt stack 0
  2111  000019                     set_VL1_span@val:
  2112                           	opt stack 0
  2113  000019                     set_VL2_span@val:
  2114                           	opt stack 0
  2115  000019                     set_VL3_span@val:
  2116                           	opt stack 0
  2117  000019                     set_Vin_span@val:
  2118                           	opt stack 0
  2119  000019                     set_max_VL@val:
  2120                           	opt stack 0
  2121  000019                     set_min_VL@val:
  2122                           	opt stack 0
  2123  000019                     set_Deadband@val:
  2124                           	opt stack 0
  2125  000019                     set_PID_Kp@val:
  2126                           	opt stack 0
  2127  000019                     set_PID_Ki@val:
  2128                           	opt stack 0
  2129  000019                     set_PID_Kd@val:
  2130                           	opt stack 0
  2131  000019                     set_PID_T@val:
  2132                           	opt stack 0
  2133  000019                     set_PID_setpoint@val:
  2134                           	opt stack 0
  2135  000019                     __div_to_l_@f1:
  2136                           	opt stack 0
  2137  000019                     ___ftpack@arg:
  2138                           	opt stack 0
  2139  000019                     __tdiv_to_l_@f1:
  2140                           	opt stack 0
  2141  000019                     WriteIO5R@data:
  2142                           	opt stack 0
  2143  000019                     ___lmul@multiplier:
  2144                           	opt stack 0
  2145  000019                     ___aldiv@dividend:
  2146                           	opt stack 0
  2147  000019                     ___almod@dividend:
  2148                           	opt stack 0
  2149  000019                     ___lldiv@dividend:
  2150                           	opt stack 0
  2151                           
  2152                           ; 4 bytes @ 0x18
  2153  000019                     	ds	1
  2154  00001A                     rd_string_EE@lenght:
  2155                           	opt stack 0
  2156  00001A                     wr_byte_EE@addr:
  2157                           	opt stack 0
  2158  00001A                     OpenI2C@sync_mode:
  2159                           	opt stack 0
  2160  00001A                     WriteI2C@IE_stat:
  2161                           	opt stack 0
  2162  00001A                     Rd_Digital_Inputs@Temp_RD:
  2163                           	opt stack 0
  2164  00001A                     _isdigit$2880:
  2165                           	opt stack 0
  2166  00001A                     _isspace$2883:
  2167                           	opt stack 0
  2168  00001A                     ___lbdiv@dividend:
  2169                           	opt stack 0
  2170  00001A                     Open_Timer0@value:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x19
  2174  00001A                     	ds	1
  2175  00001B                     ??_Get_Analog_Channel:
  2176  00001B                     ??_strlen:
  2177  00001B                     wr_string_EE@lenght:
  2178                           	opt stack 0
  2179  00001B                     WriteStr_I2C@Reg_Addr:
  2180                           	opt stack 0
  2181  00001B                     ReadStr_I2C@Reg_Addr:
  2182                           	opt stack 0
  2183  00001B                     I2C_Send@command:
  2184                           	opt stack 0
  2185  00001B                     LCD_SetBackLight_Brightness@brightness:
  2186                           	opt stack 0
  2187  00001B                     LCD_SetContrast@val:
  2188                           	opt stack 0
  2189  00001B                     LCD_SetCursor_Position@column:
  2190                           	opt stack 0
  2191  00001B                     OpenUSART@config:
  2192                           	opt stack 0
  2193  00001B                     isdigit@c:
  2194                           	opt stack 0
  2195  00001B                     isspace@c:
  2196                           	opt stack 0
  2197  00001B                     ___lbdiv@counter:
  2198                           	opt stack 0
  2199  00001B                     rd_string_EE@buffer:
  2200                           	opt stack 0
  2201  00001B                     LCD_WriteStr@Str:
  2202                           	opt stack 0
  2203  00001B                     ___awmod@divisor:
  2204                           	opt stack 0
  2205  00001B                     ___lwmod@divisor:
  2206                           	opt stack 0
  2207  00001B                     strcmp@s2:
  2208                           	opt stack 0
  2209  00001B                     strchr@chr:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x1A
  2213  00001B                     	ds	1
  2214  00001C                     ?___ftneg:
  2215                           	opt stack 0
  2216  00001C                     Get_Analog_Channel@channel:
  2217                           	opt stack 0
  2218  00001C                     LCD_SetCursor_Position@row:
  2219                           	opt stack 0
  2220  00001C                     Open_Timer0@config:
  2221                           	opt stack 0
  2222  00001C                     ___ftpack@exp:
  2223                           	opt stack 0
  2224  00001C                     ___lbdiv@quotient:
  2225                           	opt stack 0
  2226  00001C                     wr_string_EE@buffer:
  2227                           	opt stack 0
  2228  00001C                     WriteStr_I2C@Str:
  2229                           	opt stack 0
  2230  00001C                     ReadStr_I2C@Str:
  2231                           	opt stack 0
  2232  00001C                     set_max@val:
  2233                           	opt stack 0
  2234  00001C                     set_min@val:
  2235                           	opt stack 0
  2236  00001C                     __div_to_l_@f2:
  2237                           	opt stack 0
  2238  00001C                     __tdiv_to_l_@f2:
  2239                           	opt stack 0
  2240  00001C                     ___ftneg@f1:
  2241                           	opt stack 0
  2242                           
  2243                           ; 3 bytes @ 0x1B
  2244  00001C                     	ds	1
  2245  00001D                     ??_strcmp:
  2246  00001D                     ?_strspn:
  2247                           	opt stack 0
  2248  00001D                     ?_strcspn:
  2249                           	opt stack 0
  2250  00001D                     rd_string_EE@addr:
  2251                           	opt stack 0
  2252  00001D                     LCD_WriteStr@Str_Size:
  2253                           	opt stack 0
  2254  00001D                     ___awmod@counter:
  2255                           	opt stack 0
  2256  00001D                     ___ftpack@sign:
  2257                           	opt stack 0
  2258  00001D                     ___lwmod@counter:
  2259                           	opt stack 0
  2260  00001D                     Get_Analog_Channel@ADC_data:
  2261                           	opt stack 0
  2262  00001D                     Open_Timer0@data:
  2263                           	opt stack 0
  2264  00001D                     strlen@cp:
  2265                           	opt stack 0
  2266  00001D                     strcspn@s1:
  2267                           	opt stack 0
  2268  00001D                     strspn@s1:
  2269                           	opt stack 0
  2270  00001D                     WriteIO5R@temp:
  2271                           	opt stack 0
  2272  00001D                     ___lmul@multiplicand:
  2273                           	opt stack 0
  2274  00001D                     ___aldiv@divisor:
  2275                           	opt stack 0
  2276  00001D                     ___almod@divisor:
  2277                           	opt stack 0
  2278  00001D                     ___lldiv@divisor:
  2279                           	opt stack 0
  2280                           
  2281                           ; 4 bytes @ 0x1C
  2282  00001D                     	ds	1
  2283  00001E                     ??___ftpack:
  2284  00001E                     ?_dylen:
  2285                           	opt stack 0
  2286  00001E                     ?_isleap:
  2287                           	opt stack 0
  2288  00001E                     wr_string_EE@addr:
  2289                           	opt stack 0
  2290  00001E                     rd_string_EE@i:
  2291                           	opt stack 0
  2292  00001E                     WriteStr_I2C@Str_Size:
  2293                           	opt stack 0
  2294  00001E                     ReadStr_I2C@Str_Size:
  2295                           	opt stack 0
  2296  00001E                     LCD_WriteStr@i:
  2297                           	opt stack 0
  2298  00001E                     ___awmod@sign:
  2299                           	opt stack 0
  2300  00001E                     strcmp@r:
  2301                           	opt stack 0
  2302  00001E                     dylen@yr:
  2303                           	opt stack 0
  2304  00001E                     isleap@yr:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x1D
  2308  00001E                     	ds	1
  2309  00001F                     ??__tdiv_to_l_:
  2310  00001F                     ?_Get_Variables:
  2311                           	opt stack 0
  2312  00001F                     ?___awdiv:
  2313                           	opt stack 0
  2314  00001F                     wr_string_EE@i:
  2315                           	opt stack 0
  2316  00001F                     WriteStr_I2C@i:
  2317                           	opt stack 0
  2318  00001F                     ReadStr_I2C@Mod_Addr:
  2319                           	opt stack 0
  2320  00001F                     LCD_WriteStr@stat:
  2321                           	opt stack 0
  2322  00001F                     ___awdiv@dividend:
  2323                           	opt stack 0
  2324  00001F                     strcspn@s2:
  2325                           	opt stack 0
  2326  00001F                     strspn@s2:
  2327                           	opt stack 0
  2328  00001F                     ___ftge@ff1:
  2329                           	opt stack 0
  2330  00001F                     __div_to_l_@quot:
  2331                           	opt stack 0
  2332                           
  2333                           ; 4 bytes @ 0x1E
  2334  00001F                     	ds	1
  2335  000020                     ??_dylen:
  2336  000020                     ??_isleap:
  2337  000020                     WriteStr_I2C@Mod_Addr:
  2338                           	opt stack 0
  2339  000020                     ReadStr_I2C@stat:
  2340                           	opt stack 0
  2341                           
  2342                           ; 1 bytes @ 0x1F
  2343  000020                     	ds	1
  2344  000021                     ??_strspn:
  2345  000021                     ??_strcspn:
  2346  000021                     ?___altoft:
  2347                           	opt stack 0
  2348  000021                     ?___lbtoft:
  2349                           	opt stack 0
  2350  000021                     ?___lltoft:
  2351                           	opt stack 0
  2352  000021                     ?___lwtoft:
  2353                           	opt stack 0
  2354  000021                     WriteStr_I2C@stat:
  2355                           	opt stack 0
  2356  000021                     WriteIO5R@bits:
  2357                           	opt stack 0
  2358  000021                     ___aldiv@counter:
  2359                           	opt stack 0
  2360  000021                     ___almod@counter:
  2361                           	opt stack 0
  2362  000021                     get_time@Time_Data:
  2363                           	opt stack 0
  2364  000021                     get_date@Date_Data:
  2365                           	opt stack 0
  2366  000021                     ___awdiv@divisor:
  2367                           	opt stack 0
  2368  000021                     ___lwtoft@c:
  2369                           	opt stack 0
  2370  000021                     ___lmul@product:
  2371                           	opt stack 0
  2372  000021                     ___altoft@c:
  2373                           	opt stack 0
  2374  000021                     ___lldiv@quotient:
  2375                           	opt stack 0
  2376  000021                     ___lltoft@c:
  2377                           	opt stack 0
  2378                           
  2379                           ; 4 bytes @ 0x20
  2380  000021                     	ds	1
  2381  000022                     ___aldiv@sign:
  2382                           	opt stack 0
  2383  000022                     ___almod@sign:
  2384                           	opt stack 0
  2385  000022                     _isleap$2946:
  2386                           	opt stack 0
  2387  000022                     set_time@Time_Data:
  2388                           	opt stack 0
  2389  000022                     set_date@Date_Data:
  2390                           	opt stack 0
  2391  000022                     strcspn@i:
  2392                           	opt stack 0
  2393  000022                     strspn@i:
  2394                           	opt stack 0
  2395  000022                     ___ftge@ff2:
  2396                           	opt stack 0
  2397  000022                     __tdiv_to_l_@quot:
  2398                           	opt stack 0
  2399                           
  2400                           ; 4 bytes @ 0x21
  2401  000022                     	ds	1
  2402  000023                     ___awdiv@counter:
  2403                           	opt stack 0
  2404  000023                     __div_to_l_@cntr:
  2405                           	opt stack 0
  2406  000023                     ___aldiv@quotient:
  2407                           	opt stack 0
  2408                           
  2409                           ; 4 bytes @ 0x22
  2410  000023                     	ds	1
  2411  000024                     ?_strtok:
  2412                           	opt stack 0
  2413  000024                     ___awdiv@sign:
  2414                           	opt stack 0
  2415  000024                     __div_to_l_@exp1:
  2416                           	opt stack 0
  2417  000024                     ___lbtoft@c:
  2418                           	opt stack 0
  2419  000024                     strtok@s1:
  2420                           	opt stack 0
  2421                           
  2422                           ; 2 bytes @ 0x23
  2423  000024                     	ds	1
  2424  000025                     ??___altoft:
  2425  000025                     ??___ftge:
  2426  000025                     ??___lltoft:
  2427  000025                     ___lldiv@counter:
  2428                           	opt stack 0
  2429  000025                     ___awdiv@quotient:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0x24
  2433  000025                     	ds	1
  2434  000026                     ?___llmod:
  2435                           	opt stack 0
  2436  000026                     __tdiv_to_l_@cntr:
  2437                           	opt stack 0
  2438  000026                     strtok@s2:
  2439                           	opt stack 0
  2440  000026                     ___llmod@dividend:
  2441                           	opt stack 0
  2442                           
  2443                           ; 4 bytes @ 0x25
  2444  000026                     	ds	1
  2445  000027                     ?_gmtime:
  2446                           	opt stack 0
  2447  000027                     ?___wmul:
  2448                           	opt stack 0
  2449  000027                     __tdiv_to_l_@exp1:
  2450                           	opt stack 0
  2451  000027                     ___wmul@multiplier:
  2452                           	opt stack 0
  2453  000027                     gmtime@tp:
  2454                           	opt stack 0
  2455  000027                     put2d@cp:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x26
  2459  000027                     	ds	1
  2460  000028                     Check_VL_N@val:
  2461                           	opt stack 0
  2462                           
  2463                           ; 3 bytes @ 0x27
  2464  000028                     	ds	1
  2465  000029                     ??_gmtime:
  2466  000029                     ___altoft@exp:
  2467                           	opt stack 0
  2468  000029                     ___lltoft@exp:
  2469                           	opt stack 0
  2470  000029                     put2d@i:
  2471                           	opt stack 0
  2472  000029                     ___wmul@multiplicand:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x28
  2476  000029                     	ds	1
  2477  00002A                     ___altoft@sign:
  2478                           	opt stack 0
  2479  00002A                     put2d@cl:
  2480                           	opt stack 0
  2481  00002A                     ___llmod@divisor:
  2482                           	opt stack 0
  2483                           
  2484                           ; 4 bytes @ 0x29
  2485  00002A                     	ds	1
  2486  00002B                     put2d@ct:
  2487                           	opt stack 0
  2488  00002B                     ___wmul@product:
  2489                           	opt stack 0
  2490                           
  2491                           ; 2 bytes @ 0x2A
  2492  00002B                     	ds	1
  2493  00002C                     ?_localtime:
  2494                           	opt stack 0
  2495  00002C                     localtime@tp:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x2B
  2499  00002C                     	ds	1
  2500  00002D                     ??_Get_Control_Voltage:
  2501  00002D                     ??_strtod:
  2502  00002D                     ??_years_to_days:
  2503  00002D                     ?_atoi:
  2504                           	opt stack 0
  2505  00002D                     ?_bcdTOint:
  2506                           	opt stack 0
  2507  00002D                     ?_months_to_days:
  2508                           	opt stack 0
  2509  00002D                     bcdTOint@bcdByte:
  2510                           	opt stack 0
  2511  00002D                     atoi@s:
  2512                           	opt stack 0
  2513  00002D                     months_to_days@month:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x2C
  2517  00002D                     	ds	1
  2518  00002E                     ___llmod@counter:
  2519                           	opt stack 0
  2520                           
  2521                           ; 1 bytes @ 0x2D
  2522  00002E                     	ds	1
  2523  00002F                     tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           
  2530                           ; 1 bytes @ 0x2E
  2531 ;;
  2532 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2533 ;;
  2534 ;; *************** function _main *****************
  2535 ;; Defined at:
  2536 ;;		line 54 in file "main.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;  buffer         20    0        unsigned char [20]
  2541 ;;  sys_time        4   30[BANK1 ] long 
  2542 ;;  Control_Out     3    0        float 
  2543 ;;  voltage         3    0        float 
  2544 ;;  t               3    0        PTR struct tm
  2545 ;;  i               2   34[BANK1 ] int 
  2546 ;;  p               2   27[BANK1 ] PTR unsigned char 
  2547 ;;		 -> STR_71(54), 
  2548 ;;  p_len           2   25[BANK1 ] int 
  2549 ;;  code            2   23[BANK1 ] int 
  2550 ;;  voltage_stat    1   29[BANK1 ] struct data_check
  2551 ;;  BackLight       1   22[BANK1 ] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2561 ;;      Params:         0       0       0       0       0       0       0
  2562 ;;      Locals:         0       0      14       0       0       0       0
  2563 ;;      Temps:          0       0       1       0       0       0       0
  2564 ;;      Totals:         0       0      15       0       0       0       0
  2565 ;;Total ram usage:       15 bytes
  2566 ;; Hardware stack levels required when called:    8
  2567 ;; This function calls:
  2568 ;;		_Control_Loop
  2569 ;;		_Display_Data
  2570 ;;		_Get_Variables
  2571 ;;		_Get_Voltage_Data
  2572 ;;		_Get_Voltage_Vin
  2573 ;;		_LCD_Clear
  2574 ;;		_LCD_WriteStr
  2575 ;;		_Manual_Control
  2576 ;;		_OpenADC
  2577 ;;		_OpenI2C
  2578 ;;		_OpenIO5R
  2579 ;;		_OpenUSART
  2580 ;;		_Open_Timer0
  2581 ;;		_Rd_Digital_Inputs
  2582 ;;		_Save_Variables
  2583 ;;		_Set_LP_RC_constant
  2584 ;;		_WriteIO5R
  2585 ;;		___ftdiv
  2586 ;;		___ftmul
  2587 ;;		___fttol
  2588 ;;		_check_V1_status
  2589 ;;		_check_V2_status
  2590 ;;		_check_V3_status
  2591 ;;		_check_start_flag
  2592 ;;		_ctime
  2593 ;;		_get_LP_RC_Constant
  2594 ;;		_printf
  2595 ;;		_read_command
  2596 ;;		_set_Deadband
  2597 ;;		_set_PID_Kd
  2598 ;;		_set_PID_Ki
  2599 ;;		_set_PID_Kp
  2600 ;;		_set_PID_T
  2601 ;;		_set_PID_setpoint
  2602 ;;		_set_VL1_span
  2603 ;;		_set_VL1_zero
  2604 ;;		_set_VL2_span
  2605 ;;		_set_VL2_zero
  2606 ;;		_set_VL3_span
  2607 ;;		_set_VL3_zero
  2608 ;;		_set_Vin_span
  2609 ;;		_set_Vin_zero
  2610 ;;		_set_max
  2611 ;;		_set_max_VL
  2612 ;;		_set_min
  2613 ;;		_set_min_VL
  2614 ;;		_strlen
  2615 ;;		_time
  2616 ;; This function is called by:
  2617 ;;		Startup code after reset
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text0
  2622  001BB0                     __ptext0:
  2623                           	opt stack 0
  2624  001BB0                     _main:
  2625                           	opt stack 0
  2626  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  2627                           
  2628                           ;main.c: 57: time_t sys_time;
  2629                           ;main.c: 58: struct tm *t;
  2630                           ;main.c: 59: int i,code;
  2631                           ;main.c: 60: union data_check voltage_status;
  2632                           ;main.c: 61: float voltage, Control_Out;
  2633                           ;main.c: 65: char *p = "      RD3 CA\nVR version 1.1 2017\n\n Iniciando Sistema\n";
  2634                           
  2635                           ;incstack = 0
  2636  001BB2  0EA5               	movlw	low STR_71
  2637  001BB4  0101               	movlb	1	; () banked
  2638  001BB6  6FD2               	movwf	main@p& (0+255),b
  2639  001BB8  0E7D               	movlw	high STR_71
  2640  001BBA  0101               	movlb	1	; () banked
  2641  001BBC  6FD3               	movwf	(main@p+1)& (0+255),b
  2642                           
  2643                           ; BSR set to: 1
  2644                           ;main.c: 66: int p_len;
  2645                           ;main.c: 67: char buffer[20];
  2646                           ;main.c: 68: char BackLight=0;
  2647  001BBE  0E00               	movlw	0
  2648  001BC0  0101               	movlb	1	; () banked
  2649  001BC2  6FCD               	movwf	main@BackLight& (0+255),b
  2650                           
  2651                           ; BSR set to: 1
  2652                           ;main.c: 72: TRISA=0xff;
  2653  001BC4  6892               	setf	3986,c	;volatile
  2654                           
  2655                           ; BSR set to: 1
  2656                           ;main.c: 73: TRISB=0xff;
  2657  001BC6  6893               	setf	3987,c	;volatile
  2658                           
  2659                           ; BSR set to: 1
  2660                           ;main.c: 74: TRISC=0xff;
  2661  001BC8  6894               	setf	3988,c	;volatile
  2662                           
  2663                           ; BSR set to: 1
  2664                           ;main.c: 77: OpenUSART(0b01111111&0b11111111&0b11111111&0b11111111&0b11111101&0b11111110
      +                          ,64);
  2665  001BCA  0E00               	movlw	0
  2666  001BCC  6E1A               	movwf	OpenUSART@spbrg+1,c
  2667  001BCE  0E40               	movlw	64
  2668  001BD0  6E19               	movwf	OpenUSART@spbrg,c
  2669  001BD2  0E7C               	movlw	124
  2670  001BD4  ECBB  F02D         	call	_OpenUSART
  2671                           
  2672                           ;main.c: 78: rx_flag=0;
  2673  001BD8  0E00               	movlw	0
  2674  001BDA  0100               	movlb	0	; () banked
  2675  001BDC  6FFA               	movwf	_rx_flag& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 79: rx_pointer=0;
  2679  001BDE  0E00               	movlw	0
  2680  001BE0  6E46               	movwf	_rx_pointer,c
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 80: tx_flag=0;
  2684  001BE2  0E00               	movlw	0
  2685  001BE4  0100               	movlb	0	; () banked
  2686  001BE6  6FF9               	movwf	_tx_flag& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 81: tx_pointer=0;
  2690  001BE8  0E00               	movlw	0
  2691  001BEA  6E45               	movwf	_tx_pointer,c
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 82: for(i=0;i<10000;i++);
  2695  001BEC  0E00               	movlw	0
  2696  001BEE  0101               	movlb	1	; () banked
  2697  001BF0  6FDA               	movwf	(main@i+1)& (0+255),b
  2698  001BF2  0E00               	movlw	0
  2699  001BF4  6FD9               	movwf	main@i& (0+255),b
  2700  001BF6                     l11489:
  2701  001BF6  FFFF               	dw	65535	; assembler added errata NOP
  2702                           
  2703                           ; BSR set to: 1
  2704  001BF8  0101               	movlb	1	; () banked
  2705  001BFA  BFDA               	btfsc	(main@i+1)& (0+255),7,b
  2706  001BFC  D008               	goto	l988
  2707  001BFE  0E10               	movlw	16
  2708  001C00  0101               	movlb	1	; () banked
  2709  001C02  5DD9               	subwf	main@i& (0+255),w,b
  2710  001C04  0E27               	movlw	39
  2711  001C06  0101               	movlb	1	; () banked
  2712  001C08  59DA               	subwfb	(main@i+1)& (0+255),w,b
  2713  001C0A  B0D8               	btfsc	status,0,c
  2714  001C0C  D005               	goto	u11510
  2715  001C0E                     l988:
  2716  001C0E  FFFF               	dw	65535	; assembler added errata NOP
  2717                           
  2718                           ; BSR set to: 1
  2719                           
  2720                           ; BSR set to: 1
  2721  001C10  0101               	movlb	1	; () banked
  2722  001C12  4BD9               	infsnz	main@i& (0+255),f,b
  2723  001C14  2BDA               	incf	(main@i+1)& (0+255),f,b
  2724  001C16  D7EF               	goto	l11489
  2725  001C18                     u11510:
  2726  001C18  FFFF               	dw	65535	; assembler added errata NOP
  2727                           
  2728                           ; BSR set to: 1
  2729                           ;main.c: 85: printf("Inicializando Bus I2C...");
  2730                           
  2731                           ; BSR set to: 1
  2732  001C1A  0E7C               	movlw	low STR_72
  2733  001C1C  0100               	movlb	0	; () banked
  2734  001C1E  6FC0               	movwf	printf@f& (0+255),b
  2735  001C20  0E7E               	movlw	high STR_72
  2736  001C22  0100               	movlb	0	; () banked
  2737  001C24  6FC1               	movwf	(printf@f+1)& (0+255),b
  2738  001C26  ECD4  F02B         	call	_printf	;wreg free
  2739                           
  2740                           ;main.c: 86: OpenI2C(8,0xC0);
  2741  001C2A  0EC0               	movlw	192
  2742  001C2C  6E19               	movwf	OpenI2C@slew,c
  2743  001C2E  0E08               	movlw	8
  2744  001C30  EC67  F028         	call	_OpenI2C
  2745                           
  2746                           ;main.c: 87: printf("Listo.\n");
  2747  001C34  0EA4               	movlw	low (STR_77+15)
  2748  001C36  0100               	movlb	0	; () banked
  2749  001C38  6FC0               	movwf	printf@f& (0+255),b
  2750  001C3A  0E7E               	movlw	high (STR_77+15)
  2751  001C3C  0100               	movlb	0	; () banked
  2752  001C3E  6FC1               	movwf	(printf@f+1)& (0+255),b
  2753  001C40  ECD4  F02B         	call	_printf	;wreg free
  2754                           
  2755                           ;main.c: 90: time(&sys_time);
  2756  001C44  0ED5               	movlw	low main@sys_time
  2757  001C46  0100               	movlb	0	; () banked
  2758  001C48  6F8D               	movwf	time@t& (0+255),b
  2759  001C4A  0E01               	movlw	high main@sys_time
  2760  001C4C  0100               	movlb	0	; () banked
  2761  001C4E  6F8E               	movwf	(time@t+1)& (0+255),b
  2762  001C50  EC86  F035         	call	_time	;wreg free
  2763                           
  2764                           ;main.c: 91: printf("Inicializando fecha y hora del sistema.\n");
  2765  001C54  0EDB               	movlw	low STR_74
  2766  001C56  0100               	movlb	0	; () banked
  2767  001C58  6FC0               	movwf	printf@f& (0+255),b
  2768  001C5A  0E7D               	movlw	high STR_74
  2769  001C5C  0100               	movlb	0	; () banked
  2770  001C5E  6FC1               	movwf	(printf@f+1)& (0+255),b
  2771  001C60  ECD4  F02B         	call	_printf	;wreg free
  2772                           
  2773                           ;main.c: 94: OpenIO5R();
  2774  001C64  EC95  F029         	call	_OpenIO5R	;wreg free
  2775                           
  2776                           ;main.c: 95: printf("Inicializando modulo IOR5...");
  2777  001C68  0E29               	movlw	low STR_75
  2778  001C6A  0100               	movlb	0	; () banked
  2779  001C6C  6FC0               	movwf	printf@f& (0+255),b
  2780  001C6E  0E7E               	movlw	high STR_75
  2781  001C70  0100               	movlb	0	; () banked
  2782  001C72  6FC1               	movwf	(printf@f+1)& (0+255),b
  2783  001C74  ECD4  F02B         	call	_printf	;wreg free
  2784                           
  2785                           ;main.c: 96: printf("Listo.\n");
  2786  001C78  0EA4               	movlw	low (STR_77+15)
  2787  001C7A  0100               	movlb	0	; () banked
  2788  001C7C  6FC0               	movwf	printf@f& (0+255),b
  2789  001C7E  0E7E               	movlw	high (STR_77+15)
  2790  001C80  0100               	movlb	0	; () banked
  2791  001C82  6FC1               	movwf	(printf@f+1)& (0+255),b
  2792  001C84  ECD4  F02B         	call	_printf	;wreg free
  2793                           
  2794                           ;main.c: 97: OpenADC();
  2795  001C88  EC33  F026         	call	_OpenADC	;wreg free
  2796                           
  2797                           ;main.c: 98: printf("ADC sistema... Listo.\n");
  2798  001C8C  0E95               	movlw	low STR_77
  2799  001C8E  0100               	movlb	0	; () banked
  2800  001C90  6FC0               	movwf	printf@f& (0+255),b
  2801  001C92  0E7E               	movlw	high STR_77
  2802  001C94  0100               	movlb	0	; () banked
  2803  001C96  6FC1               	movwf	(printf@f+1)& (0+255),b
  2804  001C98  ECD4  F02B         	call	_printf	;wreg free
  2805                           
  2806                           ;main.c: 99: Outputs.Output=0;
  2807  001C9C  0E00               	movlw	0
  2808  001C9E  0100               	movlb	0	; () banked
  2809  001CA0  6FE8               	movwf	_Outputs& (0+255),b
  2810  001CA2  0E00               	movlw	0
  2811  001CA4  6FE9               	movwf	(_Outputs+1)& (0+255),b
  2812  001CA6  0E00               	movlw	0
  2813  001CA8  6FEA               	movwf	(_Outputs+2)& (0+255),b
  2814  001CAA  0E00               	movlw	0
  2815  001CAC  6FEB               	movwf	(_Outputs+3)& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 100: WriteIO5R(Outputs.Output);
  2819  001CAE  C0E8  F019         	movff	_Outputs,WriteIO5R@data
  2820  001CB2  C0E9  F01A         	movff	_Outputs+1,WriteIO5R@data+1
  2821  001CB6  C0EA  F01B         	movff	_Outputs+2,WriteIO5R@data+2
  2822  001CBA  C0EB  F01C         	movff	_Outputs+3,WriteIO5R@data+3
  2823  001CBE  ECBE  F01F         	call	_WriteIO5R	;wreg free
  2824                           
  2825                           ;main.c: 102: set_max(0.0);
  2826  001CC2  0E00               	movlw	0
  2827  001CC4  6E1C               	movwf	set_max@val,c
  2828  001CC6  0E00               	movlw	0
  2829  001CC8  6E1D               	movwf	set_max@val+1,c
  2830  001CCA  0E00               	movlw	0
  2831  001CCC  6E1E               	movwf	set_max@val+2,c
  2832  001CCE  ECAB  F027         	call	_set_max	;wreg free
  2833                           
  2834                           ;main.c: 103: set_min(200.0);
  2835  001CD2  0E00               	movlw	0
  2836  001CD4  6E1C               	movwf	set_min@val,c
  2837  001CD6  0E48               	movlw	72
  2838  001CD8  6E1D               	movwf	set_min@val+1,c
  2839  001CDA  0E43               	movlw	67
  2840  001CDC  6E1E               	movwf	set_min@val+2,c
  2841  001CDE  ECB4  F027         	call	_set_min	;wreg free
  2842                           
  2843                           ;main.c: 105: time(&sys_time);
  2844  001CE2  0ED5               	movlw	low main@sys_time
  2845  001CE4  0100               	movlb	0	; () banked
  2846  001CE6  6F8D               	movwf	time@t& (0+255),b
  2847  001CE8  0E01               	movlw	high main@sys_time
  2848  001CEA  0100               	movlb	0	; () banked
  2849  001CEC  6F8E               	movwf	(time@t+1)& (0+255),b
  2850  001CEE  EC86  F035         	call	_time	;wreg free
  2851                           
  2852                           ;main.c: 107: printf("%s\n",ctime(&sys_time));
  2853  001CF2  0ECD               	movlw	low STR_78
  2854  001CF4  0100               	movlb	0	; () banked
  2855  001CF6  6FC0               	movwf	printf@f& (0+255),b
  2856  001CF8  0E7F               	movlw	high STR_78
  2857  001CFA  0100               	movlb	0	; () banked
  2858  001CFC  6FC1               	movwf	(printf@f+1)& (0+255),b
  2859  001CFE  0ED5               	movlw	low main@sys_time
  2860  001D00  0100               	movlb	0	; () banked
  2861  001D02  6F73               	movwf	ctime@tp& (0+255),b
  2862  001D04  0E01               	movlw	high main@sys_time
  2863  001D06  0100               	movlb	0	; () banked
  2864  001D08  6F74               	movwf	(ctime@tp+1)& (0+255),b
  2865  001D0A  ECC0  F028         	call	_ctime	;wreg free
  2866  001D0E  C073  F0C2         	movff	?_ctime,?_printf+2
  2867  001D12  C074  F0C3         	movff	?_ctime+1,?_printf+3
  2868  001D16  ECD4  F02B         	call	_printf	;wreg free
  2869                           
  2870                           ;main.c: 110: LCD_Clear();
  2871  001D1A  EC2D  F026         	call	_LCD_Clear	;wreg free
  2872                           
  2873                           ;main.c: 111: p_len=strlen(p);
  2874  001D1E  C1D2  F019         	movff	main@p,strlen@s
  2875  001D22  C1D3  F01A         	movff	main@p+1,strlen@s+1
  2876  001D26  EC66  F02B         	call	_strlen	;wreg free
  2877  001D2A  C019  F1D0         	movff	?_strlen,main@p_len
  2878  001D2E  C01A  F1D1         	movff	?_strlen+1,main@p_len+1
  2879                           
  2880                           ;main.c: 112: LCD_WriteStr(p,p_len);
  2881  001D32  C1D2  F01B         	movff	main@p,LCD_WriteStr@Str
  2882  001D36  C1D3  F01C         	movff	main@p+1,LCD_WriteStr@Str+1
  2883  001D3A  C1D0  F01D         	movff	main@p_len,LCD_WriteStr@Str_Size
  2884  001D3E  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
  2885                           
  2886                           ;main.c: 113: for(i=0;i<500;i++){
  2887  001D42  0E00               	movlw	0
  2888  001D44  0101               	movlb	1	; () banked
  2889  001D46  6FDA               	movwf	(main@i+1)& (0+255),b
  2890  001D48  0E00               	movlw	0
  2891  001D4A  6FD9               	movwf	main@i& (0+255),b
  2892  001D4C                     l11537:
  2893  001D4C  FFFF               	dw	65535	; assembler added errata NOP
  2894                           
  2895                           ; BSR set to: 1
  2896  001D4E  0101               	movlb	1	; () banked
  2897  001D50  BFDA               	btfsc	(main@i+1)& (0+255),7,b
  2898  001D52  D008               	goto	l990
  2899  001D54  0EF4               	movlw	244
  2900  001D56  0101               	movlb	1	; () banked
  2901  001D58  5DD9               	subwf	main@i& (0+255),w,b
  2902  001D5A  0E01               	movlw	1
  2903  001D5C  0101               	movlb	1	; () banked
  2904  001D5E  59DA               	subwfb	(main@i+1)& (0+255),w,b
  2905  001D60  B0D8               	btfsc	status,0,c
  2906  001D62  D010               	goto	u11530
  2907  001D64                     l990:
  2908  001D64  FFFF               	dw	65535	; assembler added errata NOP
  2909                           
  2910                           ; BSR set to: 1
  2911                           ;main.c: 114: _delay((unsigned long)((10)*(10000000/4000.0)));
  2912                           
  2913                           ; BSR set to: 1
  2914  001D66  0E19               	movlw	25
  2915  001D68  0101               	movlb	1	; () banked
  2916  001D6A  6FCC               	movwf	??_main& (0+255),b
  2917  001D6C  0E5C               	movlw	92
  2918  001D6E                     u11647:
  2919  001D6E  FFFF               	dw	65535	; errata NOP
  2920  001D70  2EE8               	decfsz	wreg,f,c
  2921  001D72  D7FD               	bra	u11647
  2922  001D74  2FCC               	decfsz	??_main& (0+255),f,b
  2923  001D76  D7FB               	bra	u11647
  2924  001D78  D000               	nop2	
  2925  001D7A  F000               	nop	
  2926  001D7C  0101               	movlb	1	; () banked
  2927  001D7E  4BD9               	infsnz	main@i& (0+255),f,b
  2928  001D80  2BDA               	incf	(main@i+1)& (0+255),f,b
  2929  001D82  D7E4               	goto	l11537
  2930  001D84                     u11530:
  2931  001D84  FFFF               	dw	65535	; assembler added errata NOP
  2932                           
  2933                           ; BSR set to: 1
  2934                           ;main.c: 115: }
  2935                           ;main.c: 116: LCD_Clear();
  2936                           
  2937                           ; BSR set to: 1
  2938  001D86  EC2D  F026         	call	_LCD_Clear	;wreg free
  2939                           
  2940                           ;main.c: 118: value.tim_value=46004;
  2941  001D8A  0EB3               	movlw	179
  2942  001D8C  0100               	movlb	0	; () banked
  2943  001D8E  6FFF               	movwf	(_value+1)& (0+255),b
  2944  001D90  0EB4               	movlw	180
  2945  001D92  6FFE               	movwf	_value& (0+255),b
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 119: Open_Timer0(0b11111111&0b10111111&0b11011111&0b11111111&0b11110111&0b11111
      +                          101 ,1,value.tim_value);
  2949  001D94  0E01               	movlw	1
  2950  001D96  6E19               	movwf	Open_Timer0@IE,c
  2951  001D98  C0FE  F01A         	movff	_value,Open_Timer0@value
  2952  001D9C  C0FF  F01B         	movff	_value+1,Open_Timer0@value+1
  2953  001DA0  0E95               	movlw	149
  2954  001DA2  EC50  F029         	call	_Open_Timer0
  2955                           
  2956                           ;main.c: 122: code=Get_Variables();
  2957  001DA6  ECE5  F039         	call	_Get_Variables	;wreg free
  2958  001DAA  C01F  F1CE         	movff	?_Get_Variables,main@code
  2959  001DAE  C020  F1CF         	movff	?_Get_Variables+1,main@code+1
  2960                           
  2961                           ;main.c: 124: if (code != 1234) {
  2962  001DB2  0ED2               	movlw	210
  2963  001DB4  0101               	movlb	1	; () banked
  2964  001DB6  19CE               	xorwf	main@code& (0+255),w,b
  2965  001DB8  E105               	bnz	u11540
  2966  001DBA  0E04               	movlw	4
  2967  001DBC  0101               	movlb	1	; () banked
  2968  001DBE  19CF               	xorwf	(main@code+1)& (0+255),w,b
  2969  001DC0  B4D8               	btfsc	status,2,c
  2970  001DC2  D08A               	goto	l992
  2971  001DC4                     u11540:
  2972                           
  2973                           ; BSR set to: 1
  2974                           ;main.c: 125: set_PID_Kp(1.0);
  2975  001DC4  0E00               	movlw	0
  2976  001DC6  6E19               	movwf	set_PID_Kp@val,c
  2977  001DC8  0E80               	movlw	128
  2978  001DCA  6E1A               	movwf	set_PID_Kp@val+1,c
  2979  001DCC  0E3F               	movlw	63
  2980  001DCE  6E1B               	movwf	set_PID_Kp@val+2,c
  2981  001DD0  EC9C  F028         	call	_set_PID_Kp	;wreg free
  2982                           
  2983                           ;main.c: 126: set_PID_Ki(0.0);
  2984  001DD4  0E00               	movlw	0
  2985  001DD6  6E19               	movwf	set_PID_Ki@val,c
  2986  001DD8  0E00               	movlw	0
  2987  001DDA  6E1A               	movwf	set_PID_Ki@val+1,c
  2988  001DDC  0E00               	movlw	0
  2989  001DDE  6E1B               	movwf	set_PID_Ki@val+2,c
  2990  001DE0  EC9D  F026         	call	_set_PID_Ki	;wreg free
  2991                           
  2992                           ;main.c: 127: set_PID_Kd(0.0);
  2993  001DE4  0E00               	movlw	0
  2994  001DE6  6E19               	movwf	set_PID_Kd@val,c
  2995  001DE8  0E00               	movlw	0
  2996  001DEA  6E1A               	movwf	set_PID_Kd@val+1,c
  2997  001DEC  0E00               	movlw	0
  2998  001DEE  6E1B               	movwf	set_PID_Kd@val+2,c
  2999  001DF0  EC94  F026         	call	_set_PID_Kd	;wreg free
  3000                           
  3001                           ;main.c: 128: set_PID_T(0.5);
  3002  001DF4  0E00               	movlw	0
  3003  001DF6  6E19               	movwf	set_PID_T@val,c
  3004  001DF8  0E00               	movlw	0
  3005  001DFA  6E1A               	movwf	set_PID_T@val+1,c
  3006  001DFC  0E3F               	movlw	63
  3007  001DFE  6E1B               	movwf	set_PID_T@val+2,c
  3008  001E00  ECA6  F026         	call	_set_PID_T	;wreg free
  3009                           
  3010                           ;main.c: 129: set_PID_setpoint(118.0);
  3011  001E04  0E00               	movlw	0
  3012  001E06  6E19               	movwf	set_PID_setpoint@val,c
  3013  001E08  0EEC               	movlw	236
  3014  001E0A  6E1A               	movwf	set_PID_setpoint@val+1,c
  3015  001E0C  0E42               	movlw	66
  3016  001E0E  6E1B               	movwf	set_PID_setpoint@val+2,c
  3017  001E10  ECAF  F026         	call	_set_PID_setpoint	;wreg free
  3018                           
  3019                           ;main.c: 130: set_Deadband(5.0);
  3020  001E14  0E00               	movlw	0
  3021  001E16  6E19               	movwf	set_Deadband@val,c
  3022  001E18  0EA0               	movlw	160
  3023  001E1A  6E1A               	movwf	set_Deadband@val+1,c
  3024  001E1C  0E40               	movlw	64
  3025  001E1E  6E1B               	movwf	set_Deadband@val+2,c
  3026  001E20  EC8B  F026         	call	_set_Deadband	;wreg free
  3027                           
  3028                           ;main.c: 131: Set_LP_RC_constant(0.25);
  3029  001E24  0E00               	movlw	0
  3030  001E26  6E19               	movwf	Set_LP_RC_constant@val,c
  3031  001E28  0E80               	movlw	128
  3032  001E2A  6E1A               	movwf	Set_LP_RC_constant@val+1,c
  3033  001E2C  0E3E               	movlw	62
  3034  001E2E  6E1B               	movwf	Set_LP_RC_constant@val+2,c
  3035  001E30  EC82  F026         	call	_Set_LP_RC_constant	;wreg free
  3036                           
  3037                           ;main.c: 132: set_max_VL(130.0);
  3038  001E34  0E00               	movlw	0
  3039  001E36  6E19               	movwf	set_max_VL@val,c
  3040  001E38  0E02               	movlw	2
  3041  001E3A  6E1A               	movwf	set_max_VL@val+1,c
  3042  001E3C  0E43               	movlw	67
  3043  001E3E  6E1B               	movwf	set_max_VL@val+2,c
  3044  001E40  EC00  F027         	call	_set_max_VL	;wreg free
  3045                           
  3046                           ;main.c: 133: set_min_VL(105.0);
  3047  001E44  0E00               	movlw	0
  3048  001E46  6E19               	movwf	set_min_VL@val,c
  3049  001E48  0ED2               	movlw	210
  3050  001E4A  6E1A               	movwf	set_min_VL@val+1,c
  3051  001E4C  0E42               	movlw	66
  3052  001E4E  6E1B               	movwf	set_min_VL@val+2,c
  3053  001E50  EC09  F027         	call	_set_min_VL	;wreg free
  3054                           
  3055                           ;main.c: 134: set_VL1_zero(0.0);
  3056  001E54  0E00               	movlw	0
  3057  001E56  6E19               	movwf	set_VL1_zero@val,c
  3058  001E58  0E00               	movlw	0
  3059  001E5A  6E1A               	movwf	set_VL1_zero@val+1,c
  3060  001E5C  0E00               	movlw	0
  3061  001E5E  6E1B               	movwf	set_VL1_zero@val+2,c
  3062  001E60  ECC1  F026         	call	_set_VL1_zero	;wreg free
  3063                           
  3064                           ;main.c: 135: set_VL2_zero(0.0);
  3065  001E64  0E00               	movlw	0
  3066  001E66  6E19               	movwf	set_VL2_zero@val,c
  3067  001E68  0E00               	movlw	0
  3068  001E6A  6E1A               	movwf	set_VL2_zero@val+1,c
  3069  001E6C  0E00               	movlw	0
  3070  001E6E  6E1B               	movwf	set_VL2_zero@val+2,c
  3071  001E70  ECD3  F026         	call	_set_VL2_zero	;wreg free
  3072                           
  3073                           ;main.c: 136: set_VL3_zero(0.0);
  3074  001E74  0E00               	movlw	0
  3075  001E76  6E19               	movwf	set_VL3_zero@val,c
  3076  001E78  0E00               	movlw	0
  3077  001E7A  6E1A               	movwf	set_VL3_zero@val+1,c
  3078  001E7C  0E00               	movlw	0
  3079  001E7E  6E1B               	movwf	set_VL3_zero@val+2,c
  3080  001E80  ECE5  F026         	call	_set_VL3_zero	;wreg free
  3081                           
  3082                           ;main.c: 137: set_VL1_span(1.0);
  3083  001E84  0E00               	movlw	0
  3084  001E86  6E19               	movwf	set_VL1_span@val,c
  3085  001E88  0E80               	movlw	128
  3086  001E8A  6E1A               	movwf	set_VL1_span@val+1,c
  3087  001E8C  0E3F               	movlw	63
  3088  001E8E  6E1B               	movwf	set_VL1_span@val+2,c
  3089  001E90  ECB8  F026         	call	_set_VL1_span	;wreg free
  3090                           
  3091                           ;main.c: 138: set_VL2_span(1.0);
  3092  001E94  0E00               	movlw	0
  3093  001E96  6E19               	movwf	set_VL2_span@val,c
  3094  001E98  0E80               	movlw	128
  3095  001E9A  6E1A               	movwf	set_VL2_span@val+1,c
  3096  001E9C  0E3F               	movlw	63
  3097  001E9E  6E1B               	movwf	set_VL2_span@val+2,c
  3098  001EA0  ECCA  F026         	call	_set_VL2_span	;wreg free
  3099                           
  3100                           ;main.c: 139: set_VL3_span(1.0);
  3101  001EA4  0E00               	movlw	0
  3102  001EA6  6E19               	movwf	set_VL3_span@val,c
  3103  001EA8  0E80               	movlw	128
  3104  001EAA  6E1A               	movwf	set_VL3_span@val+1,c
  3105  001EAC  0E3F               	movlw	63
  3106  001EAE  6E1B               	movwf	set_VL3_span@val+2,c
  3107  001EB0  ECDC  F026         	call	_set_VL3_span	;wreg free
  3108                           
  3109                           ;main.c: 140: set_Vin_zero(0.0);
  3110  001EB4  0E00               	movlw	0
  3111  001EB6  6E19               	movwf	set_Vin_zero@val,c
  3112  001EB8  0E00               	movlw	0
  3113  001EBA  6E1A               	movwf	set_Vin_zero@val+1,c
  3114  001EBC  0E00               	movlw	0
  3115  001EBE  6E1B               	movwf	set_Vin_zero@val+2,c
  3116  001EC0  ECF7  F026         	call	_set_Vin_zero	;wreg free
  3117                           
  3118                           ;main.c: 141: set_Vin_span(1.0);
  3119  001EC4  0E00               	movlw	0
  3120  001EC6  6E19               	movwf	set_Vin_span@val,c
  3121  001EC8  0E80               	movlw	128
  3122  001ECA  6E1A               	movwf	set_Vin_span@val+1,c
  3123  001ECC  0E3F               	movlw	63
  3124  001ECE  6E1B               	movwf	set_Vin_span@val+2,c
  3125  001ED0  ECEE  F026         	call	_set_Vin_span	;wreg free
  3126                           
  3127                           ;main.c: 142: Save_Variables();
  3128  001ED4  EC7D  F03A         	call	_Save_Variables	;wreg free
  3129  001ED8                     l992:
  3130  001ED8  FFFF               	dw	65535	; assembler added errata NOP
  3131                           
  3132                           ;main.c: 143: }
  3133                           ;main.c: 145: start_value = (int) (get_LP_RC_Constant()*4.0/0.5);
  3134  001EDA  0E00               	movlw	0
  3135  001EDC  0100               	movlb	0	; () banked
  3136  001EDE  6F7E               	movwf	___ftdiv@f2& (0+255),b
  3137  001EE0  0E00               	movlw	0
  3138  001EE2  0100               	movlb	0	; () banked
  3139  001EE4  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
  3140  001EE6  0E3F               	movlw	63
  3141  001EE8  0100               	movlb	0	; () banked
  3142  001EEA  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
  3143  001EEC  0E00               	movlw	0
  3144  001EEE  0100               	movlb	0	; () banked
  3145  001EF0  6F6F               	movwf	___ftmul@f2& (0+255),b
  3146  001EF2  0E80               	movlw	128
  3147  001EF4  0100               	movlb	0	; () banked
  3148  001EF6  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
  3149  001EF8  0E40               	movlw	64
  3150  001EFA  0100               	movlb	0	; () banked
  3151  001EFC  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
  3152  001EFE  EC12  F027         	call	_get_LP_RC_Constant	;wreg free
  3153  001F02  C019  F06C         	movff	?_get_LP_RC_Constant,___ftmul@f1
  3154  001F06  C01A  F06D         	movff	?_get_LP_RC_Constant+1,___ftmul@f1+1
  3155  001F0A  C01B  F06E         	movff	?_get_LP_RC_Constant+2,___ftmul@f1+2
  3156  001F0E  EC53  F03C         	call	___ftmul	;wreg free
  3157  001F12  C06C  F07B         	movff	?___ftmul,___ftdiv@f1
  3158  001F16  C06D  F07C         	movff	?___ftmul+1,___ftdiv@f1+1
  3159  001F1A  C06E  F07D         	movff	?___ftmul+2,___ftdiv@f1+2
  3160  001F1E  ECB0  F03B         	call	___ftdiv	;wreg free
  3161  001F22  C07B  F08A         	movff	?___ftdiv,___fttol@f1
  3162  001F26  C07C  F08B         	movff	?___ftdiv+1,___fttol@f1+1
  3163  001F2A  C07D  F08C         	movff	?___ftdiv+2,___fttol@f1+2
  3164  001F2E  EC16  F03B         	call	___fttol	;wreg free
  3165  001F32  C08A  F0F5         	movff	?___fttol,_start_value
  3166  001F36  C08B  F0F6         	movff	?___fttol+1,_start_value+1
  3167                           
  3168                           ;main.c: 148: INTCONbits.PEIE=1;
  3169  001F3A  8CF2               	bsf	intcon,6,c	;volatile
  3170                           
  3171                           ;main.c: 149: INTCONbits.GIE=1;
  3172  001F3C  8EF2               	bsf	intcon,7,c	;volatile
  3173  001F3E  FFFF               	dw	65535	; assembler added errata NOP
  3174                           
  3175                           ;main.c: 155: if(RCIE==0){
  3176  001F40  BA9D               	btfsc	3997,5,c	;volatile
  3177  001F42  D023               	goto	l999
  3178                           
  3179                           ;main.c: 156: if (rx_flag == 1) {
  3180  001F44  0100               	movlb	0	; () banked
  3181  001F46  05FA               	decf	_rx_flag& (0+255),w,b
  3182  001F48  A4D8               	btfss	status,2,c
  3183  001F4A  D017               	goto	l995
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 157: rx_flag = 3;
  3187  001F4C  0E03               	movlw	3
  3188  001F4E  0100               	movlb	0	; () banked
  3189  001F50  6FFA               	movwf	_rx_flag& (0+255),b
  3190                           
  3191                           ;main.c: 158: rx_pointer = 0;
  3192  001F52  0E00               	movlw	0
  3193  001F54  6E46               	movwf	_rx_pointer,c
  3194  001F56  FFFF               	dw	65535	; assembler added errata NOP
  3195                           
  3196                           ; BSR set to: 0
  3197  001F58  B89D               	btfsc	3997,4,c	;volatile
  3198  001F5A  D7FD               	goto	l997
  3199                           
  3200                           ;main.c: 160: read_command(rx_buffer, tx_buffer);
  3201  001F5C  0E91               	movlw	low _rx_buffer
  3202  001F5E  0100               	movlb	0	; () banked
  3203  001F60  6FE2               	movwf	read_command@rx_buff& (0+255),b
  3204  001F62  0E01               	movlw	high _rx_buffer
  3205  001F64  0100               	movlb	0	; () banked
  3206  001F66  6FE3               	movwf	(read_command@rx_buff+1)& (0+255),b
  3207  001F68  0E4E               	movlw	low _tx_buffer
  3208  001F6A  0100               	movlb	0	; () banked
  3209  001F6C  6FE4               	movwf	read_command@tx_buff& (0+255),b
  3210  001F6E  0E01               	movlw	high _tx_buffer
  3211  001F70  0100               	movlb	0	; () banked
  3212  001F72  6FE5               	movwf	(read_command@tx_buff+1)& (0+255),b
  3213  001F74  ECBD  F03D         	call	_read_command	;wreg free
  3214  001F78  D006               	goto	l11577
  3215  001F7A                     l995:
  3216  001F7A  FFFF               	dw	65535	; assembler added errata NOP
  3217                           
  3218                           ;main.c: 163: else{
  3219                           ;main.c: 164: rx_flag = 3;
  3220  001F7C  0E03               	movlw	3
  3221  001F7E  0100               	movlb	0	; () banked
  3222  001F80  6FFA               	movwf	_rx_flag& (0+255),b
  3223                           
  3224                           ;main.c: 165: rx_pointer = 0;
  3225  001F82  0E00               	movlw	0
  3226  001F84  6E46               	movwf	_rx_pointer,c
  3227  001F86                     l11577:
  3228  001F86  FFFF               	dw	65535	; assembler added errata NOP
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;main.c: 166: RCIE = 1;
  3232  001F88  8A9D               	bsf	3997,5,c	;volatile
  3233  001F8A                     l999:
  3234  001F8A  FFFF               	dw	65535	; assembler added errata NOP
  3235                           
  3236                           ;main.c: 167: }
  3237                           ;main.c: 169: }
  3238                           ;main.c: 171: if (Int_Flag == 1) {
  3239                           
  3240                           ; BSR set to: 0
  3241                           
  3242                           ; BSR set to: 0
  3243  001F8C  0100               	movlb	0	; () banked
  3244  001F8E  05FB               	decf	_Int_Flag& (0+255),w,b
  3245  001F90  A4D8               	btfss	status,2,c
  3246  001F92  D7D5               	goto	l993
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;main.c: 172: Int_Flag = 0;
  3250  001F94  0E00               	movlw	0
  3251  001F96  0100               	movlb	0	; () banked
  3252  001F98  6FFB               	movwf	_Int_Flag& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;main.c: 174: time(&sys_time);
  3256  001F9A  0ED5               	movlw	low main@sys_time
  3257  001F9C  0100               	movlb	0	; () banked
  3258  001F9E  6F8D               	movwf	time@t& (0+255),b
  3259  001FA0  0E01               	movlw	high main@sys_time
  3260  001FA2  0100               	movlb	0	; () banked
  3261  001FA4  6F8E               	movwf	(time@t+1)& (0+255),b
  3262  001FA6  EC86  F035         	call	_time	;wreg free
  3263                           
  3264                           ;main.c: 177: voltage_status.data=Get_Voltage_Data();
  3265  001FAA  EC73  F00B         	call	_Get_Voltage_Data	;wreg free
  3266  001FAE  0101               	movlb	1	; () banked
  3267  001FB0  6FD4               	movwf	main@voltage_status& (0+255),b
  3268                           
  3269                           ; BSR set to: 1
  3270                           ;main.c: 180: check_V1_status(voltage_status);
  3271  001FB2  0101               	movlb	1	; () banked
  3272  001FB4  51D4               	movf	main@voltage_status& (0+255),w,b
  3273  001FB6  ECD8  F02A         	call	_check_V1_status
  3274                           
  3275                           ;main.c: 181: check_V2_status(voltage_status);
  3276  001FBA  0101               	movlb	1	; () banked
  3277  001FBC  51D4               	movf	main@voltage_status& (0+255),w,b
  3278  001FBE  EC1C  F02A         	call	_check_V2_status
  3279                           
  3280                           ;main.c: 182: check_V3_status(voltage_status);
  3281  001FC2  0101               	movlb	1	; () banked
  3282  001FC4  51D4               	movf	main@voltage_status& (0+255),w,b
  3283  001FC6  EC3A  F02A         	call	_check_V3_status
  3284                           
  3285                           ;main.c: 185: Inputs.byte=Rd_Digital_Inputs();
  3286  001FCA  ECAE  F028         	call	_Rd_Digital_Inputs	;wreg free
  3287  001FCE  0100               	movlb	0	; () banked
  3288  001FD0  6FFD               	movwf	_Inputs& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 186: if(!Inputs.B0){
  3292  001FD2  0100               	movlb	0	; () banked
  3293  001FD4  B1FD               	btfsc	_Inputs& (0+255),0,b
  3294  001FD6  D00A               	goto	l1001
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 188: if (check_start_flag()!=0) {
  3298  001FD8  ECFA  F02A         	call	_check_start_flag	;wreg free
  3299  001FDC  0900               	iorlw	0
  3300  001FDE  B4D8               	btfsc	status,2,c
  3301  001FE0  D00A               	goto	l1003
  3302                           
  3303                           ;main.c: 189: Control_Loop();
  3304  001FE2  ECB3  F034         	call	_Control_Loop	;wreg free
  3305                           
  3306                           ;main.c: 190: Outputs.led8 = 1;
  3307  001FE6  0100               	movlb	0	; () banked
  3308  001FE8  8FEB               	bsf	(_Outputs+3)& (0+255),7,b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 191: }
  3312                           ;main.c: 192: } else {
  3313  001FEA  D005               	goto	l1003
  3314  001FEC                     l1001:
  3315  001FEC  FFFF               	dw	65535	; assembler added errata NOP
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;main.c: 193: Manual_Control();
  3319                           
  3320                           ; BSR set to: 0
  3321  001FEE  ECEB  F027         	call	_Manual_Control	;wreg free
  3322                           
  3323                           ;main.c: 194: Outputs.led8=0;
  3324  001FF2  0100               	movlb	0	; () banked
  3325  001FF4  9FEB               	bcf	(_Outputs+3)& (0+255),7,b
  3326  001FF6                     l1003:
  3327  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  3328                           
  3329                           ;main.c: 195: }
  3330                           ;main.c: 197: if(Inputs.B1){
  3331                           
  3332                           ; BSR set to: 0
  3333  001FF8  0100               	movlb	0	; () banked
  3334  001FFA  A3FD               	btfss	_Inputs& (0+255),1,b
  3335  001FFC  D014               	goto	l1004
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;main.c: 198: set_min(Get_Voltage_Vin());
  3339  001FFE  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  3340  002002  C019  F01C         	movff	?_Get_Voltage_Vin,set_min@val
  3341  002006  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_min@val+1
  3342  00200A  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_min@val+2
  3343  00200E  ECB4  F027         	call	_set_min	;wreg free
  3344                           
  3345                           ;main.c: 199: set_max(Get_Voltage_Vin());
  3346  002012  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  3347  002016  C019  F01C         	movff	?_Get_Voltage_Vin,set_max@val
  3348  00201A  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_max@val+1
  3349  00201E  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_max@val+2
  3350  002022  ECAB  F027         	call	_set_max	;wreg free
  3351  002026                     l1004:
  3352  002026  FFFF               	dw	65535	; assembler added errata NOP
  3353                           
  3354                           ;main.c: 200: }
  3355                           ;main.c: 201: Display_Data();
  3356  002028  EC8A  F01C         	call	_Display_Data	;wreg free
  3357                           
  3358                           ;main.c: 202: Outputs.led7 = ~Outputs.led7;
  3359  00202C  0100               	movlb	0	; () banked
  3360  00202E  ADEB               	btfss	(_Outputs+3)& (0+255),6,b
  3361  002030  D002               	goto	u11620
  3362  002032  0E01               	movlw	1
  3363  002034  D002               	goto	u11626
  3364  002036                     u11620:
  3365  002036  FFFF               	dw	65535	; assembler added errata NOP
  3366  002038  0E00               	movlw	0
  3367  00203A                     u11626:
  3368  00203A  FFFF               	dw	65535	; assembler added errata NOP
  3369  00203C  0AFF               	xorlw	255
  3370  00203E  0101               	movlb	1	; () banked
  3371  002040  6FCC               	movwf	??_main& (0+255),b
  3372  002042  0101               	movlb	1	; () banked
  3373  002044  3BCC               	swapf	??_main& (0+255),f,b
  3374  002046  47CC               	rlncf	??_main& (0+255),f,b
  3375  002048  47CC               	rlncf	??_main& (0+255),f,b
  3376  00204A  0100               	movlb	0	; () banked
  3377  00204C  51EB               	movf	(_Outputs+3)& (0+255),w,b
  3378  00204E  0101               	movlb	1	; () banked
  3379  002050  19CC               	xorwf	??_main& (0+255),w,b
  3380  002052  0BBF               	andlw	-65
  3381  002054  19CC               	xorwf	??_main& (0+255),w,b
  3382  002056  0100               	movlb	0	; () banked
  3383  002058  6FEB               	movwf	(_Outputs+3)& (0+255),b
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;main.c: 203: WriteIO5R(Outputs.Output);
  3387  00205A  C0E8  F019         	movff	_Outputs,WriteIO5R@data
  3388  00205E  C0E9  F01A         	movff	_Outputs+1,WriteIO5R@data+1
  3389  002062  C0EA  F01B         	movff	_Outputs+2,WriteIO5R@data+2
  3390  002066  C0EB  F01C         	movff	_Outputs+3,WriteIO5R@data+3
  3391  00206A  ECBE  F01F         	call	_WriteIO5R	;wreg free
  3392  00206E  D767               	goto	l993
  3393  002070                     __end_of_main:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           intcon	equ	0xFF2
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           status	equ	0xFD8
  3403                           
  3404 ;; *************** function _strlen *****************
  3405 ;; Defined at:
  3406 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strlen.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3409 ;;		 -> STR_71(54), 
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;  cp              2   28[COMRAM] PTR const unsigned char 
  3412 ;;		 -> STR_71(54), 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  2   24[COMRAM] unsigned int 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3422 ;;      Params:         2       0       0       0       0       0       0
  3423 ;;      Locals:         2       0       0       0       0       0       0
  3424 ;;      Temps:          2       0       0       0       0       0       0
  3425 ;;      Totals:         6       0       0       0       0       0       0
  3426 ;;Total ram usage:        6 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_main
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text1
  3437  0056CC                     __ptext1:
  3438                           	opt stack 0
  3439  0056CC                     _strlen:
  3440                           	opt stack 0
  3441  0056CC  FFFF               	dw	65535	; assembler added errata NOP
  3442                           
  3443                           ;incstack = 0
  3444  0056CE  C019  F01D         	movff	strlen@s,strlen@cp
  3445  0056D2  C01A  F01E         	movff	strlen@s+1,strlen@cp+1
  3446  0056D6  D003               	goto	l2081
  3447  0056D8  FFFF               	dw	65535	; assembler added errata NOP
  3448  0056DA  4A1D               	infsnz	strlen@cp,f,c
  3449  0056DC  2A1E               	incf	strlen@cp+1,f,c
  3450  0056DE                     l2081:
  3451  0056DE  FFFF               	dw	65535	; assembler added errata NOP
  3452  0056E0  C01D  FFF6         	movff	strlen@cp,tblptrl
  3453  0056E4  C01E  FFF7         	movff	strlen@cp+1,tblptrh
  3454  0056E8                     	if	0	;tblptru may be non-zero
  3455  0056E8                     	endif
  3456  0056E8                     	if	0	;tblptru may be non-zero
  3457  0056E8                     	endif
  3458  0056E8  0008               	tblrd		*
  3459  0056EA  FFFF               	dw	65535	; errata NOP
  3460  0056EC  50F5               	movf	tablat,w,c
  3461  0056EE  0900               	iorlw	0
  3462  0056F0  A4D8               	btfss	status,2,c
  3463  0056F2  D7F2               	goto	l2082
  3464  0056F4  C019  F01B         	movff	strlen@s,??_strlen
  3465  0056F8  C01A  F01C         	movff	strlen@s+1,??_strlen+1
  3466  0056FC  1E1B               	comf	??_strlen,f,c
  3467  0056FE  1E1C               	comf	??_strlen+1,f,c
  3468  005700  4A1B               	infsnz	??_strlen,f,c
  3469  005702  2A1C               	incf	??_strlen+1,f,c
  3470  005704  501D               	movf	strlen@cp,w,c
  3471  005706  241B               	addwf	??_strlen,w,c
  3472  005708  6E19               	movwf	?_strlen,c
  3473  00570A  501E               	movf	strlen@cp+1,w,c
  3474  00570C  201C               	addwfc	??_strlen+1,w,c
  3475  00570E  6E1A               	movwf	?_strlen+1,c
  3476  005710  0012               	return		;funcret
  3477  005712  FFFF               	dw	65535	; errata NOP
  3478  005714                     __end_of_strlen:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           intcon	equ	0xFF2
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _read_command *****************
  3490 ;; Defined at:
  3491 ;;		line 34 in file "Commands.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  rx_buff         2  130[BANK0 ] PTR unsigned char 
  3494 ;;		 -> rx_buffer(20), 
  3495 ;;  tx_buff         2  132[BANK0 ] PTR unsigned char 
  3496 ;;		 -> tx_buffer(40), 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  ptr             6    4[BANK1 ] PTR unsigned char [3]
  3499 ;;		 -> rx_buffer(20), NULL(0), 
  3500 ;;  i               2    2[BANK1 ] int 
  3501 ;;  sep_tok         2    0[BANK1 ] PTR unsigned char 
  3502 ;;		 -> STR_1(2), 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         0       4       0       0       0       0       0
  3513 ;;      Locals:         0       0      10       0       0       0       0
  3514 ;;      Temps:          0       2       0       0       0       0       0
  3515 ;;      Totals:         0       6      10       0       0       0       0
  3516 ;;Total ram usage:       16 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    7
  3519 ;; This function calls:
  3520 ;;		_cal_analog
  3521 ;;		_get_list
  3522 ;;		_lcd_display
  3523 ;;		_reset_var
  3524 ;;		_set_list
  3525 ;;		_sprintf
  3526 ;;		_strcmp
  3527 ;;		_strtok
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text2
  3534  007B7A                     __ptext2:
  3535                           	opt stack 0
  3536  007B7A                     _read_command:
  3537                           	opt stack 0
  3538  007B7A  FFFF               	dw	65535	; assembler added errata NOP
  3539                           
  3540                           ;Commands.c: 36: char * ptr[3];
  3541                           ;Commands.c: 37: char * sep_tok = " ";
  3542                           
  3543                           ;incstack = 0
  3544  007B7C  0EF8               	movlw	low STR_1
  3545  007B7E  0101               	movlb	1	; () banked
  3546  007B80  6FB7               	movwf	read_command@sep_tok& (0+255),b
  3547  007B82  0E7F               	movlw	high STR_1
  3548  007B84  0101               	movlb	1	; () banked
  3549  007B86  6FB8               	movwf	(read_command@sep_tok+1)& (0+255),b
  3550                           
  3551                           ; BSR set to: 1
  3552                           ;Commands.c: 38: int i=0;
  3553  007B88  0E00               	movlw	0
  3554  007B8A  0101               	movlb	1	; () banked
  3555  007B8C  6FBA               	movwf	(read_command@i+1)& (0+255),b
  3556  007B8E  0E00               	movlw	0
  3557  007B90  6FB9               	movwf	read_command@i& (0+255),b
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;Commands.c: 40: buffer=tx_buff;
  3561  007B92  C0E4  F0F7         	movff	read_command@tx_buff,_buffer
  3562  007B96  C0E5  F0F8         	movff	read_command@tx_buff+1,_buffer+1
  3563                           
  3564                           ; BSR set to: 1
  3565                           ;Commands.c: 41: ptr[i] = strtok(rx_buff, sep_tok);
  3566  007B9A  C0E2  F024         	movff	read_command@rx_buff,strtok@s1
  3567  007B9E  C0E3  F025         	movff	read_command@rx_buff+1,strtok@s1+1
  3568  007BA2  C1B7  F026         	movff	read_command@sep_tok,strtok@s2
  3569  007BA6  C1B8  F027         	movff	read_command@sep_tok+1,strtok@s2+1
  3570  007BAA  ECF1  F033         	call	_strtok	;wreg free
  3571  007BAE  D00E               	goto	L1
  3572  007BB0  FFFF               	dw	65535	; assembler added errata NOP
  3573                           
  3574                           ; BSR set to: 1
  3575                           ;Commands.c: 45: ptr[++i] = strtok((0), sep_tok);
  3576                           
  3577                           ; BSR set to: 1
  3578  007BB2  0E00               	movlw	0
  3579  007BB4  6E24               	movwf	strtok@s1,c
  3580  007BB6  0E00               	movlw	0
  3581  007BB8  6E25               	movwf	strtok@s1+1,c
  3582  007BBA  C1B7  F026         	movff	read_command@sep_tok,strtok@s2
  3583  007BBE  C1B8  F027         	movff	read_command@sep_tok+1,strtok@s2+1
  3584  007BC2  ECF1  F033         	call	_strtok	;wreg free
  3585  007BC6  0101               	movlb	1	; () banked
  3586  007BC8  4BB9               	infsnz	read_command@i& (0+255),f,b
  3587  007BCA  2BBA               	incf	(read_command@i+1)& (0+255),f,b
  3588  007BCC                     L1:
  3589  007BCC  FFFF               	dw	65535	; assembler added errata NOP
  3590  007BCE  90D8               	bcf	status,0,c
  3591  007BD0  0101               	movlb	1	; () banked
  3592  007BD2  35B9               	rlcf	read_command@i& (0+255),w,b
  3593  007BD4  6ED9               	movwf	fsr2l,c
  3594  007BD6  0101               	movlb	1	; () banked
  3595  007BD8  35BA               	rlcf	(read_command@i+1)& (0+255),w,b
  3596  007BDA  6EDA               	movwf	fsr2h,c
  3597  007BDC  0EBB               	movlw	low read_command@ptr
  3598  007BDE  26D9               	addwf	fsr2l,f,c
  3599  007BE0  0E01               	movlw	high read_command@ptr
  3600  007BE2  22DA               	addwfc	fsr2h,f,c
  3601  007BE4  C024  FFDE         	movff	?_strtok,postinc2
  3602  007BE8  C025  FFDD         	movff	?_strtok+1,postdec2
  3603                           
  3604                           ; BSR set to: 1
  3605                           
  3606                           ; BSR set to: 1
  3607  007BEC  90D8               	bcf	status,0,c
  3608  007BEE  0101               	movlb	1	; () banked
  3609  007BF0  35B9               	rlcf	read_command@i& (0+255),w,b
  3610  007BF2  6ED9               	movwf	fsr2l,c
  3611  007BF4  0101               	movlb	1	; () banked
  3612  007BF6  35BA               	rlcf	(read_command@i+1)& (0+255),w,b
  3613  007BF8  6EDA               	movwf	fsr2h,c
  3614  007BFA  0EBB               	movlw	low read_command@ptr
  3615  007BFC  26D9               	addwf	fsr2l,f,c
  3616  007BFE  0E01               	movlw	high read_command@ptr
  3617  007C00  22DA               	addwfc	fsr2h,f,c
  3618  007C02  50DE               	movf	postinc2,w,c
  3619  007C04  10DE               	iorwf	postinc2,w,c
  3620  007C06  A4D8               	btfss	status,2,c
  3621  007C08  D7D3               	goto	l114
  3622                           
  3623                           ; BSR set to: 1
  3624                           ;Commands.c: 46: }
  3625                           ;Commands.c: 48: if(strcmp(ptr[0],"reset")==0){
  3626                           
  3627                           ; BSR set to: 1
  3628  007C0A  C1BB  F019         	movff	read_command@ptr,strcmp@s1
  3629  007C0E  C1BC  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3630  007C12  0E8F               	movlw	low STR_2
  3631  007C14  6E1B               	movwf	strcmp@s2,c
  3632  007C16  0E7F               	movlw	high STR_2
  3633  007C18  6E1C               	movwf	strcmp@s2+1,c
  3634  007C1A  EC4C  F02C         	call	_strcmp	;wreg free
  3635  007C1E  5019               	movf	?_strcmp,w,c
  3636  007C20  101A               	iorwf	?_strcmp+1,w,c
  3637  007C22  A4D8               	btfss	status,2,c
  3638  007C24  D007               	goto	l116
  3639                           
  3640                           ;Commands.c: 49: reset_var(ptr[1]);
  3641  007C26  C1BD  F0D8         	movff	read_command@ptr+2,reset_var@var
  3642  007C2A  C1BE  F0D9         	movff	read_command@ptr+3,reset_var@var+1
  3643  007C2E  EC58  F030         	call	_reset_var	;wreg free
  3644                           
  3645                           ;Commands.c: 50: } else if(strcmp(ptr[0],"set")==0){
  3646  007C32  D074               	goto	l125
  3647  007C34                     l116:
  3648  007C34  FFFF               	dw	65535	; assembler added errata NOP
  3649  007C36  C1BB  F019         	movff	read_command@ptr,strcmp@s1
  3650  007C3A  C1BC  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3651  007C3E  0E91               	movlw	low (STR_2+2)
  3652  007C40  6E1B               	movwf	strcmp@s2,c
  3653  007C42  0E7F               	movlw	high (STR_2+2)
  3654  007C44  6E1C               	movwf	strcmp@s2+1,c
  3655  007C46  EC4C  F02C         	call	_strcmp	;wreg free
  3656  007C4A  5019               	movf	?_strcmp,w,c
  3657  007C4C  101A               	iorwf	?_strcmp+1,w,c
  3658  007C4E  A4D8               	btfss	status,2,c
  3659  007C50  D00B               	goto	l118
  3660                           
  3661                           ;Commands.c: 51: set_list(ptr[1], ptr[2]);
  3662  007C52  C1BD  F0D8         	movff	read_command@ptr+2,set_list@var
  3663  007C56  C1BE  F0D9         	movff	read_command@ptr+3,set_list@var+1
  3664  007C5A  C1BF  F0DA         	movff	read_command@ptr+4,set_list@data
  3665  007C5E  C1C0  F0DB         	movff	read_command@ptr+5,set_list@data+1
  3666  007C62  ECB2  F014         	call	_set_list	;wreg free
  3667                           
  3668                           ;Commands.c: 53: } else if(strcmp(ptr[0],"get")==0){
  3669  007C66  D05A               	goto	l125
  3670  007C68                     l118:
  3671  007C68  FFFF               	dw	65535	; assembler added errata NOP
  3672  007C6A  C1BB  F019         	movff	read_command@ptr,strcmp@s1
  3673  007C6E  C1BC  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3674  007C72  0EE1               	movlw	low STR_4
  3675  007C74  6E1B               	movwf	strcmp@s2,c
  3676  007C76  0E7F               	movlw	high STR_4
  3677  007C78  6E1C               	movwf	strcmp@s2+1,c
  3678  007C7A  EC4C  F02C         	call	_strcmp	;wreg free
  3679  007C7E  5019               	movf	?_strcmp,w,c
  3680  007C80  101A               	iorwf	?_strcmp+1,w,c
  3681  007C82  A4D8               	btfss	status,2,c
  3682  007C84  D007               	goto	l120
  3683                           
  3684                           ;Commands.c: 54: get_list(ptr[1]);
  3685  007C86  C1BD  F0D8         	movff	read_command@ptr+2,get_list@var
  3686  007C8A  C1BE  F0D9         	movff	read_command@ptr+3,get_list@var+1
  3687  007C8E  EC73  F008         	call	_get_list	;wreg free
  3688                           
  3689                           ;Commands.c: 56: }
  3690  007C92  D044               	goto	l125
  3691  007C94                     l120:
  3692  007C94  FFFF               	dw	65535	; assembler added errata NOP
  3693                           
  3694                           ;Commands.c: 57: else if(strcmp(ptr[0],"cal")==0){
  3695  007C96  C1BB  F019         	movff	read_command@ptr,strcmp@s1
  3696  007C9A  C1BC  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3697  007C9E  0ED5               	movlw	low STR_5
  3698  007CA0  6E1B               	movwf	strcmp@s2,c
  3699  007CA2  0E7F               	movlw	high STR_5
  3700  007CA4  6E1C               	movwf	strcmp@s2+1,c
  3701  007CA6  EC4C  F02C         	call	_strcmp	;wreg free
  3702  007CAA  5019               	movf	?_strcmp,w,c
  3703  007CAC  101A               	iorwf	?_strcmp+1,w,c
  3704  007CAE  A4D8               	btfss	status,2,c
  3705  007CB0  D00B               	goto	l122
  3706                           
  3707                           ;Commands.c: 58: cal_analog(ptr[1],ptr[2]);
  3708  007CB2  C1BD  F0D8         	movff	read_command@ptr+2,cal_analog@var
  3709  007CB6  C1BE  F0D9         	movff	read_command@ptr+3,cal_analog@var+1
  3710  007CBA  C1BF  F0DA         	movff	read_command@ptr+4,cal_analog@data
  3711  007CBE  C1C0  F0DB         	movff	read_command@ptr+5,cal_analog@data+1
  3712  007CC2  ECD1  F018         	call	_cal_analog	;wreg free
  3713                           
  3714                           ;Commands.c: 59: }
  3715  007CC6  D02A               	goto	l125
  3716  007CC8                     l122:
  3717  007CC8  FFFF               	dw	65535	; assembler added errata NOP
  3718                           
  3719                           ;Commands.c: 60: else if(strcmp(ptr[0],"lcd")==0){
  3720  007CCA  C1BB  F019         	movff	read_command@ptr,strcmp@s1
  3721  007CCE  C1BC  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3722  007CD2  0ED1               	movlw	low STR_6
  3723  007CD4  6E1B               	movwf	strcmp@s2,c
  3724  007CD6  0E7F               	movlw	high STR_6
  3725  007CD8  6E1C               	movwf	strcmp@s2+1,c
  3726  007CDA  EC4C  F02C         	call	_strcmp	;wreg free
  3727  007CDE  5019               	movf	?_strcmp,w,c
  3728  007CE0  101A               	iorwf	?_strcmp+1,w,c
  3729  007CE2  A4D8               	btfss	status,2,c
  3730  007CE4  D00B               	goto	l124
  3731                           
  3732                           ;Commands.c: 61: lcd_display(ptr[1],ptr[2]);
  3733  007CE6  C1BD  F065         	movff	read_command@ptr+2,lcd_display@var
  3734  007CEA  C1BE  F066         	movff	read_command@ptr+3,lcd_display@var+1
  3735  007CEE  C1BF  F067         	movff	read_command@ptr+4,lcd_display@data
  3736  007CF2  C1C0  F068         	movff	read_command@ptr+5,lcd_display@data+1
  3737  007CF6  ECD2  F02E         	call	_lcd_display	;wreg free
  3738                           
  3739                           ;Commands.c: 62: }
  3740  007CFA  D010               	goto	l125
  3741  007CFC                     l124:
  3742  007CFC  FFFF               	dw	65535	; assembler added errata NOP
  3743                           
  3744                           ;Commands.c: 63: else {
  3745                           ;Commands.c: 64: sprintf(buffer,"Comando invalido\n");
  3746  007CFE  C0F7  F0C0         	movff	_buffer,sprintf@wh
  3747  007D02  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  3748  007D06  0EE9               	movlw	low STR_7
  3749  007D08  0100               	movlb	0	; () banked
  3750  007D0A  6FC2               	movwf	sprintf@f& (0+255),b
  3751  007D0C  0E7E               	movlw	high STR_7
  3752  007D0E  0100               	movlb	0	; () banked
  3753  007D10  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  3754  007D12  EC10  F02F         	call	_sprintf	;wreg free
  3755                           
  3756                           ;Commands.c: 65: rx_pointer=0;
  3757  007D16  0E00               	movlw	0
  3758  007D18  6E46               	movwf	_rx_pointer,c
  3759                           
  3760                           ;Commands.c: 66: TXIE=1;
  3761  007D1A  889D               	bsf	3997,4,c	;volatile
  3762  007D1C                     l125:
  3763  007D1C  FFFF               	dw	65535	; assembler added errata NOP
  3764  007D1E  0012               	return		;funcret
  3765  007D20  FFFF               	dw	65535	; errata NOP
  3766  007D22                     __end_of_read_command:
  3767                           	opt stack 0
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           intcon	equ	0xFF2
  3773                           postinc0	equ	0xFEE
  3774                           wreg	equ	0xFE8
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function _set_list *****************
  3782 ;; Defined at:
  3783 ;;		line 143 in file "Commands.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  var             2  120[BANK0 ] PTR unsigned char 
  3786 ;;		 -> rx_buffer(20), NULL(0), 
  3787 ;;  data            2  122[BANK0 ] PTR unsigned char 
  3788 ;;		 -> rx_buffer(20), NULL(0), 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  val             3  124[BANK0 ] PTR unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3800 ;;      Params:         0       4       0       0       0       0       0
  3801 ;;      Locals:         0       3       0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0
  3803 ;;      Totals:         0       7       0       0       0       0       0
  3804 ;;Total ram usage:        7 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    6
  3807 ;; This function calls:
  3808 ;;		_Save_Variables
  3809 ;;		_Set_LP_RC_constant
  3810 ;;		_atof
  3811 ;;		_date_set
  3812 ;;		_set_Deadband
  3813 ;;		_set_PID_Kd
  3814 ;;		_set_PID_Ki
  3815 ;;		_set_PID_Kp
  3816 ;;		_set_PID_T
  3817 ;;		_set_PID_setpoint
  3818 ;;		_set_max_VL
  3819 ;;		_set_min_VL
  3820 ;;		_sprintf
  3821 ;;		_strcmp
  3822 ;;		_time_set
  3823 ;; This function is called by:
  3824 ;;		_read_command
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text3
  3829  002964                     __ptext3:
  3830                           	opt stack 0
  3831  002964                     _set_list:
  3832                           	opt stack 0
  3833  002964  FFFF               	dw	65535	; assembler added errata NOP
  3834                           
  3835                           ;Commands.c: 145: double val;
  3836                           ;Commands.c: 147: if(strcmp(var,"kp")==0){
  3837                           
  3838                           ;incstack = 0
  3839  002966  C0D8  F019         	movff	set_list@var,strcmp@s1
  3840  00296A  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  3841  00296E  0EF5               	movlw	low STR_22
  3842  002970  6E1B               	movwf	strcmp@s2,c
  3843  002972  0E7F               	movlw	high STR_22
  3844  002974  6E1C               	movwf	strcmp@s2+1,c
  3845  002976  EC4C  F02C         	call	_strcmp	;wreg free
  3846  00297A  5019               	movf	?_strcmp,w,c
  3847  00297C  101A               	iorwf	?_strcmp+1,w,c
  3848  00297E  A4D8               	btfss	status,2,c
  3849  002980  D017               	goto	l161
  3850                           
  3851                           ;Commands.c: 148: val=atof(data);
  3852  002982  C0DA  F095         	movff	set_list@data,atof@s
  3853  002986  C0DB  F096         	movff	set_list@data+1,atof@s+1
  3854  00298A  EC25  F029         	call	_atof	;wreg free
  3855  00298E  C095  F0DC         	movff	?_atof,set_list@val
  3856  002992  C096  F0DD         	movff	?_atof+1,set_list@val+1
  3857  002996  C097  F0DE         	movff	?_atof+2,set_list@val+2
  3858                           
  3859                           ;Commands.c: 149: set_PID_Kp((float)val);
  3860  00299A  C0DC  F019         	movff	set_list@val,set_PID_Kp@val
  3861  00299E  C0DD  F01A         	movff	set_list@val+1,set_PID_Kp@val+1
  3862  0029A2  C0DE  F01B         	movff	set_list@val+2,set_PID_Kp@val+2
  3863  0029A6  EC9C  F028         	call	_set_PID_Kp	;wreg free
  3864                           
  3865                           ;Commands.c: 150: Save_Variables();
  3866  0029AA  EC7D  F03A         	call	_Save_Variables	;wreg free
  3867                           
  3868                           ;Commands.c: 151: }
  3869  0029AE  D16A               	goto	l182
  3870  0029B0                     l161:
  3871  0029B0  FFFF               	dw	65535	; assembler added errata NOP
  3872                           
  3873                           ;Commands.c: 152: else if(strcmp(var,"ti")==0){
  3874  0029B2  C0D8  F019         	movff	set_list@var,strcmp@s1
  3875  0029B6  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  3876  0029BA  0EF2               	movlw	low STR_23
  3877  0029BC  6E1B               	movwf	strcmp@s2,c
  3878  0029BE  0E7F               	movlw	high STR_23
  3879  0029C0  6E1C               	movwf	strcmp@s2+1,c
  3880  0029C2  EC4C  F02C         	call	_strcmp	;wreg free
  3881  0029C6  5019               	movf	?_strcmp,w,c
  3882  0029C8  101A               	iorwf	?_strcmp+1,w,c
  3883  0029CA  A4D8               	btfss	status,2,c
  3884  0029CC  D017               	goto	l163
  3885                           
  3886                           ;Commands.c: 153: val=atof(data);
  3887  0029CE  C0DA  F095         	movff	set_list@data,atof@s
  3888  0029D2  C0DB  F096         	movff	set_list@data+1,atof@s+1
  3889  0029D6  EC25  F029         	call	_atof	;wreg free
  3890  0029DA  C095  F0DC         	movff	?_atof,set_list@val
  3891  0029DE  C096  F0DD         	movff	?_atof+1,set_list@val+1
  3892  0029E2  C097  F0DE         	movff	?_atof+2,set_list@val+2
  3893                           
  3894                           ;Commands.c: 154: set_PID_Ki(val);
  3895  0029E6  C0DC  F019         	movff	set_list@val,set_PID_Ki@val
  3896  0029EA  C0DD  F01A         	movff	set_list@val+1,set_PID_Ki@val+1
  3897  0029EE  C0DE  F01B         	movff	set_list@val+2,set_PID_Ki@val+2
  3898  0029F2  EC9D  F026         	call	_set_PID_Ki	;wreg free
  3899                           
  3900                           ;Commands.c: 155: Save_Variables();
  3901  0029F6  EC7D  F03A         	call	_Save_Variables	;wreg free
  3902                           
  3903                           ;Commands.c: 156: }
  3904  0029FA  D144               	goto	l182
  3905  0029FC                     l163:
  3906  0029FC  FFFF               	dw	65535	; assembler added errata NOP
  3907                           
  3908                           ;Commands.c: 157: else if(strcmp(var,"td")==0){
  3909  0029FE  C0D8  F019         	movff	set_list@var,strcmp@s1
  3910  002A02  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  3911  002A06  0EEF               	movlw	low STR_24
  3912  002A08  6E1B               	movwf	strcmp@s2,c
  3913  002A0A  0E7F               	movlw	high STR_24
  3914  002A0C  6E1C               	movwf	strcmp@s2+1,c
  3915  002A0E  EC4C  F02C         	call	_strcmp	;wreg free
  3916  002A12  5019               	movf	?_strcmp,w,c
  3917  002A14  101A               	iorwf	?_strcmp+1,w,c
  3918  002A16  A4D8               	btfss	status,2,c
  3919  002A18  D017               	goto	l165
  3920                           
  3921                           ;Commands.c: 158: val=atof(data);
  3922  002A1A  C0DA  F095         	movff	set_list@data,atof@s
  3923  002A1E  C0DB  F096         	movff	set_list@data+1,atof@s+1
  3924  002A22  EC25  F029         	call	_atof	;wreg free
  3925  002A26  C095  F0DC         	movff	?_atof,set_list@val
  3926  002A2A  C096  F0DD         	movff	?_atof+1,set_list@val+1
  3927  002A2E  C097  F0DE         	movff	?_atof+2,set_list@val+2
  3928                           
  3929                           ;Commands.c: 159: set_PID_Kd(val);
  3930  002A32  C0DC  F019         	movff	set_list@val,set_PID_Kd@val
  3931  002A36  C0DD  F01A         	movff	set_list@val+1,set_PID_Kd@val+1
  3932  002A3A  C0DE  F01B         	movff	set_list@val+2,set_PID_Kd@val+2
  3933  002A3E  EC94  F026         	call	_set_PID_Kd	;wreg free
  3934                           
  3935                           ;Commands.c: 160: Save_Variables();
  3936  002A42  EC7D  F03A         	call	_Save_Variables	;wreg free
  3937                           
  3938                           ;Commands.c: 161: }
  3939  002A46  D11E               	goto	l182
  3940  002A48                     l165:
  3941  002A48  FFFF               	dw	65535	; assembler added errata NOP
  3942                           
  3943                           ;Commands.c: 162: else if(strcmp(var,"sample_time")==0){
  3944  002A4A  C0D8  F019         	movff	set_list@var,strcmp@s1
  3945  002A4E  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  3946  002A52  0E0C               	movlw	low STR_25
  3947  002A54  6E1B               	movwf	strcmp@s2,c
  3948  002A56  0E7F               	movlw	high STR_25
  3949  002A58  6E1C               	movwf	strcmp@s2+1,c
  3950  002A5A  EC4C  F02C         	call	_strcmp	;wreg free
  3951  002A5E  5019               	movf	?_strcmp,w,c
  3952  002A60  101A               	iorwf	?_strcmp+1,w,c
  3953  002A62  A4D8               	btfss	status,2,c
  3954  002A64  D017               	goto	l167
  3955                           
  3956                           ;Commands.c: 163: val=atof(data);
  3957  002A66  C0DA  F095         	movff	set_list@data,atof@s
  3958  002A6A  C0DB  F096         	movff	set_list@data+1,atof@s+1
  3959  002A6E  EC25  F029         	call	_atof	;wreg free
  3960  002A72  C095  F0DC         	movff	?_atof,set_list@val
  3961  002A76  C096  F0DD         	movff	?_atof+1,set_list@val+1
  3962  002A7A  C097  F0DE         	movff	?_atof+2,set_list@val+2
  3963                           
  3964                           ;Commands.c: 164: set_PID_T(val);
  3965  002A7E  C0DC  F019         	movff	set_list@val,set_PID_T@val
  3966  002A82  C0DD  F01A         	movff	set_list@val+1,set_PID_T@val+1
  3967  002A86  C0DE  F01B         	movff	set_list@val+2,set_PID_T@val+2
  3968  002A8A  ECA6  F026         	call	_set_PID_T	;wreg free
  3969                           
  3970                           ;Commands.c: 165: Save_Variables();
  3971  002A8E  EC7D  F03A         	call	_Save_Variables	;wreg free
  3972                           
  3973                           ;Commands.c: 166: }
  3974  002A92  D0F8               	goto	l182
  3975  002A94                     l167:
  3976  002A94  FFFF               	dw	65535	; assembler added errata NOP
  3977                           
  3978                           ;Commands.c: 167: else if(strcmp(var,"setpoint")==0){
  3979  002A96  C0D8  F019         	movff	set_list@var,strcmp@s1
  3980  002A9A  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  3981  002A9E  0E48               	movlw	low STR_26
  3982  002AA0  6E1B               	movwf	strcmp@s2,c
  3983  002AA2  0E7F               	movlw	high STR_26
  3984  002AA4  6E1C               	movwf	strcmp@s2+1,c
  3985  002AA6  EC4C  F02C         	call	_strcmp	;wreg free
  3986  002AAA  5019               	movf	?_strcmp,w,c
  3987  002AAC  101A               	iorwf	?_strcmp+1,w,c
  3988  002AAE  A4D8               	btfss	status,2,c
  3989  002AB0  D017               	goto	l169
  3990                           
  3991                           ;Commands.c: 168: val=atof(data);
  3992  002AB2  C0DA  F095         	movff	set_list@data,atof@s
  3993  002AB6  C0DB  F096         	movff	set_list@data+1,atof@s+1
  3994  002ABA  EC25  F029         	call	_atof	;wreg free
  3995  002ABE  C095  F0DC         	movff	?_atof,set_list@val
  3996  002AC2  C096  F0DD         	movff	?_atof+1,set_list@val+1
  3997  002AC6  C097  F0DE         	movff	?_atof+2,set_list@val+2
  3998                           
  3999                           ;Commands.c: 169: set_PID_setpoint(val);
  4000  002ACA  C0DC  F019         	movff	set_list@val,set_PID_setpoint@val
  4001  002ACE  C0DD  F01A         	movff	set_list@val+1,set_PID_setpoint@val+1
  4002  002AD2  C0DE  F01B         	movff	set_list@val+2,set_PID_setpoint@val+2
  4003  002AD6  ECAF  F026         	call	_set_PID_setpoint	;wreg free
  4004                           
  4005                           ;Commands.c: 170: Save_Variables();
  4006  002ADA  EC7D  F03A         	call	_Save_Variables	;wreg free
  4007                           
  4008                           ;Commands.c: 171: }
  4009  002ADE  D0D2               	goto	l182
  4010  002AE0                     l169:
  4011  002AE0  FFFF               	dw	65535	; assembler added errata NOP
  4012                           
  4013                           ;Commands.c: 172: else if(strcmp(var,"deadband")==0){
  4014  002AE2  C0D8  F019         	movff	set_list@var,strcmp@s1
  4015  002AE6  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4016  002AEA  0E36               	movlw	low STR_27
  4017  002AEC  6E1B               	movwf	strcmp@s2,c
  4018  002AEE  0E7F               	movlw	high STR_27
  4019  002AF0  6E1C               	movwf	strcmp@s2+1,c
  4020  002AF2  EC4C  F02C         	call	_strcmp	;wreg free
  4021  002AF6  5019               	movf	?_strcmp,w,c
  4022  002AF8  101A               	iorwf	?_strcmp+1,w,c
  4023  002AFA  A4D8               	btfss	status,2,c
  4024  002AFC  D017               	goto	l171
  4025                           
  4026                           ;Commands.c: 173: val=atof(data);
  4027  002AFE  C0DA  F095         	movff	set_list@data,atof@s
  4028  002B02  C0DB  F096         	movff	set_list@data+1,atof@s+1
  4029  002B06  EC25  F029         	call	_atof	;wreg free
  4030  002B0A  C095  F0DC         	movff	?_atof,set_list@val
  4031  002B0E  C096  F0DD         	movff	?_atof+1,set_list@val+1
  4032  002B12  C097  F0DE         	movff	?_atof+2,set_list@val+2
  4033                           
  4034                           ;Commands.c: 174: set_Deadband(val);
  4035  002B16  C0DC  F019         	movff	set_list@val,set_Deadband@val
  4036  002B1A  C0DD  F01A         	movff	set_list@val+1,set_Deadband@val+1
  4037  002B1E  C0DE  F01B         	movff	set_list@val+2,set_Deadband@val+2
  4038  002B22  EC8B  F026         	call	_set_Deadband	;wreg free
  4039                           
  4040                           ;Commands.c: 175: Save_Variables();
  4041  002B26  EC7D  F03A         	call	_Save_Variables	;wreg free
  4042                           
  4043                           ;Commands.c: 176: }
  4044  002B2A  D0AC               	goto	l182
  4045  002B2C                     l171:
  4046  002B2C  FFFF               	dw	65535	; assembler added errata NOP
  4047                           
  4048                           ;Commands.c: 177: else if(strcmp(var,"rc")==0){
  4049  002B2E  C0D8  F019         	movff	set_list@var,strcmp@s1
  4050  002B32  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4051  002B36  0EE9               	movlw	low STR_28
  4052  002B38  6E1B               	movwf	strcmp@s2,c
  4053  002B3A  0E7F               	movlw	high STR_28
  4054  002B3C  6E1C               	movwf	strcmp@s2+1,c
  4055  002B3E  EC4C  F02C         	call	_strcmp	;wreg free
  4056  002B42  5019               	movf	?_strcmp,w,c
  4057  002B44  101A               	iorwf	?_strcmp+1,w,c
  4058  002B46  A4D8               	btfss	status,2,c
  4059  002B48  D017               	goto	l173
  4060                           
  4061                           ;Commands.c: 178: val=atof(data);
  4062  002B4A  C0DA  F095         	movff	set_list@data,atof@s
  4063  002B4E  C0DB  F096         	movff	set_list@data+1,atof@s+1
  4064  002B52  EC25  F029         	call	_atof	;wreg free
  4065  002B56  C095  F0DC         	movff	?_atof,set_list@val
  4066  002B5A  C096  F0DD         	movff	?_atof+1,set_list@val+1
  4067  002B5E  C097  F0DE         	movff	?_atof+2,set_list@val+2
  4068                           
  4069                           ;Commands.c: 179: Set_LP_RC_constant(val);
  4070  002B62  C0DC  F019         	movff	set_list@val,Set_LP_RC_constant@val
  4071  002B66  C0DD  F01A         	movff	set_list@val+1,Set_LP_RC_constant@val+1
  4072  002B6A  C0DE  F01B         	movff	set_list@val+2,Set_LP_RC_constant@val+2
  4073  002B6E  EC82  F026         	call	_Set_LP_RC_constant	;wreg free
  4074                           
  4075                           ;Commands.c: 180: Save_Variables();
  4076  002B72  EC7D  F03A         	call	_Save_Variables	;wreg free
  4077                           
  4078                           ;Commands.c: 181: }
  4079  002B76  D086               	goto	l182
  4080  002B78                     l173:
  4081  002B78  FFFF               	dw	65535	; assembler added errata NOP
  4082                           
  4083                           ;Commands.c: 182: else if(strcmp(var,"max")==0){
  4084  002B7A  C0D8  F019         	movff	set_list@var,strcmp@s1
  4085  002B7E  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4086  002B82  0EE5               	movlw	low STR_10
  4087  002B84  6E1B               	movwf	strcmp@s2,c
  4088  002B86  0E7F               	movlw	high STR_10
  4089  002B88  6E1C               	movwf	strcmp@s2+1,c
  4090  002B8A  EC4C  F02C         	call	_strcmp	;wreg free
  4091  002B8E  5019               	movf	?_strcmp,w,c
  4092  002B90  101A               	iorwf	?_strcmp+1,w,c
  4093  002B92  A4D8               	btfss	status,2,c
  4094  002B94  D017               	goto	l175
  4095                           
  4096                           ;Commands.c: 183: val=atof(data);
  4097  002B96  C0DA  F095         	movff	set_list@data,atof@s
  4098  002B9A  C0DB  F096         	movff	set_list@data+1,atof@s+1
  4099  002B9E  EC25  F029         	call	_atof	;wreg free
  4100  002BA2  C095  F0DC         	movff	?_atof,set_list@val
  4101  002BA6  C096  F0DD         	movff	?_atof+1,set_list@val+1
  4102  002BAA  C097  F0DE         	movff	?_atof+2,set_list@val+2
  4103                           
  4104                           ;Commands.c: 184: set_max_VL(val);
  4105  002BAE  C0DC  F019         	movff	set_list@val,set_max_VL@val
  4106  002BB2  C0DD  F01A         	movff	set_list@val+1,set_max_VL@val+1
  4107  002BB6  C0DE  F01B         	movff	set_list@val+2,set_max_VL@val+2
  4108  002BBA  EC00  F027         	call	_set_max_VL	;wreg free
  4109                           
  4110                           ;Commands.c: 185: Save_Variables();
  4111  002BBE  EC7D  F03A         	call	_Save_Variables	;wreg free
  4112                           
  4113                           ;Commands.c: 186: }
  4114  002BC2  D060               	goto	l182
  4115  002BC4                     l175:
  4116  002BC4  FFFF               	dw	65535	; assembler added errata NOP
  4117                           
  4118                           ;Commands.c: 187: else if(strcmp(var,"min")==0){
  4119  002BC6  C0D8  F019         	movff	set_list@var,strcmp@s1
  4120  002BCA  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4121  002BCE  0ED9               	movlw	low STR_11
  4122  002BD0  6E1B               	movwf	strcmp@s2,c
  4123  002BD2  0E7F               	movlw	high STR_11
  4124  002BD4  6E1C               	movwf	strcmp@s2+1,c
  4125  002BD6  EC4C  F02C         	call	_strcmp	;wreg free
  4126  002BDA  5019               	movf	?_strcmp,w,c
  4127  002BDC  101A               	iorwf	?_strcmp+1,w,c
  4128  002BDE  A4D8               	btfss	status,2,c
  4129  002BE0  D017               	goto	l177
  4130                           
  4131                           ;Commands.c: 188: val=atof(data);
  4132  002BE2  C0DA  F095         	movff	set_list@data,atof@s
  4133  002BE6  C0DB  F096         	movff	set_list@data+1,atof@s+1
  4134  002BEA  EC25  F029         	call	_atof	;wreg free
  4135  002BEE  C095  F0DC         	movff	?_atof,set_list@val
  4136  002BF2  C096  F0DD         	movff	?_atof+1,set_list@val+1
  4137  002BF6  C097  F0DE         	movff	?_atof+2,set_list@val+2
  4138                           
  4139                           ;Commands.c: 189: set_min_VL(val);
  4140  002BFA  C0DC  F019         	movff	set_list@val,set_min_VL@val
  4141  002BFE  C0DD  F01A         	movff	set_list@val+1,set_min_VL@val+1
  4142  002C02  C0DE  F01B         	movff	set_list@val+2,set_min_VL@val+2
  4143  002C06  EC09  F027         	call	_set_min_VL	;wreg free
  4144                           
  4145                           ;Commands.c: 190: Save_Variables();
  4146  002C0A  EC7D  F03A         	call	_Save_Variables	;wreg free
  4147                           
  4148                           ;Commands.c: 191: }
  4149  002C0E  D03A               	goto	l182
  4150  002C10                     l177:
  4151  002C10  FFFF               	dw	65535	; assembler added errata NOP
  4152                           
  4153                           ;Commands.c: 192: else if(strcmp(var,"time")==0){
  4154  002C12  C0D8  F019         	movff	set_list@var,strcmp@s1
  4155  002C16  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4156  002C1A  0E13               	movlw	low (STR_25+7)
  4157  002C1C  6E1B               	movwf	strcmp@s2,c
  4158  002C1E  0E7F               	movlw	high (STR_25+7)
  4159  002C20  6E1C               	movwf	strcmp@s2+1,c
  4160  002C22  EC4C  F02C         	call	_strcmp	;wreg free
  4161  002C26  5019               	movf	?_strcmp,w,c
  4162  002C28  101A               	iorwf	?_strcmp+1,w,c
  4163  002C2A  A4D8               	btfss	status,2,c
  4164  002C2C  D007               	goto	l179
  4165                           
  4166                           ;Commands.c: 193: time_set(data);
  4167  002C2E  C0DA  F06B         	movff	set_list@data,time_set@tim
  4168  002C32  C0DB  F06C         	movff	set_list@data+1,time_set@tim+1
  4169  002C36  ECD5  F036         	call	_time_set	;wreg free
  4170                           
  4171                           ;Commands.c: 194: }
  4172  002C3A  D024               	goto	l182
  4173  002C3C                     l179:
  4174  002C3C  FFFF               	dw	65535	; assembler added errata NOP
  4175                           
  4176                           ;Commands.c: 195: else if(strcmp(var,"date")==0){
  4177  002C3E  C0D8  F019         	movff	set_list@var,strcmp@s1
  4178  002C42  C0D9  F01A         	movff	set_list@var+1,strcmp@s1+1
  4179  002C46  0EA5               	movlw	low STR_32
  4180  002C48  6E1B               	movwf	strcmp@s2,c
  4181  002C4A  0E7F               	movlw	high STR_32
  4182  002C4C  6E1C               	movwf	strcmp@s2+1,c
  4183  002C4E  EC4C  F02C         	call	_strcmp	;wreg free
  4184  002C52  5019               	movf	?_strcmp,w,c
  4185  002C54  101A               	iorwf	?_strcmp+1,w,c
  4186  002C56  A4D8               	btfss	status,2,c
  4187  002C58  D007               	goto	l181
  4188                           
  4189                           ;Commands.c: 196: date_set(data);
  4190  002C5A  C0DA  F06B         	movff	set_list@data,date_set@dat
  4191  002C5E  C0DB  F06C         	movff	set_list@data+1,date_set@dat+1
  4192  002C62  EC01  F03D         	call	_date_set	;wreg free
  4193                           
  4194                           ;Commands.c: 197: }
  4195  002C66  D00E               	goto	l182
  4196  002C68                     l181:
  4197  002C68  FFFF               	dw	65535	; assembler added errata NOP
  4198                           
  4199                           ;Commands.c: 199: else{
  4200                           ;Commands.c: 200: sprintf(buffer,"Parametro errado");
  4201  002C6A  C0F7  F0C0         	movff	_buffer,sprintf@wh
  4202  002C6E  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  4203  002C72  0EFB               	movlw	low STR_21
  4204  002C74  0100               	movlb	0	; () banked
  4205  002C76  6FC2               	movwf	sprintf@f& (0+255),b
  4206  002C78  0E7E               	movlw	high STR_21
  4207  002C7A  0100               	movlb	0	; () banked
  4208  002C7C  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  4209  002C7E  EC10  F02F         	call	_sprintf	;wreg free
  4210                           
  4211                           ;Commands.c: 201: TXIE=1;
  4212  002C82  889D               	bsf	3997,4,c	;volatile
  4213  002C84                     l182:
  4214  002C84  FFFF               	dw	65535	; assembler added errata NOP
  4215  002C86  0012               	return		;funcret
  4216  002C88  FFFF               	dw	65535	; errata NOP
  4217  002C8A                     __end_of_set_list:
  4218                           	opt stack 0
  4219                           tblptru	equ	0xFF8
  4220                           tblptrh	equ	0xFF7
  4221                           tblptrl	equ	0xFF6
  4222                           tablat	equ	0xFF5
  4223                           intcon	equ	0xFF2
  4224                           postinc0	equ	0xFEE
  4225                           wreg	equ	0xFE8
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _time_set *****************
  4233 ;; Defined at:
  4234 ;;		line 328 in file "Commands.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  tim             2   11[BANK0 ] PTR unsigned char 
  4237 ;;		 -> rx_buffer(20), NULL(0), 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  ptr             6   21[BANK0 ] PTR unsigned char [3]
  4240 ;;		 -> rx_buffer(20), NULL(0), 
  4241 ;;  data            6   15[BANK0 ] int [3]
  4242 ;;  hour            3   29[BANK0 ] struct Time_Data
  4243 ;;  i               2   32[BANK0 ] int 
  4244 ;;  sep_tok         2   27[BANK0 ] PTR unsigned char 
  4245 ;;		 -> STR_70(2), 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4255 ;;      Params:         0       2       0       0       0       0       0
  4256 ;;      Locals:         0      19       0       0       0       0       0
  4257 ;;      Temps:          0       2       0       0       0       0       0
  4258 ;;      Totals:         0      23       0       0       0       0       0
  4259 ;;Total ram usage:       23 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    4
  4262 ;; This function calls:
  4263 ;;		_atoi
  4264 ;;		_intTObcd
  4265 ;;		_set_time
  4266 ;;		_strtok
  4267 ;; This function is called by:
  4268 ;;		_set_list
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text4
  4273  006DAA                     __ptext4:
  4274                           	opt stack 0
  4275  006DAA                     _time_set:
  4276                           	opt stack 0
  4277  006DAA  FFFF               	dw	65535	; assembler added errata NOP
  4278                           
  4279                           ;Commands.c: 329: char * ptr[3];
  4280                           ;Commands.c: 330: char * sep_tok = ":";
  4281                           
  4282                           ;incstack = 0
  4283  006DAC  0EFC               	movlw	low STR_70
  4284  006DAE  0100               	movlb	0	; () banked
  4285  006DB0  6F7B               	movwf	time_set@sep_tok& (0+255),b
  4286  006DB2  0E7F               	movlw	high STR_70
  4287  006DB4  0100               	movlb	0	; () banked
  4288  006DB6  6F7C               	movwf	(time_set@sep_tok+1)& (0+255),b
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;Commands.c: 331: int i=0;
  4292  006DB8  0E00               	movlw	0
  4293  006DBA  0100               	movlb	0	; () banked
  4294  006DBC  6F81               	movwf	(time_set@i+1)& (0+255),b
  4295  006DBE  0E00               	movlw	0
  4296  006DC0  6F80               	movwf	time_set@i& (0+255),b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;Commands.c: 332: int data[3];
  4300                           ;Commands.c: 333: struct Time_Data hour;
  4301                           ;Commands.c: 335: ptr[i] = strtok(tim, sep_tok);
  4302  006DC2  C06B  F024         	movff	time_set@tim,strtok@s1
  4303  006DC6  C06C  F025         	movff	time_set@tim+1,strtok@s1+1
  4304  006DCA  C07B  F026         	movff	time_set@sep_tok,strtok@s2
  4305  006DCE  C07C  F027         	movff	time_set@sep_tok+1,strtok@s2+1
  4306  006DD2  ECF1  F033         	call	_strtok	;wreg free
  4307  006DD6  D036               	goto	L2
  4308  006DD8  FFFF               	dw	65535	; assembler added errata NOP
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;Commands.c: 338: data[i]=intTObcd((int)atoi(ptr[i]));
  4312                           
  4313                           ; BSR set to: 0
  4314  006DDA  90D8               	bcf	status,0,c
  4315  006DDC  0100               	movlb	0	; () banked
  4316  006DDE  3580               	rlcf	time_set@i& (0+255),w,b
  4317  006DE0  6ED9               	movwf	fsr2l,c
  4318  006DE2  0100               	movlb	0	; () banked
  4319  006DE4  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4320  006DE6  6EDA               	movwf	fsr2h,c
  4321  006DE8  0E75               	movlw	low time_set@ptr
  4322  006DEA  26D9               	addwf	fsr2l,f,c
  4323  006DEC  0E00               	movlw	high time_set@ptr
  4324  006DEE  22DA               	addwfc	fsr2h,f,c
  4325  006DF0  CFDE F02D          	movff	postinc2,atoi@s
  4326  006DF4  CFDD F02E          	movff	postdec2,atoi@s+1
  4327  006DF8  ECCA  F037         	call	_atoi	;wreg free
  4328  006DFC  C02D  F065         	movff	?_atoi,intTObcd@v
  4329  006E00  C02E  F066         	movff	?_atoi+1,intTObcd@v+1
  4330  006E04  ECC8  F031         	call	_intTObcd	;wreg free
  4331  006E08  90D8               	bcf	status,0,c
  4332  006E0A  0100               	movlb	0	; () banked
  4333  006E0C  3580               	rlcf	time_set@i& (0+255),w,b
  4334  006E0E  6ED9               	movwf	fsr2l,c
  4335  006E10  0100               	movlb	0	; () banked
  4336  006E12  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4337  006E14  6EDA               	movwf	fsr2h,c
  4338  006E16  0E6F               	movlw	low time_set@data
  4339  006E18  26D9               	addwf	fsr2l,f,c
  4340  006E1A  0E00               	movlw	high time_set@data
  4341  006E1C  22DA               	addwfc	fsr2h,f,c
  4342  006E1E  0100               	movlb	0	; () banked
  4343  006E20  C065  FFDE         	movff	?_intTObcd,postinc2
  4344  006E24  0100               	movlb	0	; () banked
  4345  006E26  C066  FFDD         	movff	?_intTObcd+1,postdec2
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;Commands.c: 340: ptr[++i] = strtok((0), sep_tok);
  4349  006E2A  0E00               	movlw	0
  4350  006E2C  6E24               	movwf	strtok@s1,c
  4351  006E2E  0E00               	movlw	0
  4352  006E30  6E25               	movwf	strtok@s1+1,c
  4353  006E32  C07B  F026         	movff	time_set@sep_tok,strtok@s2
  4354  006E36  C07C  F027         	movff	time_set@sep_tok+1,strtok@s2+1
  4355  006E3A  ECF1  F033         	call	_strtok	;wreg free
  4356  006E3E  0100               	movlb	0	; () banked
  4357  006E40  4B80               	infsnz	time_set@i& (0+255),f,b
  4358  006E42  2B81               	incf	(time_set@i+1)& (0+255),f,b
  4359  006E44                     L2:
  4360  006E44  FFFF               	dw	65535	; assembler added errata NOP
  4361  006E46  90D8               	bcf	status,0,c
  4362  006E48  0100               	movlb	0	; () banked
  4363  006E4A  3580               	rlcf	time_set@i& (0+255),w,b
  4364  006E4C  6ED9               	movwf	fsr2l,c
  4365  006E4E  0100               	movlb	0	; () banked
  4366  006E50  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4367  006E52  6EDA               	movwf	fsr2h,c
  4368  006E54  0E75               	movlw	low time_set@ptr
  4369  006E56  26D9               	addwf	fsr2l,f,c
  4370  006E58  0E00               	movlw	high time_set@ptr
  4371  006E5A  22DA               	addwfc	fsr2h,f,c
  4372  006E5C  C024  FFDE         	movff	?_strtok,postinc2
  4373  006E60  C025  FFDD         	movff	?_strtok+1,postdec2
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ; BSR set to: 0
  4378  006E64  90D8               	bcf	status,0,c
  4379  006E66  0100               	movlb	0	; () banked
  4380  006E68  3580               	rlcf	time_set@i& (0+255),w,b
  4381  006E6A  6ED9               	movwf	fsr2l,c
  4382  006E6C  0100               	movlb	0	; () banked
  4383  006E6E  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4384  006E70  6EDA               	movwf	fsr2h,c
  4385  006E72  0E75               	movlw	low time_set@ptr
  4386  006E74  26D9               	addwf	fsr2l,f,c
  4387  006E76  0E00               	movlw	high time_set@ptr
  4388  006E78  22DA               	addwfc	fsr2h,f,c
  4389  006E7A  50DE               	movf	postinc2,w,c
  4390  006E7C  10DE               	iorwf	postinc2,w,c
  4391  006E7E  A4D8               	btfss	status,2,c
  4392  006E80  D7AB               	goto	l234
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;Commands.c: 341: }
  4396                           ;Commands.c: 342: hour.hours=data[0];
  4397  006E82  C06F  F07F         	movff	time_set@data,time_set@hour+2
  4398                           
  4399                           ;Commands.c: 343: hour.minutes=data[1];
  4400  006E86  C071  F07E         	movff	time_set@data+2,time_set@hour+1
  4401                           
  4402                           ;Commands.c: 344: hour.seconds=data[2];
  4403  006E8A  C073  F07D         	movff	time_set@data+4,time_set@hour
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;Commands.c: 347: set_time(&hour);
  4407  006E8E  0E7D               	movlw	low time_set@hour
  4408  006E90  6E22               	movwf	set_time@Time_Data,c
  4409  006E92  0E00               	movlw	high time_set@hour
  4410  006E94  6E23               	movwf	set_time@Time_Data+1,c
  4411  006E96  EC59  F028         	call	_set_time	;wreg free
  4412  006E9A  0012               	return		;funcret
  4413  006E9C  FFFF               	dw	65535	; errata NOP
  4414  006E9E                     __end_of_time_set:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           intcon	equ	0xFF2
  4421                           postinc0	equ	0xFEE
  4422                           wreg	equ	0xFE8
  4423                           postinc2	equ	0xFDE
  4424                           postdec2	equ	0xFDD
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function _set_time *****************
  4430 ;; Defined at:
  4431 ;;		line 25 in file "DS1307.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;  Time_Data       2   33[COMRAM] PTR unsigned char 
  4434 ;;		 -> time_set@hour(3), 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;		None
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      unsigned char 
  4439 ;; Registers used:
  4440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         2       0       0       0       0       0       0
  4447 ;;      Locals:         0       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:         2       0       0       0       0       0       0
  4450 ;;Total ram usage:        2 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    3
  4453 ;; This function calls:
  4454 ;;		_WriteStr_I2C
  4455 ;; This function is called by:
  4456 ;;		_time_set
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text5
  4461  0050B2                     __ptext5:
  4462                           	opt stack 0
  4463  0050B2                     _set_time:
  4464                           	opt stack 0
  4465  0050B2  FFFF               	dw	65535	; assembler added errata NOP
  4466                           
  4467                           ;DS1307.c: 27: WriteStr_I2C(0xd0,0x00,Time_Data,3);
  4468                           
  4469                           ;incstack = 0
  4470  0050B4  0E00               	movlw	0
  4471  0050B6  6E1B               	movwf	WriteStr_I2C@Reg_Addr,c
  4472  0050B8  C022  F01C         	movff	set_time@Time_Data,WriteStr_I2C@Str
  4473  0050BC  C023  F01D         	movff	set_time@Time_Data+1,WriteStr_I2C@Str+1
  4474  0050C0  0E03               	movlw	3
  4475  0050C2  6E1E               	movwf	WriteStr_I2C@Str_Size,c
  4476  0050C4  0ED0               	movlw	208
  4477  0050C6  EC25  F02E         	call	_WriteStr_I2C
  4478                           
  4479                           ;DS1307.c: 28: return(0);
  4480                           ;	Return value of _set_time is never used
  4481  0050CA  0012               	return		;funcret
  4482  0050CC  FFFF               	dw	65535	; errata NOP
  4483  0050CE                     __end_of_set_time:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           intcon	equ	0xFF2
  4490                           postinc0	equ	0xFEE
  4491                           wreg	equ	0xFE8
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _date_set *****************
  4499 ;; Defined at:
  4500 ;;		line 300 in file "Commands.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  dat             2   11[BANK0 ] PTR unsigned char 
  4503 ;;		 -> rx_buffer(20), NULL(0), 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  ptr            10   15[BANK0 ] PTR unsigned char [5]
  4506 ;;		 -> rx_buffer(20), NULL(0), 
  4507 ;;  data            8   27[BANK0 ] int [4]
  4508 ;;  date            4   35[BANK0 ] struct Date_Data
  4509 ;;  i               2   39[BANK0 ] int 
  4510 ;;  sep_tok         2   25[BANK0 ] PTR unsigned char 
  4511 ;;		 -> STR_69(2), 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         0       2       0       0       0       0       0
  4522 ;;      Locals:         0      26       0       0       0       0       0
  4523 ;;      Temps:          0       2       0       0       0       0       0
  4524 ;;      Totals:         0      30       0       0       0       0       0
  4525 ;;Total ram usage:       30 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    4
  4528 ;; This function calls:
  4529 ;;		_atoi
  4530 ;;		_intTObcd
  4531 ;;		_set_date
  4532 ;;		_strtok
  4533 ;; This function is called by:
  4534 ;;		_set_list
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text6
  4539  007A02                     __ptext6:
  4540                           	opt stack 0
  4541  007A02                     _date_set:
  4542                           	opt stack 0
  4543  007A02  FFFF               	dw	65535	; assembler added errata NOP
  4544                           
  4545                           ;Commands.c: 302: char * ptr[5];
  4546                           ;Commands.c: 303: char * sep_tok = "/";
  4547                           
  4548                           ;incstack = 0
  4549  007A04  0EFA               	movlw	low STR_69
  4550  007A06  0100               	movlb	0	; () banked
  4551  007A08  6F79               	movwf	date_set@sep_tok& (0+255),b
  4552  007A0A  0E7F               	movlw	high STR_69
  4553  007A0C  0100               	movlb	0	; () banked
  4554  007A0E  6F7A               	movwf	(date_set@sep_tok+1)& (0+255),b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;Commands.c: 304: int i=0;
  4558  007A10  0E00               	movlw	0
  4559  007A12  0100               	movlb	0	; () banked
  4560  007A14  6F88               	movwf	(date_set@i+1)& (0+255),b
  4561  007A16  0E00               	movlw	0
  4562  007A18  6F87               	movwf	date_set@i& (0+255),b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;Commands.c: 305: int data[4];
  4566                           ;Commands.c: 306: struct Date_Data date;
  4567                           ;Commands.c: 308: ptr[i] = strtok(dat, sep_tok);
  4568  007A1A  C06B  F024         	movff	date_set@dat,strtok@s1
  4569  007A1E  C06C  F025         	movff	date_set@dat+1,strtok@s1+1
  4570  007A22  C079  F026         	movff	date_set@sep_tok,strtok@s2
  4571  007A26  C07A  F027         	movff	date_set@sep_tok+1,strtok@s2+1
  4572  007A2A  ECF1  F033         	call	_strtok	;wreg free
  4573  007A2E  D02E               	goto	L3
  4574  007A30  FFFF               	dw	65535	; assembler added errata NOP
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;Commands.c: 311: data[i]=atoi(ptr[i]);
  4578                           
  4579                           ; BSR set to: 0
  4580  007A32  90D8               	bcf	status,0,c
  4581  007A34  0100               	movlb	0	; () banked
  4582  007A36  3587               	rlcf	date_set@i& (0+255),w,b
  4583  007A38  6ED9               	movwf	fsr2l,c
  4584  007A3A  0100               	movlb	0	; () banked
  4585  007A3C  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4586  007A3E  6EDA               	movwf	fsr2h,c
  4587  007A40  0E6F               	movlw	low date_set@ptr
  4588  007A42  26D9               	addwf	fsr2l,f,c
  4589  007A44  0E00               	movlw	high date_set@ptr
  4590  007A46  22DA               	addwfc	fsr2h,f,c
  4591  007A48  CFDE F02D          	movff	postinc2,atoi@s
  4592  007A4C  CFDD F02E          	movff	postdec2,atoi@s+1
  4593  007A50  ECCA  F037         	call	_atoi	;wreg free
  4594  007A54  90D8               	bcf	status,0,c
  4595  007A56  0100               	movlb	0	; () banked
  4596  007A58  3587               	rlcf	date_set@i& (0+255),w,b
  4597  007A5A  6ED9               	movwf	fsr2l,c
  4598  007A5C  0100               	movlb	0	; () banked
  4599  007A5E  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4600  007A60  6EDA               	movwf	fsr2h,c
  4601  007A62  0E7B               	movlw	low date_set@data
  4602  007A64  26D9               	addwf	fsr2l,f,c
  4603  007A66  0E00               	movlw	high date_set@data
  4604  007A68  22DA               	addwfc	fsr2h,f,c
  4605  007A6A  C02D  FFDE         	movff	?_atoi,postinc2
  4606  007A6E  C02E  FFDD         	movff	?_atoi+1,postdec2
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;Commands.c: 313: ptr[++i] = strtok((0), sep_tok);
  4610  007A72  0E00               	movlw	0
  4611  007A74  6E24               	movwf	strtok@s1,c
  4612  007A76  0E00               	movlw	0
  4613  007A78  6E25               	movwf	strtok@s1+1,c
  4614  007A7A  C079  F026         	movff	date_set@sep_tok,strtok@s2
  4615  007A7E  C07A  F027         	movff	date_set@sep_tok+1,strtok@s2+1
  4616  007A82  ECF1  F033         	call	_strtok	;wreg free
  4617  007A86  0100               	movlb	0	; () banked
  4618  007A88  4B87               	infsnz	date_set@i& (0+255),f,b
  4619  007A8A  2B88               	incf	(date_set@i+1)& (0+255),f,b
  4620  007A8C                     L3:
  4621  007A8C  FFFF               	dw	65535	; assembler added errata NOP
  4622  007A8E  90D8               	bcf	status,0,c
  4623  007A90  0100               	movlb	0	; () banked
  4624  007A92  3587               	rlcf	date_set@i& (0+255),w,b
  4625  007A94  6ED9               	movwf	fsr2l,c
  4626  007A96  0100               	movlb	0	; () banked
  4627  007A98  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4628  007A9A  6EDA               	movwf	fsr2h,c
  4629  007A9C  0E6F               	movlw	low date_set@ptr
  4630  007A9E  26D9               	addwf	fsr2l,f,c
  4631  007AA0  0E00               	movlw	high date_set@ptr
  4632  007AA2  22DA               	addwfc	fsr2h,f,c
  4633  007AA4  C024  FFDE         	movff	?_strtok,postinc2
  4634  007AA8  C025  FFDD         	movff	?_strtok+1,postdec2
  4635                           
  4636                           ; BSR set to: 0
  4637                           
  4638                           ; BSR set to: 0
  4639  007AAC  90D8               	bcf	status,0,c
  4640  007AAE  0100               	movlb	0	; () banked
  4641  007AB0  3587               	rlcf	date_set@i& (0+255),w,b
  4642  007AB2  6ED9               	movwf	fsr2l,c
  4643  007AB4  0100               	movlb	0	; () banked
  4644  007AB6  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4645  007AB8  6EDA               	movwf	fsr2h,c
  4646  007ABA  0E6F               	movlw	low date_set@ptr
  4647  007ABC  26D9               	addwf	fsr2l,f,c
  4648  007ABE  0E00               	movlw	high date_set@ptr
  4649  007AC0  22DA               	addwfc	fsr2h,f,c
  4650  007AC2  50DE               	movf	postinc2,w,c
  4651  007AC4  10DE               	iorwf	postinc2,w,c
  4652  007AC6  A4D8               	btfss	status,2,c
  4653  007AC8  D7B3               	goto	l226
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;Commands.c: 314: }
  4657                           ;Commands.c: 315: data[2]=data[2]-2000;
  4658                           
  4659                           ; BSR set to: 0
  4660  007ACA  0E30               	movlw	48
  4661  007ACC  0100               	movlb	0	; () banked
  4662  007ACE  257F               	addwf	(date_set@data+4)& (0+255),w,b
  4663  007AD0  0100               	movlb	0	; () banked
  4664  007AD2  6F7F               	movwf	(date_set@data+4)& (0+255),b
  4665  007AD4  0EF8               	movlw	248
  4666  007AD6  0100               	movlb	0	; () banked
  4667  007AD8  2180               	addwfc	(date_set@data+5)& (0+255),w,b
  4668  007ADA  0100               	movlb	0	; () banked
  4669  007ADC  6F80               	movwf	(date_set@data+5)& (0+255),b
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;Commands.c: 316: for(i=0;i<4;i++){
  4673  007ADE  0E00               	movlw	0
  4674  007AE0  0100               	movlb	0	; () banked
  4675  007AE2  6F88               	movwf	(date_set@i+1)& (0+255),b
  4676  007AE4  0E00               	movlw	0
  4677  007AE6  6F87               	movwf	date_set@i& (0+255),b
  4678                           
  4679                           ; BSR set to: 0
  4680  007AE8  0100               	movlb	0	; () banked
  4681  007AEA  BF88               	btfsc	(date_set@i+1)& (0+255),7,b
  4682  007AEC  D004               	goto	l228
  4683  007AEE  0100               	movlb	0	; () banked
  4684  007AF0  5188               	movf	(date_set@i+1)& (0+255),w,b
  4685  007AF2  E133               	bnz	l229
  4686  007AF4  D02C               	goto	L4
  4687  007AF6                     l228:
  4688  007AF6  FFFF               	dw	65535	; assembler added errata NOP
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;Commands.c: 317: data[i]=intTObcd(data[i]);
  4692                           
  4693                           ; BSR set to: 0
  4694  007AF8  90D8               	bcf	status,0,c
  4695  007AFA  0100               	movlb	0	; () banked
  4696  007AFC  3587               	rlcf	date_set@i& (0+255),w,b
  4697  007AFE  6ED9               	movwf	fsr2l,c
  4698  007B00  0100               	movlb	0	; () banked
  4699  007B02  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4700  007B04  6EDA               	movwf	fsr2h,c
  4701  007B06  0E7B               	movlw	low date_set@data
  4702  007B08  26D9               	addwf	fsr2l,f,c
  4703  007B0A  0E00               	movlw	high date_set@data
  4704  007B0C  22DA               	addwfc	fsr2h,f,c
  4705  007B0E  CFDE F065          	movff	postinc2,intTObcd@v
  4706  007B12  CFDD F066          	movff	postdec2,intTObcd@v+1
  4707  007B16  ECC8  F031         	call	_intTObcd	;wreg free
  4708  007B1A  90D8               	bcf	status,0,c
  4709  007B1C  0100               	movlb	0	; () banked
  4710  007B1E  3587               	rlcf	date_set@i& (0+255),w,b
  4711  007B20  6ED9               	movwf	fsr2l,c
  4712  007B22  0100               	movlb	0	; () banked
  4713  007B24  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4714  007B26  6EDA               	movwf	fsr2h,c
  4715  007B28  0E7B               	movlw	low date_set@data
  4716  007B2A  26D9               	addwf	fsr2l,f,c
  4717  007B2C  0E00               	movlw	high date_set@data
  4718  007B2E  22DA               	addwfc	fsr2h,f,c
  4719  007B30  0100               	movlb	0	; () banked
  4720  007B32  C065  FFDE         	movff	?_intTObcd,postinc2
  4721  007B36  0100               	movlb	0	; () banked
  4722  007B38  C066  FFDD         	movff	?_intTObcd+1,postdec2
  4723                           
  4724                           ; BSR set to: 0
  4725  007B3C  0100               	movlb	0	; () banked
  4726  007B3E  4B87               	infsnz	date_set@i& (0+255),f,b
  4727  007B40  2B88               	incf	(date_set@i+1)& (0+255),f,b
  4728                           
  4729                           ; BSR set to: 0
  4730  007B42  0100               	movlb	0	; () banked
  4731  007B44  BF88               	btfsc	(date_set@i+1)& (0+255),7,b
  4732  007B46  D7D7               	goto	l228
  4733  007B48  0100               	movlb	0	; () banked
  4734  007B4A  5188               	movf	(date_set@i+1)& (0+255),w,b
  4735  007B4C  E106               	bnz	u10660
  4736  007B4E                     L4:
  4737  007B4E  FFFF               	dw	65535	; assembler added errata NOP
  4738  007B50  0E04               	movlw	4
  4739  007B52  0100               	movlb	0	; () banked
  4740  007B54  5D87               	subwf	date_set@i& (0+255),w,b
  4741  007B56  A0D8               	btfss	status,0,c
  4742  007B58  D7CE               	goto	l228
  4743  007B5A                     u10660:
  4744  007B5A                     l229:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;Commands.c: 318: }
  4748                           ;Commands.c: 319: date.date=data[0];
  4749  007B5A  C07B  F084         	movff	date_set@data,date_set@date+1
  4750                           
  4751                           ;Commands.c: 320: date.month=data[1];
  4752  007B5E  C07D  F085         	movff	date_set@data+2,date_set@date+2
  4753                           
  4754                           ;Commands.c: 321: date.year=data[2];
  4755  007B62  C07F  F086         	movff	date_set@data+4,date_set@date+3
  4756                           
  4757                           ;Commands.c: 322: date.day_w=data[3];
  4758  007B66  C081  F083         	movff	date_set@data+6,date_set@date
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;Commands.c: 325: set_date(&date);
  4762  007B6A  0E83               	movlw	low date_set@date
  4763  007B6C  6E22               	movwf	set_date@Date_Data,c
  4764  007B6E  0E00               	movlw	high date_set@date
  4765  007B70  6E23               	movwf	set_date@Date_Data+1,c
  4766  007B72  EC4B  F028         	call	_set_date	;wreg free
  4767  007B76  0012               	return		;funcret
  4768  007B78  FFFF               	dw	65535	; errata NOP
  4769  007B7A                     __end_of_date_set:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           intcon	equ	0xFF2
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           fsr2h	equ	0xFDA
  4781                           fsr2l	equ	0xFD9
  4782                           status	equ	0xFD8
  4783                           
  4784 ;; *************** function _strtok *****************
  4785 ;; Defined at:
  4786 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strtok.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  s1              2   35[COMRAM] PTR unsigned char 
  4789 ;;		 -> rx_buffer(20), NULL(0), 
  4790 ;;  s2              2   37[COMRAM] PTR const unsigned char 
  4791 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;		None
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  2   35[COMRAM] PTR unsigned char 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4803 ;;      Params:         4       0       0       0       0       0       0
  4804 ;;      Locals:         0       0       0       0       0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0
  4806 ;;      Totals:         4       0       0       0       0       0       0
  4807 ;;Total ram usage:        4 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    3
  4810 ;; This function calls:
  4811 ;;		_strcspn
  4812 ;;		_strspn
  4813 ;; This function is called by:
  4814 ;;		_read_command
  4815 ;;		_date_set
  4816 ;;		_time_set
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text7
  4821  0067E2                     __ptext7:
  4822                           	opt stack 0
  4823  0067E2                     _strtok:
  4824                           	opt stack 0
  4825  0067E2  FFFF               	dw	65535	; assembler added errata NOP
  4826                           
  4827                           ;incstack = 0
  4828  0067E4  5024               	movf	strtok@s1,w,c
  4829  0067E6  1025               	iorwf	strtok@s1+1,w,c
  4830  0067E8  A4D8               	btfss	status,2,c
  4831  0067EA  D004               	goto	l2093
  4832  0067EC  C041  F024         	movff	strtok@sp,strtok@s1
  4833  0067F0  C042  F025         	movff	strtok@sp+1,strtok@s1+1
  4834  0067F4                     l2093:
  4835  0067F4  FFFF               	dw	65535	; assembler added errata NOP
  4836  0067F6  5024               	movf	strtok@s1,w,c
  4837  0067F8  1025               	iorwf	strtok@s1+1,w,c
  4838  0067FA  A4D8               	btfss	status,2,c
  4839  0067FC  D005               	goto	l2094
  4840  0067FE  0E00               	movlw	0
  4841  006800  6E24               	movwf	?_strtok,c
  4842  006802  0E00               	movlw	0
  4843  006804  6E25               	movwf	?_strtok+1,c
  4844  006806  D04A               	goto	l9633
  4845  006808                     l2094:
  4846  006808  FFFF               	dw	65535	; assembler added errata NOP
  4847  00680A  C024  F01D         	movff	strtok@s1,strspn@s1
  4848  00680E  C025  F01E         	movff	strtok@s1+1,strspn@s1+1
  4849  006812  C026  F01F         	movff	strtok@s2,strspn@s2
  4850  006816  C027  F020         	movff	strtok@s2+1,strspn@s2+1
  4851  00681A  ECFB  F02C         	call	_strspn	;wreg free
  4852  00681E  501D               	movf	?_strspn,w,c
  4853  006820  2624               	addwf	strtok@s1,f,c
  4854  006822  501E               	movf	?_strspn+1,w,c
  4855  006824  2225               	addwfc	strtok@s1+1,f,c
  4856  006826  C024  FFD9         	movff	strtok@s1,fsr2l
  4857  00682A  C025  FFDA         	movff	strtok@s1+1,fsr2h
  4858  00682E  50DF               	movf	indf2,w,c
  4859  006830  A4D8               	btfss	status,2,c
  4860  006832  D009               	goto	l2096
  4861  006834  0E00               	movlw	0
  4862  006836  6E41               	movwf	strtok@sp,c
  4863  006838  0E00               	movlw	0
  4864  00683A  6E42               	movwf	strtok@sp+1,c
  4865  00683C  C041  F024         	movff	strtok@sp,?_strtok
  4866  006840  C042  F025         	movff	strtok@sp+1,?_strtok+1
  4867  006844  D02B               	goto	l9633
  4868  006846                     l2096:
  4869  006846  FFFF               	dw	65535	; assembler added errata NOP
  4870  006848  C024  F01D         	movff	strtok@s1,strcspn@s1
  4871  00684C  C025  F01E         	movff	strtok@s1+1,strcspn@s1+1
  4872  006850  C026  F01F         	movff	strtok@s2,strcspn@s2
  4873  006854  C027  F020         	movff	strtok@s2+1,strcspn@s2+1
  4874  006858  ECCE  F02C         	call	_strcspn	;wreg free
  4875  00685C  501D               	movf	?_strcspn,w,c
  4876  00685E  2424               	addwf	strtok@s1,w,c
  4877  006860  6E41               	movwf	strtok@sp,c
  4878  006862  501E               	movf	?_strcspn+1,w,c
  4879  006864  2025               	addwfc	strtok@s1+1,w,c
  4880  006866  6E42               	movwf	strtok@sp+1,c
  4881  006868  C041  FFD9         	movff	strtok@sp,fsr2l
  4882  00686C  C042  FFDA         	movff	strtok@sp+1,fsr2h
  4883  006870  50DF               	movf	indf2,w,c
  4884  006872  B4D8               	btfsc	status,2,c
  4885  006874  D009               	goto	l2097
  4886  006876  C041  FFD9         	movff	strtok@sp,fsr2l
  4887  00687A  C042  FFDA         	movff	strtok@sp+1,fsr2h
  4888  00687E  0E00               	movlw	0
  4889  006880  6EDF               	movwf	indf2,c
  4890  006882  4A41               	infsnz	strtok@sp,f,c
  4891  006884  2A42               	incf	strtok@sp+1,f,c
  4892  006886  D005               	goto	l2098
  4893  006888                     l2097:
  4894  006888  FFFF               	dw	65535	; assembler added errata NOP
  4895  00688A  0E00               	movlw	0
  4896  00688C  6E41               	movwf	strtok@sp,c
  4897  00688E  0E00               	movlw	0
  4898  006890  6E42               	movwf	strtok@sp+1,c
  4899  006892                     l2098:
  4900  006892  FFFF               	dw	65535	; assembler added errata NOP
  4901  006894  C024  F024         	movff	strtok@s1,?_strtok
  4902  006898  C025  F025         	movff	strtok@s1+1,?_strtok+1
  4903  00689C                     l9633:
  4904  00689C  FFFF               	dw	65535	; assembler added errata NOP
  4905  00689E  0012               	return		;funcret
  4906  0068A0  FFFF               	dw	65535	; errata NOP
  4907  0068A2                     __end_of_strtok:
  4908                           	opt stack 0
  4909                           tblptru	equ	0xFF8
  4910                           tblptrh	equ	0xFF7
  4911                           tblptrl	equ	0xFF6
  4912                           tablat	equ	0xFF5
  4913                           intcon	equ	0xFF2
  4914                           postinc0	equ	0xFEE
  4915                           wreg	equ	0xFE8
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _strspn *****************
  4924 ;; Defined at:
  4925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strspn.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  4928 ;;		 -> rx_buffer(20), NULL(0), 
  4929 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  4930 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  i               2   33[COMRAM] unsigned int 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  2   28[COMRAM] unsigned int 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4942 ;;      Params:         4       0       0       0       0       0       0
  4943 ;;      Locals:         2       0       0       0       0       0       0
  4944 ;;      Temps:          1       0       0       0       0       0       0
  4945 ;;      Totals:         7       0       0       0       0       0       0
  4946 ;;Total ram usage:        7 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    2
  4949 ;; This function calls:
  4950 ;;		_strchr
  4951 ;; This function is called by:
  4952 ;;		_strtok
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text8
  4957  0059F6                     __ptext8:
  4958                           	opt stack 0
  4959  0059F6                     _strspn:
  4960                           	opt stack 0
  4961  0059F6  FFFF               	dw	65535	; assembler added errata NOP
  4962                           
  4963                           ;incstack = 0
  4964  0059F8  0E00               	movlw	0
  4965  0059FA  6E23               	movwf	strspn@i+1,c
  4966  0059FC  0E00               	movlw	0
  4967  0059FE  6E22               	movwf	strspn@i,c
  4968  005A00  D005               	goto	l2146
  4969  005A02  FFFF               	dw	65535	; assembler added errata NOP
  4970  005A04  4A1D               	infsnz	strspn@s1,f,c
  4971  005A06  2A1E               	incf	strspn@s1+1,f,c
  4972  005A08  4A22               	infsnz	strspn@i,f,c
  4973  005A0A  2A23               	incf	strspn@i+1,f,c
  4974  005A0C                     l2146:
  4975  005A0C  FFFF               	dw	65535	; assembler added errata NOP
  4976  005A0E  C01D  FFD9         	movff	strspn@s1,fsr2l
  4977  005A12  C01E  FFDA         	movff	strspn@s1+1,fsr2h
  4978  005A16  50DF               	movf	indf2,w,c
  4979  005A18  B4D8               	btfsc	status,2,c
  4980  005A1A  D013               	goto	u9390
  4981  005A1C  C01F  F019         	movff	strspn@s2,strchr@ptr
  4982  005A20  C020  F01A         	movff	strspn@s2+1,strchr@ptr+1
  4983  005A24  C01D  FFD9         	movff	strspn@s1,fsr2l
  4984  005A28  C01E  FFDA         	movff	strspn@s1+1,fsr2h
  4985  005A2C  50DF               	movf	indf2,w,c
  4986  005A2E  6E21               	movwf	??_strspn& (0+255),c
  4987  005A30  5021               	movf	??_strspn,w,c
  4988  005A32  6E1B               	movwf	strchr@chr,c
  4989  005A34  6A1C               	clrf	strchr@chr+1,c
  4990  005A36  EC42  F02B         	call	_strchr	;wreg free
  4991  005A3A  5019               	movf	?_strchr,w,c
  4992  005A3C  101A               	iorwf	?_strchr+1,w,c
  4993  005A3E  A4D8               	btfss	status,2,c
  4994  005A40  D7E0               	goto	l2147
  4995  005A42                     u9390:
  4996  005A42  FFFF               	dw	65535	; assembler added errata NOP
  4997  005A44  C022  F01D         	movff	strspn@i,?_strspn
  4998  005A48  C023  F01E         	movff	strspn@i+1,?_strspn+1
  4999  005A4C  0012               	return		;funcret
  5000  005A4E  FFFF               	dw	65535	; errata NOP
  5001  005A50                     __end_of_strspn:
  5002                           	opt stack 0
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           intcon	equ	0xFF2
  5008                           postinc0	equ	0xFEE
  5009                           wreg	equ	0xFE8
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _strcspn *****************
  5018 ;; Defined at:
  5019 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcspn.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  5022 ;;		 -> rx_buffer(20), NULL(0), 
  5023 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  5024 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  i               2   33[COMRAM] unsigned int 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  2   28[COMRAM] unsigned int 
  5029 ;; Registers used:
  5030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5036 ;;      Params:         4       0       0       0       0       0       0
  5037 ;;      Locals:         2       0       0       0       0       0       0
  5038 ;;      Temps:          1       0       0       0       0       0       0
  5039 ;;      Totals:         7       0       0       0       0       0       0
  5040 ;;Total ram usage:        7 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    2
  5043 ;; This function calls:
  5044 ;;		_strchr
  5045 ;; This function is called by:
  5046 ;;		_strtok
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text9
  5051  00599C                     __ptext9:
  5052                           	opt stack 0
  5053  00599C                     _strcspn:
  5054                           	opt stack 0
  5055  00599C  FFFF               	dw	65535	; assembler added errata NOP
  5056                           
  5057                           ;incstack = 0
  5058  00599E  0E00               	movlw	0
  5059  0059A0  6E23               	movwf	strcspn@i+1,c
  5060  0059A2  0E00               	movlw	0
  5061  0059A4  6E22               	movwf	strcspn@i,c
  5062  0059A6  D005               	goto	l2136
  5063  0059A8  FFFF               	dw	65535	; assembler added errata NOP
  5064  0059AA  4A1D               	infsnz	strcspn@s1,f,c
  5065  0059AC  2A1E               	incf	strcspn@s1+1,f,c
  5066  0059AE  4A22               	infsnz	strcspn@i,f,c
  5067  0059B0  2A23               	incf	strcspn@i+1,f,c
  5068  0059B2                     l2136:
  5069  0059B2  FFFF               	dw	65535	; assembler added errata NOP
  5070  0059B4  C01D  FFD9         	movff	strcspn@s1,fsr2l
  5071  0059B8  C01E  FFDA         	movff	strcspn@s1+1,fsr2h
  5072  0059BC  50DF               	movf	indf2,w,c
  5073  0059BE  B4D8               	btfsc	status,2,c
  5074  0059C0  D013               	goto	u9410
  5075  0059C2  C01F  F019         	movff	strcspn@s2,strchr@ptr
  5076  0059C6  C020  F01A         	movff	strcspn@s2+1,strchr@ptr+1
  5077  0059CA  C01D  FFD9         	movff	strcspn@s1,fsr2l
  5078  0059CE  C01E  FFDA         	movff	strcspn@s1+1,fsr2h
  5079  0059D2  50DF               	movf	indf2,w,c
  5080  0059D4  6E21               	movwf	??_strcspn& (0+255),c
  5081  0059D6  5021               	movf	??_strcspn,w,c
  5082  0059D8  6E1B               	movwf	strchr@chr,c
  5083  0059DA  6A1C               	clrf	strchr@chr+1,c
  5084  0059DC  EC42  F02B         	call	_strchr	;wreg free
  5085  0059E0  5019               	movf	?_strchr,w,c
  5086  0059E2  101A               	iorwf	?_strchr+1,w,c
  5087  0059E4  B4D8               	btfsc	status,2,c
  5088  0059E6  D7E0               	goto	l2137
  5089  0059E8                     u9410:
  5090  0059E8  FFFF               	dw	65535	; assembler added errata NOP
  5091  0059EA  C022  F01D         	movff	strcspn@i,?_strcspn
  5092  0059EE  C023  F01E         	movff	strcspn@i+1,?_strcspn+1
  5093  0059F2  0012               	return		;funcret
  5094  0059F4  FFFF               	dw	65535	; errata NOP
  5095  0059F6                     __end_of_strcspn:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf2	equ	0xFDF
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           fsr2h	equ	0xFDA
  5108                           fsr2l	equ	0xFD9
  5109                           status	equ	0xFD8
  5110                           
  5111 ;; *************** function _strchr *****************
  5112 ;; Defined at:
  5113 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strchr.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  ptr             2   24[COMRAM] PTR const unsigned char 
  5116 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  5117 ;;  chr             2   26[COMRAM] int 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  2   24[COMRAM] PTR unsigned char 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5129 ;;      Params:         4       0       0       0       0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0
  5132 ;;      Totals:         4       0       0       0       0       0       0
  5133 ;;Total ram usage:        4 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    1
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_strcspn
  5140 ;;		_strspn
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text10
  5145  005684                     __ptext10:
  5146                           	opt stack 0
  5147  005684                     _strchr:
  5148                           	opt stack 0
  5149  005684  FFFF               	dw	65535	; assembler added errata NOP
  5150                           
  5151                           ;incstack = 0
  5152  005686  C019  FFF6         	movff	strchr@ptr,tblptrl
  5153  00568A  C01A  FFF7         	movff	strchr@ptr+1,tblptrh
  5154  00568E                     	if	0	;tblptru may be non-zero
  5155  00568E                     	endif
  5156  00568E                     	if	0	;tblptru may be non-zero
  5157  00568E                     	endif
  5158  00568E  0008               	tblrd		*
  5159  005690  FFFF               	dw	65535	; errata NOP
  5160  005692  50F5               	movf	tablat,w,c
  5161  005694  181B               	xorwf	strchr@chr,w,c
  5162  005696  A4D8               	btfss	status,2,c
  5163  005698  D005               	goto	l2155
  5164  00569A  C019  F019         	movff	strchr@ptr,?_strchr
  5165  00569E  C01A  F01A         	movff	strchr@ptr+1,?_strchr+1
  5166  0056A2  D011               	goto	l8941
  5167  0056A4                     l2155:
  5168  0056A4  FFFF               	dw	65535	; assembler added errata NOP
  5169  0056A6  C019  FFF6         	movff	strchr@ptr,tblptrl
  5170  0056AA  C01A  FFF7         	movff	strchr@ptr+1,tblptrh
  5171  0056AE  4A19               	infsnz	strchr@ptr,f,c
  5172  0056B0  2A1A               	incf	strchr@ptr+1,f,c
  5173  0056B2                     	if	0	;tblptru may be non-zero
  5174  0056B2                     	endif
  5175  0056B2                     	if	0	;tblptru may be non-zero
  5176  0056B2                     	endif
  5177  0056B2  0008               	tblrd		*
  5178  0056B4  FFFF               	dw	65535	; errata NOP
  5179  0056B6  50F5               	movf	tablat,w,c
  5180  0056B8  0900               	iorlw	0
  5181  0056BA  A4D8               	btfss	status,2,c
  5182  0056BC  D7E3               	goto	_strchr
  5183  0056BE  0E00               	movlw	0
  5184  0056C0  6E19               	movwf	?_strchr,c
  5185  0056C2  0E00               	movlw	0
  5186  0056C4  6E1A               	movwf	?_strchr+1,c
  5187  0056C6                     l8941:
  5188  0056C6  FFFF               	dw	65535	; assembler added errata NOP
  5189  0056C8  0012               	return		;funcret
  5190  0056CA  FFFF               	dw	65535	; errata NOP
  5191  0056CC                     __end_of_strchr:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           intcon	equ	0xFF2
  5198                           postinc0	equ	0xFEE
  5199                           wreg	equ	0xFE8
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _set_date *****************
  5208 ;; Defined at:
  5209 ;;		line 31 in file "DS1307.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  Date_Data       2   33[COMRAM] PTR unsigned char 
  5212 ;;		 -> date_set@date(4), 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      unsigned char 
  5217 ;; Registers used:
  5218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5224 ;;      Params:         2       0       0       0       0       0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0
  5227 ;;      Totals:         2       0       0       0       0       0       0
  5228 ;;Total ram usage:        2 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    3
  5231 ;; This function calls:
  5232 ;;		_WriteStr_I2C
  5233 ;; This function is called by:
  5234 ;;		_date_set
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text11
  5239  005096                     __ptext11:
  5240                           	opt stack 0
  5241  005096                     _set_date:
  5242                           	opt stack 0
  5243  005096  FFFF               	dw	65535	; assembler added errata NOP
  5244                           
  5245                           ;DS1307.c: 33: WriteStr_I2C(0xd0,0x03,Date_Data,4);
  5246                           
  5247                           ;incstack = 0
  5248  005098  0E03               	movlw	3
  5249  00509A  6E1B               	movwf	WriteStr_I2C@Reg_Addr,c
  5250  00509C  C022  F01C         	movff	set_date@Date_Data,WriteStr_I2C@Str
  5251  0050A0  C023  F01D         	movff	set_date@Date_Data+1,WriteStr_I2C@Str+1
  5252  0050A4  0E04               	movlw	4
  5253  0050A6  6E1E               	movwf	WriteStr_I2C@Str_Size,c
  5254  0050A8  0ED0               	movlw	208
  5255  0050AA  EC25  F02E         	call	_WriteStr_I2C
  5256                           
  5257                           ;DS1307.c: 34: return(0);
  5258                           ;	Return value of _set_date is never used
  5259  0050AE  0012               	return		;funcret
  5260  0050B0  FFFF               	dw	65535	; errata NOP
  5261  0050B2                     __end_of_set_date:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           intcon	equ	0xFF2
  5268                           postinc0	equ	0xFEE
  5269                           wreg	equ	0xFE8
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _WriteStr_I2C *****************
  5278 ;; Defined at:
  5279 ;;		line 211 in file "i2c_FRM.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  Mod_Addr        1    wreg     unsigned char 
  5282 ;;  Reg_Addr        1   26[COMRAM] unsigned char 
  5283 ;;  Str             2   27[COMRAM] PTR unsigned char 
  5284 ;;		 -> time_set@hour(3), date_set@date(4), 
  5285 ;;  Str_Size        1   29[COMRAM] unsigned char 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  Mod_Addr        1   31[COMRAM] unsigned char 
  5288 ;;  stat            1   32[COMRAM] unsigned char 
  5289 ;;  i               1   30[COMRAM] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      unsigned char 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5299 ;;      Params:         4       0       0       0       0       0       0
  5300 ;;      Locals:         3       0       0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0
  5302 ;;      Totals:         7       0       0       0       0       0       0
  5303 ;;Total ram usage:        7 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    2
  5306 ;; This function calls:
  5307 ;;		_CloseI2C
  5308 ;;		_IdleI2C
  5309 ;;		_OpenI2C
  5310 ;;		_StartI2C
  5311 ;;		_StopI2C
  5312 ;;		_Wait_AckI2C
  5313 ;;		_WriteI2C
  5314 ;; This function is called by:
  5315 ;;		_set_time
  5316 ;;		_set_date
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text12
  5321  005C4A                     __ptext12:
  5322                           	opt stack 0
  5323  005C4A                     _WriteStr_I2C:
  5324                           	opt stack 0
  5325  005C4A  FFFF               	dw	65535	; assembler added errata NOP
  5326                           
  5327                           ;incstack = 0
  5328                           ;WriteStr_I2C@Mod_Addr stored from wreg
  5329  005C4C  6E20               	movwf	WriteStr_I2C@Mod_Addr,c
  5330                           
  5331                           ;i2c_FRM.c: 213: char stat=0,i=0;
  5332  005C4E  0E00               	movlw	0
  5333  005C50  6E21               	movwf	WriteStr_I2C@stat,c
  5334  005C52  0E00               	movlw	0
  5335  005C54  6E1F               	movwf	WriteStr_I2C@i,c
  5336                           
  5337                           ;i2c_FRM.c: 217: OpenI2C(8, 0xC0);
  5338  005C56  0EC0               	movlw	192
  5339  005C58  6E19               	movwf	OpenI2C@slew,c
  5340  005C5A  0E08               	movlw	8
  5341  005C5C  EC67  F028         	call	_OpenI2C
  5342                           
  5343                           ;i2c_FRM.c: 218: SSPADD=0x18;
  5344  005C60  0E18               	movlw	24
  5345  005C62  6EC8               	movwf	4040,c	;volatile
  5346                           
  5347                           ;i2c_FRM.c: 219: IdleI2C();
  5348  005C64  EC78  F028         	call	_IdleI2C	;wreg free
  5349                           
  5350                           ;i2c_FRM.c: 222: StartI2C();
  5351  005C68  ECD1  F027         	call	_StartI2C	;wreg free
  5352                           
  5353                           ;i2c_FRM.c: 223: stat=WriteI2C(Mod_Addr);
  5354  005C6C  5020               	movf	WriteStr_I2C@Mod_Addr,w,c
  5355  005C6E  EC3A  F029         	call	_WriteI2C
  5356  005C72  6E21               	movwf	WriteStr_I2C@stat,c
  5357                           
  5358                           ;i2c_FRM.c: 224: stat+=Wait_AckI2C();
  5359  005C74  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  5360  005C78  2621               	addwf	WriteStr_I2C@stat,f,c
  5361                           
  5362                           ;i2c_FRM.c: 227: stat+=WriteI2C(Reg_Addr);
  5363  005C7A  501B               	movf	WriteStr_I2C@Reg_Addr,w,c
  5364  005C7C  EC3A  F029         	call	_WriteI2C
  5365  005C80  2621               	addwf	WriteStr_I2C@stat,f,c
  5366                           
  5367                           ;i2c_FRM.c: 228: stat+=Wait_AckI2C();
  5368  005C82  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  5369  005C86  D00D               	goto	L5
  5370  005C88  FFFF               	dw	65535	; assembler added errata NOP
  5371                           
  5372                           ;i2c_FRM.c: 232: stat+=WriteI2C(*Str++);
  5373  005C8A  C01C  FFD9         	movff	WriteStr_I2C@Str,fsr2l
  5374  005C8E  C01D  FFDA         	movff	WriteStr_I2C@Str+1,fsr2h
  5375  005C92  50DF               	movf	indf2,w,c
  5376  005C94  EC3A  F029         	call	_WriteI2C
  5377  005C98  2621               	addwf	WriteStr_I2C@stat,f,c
  5378  005C9A  4A1C               	infsnz	WriteStr_I2C@Str,f,c
  5379  005C9C  2A1D               	incf	WriteStr_I2C@Str+1,f,c
  5380                           
  5381                           ;i2c_FRM.c: 233: stat+=Wait_AckI2C();
  5382  005C9E  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  5383  005CA2                     L5:
  5384  005CA2  FFFF               	dw	65535	; assembler added errata NOP
  5385  005CA4  2621               	addwf	WriteStr_I2C@stat,f,c
  5386  005CA6  061E               	decf	WriteStr_I2C@Str_Size,f,c
  5387  005CA8  281E               	incf	WriteStr_I2C@Str_Size,w,c
  5388  005CAA  A4D8               	btfss	status,2,c
  5389  005CAC  D7ED               	goto	l586
  5390                           
  5391                           ;i2c_FRM.c: 234: }
  5392                           ;i2c_FRM.c: 235: StopI2C();
  5393  005CAE  ECDE  F027         	call	_StopI2C	;wreg free
  5394                           
  5395                           ;i2c_FRM.c: 236: CloseI2C();
  5396  005CB2  EC29  F026         	call	_CloseI2C	;wreg free
  5397                           
  5398                           ;i2c_FRM.c: 237: return (stat);
  5399                           ;	Return value of _WriteStr_I2C is never used
  5400  005CB6  0012               	return		;funcret
  5401  005CB8  FFFF               	dw	65535	; errata NOP
  5402  005CBA                     __end_of_WriteStr_I2C:
  5403                           	opt stack 0
  5404                           tblptru	equ	0xFF8
  5405                           tblptrh	equ	0xFF7
  5406                           tblptrl	equ	0xFF6
  5407                           tablat	equ	0xFF5
  5408                           intcon	equ	0xFF2
  5409                           postinc0	equ	0xFEE
  5410                           wreg	equ	0xFE8
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           
  5418 ;; *************** function _intTObcd *****************
  5419 ;; Defined at:
  5420 ;;		line 65 in file "DS1307.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  v               2    5[BANK0 ] int 
  5423 ;; Auto vars:     Size  Location     Type
  5424 ;;  resultbase      2    9[BANK0 ] int 
  5425 ;;  total           2    7[BANK0 ] int 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  2    5[BANK0 ] int 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5435 ;;      Params:         0       2       0       0       0       0       0
  5436 ;;      Locals:         0       4       0       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0
  5438 ;;      Totals:         0       6       0       0       0       0       0
  5439 ;;Total ram usage:        6 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    2
  5442 ;; This function calls:
  5443 ;;		___awdiv
  5444 ;;		___awmod
  5445 ;;		___wmul
  5446 ;; This function is called by:
  5447 ;;		_date_set
  5448 ;;		_time_set
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text13
  5453  006390                     __ptext13:
  5454                           	opt stack 0
  5455  006390                     _intTObcd:
  5456                           	opt stack 0
  5457  006390  FFFF               	dw	65535	; assembler added errata NOP
  5458                           
  5459                           ;DS1307.c: 66: int total = 0;
  5460                           
  5461                           ;incstack = 0
  5462  006392  0E00               	movlw	0
  5463  006394  0100               	movlb	0	; () banked
  5464  006396  6F68               	movwf	(intTObcd@total+1)& (0+255),b
  5465  006398  0E00               	movlw	0
  5466  00639A  6F67               	movwf	intTObcd@total& (0+255),b
  5467                           
  5468                           ;DS1307.c: 67: int resultbase = 1;
  5469  00639C  0E00               	movlw	0
  5470  00639E  0100               	movlb	0	; () banked
  5471  0063A0  6F6A               	movwf	(intTObcd@resultbase+1)& (0+255),b
  5472  0063A2  0E01               	movlw	1
  5473  0063A4  6F69               	movwf	intTObcd@resultbase& (0+255),b
  5474                           
  5475                           ;DS1307.c: 68: while(v > 0 ){
  5476  0063A6  D033               	goto	l265
  5477  0063A8  FFFF               	dw	65535	; assembler added errata NOP
  5478  0063AA                     l9683:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;DS1307.c: 69: total += resultbase * (v % 10);
  5482  0063AA  0E00               	movlw	0
  5483  0063AC  6E1C               	movwf	___awmod@divisor+1,c
  5484  0063AE  0E0A               	movlw	10
  5485  0063B0  6E1B               	movwf	___awmod@divisor,c
  5486  0063B2  C065  F019         	movff	intTObcd@v,___awmod@dividend
  5487  0063B6  C066  F01A         	movff	intTObcd@v+1,___awmod@dividend+1
  5488  0063BA  EC90  F02F         	call	___awmod	;wreg free
  5489  0063BE  C019  F027         	movff	?___awmod,___wmul@multiplier
  5490  0063C2  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5491  0063C6  C069  F029         	movff	intTObcd@resultbase,___wmul@multiplicand
  5492  0063CA  C06A  F02A         	movff	intTObcd@resultbase+1,___wmul@multiplicand+1
  5493  0063CE  EC10  F029         	call	___wmul	;wreg free
  5494  0063D2  5027               	movf	?___wmul,w,c
  5495  0063D4  0100               	movlb	0	; () banked
  5496  0063D6  2767               	addwf	intTObcd@total& (0+255),f,b
  5497  0063D8  5028               	movf	?___wmul+1,w,c
  5498  0063DA  0100               	movlb	0	; () banked
  5499  0063DC  2368               	addwfc	(intTObcd@total+1)& (0+255),f,b
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;DS1307.c: 70: resultbase *= 16;
  5503  0063DE  0100               	movlb	0	; () banked
  5504  0063E0  3B69               	swapf	intTObcd@resultbase& (0+255),f,b
  5505  0063E2  3B6A               	swapf	(intTObcd@resultbase+1)& (0+255),f,b
  5506  0063E4  0EF0               	movlw	240
  5507  0063E6  176A               	andwf	(intTObcd@resultbase+1)& (0+255),f,b
  5508  0063E8  5169               	movf	intTObcd@resultbase& (0+255),w,b
  5509  0063EA  0B0F               	andlw	15
  5510  0063EC  136A               	iorwf	(intTObcd@resultbase+1)& (0+255),f,b
  5511  0063EE  0EF0               	movlw	240
  5512  0063F0  1769               	andwf	intTObcd@resultbase& (0+255),f,b
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;DS1307.c: 71: v /= 10;
  5516  0063F2  C065  F01F         	movff	intTObcd@v,___awdiv@dividend
  5517  0063F6  C066  F020         	movff	intTObcd@v+1,___awdiv@dividend+1
  5518  0063FA  0E00               	movlw	0
  5519  0063FC  6E22               	movwf	___awdiv@divisor+1,c
  5520  0063FE  0E0A               	movlw	10
  5521  006400  6E21               	movwf	___awdiv@divisor,c
  5522  006402  EC2E  F031         	call	___awdiv	;wreg free
  5523  006406  C01F  F065         	movff	?___awdiv,intTObcd@v
  5524  00640A  C020  F066         	movff	?___awdiv+1,intTObcd@v+1
  5525  00640E                     l265:
  5526  00640E  FFFF               	dw	65535	; assembler added errata NOP
  5527  006410  0100               	movlb	0	; () banked
  5528  006412  BF66               	btfsc	(intTObcd@v+1)& (0+255),7,b
  5529  006414  D007               	goto	u9520
  5530  006416  0100               	movlb	0	; () banked
  5531  006418  5166               	movf	(intTObcd@v+1)& (0+255),w,b
  5532  00641A  E1C7               	bnz	l9683
  5533  00641C  0100               	movlb	0	; () banked
  5534  00641E  0565               	decf	intTObcd@v& (0+255),w,b
  5535  006420  B0D8               	btfsc	status,0,c
  5536  006422  D7C2               	goto	l266
  5537  006424                     u9520:
  5538  006424  FFFF               	dw	65535	; assembler added errata NOP
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;DS1307.c: 72: }
  5542                           ;DS1307.c: 74: return total;
  5543  006426  C067  F065         	movff	intTObcd@total,?_intTObcd
  5544  00642A  C068  F066         	movff	intTObcd@total+1,?_intTObcd+1
  5545                           
  5546                           ; BSR set to: 0
  5547  00642E  0012               	return		;funcret
  5548  006430  FFFF               	dw	65535	; errata NOP
  5549  006432                     __end_of_intTObcd:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           intcon	equ	0xFF2
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _reset_var *****************
  5566 ;; Defined at:
  5567 ;;		line 83 in file "Commands.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  var             2  120[BANK0 ] PTR unsigned char 
  5570 ;;		 -> rx_buffer(20), NULL(0), 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5582 ;;      Params:         0       2       0       0       0       0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0
  5585 ;;      Totals:         0       2       0       0       0       0       0
  5586 ;;Total ram usage:        2 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    6
  5589 ;; This function calls:
  5590 ;;		_Get_Voltage_Vin
  5591 ;;		_set_max
  5592 ;;		_set_min
  5593 ;;		_sprintf
  5594 ;;		_strcmp
  5595 ;; This function is called by:
  5596 ;;		_read_command
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text14
  5601  0060B0                     __ptext14:
  5602                           	opt stack 0
  5603  0060B0                     _reset_var:
  5604                           	opt stack 0
  5605  0060B0  FFFF               	dw	65535	; assembler added errata NOP
  5606                           
  5607                           ;Commands.c: 85: if(strcmp(var,"max")==0){
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  0060B2  C0D8  F019         	movff	reset_var@var,strcmp@s1
  5612  0060B6  C0D9  F01A         	movff	reset_var@var+1,strcmp@s1+1
  5613  0060BA  0EE5               	movlw	low STR_10
  5614  0060BC  6E1B               	movwf	strcmp@s2,c
  5615  0060BE  0E7F               	movlw	high STR_10
  5616  0060C0  6E1C               	movwf	strcmp@s2+1,c
  5617  0060C2  EC4C  F02C         	call	_strcmp	;wreg free
  5618  0060C6  5019               	movf	?_strcmp,w,c
  5619  0060C8  101A               	iorwf	?_strcmp+1,w,c
  5620  0060CA  A4D8               	btfss	status,2,c
  5621  0060CC  D00B               	goto	l135
  5622                           
  5623                           ;Commands.c: 86: set_max(Get_Voltage_Vin());
  5624  0060CE  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  5625  0060D2  C019  F01C         	movff	?_Get_Voltage_Vin,set_max@val
  5626  0060D6  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_max@val+1
  5627  0060DA  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_max@val+2
  5628  0060DE  ECAB  F027         	call	_set_max	;wreg free
  5629                           
  5630                           ;Commands.c: 87: }else if (strcmp(var,"min")==0){
  5631  0060E2  D028               	goto	l138
  5632  0060E4                     l135:
  5633  0060E4  FFFF               	dw	65535	; assembler added errata NOP
  5634  0060E6  C0D8  F019         	movff	reset_var@var,strcmp@s1
  5635  0060EA  C0D9  F01A         	movff	reset_var@var+1,strcmp@s1+1
  5636  0060EE  0ED9               	movlw	low STR_11
  5637  0060F0  6E1B               	movwf	strcmp@s2,c
  5638  0060F2  0E7F               	movlw	high STR_11
  5639  0060F4  6E1C               	movwf	strcmp@s2+1,c
  5640  0060F6  EC4C  F02C         	call	_strcmp	;wreg free
  5641  0060FA  5019               	movf	?_strcmp,w,c
  5642  0060FC  101A               	iorwf	?_strcmp+1,w,c
  5643  0060FE  A4D8               	btfss	status,2,c
  5644  006100  D00B               	goto	l137
  5645                           
  5646                           ;Commands.c: 88: set_min(Get_Voltage_Vin());
  5647  006102  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  5648  006106  C019  F01C         	movff	?_Get_Voltage_Vin,set_min@val
  5649  00610A  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_min@val+1
  5650  00610E  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_min@val+2
  5651  006112  ECB4  F027         	call	_set_min	;wreg free
  5652                           
  5653                           ;Commands.c: 89: }else{
  5654  006116  D00E               	goto	l138
  5655  006118                     l137:
  5656  006118  FFFF               	dw	65535	; assembler added errata NOP
  5657                           
  5658                           ;Commands.c: 90: sprintf(buffer,"Error\n");
  5659  00611A  C0F7  F0C0         	movff	_buffer,sprintf@wh
  5660  00611E  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  5661  006122  0E69               	movlw	low STR_12
  5662  006124  0100               	movlb	0	; () banked
  5663  006126  6FC2               	movwf	sprintf@f& (0+255),b
  5664  006128  0E7F               	movlw	high STR_12
  5665  00612A  0100               	movlb	0	; () banked
  5666  00612C  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  5667  00612E  EC10  F02F         	call	_sprintf	;wreg free
  5668                           
  5669                           ;Commands.c: 91: TXIE=1;
  5670  006132  889D               	bsf	3997,4,c	;volatile
  5671  006134                     l138:
  5672  006134  FFFF               	dw	65535	; assembler added errata NOP
  5673  006136  0012               	return		;funcret
  5674  006138  FFFF               	dw	65535	; errata NOP
  5675  00613A                     __end_of_reset_var:
  5676                           	opt stack 0
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           intcon	equ	0xFF2
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _set_min *****************
  5692 ;; Defined at:
  5693 ;;		line 102 in file "Get_Voltages.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  val             3   27[COMRAM] float 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		None
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5707 ;;      Params:         3       0       0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0
  5710 ;;      Totals:         3       0       0       0       0       0       0
  5711 ;;Total ram usage:        3 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    1
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		_reset_var
  5718 ;;		_main
  5719 ;;		_reset_max_min
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text15
  5724  004F68                     __ptext15:
  5725                           	opt stack 0
  5726  004F68                     _set_min:
  5727                           	opt stack 0
  5728  004F68  FFFF               	dw	65535	; assembler added errata NOP
  5729                           
  5730                           ;Get_Voltages.c: 103: min=val;
  5731                           
  5732                           ;incstack = 0
  5733  004F6A  C01C  F122         	movff	set_min@val,_min
  5734  004F6E  C01D  F123         	movff	set_min@val+1,_min+1
  5735  004F72  C01E  F124         	movff	set_min@val+2,_min+2
  5736  004F76  0012               	return		;funcret
  5737  004F78  FFFF               	dw	65535	; errata NOP
  5738  004F7A                     __end_of_set_min:
  5739                           	opt stack 0
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           intcon	equ	0xFF2
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           indf2	equ	0xFDF
  5748                           postinc2	equ	0xFDE
  5749                           postdec2	equ	0xFDD
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function _set_max *****************
  5755 ;; Defined at:
  5756 ;;		line 98 in file "Get_Voltages.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  val             3   27[COMRAM] float 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;		None
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		None
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5770 ;;      Params:         3       0       0       0       0       0       0
  5771 ;;      Locals:         0       0       0       0       0       0       0
  5772 ;;      Temps:          0       0       0       0       0       0       0
  5773 ;;      Totals:         3       0       0       0       0       0       0
  5774 ;;Total ram usage:        3 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    1
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_reset_var
  5781 ;;		_main
  5782 ;;		_reset_max_min
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text16
  5787  004F56                     __ptext16:
  5788                           	opt stack 0
  5789  004F56                     _set_max:
  5790                           	opt stack 0
  5791  004F56  FFFF               	dw	65535	; assembler added errata NOP
  5792                           
  5793                           ;Get_Voltages.c: 99: max=val;
  5794                           
  5795                           ;incstack = 0
  5796  004F58  C01C  F11F         	movff	set_max@val,_max
  5797  004F5C  C01D  F120         	movff	set_max@val+1,_max+1
  5798  004F60  C01E  F121         	movff	set_max@val+2,_max+2
  5799  004F64  0012               	return		;funcret
  5800  004F66  FFFF               	dw	65535	; errata NOP
  5801  004F68                     __end_of_set_max:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           intcon	equ	0xFF2
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           indf2	equ	0xFDF
  5811                           postinc2	equ	0xFDE
  5812                           postdec2	equ	0xFDD
  5813                           fsr2h	equ	0xFDA
  5814                           fsr2l	equ	0xFD9
  5815                           status	equ	0xFD8
  5816                           
  5817 ;; *************** function _lcd_display *****************
  5818 ;; Defined at:
  5819 ;;		line 70 in file "Commands.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  var             2    5[BANK0 ] PTR unsigned char 
  5822 ;;		 -> rx_buffer(20), NULL(0), 
  5823 ;;  data            2    7[BANK0 ] PTR unsigned char 
  5824 ;;		 -> rx_buffer(20), NULL(0), 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  val             2    9[BANK0 ] int 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5836 ;;      Params:         0       4       0       0       0       0       0
  5837 ;;      Locals:         0       2       0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0
  5839 ;;      Totals:         0       6       0       0       0       0       0
  5840 ;;Total ram usage:        6 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    3
  5843 ;; This function calls:
  5844 ;;		_LCD_SetBackLight_Brightness
  5845 ;;		_LCD_SetContrast
  5846 ;;		_atoi
  5847 ;;		_strcmp
  5848 ;; This function is called by:
  5849 ;;		_read_command
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text17
  5854  005DA4                     __ptext17:
  5855                           	opt stack 0
  5856  005DA4                     _lcd_display:
  5857                           	opt stack 0
  5858  005DA4  FFFF               	dw	65535	; assembler added errata NOP
  5859                           
  5860                           ;Commands.c: 72: int val;
  5861                           ;Commands.c: 74: if(strcmp(var,"contrast")==0){
  5862                           
  5863                           ;incstack = 0
  5864  005DA6  C065  F019         	movff	lcd_display@var,strcmp@s1
  5865  005DAA  C066  F01A         	movff	lcd_display@var+1,strcmp@s1+1
  5866  005DAE  0E51               	movlw	low STR_8
  5867  005DB0  6E1B               	movwf	strcmp@s2,c
  5868  005DB2  0E7F               	movlw	high STR_8
  5869  005DB4  6E1C               	movwf	strcmp@s2+1,c
  5870  005DB6  EC4C  F02C         	call	_strcmp	;wreg free
  5871  005DBA  5019               	movf	?_strcmp,w,c
  5872  005DBC  101A               	iorwf	?_strcmp+1,w,c
  5873  005DBE  A4D8               	btfss	status,2,c
  5874  005DC0  D00F               	goto	l129
  5875                           
  5876                           ;Commands.c: 75: val=atoi(data);
  5877  005DC2  C067  F02D         	movff	lcd_display@data,atoi@s
  5878  005DC6  C068  F02E         	movff	lcd_display@data+1,atoi@s+1
  5879  005DCA  ECCA  F037         	call	_atoi	;wreg free
  5880  005DCE  C02D  F069         	movff	?_atoi,lcd_display@val
  5881  005DD2  C02E  F06A         	movff	?_atoi+1,lcd_display@val+1
  5882                           
  5883                           ;Commands.c: 76: LCD_SetContrast((char)val);
  5884  005DD6  0100               	movlb	0	; () banked
  5885  005DD8  5169               	movf	lcd_display@val& (0+255),w,b
  5886  005DDA  ECB8  F02A         	call	_LCD_SetContrast
  5887                           
  5888                           ;Commands.c: 77: }
  5889  005DDE  D01D               	goto	l131
  5890  005DE0                     l129:
  5891  005DE0  FFFF               	dw	65535	; assembler added errata NOP
  5892                           
  5893                           ;Commands.c: 78: else if(strcmp(var,"backlight")==0){
  5894  005DE2  C065  F019         	movff	lcd_display@var,strcmp@s1
  5895  005DE6  C066  F01A         	movff	lcd_display@var+1,strcmp@s1+1
  5896  005DEA  0E2C               	movlw	low STR_9
  5897  005DEC  6E1B               	movwf	strcmp@s2,c
  5898  005DEE  0E7F               	movlw	high STR_9
  5899  005DF0  6E1C               	movwf	strcmp@s2+1,c
  5900  005DF2  EC4C  F02C         	call	_strcmp	;wreg free
  5901  005DF6  5019               	movf	?_strcmp,w,c
  5902  005DF8  101A               	iorwf	?_strcmp+1,w,c
  5903  005DFA  A4D8               	btfss	status,2,c
  5904  005DFC  D00E               	goto	l131
  5905                           
  5906                           ;Commands.c: 79: val=atoi(data);
  5907  005DFE  C067  F02D         	movff	lcd_display@data,atoi@s
  5908  005E02  C068  F02E         	movff	lcd_display@data+1,atoi@s+1
  5909  005E06  ECCA  F037         	call	_atoi	;wreg free
  5910  005E0A  C02D  F069         	movff	?_atoi,lcd_display@val
  5911  005E0E  C02E  F06A         	movff	?_atoi+1,lcd_display@val+1
  5912                           
  5913                           ;Commands.c: 80: LCD_SetBackLight_Brightness((char)val);
  5914  005E12  0100               	movlb	0	; () banked
  5915  005E14  5169               	movf	lcd_display@val& (0+255),w,b
  5916  005E16  EC98  F02A         	call	_LCD_SetBackLight_Brightness
  5917  005E1A                     l131:
  5918  005E1A  FFFF               	dw	65535	; assembler added errata NOP
  5919  005E1C  0012               	return		;funcret
  5920  005E1E  FFFF               	dw	65535	; errata NOP
  5921  005E20                     __end_of_lcd_display:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           intcon	equ	0xFF2
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           postdec2	equ	0xFDD
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _atoi *****************
  5938 ;; Defined at:
  5939 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atoi.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  s               2   44[COMRAM] PTR const unsigned char 
  5942 ;;		 -> rx_buffer(20), NULL(0), 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  a               2    3[BANK0 ] int 
  5945 ;;  sign            1    2[BANK0 ] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  2   44[COMRAM] int 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5955 ;;      Params:         2       0       0       0       0       0       0
  5956 ;;      Locals:         0       3       0       0       0       0       0
  5957 ;;      Temps:          0       2       0       0       0       0       0
  5958 ;;      Totals:         2       5       0       0       0       0       0
  5959 ;;Total ram usage:        7 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    2
  5962 ;; This function calls:
  5963 ;;		___wmul
  5964 ;;		_isdigit
  5965 ;; This function is called by:
  5966 ;;		_lcd_display
  5967 ;;		_date_set
  5968 ;;		_time_set
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text18
  5973  006F94                     __ptext18:
  5974                           	opt stack 0
  5975  006F94                     _atoi:
  5976                           	opt stack 0
  5977  006F94  FFFF               	dw	65535	; assembler added errata NOP
  5978                           
  5979                           ;incstack = 0
  5980  006F96  D003               	goto	l1553
  5981  006F98  FFFF               	dw	65535	; assembler added errata NOP
  5982  006F9A  4A2D               	infsnz	atoi@s,f,c
  5983  006F9C  2A2E               	incf	atoi@s+1,f,c
  5984  006F9E                     l1553:
  5985  006F9E  FFFF               	dw	65535	; assembler added errata NOP
  5986  006FA0  C02D  FFD9         	movff	atoi@s,fsr2l
  5987  006FA4  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5988  006FA8  0E20               	movlw	32
  5989  006FAA  18DE               	xorwf	postinc2,w,c
  5990  006FAC  B4D8               	btfsc	status,2,c
  5991  006FAE  D7F4               	goto	l1554
  5992  006FB0  C02D  FFD9         	movff	atoi@s,fsr2l
  5993  006FB4  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5994  006FB8  0E09               	movlw	9
  5995  006FBA  18DE               	xorwf	postinc2,w,c
  5996  006FBC  B4D8               	btfsc	status,2,c
  5997  006FBE  D7EC               	goto	l1554
  5998  006FC0  0E00               	movlw	0
  5999  006FC2  0100               	movlb	0	; () banked
  6000  006FC4  6F64               	movwf	(atoi@a+1)& (0+255),b
  6001  006FC6  0E00               	movlw	0
  6002  006FC8  6F63               	movwf	atoi@a& (0+255),b
  6003  006FCA  0E00               	movlw	0
  6004  006FCC  0100               	movlb	0	; () banked
  6005  006FCE  6F62               	movwf	atoi@sign& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008  006FD0  C02D  FFD9         	movff	atoi@s,fsr2l
  6009  006FD4  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6010  006FD8  0E2D               	movlw	45
  6011  006FDA  18DE               	xorwf	postinc2,w,c
  6012  006FDC  A4D8               	btfss	status,2,c
  6013  006FDE  D003               	goto	l1556
  6014                           
  6015                           ; BSR set to: 0
  6016  006FE0  0100               	movlb	0	; () banked
  6017  006FE2  2B62               	incf	atoi@sign& (0+255),f,b
  6018  006FE4  D02D               	goto	l9655
  6019  006FE6                     l1556:
  6020  006FE6  FFFF               	dw	65535	; assembler added errata NOP
  6021                           
  6022                           ; BSR set to: 0
  6023                           
  6024                           ; BSR set to: 0
  6025  006FE8  C02D  FFD9         	movff	atoi@s,fsr2l
  6026  006FEC  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6027  006FF0  0E2B               	movlw	43
  6028  006FF2  18DE               	xorwf	postinc2,w,c
  6029  006FF4  A4D8               	btfss	status,2,c
  6030  006FF6  D027               	goto	l1559
  6031  006FF8  D023               	goto	l9655
  6032  006FFA  FFFF               	dw	65535	; assembler added errata NOP
  6033                           
  6034                           ; BSR set to: 0
  6035  006FFC  C063  F027         	movff	atoi@a,___wmul@multiplier
  6036  007000  C064  F028         	movff	atoi@a+1,___wmul@multiplier+1
  6037  007004  0E00               	movlw	0
  6038  007006  6E2A               	movwf	___wmul@multiplicand+1,c
  6039  007008  0E0A               	movlw	10
  6040  00700A  6E29               	movwf	___wmul@multiplicand,c
  6041  00700C  EC10  F029         	call	___wmul	;wreg free
  6042  007010  C02D  FFD9         	movff	atoi@s,fsr2l
  6043  007014  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6044  007018  50DF               	movf	indf2,w,c
  6045  00701A  0100               	movlb	0	; () banked
  6046  00701C  6F60               	movwf	??_atoi& (0+255),b
  6047  00701E  6B61               	clrf	(??_atoi+1)& (0+255),b
  6048  007020  5027               	movf	?___wmul,w,c
  6049  007022  0100               	movlb	0	; () banked
  6050  007024  2760               	addwf	??_atoi& (0+255),f,b
  6051  007026  5028               	movf	?___wmul+1,w,c
  6052  007028  0100               	movlb	0	; () banked
  6053  00702A  2361               	addwfc	(??_atoi+1)& (0+255),f,b
  6054  00702C  0ED0               	movlw	208
  6055  00702E  0100               	movlb	0	; () banked
  6056  007030  2560               	addwf	??_atoi& (0+255),w,b
  6057  007032  0100               	movlb	0	; () banked
  6058  007034  6F63               	movwf	atoi@a& (0+255),b
  6059  007036  0EFF               	movlw	255
  6060  007038  0100               	movlb	0	; () banked
  6061  00703A  2161               	addwfc	(??_atoi+1)& (0+255),w,b
  6062  00703C  0100               	movlb	0	; () banked
  6063  00703E  6F64               	movwf	(atoi@a+1)& (0+255),b
  6064  007040                     l9655:
  6065  007040  FFFF               	dw	65535	; assembler added errata NOP
  6066                           
  6067                           ; BSR set to: 0
  6068  007042  4A2D               	infsnz	atoi@s,f,c
  6069  007044  2A2E               	incf	atoi@s+1,f,c
  6070  007046                     l1559:
  6071  007046  FFFF               	dw	65535	; assembler added errata NOP
  6072                           
  6073                           ; BSR set to: 0
  6074                           
  6075                           ; BSR set to: 0
  6076  007048  C02D  FFD9         	movff	atoi@s,fsr2l
  6077  00704C  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6078  007050  50DF               	movf	indf2,w,c
  6079  007052  EC8A  F028         	call	_isdigit
  6080  007056  B0D8               	btfsc	status,0,c
  6081  007058  D7D0               	goto	l1560
  6082  00705A  0100               	movlb	0	; () banked
  6083  00705C  5162               	movf	atoi@sign& (0+255),w,b
  6084  00705E  0100               	movlb	0	; () banked
  6085  007060  B4D8               	btfsc	status,2,c
  6086  007062  D00E               	goto	l1562
  6087                           
  6088                           ; BSR set to: 0
  6089  007064  C063  F060         	movff	atoi@a,??_atoi
  6090  007068  C064  F061         	movff	atoi@a+1,??_atoi+1
  6091  00706C  0100               	movlb	0	; () banked
  6092  00706E  1F60               	comf	??_atoi& (0+255),f,b
  6093  007070  1F61               	comf	(??_atoi+1)& (0+255),f,b
  6094  007072  4B60               	infsnz	??_atoi& (0+255),f,b
  6095  007074  2B61               	incf	(??_atoi+1)& (0+255),f,b
  6096  007076  C060  F02D         	movff	??_atoi,?_atoi
  6097  00707A  C061  F02E         	movff	??_atoi+1,?_atoi+1
  6098  00707E  D005               	goto	l1563
  6099  007080                     l1562:
  6100  007080  FFFF               	dw	65535	; assembler added errata NOP
  6101                           
  6102                           ; BSR set to: 0
  6103  007082  C063  F02D         	movff	atoi@a,?_atoi
  6104  007086  C064  F02E         	movff	atoi@a+1,?_atoi+1
  6105  00708A                     l1563:
  6106  00708A  FFFF               	dw	65535	; assembler added errata NOP
  6107                           
  6108                           ; BSR set to: 0
  6109  00708C  0012               	return		;funcret
  6110  00708E  FFFF               	dw	65535	; errata NOP
  6111  007090                     __end_of_atoi:
  6112                           	opt stack 0
  6113                           tblptru	equ	0xFF8
  6114                           tblptrh	equ	0xFF7
  6115                           tblptrl	equ	0xFF6
  6116                           tablat	equ	0xFF5
  6117                           intcon	equ	0xFF2
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           indf2	equ	0xFDF
  6121                           postinc2	equ	0xFDE
  6122                           postdec2	equ	0xFDD
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function _LCD_SetContrast *****************
  6128 ;; Defined at:
  6129 ;;		line 132 in file "LCD2S.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  val             1    wreg     unsigned char 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;  val             1   26[COMRAM] unsigned char 
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      void 
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, status,0, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6143 ;;      Params:         0       0       0       0       0       0       0
  6144 ;;      Locals:         1       0       0       0       0       0       0
  6145 ;;      Temps:          0       0       0       0       0       0       0
  6146 ;;      Totals:         1       0       0       0       0       0       0
  6147 ;;Total ram usage:        1 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    2
  6150 ;; This function calls:
  6151 ;;		_CloseI2C
  6152 ;;		_IdleI2C
  6153 ;;		_OpenI2C
  6154 ;;		_StartI2C
  6155 ;;		_StopI2C
  6156 ;;		_Wait_AckI2C
  6157 ;;		_WriteI2C
  6158 ;; This function is called by:
  6159 ;;		_lcd_display
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text19
  6164  005570                     __ptext19:
  6165                           	opt stack 0
  6166  005570                     _LCD_SetContrast:
  6167                           	opt stack 0
  6168  005570  FFFF               	dw	65535	; assembler added errata NOP
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;incstack = 0
  6172                           ;LCD_SetContrast@val stored from wreg
  6173  005572  6E1B               	movwf	LCD_SetContrast@val,c
  6174                           
  6175                           ;LCD2S.c: 134: OpenI2C(8, 0xC0);
  6176  005574  0EC0               	movlw	192
  6177  005576  6E19               	movwf	OpenI2C@slew,c
  6178  005578  0E08               	movlw	8
  6179  00557A  EC67  F028         	call	_OpenI2C
  6180                           
  6181                           ;LCD2S.c: 135: IdleI2C();
  6182  00557E  EC78  F028         	call	_IdleI2C	;wreg free
  6183                           
  6184                           ;LCD2S.c: 136: StartI2C();
  6185  005582  ECD1  F027         	call	_StartI2C	;wreg free
  6186                           
  6187                           ;LCD2S.c: 137: WriteI2C(0x50);
  6188  005586  0E50               	movlw	80
  6189  005588  EC3A  F029         	call	_WriteI2C
  6190                           
  6191                           ;LCD2S.c: 138: Wait_AckI2C();
  6192  00558C  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6193                           
  6194                           ;LCD2S.c: 139: WriteI2C(0x82);
  6195  005590  0E82               	movlw	130
  6196  005592  EC3A  F029         	call	_WriteI2C
  6197                           
  6198                           ;LCD2S.c: 140: Wait_AckI2C();
  6199  005596  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6200                           
  6201                           ;LCD2S.c: 141: WriteI2C(val);
  6202  00559A  501B               	movf	LCD_SetContrast@val,w,c
  6203  00559C  EC3A  F029         	call	_WriteI2C
  6204                           
  6205                           ;LCD2S.c: 142: Wait_AckI2C();
  6206  0055A0  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6207                           
  6208                           ;LCD2S.c: 143: StopI2C();
  6209  0055A4  ECDE  F027         	call	_StopI2C	;wreg free
  6210                           
  6211                           ;LCD2S.c: 144: CloseI2C();
  6212  0055A8  EC29  F026         	call	_CloseI2C	;wreg free
  6213  0055AC  0012               	return		;funcret
  6214  0055AE  FFFF               	dw	65535	; errata NOP
  6215  0055B0                     __end_of_LCD_SetContrast:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           intcon	equ	0xFF2
  6222                           postinc0	equ	0xFEE
  6223                           wreg	equ	0xFE8
  6224                           indf2	equ	0xFDF
  6225                           postinc2	equ	0xFDE
  6226                           postdec2	equ	0xFDD
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _LCD_SetBackLight_Brightness *****************
  6232 ;; Defined at:
  6233 ;;		line 71 in file "LCD2S.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  brightness      1    wreg     unsigned char 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  brightness      1   26[COMRAM] unsigned char 
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, status,2, status,0, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6247 ;;      Params:         0       0       0       0       0       0       0
  6248 ;;      Locals:         1       0       0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0
  6250 ;;      Totals:         1       0       0       0       0       0       0
  6251 ;;Total ram usage:        1 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    2
  6254 ;; This function calls:
  6255 ;;		_CloseI2C
  6256 ;;		_IdleI2C
  6257 ;;		_OpenI2C
  6258 ;;		_StartI2C
  6259 ;;		_StopI2C
  6260 ;;		_Wait_AckI2C
  6261 ;;		_WriteI2C
  6262 ;; This function is called by:
  6263 ;;		_lcd_display
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text20
  6268  005530                     __ptext20:
  6269                           	opt stack 0
  6270  005530                     _LCD_SetBackLight_Brightness:
  6271                           	opt stack 0
  6272  005530  FFFF               	dw	65535	; assembler added errata NOP
  6273                           
  6274                           ;incstack = 0
  6275                           ;LCD_SetBackLight_Brightness@brightness stored from wreg
  6276  005532  6E1B               	movwf	LCD_SetBackLight_Brightness@brightness,c
  6277                           
  6278                           ;LCD2S.c: 73: OpenI2C(8, 0xC0);
  6279  005534  0EC0               	movlw	192
  6280  005536  6E19               	movwf	OpenI2C@slew,c
  6281  005538  0E08               	movlw	8
  6282  00553A  EC67  F028         	call	_OpenI2C
  6283                           
  6284                           ;LCD2S.c: 74: IdleI2C();
  6285  00553E  EC78  F028         	call	_IdleI2C	;wreg free
  6286                           
  6287                           ;LCD2S.c: 75: StartI2C();
  6288  005542  ECD1  F027         	call	_StartI2C	;wreg free
  6289                           
  6290                           ;LCD2S.c: 76: WriteI2C(0x50);
  6291  005546  0E50               	movlw	80
  6292  005548  EC3A  F029         	call	_WriteI2C
  6293                           
  6294                           ;LCD2S.c: 77: Wait_AckI2C();
  6295  00554C  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6296                           
  6297                           ;LCD2S.c: 78: WriteI2C(0x81);
  6298  005550  0E81               	movlw	129
  6299  005552  EC3A  F029         	call	_WriteI2C
  6300                           
  6301                           ;LCD2S.c: 79: Wait_AckI2C();
  6302  005556  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6303                           
  6304                           ;LCD2S.c: 80: WriteI2C(brightness);
  6305  00555A  501B               	movf	LCD_SetBackLight_Brightness@brightness,w,c
  6306  00555C  EC3A  F029         	call	_WriteI2C
  6307                           
  6308                           ;LCD2S.c: 81: Wait_AckI2C();
  6309  005560  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  6310                           
  6311                           ;LCD2S.c: 82: StopI2C();
  6312  005564  ECDE  F027         	call	_StopI2C	;wreg free
  6313                           
  6314                           ;LCD2S.c: 83: CloseI2C();
  6315  005568  EC29  F026         	call	_CloseI2C	;wreg free
  6316  00556C  0012               	return		;funcret
  6317  00556E  FFFF               	dw	65535	; errata NOP
  6318  005570                     __end_of_LCD_SetBackLight_Brightness:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           intcon	equ	0xFF2
  6325                           postinc0	equ	0xFEE
  6326                           wreg	equ	0xFE8
  6327                           indf2	equ	0xFDF
  6328                           postinc2	equ	0xFDE
  6329                           postdec2	equ	0xFDD
  6330                           fsr2h	equ	0xFDA
  6331                           fsr2l	equ	0xFD9
  6332                           status	equ	0xFD8
  6333                           
  6334 ;; *************** function _get_list *****************
  6335 ;; Defined at:
  6336 ;;		line 206 in file "Commands.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  var             2  120[BANK0 ] PTR unsigned char 
  6339 ;;		 -> rx_buffer(20), NULL(0), 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  systime         4  124[BANK0 ] long 
  6342 ;;  t               2  128[BANK0 ] PTR struct tm
  6343 ;;		 -> gmtime@tim(18), 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         0       2       0       0       0       0       0
  6354 ;;      Locals:         0       6       0       0       0       0       0
  6355 ;;      Temps:          0       2       0       0       0       0       0
  6356 ;;      Totals:         0      10       0       0       0       0       0
  6357 ;;Total ram usage:       10 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; Hardware stack levels required when called:    6
  6360 ;; This function calls:
  6361 ;;		_Get_Control_Voltage
  6362 ;;		_Get_Voltage_Vin
  6363 ;;		_get_LP_RC_Constant
  6364 ;;		_get_PID_Kp
  6365 ;;		_get_PID_T
  6366 ;;		_get_PID_Td
  6367 ;;		_get_PID_Ti
  6368 ;;		_get_PID_deadband
  6369 ;;		_get_PID_output
  6370 ;;		_get_PID_setpoint
  6371 ;;		_get_max_VL
  6372 ;;		_get_min_VL
  6373 ;;		_localtime
  6374 ;;		_sprintf
  6375 ;;		_strcmp
  6376 ;;		_time
  6377 ;; This function is called by:
  6378 ;;		_read_command
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text21
  6383  0010E6                     __ptext21:
  6384                           	opt stack 0
  6385  0010E6                     _get_list:
  6386                           	opt stack 0
  6387  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  6388                           
  6389                           ;Commands.c: 208: time_t systime;
  6390                           ;Commands.c: 209: struct tm *t;
  6391                           ;Commands.c: 211: if(strcmp(var,"kp")==0){
  6392                           
  6393                           ;incstack = 0
  6394  0010E8  C0D8  F019         	movff	get_list@var,strcmp@s1
  6395  0010EC  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6396  0010F0  0EF5               	movlw	low STR_22
  6397  0010F2  6E1B               	movwf	strcmp@s2,c
  6398  0010F4  0E7F               	movlw	high STR_22
  6399  0010F6  6E1C               	movwf	strcmp@s2+1,c
  6400  0010F8  EC4C  F02C         	call	_strcmp	;wreg free
  6401  0010FC  5019               	movf	?_strcmp,w,c
  6402  0010FE  101A               	iorwf	?_strcmp+1,w,c
  6403  001100  A4D8               	btfss	status,2,c
  6404  001102  D015               	goto	l186
  6405                           
  6406                           ;Commands.c: 212: sprintf(buffer,"%.1f\n",get_PID_Kp());
  6407  001104  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6408  001108  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6409  00110C  0E77               	movlw	low STR_35
  6410  00110E  0100               	movlb	0	; () banked
  6411  001110  6FC2               	movwf	sprintf@f& (0+255),b
  6412  001112  0E7F               	movlw	high STR_35
  6413  001114  0100               	movlb	0	; () banked
  6414  001116  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6415  001118  EC1B  F027         	call	_get_PID_Kp	;wreg free
  6416  00111C  C019  F0C4         	movff	?_get_PID_Kp,?_sprintf+4
  6417  001120  C01A  F0C5         	movff	?_get_PID_Kp+1,?_sprintf+5
  6418  001124  C01B  F0C6         	movff	?_get_PID_Kp+2,?_sprintf+6
  6419  001128  EC10  F02F         	call	_sprintf	;wreg free
  6420  00112C  D2D8               	goto	l10813
  6421  00112E                     l186:
  6422  00112E  FFFF               	dw	65535	; assembler added errata NOP
  6423                           
  6424                           ;Commands.c: 215: else if(strcmp(var,"ti")==0){
  6425  001130  C0D8  F019         	movff	get_list@var,strcmp@s1
  6426  001134  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6427  001138  0EF2               	movlw	low STR_23
  6428  00113A  6E1B               	movwf	strcmp@s2,c
  6429  00113C  0E7F               	movlw	high STR_23
  6430  00113E  6E1C               	movwf	strcmp@s2+1,c
  6431  001140  EC4C  F02C         	call	_strcmp	;wreg free
  6432  001144  5019               	movf	?_strcmp,w,c
  6433  001146  101A               	iorwf	?_strcmp+1,w,c
  6434  001148  A4D8               	btfss	status,2,c
  6435  00114A  D015               	goto	l188
  6436                           
  6437                           ;Commands.c: 216: sprintf(buffer,"%.1f\n",get_PID_Ti());
  6438  00114C  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6439  001150  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6440  001154  0E77               	movlw	low STR_35
  6441  001156  0100               	movlb	0	; () banked
  6442  001158  6FC2               	movwf	sprintf@f& (0+255),b
  6443  00115A  0E7F               	movlw	high STR_35
  6444  00115C  0100               	movlb	0	; () banked
  6445  00115E  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6446  001160  EC36  F027         	call	_get_PID_Ti	;wreg free
  6447  001164  C019  F0C4         	movff	?_get_PID_Ti,?_sprintf+4
  6448  001168  C01A  F0C5         	movff	?_get_PID_Ti+1,?_sprintf+5
  6449  00116C  C01B  F0C6         	movff	?_get_PID_Ti+2,?_sprintf+6
  6450  001170  EC10  F02F         	call	_sprintf	;wreg free
  6451  001174  D2B4               	goto	l10813
  6452  001176                     l188:
  6453  001176  FFFF               	dw	65535	; assembler added errata NOP
  6454                           
  6455                           ;Commands.c: 219: else if(strcmp(var,"td")==0){
  6456  001178  C0D8  F019         	movff	get_list@var,strcmp@s1
  6457  00117C  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6458  001180  0EEF               	movlw	low STR_24
  6459  001182  6E1B               	movwf	strcmp@s2,c
  6460  001184  0E7F               	movlw	high STR_24
  6461  001186  6E1C               	movwf	strcmp@s2+1,c
  6462  001188  EC4C  F02C         	call	_strcmp	;wreg free
  6463  00118C  5019               	movf	?_strcmp,w,c
  6464  00118E  101A               	iorwf	?_strcmp+1,w,c
  6465  001190  A4D8               	btfss	status,2,c
  6466  001192  D015               	goto	l190
  6467                           
  6468                           ;Commands.c: 220: sprintf(buffer,"%.1f\n",get_PID_Td());
  6469  001194  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6470  001198  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6471  00119C  0E77               	movlw	low STR_35
  6472  00119E  0100               	movlb	0	; () banked
  6473  0011A0  6FC2               	movwf	sprintf@f& (0+255),b
  6474  0011A2  0E7F               	movlw	high STR_35
  6475  0011A4  0100               	movlb	0	; () banked
  6476  0011A6  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6477  0011A8  EC2D  F027         	call	_get_PID_Td	;wreg free
  6478  0011AC  C019  F0C4         	movff	?_get_PID_Td,?_sprintf+4
  6479  0011B0  C01A  F0C5         	movff	?_get_PID_Td+1,?_sprintf+5
  6480  0011B4  C01B  F0C6         	movff	?_get_PID_Td+2,?_sprintf+6
  6481  0011B8  EC10  F02F         	call	_sprintf	;wreg free
  6482  0011BC  D290               	goto	l10813
  6483  0011BE                     l190:
  6484  0011BE  FFFF               	dw	65535	; assembler added errata NOP
  6485                           
  6486                           ;Commands.c: 223: else if(strcmp(var,"sample_t")==0){
  6487  0011C0  C0D8  F019         	movff	get_list@var,strcmp@s1
  6488  0011C4  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6489  0011C8  0E3F               	movlw	low STR_40
  6490  0011CA  6E1B               	movwf	strcmp@s2,c
  6491  0011CC  0E7F               	movlw	high STR_40
  6492  0011CE  6E1C               	movwf	strcmp@s2+1,c
  6493  0011D0  EC4C  F02C         	call	_strcmp	;wreg free
  6494  0011D4  5019               	movf	?_strcmp,w,c
  6495  0011D6  101A               	iorwf	?_strcmp+1,w,c
  6496  0011D8  A4D8               	btfss	status,2,c
  6497  0011DA  D015               	goto	l192
  6498                           
  6499                           ;Commands.c: 224: sprintf(buffer,"%.1f\n",get_PID_T());
  6500  0011DC  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6501  0011E0  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6502  0011E4  0E77               	movlw	low STR_35
  6503  0011E6  0100               	movlb	0	; () banked
  6504  0011E8  6FC2               	movwf	sprintf@f& (0+255),b
  6505  0011EA  0E7F               	movlw	high STR_35
  6506  0011EC  0100               	movlb	0	; () banked
  6507  0011EE  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6508  0011F0  EC24  F027         	call	_get_PID_T	;wreg free
  6509  0011F4  C019  F0C4         	movff	?_get_PID_T,?_sprintf+4
  6510  0011F8  C01A  F0C5         	movff	?_get_PID_T+1,?_sprintf+5
  6511  0011FC  C01B  F0C6         	movff	?_get_PID_T+2,?_sprintf+6
  6512  001200  EC10  F02F         	call	_sprintf	;wreg free
  6513  001204  D26C               	goto	l10813
  6514  001206                     l192:
  6515  001206  FFFF               	dw	65535	; assembler added errata NOP
  6516                           
  6517                           ;Commands.c: 227: else if(strcmp(var,"setpoint")==0){
  6518  001208  C0D8  F019         	movff	get_list@var,strcmp@s1
  6519  00120C  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6520  001210  0E48               	movlw	low STR_26
  6521  001212  6E1B               	movwf	strcmp@s2,c
  6522  001214  0E7F               	movlw	high STR_26
  6523  001216  6E1C               	movwf	strcmp@s2+1,c
  6524  001218  EC4C  F02C         	call	_strcmp	;wreg free
  6525  00121C  5019               	movf	?_strcmp,w,c
  6526  00121E  101A               	iorwf	?_strcmp+1,w,c
  6527  001220  A4D8               	btfss	status,2,c
  6528  001222  D015               	goto	l194
  6529                           
  6530                           ;Commands.c: 228: sprintf(buffer,"%.1f\n",get_PID_setpoint());
  6531  001224  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6532  001228  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6533  00122C  0E77               	movlw	low STR_35
  6534  00122E  0100               	movlb	0	; () banked
  6535  001230  6FC2               	movwf	sprintf@f& (0+255),b
  6536  001232  0E7F               	movlw	high STR_35
  6537  001234  0100               	movlb	0	; () banked
  6538  001236  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6539  001238  EC3F  F027         	call	_get_PID_setpoint	;wreg free
  6540  00123C  C019  F0C4         	movff	?_get_PID_setpoint,?_sprintf+4
  6541  001240  C01A  F0C5         	movff	?_get_PID_setpoint+1,?_sprintf+5
  6542  001244  C01B  F0C6         	movff	?_get_PID_setpoint+2,?_sprintf+6
  6543  001248  EC10  F02F         	call	_sprintf	;wreg free
  6544  00124C  D248               	goto	l10813
  6545  00124E                     l194:
  6546  00124E  FFFF               	dw	65535	; assembler added errata NOP
  6547                           
  6548                           ;Commands.c: 231: else if(strcmp(var,"deadband")==0){
  6549  001250  C0D8  F019         	movff	get_list@var,strcmp@s1
  6550  001254  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6551  001258  0E36               	movlw	low STR_27
  6552  00125A  6E1B               	movwf	strcmp@s2,c
  6553  00125C  0E7F               	movlw	high STR_27
  6554  00125E  6E1C               	movwf	strcmp@s2+1,c
  6555  001260  EC4C  F02C         	call	_strcmp	;wreg free
  6556  001264  5019               	movf	?_strcmp,w,c
  6557  001266  101A               	iorwf	?_strcmp+1,w,c
  6558  001268  A4D8               	btfss	status,2,c
  6559  00126A  D015               	goto	l196
  6560                           
  6561                           ;Commands.c: 232: sprintf(buffer,"%.1f\n",get_PID_deadband());
  6562  00126C  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6563  001270  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6564  001274  0E77               	movlw	low STR_35
  6565  001276  0100               	movlb	0	; () banked
  6566  001278  6FC2               	movwf	sprintf@f& (0+255),b
  6567  00127A  0E7F               	movlw	high STR_35
  6568  00127C  0100               	movlb	0	; () banked
  6569  00127E  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6570  001280  EC55  F026         	call	_get_PID_deadband	;wreg free
  6571  001284  C019  F0C4         	movff	?_get_PID_deadband,?_sprintf+4
  6572  001288  C01A  F0C5         	movff	?_get_PID_deadband+1,?_sprintf+5
  6573  00128C  C01B  F0C6         	movff	?_get_PID_deadband+2,?_sprintf+6
  6574  001290  EC10  F02F         	call	_sprintf	;wreg free
  6575  001294  D224               	goto	l10813
  6576  001296                     l196:
  6577  001296  FFFF               	dw	65535	; assembler added errata NOP
  6578                           
  6579                           ;Commands.c: 235: else if(strcmp(var,"rc")==0){
  6580  001298  C0D8  F019         	movff	get_list@var,strcmp@s1
  6581  00129C  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6582  0012A0  0EE9               	movlw	low STR_28
  6583  0012A2  6E1B               	movwf	strcmp@s2,c
  6584  0012A4  0E7F               	movlw	high STR_28
  6585  0012A6  6E1C               	movwf	strcmp@s2+1,c
  6586  0012A8  EC4C  F02C         	call	_strcmp	;wreg free
  6587  0012AC  5019               	movf	?_strcmp,w,c
  6588  0012AE  101A               	iorwf	?_strcmp+1,w,c
  6589  0012B0  A4D8               	btfss	status,2,c
  6590  0012B2  D015               	goto	l198
  6591                           
  6592                           ;Commands.c: 236: sprintf(buffer,"%.2f\n",get_LP_RC_Constant());
  6593  0012B4  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6594  0012B8  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6595  0012BC  0E7D               	movlw	low STR_47
  6596  0012BE  0100               	movlb	0	; () banked
  6597  0012C0  6FC2               	movwf	sprintf@f& (0+255),b
  6598  0012C2  0E7F               	movlw	high STR_47
  6599  0012C4  0100               	movlb	0	; () banked
  6600  0012C6  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6601  0012C8  EC12  F027         	call	_get_LP_RC_Constant	;wreg free
  6602  0012CC  C019  F0C4         	movff	?_get_LP_RC_Constant,?_sprintf+4
  6603  0012D0  C01A  F0C5         	movff	?_get_LP_RC_Constant+1,?_sprintf+5
  6604  0012D4  C01B  F0C6         	movff	?_get_LP_RC_Constant+2,?_sprintf+6
  6605  0012D8  EC10  F02F         	call	_sprintf	;wreg free
  6606  0012DC  D200               	goto	l10813
  6607  0012DE                     l198:
  6608  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  6609                           
  6610                           ;Commands.c: 239: else if(strcmp(var,"max")==0){
  6611  0012E0  C0D8  F019         	movff	get_list@var,strcmp@s1
  6612  0012E4  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6613  0012E8  0EE5               	movlw	low STR_10
  6614  0012EA  6E1B               	movwf	strcmp@s2,c
  6615  0012EC  0E7F               	movlw	high STR_10
  6616  0012EE  6E1C               	movwf	strcmp@s2+1,c
  6617  0012F0  EC4C  F02C         	call	_strcmp	;wreg free
  6618  0012F4  5019               	movf	?_strcmp,w,c
  6619  0012F6  101A               	iorwf	?_strcmp+1,w,c
  6620  0012F8  A4D8               	btfss	status,2,c
  6621  0012FA  D015               	goto	l200
  6622                           
  6623                           ;Commands.c: 240: sprintf(buffer,"%.1f\n",get_max_VL());
  6624  0012FC  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6625  001300  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6626  001304  0E77               	movlw	low STR_35
  6627  001306  0100               	movlb	0	; () banked
  6628  001308  6FC2               	movwf	sprintf@f& (0+255),b
  6629  00130A  0E7F               	movlw	high STR_35
  6630  00130C  0100               	movlb	0	; () banked
  6631  00130E  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6632  001310  EC90  F027         	call	_get_max_VL	;wreg free
  6633  001314  C019  F0C4         	movff	?_get_max_VL,?_sprintf+4
  6634  001318  C01A  F0C5         	movff	?_get_max_VL+1,?_sprintf+5
  6635  00131C  C01B  F0C6         	movff	?_get_max_VL+2,?_sprintf+6
  6636  001320  EC10  F02F         	call	_sprintf	;wreg free
  6637  001324  D1DC               	goto	l10813
  6638  001326                     l200:
  6639  001326  FFFF               	dw	65535	; assembler added errata NOP
  6640                           
  6641                           ;Commands.c: 243: else if(strcmp(var,"min")==0){
  6642  001328  C0D8  F019         	movff	get_list@var,strcmp@s1
  6643  00132C  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6644  001330  0ED9               	movlw	low STR_11
  6645  001332  6E1B               	movwf	strcmp@s2,c
  6646  001334  0E7F               	movlw	high STR_11
  6647  001336  6E1C               	movwf	strcmp@s2+1,c
  6648  001338  EC4C  F02C         	call	_strcmp	;wreg free
  6649  00133C  5019               	movf	?_strcmp,w,c
  6650  00133E  101A               	iorwf	?_strcmp+1,w,c
  6651  001340  A4D8               	btfss	status,2,c
  6652  001342  D015               	goto	l202
  6653                           
  6654                           ;Commands.c: 244: sprintf(buffer,"%.1f\n",get_min_VL());
  6655  001344  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6656  001348  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6657  00134C  0E77               	movlw	low STR_35
  6658  00134E  0100               	movlb	0	; () banked
  6659  001350  6FC2               	movwf	sprintf@f& (0+255),b
  6660  001352  0E7F               	movlw	high STR_35
  6661  001354  0100               	movlb	0	; () banked
  6662  001356  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6663  001358  EC99  F027         	call	_get_min_VL	;wreg free
  6664  00135C  C019  F0C4         	movff	?_get_min_VL,?_sprintf+4
  6665  001360  C01A  F0C5         	movff	?_get_min_VL+1,?_sprintf+5
  6666  001364  C01B  F0C6         	movff	?_get_min_VL+2,?_sprintf+6
  6667  001368  EC10  F02F         	call	_sprintf	;wreg free
  6668  00136C  D1B8               	goto	l10813
  6669  00136E                     l202:
  6670  00136E  FFFF               	dw	65535	; assembler added errata NOP
  6671                           
  6672                           ;Commands.c: 247: else if(strcmp(var,"modo")==0){
  6673  001370  C0D8  F019         	movff	get_list@var,strcmp@s1
  6674  001374  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6675  001378  0EAA               	movlw	low STR_52
  6676  00137A  6E1B               	movwf	strcmp@s2,c
  6677  00137C  0E7F               	movlw	high STR_52
  6678  00137E  6E1C               	movwf	strcmp@s2+1,c
  6679  001380  EC4C  F02C         	call	_strcmp	;wreg free
  6680  001384  5019               	movf	?_strcmp,w,c
  6681  001386  101A               	iorwf	?_strcmp+1,w,c
  6682  001388  A4D8               	btfss	status,2,c
  6683  00138A  D01E               	goto	l204
  6684                           
  6685                           ;Commands.c: 248: if(Inputs.B0==1){
  6686  00138C  0100               	movlb	0	; () banked
  6687  00138E  A1FD               	btfss	_Inputs& (0+255),0,b
  6688  001390  D00D               	goto	l205
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;Commands.c: 249: sprintf(buffer,"manual\n");
  6692  001392  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6693  001396  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6694  00139A  0E5A               	movlw	low STR_53
  6695  00139C  0100               	movlb	0	; () banked
  6696  00139E  6FC2               	movwf	sprintf@f& (0+255),b
  6697  0013A0  0E7F               	movlw	high STR_53
  6698  0013A2  0100               	movlb	0	; () banked
  6699  0013A4  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6700  0013A6  EC10  F02F         	call	_sprintf	;wreg free
  6701  0013AA  D199               	goto	l10813
  6702  0013AC                     l205:
  6703  0013AC  FFFF               	dw	65535	; assembler added errata NOP
  6704                           
  6705                           ;Commands.c: 252: else{
  6706                           ;Commands.c: 253: sprintf(buffer,"Auto\n");
  6707  0013AE  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6708  0013B2  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6709  0013B6  0E83               	movlw	low STR_54
  6710  0013B8  0100               	movlb	0	; () banked
  6711  0013BA  6FC2               	movwf	sprintf@f& (0+255),b
  6712  0013BC  0E7F               	movlw	high STR_54
  6713  0013BE  0100               	movlb	0	; () banked
  6714  0013C0  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6715  0013C2  EC10  F02F         	call	_sprintf	;wreg free
  6716  0013C6  D18B               	goto	l10813
  6717  0013C8                     l204:
  6718  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  6719                           
  6720                           ;Commands.c: 257: else if(strcmp(var,"vc")==0){
  6721  0013CA  C0D8  F019         	movff	get_list@var,strcmp@s1
  6722  0013CE  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6723  0013D2  0EEC               	movlw	low STR_55
  6724  0013D4  6E1B               	movwf	strcmp@s2,c
  6725  0013D6  0E7F               	movlw	high STR_55
  6726  0013D8  6E1C               	movwf	strcmp@s2+1,c
  6727  0013DA  EC4C  F02C         	call	_strcmp	;wreg free
  6728  0013DE  5019               	movf	?_strcmp,w,c
  6729  0013E0  101A               	iorwf	?_strcmp+1,w,c
  6730  0013E2  A4D8               	btfss	status,2,c
  6731  0013E4  D015               	goto	l208
  6732                           
  6733                           ;Commands.c: 258: sprintf(buffer,"%.1f\n",Get_Control_Voltage());
  6734  0013E6  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6735  0013EA  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6736  0013EE  0E77               	movlw	low STR_35
  6737  0013F0  0100               	movlb	0	; () banked
  6738  0013F2  6FC2               	movwf	sprintf@f& (0+255),b
  6739  0013F4  0E7F               	movlw	high STR_35
  6740  0013F6  0100               	movlb	0	; () banked
  6741  0013F8  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6742  0013FA  EC55  F039         	call	_Get_Control_Voltage	;wreg free
  6743  0013FE  C08A  F0C4         	movff	?_Get_Control_Voltage,?_sprintf+4
  6744  001402  C08B  F0C5         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6745  001406  C08C  F0C6         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6746  00140A  EC10  F02F         	call	_sprintf	;wreg free
  6747  00140E  D167               	goto	l10813
  6748  001410                     l208:
  6749  001410  FFFF               	dw	65535	; assembler added errata NOP
  6750                           
  6751                           ;Commands.c: 261: else if(strcmp(var,"vin")==0){
  6752  001412  C0D8  F019         	movff	get_list@var,strcmp@s1
  6753  001416  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6754  00141A  0EDD               	movlw	low STR_57
  6755  00141C  6E1B               	movwf	strcmp@s2,c
  6756  00141E  0E7F               	movlw	high STR_57
  6757  001420  6E1C               	movwf	strcmp@s2+1,c
  6758  001422  EC4C  F02C         	call	_strcmp	;wreg free
  6759  001426  5019               	movf	?_strcmp,w,c
  6760  001428  101A               	iorwf	?_strcmp+1,w,c
  6761  00142A  A4D8               	btfss	status,2,c
  6762  00142C  D015               	goto	l210
  6763                           
  6764                           ;Commands.c: 262: sprintf(buffer,"%.1f\n",Get_Voltage_Vin());
  6765  00142E  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6766  001432  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6767  001436  0E77               	movlw	low STR_35
  6768  001438  0100               	movlb	0	; () banked
  6769  00143A  6FC2               	movwf	sprintf@f& (0+255),b
  6770  00143C  0E7F               	movlw	high STR_35
  6771  00143E  0100               	movlb	0	; () banked
  6772  001440  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6773  001442  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  6774  001446  C019  F0C4         	movff	?_Get_Voltage_Vin,?_sprintf+4
  6775  00144A  C01A  F0C5         	movff	?_Get_Voltage_Vin+1,?_sprintf+5
  6776  00144E  C01B  F0C6         	movff	?_Get_Voltage_Vin+2,?_sprintf+6
  6777  001452  EC10  F02F         	call	_sprintf	;wreg free
  6778  001456  D143               	goto	l10813
  6779  001458                     l210:
  6780  001458  FFFF               	dw	65535	; assembler added errata NOP
  6781                           
  6782                           ;Commands.c: 265: else if(strcmp(var,"date")==0){
  6783  00145A  C0D8  F019         	movff	get_list@var,strcmp@s1
  6784  00145E  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6785  001462  0EA5               	movlw	low STR_32
  6786  001464  6E1B               	movwf	strcmp@s2,c
  6787  001466  0E7F               	movlw	high STR_32
  6788  001468  6E1C               	movwf	strcmp@s2+1,c
  6789  00146A  EC4C  F02C         	call	_strcmp	;wreg free
  6790  00146E  5019               	movf	?_strcmp,w,c
  6791  001470  101A               	iorwf	?_strcmp+1,w,c
  6792  001472  A4D8               	btfss	status,2,c
  6793  001474  D04A               	goto	l212
  6794                           
  6795                           ;Commands.c: 266: time(&systime);
  6796  001476  0EDC               	movlw	low get_list@systime
  6797  001478  0100               	movlb	0	; () banked
  6798  00147A  6F8D               	movwf	time@t& (0+255),b
  6799  00147C  0E00               	movlw	high get_list@systime
  6800  00147E  0100               	movlb	0	; () banked
  6801  001480  6F8E               	movwf	(time@t+1)& (0+255),b
  6802  001482  EC86  F035         	call	_time	;wreg free
  6803                           
  6804                           ;Commands.c: 267: t=localtime(&systime);
  6805  001486  0EDC               	movlw	low get_list@systime
  6806  001488  6E2C               	movwf	localtime@tp,c
  6807  00148A  0E00               	movlw	high get_list@systime
  6808  00148C  6E2D               	movwf	localtime@tp+1,c
  6809  00148E  ECE5  F030         	call	_localtime	;wreg free
  6810  001492  C02C  F0E0         	movff	?_localtime,get_list@t
  6811  001496  C02D  F0E1         	movff	?_localtime+1,get_list@t+1
  6812                           
  6813                           ;Commands.c: 268: sprintf(buffer,"%d/%d/%d\n",t->tm_mday,t->tm_mon,t->tm_year+1900);
  6814  00149A  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6815  00149E  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6816  0014A2  0E18               	movlw	low STR_60
  6817  0014A4  0100               	movlb	0	; () banked
  6818  0014A6  6FC2               	movwf	sprintf@f& (0+255),b
  6819  0014A8  0E7F               	movlw	high STR_60
  6820  0014AA  0100               	movlb	0	; () banked
  6821  0014AC  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6822  0014AE  0100               	movlb	0	; () banked
  6823  0014B0  EE20 F006          	lfsr	2,6
  6824  0014B4  51E0               	movf	get_list@t& (0+255),w,b
  6825  0014B6  26D9               	addwf	fsr2l,f,c
  6826  0014B8  51E1               	movf	(get_list@t+1)& (0+255),w,b
  6827  0014BA  22DA               	addwfc	fsr2h,f,c
  6828  0014BC  CFDE F0C4          	movff	postinc2,?_sprintf+4
  6829  0014C0  CFDD F0C5          	movff	postdec2,?_sprintf+5
  6830  0014C4  0100               	movlb	0	; () banked
  6831  0014C6  EE20 F008          	lfsr	2,8
  6832  0014CA  51E0               	movf	get_list@t& (0+255),w,b
  6833  0014CC  26D9               	addwf	fsr2l,f,c
  6834  0014CE  51E1               	movf	(get_list@t+1)& (0+255),w,b
  6835  0014D0  22DA               	addwfc	fsr2h,f,c
  6836  0014D2  CFDE F0C6          	movff	postinc2,?_sprintf+6
  6837  0014D6  CFDD F0C7          	movff	postdec2,?_sprintf+7
  6838  0014DA  0100               	movlb	0	; () banked
  6839  0014DC  EE20 F00A          	lfsr	2,10
  6840  0014E0  51E0               	movf	get_list@t& (0+255),w,b
  6841  0014E2  26D9               	addwf	fsr2l,f,c
  6842  0014E4  51E1               	movf	(get_list@t+1)& (0+255),w,b
  6843  0014E6  22DA               	addwfc	fsr2h,f,c
  6844  0014E8  CFDE F0DA          	movff	postinc2,??_get_list
  6845  0014EC  CFDD F0DB          	movff	postdec2,??_get_list+1
  6846  0014F0  0E6C               	movlw	108
  6847  0014F2  0100               	movlb	0	; () banked
  6848  0014F4  25DA               	addwf	??_get_list& (0+255),w,b
  6849  0014F6  0100               	movlb	0	; () banked
  6850  0014F8  6FC8               	movwf	(?_sprintf+8)& (0+255),b
  6851  0014FA  0E07               	movlw	7
  6852  0014FC  0100               	movlb	0	; () banked
  6853  0014FE  21DB               	addwfc	(??_get_list+1)& (0+255),w,b
  6854  001500  0100               	movlb	0	; () banked
  6855  001502  6FC9               	movwf	(?_sprintf+9)& (0+255),b
  6856  001504  EC10  F02F         	call	_sprintf	;wreg free
  6857  001508  D0EA               	goto	l10813
  6858  00150A                     l212:
  6859  00150A  FFFF               	dw	65535	; assembler added errata NOP
  6860                           
  6861                           ;Commands.c: 271: else if(strcmp(var,"time")==0){
  6862  00150C  C0D8  F019         	movff	get_list@var,strcmp@s1
  6863  001510  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6864  001514  0E13               	movlw	low (STR_25+7)
  6865  001516  6E1B               	movwf	strcmp@s2,c
  6866  001518  0E7F               	movlw	high (STR_25+7)
  6867  00151A  6E1C               	movwf	strcmp@s2+1,c
  6868  00151C  EC4C  F02C         	call	_strcmp	;wreg free
  6869  001520  5019               	movf	?_strcmp,w,c
  6870  001522  101A               	iorwf	?_strcmp+1,w,c
  6871  001524  A4D8               	btfss	status,2,c
  6872  001526  D03D               	goto	l214
  6873                           
  6874                           ;Commands.c: 272: time(&systime);
  6875  001528  0EDC               	movlw	low get_list@systime
  6876  00152A  0100               	movlb	0	; () banked
  6877  00152C  6F8D               	movwf	time@t& (0+255),b
  6878  00152E  0E00               	movlw	high get_list@systime
  6879  001530  0100               	movlb	0	; () banked
  6880  001532  6F8E               	movwf	(time@t+1)& (0+255),b
  6881  001534  EC86  F035         	call	_time	;wreg free
  6882                           
  6883                           ;Commands.c: 273: t=localtime(&systime);
  6884  001538  0EDC               	movlw	low get_list@systime
  6885  00153A  6E2C               	movwf	localtime@tp,c
  6886  00153C  0E00               	movlw	high get_list@systime
  6887  00153E  6E2D               	movwf	localtime@tp+1,c
  6888  001540  ECE5  F030         	call	_localtime	;wreg free
  6889  001544  C02C  F0E0         	movff	?_localtime,get_list@t
  6890  001548  C02D  F0E1         	movff	?_localtime+1,get_list@t+1
  6891                           
  6892                           ;Commands.c: 274: sprintf(buffer,"%d:%d:%d\n",t->tm_hour,t->tm_min,t->tm_sec);
  6893  00154C  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6894  001550  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6895  001554  0E22               	movlw	low STR_62
  6896  001556  0100               	movlb	0	; () banked
  6897  001558  6FC2               	movwf	sprintf@f& (0+255),b
  6898  00155A  0E7F               	movlw	high STR_62
  6899  00155C  0100               	movlb	0	; () banked
  6900  00155E  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6901  001560  0100               	movlb	0	; () banked
  6902  001562  EE20 F004          	lfsr	2,4
  6903  001566  51E0               	movf	get_list@t& (0+255),w,b
  6904  001568  26D9               	addwf	fsr2l,f,c
  6905  00156A  51E1               	movf	(get_list@t+1)& (0+255),w,b
  6906  00156C  22DA               	addwfc	fsr2h,f,c
  6907  00156E  CFDE F0C4          	movff	postinc2,?_sprintf+4
  6908  001572  CFDD F0C5          	movff	postdec2,?_sprintf+5
  6909  001576  0100               	movlb	0	; () banked
  6910  001578  EE20 F002          	lfsr	2,2
  6911  00157C  51E0               	movf	get_list@t& (0+255),w,b
  6912  00157E  26D9               	addwf	fsr2l,f,c
  6913  001580  51E1               	movf	(get_list@t+1)& (0+255),w,b
  6914  001582  22DA               	addwfc	fsr2h,f,c
  6915  001584  CFDE F0C6          	movff	postinc2,?_sprintf+6
  6916  001588  CFDD F0C7          	movff	postdec2,?_sprintf+7
  6917  00158C  C0E0  FFD9         	movff	get_list@t,fsr2l
  6918  001590  C0E1  FFDA         	movff	get_list@t+1,fsr2h
  6919  001594  CFDE F0C8          	movff	postinc2,?_sprintf+8
  6920  001598  CFDD F0C9          	movff	postdec2,?_sprintf+9
  6921  00159C  EC10  F02F         	call	_sprintf	;wreg free
  6922  0015A0  D09E               	goto	l10813
  6923  0015A2                     l214:
  6924  0015A2  FFFF               	dw	65535	; assembler added errata NOP
  6925                           
  6926                           ;Commands.c: 277: else if(strcmp(var,"data")==0){
  6927  0015A4  C0D8  F019         	movff	get_list@var,strcmp@s1
  6928  0015A8  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  6929  0015AC  0EA0               	movlw	low STR_63
  6930  0015AE  6E1B               	movwf	strcmp@s2,c
  6931  0015B0  0E7F               	movlw	high STR_63
  6932  0015B2  6E1C               	movwf	strcmp@s2+1,c
  6933  0015B4  EC4C  F02C         	call	_strcmp	;wreg free
  6934  0015B8  5019               	movf	?_strcmp,w,c
  6935  0015BA  101A               	iorwf	?_strcmp+1,w,c
  6936  0015BC  A4D8               	btfss	status,2,c
  6937  0015BE  D05E               	goto	l216
  6938                           
  6939                           ;Commands.c: 278: if (Inputs.B0 == 1) {
  6940  0015C0  0100               	movlb	0	; () banked
  6941  0015C2  A1FD               	btfss	_Inputs& (0+255),0,b
  6942  0015C4  D02D               	goto	l217
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;Commands.c: 279: sprintf(buffer, "%.1f %.1f %.1f %.1f MANUAL\n", Get_Control_Voltage(),
      +                           Get_Voltage_Vin(), get_PID_setpoint(), get_PID_output());
  6946  0015C6  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6947  0015CA  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6948  0015CE  0E46               	movlw	low STR_64
  6949  0015D0  0100               	movlb	0	; () banked
  6950  0015D2  6FC2               	movwf	sprintf@f& (0+255),b
  6951  0015D4  0E7E               	movlw	high STR_64
  6952  0015D6  0100               	movlb	0	; () banked
  6953  0015D8  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6954  0015DA  EC55  F039         	call	_Get_Control_Voltage	;wreg free
  6955  0015DE  C08A  F0C4         	movff	?_Get_Control_Voltage,?_sprintf+4
  6956  0015E2  C08B  F0C5         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6957  0015E6  C08C  F0C6         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6958  0015EA  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  6959  0015EE  C019  F0C7         	movff	?_Get_Voltage_Vin,?_sprintf+7
  6960  0015F2  C01A  F0C8         	movff	?_Get_Voltage_Vin+1,?_sprintf+8
  6961  0015F6  C01B  F0C9         	movff	?_Get_Voltage_Vin+2,?_sprintf+9
  6962  0015FA  EC3F  F027         	call	_get_PID_setpoint	;wreg free
  6963  0015FE  C019  F0CA         	movff	?_get_PID_setpoint,?_sprintf+10
  6964  001602  C01A  F0CB         	movff	?_get_PID_setpoint+1,?_sprintf+11
  6965  001606  C01B  F0CC         	movff	?_get_PID_setpoint+2,?_sprintf+12
  6966  00160A  ECA2  F027         	call	_get_PID_output	;wreg free
  6967  00160E  C019  F0CD         	movff	?_get_PID_output,?_sprintf+13
  6968  001612  C01A  F0CE         	movff	?_get_PID_output+1,?_sprintf+14
  6969  001616  C01B  F0CF         	movff	?_get_PID_output+2,?_sprintf+15
  6970  00161A  EC10  F02F         	call	_sprintf	;wreg free
  6971  00161E  D05F               	goto	l10813
  6972  001620                     l217:
  6973  001620  FFFF               	dw	65535	; assembler added errata NOP
  6974                           
  6975                           ;Commands.c: 282: else {
  6976                           ;Commands.c: 283: sprintf(buffer, "%.1f %.1f %.1f %.1f AUTO\n", Get_Control_Voltage(), G
      +                          et_Voltage_Vin(), get_PID_setpoint(), get_PID_output());
  6977  001622  C0F7  F0C0         	movff	_buffer,sprintf@wh
  6978  001626  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  6979  00162A  0E62               	movlw	low STR_65
  6980  00162C  0100               	movlb	0	; () banked
  6981  00162E  6FC2               	movwf	sprintf@f& (0+255),b
  6982  001630  0E7E               	movlw	high STR_65
  6983  001632  0100               	movlb	0	; () banked
  6984  001634  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  6985  001636  EC55  F039         	call	_Get_Control_Voltage	;wreg free
  6986  00163A  C08A  F0C4         	movff	?_Get_Control_Voltage,?_sprintf+4
  6987  00163E  C08B  F0C5         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6988  001642  C08C  F0C6         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6989  001646  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
  6990  00164A  C019  F0C7         	movff	?_Get_Voltage_Vin,?_sprintf+7
  6991  00164E  C01A  F0C8         	movff	?_Get_Voltage_Vin+1,?_sprintf+8
  6992  001652  C01B  F0C9         	movff	?_Get_Voltage_Vin+2,?_sprintf+9
  6993  001656  EC3F  F027         	call	_get_PID_setpoint	;wreg free
  6994  00165A  C019  F0CA         	movff	?_get_PID_setpoint,?_sprintf+10
  6995  00165E  C01A  F0CB         	movff	?_get_PID_setpoint+1,?_sprintf+11
  6996  001662  C01B  F0CC         	movff	?_get_PID_setpoint+2,?_sprintf+12
  6997  001666  ECA2  F027         	call	_get_PID_output	;wreg free
  6998  00166A  C019  F0CD         	movff	?_get_PID_output,?_sprintf+13
  6999  00166E  C01A  F0CE         	movff	?_get_PID_output+1,?_sprintf+14
  7000  001672  C01B  F0CF         	movff	?_get_PID_output+2,?_sprintf+15
  7001  001676  EC10  F02F         	call	_sprintf	;wreg free
  7002  00167A  D031               	goto	l10813
  7003  00167C                     l216:
  7004  00167C  FFFF               	dw	65535	; assembler added errata NOP
  7005                           
  7006                           ;Commands.c: 289: else if(strcmp(var,"pidout")==0){
  7007  00167E  C0D8  F019         	movff	get_list@var,strcmp@s1
  7008  001682  C0D9  F01A         	movff	get_list@var+1,strcmp@s1+1
  7009  001686  0E70               	movlw	low STR_66
  7010  001688  6E1B               	movwf	strcmp@s2,c
  7011  00168A  0E7F               	movlw	high STR_66
  7012  00168C  6E1C               	movwf	strcmp@s2+1,c
  7013  00168E  EC4C  F02C         	call	_strcmp	;wreg free
  7014  001692  5019               	movf	?_strcmp,w,c
  7015  001694  101A               	iorwf	?_strcmp+1,w,c
  7016  001696  A4D8               	btfss	status,2,c
  7017  001698  D015               	goto	l220
  7018                           
  7019                           ;Commands.c: 290: sprintf(buffer,"%.1f\n",get_PID_output());
  7020  00169A  C0F7  F0C0         	movff	_buffer,sprintf@wh
  7021  00169E  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  7022  0016A2  0E77               	movlw	low STR_35
  7023  0016A4  0100               	movlb	0	; () banked
  7024  0016A6  6FC2               	movwf	sprintf@f& (0+255),b
  7025  0016A8  0E7F               	movlw	high STR_35
  7026  0016AA  0100               	movlb	0	; () banked
  7027  0016AC  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  7028  0016AE  ECA2  F027         	call	_get_PID_output	;wreg free
  7029  0016B2  C019  F0C4         	movff	?_get_PID_output,?_sprintf+4
  7030  0016B6  C01A  F0C5         	movff	?_get_PID_output+1,?_sprintf+5
  7031  0016BA  C01B  F0C6         	movff	?_get_PID_output+2,?_sprintf+6
  7032  0016BE  EC10  F02F         	call	_sprintf	;wreg free
  7033  0016C2  D00D               	goto	l10813
  7034  0016C4                     l220:
  7035  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  7036                           
  7037                           ;Commands.c: 294: else {
  7038                           ;Commands.c: 295: sprintf(buffer,"Error\n");
  7039  0016C6  C0F7  F0C0         	movff	_buffer,sprintf@wh
  7040  0016CA  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  7041  0016CE  0E69               	movlw	low STR_12
  7042  0016D0  0100               	movlb	0	; () banked
  7043  0016D2  6FC2               	movwf	sprintf@f& (0+255),b
  7044  0016D4  0E7F               	movlw	high STR_12
  7045  0016D6  0100               	movlb	0	; () banked
  7046  0016D8  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  7047  0016DA  EC10  F02F         	call	_sprintf	;wreg free
  7048  0016DE                     l10813:
  7049  0016DE  FFFF               	dw	65535	; assembler added errata NOP
  7050                           
  7051                           ;Commands.c: 296: TXIE=1;
  7052  0016E0  889D               	bsf	3997,4,c	;volatile
  7053  0016E2  0012               	return		;funcret
  7054  0016E4  FFFF               	dw	65535	; errata NOP
  7055  0016E6                     __end_of_get_list:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           intcon	equ	0xFF2
  7062                           postinc0	equ	0xFEE
  7063                           wreg	equ	0xFE8
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           fsr2h	equ	0xFDA
  7068                           fsr2l	equ	0xFD9
  7069                           status	equ	0xFD8
  7070                           
  7071 ;; *************** function _time *****************
  7072 ;; Defined at:
  7073 ;;		line 37 in file "DS1307.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  t               2   45[BANK0 ] PTR long 
  7076 ;;		 -> reset_max_min@system_time(4), main@sys_time(4), get_list@systime(4), 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  DateTime       18   54[BANK0 ] struct tm
  7079 ;;  date            4   50[BANK0 ] struct Date_Data
  7080 ;;  time            3   47[BANK0 ] struct Time_Data
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  4   45[BANK0 ] long 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7090 ;;      Params:         0       2       0       0       0       0       0
  7091 ;;      Locals:         0      25       0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0
  7093 ;;      Totals:         0      27       0       0       0       0       0
  7094 ;;Total ram usage:       27 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    5
  7097 ;; This function calls:
  7098 ;;		_bcdTOint
  7099 ;;		_get_date
  7100 ;;		_get_time
  7101 ;;		_mktime
  7102 ;; This function is called by:
  7103 ;;		_get_list
  7104 ;;		_main
  7105 ;;		_reset_max_min
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           	psect	text22
  7110  006B0C                     __ptext22:
  7111                           	opt stack 0
  7112  006B0C                     _time:
  7113                           	opt stack 0
  7114  006B0C  FFFF               	dw	65535	; assembler added errata NOP
  7115                           
  7116                           ;DS1307.c: 39: struct tm DateTime;
  7117                           ;DS1307.c: 40: struct Time_Data time;
  7118                           ;DS1307.c: 41: struct Date_Data date;
  7119                           ;DS1307.c: 43: get_date(&date);
  7120                           
  7121                           ;incstack = 0
  7122  006B0E  0E92               	movlw	low time@date
  7123  006B10  6E21               	movwf	get_date@Date_Data,c
  7124  006B12  0E00               	movlw	high time@date
  7125  006B14  6E22               	movwf	get_date@Date_Data+1,c
  7126  006B16  EC2F  F028         	call	_get_date	;wreg free
  7127                           
  7128                           ;DS1307.c: 44: get_time(&time);
  7129  006B1A  0E8F               	movlw	low time@time
  7130  006B1C  6E21               	movwf	get_time@Time_Data,c
  7131  006B1E  0E00               	movlw	high time@time
  7132  006B20  6E22               	movwf	get_time@Time_Data+1,c
  7133  006B22  EC3D  F028         	call	_get_time	;wreg free
  7134                           
  7135                           ;DS1307.c: 46: DateTime.tm_year=bcdTOint(date.year)+100;
  7136  006B26  C095  F02D         	movff	time@date+3,bcdTOint@bcdByte
  7137  006B2A  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7138  006B2C  ECA1  F02C         	call	_bcdTOint	;wreg free
  7139  006B30  0E64               	movlw	100
  7140  006B32  242D               	addwf	?_bcdTOint,w,c
  7141  006B34  0100               	movlb	0	; () banked
  7142  006B36  6FA0               	movwf	(time@DateTime+10)& (0+255),b
  7143  006B38  0E00               	movlw	0
  7144  006B3A  202E               	addwfc	?_bcdTOint+1,w,c
  7145  006B3C  0100               	movlb	0	; () banked
  7146  006B3E  6FA1               	movwf	(time@DateTime+11)& (0+255),b
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;DS1307.c: 47: DateTime.tm_mon=bcdTOint(date.month)-1;
  7150  006B40  C094  F02D         	movff	time@date+2,bcdTOint@bcdByte
  7151  006B44  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7152  006B46  ECA1  F02C         	call	_bcdTOint	;wreg free
  7153  006B4A  0EFF               	movlw	255
  7154  006B4C  242D               	addwf	?_bcdTOint,w,c
  7155  006B4E  0100               	movlb	0	; () banked
  7156  006B50  6F9E               	movwf	(time@DateTime+8)& (0+255),b
  7157  006B52  0EFF               	movlw	255
  7158  006B54  202E               	addwfc	?_bcdTOint+1,w,c
  7159  006B56  0100               	movlb	0	; () banked
  7160  006B58  6F9F               	movwf	(time@DateTime+9)& (0+255),b
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;DS1307.c: 48: DateTime.tm_mday=bcdTOint(date.date);
  7164  006B5A  C093  F02D         	movff	time@date+1,bcdTOint@bcdByte
  7165  006B5E  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7166  006B60  ECA1  F02C         	call	_bcdTOint	;wreg free
  7167  006B64  C02D  F09C         	movff	?_bcdTOint,time@DateTime+6
  7168  006B68  C02E  F09D         	movff	?_bcdTOint+1,time@DateTime+7
  7169                           
  7170                           ;DS1307.c: 49: DateTime.tm_wday=bcdTOint(date.day_w);
  7171  006B6C  C092  F02D         	movff	time@date,bcdTOint@bcdByte
  7172  006B70  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7173  006B72  ECA1  F02C         	call	_bcdTOint	;wreg free
  7174  006B76  C02D  F0A2         	movff	?_bcdTOint,time@DateTime+12
  7175  006B7A  C02E  F0A3         	movff	?_bcdTOint+1,time@DateTime+13
  7176                           
  7177                           ;DS1307.c: 50: DateTime.tm_hour=bcdTOint(time.hours);
  7178  006B7E  C091  F02D         	movff	time@time+2,bcdTOint@bcdByte
  7179  006B82  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7180  006B84  ECA1  F02C         	call	_bcdTOint	;wreg free
  7181  006B88  C02D  F09A         	movff	?_bcdTOint,time@DateTime+4
  7182  006B8C  C02E  F09B         	movff	?_bcdTOint+1,time@DateTime+5
  7183                           
  7184                           ;DS1307.c: 51: DateTime.tm_min=bcdTOint(time.minutes);
  7185  006B90  C090  F02D         	movff	time@time+1,bcdTOint@bcdByte
  7186  006B94  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7187  006B96  ECA1  F02C         	call	_bcdTOint	;wreg free
  7188  006B9A  C02D  F098         	movff	?_bcdTOint,time@DateTime+2
  7189  006B9E  C02E  F099         	movff	?_bcdTOint+1,time@DateTime+3
  7190                           
  7191                           ;DS1307.c: 52: DateTime.tm_sec=bcdTOint(time.seconds);
  7192  006BA2  C08F  F02D         	movff	time@time,bcdTOint@bcdByte
  7193  006BA6  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7194  006BA8  ECA1  F02C         	call	_bcdTOint	;wreg free
  7195  006BAC  C02D  F096         	movff	?_bcdTOint,time@DateTime
  7196  006BB0  C02E  F097         	movff	?_bcdTOint+1,time@DateTime+1
  7197                           
  7198                           ;DS1307.c: 54: *t=mktime(&DateTime);
  7199  006BB4  0E96               	movlw	low time@DateTime
  7200  006BB6  0100               	movlb	0	; () banked
  7201  006BB8  6F7F               	movwf	mktime@timeptr& (0+255),b
  7202  006BBA  0E00               	movlw	high time@DateTime
  7203  006BBC  0100               	movlb	0	; () banked
  7204  006BBE  6F80               	movwf	(mktime@timeptr+1)& (0+255),b
  7205  006BC0  EC8D  F017         	call	_mktime	;wreg free
  7206  006BC4  C08D  FFD9         	movff	time@t,fsr2l
  7207  006BC8  C08E  FFDA         	movff	time@t+1,fsr2h
  7208  006BCC  0100               	movlb	0	; () banked
  7209  006BCE  C07F  FFDE         	movff	?_mktime,postinc2
  7210  006BD2  0100               	movlb	0	; () banked
  7211  006BD4  C080  FFDE         	movff	?_mktime+1,postinc2
  7212  006BD8  0100               	movlb	0	; () banked
  7213  006BDA  C081  FFDE         	movff	?_mktime+2,postinc2
  7214  006BDE  0100               	movlb	0	; () banked
  7215  006BE0  C082  FFDE         	movff	?_mktime+3,postinc2
  7216                           
  7217                           ; BSR set to: 0
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;DS1307.c: 56: return(*t);
  7221                           ;	Return value of _time is never used
  7222  006BE4  0012               	return		;funcret
  7223  006BE6  FFFF               	dw	65535	; errata NOP
  7224  006BE8                     __end_of_time:
  7225                           	opt stack 0
  7226                           tblptru	equ	0xFF8
  7227                           tblptrh	equ	0xFF7
  7228                           tblptrl	equ	0xFF6
  7229                           tablat	equ	0xFF5
  7230                           intcon	equ	0xFF2
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _mktime *****************
  7241 ;; Defined at:
  7242 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  timeptr         2   31[BANK0 ] PTR struct tm
  7245 ;;		 -> time@DateTime(18), 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  tt              4   41[BANK0 ] long 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  4   31[BANK0 ] long 
  7250 ;; Registers used:
  7251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7257 ;;      Params:         0       4       0       0       0       0       0
  7258 ;;      Locals:         0       4       0       0       0       0       0
  7259 ;;      Temps:          0       6       0       0       0       0       0
  7260 ;;      Totals:         0      14       0       0       0       0       0
  7261 ;;Total ram usage:       14 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    4
  7264 ;; This function calls:
  7265 ;;		___lmul
  7266 ;;		_ymd_to_scalar
  7267 ;; This function is called by:
  7268 ;;		_time
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text23
  7273  002F1A                     __ptext23:
  7274                           	opt stack 0
  7275  002F1A                     _mktime:
  7276                           	opt stack 0
  7277  002F1A  FFFF               	dw	65535	; assembler added errata NOP
  7278                           
  7279                           ; BSR set to: 0
  7280                           ;incstack = 0
  7281  002F1C  0100               	movlb	0	; () banked
  7282  002F1E  EE20 F00A          	lfsr	2,10
  7283  002F22  517F               	movf	mktime@timeptr& (0+255),w,b
  7284  002F24  26D9               	addwf	fsr2l,f,c
  7285  002F26  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7286  002F28  22DA               	addwfc	fsr2h,f,c
  7287  002F2A  0E01               	movlw	1
  7288  002F2C  BEDB               	btfsc	plusw2,7,c
  7289  002F2E  D018               	goto	u9550
  7290  002F30  0E01               	movlw	1
  7291  002F32  50DB               	movf	plusw2,w,c
  7292  002F34  E104               	bnz	u9540
  7293  002F36  0E46               	movlw	70
  7294  002F38  5CDE               	subwf	postinc2,w,c
  7295  002F3A  A0D8               	btfss	status,0,c
  7296  002F3C  D011               	goto	u9550
  7297  002F3E                     u9540:
  7298                           
  7299                           ; BSR set to: 0
  7300  002F3E  0100               	movlb	0	; () banked
  7301  002F40  EE20 F00A          	lfsr	2,10
  7302  002F44  517F               	movf	mktime@timeptr& (0+255),w,b
  7303  002F46  26D9               	addwf	fsr2l,f,c
  7304  002F48  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7305  002F4A  22DA               	addwfc	fsr2h,f,c
  7306  002F4C  0E01               	movlw	1
  7307  002F4E  BEDB               	btfsc	plusw2,7,c
  7308  002F50  D00E               	goto	l1926
  7309  002F52  0E01               	movlw	1
  7310  002F54  50DB               	movf	plusw2,w,c
  7311  002F56  E104               	bnz	u9550
  7312  002F58  0E8B               	movlw	139
  7313  002F5A  5CDE               	subwf	postinc2,w,c
  7314  002F5C  A0D8               	btfss	status,0,c
  7315  002F5E  D007               	goto	l1926
  7316  002F60                     u9550:
  7317  002F60  FFFF               	dw	65535	; assembler added errata NOP
  7318                           
  7319                           ; BSR set to: 0
  7320  002F62  0100               	movlb	0	; () banked
  7321  002F64  6989               	setf	mktime@tt& (0+255),b
  7322  002F66  698A               	setf	(mktime@tt+1)& (0+255),b
  7323  002F68  698B               	setf	(mktime@tt+2)& (0+255),b
  7324  002F6A  698C               	setf	(mktime@tt+3)& (0+255),b
  7325  002F6C  D10F               	goto	l1929
  7326  002F6E                     l1926:
  7327  002F6E  FFFF               	dw	65535	; assembler added errata NOP
  7328                           
  7329                           ; BSR set to: 0
  7330                           
  7331                           ; BSR set to: 0
  7332  002F70  0100               	movlb	0	; () banked
  7333  002F72  EE20 F00A          	lfsr	2,10
  7334  002F76  517F               	movf	mktime@timeptr& (0+255),w,b
  7335  002F78  26D9               	addwf	fsr2l,f,c
  7336  002F7A  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7337  002F7C  22DA               	addwfc	fsr2h,f,c
  7338  002F7E  CFDE F083          	movff	postinc2,??_mktime
  7339  002F82  CFDD F084          	movff	postdec2,??_mktime+1
  7340  002F86  0E6C               	movlw	108
  7341  002F88  0100               	movlb	0	; () banked
  7342  002F8A  2583               	addwf	??_mktime& (0+255),w,b
  7343  002F8C  0100               	movlb	0	; () banked
  7344  002F8E  6F6F               	movwf	ymd_to_scalar@yr& (0+255),b
  7345  002F90  0E07               	movlw	7
  7346  002F92  0100               	movlb	0	; () banked
  7347  002F94  2184               	addwfc	(??_mktime+1)& (0+255),w,b
  7348  002F96  0100               	movlb	0	; () banked
  7349  002F98  6F70               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
  7350  002F9A  0100               	movlb	0	; () banked
  7351  002F9C  EE20 F008          	lfsr	2,8
  7352  002FA0  517F               	movf	mktime@timeptr& (0+255),w,b
  7353  002FA2  26D9               	addwf	fsr2l,f,c
  7354  002FA4  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7355  002FA6  22DA               	addwfc	fsr2h,f,c
  7356  002FA8  CFDE F085          	movff	postinc2,??_mktime+2
  7357  002FAC  CFDD F086          	movff	postdec2,??_mktime+3
  7358  002FB0  0E01               	movlw	1
  7359  002FB2  0100               	movlb	0	; () banked
  7360  002FB4  2585               	addwf	(??_mktime+2)& (0+255),w,b
  7361  002FB6  0100               	movlb	0	; () banked
  7362  002FB8  6F71               	movwf	ymd_to_scalar@mo& (0+255),b
  7363  002FBA  0E00               	movlw	0
  7364  002FBC  0100               	movlb	0	; () banked
  7365  002FBE  2186               	addwfc	(??_mktime+3)& (0+255),w,b
  7366  002FC0  0100               	movlb	0	; () banked
  7367  002FC2  6F72               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
  7368  002FC4  0100               	movlb	0	; () banked
  7369  002FC6  EE20 F006          	lfsr	2,6
  7370  002FCA  517F               	movf	mktime@timeptr& (0+255),w,b
  7371  002FCC  26D9               	addwf	fsr2l,f,c
  7372  002FCE  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7373  002FD0  22DA               	addwfc	fsr2h,f,c
  7374  002FD2  CFDE F073          	movff	postinc2,ymd_to_scalar@day
  7375  002FD6  CFDD F074          	movff	postdec2,ymd_to_scalar@day+1
  7376  002FDA  EC64  F036         	call	_ymd_to_scalar	;wreg free
  7377  002FDE  C06F  F089         	movff	?_ymd_to_scalar,mktime@tt
  7378  002FE2  C070  F08A         	movff	?_ymd_to_scalar+1,mktime@tt+1
  7379  002FE6  C071  F08B         	movff	?_ymd_to_scalar+2,mktime@tt+2
  7380  002FEA  C072  F08C         	movff	?_ymd_to_scalar+3,mktime@tt+3
  7381  002FEE  0E07               	movlw	7
  7382  002FF0  0100               	movlb	0	; () banked
  7383  002FF2  6F70               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
  7384  002FF4  0EB2               	movlw	178
  7385  002FF6  6F6F               	movwf	ymd_to_scalar@yr& (0+255),b
  7386  002FF8  0E00               	movlw	0
  7387  002FFA  0100               	movlb	0	; () banked
  7388  002FFC  6F72               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
  7389  002FFE  0E01               	movlw	1
  7390  003000  6F71               	movwf	ymd_to_scalar@mo& (0+255),b
  7391  003002  0E00               	movlw	0
  7392  003004  0100               	movlb	0	; () banked
  7393  003006  6F74               	movwf	(ymd_to_scalar@day+1)& (0+255),b
  7394  003008  0E01               	movlw	1
  7395  00300A  6F73               	movwf	ymd_to_scalar@day& (0+255),b
  7396  00300C  EC64  F036         	call	_ymd_to_scalar	;wreg free
  7397  003010  0100               	movlb	0	; () banked
  7398  003012  516F               	movf	?_ymd_to_scalar& (0+255),w,b
  7399  003014  0100               	movlb	0	; () banked
  7400  003016  5F89               	subwf	mktime@tt& (0+255),f,b
  7401  003018  0100               	movlb	0	; () banked
  7402  00301A  5170               	movf	(?_ymd_to_scalar+1)& (0+255),w,b
  7403  00301C  0100               	movlb	0	; () banked
  7404  00301E  5B8A               	subwfb	(mktime@tt+1)& (0+255),f,b
  7405  003020  0100               	movlb	0	; () banked
  7406  003022  5171               	movf	(?_ymd_to_scalar+2)& (0+255),w,b
  7407  003024  0100               	movlb	0	; () banked
  7408  003026  5B8B               	subwfb	(mktime@tt+2)& (0+255),f,b
  7409  003028  0100               	movlb	0	; () banked
  7410  00302A  5172               	movf	(?_ymd_to_scalar+3)& (0+255),w,b
  7411  00302C  0100               	movlb	0	; () banked
  7412  00302E  5B8C               	subwfb	(mktime@tt+3)& (0+255),f,b
  7413                           
  7414                           ; BSR set to: 0
  7415  003030  0100               	movlb	0	; () banked
  7416  003032  EE20 F004          	lfsr	2,4
  7417  003036  517F               	movf	mktime@timeptr& (0+255),w,b
  7418  003038  26D9               	addwf	fsr2l,f,c
  7419  00303A  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7420  00303C  22DA               	addwfc	fsr2h,f,c
  7421  00303E  CFDE F083          	movff	postinc2,??_mktime
  7422  003042  CFDD F084          	movff	postdec2,??_mktime+1
  7423  003046  C083  F085         	movff	??_mktime,??_mktime+2
  7424  00304A  C084  F086         	movff	??_mktime+1,??_mktime+3
  7425  00304E  0E00               	movlw	0
  7426  003050  0100               	movlb	0	; () banked
  7427  003052  BF86               	btfsc	(??_mktime+3)& (0+255),7,b
  7428  003054  0EFF               	movlw	255
  7429  003056  6F87               	movwf	(??_mktime+4)& (0+255),b
  7430  003058  6F88               	movwf	(??_mktime+5)& (0+255),b
  7431  00305A  C089  F019         	movff	mktime@tt,___lmul@multiplier
  7432  00305E  C08A  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7433  003062  C08B  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7434  003066  C08C  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7435  00306A  0E18               	movlw	24
  7436  00306C  6E1D               	movwf	___lmul@multiplicand,c
  7437  00306E  0E00               	movlw	0
  7438  003070  6E1E               	movwf	___lmul@multiplicand+1,c
  7439  003072  0E00               	movlw	0
  7440  003074  6E1F               	movwf	___lmul@multiplicand+2,c
  7441  003076  0E00               	movlw	0
  7442  003078  6E20               	movwf	___lmul@multiplicand+3,c
  7443  00307A  EC28  F02D         	call	___lmul	;wreg free
  7444  00307E  0100               	movlb	0	; () banked
  7445  003080  5185               	movf	(??_mktime+2)& (0+255),w,b
  7446  003082  2419               	addwf	?___lmul,w,c
  7447  003084  0100               	movlb	0	; () banked
  7448  003086  6F89               	movwf	mktime@tt& (0+255),b
  7449  003088  0100               	movlb	0	; () banked
  7450  00308A  5186               	movf	(??_mktime+3)& (0+255),w,b
  7451  00308C  201A               	addwfc	?___lmul+1,w,c
  7452  00308E  0100               	movlb	0	; () banked
  7453  003090  6F8A               	movwf	(mktime@tt+1)& (0+255),b
  7454  003092  0100               	movlb	0	; () banked
  7455  003094  5187               	movf	(??_mktime+4)& (0+255),w,b
  7456  003096  201B               	addwfc	?___lmul+2,w,c
  7457  003098  0100               	movlb	0	; () banked
  7458  00309A  6F8B               	movwf	(mktime@tt+2)& (0+255),b
  7459  00309C  0100               	movlb	0	; () banked
  7460  00309E  5188               	movf	(??_mktime+5)& (0+255),w,b
  7461  0030A0  201C               	addwfc	?___lmul+3,w,c
  7462  0030A2  0100               	movlb	0	; () banked
  7463  0030A4  6F8C               	movwf	(mktime@tt+3)& (0+255),b
  7464                           
  7465                           ; BSR set to: 0
  7466  0030A6  0100               	movlb	0	; () banked
  7467  0030A8  EE20 F002          	lfsr	2,2
  7468  0030AC  517F               	movf	mktime@timeptr& (0+255),w,b
  7469  0030AE  26D9               	addwf	fsr2l,f,c
  7470  0030B0  5180               	movf	(mktime@timeptr+1)& (0+255),w,b
  7471  0030B2  22DA               	addwfc	fsr2h,f,c
  7472  0030B4  CFDE F083          	movff	postinc2,??_mktime
  7473  0030B8  CFDD F084          	movff	postdec2,??_mktime+1
  7474  0030BC  C083  F085         	movff	??_mktime,??_mktime+2
  7475  0030C0  C084  F086         	movff	??_mktime+1,??_mktime+3
  7476  0030C4  0E00               	movlw	0
  7477  0030C6  0100               	movlb	0	; () banked
  7478  0030C8  BF86               	btfsc	(??_mktime+3)& (0+255),7,b
  7479  0030CA  0EFF               	movlw	255
  7480  0030CC  6F87               	movwf	(??_mktime+4)& (0+255),b
  7481  0030CE  6F88               	movwf	(??_mktime+5)& (0+255),b
  7482  0030D0  C089  F019         	movff	mktime@tt,___lmul@multiplier
  7483  0030D4  C08A  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7484  0030D8  C08B  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7485  0030DC  C08C  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7486  0030E0  0E3C               	movlw	60
  7487  0030E2  6E1D               	movwf	___lmul@multiplicand,c
  7488  0030E4  0E00               	movlw	0
  7489  0030E6  6E1E               	movwf	___lmul@multiplicand+1,c
  7490  0030E8  0E00               	movlw	0
  7491  0030EA  6E1F               	movwf	___lmul@multiplicand+2,c
  7492  0030EC  0E00               	movlw	0
  7493  0030EE  6E20               	movwf	___lmul@multiplicand+3,c
  7494  0030F0  EC28  F02D         	call	___lmul	;wreg free
  7495  0030F4  0100               	movlb	0	; () banked
  7496  0030F6  5185               	movf	(??_mktime+2)& (0+255),w,b
  7497  0030F8  2419               	addwf	?___lmul,w,c
  7498  0030FA  0100               	movlb	0	; () banked
  7499  0030FC  6F89               	movwf	mktime@tt& (0+255),b
  7500  0030FE  0100               	movlb	0	; () banked
  7501  003100  5186               	movf	(??_mktime+3)& (0+255),w,b
  7502  003102  201A               	addwfc	?___lmul+1,w,c
  7503  003104  0100               	movlb	0	; () banked
  7504  003106  6F8A               	movwf	(mktime@tt+1)& (0+255),b
  7505  003108  0100               	movlb	0	; () banked
  7506  00310A  5187               	movf	(??_mktime+4)& (0+255),w,b
  7507  00310C  201B               	addwfc	?___lmul+2,w,c
  7508  00310E  0100               	movlb	0	; () banked
  7509  003110  6F8B               	movwf	(mktime@tt+2)& (0+255),b
  7510  003112  0100               	movlb	0	; () banked
  7511  003114  5188               	movf	(??_mktime+5)& (0+255),w,b
  7512  003116  201C               	addwfc	?___lmul+3,w,c
  7513  003118  0100               	movlb	0	; () banked
  7514  00311A  6F8C               	movwf	(mktime@tt+3)& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517  00311C  C07F  FFD9         	movff	mktime@timeptr,fsr2l
  7518  003120  C080  FFDA         	movff	mktime@timeptr+1,fsr2h
  7519  003124  CFDE F083          	movff	postinc2,??_mktime
  7520  003128  CFDD F084          	movff	postdec2,??_mktime+1
  7521  00312C  C083  F085         	movff	??_mktime,??_mktime+2
  7522  003130  C084  F086         	movff	??_mktime+1,??_mktime+3
  7523  003134  0E00               	movlw	0
  7524  003136  0100               	movlb	0	; () banked
  7525  003138  BF86               	btfsc	(??_mktime+3)& (0+255),7,b
  7526  00313A  0EFF               	movlw	255
  7527  00313C  6F87               	movwf	(??_mktime+4)& (0+255),b
  7528  00313E  6F88               	movwf	(??_mktime+5)& (0+255),b
  7529  003140  C089  F019         	movff	mktime@tt,___lmul@multiplier
  7530  003144  C08A  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7531  003148  C08B  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7532  00314C  C08C  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7533  003150  0E3C               	movlw	60
  7534  003152  6E1D               	movwf	___lmul@multiplicand,c
  7535  003154  0E00               	movlw	0
  7536  003156  6E1E               	movwf	___lmul@multiplicand+1,c
  7537  003158  0E00               	movlw	0
  7538  00315A  6E1F               	movwf	___lmul@multiplicand+2,c
  7539  00315C  0E00               	movlw	0
  7540  00315E  6E20               	movwf	___lmul@multiplicand+3,c
  7541  003160  EC28  F02D         	call	___lmul	;wreg free
  7542  003164  0100               	movlb	0	; () banked
  7543  003166  5185               	movf	(??_mktime+2)& (0+255),w,b
  7544  003168  2419               	addwf	?___lmul,w,c
  7545  00316A  0100               	movlb	0	; () banked
  7546  00316C  6F89               	movwf	mktime@tt& (0+255),b
  7547  00316E  0100               	movlb	0	; () banked
  7548  003170  5186               	movf	(??_mktime+3)& (0+255),w,b
  7549  003172  201A               	addwfc	?___lmul+1,w,c
  7550  003174  0100               	movlb	0	; () banked
  7551  003176  6F8A               	movwf	(mktime@tt+1)& (0+255),b
  7552  003178  0100               	movlb	0	; () banked
  7553  00317A  5187               	movf	(??_mktime+4)& (0+255),w,b
  7554  00317C  201B               	addwfc	?___lmul+2,w,c
  7555  00317E  0100               	movlb	0	; () banked
  7556  003180  6F8B               	movwf	(mktime@tt+2)& (0+255),b
  7557  003182  0100               	movlb	0	; () banked
  7558  003184  5188               	movf	(??_mktime+5)& (0+255),w,b
  7559  003186  201C               	addwfc	?___lmul+3,w,c
  7560  003188  0100               	movlb	0	; () banked
  7561  00318A  6F8C               	movwf	(mktime@tt+3)& (0+255),b
  7562  00318C                     l1929:
  7563  00318C  FFFF               	dw	65535	; assembler added errata NOP
  7564                           
  7565                           ; BSR set to: 0
  7566                           
  7567                           ; BSR set to: 0
  7568  00318E  C089  F07F         	movff	mktime@tt,?_mktime
  7569  003192  C08A  F080         	movff	mktime@tt+1,?_mktime+1
  7570  003196  C08B  F081         	movff	mktime@tt+2,?_mktime+2
  7571  00319A  C08C  F082         	movff	mktime@tt+3,?_mktime+3
  7572                           
  7573                           ; BSR set to: 0
  7574                           
  7575                           ; BSR set to: 0
  7576  00319E  0012               	return		;funcret
  7577  0031A0  FFFF               	dw	65535	; errata NOP
  7578  0031A2                     __end_of_mktime:
  7579                           	opt stack 0
  7580                           tblptru	equ	0xFF8
  7581                           tblptrh	equ	0xFF7
  7582                           tblptrl	equ	0xFF6
  7583                           tablat	equ	0xFF5
  7584                           intcon	equ	0xFF2
  7585                           postinc0	equ	0xFEE
  7586                           wreg	equ	0xFE8
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           plusw2	equ	0xFDB
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _ymd_to_scalar *****************
  7596 ;; Defined at:
  7597 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  yr              2   15[BANK0 ] unsigned int 
  7600 ;;  mo              2   17[BANK0 ] unsigned int 
  7601 ;;  day             2   19[BANK0 ] unsigned int 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  scalar          4   27[BANK0 ] long 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  4   15[BANK0 ] long 
  7606 ;; Registers used:
  7607 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7613 ;;      Params:         0       6       0       0       0       0       0
  7614 ;;      Locals:         0       6       0       0       0       0       0
  7615 ;;      Temps:          0       4       0       0       0       0       0
  7616 ;;      Totals:         0      16       0       0       0       0       0
  7617 ;;Total ram usage:       16 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    3
  7620 ;; This function calls:
  7621 ;;		_isleap
  7622 ;;		_months_to_days
  7623 ;;		_years_to_days
  7624 ;; This function is called by:
  7625 ;;		_mktime
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text24
  7630  006CC8                     __ptext24:
  7631                           	opt stack 0
  7632  006CC8                     _ymd_to_scalar:
  7633                           	opt stack 0
  7634  006CC8  FFFF               	dw	65535	; assembler added errata NOP
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;incstack = 0
  7638  006CCA  C071  F02D         	movff	ymd_to_scalar@mo,months_to_days@month
  7639  006CCE  C072  F02E         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  7640  006CD2  EC78  F02A         	call	_months_to_days	;wreg free
  7641  006CD6  0100               	movlb	0	; () banked
  7642  006CD8  5173               	movf	ymd_to_scalar@day& (0+255),w,b
  7643  006CDA  262D               	addwf	?_months_to_days,f,c
  7644  006CDC  0100               	movlb	0	; () banked
  7645  006CDE  5174               	movf	(ymd_to_scalar@day+1)& (0+255),w,b
  7646  006CE0  222E               	addwfc	?_months_to_days+1,f,c
  7647  006CE2  C02D  F07B         	movff	?_months_to_days,ymd_to_scalar@scalar
  7648  006CE6  C02E  F07C         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  7649  006CEA  0100               	movlb	0	; () banked
  7650  006CEC  6B7D               	clrf	(ymd_to_scalar@scalar+2)& (0+255),b
  7651  006CEE  6B7E               	clrf	(ymd_to_scalar@scalar+3)& (0+255),b
  7652                           
  7653                           ; BSR set to: 0
  7654  006CF0  0100               	movlb	0	; () banked
  7655  006CF2  5172               	movf	(ymd_to_scalar@mo+1)& (0+255),w,b
  7656  006CF4  E105               	bnz	u9360
  7657  006CF6  0E03               	movlw	3
  7658  006CF8  0100               	movlb	0	; () banked
  7659  006CFA  5D71               	subwf	ymd_to_scalar@mo& (0+255),w,b
  7660  006CFC  A0D8               	btfss	status,0,c
  7661  006CFE  D030               	goto	l1918
  7662  006D00                     u9360:
  7663                           
  7664                           ; BSR set to: 0
  7665  006D00  C06F  F01E         	movff	ymd_to_scalar@yr,isleap@yr
  7666  006D04  C070  F01F         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  7667  006D08  EC89  F02D         	call	_isleap	;wreg free
  7668  006D0C  501E               	movf	?_isleap,w,c
  7669  006D0E  101F               	iorwf	?_isleap+1,w,c
  7670  006D10  A4D8               	btfss	status,2,c
  7671  006D12  D005               	goto	l1920
  7672  006D14  0E00               	movlw	0
  7673  006D16  0100               	movlb	0	; () banked
  7674  006D18  6F7A               	movwf	(_ymd_to_scalar$2959+1)& (0+255),b
  7675  006D1A  0E02               	movlw	2
  7676  006D1C  D005               	goto	L6
  7677  006D1E                     l1920:
  7678  006D1E  FFFF               	dw	65535	; assembler added errata NOP
  7679                           
  7680                           ; BSR set to: 0
  7681  006D20  0E00               	movlw	0
  7682  006D22  0100               	movlb	0	; () banked
  7683  006D24  6F7A               	movwf	(_ymd_to_scalar$2959+1)& (0+255),b
  7684  006D26  0E01               	movlw	1
  7685  006D28                     L6:
  7686  006D28  FFFF               	dw	65535	; assembler added errata NOP
  7687  006D2A  6F79               	movwf	_ymd_to_scalar$2959& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690                           
  7691                           ; BSR set to: 0
  7692  006D2C  C079  F075         	movff	_ymd_to_scalar$2959,??_ymd_to_scalar
  7693  006D30  C07A  F076         	movff	_ymd_to_scalar$2959+1,??_ymd_to_scalar+1
  7694  006D34  0E00               	movlw	0
  7695  006D36  0100               	movlb	0	; () banked
  7696  006D38  BF76               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,b
  7697  006D3A  0EFF               	movlw	255
  7698  006D3C  6F77               	movwf	(??_ymd_to_scalar+2)& (0+255),b
  7699  006D3E  6F78               	movwf	(??_ymd_to_scalar+3)& (0+255),b
  7700  006D40  0100               	movlb	0	; () banked
  7701  006D42  5175               	movf	??_ymd_to_scalar& (0+255),w,b
  7702  006D44  0100               	movlb	0	; () banked
  7703  006D46  5F7B               	subwf	ymd_to_scalar@scalar& (0+255),f,b
  7704  006D48  0100               	movlb	0	; () banked
  7705  006D4A  5176               	movf	(??_ymd_to_scalar+1)& (0+255),w,b
  7706  006D4C  0100               	movlb	0	; () banked
  7707  006D4E  5B7C               	subwfb	(ymd_to_scalar@scalar+1)& (0+255),f,b
  7708  006D50  0100               	movlb	0	; () banked
  7709  006D52  5177               	movf	(??_ymd_to_scalar+2)& (0+255),w,b
  7710  006D54  0100               	movlb	0	; () banked
  7711  006D56  5B7D               	subwfb	(ymd_to_scalar@scalar+2)& (0+255),f,b
  7712  006D58  0100               	movlb	0	; () banked
  7713  006D5A  5178               	movf	(??_ymd_to_scalar+3)& (0+255),w,b
  7714  006D5C  0100               	movlb	0	; () banked
  7715  006D5E  5B7E               	subwfb	(ymd_to_scalar@scalar+3)& (0+255),f,b
  7716  006D60                     l1918:
  7717  006D60  FFFF               	dw	65535	; assembler added errata NOP
  7718                           
  7719                           ; BSR set to: 0
  7720                           
  7721                           ; BSR set to: 0
  7722  006D62  0100               	movlb	0	; () banked
  7723  006D64  076F               	decf	ymd_to_scalar@yr& (0+255),f,b
  7724  006D66  A0D8               	btfss	status,0,c
  7725  006D68  0770               	decf	(ymd_to_scalar@yr+1)& (0+255),f,b
  7726                           
  7727                           ; BSR set to: 0
  7728  006D6A  C06F  F067         	movff	ymd_to_scalar@yr,years_to_days@yr
  7729  006D6E  C070  F068         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  7730  006D72  EC1C  F035         	call	_years_to_days	;wreg free
  7731  006D76  0100               	movlb	0	; () banked
  7732  006D78  5167               	movf	?_years_to_days& (0+255),w,b
  7733  006D7A  0100               	movlb	0	; () banked
  7734  006D7C  277B               	addwf	ymd_to_scalar@scalar& (0+255),f,b
  7735  006D7E  0100               	movlb	0	; () banked
  7736  006D80  5168               	movf	(?_years_to_days+1)& (0+255),w,b
  7737  006D82  0100               	movlb	0	; () banked
  7738  006D84  237C               	addwfc	(ymd_to_scalar@scalar+1)& (0+255),f,b
  7739  006D86  0100               	movlb	0	; () banked
  7740  006D88  5169               	movf	(?_years_to_days+2)& (0+255),w,b
  7741  006D8A  0100               	movlb	0	; () banked
  7742  006D8C  237D               	addwfc	(ymd_to_scalar@scalar+2)& (0+255),f,b
  7743  006D8E  0100               	movlb	0	; () banked
  7744  006D90  516A               	movf	(?_years_to_days+3)& (0+255),w,b
  7745  006D92  0100               	movlb	0	; () banked
  7746  006D94  237E               	addwfc	(ymd_to_scalar@scalar+3)& (0+255),f,b
  7747                           
  7748                           ; BSR set to: 0
  7749  006D96  C07B  F06F         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  7750  006D9A  C07C  F070         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  7751  006D9E  C07D  F071         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  7752  006DA2  C07E  F072         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  7753                           
  7754                           ; BSR set to: 0
  7755                           
  7756                           ; BSR set to: 0
  7757  006DA6  0012               	return		;funcret
  7758  006DA8  FFFF               	dw	65535	; errata NOP
  7759  006DAA                     __end_of_ymd_to_scalar:
  7760                           	opt stack 0
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           intcon	equ	0xFF2
  7766                           postinc0	equ	0xFEE
  7767                           wreg	equ	0xFE8
  7768                           indf2	equ	0xFDF
  7769                           postinc2	equ	0xFDE
  7770                           postdec2	equ	0xFDD
  7771                           plusw2	equ	0xFDB
  7772                           fsr2h	equ	0xFDA
  7773                           fsr2l	equ	0xFD9
  7774                           status	equ	0xFD8
  7775                           
  7776 ;; *************** function _years_to_days *****************
  7777 ;; Defined at:
  7778 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  yr              2    7[BANK0 ] unsigned int 
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  ret             4   11[BANK0 ] long 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  4    7[BANK0 ] long 
  7785 ;; Registers used:
  7786 ;;		wreg, status,2, status,0, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7792 ;;      Params:         0       4       0       0       0       0       0
  7793 ;;      Locals:         0       4       0       0       0       0       0
  7794 ;;      Temps:          2       0       0       0       0       0       0
  7795 ;;      Totals:         2       8       0       0       0       0       0
  7796 ;;Total ram usage:       10 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    2
  7799 ;; This function calls:
  7800 ;;		___lmul
  7801 ;;		___lwdiv
  7802 ;; This function is called by:
  7803 ;;		_ymd_to_scalar
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text25
  7808  006A38                     __ptext25:
  7809                           	opt stack 0
  7810  006A38                     _years_to_days:
  7811                           	opt stack 0
  7812  006A38  FFFF               	dw	65535	; assembler added errata NOP
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;incstack = 0
  7816  006A3A  C067  F019         	movff	years_to_days@yr,___lmul@multiplier
  7817  006A3E  C068  F01A         	movff	years_to_days@yr+1,___lmul@multiplier+1
  7818  006A42  6A1B               	clrf	___lmul@multiplier+2,c
  7819  006A44  6A1C               	clrf	___lmul@multiplier+3,c
  7820  006A46  0E6D               	movlw	109
  7821  006A48  6E1D               	movwf	___lmul@multiplicand,c
  7822  006A4A  0E01               	movlw	1
  7823  006A4C  6E1E               	movwf	___lmul@multiplicand+1,c
  7824  006A4E  0E00               	movlw	0
  7825  006A50  6E1F               	movwf	___lmul@multiplicand+2,c
  7826  006A52  0E00               	movlw	0
  7827  006A54  6E20               	movwf	___lmul@multiplicand+3,c
  7828  006A56  EC28  F02D         	call	___lmul	;wreg free
  7829  006A5A  C019  F06B         	movff	?___lmul,years_to_days@ret
  7830  006A5E  C01A  F06C         	movff	?___lmul+1,years_to_days@ret+1
  7831  006A62  C01B  F06D         	movff	?___lmul+2,years_to_days@ret+2
  7832  006A66  C01C  F06E         	movff	?___lmul+3,years_to_days@ret+3
  7833  006A6A  C067  F060         	movff	years_to_days@yr,___lwdiv@dividend
  7834  006A6E  C068  F061         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  7835  006A72  0E00               	movlw	0
  7836  006A74  0100               	movlb	0	; () banked
  7837  006A76  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7838  006A78  0E64               	movlw	100
  7839  006A7A  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7840  006A7C  EC15  F030         	call	___lwdiv	;wreg free
  7841  006A80  0100               	movlb	0	; () banked
  7842  006A82  1F60               	comf	?___lwdiv& (0+255),f,b
  7843  006A84  0100               	movlb	0	; () banked
  7844  006A86  1F61               	comf	(?___lwdiv+1)& (0+255),f,b
  7845  006A88  0100               	movlb	0	; () banked
  7846  006A8A  4B60               	infsnz	?___lwdiv& (0+255),f,b
  7847  006A8C  2B61               	incf	(?___lwdiv+1)& (0+255),f,b
  7848  006A8E  C067  F02D         	movff	years_to_days@yr,??_years_to_days
  7849  006A92  C068  F02E         	movff	years_to_days@yr+1,??_years_to_days+1
  7850  006A96  90D8               	bcf	status,0,c
  7851  006A98  322E               	rrcf	??_years_to_days+1,f,c
  7852  006A9A  322D               	rrcf	??_years_to_days,f,c
  7853  006A9C  90D8               	bcf	status,0,c
  7854  006A9E  322E               	rrcf	??_years_to_days+1,f,c
  7855  006AA0  322D               	rrcf	??_years_to_days,f,c
  7856  006AA2  0100               	movlb	0	; () banked
  7857  006AA4  5160               	movf	?___lwdiv& (0+255),w,b
  7858  006AA6  262D               	addwf	??_years_to_days,f,c
  7859  006AA8  0100               	movlb	0	; () banked
  7860  006AAA  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  7861  006AAC  222E               	addwfc	??_years_to_days+1,f,c
  7862  006AAE  502D               	movf	??_years_to_days,w,c
  7863  006AB0  0100               	movlb	0	; () banked
  7864  006AB2  276B               	addwf	years_to_days@ret& (0+255),f,b
  7865  006AB4  502E               	movf	??_years_to_days+1,w,c
  7866  006AB6  0100               	movlb	0	; () banked
  7867  006AB8  236C               	addwfc	(years_to_days@ret+1)& (0+255),f,b
  7868  006ABA  0E00               	movlw	0
  7869  006ABC  0100               	movlb	0	; () banked
  7870  006ABE  236D               	addwfc	(years_to_days@ret+2)& (0+255),f,b
  7871  006AC0  0E00               	movlw	0
  7872  006AC2  0100               	movlb	0	; () banked
  7873  006AC4  236E               	addwfc	(years_to_days@ret+3)& (0+255),f,b
  7874  006AC6  C067  F060         	movff	years_to_days@yr,___lwdiv@dividend
  7875  006ACA  C068  F061         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  7876  006ACE  0E01               	movlw	1
  7877  006AD0  0100               	movlb	0	; () banked
  7878  006AD2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7879  006AD4  0E90               	movlw	144
  7880  006AD6  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7881  006AD8  EC15  F030         	call	___lwdiv	;wreg free
  7882  006ADC  0100               	movlb	0	; () banked
  7883  006ADE  5160               	movf	?___lwdiv& (0+255),w,b
  7884  006AE0  0100               	movlb	0	; () banked
  7885  006AE2  276B               	addwf	years_to_days@ret& (0+255),f,b
  7886  006AE4  0100               	movlb	0	; () banked
  7887  006AE6  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  7888  006AE8  0100               	movlb	0	; () banked
  7889  006AEA  236C               	addwfc	(years_to_days@ret+1)& (0+255),f,b
  7890  006AEC  0E00               	movlw	0
  7891  006AEE  0100               	movlb	0	; () banked
  7892  006AF0  236D               	addwfc	(years_to_days@ret+2)& (0+255),f,b
  7893  006AF2  0E00               	movlw	0
  7894  006AF4  0100               	movlb	0	; () banked
  7895  006AF6  236E               	addwfc	(years_to_days@ret+3)& (0+255),f,b
  7896                           
  7897                           ; BSR set to: 0
  7898  006AF8  C06B  F067         	movff	years_to_days@ret,?_years_to_days
  7899  006AFC  C06C  F068         	movff	years_to_days@ret+1,?_years_to_days+1
  7900  006B00  C06D  F069         	movff	years_to_days@ret+2,?_years_to_days+2
  7901  006B04  C06E  F06A         	movff	years_to_days@ret+3,?_years_to_days+3
  7902                           
  7903                           ; BSR set to: 0
  7904                           
  7905                           ; BSR set to: 0
  7906  006B08  0012               	return		;funcret
  7907  006B0A  FFFF               	dw	65535	; errata NOP
  7908  006B0C                     __end_of_years_to_days:
  7909                           	opt stack 0
  7910                           tblptru	equ	0xFF8
  7911                           tblptrh	equ	0xFF7
  7912                           tblptrl	equ	0xFF6
  7913                           tablat	equ	0xFF5
  7914                           intcon	equ	0xFF2
  7915                           postinc0	equ	0xFEE
  7916                           wreg	equ	0xFE8
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           plusw2	equ	0xFDB
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _months_to_days *****************
  7926 ;; Defined at:
  7927 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  month           2   44[COMRAM] unsigned int 
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  2   44[COMRAM] unsigned int 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7941 ;;      Params:         2       0       0       0       0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0
  7944 ;;      Totals:         2       0       0       0       0       0       0
  7945 ;;Total ram usage:        2 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    2
  7948 ;; This function calls:
  7949 ;;		___lwdiv
  7950 ;;		___wmul
  7951 ;; This function is called by:
  7952 ;;		_ymd_to_scalar
  7953 ;; This function uses a non-reentrant model
  7954 ;;
  7955                           
  7956                           	psect	text26
  7957  0054F0                     __ptext26:
  7958                           	opt stack 0
  7959  0054F0                     _months_to_days:
  7960                           	opt stack 0
  7961  0054F0  FFFF               	dw	65535	; assembler added errata NOP
  7962                           
  7963                           ; BSR set to: 0
  7964                           ;incstack = 0
  7965  0054F2  C02D  F027         	movff	months_to_days@month,___wmul@multiplier
  7966  0054F6  C02E  F028         	movff	months_to_days@month+1,___wmul@multiplier+1
  7967  0054FA  0E0B               	movlw	11
  7968  0054FC  6E2A               	movwf	___wmul@multiplicand+1,c
  7969  0054FE  0EF1               	movlw	241
  7970  005500  6E29               	movwf	___wmul@multiplicand,c
  7971  005502  EC10  F029         	call	___wmul	;wreg free
  7972  005506  0E41               	movlw	65
  7973  005508  2427               	addwf	?___wmul,w,c
  7974  00550A  0100               	movlb	0	; () banked
  7975  00550C  6F60               	movwf	___lwdiv@dividend& (0+255),b
  7976  00550E  0EF4               	movlw	244
  7977  005510  2028               	addwfc	?___wmul+1,w,c
  7978  005512  0100               	movlb	0	; () banked
  7979  005514  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
  7980  005516  0E00               	movlw	0
  7981  005518  0100               	movlb	0	; () banked
  7982  00551A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7983  00551C  0E64               	movlw	100
  7984  00551E  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7985  005520  EC15  F030         	call	___lwdiv	;wreg free
  7986  005524  C060  F02D         	movff	?___lwdiv,?_months_to_days
  7987  005528  C061  F02E         	movff	?___lwdiv+1,?_months_to_days+1
  7988  00552C  0012               	return		;funcret
  7989  00552E  FFFF               	dw	65535	; errata NOP
  7990  005530                     __end_of_months_to_days:
  7991                           	opt stack 0
  7992                           tblptru	equ	0xFF8
  7993                           tblptrh	equ	0xFF7
  7994                           tblptrl	equ	0xFF6
  7995                           tablat	equ	0xFF5
  7996                           intcon	equ	0xFF2
  7997                           postinc0	equ	0xFEE
  7998                           wreg	equ	0xFE8
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           plusw2	equ	0xFDB
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function ___lwdiv *****************
  8008 ;; Defined at:
  8009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  dividend        2    0[BANK0 ] unsigned int 
  8012 ;;  divisor         2    2[BANK0 ] unsigned int 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  quotient        2    5[BANK0 ] unsigned int 
  8015 ;;  counter         1    4[BANK0 ] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  2    0[BANK0 ] unsigned int 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8025 ;;      Params:         0       4       0       0       0       0       0
  8026 ;;      Locals:         0       3       0       0       0       0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0
  8028 ;;      Totals:         0       7       0       0       0       0       0
  8029 ;;Total ram usage:        7 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    1
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_months_to_days
  8036 ;;		_years_to_days
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text27
  8041  00602A                     __ptext27:
  8042                           	opt stack 0
  8043  00602A                     ___lwdiv:
  8044                           	opt stack 0
  8045  00602A  FFFF               	dw	65535	; assembler added errata NOP
  8046                           
  8047                           ;incstack = 0
  8048  00602C  0E00               	movlw	0
  8049  00602E  0100               	movlb	0	; () banked
  8050  006030  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8051  006032  0E00               	movlw	0
  8052  006034  6F65               	movwf	___lwdiv@quotient& (0+255),b
  8053                           
  8054                           ; BSR set to: 0
  8055  006036  0100               	movlb	0	; () banked
  8056  006038  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8057  00603A  0100               	movlb	0	; () banked
  8058  00603C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8059  00603E  B4D8               	btfsc	status,2,c
  8060  006040  D030               	goto	l1888
  8061                           
  8062                           ; BSR set to: 0
  8063  006042  0E01               	movlw	1
  8064  006044  0100               	movlb	0	; () banked
  8065  006046  6F64               	movwf	___lwdiv@counter& (0+255),b
  8066  006048  D007               	goto	l1883
  8067  00604A  FFFF               	dw	65535	; assembler added errata NOP
  8068                           
  8069                           ; BSR set to: 0
  8070                           
  8071                           ; BSR set to: 0
  8072  00604C  0100               	movlb	0	; () banked
  8073  00604E  90D8               	bcf	status,0,c
  8074  006050  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  8075  006052  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8076  006054  0100               	movlb	0	; () banked
  8077  006056  2B64               	incf	___lwdiv@counter& (0+255),f,b
  8078  006058                     l1883:
  8079  006058  FFFF               	dw	65535	; assembler added errata NOP
  8080                           
  8081                           ; BSR set to: 0
  8082                           
  8083                           ; BSR set to: 0
  8084  00605A  0100               	movlb	0	; () banked
  8085  00605C  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8086  00605E  D7F5               	goto	l1884
  8087  006060                     u7950:
  8088  006060  FFFF               	dw	65535	; assembler added errata NOP
  8089                           
  8090                           ; BSR set to: 0
  8091                           
  8092                           ; BSR set to: 0
  8093                           
  8094                           ; BSR set to: 0
  8095  006062  0100               	movlb	0	; () banked
  8096  006064  90D8               	bcf	status,0,c
  8097  006066  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  8098  006068  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8099                           
  8100                           ; BSR set to: 0
  8101  00606A  0100               	movlb	0	; () banked
  8102  00606C  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8103  00606E  0100               	movlb	0	; () banked
  8104  006070  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  8105  006072  0100               	movlb	0	; () banked
  8106  006074  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8107  006076  0100               	movlb	0	; () banked
  8108  006078  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8109  00607A  A0D8               	btfss	status,0,c
  8110  00607C  D00A               	goto	l1887
  8111                           
  8112                           ; BSR set to: 0
  8113  00607E  0100               	movlb	0	; () banked
  8114  006080  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8115  006082  0100               	movlb	0	; () banked
  8116  006084  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  8117  006086  0100               	movlb	0	; () banked
  8118  006088  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8119  00608A  0100               	movlb	0	; () banked
  8120  00608C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8121                           
  8122                           ; BSR set to: 0
  8123  00608E  0100               	movlb	0	; () banked
  8124  006090  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  8125  006092                     l1887:
  8126  006092  FFFF               	dw	65535	; assembler added errata NOP
  8127                           
  8128                           ; BSR set to: 0
  8129                           
  8130                           ; BSR set to: 0
  8131  006094  0100               	movlb	0	; () banked
  8132  006096  90D8               	bcf	status,0,c
  8133  006098  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8134  00609A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  8135                           
  8136                           ; BSR set to: 0
  8137  00609C  0100               	movlb	0	; () banked
  8138  00609E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  8139  0060A0  D7DF               	goto	u7950
  8140  0060A2                     l1888:
  8141  0060A2  FFFF               	dw	65535	; assembler added errata NOP
  8142                           
  8143                           ; BSR set to: 0
  8144                           
  8145                           ; BSR set to: 0
  8146  0060A4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  8147  0060A8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8148                           
  8149                           ; BSR set to: 0
  8150  0060AC  0012               	return		;funcret
  8151  0060AE  FFFF               	dw	65535	; errata NOP
  8152  0060B0                     __end_of___lwdiv:
  8153                           	opt stack 0
  8154                           tblptru	equ	0xFF8
  8155                           tblptrh	equ	0xFF7
  8156                           tblptrl	equ	0xFF6
  8157                           tablat	equ	0xFF5
  8158                           intcon	equ	0xFF2
  8159                           postinc0	equ	0xFEE
  8160                           wreg	equ	0xFE8
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           plusw2	equ	0xFDB
  8165                           fsr2h	equ	0xFDA
  8166                           fsr2l	equ	0xFD9
  8167                           status	equ	0xFD8
  8168                           
  8169 ;; *************** function _isleap *****************
  8170 ;; Defined at:
  8171 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;  yr              2   29[COMRAM] unsigned int 
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  2   29[COMRAM] int 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2, status,0, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8185 ;;      Params:         2       0       0       0       0       0       0
  8186 ;;      Locals:         1       0       0       0       0       0       0
  8187 ;;      Temps:          2       0       0       0       0       0       0
  8188 ;;      Totals:         5       0       0       0       0       0       0
  8189 ;;Total ram usage:        5 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    2
  8192 ;; This function calls:
  8193 ;;		___lwmod
  8194 ;; This function is called by:
  8195 ;;		_ymd_to_scalar
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           	psect	text28
  8200  005B12                     __ptext28:
  8201                           	opt stack 0
  8202  005B12                     _isleap:
  8203                           	opt stack 0
  8204  005B12  FFFF               	dw	65535	; assembler added errata NOP
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;incstack = 0
  8208  005B14  0E01               	movlw	1
  8209  005B16  6E22               	movwf	_isleap$2946,c
  8210  005B18  C01E  F019         	movff	isleap@yr,___lwmod@dividend
  8211  005B1C  C01F  F01A         	movff	isleap@yr+1,___lwmod@dividend+1
  8212  005B20  0E01               	movlw	1
  8213  005B22  6E1C               	movwf	___lwmod@divisor+1,c
  8214  005B24  0E90               	movlw	144
  8215  005B26  6E1B               	movwf	___lwmod@divisor,c
  8216  005B28  ECFB  F02B         	call	___lwmod	;wreg free
  8217  005B2C  5019               	movf	?___lwmod,w,c
  8218  005B2E  101A               	iorwf	?___lwmod+1,w,c
  8219  005B30  B4D8               	btfsc	status,2,c
  8220  005B32  D01B               	goto	l1908
  8221  005B34  0E03               	movlw	3
  8222  005B36  141E               	andwf	isleap@yr,w,c
  8223  005B38  6E20               	movwf	??_isleap& (0+255),c
  8224  005B3A  0E00               	movlw	0
  8225  005B3C  141F               	andwf	isleap@yr+1,w,c
  8226  005B3E  6E21               	movwf	(??_isleap+1)& (0+255),c
  8227  005B40  5020               	movf	??_isleap,w,c
  8228  005B42  1021               	iorwf	??_isleap+1,w,c
  8229  005B44  A4D8               	btfss	status,2,c
  8230  005B46  D00E               	goto	u8520
  8231  005B48  C01E  F019         	movff	isleap@yr,___lwmod@dividend
  8232  005B4C  C01F  F01A         	movff	isleap@yr+1,___lwmod@dividend+1
  8233  005B50  0E00               	movlw	0
  8234  005B52  6E1C               	movwf	___lwmod@divisor+1,c
  8235  005B54  0E64               	movlw	100
  8236  005B56  6E1B               	movwf	___lwmod@divisor,c
  8237  005B58  ECFB  F02B         	call	___lwmod	;wreg free
  8238  005B5C  5019               	movf	?___lwmod,w,c
  8239  005B5E  101A               	iorwf	?___lwmod+1,w,c
  8240  005B60  A4D8               	btfss	status,2,c
  8241  005B62  D003               	goto	l1908
  8242  005B64                     u8520:
  8243  005B64  FFFF               	dw	65535	; assembler added errata NOP
  8244  005B66  0E00               	movlw	0
  8245  005B68  6E22               	movwf	_isleap$2946,c
  8246  005B6A                     l1908:
  8247  005B6A  FFFF               	dw	65535	; assembler added errata NOP
  8248  005B6C  C022  F01E         	movff	_isleap$2946,?_isleap
  8249  005B70  6A1F               	clrf	?_isleap+1,c
  8250  005B72  0012               	return		;funcret
  8251  005B74  FFFF               	dw	65535	; errata NOP
  8252  005B76                     __end_of_isleap:
  8253                           	opt stack 0
  8254                           tblptru	equ	0xFF8
  8255                           tblptrh	equ	0xFF7
  8256                           tblptrl	equ	0xFF6
  8257                           tablat	equ	0xFF5
  8258                           intcon	equ	0xFF2
  8259                           postinc0	equ	0xFEE
  8260                           wreg	equ	0xFE8
  8261                           indf2	equ	0xFDF
  8262                           postinc2	equ	0xFDE
  8263                           postdec2	equ	0xFDD
  8264                           plusw2	equ	0xFDB
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _get_time *****************
  8270 ;; Defined at:
  8271 ;;		line 12 in file "DS1307.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  Time_Data       2   32[COMRAM] PTR unsigned char 
  8274 ;;		 -> time@time(3), 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;                  1    wreg      unsigned char 
  8279 ;; Registers used:
  8280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8286 ;;      Params:         2       0       0       0       0       0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0
  8289 ;;      Totals:         2       0       0       0       0       0       0
  8290 ;;Total ram usage:        2 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    3
  8293 ;; This function calls:
  8294 ;;		_ReadStr_I2C
  8295 ;; This function is called by:
  8296 ;;		_time
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           	psect	text29
  8301  00507A                     __ptext29:
  8302                           	opt stack 0
  8303  00507A                     _get_time:
  8304                           	opt stack 0
  8305  00507A  FFFF               	dw	65535	; assembler added errata NOP
  8306                           
  8307                           ;DS1307.c: 14: ReadStr_I2C(0xd0,0x00,Time_Data,3);
  8308                           
  8309                           ;incstack = 0
  8310  00507C  0E00               	movlw	0
  8311  00507E  6E1B               	movwf	ReadStr_I2C@Reg_Addr,c
  8312  005080  C021  F01C         	movff	get_time@Time_Data,ReadStr_I2C@Str
  8313  005084  C022  F01D         	movff	get_time@Time_Data+1,ReadStr_I2C@Str+1
  8314  005088  0E03               	movlw	3
  8315  00508A  6E1E               	movwf	ReadStr_I2C@Str_Size,c
  8316  00508C  0ED0               	movlw	208
  8317  00508E  EC4F  F037         	call	_ReadStr_I2C
  8318                           
  8319                           ;DS1307.c: 15: return(0);
  8320                           ;	Return value of _get_time is never used
  8321  005092  0012               	return		;funcret
  8322  005094  FFFF               	dw	65535	; errata NOP
  8323  005096                     __end_of_get_time:
  8324                           	opt stack 0
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           intcon	equ	0xFF2
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           plusw2	equ	0xFDB
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _get_date *****************
  8341 ;; Defined at:
  8342 ;;		line 19 in file "DS1307.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  Date_Data       2   32[COMRAM] PTR unsigned char 
  8345 ;;		 -> time@date(4), 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      unsigned char 
  8350 ;; Registers used:
  8351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8357 ;;      Params:         2       0       0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0
  8359 ;;      Temps:          0       0       0       0       0       0       0
  8360 ;;      Totals:         2       0       0       0       0       0       0
  8361 ;;Total ram usage:        2 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    3
  8364 ;; This function calls:
  8365 ;;		_ReadStr_I2C
  8366 ;; This function is called by:
  8367 ;;		_time
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text30
  8372  00505E                     __ptext30:
  8373                           	opt stack 0
  8374  00505E                     _get_date:
  8375                           	opt stack 0
  8376  00505E  FFFF               	dw	65535	; assembler added errata NOP
  8377                           
  8378                           ;DS1307.c: 21: ReadStr_I2C(0xd0,0x03,Date_Data,4);
  8379                           
  8380                           ;incstack = 0
  8381  005060  0E03               	movlw	3
  8382  005062  6E1B               	movwf	ReadStr_I2C@Reg_Addr,c
  8383  005064  C021  F01C         	movff	get_date@Date_Data,ReadStr_I2C@Str
  8384  005068  C022  F01D         	movff	get_date@Date_Data+1,ReadStr_I2C@Str+1
  8385  00506C  0E04               	movlw	4
  8386  00506E  6E1E               	movwf	ReadStr_I2C@Str_Size,c
  8387  005070  0ED0               	movlw	208
  8388  005072  EC4F  F037         	call	_ReadStr_I2C
  8389                           
  8390                           ;DS1307.c: 22: return(0);
  8391                           ;	Return value of _get_date is never used
  8392  005076  0012               	return		;funcret
  8393  005078  FFFF               	dw	65535	; errata NOP
  8394  00507A                     __end_of_get_date:
  8395                           	opt stack 0
  8396                           tblptru	equ	0xFF8
  8397                           tblptrh	equ	0xFF7
  8398                           tblptrl	equ	0xFF6
  8399                           tablat	equ	0xFF5
  8400                           intcon	equ	0xFF2
  8401                           postinc0	equ	0xFEE
  8402                           wreg	equ	0xFE8
  8403                           indf2	equ	0xFDF
  8404                           postinc2	equ	0xFDE
  8405                           postdec2	equ	0xFDD
  8406                           plusw2	equ	0xFDB
  8407                           fsr2h	equ	0xFDA
  8408                           fsr2l	equ	0xFD9
  8409                           status	equ	0xFD8
  8410                           
  8411 ;; *************** function _ReadStr_I2C *****************
  8412 ;; Defined at:
  8413 ;;		line 248 in file "i2c_FRM.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;  Mod_Addr        1    wreg     unsigned char 
  8416 ;;  Reg_Addr        1   26[COMRAM] unsigned char 
  8417 ;;  Str             2   27[COMRAM] PTR unsigned char 
  8418 ;;		 -> time@time(3), time@date(4), 
  8419 ;;  Str_Size        1   29[COMRAM] unsigned char 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  Mod_Addr        1   30[COMRAM] unsigned char 
  8422 ;;  stat            1   31[COMRAM] unsigned char 
  8423 ;; Return value:  Size  Location     Type
  8424 ;;                  1    wreg      unsigned char 
  8425 ;; Registers used:
  8426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8432 ;;      Params:         4       0       0       0       0       0       0
  8433 ;;      Locals:         2       0       0       0       0       0       0
  8434 ;;      Temps:          0       0       0       0       0       0       0
  8435 ;;      Totals:         6       0       0       0       0       0       0
  8436 ;;Total ram usage:        6 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    2
  8439 ;; This function calls:
  8440 ;;		_AckI2C
  8441 ;;		_CloseI2C
  8442 ;;		_IdleI2C
  8443 ;;		_Not_AckI2C
  8444 ;;		_OpenI2C
  8445 ;;		_ReadI2C
  8446 ;;		_RestartI2C
  8447 ;;		_StartI2C
  8448 ;;		_StopI2C
  8449 ;;		_Wait_AckI2C
  8450 ;;		_WriteI2C
  8451 ;; This function is called by:
  8452 ;;		_get_time
  8453 ;;		_get_date
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text31
  8458  006E9E                     __ptext31:
  8459                           	opt stack 0
  8460  006E9E                     _ReadStr_I2C:
  8461                           	opt stack 0
  8462  006E9E  FFFF               	dw	65535	; assembler added errata NOP
  8463                           
  8464                           ;incstack = 0
  8465                           ;ReadStr_I2C@Mod_Addr stored from wreg
  8466  006EA0  6E1F               	movwf	ReadStr_I2C@Mod_Addr,c
  8467                           
  8468                           ;i2c_FRM.c: 250: char stat=0;
  8469  006EA2  0E00               	movlw	0
  8470  006EA4  6E20               	movwf	ReadStr_I2C@stat,c
  8471                           
  8472                           ;i2c_FRM.c: 253: OpenI2C(8, 0xC0);
  8473  006EA6  0EC0               	movlw	192
  8474  006EA8  6E19               	movwf	OpenI2C@slew,c
  8475  006EAA  0E08               	movlw	8
  8476  006EAC  EC67  F028         	call	_OpenI2C
  8477                           
  8478                           ;i2c_FRM.c: 254: SSPADD=0x18;
  8479  006EB0  0E18               	movlw	24
  8480  006EB2  6EC8               	movwf	4040,c	;volatile
  8481                           
  8482                           ;i2c_FRM.c: 255: IdleI2C();
  8483  006EB4  EC78  F028         	call	_IdleI2C	;wreg free
  8484                           
  8485                           ;i2c_FRM.c: 258: StartI2C();
  8486  006EB8  ECD1  F027         	call	_StartI2C	;wreg free
  8487                           
  8488                           ;i2c_FRM.c: 259: stat=WriteI2C(Mod_Addr);
  8489  006EBC  501F               	movf	ReadStr_I2C@Mod_Addr,w,c
  8490  006EBE  EC3A  F029         	call	_WriteI2C
  8491  006EC2  6E20               	movwf	ReadStr_I2C@stat,c
  8492                           
  8493                           ;i2c_FRM.c: 260: if(stat!=0){
  8494  006EC4  5020               	movf	ReadStr_I2C@stat,w,c
  8495  006EC6  B4D8               	btfsc	status,2,c
  8496  006EC8  D005               	goto	l591
  8497                           
  8498                           ;i2c_FRM.c: 261: StopI2C();
  8499  006ECA  ECDE  F027         	call	_StopI2C	;wreg free
  8500                           
  8501                           ;i2c_FRM.c: 262: CloseI2C();
  8502  006ECE  EC29  F026         	call	_CloseI2C	;wreg free
  8503                           
  8504                           ;i2c_FRM.c: 263: return(0xff);
  8505                           ;	Return value of _ReadStr_I2C is never used
  8506  006ED2  D05D               	goto	l9031
  8507  006ED4                     l591:
  8508  006ED4  FFFF               	dw	65535	; assembler added errata NOP
  8509                           
  8510                           ;i2c_FRM.c: 264: }
  8511                           ;i2c_FRM.c: 266: stat=Wait_AckI2C();
  8512  006ED6  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  8513  006EDA  6E20               	movwf	ReadStr_I2C@stat,c
  8514                           
  8515                           ;i2c_FRM.c: 267: if(stat!=0){
  8516  006EDC  5020               	movf	ReadStr_I2C@stat,w,c
  8517  006EDE  B4D8               	btfsc	status,2,c
  8518  006EE0  D005               	goto	l593
  8519                           
  8520                           ;i2c_FRM.c: 268: StopI2C();
  8521  006EE2  ECDE  F027         	call	_StopI2C	;wreg free
  8522                           
  8523                           ;i2c_FRM.c: 269: CloseI2C();
  8524  006EE6  EC29  F026         	call	_CloseI2C	;wreg free
  8525                           
  8526                           ;i2c_FRM.c: 270: return(0xff);
  8527                           ;	Return value of _ReadStr_I2C is never used
  8528  006EEA  D051               	goto	l9031
  8529  006EEC                     l593:
  8530  006EEC  FFFF               	dw	65535	; assembler added errata NOP
  8531                           
  8532                           ;i2c_FRM.c: 271: }
  8533                           ;i2c_FRM.c: 274: stat=WriteI2C(Reg_Addr);
  8534  006EEE  501B               	movf	ReadStr_I2C@Reg_Addr,w,c
  8535  006EF0  EC3A  F029         	call	_WriteI2C
  8536  006EF4  6E20               	movwf	ReadStr_I2C@stat,c
  8537                           
  8538                           ;i2c_FRM.c: 275: if(stat!=0){
  8539  006EF6  5020               	movf	ReadStr_I2C@stat,w,c
  8540  006EF8  B4D8               	btfsc	status,2,c
  8541  006EFA  D005               	goto	l594
  8542                           
  8543                           ;i2c_FRM.c: 276: StopI2C();
  8544  006EFC  ECDE  F027         	call	_StopI2C	;wreg free
  8545                           
  8546                           ;i2c_FRM.c: 277: CloseI2C();
  8547  006F00  EC29  F026         	call	_CloseI2C	;wreg free
  8548                           
  8549                           ;i2c_FRM.c: 278: return(0xff);
  8550                           ;	Return value of _ReadStr_I2C is never used
  8551  006F04  D044               	goto	l9031
  8552  006F06                     l594:
  8553  006F06  FFFF               	dw	65535	; assembler added errata NOP
  8554                           
  8555                           ;i2c_FRM.c: 279: }
  8556                           ;i2c_FRM.c: 280: stat=Wait_AckI2C();
  8557  006F08  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  8558  006F0C  6E20               	movwf	ReadStr_I2C@stat,c
  8559                           
  8560                           ;i2c_FRM.c: 281: if(stat!=0){
  8561  006F0E  5020               	movf	ReadStr_I2C@stat,w,c
  8562  006F10  B4D8               	btfsc	status,2,c
  8563  006F12  D005               	goto	l595
  8564                           
  8565                           ;i2c_FRM.c: 282: StopI2C();
  8566  006F14  ECDE  F027         	call	_StopI2C	;wreg free
  8567                           
  8568                           ;i2c_FRM.c: 283: CloseI2C();
  8569  006F18  EC29  F026         	call	_CloseI2C	;wreg free
  8570                           
  8571                           ;i2c_FRM.c: 284: return(0xff);
  8572                           ;	Return value of _ReadStr_I2C is never used
  8573  006F1C  D038               	goto	l9031
  8574  006F1E                     l595:
  8575  006F1E  FFFF               	dw	65535	; assembler added errata NOP
  8576                           
  8577                           ;i2c_FRM.c: 285: }
  8578                           ;i2c_FRM.c: 287: RestartI2C();
  8579  006F20  ECF8  F027         	call	_RestartI2C	;wreg free
  8580                           
  8581                           ;i2c_FRM.c: 290: stat=WriteI2C(Mod_Addr|0x01);
  8582  006F24  501F               	movf	ReadStr_I2C@Mod_Addr,w,c
  8583  006F26  0901               	iorlw	1
  8584  006F28  EC3A  F029         	call	_WriteI2C
  8585  006F2C  6E20               	movwf	ReadStr_I2C@stat,c
  8586                           
  8587                           ;i2c_FRM.c: 291: if(stat!=0){
  8588  006F2E  5020               	movf	ReadStr_I2C@stat,w,c
  8589  006F30  B4D8               	btfsc	status,2,c
  8590  006F32  D005               	goto	l596
  8591                           
  8592                           ;i2c_FRM.c: 292: StopI2C();
  8593  006F34  ECDE  F027         	call	_StopI2C	;wreg free
  8594                           
  8595                           ;i2c_FRM.c: 293: CloseI2C();
  8596  006F38  EC29  F026         	call	_CloseI2C	;wreg free
  8597                           
  8598                           ;i2c_FRM.c: 294: return(0xff);
  8599                           ;	Return value of _ReadStr_I2C is never used
  8600  006F3C  D028               	goto	l9031
  8601  006F3E                     l596:
  8602  006F3E  FFFF               	dw	65535	; assembler added errata NOP
  8603                           
  8604                           ;i2c_FRM.c: 295: }
  8605                           ;i2c_FRM.c: 296: stat=Wait_AckI2C();
  8606  006F40  ECBD  F027         	call	_Wait_AckI2C	;wreg free
  8607  006F44  6E20               	movwf	ReadStr_I2C@stat,c
  8608                           
  8609                           ;i2c_FRM.c: 297: if(stat!=0){
  8610  006F46  5020               	movf	ReadStr_I2C@stat,w,c
  8611  006F48  B4D8               	btfsc	status,2,c
  8612  006F4A  D018               	goto	l601
  8613                           
  8614                           ;i2c_FRM.c: 298: StopI2C();
  8615  006F4C  ECDE  F027         	call	_StopI2C	;wreg free
  8616                           
  8617                           ;i2c_FRM.c: 299: CloseI2C();
  8618  006F50  EC29  F026         	call	_CloseI2C	;wreg free
  8619                           
  8620                           ;i2c_FRM.c: 300: return(0xff);
  8621                           ;	Return value of _ReadStr_I2C is never used
  8622  006F54  D01C               	goto	l9031
  8623  006F56  FFFF               	dw	65535	; assembler added errata NOP
  8624                           
  8625                           ;i2c_FRM.c: 304: *Str++=ReadI2C();
  8626  006F58  EC21  F028         	call	_ReadI2C	;wreg free
  8627  006F5C  C01C  FFD9         	movff	ReadStr_I2C@Str,fsr2l
  8628  006F60  C01D  FFDA         	movff	ReadStr_I2C@Str+1,fsr2h
  8629  006F64  6EDF               	movwf	indf2,c
  8630  006F66  4A1C               	infsnz	ReadStr_I2C@Str,f,c
  8631  006F68  2A1D               	incf	ReadStr_I2C@Str+1,f,c
  8632                           
  8633                           ;i2c_FRM.c: 305: if(Str_Size!=0)
  8634  006F6A  501E               	movf	ReadStr_I2C@Str_Size,w,c
  8635  006F6C  B4D8               	btfsc	status,2,c
  8636  006F6E  D003               	goto	l600
  8637                           
  8638                           ;i2c_FRM.c: 306: AckI2C();
  8639  006F70  EC05  F028         	call	_AckI2C	;wreg free
  8640  006F74  D003               	goto	l601
  8641  006F76                     l600:
  8642  006F76  FFFF               	dw	65535	; assembler added errata NOP
  8643                           
  8644                           ;i2c_FRM.c: 307: else
  8645                           ;i2c_FRM.c: 308: Not_AckI2C();
  8646  006F78  EC13  F028         	call	_Not_AckI2C	;wreg free
  8647  006F7C                     l601:
  8648  006F7C  FFFF               	dw	65535	; assembler added errata NOP
  8649  006F7E  061E               	decf	ReadStr_I2C@Str_Size,f,c
  8650  006F80  281E               	incf	ReadStr_I2C@Str_Size,w,c
  8651  006F82  A4D8               	btfss	status,2,c
  8652  006F84  D7E8               	goto	l599
  8653                           
  8654                           ;i2c_FRM.c: 309: }
  8655                           ;i2c_FRM.c: 311: StopI2C();
  8656  006F86  ECDE  F027         	call	_StopI2C	;wreg free
  8657                           
  8658                           ;i2c_FRM.c: 312: CloseI2C();
  8659  006F8A  EC29  F026         	call	_CloseI2C	;wreg free
  8660  006F8E                     l9031:
  8661  006F8E  FFFF               	dw	65535	; assembler added errata NOP
  8662                           
  8663                           ;i2c_FRM.c: 313: return (0x00);
  8664                           ;	Return value of _ReadStr_I2C is never used
  8665  006F90  0012               	return		;funcret
  8666  006F92  FFFF               	dw	65535	; errata NOP
  8667  006F94                     __end_of_ReadStr_I2C:
  8668                           	opt stack 0
  8669                           tblptru	equ	0xFF8
  8670                           tblptrh	equ	0xFF7
  8671                           tblptrl	equ	0xFF6
  8672                           tablat	equ	0xFF5
  8673                           intcon	equ	0xFF2
  8674                           postinc0	equ	0xFEE
  8675                           wreg	equ	0xFE8
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           plusw2	equ	0xFDB
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function _RestartI2C *****************
  8685 ;; Defined at:
  8686 ;;		line 103 in file "i2c_FRM.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		None
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8700 ;;      Params:         0       0       0       0       0       0       0
  8701 ;;      Locals:         1       0       0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0
  8703 ;;      Totals:         1       0       0       0       0       0       0
  8704 ;;Total ram usage:        1 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    1
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_ReadStr_I2C
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714                           	psect	text32
  8715  004FF0                     __ptext32:
  8716                           	opt stack 0
  8717  004FF0                     _RestartI2C:
  8718                           	opt stack 0
  8719  004FF0  FFFF               	dw	65535	; assembler added errata NOP
  8720                           
  8721                           ;i2c_FRM.c: 104: char IE_stat;
  8722                           ;i2c_FRM.c: 105: IE_stat = INTCON;
  8723                           
  8724                           ;incstack = 0
  8725  004FF2  CFF2 F019          	movff	intcon,RestartI2C@IE_stat	;volatile
  8726                           
  8727                           ;i2c_FRM.c: 106: INTCONbits.GIE = 0;
  8728  004FF6  9EF2               	bcf	intcon,7,c	;volatile
  8729                           
  8730                           ;i2c_FRM.c: 107: SSPCON2bits.RSEN = 1;
  8731  004FF8  82C5               	bsf	4037,1,c	;volatile
  8732                           
  8733                           ;i2c_FRM.c: 108: PIR1bits.SSPIF = 0;
  8734  004FFA  969E               	bcf	3998,3,c	;volatile
  8735  004FFC  FFFF               	dw	65535	; assembler added errata NOP
  8736  004FFE  A69E               	btfss	3998,3,c	;volatile
  8737  005000  D7FD               	goto	l553
  8738                           
  8739                           ;i2c_FRM.c: 110: INTCON = IE_stat;
  8740  005002  C019  FFF2         	movff	RestartI2C@IE_stat,intcon	;volatile
  8741  005006  0012               	return		;funcret
  8742  005008  FFFF               	dw	65535	; errata NOP
  8743  00500A                     __end_of_RestartI2C:
  8744                           	opt stack 0
  8745                           tblptru	equ	0xFF8
  8746                           tblptrh	equ	0xFF7
  8747                           tblptrl	equ	0xFF6
  8748                           tablat	equ	0xFF5
  8749                           intcon	equ	0xFF2
  8750                           postinc0	equ	0xFEE
  8751                           wreg	equ	0xFE8
  8752                           indf2	equ	0xFDF
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           plusw2	equ	0xFDB
  8756                           fsr2h	equ	0xFDA
  8757                           fsr2l	equ	0xFD9
  8758                           status	equ	0xFD8
  8759                           
  8760 ;; *************** function _ReadI2C *****************
  8761 ;; Defined at:
  8762 ;;		line 119 in file "i2c_FRM.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      unsigned char 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8776 ;;      Params:         0       0       0       0       0       0       0
  8777 ;;      Locals:         1       0       0       0       0       0       0
  8778 ;;      Temps:          0       0       0       0       0       0       0
  8779 ;;      Totals:         1       0       0       0       0       0       0
  8780 ;;Total ram usage:        1 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    1
  8783 ;; This function calls:
  8784 ;;		Nothing
  8785 ;; This function is called by:
  8786 ;;		_ReadStr_I2C
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           	psect	text33
  8791  005042                     __ptext33:
  8792                           	opt stack 0
  8793  005042                     _ReadI2C:
  8794                           	opt stack 0
  8795  005042  FFFF               	dw	65535	; assembler added errata NOP
  8796                           
  8797                           ;i2c_FRM.c: 120: char IE_stat;
  8798                           ;i2c_FRM.c: 122: IE_stat = INTCON;
  8799                           
  8800                           ;incstack = 0
  8801  005044  CFF2 F019          	movff	intcon,ReadI2C@IE_stat	;volatile
  8802                           
  8803                           ;i2c_FRM.c: 123: INTCONbits.GIE = 0;
  8804  005048  9EF2               	bcf	intcon,7,c	;volatile
  8805                           
  8806                           ;i2c_FRM.c: 124: SSPCON2bits.RCEN = 1;
  8807  00504A  86C5               	bsf	4037,3,c	;volatile
  8808                           
  8809                           ;i2c_FRM.c: 125: PIR1bits.SSPIF = 0;
  8810  00504C  969E               	bcf	3998,3,c	;volatile
  8811  00504E  FFFF               	dw	65535	; assembler added errata NOP
  8812  005050  A69E               	btfss	3998,3,c	;volatile
  8813  005052  D7FD               	goto	l559
  8814                           
  8815                           ;i2c_FRM.c: 127: INTCON = IE_stat;
  8816  005054  C019  FFF2         	movff	ReadI2C@IE_stat,intcon	;volatile
  8817                           
  8818                           ;i2c_FRM.c: 128: return ( SSPBUF);
  8819  005058  50C9               	movf	4041,w,c	;volatile
  8820  00505A  0012               	return		;funcret
  8821  00505C  FFFF               	dw	65535	; errata NOP
  8822  00505E                     __end_of_ReadI2C:
  8823                           	opt stack 0
  8824                           tblptru	equ	0xFF8
  8825                           tblptrh	equ	0xFF7
  8826                           tblptrl	equ	0xFF6
  8827                           tablat	equ	0xFF5
  8828                           intcon	equ	0xFF2
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           indf2	equ	0xFDF
  8832                           postinc2	equ	0xFDE
  8833                           postdec2	equ	0xFDD
  8834                           plusw2	equ	0xFDB
  8835                           fsr2h	equ	0xFDA
  8836                           fsr2l	equ	0xFD9
  8837                           status	equ	0xFD8
  8838                           
  8839 ;; *************** function _Not_AckI2C *****************
  8840 ;; Defined at:
  8841 ;;		line 192 in file "i2c_FRM.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;		None
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      void 
  8848 ;; Registers used:
  8849 ;;		None
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8855 ;;      Params:         0       0       0       0       0       0       0
  8856 ;;      Locals:         1       0       0       0       0       0       0
  8857 ;;      Temps:          0       0       0       0       0       0       0
  8858 ;;      Totals:         1       0       0       0       0       0       0
  8859 ;;Total ram usage:        1 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    1
  8862 ;; This function calls:
  8863 ;;		Nothing
  8864 ;; This function is called by:
  8865 ;;		_ReadStr_I2C
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           	psect	text34
  8870  005026                     __ptext34:
  8871                           	opt stack 0
  8872  005026                     _Not_AckI2C:
  8873                           	opt stack 0
  8874  005026  FFFF               	dw	65535	; assembler added errata NOP
  8875                           
  8876                           ;i2c_FRM.c: 193: char IE_stat;
  8877                           ;i2c_FRM.c: 195: IE_stat = INTCON;
  8878                           
  8879                           ;incstack = 0
  8880  005028  CFF2 F019          	movff	intcon,Not_AckI2C@IE_stat	;volatile
  8881                           
  8882                           ;i2c_FRM.c: 196: INTCONbits.GIE = 0;
  8883  00502C  9EF2               	bcf	intcon,7,c	;volatile
  8884                           
  8885                           ;i2c_FRM.c: 197: SSPCON2bits.ACKDT = 1;
  8886  00502E  8AC5               	bsf	4037,5,c	;volatile
  8887                           
  8888                           ;i2c_FRM.c: 198: SSPCON2bits.ACKEN = 1;
  8889  005030  88C5               	bsf	4037,4,c	;volatile
  8890                           
  8891                           ;i2c_FRM.c: 199: PIR1bits.SSPIF = 0;
  8892  005032  969E               	bcf	3998,3,c	;volatile
  8893  005034  FFFF               	dw	65535	; assembler added errata NOP
  8894  005036  A69E               	btfss	3998,3,c	;volatile
  8895  005038  D7FD               	goto	l580
  8896                           
  8897                           ;i2c_FRM.c: 201: INTCON = IE_stat;
  8898  00503A  C019  FFF2         	movff	Not_AckI2C@IE_stat,intcon	;volatile
  8899  00503E  0012               	return		;funcret
  8900  005040  FFFF               	dw	65535	; errata NOP
  8901  005042                     __end_of_Not_AckI2C:
  8902                           	opt stack 0
  8903                           tblptru	equ	0xFF8
  8904                           tblptrh	equ	0xFF7
  8905                           tblptrl	equ	0xFF6
  8906                           tablat	equ	0xFF5
  8907                           intcon	equ	0xFF2
  8908                           postinc0	equ	0xFEE
  8909                           wreg	equ	0xFE8
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           plusw2	equ	0xFDB
  8914                           fsr2h	equ	0xFDA
  8915                           fsr2l	equ	0xFD9
  8916                           status	equ	0xFD8
  8917                           
  8918 ;; *************** function _AckI2C *****************
  8919 ;; Defined at:
  8920 ;;		line 139 in file "i2c_FRM.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;		None
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      void 
  8927 ;; Registers used:
  8928 ;;		None
  8929 ;; Tracked objects:
  8930 ;;		On entry : 0/0
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8934 ;;      Params:         0       0       0       0       0       0       0
  8935 ;;      Locals:         1       0       0       0       0       0       0
  8936 ;;      Temps:          0       0       0       0       0       0       0
  8937 ;;      Totals:         1       0       0       0       0       0       0
  8938 ;;Total ram usage:        1 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    1
  8941 ;; This function calls:
  8942 ;;		Nothing
  8943 ;; This function is called by:
  8944 ;;		_ReadStr_I2C
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           	psect	text35
  8949  00500A                     __ptext35:
  8950                           	opt stack 0
  8951  00500A                     _AckI2C:
  8952                           	opt stack 0
  8953  00500A  FFFF               	dw	65535	; assembler added errata NOP
  8954                           
  8955                           ;i2c_FRM.c: 140: char IE_stat;
  8956                           ;i2c_FRM.c: 142: IE_stat = INTCON;
  8957                           
  8958                           ;incstack = 0
  8959  00500C  CFF2 F019          	movff	intcon,AckI2C@IE_stat	;volatile
  8960                           
  8961                           ;i2c_FRM.c: 143: INTCONbits.GIE = 0;
  8962  005010  9EF2               	bcf	intcon,7,c	;volatile
  8963                           
  8964                           ;i2c_FRM.c: 144: SSPCON2bits.ACKDT = 0;
  8965  005012  9AC5               	bcf	4037,5,c	;volatile
  8966                           
  8967                           ;i2c_FRM.c: 145: SSPCON2bits.ACKEN = 1;
  8968  005014  88C5               	bsf	4037,4,c	;volatile
  8969                           
  8970                           ;i2c_FRM.c: 146: PIR1bits.SSPIF = 0;
  8971  005016  969E               	bcf	3998,3,c	;volatile
  8972  005018  FFFF               	dw	65535	; assembler added errata NOP
  8973  00501A  A69E               	btfss	3998,3,c	;volatile
  8974  00501C  D7FD               	goto	l565
  8975                           
  8976                           ;i2c_FRM.c: 148: INTCON = IE_stat;
  8977  00501E  C019  FFF2         	movff	AckI2C@IE_stat,intcon	;volatile
  8978  005022  0012               	return		;funcret
  8979  005024  FFFF               	dw	65535	; errata NOP
  8980  005026                     __end_of_AckI2C:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           intcon	equ	0xFF2
  8987                           postinc0	equ	0xFEE
  8988                           wreg	equ	0xFE8
  8989                           indf2	equ	0xFDF
  8990                           postinc2	equ	0xFDE
  8991                           postdec2	equ	0xFDD
  8992                           plusw2	equ	0xFDB
  8993                           fsr2h	equ	0xFDA
  8994                           fsr2l	equ	0xFD9
  8995                           status	equ	0xFD8
  8996                           
  8997 ;; *************** function _bcdTOint *****************
  8998 ;; Defined at:
  8999 ;;		line 60 in file "DS1307.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;  bcdByte         2   44[COMRAM] int 
  9002 ;; Auto vars:     Size  Location     Type
  9003 ;;		None
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  2   44[COMRAM] int 
  9006 ;; Registers used:
  9007 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9013 ;;      Params:         2       0       0       0       0       0       0
  9014 ;;      Locals:         0       0       0       0       0       0       0
  9015 ;;      Temps:          0       5       0       0       0       0       0
  9016 ;;      Totals:         2       5       0       0       0       0       0
  9017 ;;Total ram usage:        7 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    2
  9020 ;; This function calls:
  9021 ;;		___wmul
  9022 ;; This function is called by:
  9023 ;;		_time
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           	psect	text36
  9028  005942                     __ptext36:
  9029                           	opt stack 0
  9030  005942                     _bcdTOint:
  9031                           	opt stack 0
  9032  005942  FFFF               	dw	65535	; assembler added errata NOP
  9033                           
  9034                           ;DS1307.c: 62: return (((bcdByte & 0xF0) >> 4) * 10) + (bcdByte & 0x0F);
  9035                           
  9036                           ;incstack = 0
  9037  005944  0E0F               	movlw	15
  9038  005946  142D               	andwf	bcdTOint@bcdByte,w,c
  9039  005948  0100               	movlb	0	; () banked
  9040  00594A  6F60               	movwf	??_bcdTOint& (0+255),b
  9041  00594C  0E00               	movlw	0
  9042  00594E  142E               	andwf	bcdTOint@bcdByte+1,w,c
  9043  005950  0100               	movlb	0	; () banked
  9044  005952  6F61               	movwf	(??_bcdTOint+1)& (0+255),b
  9045  005954  C02D  F062         	movff	bcdTOint@bcdByte,??_bcdTOint+2
  9046  005958  C02E  F063         	movff	bcdTOint@bcdByte+1,??_bcdTOint+3
  9047  00595C  0E04               	movlw	4
  9048  00595E  0100               	movlb	0	; () banked
  9049  005960  6F64               	movwf	(??_bcdTOint+4)& (0+255),b
  9050  005962                     u9535:
  9051  005962  FFFF               	dw	65535	; assembler added errata NOP
  9052  005964  0100               	movlb	0	; () banked
  9053  005966  3563               	rlcf	(??_bcdTOint+3)& (0+255),w,b
  9054  005968  3363               	rrcf	(??_bcdTOint+3)& (0+255),f,b
  9055  00596A  3362               	rrcf	(??_bcdTOint+2)& (0+255),f,b
  9056  00596C  0100               	movlb	0	; () banked
  9057  00596E  2F64               	decfsz	(??_bcdTOint+4)& (0+255),f,b
  9058  005970  D7F8               	goto	u9535
  9059  005972  0E0F               	movlw	15
  9060  005974  0100               	movlb	0	; () banked
  9061  005976  1562               	andwf	(??_bcdTOint+2)& (0+255),w,b
  9062  005978  6E27               	movwf	___wmul@multiplier,c
  9063  00597A  6A28               	clrf	___wmul@multiplier+1,c
  9064  00597C  0E00               	movlw	0
  9065  00597E  6E2A               	movwf	___wmul@multiplicand+1,c
  9066  005980  0E0A               	movlw	10
  9067  005982  6E29               	movwf	___wmul@multiplicand,c
  9068  005984  EC10  F029         	call	___wmul	;wreg free
  9069  005988  0100               	movlb	0	; () banked
  9070  00598A  5160               	movf	??_bcdTOint& (0+255),w,b
  9071  00598C  2427               	addwf	?___wmul,w,c
  9072  00598E  6E2D               	movwf	?_bcdTOint,c
  9073  005990  0100               	movlb	0	; () banked
  9074  005992  5161               	movf	(??_bcdTOint+1)& (0+255),w,b
  9075  005994  2028               	addwfc	?___wmul+1,w,c
  9076  005996  6E2E               	movwf	?_bcdTOint+1,c
  9077                           
  9078                           ; BSR set to: 0
  9079                           
  9080                           ; BSR set to: 0
  9081  005998  0012               	return		;funcret
  9082  00599A  FFFF               	dw	65535	; errata NOP
  9083  00599C                     __end_of_bcdTOint:
  9084                           	opt stack 0
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           intcon	equ	0xFF2
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           indf2	equ	0xFDF
  9093                           postinc2	equ	0xFDE
  9094                           postdec2	equ	0xFDD
  9095                           plusw2	equ	0xFDB
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _get_PID_output *****************
  9101 ;; Defined at:
  9102 ;;		line 26 in file "PID_Controller.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;		None
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  3   24[COMRAM] float 
  9109 ;; Registers used:
  9110 ;;		None
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9116 ;;      Params:         3       0       0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0
  9118 ;;      Temps:          0       0       0       0       0       0       0
  9119 ;;      Totals:         3       0       0       0       0       0       0
  9120 ;;Total ram usage:        3 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    1
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_get_list
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           	psect	text37
  9131  004F44                     __ptext37:
  9132                           	opt stack 0
  9133  004F44                     _get_PID_output:
  9134                           	opt stack 0
  9135  004F44  FFFF               	dw	65535	; assembler added errata NOP
  9136                           
  9137                           ;PID_Controller.c: 27: return last_output;
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;incstack = 0
  9141  004F46  C110  F019         	movff	_last_output,?_get_PID_output
  9142  004F4A  C111  F01A         	movff	_last_output+1,?_get_PID_output+1
  9143  004F4E  C112  F01B         	movff	_last_output+2,?_get_PID_output+2
  9144  004F52  0012               	return		;funcret
  9145  004F54  FFFF               	dw	65535	; errata NOP
  9146  004F56                     __end_of_get_PID_output:
  9147                           	opt stack 0
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           intcon	equ	0xFF2
  9153                           postinc0	equ	0xFEE
  9154                           wreg	equ	0xFE8
  9155                           indf2	equ	0xFDF
  9156                           postinc2	equ	0xFDE
  9157                           postdec2	equ	0xFDD
  9158                           plusw2	equ	0xFDB
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function _cal_analog *****************
  9164 ;; Defined at:
  9165 ;;		line 94 in file "Commands.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  var             2  120[BANK0 ] PTR unsigned char 
  9168 ;;		 -> rx_buffer(20), NULL(0), 
  9169 ;;  data            2  122[BANK0 ] PTR unsigned char 
  9170 ;;		 -> rx_buffer(20), NULL(0), 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  val             3  124[BANK0 ] PTR unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;                  1    wreg      void 
  9175 ;; Registers used:
  9176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9182 ;;      Params:         0       4       0       0       0       0       0
  9183 ;;      Locals:         0       3       0       0       0       0       0
  9184 ;;      Temps:          0       0       0       0       0       0       0
  9185 ;;      Totals:         0       7       0       0       0       0       0
  9186 ;;Total ram usage:        7 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    6
  9189 ;; This function calls:
  9190 ;;		_Save_Variables
  9191 ;;		_atof
  9192 ;;		_set_VL1_span
  9193 ;;		_set_VL1_zero
  9194 ;;		_set_VL2_span
  9195 ;;		_set_VL2_zero
  9196 ;;		_set_VL3_span
  9197 ;;		_set_VL3_zero
  9198 ;;		_set_Vin_span
  9199 ;;		_set_Vin_zero
  9200 ;;		_sprintf
  9201 ;;		_strcmp
  9202 ;; This function is called by:
  9203 ;;		_read_command
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text38
  9208  0031A2                     __ptext38:
  9209                           	opt stack 0
  9210  0031A2                     _cal_analog:
  9211                           	opt stack 0
  9212  0031A2  FFFF               	dw	65535	; assembler added errata NOP
  9213                           
  9214                           ;Commands.c: 96: double val;
  9215                           ;Commands.c: 98: if(strcmp(var,"v1_z")==0){
  9216                           
  9217                           ;incstack = 0
  9218  0031A4  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9219  0031A8  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9220  0031AC  0EBE               	movlw	low STR_13
  9221  0031AE  6E1B               	movwf	strcmp@s2,c
  9222  0031B0  0E7F               	movlw	high STR_13
  9223  0031B2  6E1C               	movwf	strcmp@s2+1,c
  9224  0031B4  EC4C  F02C         	call	_strcmp	;wreg free
  9225  0031B8  5019               	movf	?_strcmp,w,c
  9226  0031BA  101A               	iorwf	?_strcmp+1,w,c
  9227  0031BC  A4D8               	btfss	status,2,c
  9228  0031BE  D017               	goto	l142
  9229                           
  9230                           ;Commands.c: 99: val=atof(data);
  9231  0031C0  C0DA  F095         	movff	cal_analog@data,atof@s
  9232  0031C4  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9233  0031C8  EC25  F029         	call	_atof	;wreg free
  9234  0031CC  C095  F0DC         	movff	?_atof,cal_analog@val
  9235  0031D0  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9236  0031D4  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9237                           
  9238                           ;Commands.c: 100: set_VL1_zero(val);
  9239  0031D8  C0DC  F019         	movff	cal_analog@val,set_VL1_zero@val
  9240  0031DC  C0DD  F01A         	movff	cal_analog@val+1,set_VL1_zero@val+1
  9241  0031E0  C0DE  F01B         	movff	cal_analog@val+2,set_VL1_zero@val+2
  9242  0031E4  ECC1  F026         	call	_set_VL1_zero	;wreg free
  9243                           
  9244                           ;Commands.c: 101: Save_Variables();
  9245  0031E8  EC7D  F03A         	call	_Save_Variables	;wreg free
  9246                           
  9247                           ;Commands.c: 102: }
  9248  0031EC  D118               	goto	l157
  9249  0031EE                     l142:
  9250  0031EE  FFFF               	dw	65535	; assembler added errata NOP
  9251                           
  9252                           ;Commands.c: 103: else if(strcmp(var,"v2_z")==0){
  9253  0031F0  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9254  0031F4  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9255  0031F8  0EC3               	movlw	low STR_14
  9256  0031FA  6E1B               	movwf	strcmp@s2,c
  9257  0031FC  0E7F               	movlw	high STR_14
  9258  0031FE  6E1C               	movwf	strcmp@s2+1,c
  9259  003200  EC4C  F02C         	call	_strcmp	;wreg free
  9260  003204  5019               	movf	?_strcmp,w,c
  9261  003206  101A               	iorwf	?_strcmp+1,w,c
  9262  003208  A4D8               	btfss	status,2,c
  9263  00320A  D017               	goto	l144
  9264                           
  9265                           ;Commands.c: 104: val=atof(data);
  9266  00320C  C0DA  F095         	movff	cal_analog@data,atof@s
  9267  003210  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9268  003214  EC25  F029         	call	_atof	;wreg free
  9269  003218  C095  F0DC         	movff	?_atof,cal_analog@val
  9270  00321C  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9271  003220  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9272                           
  9273                           ;Commands.c: 105: set_VL2_zero(val);
  9274  003224  C0DC  F019         	movff	cal_analog@val,set_VL2_zero@val
  9275  003228  C0DD  F01A         	movff	cal_analog@val+1,set_VL2_zero@val+1
  9276  00322C  C0DE  F01B         	movff	cal_analog@val+2,set_VL2_zero@val+2
  9277  003230  ECD3  F026         	call	_set_VL2_zero	;wreg free
  9278                           
  9279                           ;Commands.c: 106: Save_Variables();
  9280  003234  EC7D  F03A         	call	_Save_Variables	;wreg free
  9281                           
  9282                           ;Commands.c: 107: }
  9283  003238  D0F2               	goto	l157
  9284  00323A                     l144:
  9285  00323A  FFFF               	dw	65535	; assembler added errata NOP
  9286                           
  9287                           ;Commands.c: 108: else if(strcmp(var,"v3_z")==0){
  9288  00323C  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9289  003240  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9290  003244  0EC8               	movlw	low STR_15
  9291  003246  6E1B               	movwf	strcmp@s2,c
  9292  003248  0E7F               	movlw	high STR_15
  9293  00324A  6E1C               	movwf	strcmp@s2+1,c
  9294  00324C  EC4C  F02C         	call	_strcmp	;wreg free
  9295  003250  5019               	movf	?_strcmp,w,c
  9296  003252  101A               	iorwf	?_strcmp+1,w,c
  9297  003254  A4D8               	btfss	status,2,c
  9298  003256  D017               	goto	l146
  9299                           
  9300                           ;Commands.c: 109: val=atof(data);
  9301  003258  C0DA  F095         	movff	cal_analog@data,atof@s
  9302  00325C  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9303  003260  EC25  F029         	call	_atof	;wreg free
  9304  003264  C095  F0DC         	movff	?_atof,cal_analog@val
  9305  003268  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9306  00326C  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9307                           
  9308                           ;Commands.c: 110: set_VL3_zero(val);
  9309  003270  C0DC  F019         	movff	cal_analog@val,set_VL3_zero@val
  9310  003274  C0DD  F01A         	movff	cal_analog@val+1,set_VL3_zero@val+1
  9311  003278  C0DE  F01B         	movff	cal_analog@val+2,set_VL3_zero@val+2
  9312  00327C  ECE5  F026         	call	_set_VL3_zero	;wreg free
  9313                           
  9314                           ;Commands.c: 111: Save_Variables();
  9315  003280  EC7D  F03A         	call	_Save_Variables	;wreg free
  9316                           
  9317                           ;Commands.c: 112: }
  9318  003284  D0CC               	goto	l157
  9319  003286                     l146:
  9320  003286  FFFF               	dw	65535	; assembler added errata NOP
  9321                           
  9322                           ;Commands.c: 113: else if(strcmp(var,"v1_s")==0){
  9323  003288  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9324  00328C  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9325  003290  0EAF               	movlw	low STR_16
  9326  003292  6E1B               	movwf	strcmp@s2,c
  9327  003294  0E7F               	movlw	high STR_16
  9328  003296  6E1C               	movwf	strcmp@s2+1,c
  9329  003298  EC4C  F02C         	call	_strcmp	;wreg free
  9330  00329C  5019               	movf	?_strcmp,w,c
  9331  00329E  101A               	iorwf	?_strcmp+1,w,c
  9332  0032A0  A4D8               	btfss	status,2,c
  9333  0032A2  D017               	goto	l148
  9334                           
  9335                           ;Commands.c: 114: val=atof(data);
  9336  0032A4  C0DA  F095         	movff	cal_analog@data,atof@s
  9337  0032A8  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9338  0032AC  EC25  F029         	call	_atof	;wreg free
  9339  0032B0  C095  F0DC         	movff	?_atof,cal_analog@val
  9340  0032B4  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9341  0032B8  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9342                           
  9343                           ;Commands.c: 115: set_VL1_span(val);
  9344  0032BC  C0DC  F019         	movff	cal_analog@val,set_VL1_span@val
  9345  0032C0  C0DD  F01A         	movff	cal_analog@val+1,set_VL1_span@val+1
  9346  0032C4  C0DE  F01B         	movff	cal_analog@val+2,set_VL1_span@val+2
  9347  0032C8  ECB8  F026         	call	_set_VL1_span	;wreg free
  9348                           
  9349                           ;Commands.c: 116: Save_Variables();
  9350  0032CC  EC7D  F03A         	call	_Save_Variables	;wreg free
  9351                           
  9352                           ;Commands.c: 117: }
  9353  0032D0  D0A6               	goto	l157
  9354  0032D2                     l148:
  9355  0032D2  FFFF               	dw	65535	; assembler added errata NOP
  9356                           
  9357                           ;Commands.c: 118: else if(strcmp(var,"v2_s")==0){
  9358  0032D4  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9359  0032D8  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9360  0032DC  0EB4               	movlw	low STR_17
  9361  0032DE  6E1B               	movwf	strcmp@s2,c
  9362  0032E0  0E7F               	movlw	high STR_17
  9363  0032E2  6E1C               	movwf	strcmp@s2+1,c
  9364  0032E4  EC4C  F02C         	call	_strcmp	;wreg free
  9365  0032E8  5019               	movf	?_strcmp,w,c
  9366  0032EA  101A               	iorwf	?_strcmp+1,w,c
  9367  0032EC  A4D8               	btfss	status,2,c
  9368  0032EE  D017               	goto	l150
  9369                           
  9370                           ;Commands.c: 119: val=atof(data);
  9371  0032F0  C0DA  F095         	movff	cal_analog@data,atof@s
  9372  0032F4  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9373  0032F8  EC25  F029         	call	_atof	;wreg free
  9374  0032FC  C095  F0DC         	movff	?_atof,cal_analog@val
  9375  003300  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9376  003304  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9377                           
  9378                           ;Commands.c: 120: set_VL2_span(val);
  9379  003308  C0DC  F019         	movff	cal_analog@val,set_VL2_span@val
  9380  00330C  C0DD  F01A         	movff	cal_analog@val+1,set_VL2_span@val+1
  9381  003310  C0DE  F01B         	movff	cal_analog@val+2,set_VL2_span@val+2
  9382  003314  ECCA  F026         	call	_set_VL2_span	;wreg free
  9383                           
  9384                           ;Commands.c: 121: Save_Variables();
  9385  003318  EC7D  F03A         	call	_Save_Variables	;wreg free
  9386                           
  9387                           ;Commands.c: 122: }
  9388  00331C  D080               	goto	l157
  9389  00331E                     l150:
  9390  00331E  FFFF               	dw	65535	; assembler added errata NOP
  9391                           
  9392                           ;Commands.c: 123: else if(strcmp(var,"v3_s")==0){
  9393  003320  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9394  003324  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9395  003328  0EB9               	movlw	low STR_18
  9396  00332A  6E1B               	movwf	strcmp@s2,c
  9397  00332C  0E7F               	movlw	high STR_18
  9398  00332E  6E1C               	movwf	strcmp@s2+1,c
  9399  003330  EC4C  F02C         	call	_strcmp	;wreg free
  9400  003334  5019               	movf	?_strcmp,w,c
  9401  003336  101A               	iorwf	?_strcmp+1,w,c
  9402  003338  A4D8               	btfss	status,2,c
  9403  00333A  D017               	goto	l152
  9404                           
  9405                           ;Commands.c: 124: val=atof(data);
  9406  00333C  C0DA  F095         	movff	cal_analog@data,atof@s
  9407  003340  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9408  003344  EC25  F029         	call	_atof	;wreg free
  9409  003348  C095  F0DC         	movff	?_atof,cal_analog@val
  9410  00334C  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9411  003350  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9412                           
  9413                           ;Commands.c: 125: set_VL3_span(val);
  9414  003354  C0DC  F019         	movff	cal_analog@val,set_VL3_span@val
  9415  003358  C0DD  F01A         	movff	cal_analog@val+1,set_VL3_span@val+1
  9416  00335C  C0DE  F01B         	movff	cal_analog@val+2,set_VL3_span@val+2
  9417  003360  ECDC  F026         	call	_set_VL3_span	;wreg free
  9418                           
  9419                           ;Commands.c: 126: Save_Variables();
  9420  003364  EC7D  F03A         	call	_Save_Variables	;wreg free
  9421                           
  9422                           ;Commands.c: 127: }
  9423  003368  D05A               	goto	l157
  9424  00336A                     l152:
  9425  00336A  FFFF               	dw	65535	; assembler added errata NOP
  9426                           
  9427                           ;Commands.c: 128: else if(strcmp(var,"vin_s")==0){
  9428  00336C  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9429  003370  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9430  003374  0E89               	movlw	low STR_19
  9431  003376  6E1B               	movwf	strcmp@s2,c
  9432  003378  0E7F               	movlw	high STR_19
  9433  00337A  6E1C               	movwf	strcmp@s2+1,c
  9434  00337C  EC4C  F02C         	call	_strcmp	;wreg free
  9435  003380  5019               	movf	?_strcmp,w,c
  9436  003382  101A               	iorwf	?_strcmp+1,w,c
  9437  003384  A4D8               	btfss	status,2,c
  9438  003386  D017               	goto	l154
  9439                           
  9440                           ;Commands.c: 129: val=atof(data);
  9441  003388  C0DA  F095         	movff	cal_analog@data,atof@s
  9442  00338C  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9443  003390  EC25  F029         	call	_atof	;wreg free
  9444  003394  C095  F0DC         	movff	?_atof,cal_analog@val
  9445  003398  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9446  00339C  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9447                           
  9448                           ;Commands.c: 130: set_Vin_span(val);
  9449  0033A0  C0DC  F019         	movff	cal_analog@val,set_Vin_span@val
  9450  0033A4  C0DD  F01A         	movff	cal_analog@val+1,set_Vin_span@val+1
  9451  0033A8  C0DE  F01B         	movff	cal_analog@val+2,set_Vin_span@val+2
  9452  0033AC  ECEE  F026         	call	_set_Vin_span	;wreg free
  9453                           
  9454                           ;Commands.c: 131: Save_Variables();
  9455  0033B0  EC7D  F03A         	call	_Save_Variables	;wreg free
  9456                           
  9457                           ;Commands.c: 132: }
  9458  0033B4  D034               	goto	l157
  9459  0033B6                     l154:
  9460  0033B6  FFFF               	dw	65535	; assembler added errata NOP
  9461                           
  9462                           ;Commands.c: 133: else if(strcmp(var,"vin_z")==0){
  9463  0033B8  C0D8  F019         	movff	cal_analog@var,strcmp@s1
  9464  0033BC  C0D9  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9465  0033C0  0E95               	movlw	low STR_20
  9466  0033C2  6E1B               	movwf	strcmp@s2,c
  9467  0033C4  0E7F               	movlw	high STR_20
  9468  0033C6  6E1C               	movwf	strcmp@s2+1,c
  9469  0033C8  EC4C  F02C         	call	_strcmp	;wreg free
  9470  0033CC  5019               	movf	?_strcmp,w,c
  9471  0033CE  101A               	iorwf	?_strcmp+1,w,c
  9472  0033D0  A4D8               	btfss	status,2,c
  9473  0033D2  D017               	goto	l156
  9474                           
  9475                           ;Commands.c: 134: val=atof(data);
  9476  0033D4  C0DA  F095         	movff	cal_analog@data,atof@s
  9477  0033D8  C0DB  F096         	movff	cal_analog@data+1,atof@s+1
  9478  0033DC  EC25  F029         	call	_atof	;wreg free
  9479  0033E0  C095  F0DC         	movff	?_atof,cal_analog@val
  9480  0033E4  C096  F0DD         	movff	?_atof+1,cal_analog@val+1
  9481  0033E8  C097  F0DE         	movff	?_atof+2,cal_analog@val+2
  9482                           
  9483                           ;Commands.c: 135: set_Vin_zero(val);
  9484  0033EC  C0DC  F019         	movff	cal_analog@val,set_Vin_zero@val
  9485  0033F0  C0DD  F01A         	movff	cal_analog@val+1,set_Vin_zero@val+1
  9486  0033F4  C0DE  F01B         	movff	cal_analog@val+2,set_Vin_zero@val+2
  9487  0033F8  ECF7  F026         	call	_set_Vin_zero	;wreg free
  9488                           
  9489                           ;Commands.c: 136: Save_Variables();
  9490  0033FC  EC7D  F03A         	call	_Save_Variables	;wreg free
  9491                           
  9492                           ;Commands.c: 137: }
  9493  003400  D00E               	goto	l157
  9494  003402                     l156:
  9495  003402  FFFF               	dw	65535	; assembler added errata NOP
  9496                           
  9497                           ;Commands.c: 138: else{
  9498                           ;Commands.c: 139: sprintf(buffer,"Parametro errado");
  9499  003404  C0F7  F0C0         	movff	_buffer,sprintf@wh
  9500  003408  C0F8  F0C1         	movff	_buffer+1,sprintf@wh+1
  9501  00340C  0EFB               	movlw	low STR_21
  9502  00340E  0100               	movlb	0	; () banked
  9503  003410  6FC2               	movwf	sprintf@f& (0+255),b
  9504  003412  0E7E               	movlw	high STR_21
  9505  003414  0100               	movlb	0	; () banked
  9506  003416  6FC3               	movwf	(sprintf@f+1)& (0+255),b
  9507  003418  EC10  F02F         	call	_sprintf	;wreg free
  9508                           
  9509                           ;Commands.c: 140: TXIE=1;
  9510  00341C  889D               	bsf	3997,4,c	;volatile
  9511  00341E                     l157:
  9512  00341E  FFFF               	dw	65535	; assembler added errata NOP
  9513  003420  0012               	return		;funcret
  9514  003422  FFFF               	dw	65535	; errata NOP
  9515  003424                     __end_of_cal_analog:
  9516                           	opt stack 0
  9517                           tblptru	equ	0xFF8
  9518                           tblptrh	equ	0xFF7
  9519                           tblptrl	equ	0xFF6
  9520                           tablat	equ	0xFF5
  9521                           intcon	equ	0xFF2
  9522                           postinc0	equ	0xFEE
  9523                           wreg	equ	0xFE8
  9524                           indf2	equ	0xFDF
  9525                           postinc2	equ	0xFDE
  9526                           postdec2	equ	0xFDD
  9527                           plusw2	equ	0xFDB
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function _strcmp *****************
  9533 ;; Defined at:
  9534 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcmp.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  s1              2   24[COMRAM] PTR const unsigned char 
  9537 ;;		 -> rx_buffer(20), NULL(0), 
  9538 ;;  s2              2   26[COMRAM] PTR const unsigned char 
  9539 ;;		 -> STR_66(7), STR_63(5), STR_61(5), STR_59(5), 
  9540 ;;		 -> STR_57(4), STR_55(3), STR_52(5), STR_50(4), 
  9541 ;;		 -> STR_48(4), STR_46(3), STR_44(9), STR_42(9), 
  9542 ;;		 -> STR_40(9), STR_38(3), STR_36(3), STR_34(3), 
  9543 ;;		 -> STR_32(5), STR_31(5), STR_30(4), STR_29(4), 
  9544 ;;		 -> STR_28(3), STR_27(9), STR_26(9), STR_25(12), 
  9545 ;;		 -> STR_24(3), STR_23(3), STR_22(3), STR_20(6), 
  9546 ;;		 -> STR_19(6), STR_18(5), STR_17(5), STR_16(5), 
  9547 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_11(4), 
  9548 ;;		 -> STR_10(4), STR_9(10), STR_8(9), STR_6(4), 
  9549 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(6), 
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;  r               1   29[COMRAM] char 
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  2   24[COMRAM] int 
  9554 ;; Registers used:
  9555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9561 ;;      Params:         4       0       0       0       0       0       0
  9562 ;;      Locals:         1       0       0       0       0       0       0
  9563 ;;      Temps:          1       0       0       0       0       0       0
  9564 ;;      Totals:         6       0       0       0       0       0       0
  9565 ;;Total ram usage:        6 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    1
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_read_command
  9572 ;;		_lcd_display
  9573 ;;		_reset_var
  9574 ;;		_cal_analog
  9575 ;;		_set_list
  9576 ;;		_get_list
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           	psect	text39
  9581  005898                     __ptext39:
  9582                           	opt stack 0
  9583  005898                     _strcmp:
  9584                           	opt stack 0
  9585  005898  FFFF               	dw	65535	; assembler added errata NOP
  9586                           
  9587                           ;incstack = 0
  9588  00589A  D005               	goto	l2073
  9589  00589C  FFFF               	dw	65535	; assembler added errata NOP
  9590  00589E  4A19               	infsnz	strcmp@s1,f,c
  9591  0058A0  2A1A               	incf	strcmp@s1+1,f,c
  9592  0058A2  4A1B               	infsnz	strcmp@s2,f,c
  9593  0058A4  2A1C               	incf	strcmp@s2+1,f,c
  9594  0058A6                     l2073:
  9595  0058A6  FFFF               	dw	65535	; assembler added errata NOP
  9596  0058A8  C019  FFD9         	movff	strcmp@s1,fsr2l
  9597  0058AC  C01A  FFDA         	movff	strcmp@s1+1,fsr2h
  9598  0058B0  50DF               	movf	indf2,w,c
  9599  0058B2  6E1D               	movwf	??_strcmp& (0+255),c
  9600  0058B4  C01B  FFF6         	movff	strcmp@s2,tblptrl
  9601  0058B8  C01C  FFF7         	movff	strcmp@s2+1,tblptrh
  9602  0058BC                     	if	0	;tblptru may be non-zero
  9603  0058BC                     	endif
  9604  0058BC                     	if	0	;tblptru may be non-zero
  9605  0058BC                     	endif
  9606  0058BC  0008               	tblrd		*
  9607  0058BE  FFFF               	dw	65535	; errata NOP
  9608  0058C0  50F5               	movf	tablat,w,c
  9609  0058C2  0800               	sublw	0
  9610  0058C4  241D               	addwf	??_strcmp,w,c
  9611  0058C6  6E1E               	movwf	strcmp@r,c
  9612  0058C8  501E               	movf	strcmp@r,w,c
  9613  0058CA  A4D8               	btfss	status,2,c
  9614  0058CC  D007               	goto	u10620
  9615  0058CE  C019  FFD9         	movff	strcmp@s1,fsr2l
  9616  0058D2  C01A  FFDA         	movff	strcmp@s1+1,fsr2h
  9617  0058D6  50DF               	movf	indf2,w,c
  9618  0058D8  A4D8               	btfss	status,2,c
  9619  0058DA  D7E0               	goto	l2074
  9620  0058DC                     u10620:
  9621  0058DC  FFFF               	dw	65535	; assembler added errata NOP
  9622  0058DE  501E               	movf	strcmp@r,w,c
  9623  0058E0  6E19               	movwf	?_strcmp,c
  9624  0058E2  6A1A               	clrf	?_strcmp+1,c
  9625  0058E4  BE19               	btfsc	?_strcmp,7,c
  9626  0058E6  061A               	decf	?_strcmp+1,f,c
  9627  0058E8  0012               	return		;funcret
  9628  0058EA  FFFF               	dw	65535	; errata NOP
  9629  0058EC                     __end_of_strcmp:
  9630                           	opt stack 0
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           intcon	equ	0xFF2
  9636                           postinc0	equ	0xFEE
  9637                           wreg	equ	0xFE8
  9638                           indf2	equ	0xFDF
  9639                           postinc2	equ	0xFDE
  9640                           postdec2	equ	0xFDD
  9641                           plusw2	equ	0xFDB
  9642                           fsr2h	equ	0xFDA
  9643                           fsr2l	equ	0xFD9
  9644                           status	equ	0xFD8
  9645                           
  9646 ;; *************** function _atof *****************
  9647 ;; Defined at:
  9648 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atof.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  s               2   53[BANK0 ] PTR const unsigned char 
  9651 ;;		 -> rx_buffer(20), NULL(0), 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  3   53[BANK0 ] PTR const unsigned char 
  9656 ;; Registers used:
  9657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9663 ;;      Params:         0       3       0       0       0       0       0
  9664 ;;      Locals:         0       0       0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0
  9666 ;;      Totals:         0       3       0       0       0       0       0
  9667 ;;Total ram usage:        3 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    4
  9670 ;; This function calls:
  9671 ;;		_strtod
  9672 ;; This function is called by:
  9673 ;;		_cal_analog
  9674 ;;		_set_list
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text40
  9679  00524A                     __ptext40:
  9680                           	opt stack 0
  9681  00524A                     _atof:
  9682                           	opt stack 0
  9683  00524A  FFFF               	dw	65535	; assembler added errata NOP
  9684                           
  9685                           ;incstack = 0
  9686  00524C  C095  F08A         	movff	atof@s,strtod@s
  9687  005250  C096  F08B         	movff	atof@s+1,strtod@s+1
  9688  005254  0E00               	movlw	0
  9689  005256  0100               	movlb	0	; () banked
  9690  005258  6F8C               	movwf	strtod@res& (0+255),b
  9691  00525A  0E00               	movlw	0
  9692  00525C  0100               	movlb	0	; () banked
  9693  00525E  6F8D               	movwf	(strtod@res+1)& (0+255),b
  9694  005260  EC38  F010         	call	_strtod	;wreg free
  9695  005264  C08A  F095         	movff	?_strtod,?_atof
  9696  005268  C08B  F096         	movff	?_strtod+1,?_atof+1
  9697  00526C  C08C  F097         	movff	?_strtod+2,?_atof+2
  9698  005270  0012               	return		;funcret
  9699  005272  FFFF               	dw	65535	; errata NOP
  9700  005274                     __end_of_atof:
  9701                           	opt stack 0
  9702                           tblptru	equ	0xFF8
  9703                           tblptrh	equ	0xFF7
  9704                           tblptrl	equ	0xFF6
  9705                           tablat	equ	0xFF5
  9706                           intcon	equ	0xFF2
  9707                           postinc0	equ	0xFEE
  9708                           wreg	equ	0xFE8
  9709                           indf2	equ	0xFDF
  9710                           postinc2	equ	0xFDE
  9711                           postdec2	equ	0xFDD
  9712                           plusw2	equ	0xFDB
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           
  9717 ;; *************** function _strtod *****************
  9718 ;; Defined at:
  9719 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atof.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  s               2   42[BANK0 ] PTR const unsigned char 
  9722 ;;		 -> rx_buffer(20), NULL(0), 
  9723 ;;  res             2   44[BANK0 ] PTR PTR const unsigned c
  9724 ;;		 -> NULL(0), 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  _u              4   49[BANK0 ] struct .
  9727 ;;  expon           1   48[BANK0 ] char 
  9728 ;;  flags           1   47[BANK0 ] unsigned char 
  9729 ;;  eexp            1   46[BANK0 ] char 
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  3   42[BANK0 ] char 
  9732 ;; Registers used:
  9733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9739 ;;      Params:         0       4       0       0       0       0       0
  9740 ;;      Locals:         0       7       0       0       0       0       0
  9741 ;;      Temps:          1       0       0       0       0       0       0
  9742 ;;      Totals:         1      11       0       0       0       0       0
  9743 ;;Total ram usage:       12 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    3
  9746 ;; This function calls:
  9747 ;;		___altoft
  9748 ;;		___ftdiv
  9749 ;;		___ftge
  9750 ;;		___ftmul
  9751 ;;		___ftneg
  9752 ;;		___lmul
  9753 ;;		_isdigit
  9754 ;;		_isspace
  9755 ;; This function is called by:
  9756 ;;		_atof
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text41
  9761  002070                     __ptext41:
  9762                           	opt stack 0
  9763  002070                     _strtod:
  9764                           	opt stack 0
  9765  002070  FFFF               	dw	65535	; assembler added errata NOP
  9766                           
  9767                           ;incstack = 0
  9768  002072  0100               	movlb	0	; () banked
  9769  002074  518C               	movf	strtod@res& (0+255),w,b
  9770  002076  0100               	movlb	0	; () banked
  9771  002078  118D               	iorwf	(strtod@res+1)& (0+255),w,b
  9772  00207A  B4D8               	btfsc	status,2,c
  9773  00207C  D00D               	goto	l1495
  9774                           
  9775                           ; BSR set to: 0
  9776  00207E  C08C  FFD9         	movff	strtod@res,fsr2l
  9777  002082  C08D  FFDA         	movff	strtod@res+1,fsr2h
  9778  002086  C08A  FFDE         	movff	strtod@s,postinc2
  9779  00208A  C08B  FFDD         	movff	strtod@s+1,postdec2
  9780                           
  9781                           ; BSR set to: 0
  9782  00208E  D004               	goto	l1495
  9783  002090  FFFF               	dw	65535	; assembler added errata NOP
  9784                           
  9785                           ; BSR set to: 0
  9786  002092  0100               	movlb	0	; () banked
  9787  002094  4B8A               	infsnz	strtod@s& (0+255),f,b
  9788  002096  2B8B               	incf	(strtod@s+1)& (0+255),f,b
  9789  002098                     l1495:
  9790  002098  FFFF               	dw	65535	; assembler added errata NOP
  9791                           
  9792                           ; BSR set to: 0
  9793                           
  9794                           ; BSR set to: 0
  9795  00209A  C08A  FFD9         	movff	strtod@s,fsr2l
  9796  00209E  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9797  0020A2  50DF               	movf	indf2,w,c
  9798  0020A4  0100               	movlb	0	; () banked
  9799  0020A6  6F8E               	movwf	strtod@eexp& (0+255),b
  9800  0020A8  0100               	movlb	0	; () banked
  9801  0020AA  518E               	movf	strtod@eexp& (0+255),w,b
  9802  0020AC  EC7E  F029         	call	_isspace
  9803  0020B0  B0D8               	btfsc	status,0,c
  9804  0020B2  D7EE               	goto	l1496
  9805  0020B4  0E00               	movlw	0
  9806  0020B6  0100               	movlb	0	; () banked
  9807  0020B8  6F8F               	movwf	strtod@flags& (0+255),b
  9808                           
  9809                           ; BSR set to: 0
  9810  0020BA  0E2D               	movlw	45
  9811  0020BC  0100               	movlb	0	; () banked
  9812  0020BE  198E               	xorwf	strtod@eexp& (0+255),w,b
  9813  0020C0  A4D8               	btfss	status,2,c
  9814  0020C2  D004               	goto	l1498
  9815                           
  9816                           ; BSR set to: 0
  9817  0020C4  0E01               	movlw	1
  9818  0020C6  0100               	movlb	0	; () banked
  9819  0020C8  6F8F               	movwf	strtod@flags& (0+255),b
  9820  0020CA  D006               	goto	u10260
  9821  0020CC                     l1498:
  9822  0020CC  FFFF               	dw	65535	; assembler added errata NOP
  9823                           
  9824                           ; BSR set to: 0
  9825                           
  9826                           ; BSR set to: 0
  9827  0020CE  0E2B               	movlw	43
  9828  0020D0  0100               	movlb	0	; () banked
  9829  0020D2  198E               	xorwf	strtod@eexp& (0+255),w,b
  9830  0020D4  A4D8               	btfss	status,2,c
  9831  0020D6  D004               	goto	l1500
  9832  0020D8                     u10260:
  9833  0020D8  FFFF               	dw	65535	; assembler added errata NOP
  9834                           
  9835                           ; BSR set to: 0
  9836  0020DA  0100               	movlb	0	; () banked
  9837  0020DC  4B8A               	infsnz	strtod@s& (0+255),f,b
  9838  0020DE  2B8B               	incf	(strtod@s+1)& (0+255),f,b
  9839  0020E0                     l1500:
  9840  0020E0  FFFF               	dw	65535	; assembler added errata NOP
  9841                           
  9842                           ; BSR set to: 0
  9843                           
  9844                           ; BSR set to: 0
  9845                           
  9846                           ; BSR set to: 0
  9847  0020E2  0E00               	movlw	0
  9848  0020E4  0100               	movlb	0	; () banked
  9849  0020E6  6F8E               	movwf	strtod@eexp& (0+255),b
  9850                           
  9851                           ; BSR set to: 0
  9852  0020E8  0E00               	movlw	0
  9853  0020EA  0100               	movlb	0	; () banked
  9854  0020EC  6F91               	movwf	strtod@_u& (0+255),b
  9855  0020EE  0E00               	movlw	0
  9856  0020F0  6F92               	movwf	(strtod@_u+1)& (0+255),b
  9857  0020F2  0E00               	movlw	0
  9858  0020F4  6F93               	movwf	(strtod@_u+2)& (0+255),b
  9859  0020F6  0E00               	movlw	0
  9860  0020F8  6F94               	movwf	(strtod@_u+3)& (0+255),b
  9861                           
  9862                           ; BSR set to: 0
  9863  0020FA  0E00               	movlw	0
  9864  0020FC  0100               	movlb	0	; () banked
  9865  0020FE  6F90               	movwf	strtod@expon& (0+255),b
  9866  002100  FFFF               	dw	65535	; assembler added errata NOP
  9867                           
  9868                           ; BSR set to: 0
  9869                           
  9870                           ; BSR set to: 0
  9871  002102  0100               	movlb	0	; () banked
  9872  002104  B98F               	btfsc	strtod@flags& (0+255),4,b
  9873  002106  D00B               	goto	l1502
  9874                           
  9875                           ; BSR set to: 0
  9876  002108  C08A  FFD9         	movff	strtod@s,fsr2l
  9877  00210C  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9878  002110  0E2E               	movlw	46
  9879  002112  18DE               	xorwf	postinc2,w,c
  9880  002114  A4D8               	btfss	status,2,c
  9881  002116  D003               	goto	l1502
  9882                           
  9883                           ; BSR set to: 0
  9884  002118  0100               	movlb	0	; () banked
  9885  00211A  898F               	bsf	strtod@flags& (0+255),4,b
  9886  00211C  D049               	goto	l1509
  9887  00211E                     l1502:
  9888  00211E  FFFF               	dw	65535	; assembler added errata NOP
  9889                           
  9890                           ; BSR set to: 0
  9891                           
  9892                           ; BSR set to: 0
  9893  002120  C08A  FFD9         	movff	strtod@s,fsr2l
  9894  002124  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9895  002128  50DF               	movf	indf2,w,c
  9896  00212A  EC8A  F028         	call	_isdigit
  9897  00212E  A0D8               	btfss	status,0,c
  9898  002130  D044               	goto	l1505
  9899  002132  0100               	movlb	0	; () banked
  9900  002134  838F               	bsf	strtod@flags& (0+255),1,b
  9901                           
  9902                           ; BSR set to: 0
  9903  002136  0E08               	movlw	8
  9904  002138  0100               	movlb	0	; () banked
  9905  00213A  198E               	xorwf	strtod@eexp& (0+255),w,b
  9906  00213C  B4D8               	btfsc	status,2,c
  9907  00213E  D032               	goto	l1506
  9908                           
  9909                           ; BSR set to: 0
  9910  002140  0100               	movlb	0	; () banked
  9911  002142  A98F               	btfss	strtod@flags& (0+255),4,b
  9912  002144  D002               	goto	l1507
  9913                           
  9914                           ; BSR set to: 0
  9915  002146  0100               	movlb	0	; () banked
  9916  002148  0790               	decf	strtod@expon& (0+255),f,b
  9917  00214A                     l1507:
  9918  00214A  FFFF               	dw	65535	; assembler added errata NOP
  9919                           
  9920                           ; BSR set to: 0
  9921  00214C  0100               	movlb	0	; () banked
  9922  00214E  2B8E               	incf	strtod@eexp& (0+255),f,b
  9923                           
  9924                           ; BSR set to: 0
  9925  002150  C091  F019         	movff	strtod@_u,___lmul@multiplier
  9926  002154  C092  F01A         	movff	strtod@_u+1,___lmul@multiplier+1
  9927  002158  C093  F01B         	movff	strtod@_u+2,___lmul@multiplier+2
  9928  00215C  C094  F01C         	movff	strtod@_u+3,___lmul@multiplier+3
  9929  002160  0E0A               	movlw	10
  9930  002162  6E1D               	movwf	___lmul@multiplicand,c
  9931  002164  0E00               	movlw	0
  9932  002166  6E1E               	movwf	___lmul@multiplicand+1,c
  9933  002168  0E00               	movlw	0
  9934  00216A  6E1F               	movwf	___lmul@multiplicand+2,c
  9935  00216C  0E00               	movlw	0
  9936  00216E  6E20               	movwf	___lmul@multiplicand+3,c
  9937  002170  EC28  F02D         	call	___lmul	;wreg free
  9938  002174  C019  F091         	movff	?___lmul,strtod@_u
  9939  002178  C01A  F092         	movff	?___lmul+1,strtod@_u+1
  9940  00217C  C01B  F093         	movff	?___lmul+2,strtod@_u+2
  9941  002180  C01C  F094         	movff	?___lmul+3,strtod@_u+3
  9942  002184  C08A  FFD9         	movff	strtod@s,fsr2l
  9943  002188  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9944  00218C  50DF               	movf	indf2,w,c
  9945  00218E  6E2D               	movwf	??_strtod& (0+255),c
  9946  002190  0ED0               	movlw	208
  9947  002192  262D               	addwf	??_strtod,f,c
  9948  002194  502D               	movf	??_strtod,w,c
  9949  002196  0100               	movlb	0	; () banked
  9950  002198  2791               	addwf	strtod@_u& (0+255),f,b
  9951  00219A  0E00               	movlw	0
  9952  00219C  2392               	addwfc	(strtod@_u+1)& (0+255),f,b
  9953  00219E  2393               	addwfc	(strtod@_u+2)& (0+255),f,b
  9954  0021A0  2394               	addwfc	(strtod@_u+3)& (0+255),f,b
  9955  0021A2  D006               	goto	l1509
  9956  0021A4                     l1506:
  9957  0021A4  FFFF               	dw	65535	; assembler added errata NOP
  9958                           
  9959                           ; BSR set to: 0
  9960  0021A6  0100               	movlb	0	; () banked
  9961  0021A8  B98F               	btfsc	strtod@flags& (0+255),4,b
  9962  0021AA  D002               	goto	l1509
  9963                           
  9964                           ; BSR set to: 0
  9965  0021AC  0100               	movlb	0	; () banked
  9966  0021AE  2B90               	incf	strtod@expon& (0+255),f,b
  9967  0021B0                     l1509:
  9968  0021B0  FFFF               	dw	65535	; assembler added errata NOP
  9969                           
  9970                           ; BSR set to: 0
  9971                           
  9972                           ; BSR set to: 0
  9973  0021B2  0100               	movlb	0	; () banked
  9974  0021B4  4B8A               	infsnz	strtod@s& (0+255),f,b
  9975  0021B6  2B8B               	incf	(strtod@s+1)& (0+255),f,b
  9976                           
  9977                           ; BSR set to: 0
  9978  0021B8  D7A3               	goto	l1501
  9979  0021BA                     l1505:
  9980  0021BA  FFFF               	dw	65535	; assembler added errata NOP
  9981                           
  9982                           ; BSR set to: 0
  9983  0021BC  0E00               	movlw	0
  9984  0021BE  0100               	movlb	0	; () banked
  9985  0021C0  6F8E               	movwf	strtod@eexp& (0+255),b
  9986                           
  9987                           ; BSR set to: 0
  9988  0021C2  C08A  FFD9         	movff	strtod@s,fsr2l
  9989  0021C6  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9990  0021CA  0E65               	movlw	101
  9991  0021CC  18DE               	xorwf	postinc2,w,c
  9992  0021CE  B4D8               	btfsc	status,2,c
  9993  0021D0  D008               	goto	u10340
  9994                           
  9995                           ; BSR set to: 0
  9996  0021D2  C08A  FFD9         	movff	strtod@s,fsr2l
  9997  0021D6  C08B  FFDA         	movff	strtod@s+1,fsr2h
  9998  0021DA  0E45               	movlw	69
  9999  0021DC  18DE               	xorwf	postinc2,w,c
 10000  0021DE  A4D8               	btfss	status,2,c
 10001  0021E0  D070               	goto	l1522
 10002  0021E2                     u10340:
 10003  0021E2  FFFF               	dw	65535	; assembler added errata NOP
 10004                           
 10005                           ; BSR set to: 0
 10006                           
 10007                           ; BSR set to: 0
 10008  0021E4  0100               	movlb	0	; () banked
 10009  0021E6  4B8A               	infsnz	strtod@s& (0+255),f,b
 10010  0021E8  2B8B               	incf	(strtod@s+1)& (0+255),f,b
 10011  0021EA  C08A  FFD9         	movff	strtod@s,fsr2l
 10012  0021EE  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10013  0021F2  0E2D               	movlw	45
 10014  0021F4  18DE               	xorwf	postinc2,w,c
 10015  0021F6  A4D8               	btfss	status,2,c
 10016  0021F8  D003               	goto	l1513
 10017                           
 10018                           ; BSR set to: 0
 10019  0021FA  0100               	movlb	0	; () banked
 10020  0021FC  878F               	bsf	strtod@flags& (0+255),3,b
 10021  0021FE  D009               	goto	u10360
 10022  002200                     l1513:
 10023  002200  FFFF               	dw	65535	; assembler added errata NOP
 10024                           
 10025                           ; BSR set to: 0
 10026                           
 10027                           ; BSR set to: 0
 10028  002202  C08A  FFD9         	movff	strtod@s,fsr2l
 10029  002206  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10030  00220A  0E2B               	movlw	43
 10031  00220C  18DE               	xorwf	postinc2,w,c
 10032  00220E  A4D8               	btfss	status,2,c
 10033  002210  D004               	goto	l1516
 10034  002212                     u10360:
 10035  002212  FFFF               	dw	65535	; assembler added errata NOP
 10036                           
 10037                           ; BSR set to: 0
 10038                           
 10039                           ; BSR set to: 0
 10040                           
 10041                           ; BSR set to: 0
 10042                           
 10043                           ; BSR set to: 0
 10044                           
 10045                           ; BSR set to: 0
 10046  002214  0100               	movlb	0	; () banked
 10047  002216  4B8A               	infsnz	strtod@s& (0+255),f,b
 10048  002218  2B8B               	incf	(strtod@s+1)& (0+255),f,b
 10049  00221A                     l1516:
 10050  00221A  FFFF               	dw	65535	; assembler added errata NOP
 10051                           
 10052                           ; BSR set to: 0
 10053                           
 10054                           ; BSR set to: 0
 10055  00221C  C08A  FFD9         	movff	strtod@s,fsr2l
 10056  002220  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10057  002224  0E30               	movlw	48
 10058  002226  18DE               	xorwf	postinc2,w,c
 10059  002228  B4D8               	btfsc	status,2,c
 10060  00222A  D7F3               	goto	u10360
 10061                           
 10062                           ; BSR set to: 0
 10063                           
 10064                           ; BSR set to: 0
 10065  00222C  C08A  FFD9         	movff	strtod@s,fsr2l
 10066  002230  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10067  002234  50DF               	movf	indf2,w,c
 10068  002236  EC8A  F028         	call	_isdigit
 10069  00223A  A0D8               	btfss	status,0,c
 10070  00223C  D03C               	goto	l1521
 10071  00223E  C08A  FFD9         	movff	strtod@s,fsr2l
 10072  002242  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10073  002246  50DF               	movf	indf2,w,c
 10074  002248  0FD0               	addlw	208
 10075  00224A  0100               	movlb	0	; () banked
 10076  00224C  6F8E               	movwf	strtod@eexp& (0+255),b
 10077                           
 10078                           ; BSR set to: 0
 10079  00224E  0100               	movlb	0	; () banked
 10080  002250  4B8A               	infsnz	strtod@s& (0+255),f,b
 10081  002252  2B8B               	incf	(strtod@s+1)& (0+255),f,b
 10082                           
 10083                           ; BSR set to: 0
 10084  002254  C08A  FFD9         	movff	strtod@s,fsr2l
 10085  002258  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10086  00225C  50DF               	movf	indf2,w,c
 10087  00225E  EC8A  F028         	call	_isdigit
 10088  002262  A0D8               	btfss	status,0,c
 10089  002264  D028               	goto	l1521
 10090  002266  C08A  FFD9         	movff	strtod@s,fsr2l
 10091  00226A  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10092  00226E  50DF               	movf	indf2,w,c
 10093  002270  6E2D               	movwf	??_strtod& (0+255),c
 10094  002272  0100               	movlb	0	; () banked
 10095  002274  518E               	movf	strtod@eexp& (0+255),w,b
 10096  002276  0D0A               	mullw	10
 10097  002278  50F3               	movf	prodl,w,c
 10098  00227A  242D               	addwf	??_strtod,w,c
 10099  00227C  0FD0               	addlw	208
 10100  00227E  0100               	movlb	0	; () banked
 10101  002280  6F8E               	movwf	strtod@eexp& (0+255),b
 10102                           
 10103                           ; BSR set to: 0
 10104  002282  0100               	movlb	0	; () banked
 10105  002284  4B8A               	infsnz	strtod@s& (0+255),f,b
 10106  002286  2B8B               	incf	(strtod@s+1)& (0+255),f,b
 10107                           
 10108                           ; BSR set to: 0
 10109  002288  C08A  FFD9         	movff	strtod@s,fsr2l
 10110  00228C  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10111  002290  50DF               	movf	indf2,w,c
 10112  002292  EC8A  F028         	call	_isdigit
 10113  002296  A0D8               	btfss	status,0,c
 10114  002298  D00E               	goto	l1521
 10115  00229A  C08A  FFD9         	movff	strtod@s,fsr2l
 10116  00229E  C08B  FFDA         	movff	strtod@s+1,fsr2h
 10117  0022A2  50DF               	movf	indf2,w,c
 10118  0022A4  6E2D               	movwf	??_strtod& (0+255),c
 10119  0022A6  0100               	movlb	0	; () banked
 10120  0022A8  518E               	movf	strtod@eexp& (0+255),w,b
 10121  0022AA  0D0A               	mullw	10
 10122  0022AC  50F3               	movf	prodl,w,c
 10123  0022AE  242D               	addwf	??_strtod,w,c
 10124  0022B0  0FD0               	addlw	208
 10125  0022B2  0100               	movlb	0	; () banked
 10126  0022B4  6F8E               	movwf	strtod@eexp& (0+255),b
 10127  0022B6                     l1521:
 10128  0022B6  FFFF               	dw	65535	; assembler added errata NOP
 10129                           
 10130                           ; BSR set to: 0
 10131                           
 10132                           ; BSR set to: 0
 10133                           
 10134                           ; BSR set to: 0
 10135  0022B8  0100               	movlb	0	; () banked
 10136  0022BA  A78F               	btfss	strtod@flags& (0+255),3,b
 10137  0022BC  D002               	goto	l1522
 10138                           
 10139                           ; BSR set to: 0
 10140  0022BE  0100               	movlb	0	; () banked
 10141  0022C0  6D8E               	negf	strtod@eexp& (0+255),b
 10142  0022C2                     l1522:
 10143  0022C2  FFFF               	dw	65535	; assembler added errata NOP
 10144                           
 10145                           ; BSR set to: 0
 10146                           
 10147                           ; BSR set to: 0
 10148                           
 10149                           ; BSR set to: 0
 10150  0022C4  0100               	movlb	0	; () banked
 10151  0022C6  518E               	movf	strtod@eexp& (0+255),w,b
 10152  0022C8  0100               	movlb	0	; () banked
 10153  0022CA  2790               	addwf	strtod@expon& (0+255),f,b
 10154                           
 10155                           ; BSR set to: 0
 10156  0022CC  0100               	movlb	0	; () banked
 10157  0022CE  518C               	movf	strtod@res& (0+255),w,b
 10158  0022D0  0100               	movlb	0	; () banked
 10159  0022D2  118D               	iorwf	(strtod@res+1)& (0+255),w,b
 10160  0022D4  B4D8               	btfsc	status,2,c
 10161  0022D6  D00B               	goto	l1523
 10162                           
 10163                           ; BSR set to: 0
 10164  0022D8  0100               	movlb	0	; () banked
 10165  0022DA  A38F               	btfss	strtod@flags& (0+255),1,b
 10166  0022DC  D008               	goto	l1523
 10167                           
 10168                           ; BSR set to: 0
 10169  0022DE  C08C  FFD9         	movff	strtod@res,fsr2l
 10170  0022E2  C08D  FFDA         	movff	strtod@res+1,fsr2h
 10171  0022E6  C08A  FFDE         	movff	strtod@s,postinc2
 10172  0022EA  C08B  FFDD         	movff	strtod@s+1,postdec2
 10173  0022EE                     l1523:
 10174  0022EE  FFFF               	dw	65535	; assembler added errata NOP
 10175                           
 10176                           ; BSR set to: 0
 10177                           
 10178                           ; BSR set to: 0
 10179  0022F0  C091  F021         	movff	strtod@_u,___altoft@c
 10180  0022F4  C092  F022         	movff	strtod@_u+1,___altoft@c+1
 10181  0022F8  C093  F023         	movff	strtod@_u+2,___altoft@c+2
 10182  0022FC  C094  F024         	movff	strtod@_u+3,___altoft@c+3
 10183  002300  EC50  F02F         	call	___altoft	;wreg free
 10184  002304  C021  F091         	movff	?___altoft,strtod@_u
 10185  002308  C022  F092         	movff	?___altoft+1,strtod@_u+1
 10186  00230C  C023  F093         	movff	?___altoft+2,strtod@_u+2
 10187  002310  0100               	movlb	0	; () banked
 10188  002312  5191               	movf	strtod@_u& (0+255),w,b
 10189  002314  0100               	movlb	0	; () banked
 10190  002316  1192               	iorwf	(strtod@_u+1)& (0+255),w,b
 10191  002318  0100               	movlb	0	; () banked
 10192  00231A  1193               	iorwf	(strtod@_u+2)& (0+255),w,b
 10193  00231C  A4D8               	btfss	status,2,c
 10194  00231E  D005               	goto	l1524
 10195                           
 10196                           ; BSR set to: 0
 10197  002320  0E00               	movlw	0
 10198  002322  0100               	movlb	0	; () banked
 10199  002324  6F8A               	movwf	?_strtod& (0+255),b
 10200  002326  0E00               	movlw	0
 10201  002328  D0C8               	goto	L30
 10202  00232A                     l1524:
 10203  00232A  FFFF               	dw	65535	; assembler added errata NOP
 10204                           
 10205                           ; BSR set to: 0
 10206                           
 10207                           ; BSR set to: 0
 10208  00232C  0100               	movlb	0	; () banked
 10209  00232E  AF90               	btfss	strtod@expon& (0+255),7,b
 10210  002330  D05A               	goto	l1526
 10211                           
 10212                           ; BSR set to: 0
 10213  002332  0100               	movlb	0	; () banked
 10214  002334  6D90               	negf	strtod@expon& (0+255),b
 10215  002336  D01B               	goto	l1527
 10216  002338  FFFF               	dw	65535	; assembler added errata NOP
 10217                           
 10218                           ; BSR set to: 0
 10219                           
 10220                           ; BSR set to: 0
 10221  00233A  C091  F07B         	movff	strtod@_u,___ftdiv@f1
 10222  00233E  C092  F07C         	movff	strtod@_u+1,___ftdiv@f1+1
 10223  002342  C093  F07D         	movff	strtod@_u+2,___ftdiv@f1+2
 10224  002346  0E03               	movlw	3
 10225  002348  0100               	movlb	0	; () banked
 10226  00234A  6F7E               	movwf	___ftdiv@f2& (0+255),b
 10227  00234C  0E15               	movlw	21
 10228  00234E  0100               	movlb	0	; () banked
 10229  002350  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 10230  002352  0E50               	movlw	80
 10231  002354  0100               	movlb	0	; () banked
 10232  002356  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 10233  002358  ECB0  F03B         	call	___ftdiv	;wreg free
 10234  00235C  C07B  F091         	movff	?___ftdiv,strtod@_u
 10235  002360  C07C  F092         	movff	?___ftdiv+1,strtod@_u+1
 10236  002364  C07D  F093         	movff	?___ftdiv+2,strtod@_u+2
 10237  002368  0EF6               	movlw	246
 10238  00236A  0100               	movlb	0	; () banked
 10239  00236C  2790               	addwf	strtod@expon& (0+255),f,b
 10240  00236E                     l1527:
 10241  00236E  FFFF               	dw	65535	; assembler added errata NOP
 10242                           
 10243                           ; BSR set to: 0
 10244                           
 10245                           ; BSR set to: 0
 10246  002370  0100               	movlb	0	; () banked
 10247  002372  5190               	movf	strtod@expon& (0+255),w,b
 10248  002374  0A80               	xorlw	128
 10249  002376  0F76               	addlw	-138
 10250  002378  A0D8               	btfss	status,0,c
 10251  00237A  D01B               	goto	l1530
 10252  00237C  D7DD               	goto	l1528
 10253  00237E  FFFF               	dw	65535	; assembler added errata NOP
 10254                           
 10255                           ; BSR set to: 0
 10256                           
 10257                           ; BSR set to: 0
 10258  002380  C091  F07B         	movff	strtod@_u,___ftdiv@f1
 10259  002384  C092  F07C         	movff	strtod@_u+1,___ftdiv@f1+1
 10260  002388  C093  F07D         	movff	strtod@_u+2,___ftdiv@f1+2
 10261  00238C  0E00               	movlw	0
 10262  00238E  0100               	movlb	0	; () banked
 10263  002390  6F7E               	movwf	___ftdiv@f2& (0+255),b
 10264  002392  0E20               	movlw	32
 10265  002394  0100               	movlb	0	; () banked
 10266  002396  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 10267  002398  0E41               	movlw	65
 10268  00239A  0100               	movlb	0	; () banked
 10269  00239C  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 10270  00239E  ECB0  F03B         	call	___ftdiv	;wreg free
 10271  0023A2  C07B  F091         	movff	?___ftdiv,strtod@_u
 10272  0023A6  C07C  F092         	movff	?___ftdiv+1,strtod@_u+1
 10273  0023AA  C07D  F093         	movff	?___ftdiv+2,strtod@_u+2
 10274  0023AE  0100               	movlb	0	; () banked
 10275  0023B0  0790               	decf	strtod@expon& (0+255),f,b
 10276  0023B2                     l1530:
 10277  0023B2  FFFF               	dw	65535	; assembler added errata NOP
 10278                           
 10279                           ; BSR set to: 0
 10280                           
 10281                           ; BSR set to: 0
 10282  0023B4  0100               	movlb	0	; () banked
 10283  0023B6  5190               	movf	strtod@expon& (0+255),w,b
 10284  0023B8  0100               	movlb	0	; () banked
 10285  0023BA  A4D8               	btfss	status,2,c
 10286  0023BC  D7E0               	goto	l1531
 10287                           
 10288                           ; BSR set to: 0
 10289                           
 10290                           ; BSR set to: 0
 10291  0023BE  C091  F01F         	movff	strtod@_u,___ftge@ff1
 10292  0023C2  C092  F020         	movff	strtod@_u+1,___ftge@ff1+1
 10293  0023C6  C093  F021         	movff	strtod@_u+2,___ftge@ff1+2
 10294  0023CA  0E00               	movlw	0
 10295  0023CC  6E22               	movwf	___ftge@ff2,c
 10296  0023CE  0E80               	movlw	128
 10297  0023D0  6E23               	movwf	___ftge@ff2+1,c
 10298  0023D2  0E00               	movlw	0
 10299  0023D4  6E24               	movwf	___ftge@ff2+2,c
 10300  0023D6  EC7A  F031         	call	___ftge	;wreg free
 10301  0023DA  B0D8               	btfsc	status,0,c
 10302  0023DC  D076               	goto	l1543
 10303  0023DE  0100               	movlb	0	; () banked
 10304  0023E0  B18F               	btfsc	strtod@flags& (0+255),0,b
 10305  0023E2  D05D               	goto	u10540
 10306  0023E4  D065               	goto	l1544
 10307  0023E6                     l1526:
 10308  0023E6  FFFF               	dw	65535	; assembler added errata NOP
 10309                           
 10310                           ; BSR set to: 0
 10311                           
 10312                           ; BSR set to: 0
 10313  0023E8  0100               	movlb	0	; () banked
 10314  0023EA  5190               	movf	strtod@expon& (0+255),w,b
 10315  0023EC  0A80               	xorlw	128
 10316  0023EE  0F7F               	addlw	-129
 10317  0023F0  B0D8               	btfsc	status,0,c
 10318  0023F2  D01C               	goto	l1537
 10319  0023F4  D06A               	goto	l1543
 10320  0023F6  FFFF               	dw	65535	; assembler added errata NOP
 10321                           
 10322                           ; BSR set to: 0
 10323                           
 10324                           ; BSR set to: 0
 10325  0023F8  C091  F06C         	movff	strtod@_u,___ftmul@f1
 10326  0023FC  C092  F06D         	movff	strtod@_u+1,___ftmul@f1+1
 10327  002400  C093  F06E         	movff	strtod@_u+2,___ftmul@f1+2
 10328  002404  0E03               	movlw	3
 10329  002406  0100               	movlb	0	; () banked
 10330  002408  6F6F               	movwf	___ftmul@f2& (0+255),b
 10331  00240A  0E15               	movlw	21
 10332  00240C  0100               	movlb	0	; () banked
 10333  00240E  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 10334  002410  0E50               	movlw	80
 10335  002412  0100               	movlb	0	; () banked
 10336  002414  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 10337  002416  EC53  F03C         	call	___ftmul	;wreg free
 10338  00241A  C06C  F091         	movff	?___ftmul,strtod@_u
 10339  00241E  C06D  F092         	movff	?___ftmul+1,strtod@_u+1
 10340  002422  C06E  F093         	movff	?___ftmul+2,strtod@_u+2
 10341  002426  0EF6               	movlw	246
 10342  002428  0100               	movlb	0	; () banked
 10343  00242A  2790               	addwf	strtod@expon& (0+255),f,b
 10344  00242C                     l1537:
 10345  00242C  FFFF               	dw	65535	; assembler added errata NOP
 10346                           
 10347                           ; BSR set to: 0
 10348                           
 10349                           ; BSR set to: 0
 10350  00242E  0E0A               	movlw	10
 10351  002430  0100               	movlb	0	; () banked
 10352  002432  6190               	cpfslt	strtod@expon& (0+255),b
 10353  002434  D7E0               	goto	l1538
 10354  002436  D01A               	goto	l1540
 10355  002438  FFFF               	dw	65535	; assembler added errata NOP
 10356                           
 10357                           ; BSR set to: 0
 10358                           
 10359                           ; BSR set to: 0
 10360  00243A  C091  F06C         	movff	strtod@_u,___ftmul@f1
 10361  00243E  C092  F06D         	movff	strtod@_u+1,___ftmul@f1+1
 10362  002442  C093  F06E         	movff	strtod@_u+2,___ftmul@f1+2
 10363  002446  0E00               	movlw	0
 10364  002448  0100               	movlb	0	; () banked
 10365  00244A  6F6F               	movwf	___ftmul@f2& (0+255),b
 10366  00244C  0E20               	movlw	32
 10367  00244E  0100               	movlb	0	; () banked
 10368  002450  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 10369  002452  0E41               	movlw	65
 10370  002454  0100               	movlb	0	; () banked
 10371  002456  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 10372  002458  EC53  F03C         	call	___ftmul	;wreg free
 10373  00245C  C06C  F091         	movff	?___ftmul,strtod@_u
 10374  002460  C06D  F092         	movff	?___ftmul+1,strtod@_u+1
 10375  002464  C06E  F093         	movff	?___ftmul+2,strtod@_u+2
 10376  002468  0100               	movlb	0	; () banked
 10377  00246A  0790               	decf	strtod@expon& (0+255),f,b
 10378  00246C                     l1540:
 10379  00246C  FFFF               	dw	65535	; assembler added errata NOP
 10380                           
 10381                           ; BSR set to: 0
 10382                           
 10383                           ; BSR set to: 0
 10384  00246E  0100               	movlb	0	; () banked
 10385  002470  5190               	movf	strtod@expon& (0+255),w,b
 10386  002472  0100               	movlb	0	; () banked
 10387  002474  A4D8               	btfss	status,2,c
 10388  002476  D7E0               	goto	l1541
 10389                           
 10390                           ; BSR set to: 0
 10391                           
 10392                           ; BSR set to: 0
 10393  002478  0EFF               	movlw	255
 10394  00247A  6E1F               	movwf	___ftge@ff1,c
 10395  00247C  0E7F               	movlw	127
 10396  00247E  6E20               	movwf	___ftge@ff1+1,c
 10397  002480  0E7F               	movlw	127
 10398  002482  6E21               	movwf	___ftge@ff1+2,c
 10399  002484  C091  F022         	movff	strtod@_u,___ftge@ff2
 10400  002488  C092  F023         	movff	strtod@_u+1,___ftge@ff2+1
 10401  00248C  C093  F024         	movff	strtod@_u+2,___ftge@ff2+2
 10402  002490  EC7A  F031         	call	___ftge	;wreg free
 10403  002494  B0D8               	btfsc	status,0,c
 10404  002496  D019               	goto	l1543
 10405  002498  0100               	movlb	0	; () banked
 10406  00249A  A18F               	btfss	strtod@flags& (0+255),0,b
 10407  00249C  D009               	goto	l1544
 10408  00249E                     u10540:
 10409  00249E  FFFF               	dw	65535	; assembler added errata NOP
 10410                           
 10411                           ; BSR set to: 0
 10412  0024A0  0E00               	movlw	0
 10413  0024A2  0100               	movlb	0	; () banked
 10414  0024A4  6F8A               	movwf	?_strtod& (0+255),b
 10415  0024A6  0E80               	movlw	128
 10416  0024A8  0100               	movlb	0	; () banked
 10417  0024AA  6F8B               	movwf	(?_strtod+1)& (0+255),b
 10418  0024AC  0E80               	movlw	128
 10419  0024AE  D009               	goto	L10
 10420  0024B0                     l1544:
 10421  0024B0  FFFF               	dw	65535	; assembler added errata NOP
 10422                           
 10423                           ; BSR set to: 0
 10424                           
 10425                           ; BSR set to: 0
 10426  0024B2  0E00               	movlw	0
 10427  0024B4  0100               	movlb	0	; () banked
 10428  0024B6  6F8A               	movwf	?_strtod& (0+255),b
 10429  0024B8  0E80               	movlw	128
 10430  0024BA                     L30:
 10431  0024BA  FFFF               	dw	65535	; assembler added errata NOP
 10432  0024BC  0100               	movlb	0	; () banked
 10433  0024BE  6F8B               	movwf	(?_strtod+1)& (0+255),b
 10434  0024C0  0E00               	movlw	0
 10435  0024C2                     L10:
 10436  0024C2  FFFF               	dw	65535	; assembler added errata NOP
 10437  0024C4  0100               	movlb	0	; () banked
 10438  0024C6  6F8C               	movwf	(?_strtod+2)& (0+255),b
 10439                           
 10440                           ; BSR set to: 0
 10441  0024C8  D019               	goto	l10261
 10442  0024CA                     l1543:
 10443  0024CA  FFFF               	dw	65535	; assembler added errata NOP
 10444                           
 10445                           ; BSR set to: 0
 10446                           
 10447                           ; BSR set to: 0
 10448  0024CC  0100               	movlb	0	; () banked
 10449  0024CE  A18F               	btfss	strtod@flags& (0+255),0,b
 10450  0024D0  D00E               	goto	l1545
 10451                           
 10452                           ; BSR set to: 0
 10453  0024D2  C091  F01C         	movff	strtod@_u,___ftneg@f1
 10454  0024D6  C092  F01D         	movff	strtod@_u+1,___ftneg@f1+1
 10455  0024DA  C093  F01E         	movff	strtod@_u+2,___ftneg@f1+2
 10456  0024DE  ECFB  F028         	call	___ftneg	;wreg free
 10457  0024E2  C01C  F091         	movff	?___ftneg,strtod@_u
 10458  0024E6  C01D  F092         	movff	?___ftneg+1,strtod@_u+1
 10459  0024EA  C01E  F093         	movff	?___ftneg+2,strtod@_u+2
 10460  0024EE                     l1545:
 10461  0024EE  FFFF               	dw	65535	; assembler added errata NOP
 10462  0024F0  C091  F08A         	movff	strtod@_u,?_strtod
 10463  0024F4  C092  F08B         	movff	strtod@_u+1,?_strtod+1
 10464  0024F8  C093  F08C         	movff	strtod@_u+2,?_strtod+2
 10465  0024FC                     l10261:
 10466  0024FC  FFFF               	dw	65535	; assembler added errata NOP
 10467  0024FE  0012               	return		;funcret
 10468  002500  FFFF               	dw	65535	; errata NOP
 10469  002502                     __end_of_strtod:
 10470                           	opt stack 0
 10471                           tblptru	equ	0xFF8
 10472                           tblptrh	equ	0xFF7
 10473                           tblptrl	equ	0xFF6
 10474                           tablat	equ	0xFF5
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           postinc0	equ	0xFEE
 10478                           wreg	equ	0xFE8
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           postdec2	equ	0xFDD
 10482                           plusw2	equ	0xFDB
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _isspace *****************
 10488 ;; Defined at:
 10489 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isspace.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;  c               1    wreg     unsigned char 
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;  c               1   26[COMRAM] unsigned char 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;		None               void
 10496 ;; Registers used:
 10497 ;;		wreg, status,2, status,0
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10503 ;;      Params:         0       0       0       0       0       0       0
 10504 ;;      Locals:         2       0       0       0       0       0       0
 10505 ;;      Temps:          1       0       0       0       0       0       0
 10506 ;;      Totals:         3       0       0       0       0       0       0
 10507 ;;Total ram usage:        3 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    1
 10510 ;; This function calls:
 10511 ;;		Nothing
 10512 ;; This function is called by:
 10513 ;;		_strtod
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text42
 10518  0052FC                     __ptext42:
 10519                           	opt stack 0
 10520  0052FC                     _isspace:
 10521                           	opt stack 0
 10522  0052FC  FFFF               	dw	65535	; assembler added errata NOP
 10523                           
 10524                           ;incstack = 0
 10525                           ;isspace@c stored from wreg
 10526  0052FE  6E1B               	movwf	isspace@c,c
 10527  005300  0E01               	movlw	1
 10528  005302  6E1A               	movwf	_isspace$2883,c
 10529  005304  0E20               	movlw	32
 10530  005306  181B               	xorwf	isspace@c,w,c
 10531  005308  B4D8               	btfsc	status,2,c
 10532  00530A  D009               	goto	l1804
 10533  00530C  0E0E               	movlw	14
 10534  00530E  601B               	cpfslt	isspace@c,c
 10535  005310  D003               	goto	u9130
 10536  005312  0E09               	movlw	9
 10537  005314  601B               	cpfslt	isspace@c,c
 10538  005316  D003               	goto	l1804
 10539  005318                     u9130:
 10540  005318  FFFF               	dw	65535	; assembler added errata NOP
 10541  00531A  0E00               	movlw	0
 10542  00531C  6E1A               	movwf	_isspace$2883,c
 10543  00531E                     l1804:
 10544  00531E  FFFF               	dw	65535	; assembler added errata NOP
 10545  005320  C01A  F019         	movff	_isspace$2883,??_isspace
 10546  005324  3019               	rrcf	??_isspace,w,c
 10547  005326  0012               	return		;funcret
 10548  005328  FFFF               	dw	65535	; errata NOP
 10549  00532A                     __end_of_isspace:
 10550                           	opt stack 0
 10551                           tblptru	equ	0xFF8
 10552                           tblptrh	equ	0xFF7
 10553                           tblptrl	equ	0xFF6
 10554                           tablat	equ	0xFF5
 10555                           prodl	equ	0xFF3
 10556                           intcon	equ	0xFF2
 10557                           postinc0	equ	0xFEE
 10558                           wreg	equ	0xFE8
 10559                           indf2	equ	0xFDF
 10560                           postinc2	equ	0xFDE
 10561                           postdec2	equ	0xFDD
 10562                           plusw2	equ	0xFDB
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function ___altoft *****************
 10568 ;; Defined at:
 10569 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  c               4   32[COMRAM] long 
 10572 ;; Auto vars:     Size  Location     Type
 10573 ;;  sign            1   41[COMRAM] unsigned char 
 10574 ;;  exp             1   40[COMRAM] unsigned char 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  3   32[COMRAM] float 
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10584 ;;      Params:         4       0       0       0       0       0       0
 10585 ;;      Locals:         2       0       0       0       0       0       0
 10586 ;;      Temps:          4       0       0       0       0       0       0
 10587 ;;      Totals:        10       0       0       0       0       0       0
 10588 ;;Total ram usage:       10 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    2
 10591 ;; This function calls:
 10592 ;;		___ftpack
 10593 ;; This function is called by:
 10594 ;;		_strtod
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text43
 10599  005EA0                     __ptext43:
 10600                           	opt stack 0
 10601  005EA0                     ___altoft:
 10602                           	opt stack 0
 10603  005EA0  FFFF               	dw	65535	; assembler added errata NOP
 10604                           
 10605                           ;incstack = 0
 10606  005EA2  0E00               	movlw	0
 10607  005EA4  6E2A               	movwf	___altoft@sign,c
 10608  005EA6  0E8E               	movlw	142
 10609  005EA8  6E29               	movwf	___altoft@exp,c
 10610  005EAA  AE24               	btfss	___altoft@c+3,7,c
 10611  005EAC  D012               	goto	l1413
 10612  005EAE  1E24               	comf	___altoft@c+3,f,c
 10613  005EB0  1E23               	comf	___altoft@c+2,f,c
 10614  005EB2  1E22               	comf	___altoft@c+1,f,c
 10615  005EB4  6C21               	negf	___altoft@c,c
 10616  005EB6  0E00               	movlw	0
 10617  005EB8  2222               	addwfc	___altoft@c+1,f,c
 10618  005EBA  2223               	addwfc	___altoft@c+2,f,c
 10619  005EBC  2224               	addwfc	___altoft@c+3,f,c
 10620  005EBE  0E01               	movlw	1
 10621  005EC0  6E2A               	movwf	___altoft@sign,c
 10622  005EC2  D007               	goto	l1413
 10623  005EC4  FFFF               	dw	65535	; assembler added errata NOP
 10624  005EC6  90D8               	bcf	status,0,c
 10625  005EC8  3224               	rrcf	___altoft@c+3,f,c
 10626  005ECA  3223               	rrcf	___altoft@c+2,f,c
 10627  005ECC  3222               	rrcf	___altoft@c+1,f,c
 10628  005ECE  3221               	rrcf	___altoft@c,f,c
 10629  005ED0  2A29               	incf	___altoft@exp,f,c
 10630  005ED2                     l1413:
 10631  005ED2  FFFF               	dw	65535	; assembler added errata NOP
 10632  005ED4  0E00               	movlw	0
 10633  005ED6  1421               	andwf	___altoft@c,w,c
 10634  005ED8  6E25               	movwf	??___altoft& (0+255),c
 10635  005EDA  0E00               	movlw	0
 10636  005EDC  1422               	andwf	___altoft@c+1,w,c
 10637  005EDE  6E26               	movwf	(??___altoft+1)& (0+255),c
 10638  005EE0  0E00               	movlw	0
 10639  005EE2  1423               	andwf	___altoft@c+2,w,c
 10640  005EE4  6E27               	movwf	(??___altoft+2)& (0+255),c
 10641  005EE6  0EFF               	movlw	255
 10642  005EE8  1424               	andwf	___altoft@c+3,w,c
 10643  005EEA  6E28               	movwf	(??___altoft+3)& (0+255),c
 10644  005EEC  5025               	movf	??___altoft,w,c
 10645  005EEE  1026               	iorwf	??___altoft+1,w,c
 10646  005EF0  1027               	iorwf	??___altoft+2,w,c
 10647  005EF2  1028               	iorwf	??___altoft+3,w,c
 10648  005EF4  A4D8               	btfss	status,2,c
 10649  005EF6  D7E6               	goto	l1414
 10650  005EF8  C021  F019         	movff	___altoft@c,___ftpack@arg
 10651  005EFC  C022  F01A         	movff	___altoft@c+1,___ftpack@arg+1
 10652  005F00  C023  F01B         	movff	___altoft@c+2,___ftpack@arg+2
 10653  005F04  C029  F01C         	movff	___altoft@exp,___ftpack@exp
 10654  005F08  C02A  F01D         	movff	___altoft@sign,___ftpack@sign
 10655  005F0C  EC51  F034         	call	___ftpack	;wreg free
 10656  005F10  C019  F021         	movff	?___ftpack,?___altoft
 10657  005F14  C01A  F022         	movff	?___ftpack+1,?___altoft+1
 10658  005F18  C01B  F023         	movff	?___ftpack+2,?___altoft+2
 10659  005F1C  0012               	return		;funcret
 10660  005F1E  FFFF               	dw	65535	; errata NOP
 10661  005F20                     __end_of___altoft:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodl	equ	0xFF3
 10668                           intcon	equ	0xFF2
 10669                           postinc0	equ	0xFEE
 10670                           wreg	equ	0xFE8
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           plusw2	equ	0xFDB
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function _Save_Variables *****************
 10680 ;; Defined at:
 10681 ;;		line 41 in file "InitVariables.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  data           53    0[BANK0 ] struct data_var
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  1    wreg      void 
 10688 ;; Registers used:
 10689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10695 ;;      Params:         0       0       0       0       0       0       0
 10696 ;;      Locals:         0      53       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0
 10698 ;;      Totals:         0      53       0       0       0       0       0
 10699 ;;Total ram usage:       53 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    3
 10702 ;; This function calls:
 10703 ;;		_get_LP_RC_Constant
 10704 ;;		_get_PID_Kp
 10705 ;;		_get_PID_T
 10706 ;;		_get_PID_Td
 10707 ;;		_get_PID_Ti
 10708 ;;		_get_PID_deadband
 10709 ;;		_get_PID_setpoint
 10710 ;;		_get_VL1_span
 10711 ;;		_get_VL1_zero
 10712 ;;		_get_VL2_span
 10713 ;;		_get_VL2_zero
 10714 ;;		_get_VL3_span
 10715 ;;		_get_VL3_zero
 10716 ;;		_get_Vin_span
 10717 ;;		_get_Vin_zero
 10718 ;;		_get_max_VL
 10719 ;;		_get_min_VL
 10720 ;;		_wr_string_EE
 10721 ;; This function is called by:
 10722 ;;		_cal_analog
 10723 ;;		_set_list
 10724 ;;		_main
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text44
 10729  0074FA                     __ptext44:
 10730                           	opt stack 0
 10731  0074FA                     _Save_Variables:
 10732                           	opt stack 0
 10733  0074FA  FFFF               	dw	65535	; assembler added errata NOP
 10734                           
 10735                           ;InitVariables.c: 43: union data_var data;
 10736                           ;InitVariables.c: 45: data.code=1234;
 10737                           
 10738                           ;incstack = 0
 10739  0074FC  0E04               	movlw	4
 10740  0074FE  0100               	movlb	0	; () banked
 10741  007500  6F61               	movwf	(Save_Variables@data+1)& (0+255),b
 10742  007502  0ED2               	movlw	210
 10743  007504  6F60               	movwf	Save_Variables@data& (0+255),b
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;InitVariables.c: 46: data.kp=get_PID_Kp();
 10747  007506  EC1B  F027         	call	_get_PID_Kp	;wreg free
 10748  00750A  C019  F062         	movff	?_get_PID_Kp,Save_Variables@data+2
 10749  00750E  C01A  F063         	movff	?_get_PID_Kp+1,Save_Variables@data+3
 10750  007512  C01B  F064         	movff	?_get_PID_Kp+2,Save_Variables@data+4
 10751                           
 10752                           ;InitVariables.c: 47: data.ti=get_PID_Ti();
 10753  007516  EC36  F027         	call	_get_PID_Ti	;wreg free
 10754  00751A  C019  F065         	movff	?_get_PID_Ti,Save_Variables@data+5
 10755  00751E  C01A  F066         	movff	?_get_PID_Ti+1,Save_Variables@data+6
 10756  007522  C01B  F067         	movff	?_get_PID_Ti+2,Save_Variables@data+7
 10757                           
 10758                           ;InitVariables.c: 48: data.td=get_PID_Td();
 10759  007526  EC2D  F027         	call	_get_PID_Td	;wreg free
 10760  00752A  C019  F068         	movff	?_get_PID_Td,Save_Variables@data+8
 10761  00752E  C01A  F069         	movff	?_get_PID_Td+1,Save_Variables@data+9
 10762  007532  C01B  F06A         	movff	?_get_PID_Td+2,Save_Variables@data+10
 10763                           
 10764                           ;InitVariables.c: 49: data.T_sample=get_PID_T();
 10765  007536  EC24  F027         	call	_get_PID_T	;wreg free
 10766  00753A  C019  F06B         	movff	?_get_PID_T,Save_Variables@data+11
 10767  00753E  C01A  F06C         	movff	?_get_PID_T+1,Save_Variables@data+12
 10768  007542  C01B  F06D         	movff	?_get_PID_T+2,Save_Variables@data+13
 10769                           
 10770                           ;InitVariables.c: 50: data.set_point=get_PID_setpoint();
 10771  007546  EC3F  F027         	call	_get_PID_setpoint	;wreg free
 10772  00754A  C019  F06E         	movff	?_get_PID_setpoint,Save_Variables@data+14
 10773  00754E  C01A  F06F         	movff	?_get_PID_setpoint+1,Save_Variables@data+15
 10774  007552  C01B  F070         	movff	?_get_PID_setpoint+2,Save_Variables@data+16
 10775                           
 10776                           ;InitVariables.c: 51: data.deadband=get_PID_deadband();
 10777  007556  EC55  F026         	call	_get_PID_deadband	;wreg free
 10778  00755A  C019  F071         	movff	?_get_PID_deadband,Save_Variables@data+17
 10779  00755E  C01A  F072         	movff	?_get_PID_deadband+1,Save_Variables@data+18
 10780  007562  C01B  F073         	movff	?_get_PID_deadband+2,Save_Variables@data+19
 10781                           
 10782                           ;InitVariables.c: 52: data.RC_Constant=get_LP_RC_Constant();
 10783  007566  EC12  F027         	call	_get_LP_RC_Constant	;wreg free
 10784  00756A  C019  F074         	movff	?_get_LP_RC_Constant,Save_Variables@data+20
 10785  00756E  C01A  F075         	movff	?_get_LP_RC_Constant+1,Save_Variables@data+21
 10786  007572  C01B  F076         	movff	?_get_LP_RC_Constant+2,Save_Variables@data+22
 10787                           
 10788                           ;InitVariables.c: 53: data.max_VL=get_max_VL();
 10789  007576  EC90  F027         	call	_get_max_VL	;wreg free
 10790  00757A  C019  F077         	movff	?_get_max_VL,Save_Variables@data+23
 10791  00757E  C01A  F078         	movff	?_get_max_VL+1,Save_Variables@data+24
 10792  007582  C01B  F079         	movff	?_get_max_VL+2,Save_Variables@data+25
 10793                           
 10794                           ;InitVariables.c: 54: data.min_VL=get_min_VL();
 10795  007586  EC99  F027         	call	_get_min_VL	;wreg free
 10796  00758A  C019  F07A         	movff	?_get_min_VL,Save_Variables@data+26
 10797  00758E  C01A  F07B         	movff	?_get_min_VL+1,Save_Variables@data+27
 10798  007592  C01B  F07C         	movff	?_get_min_VL+2,Save_Variables@data+28
 10799                           
 10800                           ;InitVariables.c: 55: data.V1_zero=get_VL1_zero();
 10801  007596  EC51  F027         	call	_get_VL1_zero	;wreg free
 10802  00759A  C019  F07D         	movff	?_get_VL1_zero,Save_Variables@data+29
 10803  00759E  C01A  F07E         	movff	?_get_VL1_zero+1,Save_Variables@data+30
 10804  0075A2  C01B  F07F         	movff	?_get_VL1_zero+2,Save_Variables@data+31
 10805                           
 10806                           ;InitVariables.c: 56: data.V2_zero=get_VL2_zero();
 10807  0075A6  EC63  F027         	call	_get_VL2_zero	;wreg free
 10808  0075AA  C019  F080         	movff	?_get_VL2_zero,Save_Variables@data+32
 10809  0075AE  C01A  F081         	movff	?_get_VL2_zero+1,Save_Variables@data+33
 10810  0075B2  C01B  F082         	movff	?_get_VL2_zero+2,Save_Variables@data+34
 10811                           
 10812                           ;InitVariables.c: 57: data.V3_zero=get_VL3_zero();
 10813  0075B6  EC75  F027         	call	_get_VL3_zero	;wreg free
 10814  0075BA  C019  F083         	movff	?_get_VL3_zero,Save_Variables@data+35
 10815  0075BE  C01A  F084         	movff	?_get_VL3_zero+1,Save_Variables@data+36
 10816  0075C2  C01B  F085         	movff	?_get_VL3_zero+2,Save_Variables@data+37
 10817                           
 10818                           ;InitVariables.c: 58: data.V1_span=get_VL1_span();
 10819  0075C6  EC48  F027         	call	_get_VL1_span	;wreg free
 10820  0075CA  C019  F086         	movff	?_get_VL1_span,Save_Variables@data+38
 10821  0075CE  C01A  F087         	movff	?_get_VL1_span+1,Save_Variables@data+39
 10822  0075D2  C01B  F088         	movff	?_get_VL1_span+2,Save_Variables@data+40
 10823                           
 10824                           ;InitVariables.c: 59: data.V2_span=get_VL2_span();
 10825  0075D6  EC5A  F027         	call	_get_VL2_span	;wreg free
 10826  0075DA  C019  F089         	movff	?_get_VL2_span,Save_Variables@data+41
 10827  0075DE  C01A  F08A         	movff	?_get_VL2_span+1,Save_Variables@data+42
 10828  0075E2  C01B  F08B         	movff	?_get_VL2_span+2,Save_Variables@data+43
 10829                           
 10830                           ;InitVariables.c: 60: data.V3_span=get_VL3_span();
 10831  0075E6  EC6C  F027         	call	_get_VL3_span	;wreg free
 10832  0075EA  C019  F08C         	movff	?_get_VL3_span,Save_Variables@data+44
 10833  0075EE  C01A  F08D         	movff	?_get_VL3_span+1,Save_Variables@data+45
 10834  0075F2  C01B  F08E         	movff	?_get_VL3_span+2,Save_Variables@data+46
 10835                           
 10836                           ;InitVariables.c: 61: data.Vin_zero=get_Vin_zero();
 10837  0075F6  EC87  F027         	call	_get_Vin_zero	;wreg free
 10838  0075FA  C019  F08F         	movff	?_get_Vin_zero,Save_Variables@data+47
 10839  0075FE  C01A  F090         	movff	?_get_Vin_zero+1,Save_Variables@data+48
 10840  007602  C01B  F091         	movff	?_get_Vin_zero+2,Save_Variables@data+49
 10841                           
 10842                           ;InitVariables.c: 62: data.Vin_span=get_Vin_span();
 10843  007606  EC7E  F027         	call	_get_Vin_span	;wreg free
 10844  00760A  C019  F092         	movff	?_get_Vin_span,Save_Variables@data+50
 10845  00760E  C01A  F093         	movff	?_get_Vin_span+1,Save_Variables@data+51
 10846  007612  C01B  F094         	movff	?_get_Vin_span+2,Save_Variables@data+52
 10847                           
 10848                           ;InitVariables.c: 63: wr_string_EE(0, 53, &data);
 10849  007616  0E35               	movlw	53
 10850  007618  6E1B               	movwf	wr_string_EE@lenght,c
 10851  00761A  0E60               	movlw	low Save_Variables@data
 10852  00761C  6E1C               	movwf	wr_string_EE@buffer,c
 10853  00761E  0E00               	movlw	high Save_Variables@data
 10854  007620  6E1D               	movwf	wr_string_EE@buffer+1,c
 10855  007622  0E00               	movlw	0
 10856  007624  ECE3  F029         	call	_wr_string_EE
 10857  007628  0012               	return		;funcret
 10858  00762A  FFFF               	dw	65535	; errata NOP
 10859  00762C                     __end_of_Save_Variables:
 10860                           	opt stack 0
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodl	equ	0xFF3
 10866                           intcon	equ	0xFF2
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           indf2	equ	0xFDF
 10870                           postinc2	equ	0xFDE
 10871                           postdec2	equ	0xFDD
 10872                           plusw2	equ	0xFDB
 10873                           fsr2h	equ	0xFDA
 10874                           fsr2l	equ	0xFD9
 10875                           status	equ	0xFD8
 10876                           
 10877 ;; *************** function _wr_string_EE *****************
 10878 ;; Defined at:
 10879 ;;		line 13 in file "EEprom.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;  addr            1    wreg     unsigned char 
 10882 ;;  lenght          1   26[COMRAM] unsigned char 
 10883 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 10884 ;;		 -> Save_Variables@data(53), 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  addr            1   29[COMRAM] unsigned char 
 10887 ;;  i               1   30[COMRAM] unsigned char 
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10897 ;;      Params:         3       0       0       0       0       0       0
 10898 ;;      Locals:         2       0       0       0       0       0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0
 10900 ;;      Totals:         5       0       0       0       0       0       0
 10901 ;;Total ram usage:        5 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; Hardware stack levels required when called:    2
 10904 ;; This function calls:
 10905 ;;		_wr_byte_EE
 10906 ;; This function is called by:
 10907 ;;		_Save_Variables
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text45
 10912  0053C6                     __ptext45:
 10913                           	opt stack 0
 10914  0053C6                     _wr_string_EE:
 10915                           	opt stack 0
 10916  0053C6  FFFF               	dw	65535	; assembler added errata NOP
 10917                           
 10918                           ;incstack = 0
 10919                           ;wr_string_EE@addr stored from wreg
 10920  0053C8  6E1E               	movwf	wr_string_EE@addr,c
 10921                           
 10922                           ;EEprom.c: 15: char i;
 10923                           ;EEprom.c: 17: for(i=0;i<lenght;i++)
 10924  0053CA  0E00               	movlw	0
 10925  0053CC  6E1F               	movwf	wr_string_EE@i,c
 10926  0053CE  D00E               	goto	l287
 10927  0053D0  FFFF               	dw	65535	; assembler added errata NOP
 10928                           
 10929                           ;EEprom.c: 18: wr_byte_EE(addr++,*buffer++);
 10930  0053D2  C01C  FFD9         	movff	wr_string_EE@buffer,fsr2l
 10931  0053D6  C01D  FFDA         	movff	wr_string_EE@buffer+1,fsr2h
 10932  0053DA  50DF               	movf	indf2,w,c
 10933  0053DC  6E19               	movwf	wr_byte_EE@data,c
 10934  0053DE  501E               	movf	wr_string_EE@addr,w,c
 10935  0053E0  EC67  F029         	call	_wr_byte_EE
 10936  0053E4  4A1C               	infsnz	wr_string_EE@buffer,f,c
 10937  0053E6  2A1D               	incf	wr_string_EE@buffer+1,f,c
 10938  0053E8  2A1E               	incf	wr_string_EE@addr,f,c
 10939  0053EA  2A1F               	incf	wr_string_EE@i,f,c
 10940  0053EC                     l287:
 10941  0053EC  FFFF               	dw	65535	; assembler added errata NOP
 10942  0053EE  501B               	movf	wr_string_EE@lenght,w,c
 10943  0053F0  5C1F               	subwf	wr_string_EE@i,w,c
 10944  0053F2  B0D8               	btfsc	status,0,c
 10945  0053F4  0012               	return		;funcret
 10946  0053F6  FFFF               	dw	65535	; assembler added errata NOP
 10947  0053F8  D7EB               	goto	l288
 10948  0053FA  FFFF               	dw	65535	; errata NOP
 10949  0053FC                     __end_of_wr_string_EE:
 10950                           	opt stack 0
 10951                           tblptru	equ	0xFF8
 10952                           tblptrh	equ	0xFF7
 10953                           tblptrl	equ	0xFF6
 10954                           tablat	equ	0xFF5
 10955                           prodl	equ	0xFF3
 10956                           intcon	equ	0xFF2
 10957                           postinc0	equ	0xFEE
 10958                           wreg	equ	0xFE8
 10959                           indf2	equ	0xFDF
 10960                           postinc2	equ	0xFDE
 10961                           postdec2	equ	0xFDD
 10962                           plusw2	equ	0xFDB
 10963                           fsr2h	equ	0xFDA
 10964                           fsr2l	equ	0xFD9
 10965                           status	equ	0xFD8
 10966                           
 10967 ;; *************** function _wr_byte_EE *****************
 10968 ;; Defined at:
 10969 ;;		line 45 in file "EEprom.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;  addr            1    wreg     unsigned char 
 10972 ;;  data            1   24[COMRAM] unsigned char 
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;  addr            1   25[COMRAM] unsigned char 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg, status,2
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10984 ;;      Params:         1       0       0       0       0       0       0
 10985 ;;      Locals:         1       0       0       0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0
 10987 ;;      Totals:         2       0       0       0       0       0       0
 10988 ;;Total ram usage:        2 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    1
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_wr_string_EE
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text46
 10999  0052CE                     __ptext46:
 11000                           	opt stack 0
 11001  0052CE                     _wr_byte_EE:
 11002                           	opt stack 0
 11003  0052CE  FFFF               	dw	65535	; assembler added errata NOP
 11004                           
 11005                           ;incstack = 0
 11006                           ;wr_byte_EE@addr stored from wreg
 11007  0052D0  6E1A               	movwf	wr_byte_EE@addr,c
 11008                           
 11009                           ;EEprom.c: 47: EEADR = addr;
 11010  0052D2  C01A  FFA9         	movff	wr_byte_EE@addr,4009	;volatile
 11011                           
 11012                           ;EEprom.c: 48: EEDATA = data;
 11013  0052D6  C019  FFA8         	movff	wr_byte_EE@data,4008	;volatile
 11014                           
 11015                           ;EEprom.c: 49: EECON1bits.EEPGD = 0;
 11016  0052DA  9EA6               	bcf	4006,7,c	;volatile
 11017                           
 11018                           ;EEprom.c: 50: EECON1bits.CFGS=0;
 11019  0052DC  9CA6               	bcf	4006,6,c	;volatile
 11020                           
 11021                           ;EEprom.c: 51: EECON1bits.WREN = 1;
 11022  0052DE  84A6               	bsf	4006,2,c	;volatile
 11023                           
 11024                           ;EEprom.c: 54: INTCONbits.GIE=0;
 11025  0052E0  9EF2               	bcf	intcon,7,c	;volatile
 11026                           
 11027                           ;EEprom.c: 56: EECON2 = 0x55;
 11028  0052E2  0E55               	movlw	85
 11029  0052E4  6EA7               	movwf	4007,c	;volatile
 11030                           
 11031                           ;EEprom.c: 57: EECON2 = 0xaa;
 11032  0052E6  0EAA               	movlw	170
 11033  0052E8  6EA7               	movwf	4007,c	;volatile
 11034                           
 11035                           ;EEprom.c: 59: EECON1bits.WR = 1;
 11036  0052EA  82A6               	bsf	4006,1,c	;volatile
 11037                           
 11038                           ;EEprom.c: 60: INTCONbits.GIE=1;
 11039  0052EC  8EF2               	bsf	intcon,7,c	;volatile
 11040  0052EE  FFFF               	dw	65535	; assembler added errata NOP
 11041                           
 11042                           ;EEprom.c: 63: ;
 11043  0052F0  A8A1               	btfss	4001,4,c	;volatile
 11044  0052F2  D7FD               	goto	l303
 11045                           
 11046                           ;EEprom.c: 64: EECON1bits.WREN=0;
 11047  0052F4  94A6               	bcf	4006,2,c	;volatile
 11048                           
 11049                           ;EEprom.c: 66: PIR2bits.EEIF = 0;
 11050  0052F6  98A1               	bcf	4001,4,c	;volatile
 11051  0052F8  0012               	return		;funcret
 11052  0052FA  FFFF               	dw	65535	; errata NOP
 11053  0052FC                     __end_of_wr_byte_EE:
 11054                           	opt stack 0
 11055                           tblptru	equ	0xFF8
 11056                           tblptrh	equ	0xFF7
 11057                           tblptrl	equ	0xFF6
 11058                           tablat	equ	0xFF5
 11059                           prodl	equ	0xFF3
 11060                           intcon	equ	0xFF2
 11061                           postinc0	equ	0xFEE
 11062                           wreg	equ	0xFE8
 11063                           indf2	equ	0xFDF
 11064                           postinc2	equ	0xFDE
 11065                           postdec2	equ	0xFDD
 11066                           plusw2	equ	0xFDB
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function _get_min_VL *****************
 11072 ;; Defined at:
 11073 ;;		line 117 in file "Get_Voltages.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;		None
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  3   24[COMRAM] float 
 11080 ;; Registers used:
 11081 ;;		None
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11087 ;;      Params:         3       0       0       0       0       0       0
 11088 ;;      Locals:         0       0       0       0       0       0       0
 11089 ;;      Temps:          0       0       0       0       0       0       0
 11090 ;;      Totals:         3       0       0       0       0       0       0
 11091 ;;Total ram usage:        3 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    1
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_get_list
 11098 ;;		_Save_Variables
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text47
 11103  004F32                     __ptext47:
 11104                           	opt stack 0
 11105  004F32                     _get_min_VL:
 11106                           	opt stack 0
 11107  004F32  FFFF               	dw	65535	; assembler added errata NOP
 11108                           
 11109                           ;Get_Voltages.c: 118: return VL_min;
 11110                           
 11111                           ;incstack = 0
 11112  004F34  C125  F019         	movff	_VL_min,?_get_min_VL
 11113  004F38  C126  F01A         	movff	_VL_min+1,?_get_min_VL+1
 11114  004F3C  C127  F01B         	movff	_VL_min+2,?_get_min_VL+2
 11115  004F40  0012               	return		;funcret
 11116  004F42  FFFF               	dw	65535	; errata NOP
 11117  004F44                     __end_of_get_min_VL:
 11118                           	opt stack 0
 11119                           tblptru	equ	0xFF8
 11120                           tblptrh	equ	0xFF7
 11121                           tblptrl	equ	0xFF6
 11122                           tablat	equ	0xFF5
 11123                           prodl	equ	0xFF3
 11124                           intcon	equ	0xFF2
 11125                           postinc0	equ	0xFEE
 11126                           wreg	equ	0xFE8
 11127                           indf2	equ	0xFDF
 11128                           postinc2	equ	0xFDE
 11129                           postdec2	equ	0xFDD
 11130                           plusw2	equ	0xFDB
 11131                           fsr2h	equ	0xFDA
 11132                           fsr2l	equ	0xFD9
 11133                           status	equ	0xFD8
 11134                           
 11135 ;; *************** function _get_max_VL *****************
 11136 ;; Defined at:
 11137 ;;		line 113 in file "Get_Voltages.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  3   24[COMRAM] float 
 11144 ;; Registers used:
 11145 ;;		None
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11151 ;;      Params:         3       0       0       0       0       0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0
 11154 ;;      Totals:         3       0       0       0       0       0       0
 11155 ;;Total ram usage:        3 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    1
 11158 ;; This function calls:
 11159 ;;		Nothing
 11160 ;; This function is called by:
 11161 ;;		_get_list
 11162 ;;		_Save_Variables
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text48
 11167  004F20                     __ptext48:
 11168                           	opt stack 0
 11169  004F20                     _get_max_VL:
 11170                           	opt stack 0
 11171  004F20  FFFF               	dw	65535	; assembler added errata NOP
 11172                           
 11173                           ;Get_Voltages.c: 114: return VL_max;
 11174                           
 11175                           ;incstack = 0
 11176  004F22  C128  F019         	movff	_VL_max,?_get_max_VL
 11177  004F26  C129  F01A         	movff	_VL_max+1,?_get_max_VL+1
 11178  004F2A  C12A  F01B         	movff	_VL_max+2,?_get_max_VL+2
 11179  004F2E  0012               	return		;funcret
 11180  004F30  FFFF               	dw	65535	; errata NOP
 11181  004F32                     __end_of_get_max_VL:
 11182                           	opt stack 0
 11183                           tblptru	equ	0xFF8
 11184                           tblptrh	equ	0xFF7
 11185                           tblptrl	equ	0xFF6
 11186                           tablat	equ	0xFF5
 11187                           prodl	equ	0xFF3
 11188                           intcon	equ	0xFF2
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           indf2	equ	0xFDF
 11192                           postinc2	equ	0xFDE
 11193                           postdec2	equ	0xFDD
 11194                           plusw2	equ	0xFDB
 11195                           fsr2h	equ	0xFDA
 11196                           fsr2l	equ	0xFD9
 11197                           status	equ	0xFD8
 11198                           
 11199 ;; *************** function _get_Vin_zero *****************
 11200 ;; Defined at:
 11201 ;;		line 58 in file "Get_Voltages.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  3   24[COMRAM] float 
 11208 ;; Registers used:
 11209 ;;		None
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11215 ;;      Params:         3       0       0       0       0       0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0
 11218 ;;      Totals:         3       0       0       0       0       0       0
 11219 ;;Total ram usage:        3 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    1
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_Save_Variables
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text49
 11230  004F0E                     __ptext49:
 11231                           	opt stack 0
 11232  004F0E                     _get_Vin_zero:
 11233                           	opt stack 0
 11234  004F0E  FFFF               	dw	65535	; assembler added errata NOP
 11235                           
 11236                           ;Get_Voltages.c: 59: return Vin_zero;
 11237                           
 11238                           ;incstack = 0
 11239  004F10  C137  F019         	movff	_Vin_zero,?_get_Vin_zero
 11240  004F14  C138  F01A         	movff	_Vin_zero+1,?_get_Vin_zero+1
 11241  004F18  C139  F01B         	movff	_Vin_zero+2,?_get_Vin_zero+2
 11242  004F1C  0012               	return		;funcret
 11243  004F1E  FFFF               	dw	65535	; errata NOP
 11244  004F20                     __end_of_get_Vin_zero:
 11245                           	opt stack 0
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodl	equ	0xFF3
 11251                           intcon	equ	0xFF2
 11252                           postinc0	equ	0xFEE
 11253                           wreg	equ	0xFE8
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           plusw2	equ	0xFDB
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _get_Vin_span *****************
 11263 ;; Defined at:
 11264 ;;		line 55 in file "Get_Voltages.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;		None
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  3   24[COMRAM] float 
 11271 ;; Registers used:
 11272 ;;		None
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11278 ;;      Params:         3       0       0       0       0       0       0
 11279 ;;      Locals:         0       0       0       0       0       0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0
 11281 ;;      Totals:         3       0       0       0       0       0       0
 11282 ;;Total ram usage:        3 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    1
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_Save_Variables
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           	psect	text50
 11293  004EFC                     __ptext50:
 11294                           	opt stack 0
 11295  004EFC                     _get_Vin_span:
 11296                           	opt stack 0
 11297  004EFC  FFFF               	dw	65535	; assembler added errata NOP
 11298                           
 11299                           ;Get_Voltages.c: 56: return Vin_Span;
 11300                           
 11301                           ;incstack = 0
 11302  004EFE  C12B  F019         	movff	_Vin_Span,?_get_Vin_span
 11303  004F02  C12C  F01A         	movff	_Vin_Span+1,?_get_Vin_span+1
 11304  004F06  C12D  F01B         	movff	_Vin_Span+2,?_get_Vin_span+2
 11305  004F0A  0012               	return		;funcret
 11306  004F0C  FFFF               	dw	65535	; errata NOP
 11307  004F0E                     __end_of_get_Vin_span:
 11308                           	opt stack 0
 11309                           tblptru	equ	0xFF8
 11310                           tblptrh	equ	0xFF7
 11311                           tblptrl	equ	0xFF6
 11312                           tablat	equ	0xFF5
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           postinc0	equ	0xFEE
 11316                           wreg	equ	0xFE8
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           postdec2	equ	0xFDD
 11320                           plusw2	equ	0xFDB
 11321                           fsr2h	equ	0xFDA
 11322                           fsr2l	equ	0xFD9
 11323                           status	equ	0xFD8
 11324                           
 11325 ;; *************** function _get_VL3_zero *****************
 11326 ;; Defined at:
 11327 ;;		line 40 in file "Get_Voltages.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;		None
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;		None
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  3   24[COMRAM] float 
 11334 ;; Registers used:
 11335 ;;		None
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11341 ;;      Params:         3       0       0       0       0       0       0
 11342 ;;      Locals:         0       0       0       0       0       0       0
 11343 ;;      Temps:          0       0       0       0       0       0       0
 11344 ;;      Totals:         3       0       0       0       0       0       0
 11345 ;;Total ram usage:        3 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    1
 11348 ;; This function calls:
 11349 ;;		Nothing
 11350 ;; This function is called by:
 11351 ;;		_Save_Variables
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text51
 11356  004EEA                     __ptext51:
 11357                           	opt stack 0
 11358  004EEA                     _get_VL3_zero:
 11359                           	opt stack 0
 11360  004EEA  FFFF               	dw	65535	; assembler added errata NOP
 11361                           
 11362                           ;Get_Voltages.c: 41: return VL3_zero;
 11363                           
 11364                           ;incstack = 0
 11365  004EEC  C13A  F019         	movff	_VL3_zero,?_get_VL3_zero
 11366  004EF0  C13B  F01A         	movff	_VL3_zero+1,?_get_VL3_zero+1
 11367  004EF4  C13C  F01B         	movff	_VL3_zero+2,?_get_VL3_zero+2
 11368  004EF8  0012               	return		;funcret
 11369  004EFA  FFFF               	dw	65535	; errata NOP
 11370  004EFC                     __end_of_get_VL3_zero:
 11371                           	opt stack 0
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodl	equ	0xFF3
 11377                           intcon	equ	0xFF2
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           indf2	equ	0xFDF
 11381                           postinc2	equ	0xFDE
 11382                           postdec2	equ	0xFDD
 11383                           plusw2	equ	0xFDB
 11384                           fsr2h	equ	0xFDA
 11385                           fsr2l	equ	0xFD9
 11386                           status	equ	0xFD8
 11387                           
 11388 ;; *************** function _get_VL3_span *****************
 11389 ;; Defined at:
 11390 ;;		line 52 in file "Get_Voltages.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;		None
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  3   24[COMRAM] float 
 11397 ;; Registers used:
 11398 ;;		None
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11404 ;;      Params:         3       0       0       0       0       0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0
 11406 ;;      Temps:          0       0       0       0       0       0       0
 11407 ;;      Totals:         3       0       0       0       0       0       0
 11408 ;;Total ram usage:        3 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; Hardware stack levels required when called:    1
 11411 ;; This function calls:
 11412 ;;		Nothing
 11413 ;; This function is called by:
 11414 ;;		_Save_Variables
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           	psect	text52
 11419  004ED8                     __ptext52:
 11420                           	opt stack 0
 11421  004ED8                     _get_VL3_span:
 11422                           	opt stack 0
 11423  004ED8  FFFF               	dw	65535	; assembler added errata NOP
 11424                           
 11425                           ;Get_Voltages.c: 53: return VL3_span;
 11426                           
 11427                           ;incstack = 0
 11428  004EDA  C12E  F019         	movff	_VL3_span,?_get_VL3_span
 11429  004EDE  C12F  F01A         	movff	_VL3_span+1,?_get_VL3_span+1
 11430  004EE2  C130  F01B         	movff	_VL3_span+2,?_get_VL3_span+2
 11431  004EE6  0012               	return		;funcret
 11432  004EE8  FFFF               	dw	65535	; errata NOP
 11433  004EEA                     __end_of_get_VL3_span:
 11434                           	opt stack 0
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodl	equ	0xFF3
 11440                           intcon	equ	0xFF2
 11441                           postinc0	equ	0xFEE
 11442                           wreg	equ	0xFE8
 11443                           indf2	equ	0xFDF
 11444                           postinc2	equ	0xFDE
 11445                           postdec2	equ	0xFDD
 11446                           plusw2	equ	0xFDB
 11447                           fsr2h	equ	0xFDA
 11448                           fsr2l	equ	0xFD9
 11449                           status	equ	0xFD8
 11450                           
 11451 ;; *************** function _get_VL2_zero *****************
 11452 ;; Defined at:
 11453 ;;		line 36 in file "Get_Voltages.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;		None
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;		None
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  3   24[COMRAM] float 
 11460 ;; Registers used:
 11461 ;;		None
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11467 ;;      Params:         3       0       0       0       0       0       0
 11468 ;;      Locals:         0       0       0       0       0       0       0
 11469 ;;      Temps:          0       0       0       0       0       0       0
 11470 ;;      Totals:         3       0       0       0       0       0       0
 11471 ;;Total ram usage:        3 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    1
 11474 ;; This function calls:
 11475 ;;		Nothing
 11476 ;; This function is called by:
 11477 ;;		_Save_Variables
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           	psect	text53
 11482  004EC6                     __ptext53:
 11483                           	opt stack 0
 11484  004EC6                     _get_VL2_zero:
 11485                           	opt stack 0
 11486  004EC6  FFFF               	dw	65535	; assembler added errata NOP
 11487                           
 11488                           ;Get_Voltages.c: 37: return VL2_zero;
 11489                           
 11490                           ;incstack = 0
 11491  004EC8  C13D  F019         	movff	_VL2_zero,?_get_VL2_zero
 11492  004ECC  C13E  F01A         	movff	_VL2_zero+1,?_get_VL2_zero+1
 11493  004ED0  C13F  F01B         	movff	_VL2_zero+2,?_get_VL2_zero+2
 11494  004ED4  0012               	return		;funcret
 11495  004ED6  FFFF               	dw	65535	; errata NOP
 11496  004ED8                     __end_of_get_VL2_zero:
 11497                           	opt stack 0
 11498                           tblptru	equ	0xFF8
 11499                           tblptrh	equ	0xFF7
 11500                           tblptrl	equ	0xFF6
 11501                           tablat	equ	0xFF5
 11502                           prodl	equ	0xFF3
 11503                           intcon	equ	0xFF2
 11504                           postinc0	equ	0xFEE
 11505                           wreg	equ	0xFE8
 11506                           indf2	equ	0xFDF
 11507                           postinc2	equ	0xFDE
 11508                           postdec2	equ	0xFDD
 11509                           plusw2	equ	0xFDB
 11510                           fsr2h	equ	0xFDA
 11511                           fsr2l	equ	0xFD9
 11512                           status	equ	0xFD8
 11513                           
 11514 ;; *************** function _get_VL2_span *****************
 11515 ;; Defined at:
 11516 ;;		line 48 in file "Get_Voltages.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;		None
 11519 ;; Auto vars:     Size  Location     Type
 11520 ;;		None
 11521 ;; Return value:  Size  Location     Type
 11522 ;;                  3   24[COMRAM] float 
 11523 ;; Registers used:
 11524 ;;		None
 11525 ;; Tracked objects:
 11526 ;;		On entry : 0/0
 11527 ;;		On exit  : 0/0
 11528 ;;		Unchanged: 0/0
 11529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11530 ;;      Params:         3       0       0       0       0       0       0
 11531 ;;      Locals:         0       0       0       0       0       0       0
 11532 ;;      Temps:          0       0       0       0       0       0       0
 11533 ;;      Totals:         3       0       0       0       0       0       0
 11534 ;;Total ram usage:        3 bytes
 11535 ;; Hardware stack levels used:    1
 11536 ;; Hardware stack levels required when called:    1
 11537 ;; This function calls:
 11538 ;;		Nothing
 11539 ;; This function is called by:
 11540 ;;		_Save_Variables
 11541 ;; This function uses a non-reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text54
 11545  004EB4                     __ptext54:
 11546                           	opt stack 0
 11547  004EB4                     _get_VL2_span:
 11548                           	opt stack 0
 11549  004EB4  FFFF               	dw	65535	; assembler added errata NOP
 11550                           
 11551                           ;Get_Voltages.c: 49: return VL2_span;
 11552                           
 11553                           ;incstack = 0
 11554  004EB6  C131  F019         	movff	_VL2_span,?_get_VL2_span
 11555  004EBA  C132  F01A         	movff	_VL2_span+1,?_get_VL2_span+1
 11556  004EBE  C133  F01B         	movff	_VL2_span+2,?_get_VL2_span+2
 11557  004EC2  0012               	return		;funcret
 11558  004EC4  FFFF               	dw	65535	; errata NOP
 11559  004EC6                     __end_of_get_VL2_span:
 11560                           	opt stack 0
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           postinc0	equ	0xFEE
 11568                           wreg	equ	0xFE8
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577 ;; *************** function _get_VL1_zero *****************
 11578 ;; Defined at:
 11579 ;;		line 32 in file "Get_Voltages.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;                  3   24[COMRAM] float 
 11586 ;; Registers used:
 11587 ;;		None
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11593 ;;      Params:         3       0       0       0       0       0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0
 11595 ;;      Temps:          0       0       0       0       0       0       0
 11596 ;;      Totals:         3       0       0       0       0       0       0
 11597 ;;Total ram usage:        3 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    1
 11600 ;; This function calls:
 11601 ;;		Nothing
 11602 ;; This function is called by:
 11603 ;;		_Save_Variables
 11604 ;; This function uses a non-reentrant model
 11605 ;;
 11606                           
 11607                           	psect	text55
 11608  004EA2                     __ptext55:
 11609                           	opt stack 0
 11610  004EA2                     _get_VL1_zero:
 11611                           	opt stack 0
 11612  004EA2  FFFF               	dw	65535	; assembler added errata NOP
 11613                           
 11614                           ;Get_Voltages.c: 33: return VL1_zero;
 11615                           
 11616                           ;incstack = 0
 11617  004EA4  C0F2  F019         	movff	_VL1_zero,?_get_VL1_zero
 11618  004EA8  C0F3  F01A         	movff	_VL1_zero+1,?_get_VL1_zero+1
 11619  004EAC  C0F4  F01B         	movff	_VL1_zero+2,?_get_VL1_zero+2
 11620  004EB0  0012               	return		;funcret
 11621  004EB2  FFFF               	dw	65535	; errata NOP
 11622  004EB4                     __end_of_get_VL1_zero:
 11623                           	opt stack 0
 11624                           tblptru	equ	0xFF8
 11625                           tblptrh	equ	0xFF7
 11626                           tblptrl	equ	0xFF6
 11627                           tablat	equ	0xFF5
 11628                           prodl	equ	0xFF3
 11629                           intcon	equ	0xFF2
 11630                           postinc0	equ	0xFEE
 11631                           wreg	equ	0xFE8
 11632                           indf2	equ	0xFDF
 11633                           postinc2	equ	0xFDE
 11634                           postdec2	equ	0xFDD
 11635                           plusw2	equ	0xFDB
 11636                           fsr2h	equ	0xFDA
 11637                           fsr2l	equ	0xFD9
 11638                           status	equ	0xFD8
 11639                           
 11640 ;; *************** function _get_VL1_span *****************
 11641 ;; Defined at:
 11642 ;;		line 44 in file "Get_Voltages.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;		None
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;		None
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  3   24[COMRAM] float 
 11649 ;; Registers used:
 11650 ;;		None
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11656 ;;      Params:         3       0       0       0       0       0       0
 11657 ;;      Locals:         0       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0
 11659 ;;      Totals:         3       0       0       0       0       0       0
 11660 ;;Total ram usage:        3 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    1
 11663 ;; This function calls:
 11664 ;;		Nothing
 11665 ;; This function is called by:
 11666 ;;		_Save_Variables
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           	psect	text56
 11671  004E90                     __ptext56:
 11672                           	opt stack 0
 11673  004E90                     _get_VL1_span:
 11674                           	opt stack 0
 11675  004E90  FFFF               	dw	65535	; assembler added errata NOP
 11676                           
 11677                           ;Get_Voltages.c: 45: return VL1_span;
 11678                           
 11679                           ;incstack = 0
 11680  004E92  C134  F019         	movff	_VL1_span,?_get_VL1_span
 11681  004E96  C135  F01A         	movff	_VL1_span+1,?_get_VL1_span+1
 11682  004E9A  C136  F01B         	movff	_VL1_span+2,?_get_VL1_span+2
 11683  004E9E  0012               	return		;funcret
 11684  004EA0  FFFF               	dw	65535	; errata NOP
 11685  004EA2                     __end_of_get_VL1_span:
 11686                           	opt stack 0
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           postinc0	equ	0xFEE
 11694                           wreg	equ	0xFE8
 11695                           indf2	equ	0xFDF
 11696                           postinc2	equ	0xFDE
 11697                           postdec2	equ	0xFDD
 11698                           plusw2	equ	0xFDB
 11699                           fsr2h	equ	0xFDA
 11700                           fsr2l	equ	0xFD9
 11701                           status	equ	0xFD8
 11702                           
 11703 ;; *************** function _get_PID_setpoint *****************
 11704 ;; Defined at:
 11705 ;;		line 46 in file "PID_Controller.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  3   24[COMRAM] float 
 11712 ;; Registers used:
 11713 ;;		None
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11719 ;;      Params:         3       0       0       0       0       0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0
 11722 ;;      Totals:         3       0       0       0       0       0       0
 11723 ;;Total ram usage:        3 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    1
 11726 ;; This function calls:
 11727 ;;		Nothing
 11728 ;; This function is called by:
 11729 ;;		_get_list
 11730 ;;		_Save_Variables
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           	psect	text57
 11735  004E7E                     __ptext57:
 11736                           	opt stack 0
 11737  004E7E                     _get_PID_setpoint:
 11738                           	opt stack 0
 11739  004E7E  FFFF               	dw	65535	; assembler added errata NOP
 11740                           
 11741                           ;PID_Controller.c: 47: return setpoint;
 11742                           
 11743                           ;incstack = 0
 11744  004E80  C107  F019         	movff	_setpoint,?_get_PID_setpoint
 11745  004E84  C108  F01A         	movff	_setpoint+1,?_get_PID_setpoint+1
 11746  004E88  C109  F01B         	movff	_setpoint+2,?_get_PID_setpoint+2
 11747  004E8C  0012               	return		;funcret
 11748  004E8E  FFFF               	dw	65535	; errata NOP
 11749  004E90                     __end_of_get_PID_setpoint:
 11750                           	opt stack 0
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodl	equ	0xFF3
 11756                           intcon	equ	0xFF2
 11757                           postinc0	equ	0xFEE
 11758                           wreg	equ	0xFE8
 11759                           indf2	equ	0xFDF
 11760                           postinc2	equ	0xFDE
 11761                           postdec2	equ	0xFDD
 11762                           plusw2	equ	0xFDB
 11763                           fsr2h	equ	0xFDA
 11764                           fsr2l	equ	0xFD9
 11765                           status	equ	0xFD8
 11766                           
 11767 ;; *************** function _get_PID_Ti *****************
 11768 ;; Defined at:
 11769 ;;		line 34 in file "PID_Controller.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;		None
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;		None
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  3   24[COMRAM] float 
 11776 ;; Registers used:
 11777 ;;		None
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11783 ;;      Params:         3       0       0       0       0       0       0
 11784 ;;      Locals:         0       0       0       0       0       0       0
 11785 ;;      Temps:          0       0       0       0       0       0       0
 11786 ;;      Totals:         3       0       0       0       0       0       0
 11787 ;;Total ram usage:        3 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:    1
 11790 ;; This function calls:
 11791 ;;		Nothing
 11792 ;; This function is called by:
 11793 ;;		_get_list
 11794 ;;		_Save_Variables
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           	psect	text58
 11799  004E6C                     __ptext58:
 11800                           	opt stack 0
 11801  004E6C                     _get_PID_Ti:
 11802                           	opt stack 0
 11803  004E6C  FFFF               	dw	65535	; assembler added errata NOP
 11804                           
 11805                           ;PID_Controller.c: 35: return ti;
 11806                           
 11807                           ;incstack = 0
 11808  004E6E  C02F  F019         	movff	_ti,?_get_PID_Ti
 11809  004E72  C030  F01A         	movff	_ti+1,?_get_PID_Ti+1
 11810  004E76  C031  F01B         	movff	_ti+2,?_get_PID_Ti+2
 11811  004E7A  0012               	return		;funcret
 11812  004E7C  FFFF               	dw	65535	; errata NOP
 11813  004E7E                     __end_of_get_PID_Ti:
 11814                           	opt stack 0
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodl	equ	0xFF3
 11820                           intcon	equ	0xFF2
 11821                           postinc0	equ	0xFEE
 11822                           wreg	equ	0xFE8
 11823                           indf2	equ	0xFDF
 11824                           postinc2	equ	0xFDE
 11825                           postdec2	equ	0xFDD
 11826                           plusw2	equ	0xFDB
 11827                           fsr2h	equ	0xFDA
 11828                           fsr2l	equ	0xFD9
 11829                           status	equ	0xFD8
 11830                           
 11831 ;; *************** function _get_PID_Td *****************
 11832 ;; Defined at:
 11833 ;;		line 38 in file "PID_Controller.c"
 11834 ;; Parameters:    Size  Location     Type
 11835 ;;		None
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;		None
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  3   24[COMRAM] float 
 11840 ;; Registers used:
 11841 ;;		None
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11847 ;;      Params:         3       0       0       0       0       0       0
 11848 ;;      Locals:         0       0       0       0       0       0       0
 11849 ;;      Temps:          0       0       0       0       0       0       0
 11850 ;;      Totals:         3       0       0       0       0       0       0
 11851 ;;Total ram usage:        3 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    1
 11854 ;; This function calls:
 11855 ;;		Nothing
 11856 ;; This function is called by:
 11857 ;;		_get_list
 11858 ;;		_Save_Variables
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           	psect	text59
 11863  004E5A                     __ptext59:
 11864                           	opt stack 0
 11865  004E5A                     _get_PID_Td:
 11866                           	opt stack 0
 11867  004E5A  FFFF               	dw	65535	; assembler added errata NOP
 11868                           
 11869                           ;PID_Controller.c: 39: return td;
 11870                           
 11871                           ;incstack = 0
 11872  004E5C  C119  F019         	movff	_td,?_get_PID_Td
 11873  004E60  C11A  F01A         	movff	_td+1,?_get_PID_Td+1
 11874  004E64  C11B  F01B         	movff	_td+2,?_get_PID_Td+2
 11875  004E68  0012               	return		;funcret
 11876  004E6A  FFFF               	dw	65535	; errata NOP
 11877  004E6C                     __end_of_get_PID_Td:
 11878                           	opt stack 0
 11879                           tblptru	equ	0xFF8
 11880                           tblptrh	equ	0xFF7
 11881                           tblptrl	equ	0xFF6
 11882                           tablat	equ	0xFF5
 11883                           prodl	equ	0xFF3
 11884                           intcon	equ	0xFF2
 11885                           postinc0	equ	0xFEE
 11886                           wreg	equ	0xFE8
 11887                           indf2	equ	0xFDF
 11888                           postinc2	equ	0xFDE
 11889                           postdec2	equ	0xFDD
 11890                           plusw2	equ	0xFDB
 11891                           fsr2h	equ	0xFDA
 11892                           fsr2l	equ	0xFD9
 11893                           status	equ	0xFD8
 11894                           
 11895 ;; *************** function _get_PID_T *****************
 11896 ;; Defined at:
 11897 ;;		line 42 in file "PID_Controller.c"
 11898 ;; Parameters:    Size  Location     Type
 11899 ;;		None
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;		None
 11902 ;; Return value:  Size  Location     Type
 11903 ;;                  3   24[COMRAM] float 
 11904 ;; Registers used:
 11905 ;;		None
 11906 ;; Tracked objects:
 11907 ;;		On entry : 0/0
 11908 ;;		On exit  : 0/0
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11911 ;;      Params:         3       0       0       0       0       0       0
 11912 ;;      Locals:         0       0       0       0       0       0       0
 11913 ;;      Temps:          0       0       0       0       0       0       0
 11914 ;;      Totals:         3       0       0       0       0       0       0
 11915 ;;Total ram usage:        3 bytes
 11916 ;; Hardware stack levels used:    1
 11917 ;; Hardware stack levels required when called:    1
 11918 ;; This function calls:
 11919 ;;		Nothing
 11920 ;; This function is called by:
 11921 ;;		_get_list
 11922 ;;		_Save_Variables
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           	psect	text60
 11927  004E48                     __ptext60:
 11928                           	opt stack 0
 11929  004E48                     _get_PID_T:
 11930                           	opt stack 0
 11931  004E48  FFFF               	dw	65535	; assembler added errata NOP
 11932                           
 11933                           ;PID_Controller.c: 43: return T_sample;
 11934                           
 11935                           ;incstack = 0
 11936  004E4A  C0EF  F019         	movff	_T_sample,?_get_PID_T
 11937  004E4E  C0F0  F01A         	movff	_T_sample+1,?_get_PID_T+1
 11938  004E52  C0F1  F01B         	movff	_T_sample+2,?_get_PID_T+2
 11939  004E56  0012               	return		;funcret
 11940  004E58  FFFF               	dw	65535	; errata NOP
 11941  004E5A                     __end_of_get_PID_T:
 11942                           	opt stack 0
 11943                           tblptru	equ	0xFF8
 11944                           tblptrh	equ	0xFF7
 11945                           tblptrl	equ	0xFF6
 11946                           tablat	equ	0xFF5
 11947                           prodl	equ	0xFF3
 11948                           intcon	equ	0xFF2
 11949                           postinc0	equ	0xFEE
 11950                           wreg	equ	0xFE8
 11951                           indf2	equ	0xFDF
 11952                           postinc2	equ	0xFDE
 11953                           postdec2	equ	0xFDD
 11954                           plusw2	equ	0xFDB
 11955                           fsr2h	equ	0xFDA
 11956                           fsr2l	equ	0xFD9
 11957                           status	equ	0xFD8
 11958                           
 11959 ;; *************** function _get_PID_Kp *****************
 11960 ;; Defined at:
 11961 ;;		line 30 in file "PID_Controller.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;		None
 11964 ;; Auto vars:     Size  Location     Type
 11965 ;;		None
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  3   24[COMRAM] float 
 11968 ;; Registers used:
 11969 ;;		None
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11975 ;;      Params:         3       0       0       0       0       0       0
 11976 ;;      Locals:         0       0       0       0       0       0       0
 11977 ;;      Temps:          0       0       0       0       0       0       0
 11978 ;;      Totals:         3       0       0       0       0       0       0
 11979 ;;Total ram usage:        3 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    1
 11982 ;; This function calls:
 11983 ;;		Nothing
 11984 ;; This function is called by:
 11985 ;;		_get_list
 11986 ;;		_Save_Variables
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text61
 11991  004E36                     __ptext61:
 11992                           	opt stack 0
 11993  004E36                     _get_PID_Kp:
 11994                           	opt stack 0
 11995  004E36  FFFF               	dw	65535	; assembler added errata NOP
 11996                           
 11997                           ;PID_Controller.c: 31: return Kp;
 11998                           
 11999                           ;incstack = 0
 12000  004E38  C11C  F019         	movff	_Kp,?_get_PID_Kp
 12001  004E3C  C11D  F01A         	movff	_Kp+1,?_get_PID_Kp+1
 12002  004E40  C11E  F01B         	movff	_Kp+2,?_get_PID_Kp+2
 12003  004E44  0012               	return		;funcret
 12004  004E46  FFFF               	dw	65535	; errata NOP
 12005  004E48                     __end_of_get_PID_Kp:
 12006                           	opt stack 0
 12007                           tblptru	equ	0xFF8
 12008                           tblptrh	equ	0xFF7
 12009                           tblptrl	equ	0xFF6
 12010                           tablat	equ	0xFF5
 12011                           prodl	equ	0xFF3
 12012                           intcon	equ	0xFF2
 12013                           postinc0	equ	0xFEE
 12014                           wreg	equ	0xFE8
 12015                           indf2	equ	0xFDF
 12016                           postinc2	equ	0xFDE
 12017                           postdec2	equ	0xFDD
 12018                           plusw2	equ	0xFDB
 12019                           fsr2h	equ	0xFDA
 12020                           fsr2l	equ	0xFD9
 12021                           status	equ	0xFD8
 12022                           
 12023 ;; *************** function _get_LP_RC_Constant *****************
 12024 ;; Defined at:
 12025 ;;		line 17 in file "Filters.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;		None
 12028 ;; Auto vars:     Size  Location     Type
 12029 ;;		None
 12030 ;; Return value:  Size  Location     Type
 12031 ;;                  3   24[COMRAM] float 
 12032 ;; Registers used:
 12033 ;;		None
 12034 ;; Tracked objects:
 12035 ;;		On entry : 0/0
 12036 ;;		On exit  : 0/0
 12037 ;;		Unchanged: 0/0
 12038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12039 ;;      Params:         3       0       0       0       0       0       0
 12040 ;;      Locals:         0       0       0       0       0       0       0
 12041 ;;      Temps:          0       0       0       0       0       0       0
 12042 ;;      Totals:         3       0       0       0       0       0       0
 12043 ;;Total ram usage:        3 bytes
 12044 ;; Hardware stack levels used:    1
 12045 ;; Hardware stack levels required when called:    1
 12046 ;; This function calls:
 12047 ;;		Nothing
 12048 ;; This function is called by:
 12049 ;;		_get_list
 12050 ;;		_Save_Variables
 12051 ;;		_main
 12052 ;; This function uses a non-reentrant model
 12053 ;;
 12054                           
 12055                           	psect	text62
 12056  004E24                     __ptext62:
 12057                           	opt stack 0
 12058  004E24                     _get_LP_RC_Constant:
 12059                           	opt stack 0
 12060  004E24  FFFF               	dw	65535	; assembler added errata NOP
 12061                           
 12062                           ;Filters.c: 18: return k1;
 12063                           
 12064                           ;incstack = 0
 12065  004E26  C03E  F019         	movff	_k1,?_get_LP_RC_Constant
 12066  004E2A  C03F  F01A         	movff	_k1+1,?_get_LP_RC_Constant+1
 12067  004E2E  C040  F01B         	movff	_k1+2,?_get_LP_RC_Constant+2
 12068  004E32  0012               	return		;funcret
 12069  004E34  FFFF               	dw	65535	; errata NOP
 12070  004E36                     __end_of_get_LP_RC_Constant:
 12071                           	opt stack 0
 12072                           tblptru	equ	0xFF8
 12073                           tblptrh	equ	0xFF7
 12074                           tblptrl	equ	0xFF6
 12075                           tablat	equ	0xFF5
 12076                           prodl	equ	0xFF3
 12077                           intcon	equ	0xFF2
 12078                           postinc0	equ	0xFEE
 12079                           wreg	equ	0xFE8
 12080                           indf2	equ	0xFDF
 12081                           postinc2	equ	0xFDE
 12082                           postdec2	equ	0xFDD
 12083                           plusw2	equ	0xFDB
 12084                           fsr2h	equ	0xFDA
 12085                           fsr2l	equ	0xFD9
 12086                           status	equ	0xFD8
 12087                           
 12088 ;; *************** function _printf *****************
 12089 ;; Defined at:
 12090 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\printf.c"
 12091 ;; Parameters:    Size  Location     Type
 12092 ;;  f               2   96[BANK0 ] PTR const unsigned char 
 12093 ;;		 -> STR_78(4), STR_77(23), STR_76(8), STR_75(29), 
 12094 ;;		 -> STR_74(41), STR_73(8), STR_72(25), 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  pb              4  102[BANK0 ] struct __prbuf
 12097 ;;  ap              2  100[BANK0 ] PTR void [1]
 12098 ;;		 -> ?_sprintf(2), ?_printf(2), 
 12099 ;; Return value:  Size  Location     Type
 12100 ;;                  2   96[BANK0 ] int 
 12101 ;; Registers used:
 12102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12103 ;; Tracked objects:
 12104 ;;		On entry : 0/0
 12105 ;;		On exit  : 0/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12108 ;;      Params:         0       4       0       0       0       0       0
 12109 ;;      Locals:         0       6       0       0       0       0       0
 12110 ;;      Temps:          0       0       0       0       0       0       0
 12111 ;;      Totals:         0      10       0       0       0       0       0
 12112 ;;Total ram usage:       10 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:    5
 12115 ;; This function calls:
 12116 ;;		__doprnt
 12117 ;; This function is called by:
 12118 ;;		_main
 12119 ;; This function uses a non-reentrant model
 12120 ;;
 12121                           
 12122                           	psect	text63
 12123  0057A8                     __ptext63:
 12124                           	opt stack 0
 12125  0057A8                     _printf:
 12126                           	opt stack 0
 12127  0057A8  FFFF               	dw	65535	; assembler added errata NOP
 12128                           
 12129                           ;incstack = 0
 12130  0057AA  0E00               	movlw	0
 12131  0057AC  0100               	movlb	0	; () banked
 12132  0057AE  6FC6               	movwf	printf@pb& (0+255),b
 12133  0057B0  0E00               	movlw	0
 12134  0057B2  0100               	movlb	0	; () banked
 12135  0057B4  6FC7               	movwf	(printf@pb+1)& (0+255),b
 12136  0057B6  0EF2               	movlw	low _putch
 12137  0057B8  0100               	movlb	0	; () banked
 12138  0057BA  6FC8               	movwf	(printf@pb+2)& (0+255),b
 12139  0057BC  0E4C               	movlw	high _putch
 12140  0057BE  0100               	movlb	0	; () banked
 12141  0057C0  6FC9               	movwf	(printf@pb+3)& (0+255),b
 12142  0057C2  0EC2               	movlw	low (?_printf+2)
 12143  0057C4  0100               	movlb	0	; () banked
 12144  0057C6  6FC4               	movwf	printf@ap& (0+255),b
 12145  0057C8  0E00               	movlw	high (?_printf+2)
 12146  0057CA  0100               	movlb	0	; () banked
 12147  0057CC  6FC5               	movwf	(printf@ap+1)& (0+255),b
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;	Return value of _printf is never used
 12151  0057CE  0EC6               	movlw	low printf@pb
 12152  0057D0  0100               	movlb	0	; () banked
 12153  0057D2  6F99               	movwf	__doprnt@pb& (0+255),b
 12154  0057D4  0E00               	movlw	high printf@pb
 12155  0057D6  0100               	movlb	0	; () banked
 12156  0057D8  6F9A               	movwf	(__doprnt@pb+1)& (0+255),b
 12157  0057DA  C0C0  F09B         	movff	printf@f,__doprnt@f
 12158  0057DE  C0C1  F09C         	movff	printf@f+1,__doprnt@f+1
 12159  0057E2  0EC4               	movlw	low printf@ap
 12160  0057E4  0100               	movlb	0	; () banked
 12161  0057E6  6F9D               	movwf	__doprnt@ap& (0+255),b
 12162  0057E8  0E00               	movlw	high printf@ap
 12163  0057EA  0100               	movlb	0	; () banked
 12164  0057EC  6F9E               	movwf	(__doprnt@ap+1)& (0+255),b
 12165  0057EE  ECDB  F000         	call	__doprnt	;wreg free
 12166  0057F2  0012               	return		;funcret
 12167  0057F4  FFFF               	dw	65535	; errata NOP
 12168  0057F6                     __end_of_printf:
 12169                           	opt stack 0
 12170                           tblptru	equ	0xFF8
 12171                           tblptrh	equ	0xFF7
 12172                           tblptrl	equ	0xFF6
 12173                           tablat	equ	0xFF5
 12174                           prodl	equ	0xFF3
 12175                           intcon	equ	0xFF2
 12176                           postinc0	equ	0xFEE
 12177                           wreg	equ	0xFE8
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           plusw2	equ	0xFDB
 12182                           fsr2h	equ	0xFDA
 12183                           fsr2l	equ	0xFD9
 12184                           status	equ	0xFD8
 12185                           
 12186 ;; *************** function _ctime *****************
 12187 ;; Defined at:
 12188 ;;		line 65 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;  tp              2   19[BANK0 ] PTR const long 
 12191 ;;		 -> main@sys_time(4), 
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;		None
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  2   19[BANK0 ] PTR unsigned char 
 12196 ;; Registers used:
 12197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12203 ;;      Params:         0       2       0       0       0       0       0
 12204 ;;      Locals:         0       0       0       0       0       0       0
 12205 ;;      Temps:          0       0       0       0       0       0       0
 12206 ;;      Totals:         0       2       0       0       0       0       0
 12207 ;;Total ram usage:        2 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:    5
 12210 ;; This function calls:
 12211 ;;		_asctime
 12212 ;;		_localtime
 12213 ;; This function is called by:
 12214 ;;		_main
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text64
 12219  005180                     __ptext64:
 12220                           	opt stack 0
 12221  005180                     _ctime:
 12222                           	opt stack 0
 12223  005180  FFFF               	dw	65535	; assembler added errata NOP
 12224                           
 12225                           ;incstack = 0
 12226  005182  C073  F02C         	movff	ctime@tp,localtime@tp
 12227  005186  C074  F02D         	movff	ctime@tp+1,localtime@tp+1
 12228  00518A  ECE5  F030         	call	_localtime	;wreg free
 12229  00518E  C02C  F06C         	movff	?_localtime,asctime@tim
 12230  005192  C02D  F06D         	movff	?_localtime+1,asctime@tim+1
 12231  005196  EC53  F01B         	call	_asctime	;wreg free
 12232  00519A  C06C  F073         	movff	?_asctime,?_ctime
 12233  00519E  C06D  F074         	movff	?_asctime+1,?_ctime+1
 12234  0051A2  0012               	return		;funcret
 12235  0051A4  FFFF               	dw	65535	; errata NOP
 12236  0051A6                     __end_of_ctime:
 12237                           	opt stack 0
 12238                           tblptru	equ	0xFF8
 12239                           tblptrh	equ	0xFF7
 12240                           tblptrl	equ	0xFF6
 12241                           tablat	equ	0xFF5
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           postinc0	equ	0xFEE
 12245                           wreg	equ	0xFE8
 12246                           indf2	equ	0xFDF
 12247                           postinc2	equ	0xFDE
 12248                           postdec2	equ	0xFDD
 12249                           plusw2	equ	0xFDB
 12250                           fsr2h	equ	0xFDA
 12251                           fsr2l	equ	0xFD9
 12252                           status	equ	0xFD8
 12253                           
 12254 ;; *************** function _localtime *****************
 12255 ;; Defined at:
 12256 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12257 ;; Parameters:    Size  Location     Type
 12258 ;;  tp              2   43[COMRAM] PTR const long 
 12259 ;;		 -> reset_max_min@system_time(4), main@sys_time(4), get_list@systime(4), 
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;  t               4    8[BANK0 ] long 
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  2   43[COMRAM] PTR struct tm
 12264 ;; Registers used:
 12265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12271 ;;      Params:         2       0       0       0       0       0       0
 12272 ;;      Locals:         0       4       0       0       0       0       0
 12273 ;;      Temps:          0       4       0       0       0       0       0
 12274 ;;      Totals:         2       8       0       0       0       0       0
 12275 ;;Total ram usage:       10 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    4
 12278 ;; This function calls:
 12279 ;;		___lmul
 12280 ;;		_gmtime
 12281 ;; This function is called by:
 12282 ;;		_get_list
 12283 ;;		_ctime
 12284 ;;		_reset_max_min
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           	psect	text65
 12289  0061CA                     __ptext65:
 12290                           	opt stack 0
 12291  0061CA                     _localtime:
 12292                           	opt stack 0
 12293  0061CA  FFFF               	dw	65535	; assembler added errata NOP
 12294                           
 12295                           ;incstack = 0
 12296  0061CC  C02C  FFD9         	movff	localtime@tp,fsr2l
 12297  0061D0  C02D  FFDA         	movff	localtime@tp+1,fsr2h
 12298  0061D4  CFDE F064          	movff	postinc2,??_localtime
 12299  0061D8  CFDE F065          	movff	postinc2,??_localtime+1
 12300  0061DC  CFDE F066          	movff	postinc2,??_localtime+2
 12301  0061E0  CFDE F067          	movff	postinc2,??_localtime+3
 12302  0061E4  C14C  F019         	movff	_time_zone,___lmul@multiplier
 12303  0061E8  C14D  F01A         	movff	_time_zone+1,___lmul@multiplier+1
 12304  0061EC  0E00               	movlw	0
 12305  0061EE  BE1A               	btfsc	___lmul@multiplier+1,7,c
 12306  0061F0  0EFF               	movlw	-1
 12307  0061F2  6E1B               	movwf	___lmul@multiplier+2,c
 12308  0061F4  6E1C               	movwf	___lmul@multiplier+3,c
 12309  0061F6  0E3C               	movlw	60
 12310  0061F8  6E1D               	movwf	___lmul@multiplicand,c
 12311  0061FA  0E00               	movlw	0
 12312  0061FC  6E1E               	movwf	___lmul@multiplicand+1,c
 12313  0061FE  0E00               	movlw	0
 12314  006200  6E1F               	movwf	___lmul@multiplicand+2,c
 12315  006202  0E00               	movlw	0
 12316  006204  6E20               	movwf	___lmul@multiplicand+3,c
 12317  006206  EC28  F02D         	call	___lmul	;wreg free
 12318  00620A  1E19               	comf	?___lmul,f,c
 12319  00620C  1E1A               	comf	?___lmul+1,f,c
 12320  00620E  1E1B               	comf	?___lmul+2,f,c
 12321  006210  1E1C               	comf	?___lmul+3,f,c
 12322  006212  2A19               	incf	?___lmul,f,c
 12323  006214  0E00               	movlw	0
 12324  006216  221A               	addwfc	?___lmul+1,f,c
 12325  006218  221B               	addwfc	?___lmul+2,f,c
 12326  00621A  221C               	addwfc	?___lmul+3,f,c
 12327  00621C  0100               	movlb	0	; () banked
 12328  00621E  5164               	movf	??_localtime& (0+255),w,b
 12329  006220  2419               	addwf	?___lmul,w,c
 12330  006222  0100               	movlb	0	; () banked
 12331  006224  6F68               	movwf	localtime@t& (0+255),b
 12332  006226  0100               	movlb	0	; () banked
 12333  006228  5165               	movf	(??_localtime+1)& (0+255),w,b
 12334  00622A  201A               	addwfc	?___lmul+1,w,c
 12335  00622C  0100               	movlb	0	; () banked
 12336  00622E  6F69               	movwf	(localtime@t+1)& (0+255),b
 12337  006230  0100               	movlb	0	; () banked
 12338  006232  5166               	movf	(??_localtime+2)& (0+255),w,b
 12339  006234  201B               	addwfc	?___lmul+2,w,c
 12340  006236  0100               	movlb	0	; () banked
 12341  006238  6F6A               	movwf	(localtime@t+2)& (0+255),b
 12342  00623A  0100               	movlb	0	; () banked
 12343  00623C  5167               	movf	(??_localtime+3)& (0+255),w,b
 12344  00623E  201C               	addwfc	?___lmul+3,w,c
 12345  006240  0100               	movlb	0	; () banked
 12346  006242  6F6B               	movwf	(localtime@t+3)& (0+255),b
 12347                           
 12348                           ; BSR set to: 0
 12349  006244  0E68               	movlw	low localtime@t
 12350  006246  6E27               	movwf	gmtime@tp,c
 12351  006248  0E00               	movlw	high localtime@t
 12352  00624A  6E28               	movwf	gmtime@tp+1,c
 12353  00624C  ECB5  F01D         	call	_gmtime	;wreg free
 12354  006250  C027  F02C         	movff	?_gmtime,?_localtime
 12355  006254  C028  F02D         	movff	?_gmtime+1,?_localtime+1
 12356  006258  0012               	return		;funcret
 12357  00625A  FFFF               	dw	65535	; errata NOP
 12358  00625C                     __end_of_localtime:
 12359                           	opt stack 0
 12360                           tblptru	equ	0xFF8
 12361                           tblptrh	equ	0xFF7
 12362                           tblptrl	equ	0xFF6
 12363                           tablat	equ	0xFF5
 12364                           prodl	equ	0xFF3
 12365                           intcon	equ	0xFF2
 12366                           postinc0	equ	0xFEE
 12367                           wreg	equ	0xFE8
 12368                           indf2	equ	0xFDF
 12369                           postinc2	equ	0xFDE
 12370                           postdec2	equ	0xFDD
 12371                           plusw2	equ	0xFDB
 12372                           fsr2h	equ	0xFDA
 12373                           fsr2l	equ	0xFD9
 12374                           status	equ	0xFD8
 12375                           
 12376 ;; *************** function _gmtime *****************
 12377 ;; Defined at:
 12378 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;  tp              2   38[COMRAM] PTR const long 
 12381 ;;		 -> localtime@t(4), 
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;  tc              4    0[BANK0 ] struct .
 12384 ;; Return value:  Size  Location     Type
 12385 ;;                  2   38[COMRAM] PTR struct tm
 12386 ;; Registers used:
 12387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12393 ;;      Params:         2       0       0       0       0       0       0
 12394 ;;      Locals:         0       4       0       0       0       0       0
 12395 ;;      Temps:          3       0       0       0       0       0       0
 12396 ;;      Totals:         5       4       0       0       0       0       0
 12397 ;;Total ram usage:        9 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; Hardware stack levels required when called:    3
 12400 ;; This function calls:
 12401 ;;		___aldiv
 12402 ;;		___almod
 12403 ;;		___awmod
 12404 ;;		_dylen
 12405 ;; This function is called by:
 12406 ;;		_localtime
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           	psect	text66
 12411  003B6A                     __ptext66:
 12412                           	opt stack 0
 12413  003B6A                     _gmtime:
 12414                           	opt stack 0
 12415  003B6A  FFFF               	dw	65535	; assembler added errata NOP
 12416                           
 12417                           ;incstack = 0
 12418  003B6C  C027  FFD9         	movff	gmtime@tp,fsr2l
 12419  003B70  C028  FFDA         	movff	gmtime@tp+1,fsr2h
 12420  003B74  CFDE F060          	movff	postinc2,gmtime@tc
 12421  003B78  CFDE F061          	movff	postinc2,gmtime@tc+1
 12422  003B7C  CFDE F062          	movff	postinc2,gmtime@tc+2
 12423  003B80  CFDE F063          	movff	postinc2,gmtime@tc+3
 12424  003B84  C060  F019         	movff	gmtime@tc,___almod@dividend
 12425  003B88  C061  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12426  003B8C  C062  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12427  003B90  C063  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12428  003B94  0E3C               	movlw	60
 12429  003B96  6E1D               	movwf	___almod@divisor,c
 12430  003B98  0E00               	movlw	0
 12431  003B9A  6E1E               	movwf	___almod@divisor+1,c
 12432  003B9C  0E00               	movlw	0
 12433  003B9E  6E1F               	movwf	___almod@divisor+2,c
 12434  003BA0  0E00               	movlw	0
 12435  003BA2  6E20               	movwf	___almod@divisor+3,c
 12436  003BA4  EC91  F033         	call	___almod	;wreg free
 12437  003BA8  C019  F1A5         	movff	?___almod,gmtime@tim
 12438  003BAC  C01A  F1A6         	movff	?___almod+1,gmtime@tim+1
 12439  003BB0  C060  F019         	movff	gmtime@tc,___aldiv@dividend
 12440  003BB4  C061  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12441  003BB8  C062  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12442  003BBC  C063  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12443  003BC0  0E3C               	movlw	60
 12444  003BC2  6E1D               	movwf	___aldiv@divisor,c
 12445  003BC4  0E00               	movlw	0
 12446  003BC6  6E1E               	movwf	___aldiv@divisor+1,c
 12447  003BC8  0E00               	movlw	0
 12448  003BCA  6E1F               	movwf	___aldiv@divisor+2,c
 12449  003BCC  0E00               	movlw	0
 12450  003BCE  6E20               	movwf	___aldiv@divisor+3,c
 12451  003BD0  ECF4  F035         	call	___aldiv	;wreg free
 12452  003BD4  C019  F060         	movff	?___aldiv,gmtime@tc
 12453  003BD8  C01A  F061         	movff	?___aldiv+1,gmtime@tc+1
 12454  003BDC  C01B  F062         	movff	?___aldiv+2,gmtime@tc+2
 12455  003BE0  C01C  F063         	movff	?___aldiv+3,gmtime@tc+3
 12456  003BE4  C060  F019         	movff	gmtime@tc,___almod@dividend
 12457  003BE8  C061  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12458  003BEC  C062  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12459  003BF0  C063  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12460  003BF4  0E3C               	movlw	60
 12461  003BF6  6E1D               	movwf	___almod@divisor,c
 12462  003BF8  0E00               	movlw	0
 12463  003BFA  6E1E               	movwf	___almod@divisor+1,c
 12464  003BFC  0E00               	movlw	0
 12465  003BFE  6E1F               	movwf	___almod@divisor+2,c
 12466  003C00  0E00               	movlw	0
 12467  003C02  6E20               	movwf	___almod@divisor+3,c
 12468  003C04  EC91  F033         	call	___almod	;wreg free
 12469  003C08  C019  F1A7         	movff	?___almod,gmtime@tim+2
 12470  003C0C  C01A  F1A8         	movff	?___almod+1,gmtime@tim+3
 12471  003C10  C060  F019         	movff	gmtime@tc,___aldiv@dividend
 12472  003C14  C061  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12473  003C18  C062  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12474  003C1C  C063  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12475  003C20  0E3C               	movlw	60
 12476  003C22  6E1D               	movwf	___aldiv@divisor,c
 12477  003C24  0E00               	movlw	0
 12478  003C26  6E1E               	movwf	___aldiv@divisor+1,c
 12479  003C28  0E00               	movlw	0
 12480  003C2A  6E1F               	movwf	___aldiv@divisor+2,c
 12481  003C2C  0E00               	movlw	0
 12482  003C2E  6E20               	movwf	___aldiv@divisor+3,c
 12483  003C30  ECF4  F035         	call	___aldiv	;wreg free
 12484  003C34  C019  F060         	movff	?___aldiv,gmtime@tc
 12485  003C38  C01A  F061         	movff	?___aldiv+1,gmtime@tc+1
 12486  003C3C  C01B  F062         	movff	?___aldiv+2,gmtime@tc+2
 12487  003C40  C01C  F063         	movff	?___aldiv+3,gmtime@tc+3
 12488  003C44  C060  F019         	movff	gmtime@tc,___almod@dividend
 12489  003C48  C061  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12490  003C4C  C062  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12491  003C50  C063  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12492  003C54  0E18               	movlw	24
 12493  003C56  6E1D               	movwf	___almod@divisor,c
 12494  003C58  0E00               	movlw	0
 12495  003C5A  6E1E               	movwf	___almod@divisor+1,c
 12496  003C5C  0E00               	movlw	0
 12497  003C5E  6E1F               	movwf	___almod@divisor+2,c
 12498  003C60  0E00               	movlw	0
 12499  003C62  6E20               	movwf	___almod@divisor+3,c
 12500  003C64  EC91  F033         	call	___almod	;wreg free
 12501  003C68  C019  F1A9         	movff	?___almod,gmtime@tim+4
 12502  003C6C  C01A  F1AA         	movff	?___almod+1,gmtime@tim+5
 12503  003C70  C060  F019         	movff	gmtime@tc,___aldiv@dividend
 12504  003C74  C061  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12505  003C78  C062  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12506  003C7C  C063  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12507  003C80  0E18               	movlw	24
 12508  003C82  6E1D               	movwf	___aldiv@divisor,c
 12509  003C84  0E00               	movlw	0
 12510  003C86  6E1E               	movwf	___aldiv@divisor+1,c
 12511  003C88  0E00               	movlw	0
 12512  003C8A  6E1F               	movwf	___aldiv@divisor+2,c
 12513  003C8C  0E00               	movlw	0
 12514  003C8E  6E20               	movwf	___aldiv@divisor+3,c
 12515  003C90  ECF4  F035         	call	___aldiv	;wreg free
 12516  003C94  C019  F1AB         	movff	?___aldiv,gmtime@tim+6
 12517  003C98  C01A  F1AC         	movff	?___aldiv+1,gmtime@tim+7
 12518  003C9C  0E04               	movlw	4
 12519  003C9E  0101               	movlb	1	; () banked
 12520  003CA0  25AB               	addwf	(gmtime@tim+6)& (0+255),w,b
 12521  003CA2  6E19               	movwf	___awmod@dividend,c
 12522  003CA4  0E00               	movlw	0
 12523  003CA6  0101               	movlb	1	; () banked
 12524  003CA8  21AC               	addwfc	(gmtime@tim+7)& (0+255),w,b
 12525  003CAA  6E1A               	movwf	___awmod@dividend+1,c
 12526  003CAC  0E00               	movlw	0
 12527  003CAE  6E1C               	movwf	___awmod@divisor+1,c
 12528  003CB0  0E07               	movlw	7
 12529  003CB2  6E1B               	movwf	___awmod@divisor,c
 12530  003CB4  EC90  F02F         	call	___awmod	;wreg free
 12531  003CB8  C019  F1B1         	movff	?___awmod,gmtime@tim+12
 12532  003CBC  C01A  F1B2         	movff	?___awmod+1,gmtime@tim+13
 12533  003CC0  0E00               	movlw	0
 12534  003CC2  0101               	movlb	1	; () banked
 12535  003CC4  6FB0               	movwf	(gmtime@tim+11)& (0+255),b
 12536  003CC6  0E46               	movlw	70
 12537  003CC8  6FAF               	movwf	(gmtime@tim+10)& (0+255),b
 12538  003CCA  D010               	goto	l1623
 12539  003CCC  FFFF               	dw	65535	; assembler added errata NOP
 12540                           
 12541                           ; BSR set to: 1
 12542                           
 12543                           ; BSR set to: 1
 12544  003CCE  C1AF  F01E         	movff	gmtime@tim+10,dylen@yr
 12545  003CD2  C1B0  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12546  003CD6  ECEF  F02D         	call	_dylen	;wreg free
 12547  003CDA  501E               	movf	?_dylen,w,c
 12548  003CDC  0101               	movlb	1	; () banked
 12549  003CDE  5FAB               	subwf	(gmtime@tim+6)& (0+255),f,b
 12550  003CE0  501F               	movf	?_dylen+1,w,c
 12551  003CE2  0101               	movlb	1	; () banked
 12552  003CE4  5BAC               	subwfb	(gmtime@tim+7)& (0+255),f,b
 12553                           
 12554                           ; BSR set to: 1
 12555  003CE6  0101               	movlb	1	; () banked
 12556  003CE8  4BAF               	infsnz	(gmtime@tim+10)& (0+255),f,b
 12557  003CEA  2BB0               	incf	(gmtime@tim+11)& (0+255),f,b
 12558  003CEC                     l1623:
 12559  003CEC  FFFF               	dw	65535	; assembler added errata NOP
 12560                           
 12561                           ; BSR set to: 1
 12562                           
 12563                           ; BSR set to: 1
 12564  003CEE  C1AF  F01E         	movff	gmtime@tim+10,dylen@yr
 12565  003CF2  C1B0  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12566  003CF6  ECEF  F02D         	call	_dylen	;wreg free
 12567  003CFA  501E               	movf	?_dylen,w,c
 12568  003CFC  0101               	movlb	1	; () banked
 12569  003CFE  5DAB               	subwf	(gmtime@tim+6)& (0+255),w,b
 12570  003D00  0101               	movlb	1	; () banked
 12571  003D02  51AC               	movf	(gmtime@tim+7)& (0+255),w,b
 12572  003D04  0A80               	xorlw	128
 12573  003D06  6E29               	movwf	??_gmtime& (0+255),c
 12574  003D08  501F               	movf	?_dylen+1,w,c
 12575  003D0A  0A80               	xorlw	128
 12576  003D0C  5829               	subwfb	??_gmtime& (0+255),w,c
 12577  003D0E  B0D8               	btfsc	status,0,c
 12578  003D10  D7DD               	goto	l1624
 12579                           
 12580                           ; BSR set to: 1
 12581                           
 12582                           ; BSR set to: 1
 12583  003D12  C1AF  F01E         	movff	gmtime@tim+10,dylen@yr
 12584  003D16  C1B0  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12585  003D1A  ECEF  F02D         	call	_dylen	;wreg free
 12586  003D1E  501E               	movf	?_dylen,w,c
 12587  003D20  0B02               	andlw	2
 12588  003D22  0100               	movlb	0	; () banked
 12589  003D24  6F60               	movwf	gmtime@tc& (0+255),b
 12590                           
 12591                           ; BSR set to: 0
 12592  003D26  C1AB  F1B3         	movff	gmtime@tim+6,gmtime@tim+14
 12593  003D2A  C1AC  F1B4         	movff	gmtime@tim+7,gmtime@tim+15
 12594                           
 12595                           ; BSR set to: 0
 12596  003D2E  0E00               	movlw	0
 12597  003D30  0101               	movlb	1	; () banked
 12598  003D32  6FAE               	movwf	(gmtime@tim+9)& (0+255),b
 12599  003D34  0E00               	movlw	0
 12600  003D36  6FAD               	movwf	(gmtime@tim+8)& (0+255),b
 12601  003D38  D00D               	goto	l1626
 12602  003D3A  FFFF               	dw	65535	; assembler added errata NOP
 12603                           
 12604                           ; BSR set to: 1
 12605                           
 12606                           ; BSR set to: 1
 12607  003D3C  0100               	movlb	0	; () banked
 12608  003D3E  5161               	movf	(gmtime@tc+1)& (0+255),w,b
 12609  003D40  0101               	movlb	1	; () banked
 12610  003D42  5FAB               	subwf	(gmtime@tim+6)& (0+255),f,b
 12611  003D44  0E00               	movlw	0
 12612  003D46  5BAC               	subwfb	(gmtime@tim+7)& (0+255),f,b
 12613                           
 12614                           ; BSR set to: 1
 12615  003D48  0101               	movlb	1	; () banked
 12616  003D4A  4BAD               	infsnz	(gmtime@tim+8)& (0+255),f,b
 12617  003D4C  2BAE               	incf	(gmtime@tim+9)& (0+255),f,b
 12618                           
 12619                           ; BSR set to: 1
 12620  003D4E  0100               	movlb	0	; () banked
 12621  003D50  90D8               	bcf	status,0,c
 12622  003D52  3360               	rrcf	gmtime@tc& (0+255),f,b
 12623  003D54                     l1626:
 12624  003D54  FFFF               	dw	65535	; assembler added errata NOP
 12625                           
 12626                           ; BSR set to: 0
 12627  003D56  0E99               	movlw	low _moninit
 12628  003D58  0101               	movlb	1	; () banked
 12629  003D5A  25AD               	addwf	(gmtime@tim+8)& (0+255),w,b
 12630  003D5C  6EF6               	movwf	tblptrl,c
 12631  003D5E  0E7D               	movlw	high _moninit
 12632  003D60  21AE               	addwfc	(gmtime@tim+9)& (0+255),w,b
 12633  003D62  6EF7               	movwf	tblptrh,c
 12634  003D64                     	if	0	;There are less than 3 active tblptr bytes
 12635  003D64                     	endif
 12636  003D64  0008               	tblrd		*
 12637  003D66  FFFF               	dw	65535	; errata NOP
 12638  003D68  50F5               	movf	tablat,w,c
 12639  003D6A  0100               	movlb	0	; () banked
 12640  003D6C  1160               	iorwf	gmtime@tc& (0+255),w,b
 12641  003D6E  0100               	movlb	0	; () banked
 12642  003D70  6F61               	movwf	(gmtime@tc+1)& (0+255),b
 12643  003D72  0100               	movlb	0	; () banked
 12644  003D74  5161               	movf	(gmtime@tc+1)& (0+255),w,b
 12645  003D76  6E29               	movwf	??_gmtime& (0+255),c
 12646  003D78  6A2A               	clrf	(??_gmtime+1)& (0+255),c
 12647  003D7A  5029               	movf	??_gmtime,w,c
 12648  003D7C  0101               	movlb	1	; () banked
 12649  003D7E  5DAB               	subwf	(gmtime@tim+6)& (0+255),w,b
 12650  003D80  0101               	movlb	1	; () banked
 12651  003D82  51AC               	movf	(gmtime@tim+7)& (0+255),w,b
 12652  003D84  0A80               	xorlw	128
 12653  003D86  6E2B               	movwf	(??_gmtime+2)& (0+255),c
 12654  003D88  502A               	movf	??_gmtime+1,w,c
 12655  003D8A  0A80               	xorlw	128
 12656  003D8C  582B               	subwfb	(??_gmtime+2)& (0+255),w,c
 12657  003D8E  B0D8               	btfsc	status,0,c
 12658  003D90  D7D4               	goto	l1627
 12659                           
 12660                           ; BSR set to: 1
 12661                           
 12662                           ; BSR set to: 1
 12663  003D92  0101               	movlb	1	; () banked
 12664  003D94  4BAB               	infsnz	(gmtime@tim+6)& (0+255),f,b
 12665  003D96  2BAC               	incf	(gmtime@tim+7)& (0+255),f,b
 12666                           
 12667                           ; BSR set to: 1
 12668  003D98  0EA5               	movlw	low gmtime@tim
 12669  003D9A  6E27               	movwf	?_gmtime,c
 12670  003D9C  0E01               	movlw	high gmtime@tim
 12671  003D9E  6E28               	movwf	?_gmtime+1,c
 12672                           
 12673                           ; BSR set to: 1
 12674                           
 12675                           ; BSR set to: 1
 12676  003DA0  0012               	return		;funcret
 12677  003DA2  FFFF               	dw	65535	; errata NOP
 12678  003DA4                     __end_of_gmtime:
 12679                           	opt stack 0
 12680                           tblptru	equ	0xFF8
 12681                           tblptrh	equ	0xFF7
 12682                           tblptrl	equ	0xFF6
 12683                           tablat	equ	0xFF5
 12684                           prodl	equ	0xFF3
 12685                           intcon	equ	0xFF2
 12686                           postinc0	equ	0xFEE
 12687                           wreg	equ	0xFE8
 12688                           indf2	equ	0xFDF
 12689                           postinc2	equ	0xFDE
 12690                           postdec2	equ	0xFDD
 12691                           plusw2	equ	0xFDB
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8
 12695                           
 12696 ;; *************** function _dylen *****************
 12697 ;; Defined at:
 12698 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  yr              2   29[COMRAM] unsigned int 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;		None
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  2   29[COMRAM] int 
 12705 ;; Registers used:
 12706 ;;		wreg, status,2, status,0, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12712 ;;      Params:         2       0       0       0       0       0       0
 12713 ;;      Locals:         0       0       0       0       0       0       0
 12714 ;;      Temps:          2       0       0       0       0       0       0
 12715 ;;      Totals:         4       0       0       0       0       0       0
 12716 ;;Total ram usage:        4 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    2
 12719 ;; This function calls:
 12720 ;;		___lwmod
 12721 ;; This function is called by:
 12722 ;;		_gmtime
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           	psect	text67
 12727  005BDE                     __ptext67:
 12728                           	opt stack 0
 12729  005BDE                     _dylen:
 12730                           	opt stack 0
 12731  005BDE  FFFF               	dw	65535	; assembler added errata NOP
 12732                           
 12733                           ; BSR set to: 1
 12734                           ;incstack = 0
 12735  005BE0  0E03               	movlw	3
 12736  005BE2  141E               	andwf	dylen@yr,w,c
 12737  005BE4  6E20               	movwf	??_dylen& (0+255),c
 12738  005BE6  0E00               	movlw	0
 12739  005BE8  141F               	andwf	dylen@yr+1,w,c
 12740  005BEA  6E21               	movwf	(??_dylen+1)& (0+255),c
 12741  005BEC  5020               	movf	??_dylen,w,c
 12742  005BEE  1021               	iorwf	??_dylen+1,w,c
 12743  005BF0  A4D8               	btfss	status,2,c
 12744  005BF2  D01E               	goto	u9160
 12745  005BF4  C01E  F019         	movff	dylen@yr,___lwmod@dividend
 12746  005BF8  C01F  F01A         	movff	dylen@yr+1,___lwmod@dividend+1
 12747  005BFC  0E00               	movlw	0
 12748  005BFE  6E1C               	movwf	___lwmod@divisor+1,c
 12749  005C00  0E64               	movlw	100
 12750  005C02  6E1B               	movwf	___lwmod@divisor,c
 12751  005C04  ECFB  F02B         	call	___lwmod	;wreg free
 12752  005C08  5019               	movf	?___lwmod,w,c
 12753  005C0A  101A               	iorwf	?___lwmod+1,w,c
 12754  005C0C  A4D8               	btfss	status,2,c
 12755  005C0E  D015               	goto	l1612
 12756  005C10  0E2C               	movlw	44
 12757  005C12  241E               	addwf	dylen@yr,w,c
 12758  005C14  6E19               	movwf	___lwmod@dividend,c
 12759  005C16  0E01               	movlw	1
 12760  005C18  201F               	addwfc	dylen@yr+1,w,c
 12761  005C1A  6E1A               	movwf	___lwmod@dividend+1,c
 12762  005C1C  0E01               	movlw	1
 12763  005C1E  6E1C               	movwf	___lwmod@divisor+1,c
 12764  005C20  0E90               	movlw	144
 12765  005C22  6E1B               	movwf	___lwmod@divisor,c
 12766  005C24  ECFB  F02B         	call	___lwmod	;wreg free
 12767  005C28  5019               	movf	?___lwmod,w,c
 12768  005C2A  101A               	iorwf	?___lwmod+1,w,c
 12769  005C2C  B4D8               	btfsc	status,2,c
 12770  005C2E  D005               	goto	l1612
 12771  005C30                     u9160:
 12772  005C30  FFFF               	dw	65535	; assembler added errata NOP
 12773  005C32  0E01               	movlw	1
 12774  005C34  6E1F               	movwf	?_dylen+1,c
 12775  005C36  0E6D               	movlw	109
 12776  005C38  D004               	goto	L12
 12777  005C3A                     l1612:
 12778  005C3A  FFFF               	dw	65535	; assembler added errata NOP
 12779  005C3C  0E01               	movlw	1
 12780  005C3E  6E1F               	movwf	?_dylen+1,c
 12781  005C40  0E6E               	movlw	110
 12782  005C42                     L12:
 12783  005C42  FFFF               	dw	65535	; assembler added errata NOP
 12784  005C44  6E1E               	movwf	?_dylen,c
 12785  005C46  0012               	return		;funcret
 12786  005C48  FFFF               	dw	65535	; errata NOP
 12787  005C4A                     __end_of_dylen:
 12788                           	opt stack 0
 12789                           tblptru	equ	0xFF8
 12790                           tblptrh	equ	0xFF7
 12791                           tblptrl	equ	0xFF6
 12792                           tablat	equ	0xFF5
 12793                           prodl	equ	0xFF3
 12794                           intcon	equ	0xFF2
 12795                           postinc0	equ	0xFEE
 12796                           wreg	equ	0xFE8
 12797                           indf2	equ	0xFDF
 12798                           postinc2	equ	0xFDE
 12799                           postdec2	equ	0xFDD
 12800                           plusw2	equ	0xFDB
 12801                           fsr2h	equ	0xFDA
 12802                           fsr2l	equ	0xFD9
 12803                           status	equ	0xFD8
 12804                           
 12805 ;; *************** function ___lwmod *****************
 12806 ;; Defined at:
 12807 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  dividend        2   24[COMRAM] unsigned int 
 12810 ;;  divisor         2   26[COMRAM] unsigned int 
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  counter         1   28[COMRAM] unsigned char 
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  2   24[COMRAM] unsigned int 
 12815 ;; Registers used:
 12816 ;;		wreg, status,2, status,0
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12822 ;;      Params:         4       0       0       0       0       0       0
 12823 ;;      Locals:         1       0       0       0       0       0       0
 12824 ;;      Temps:          0       0       0       0       0       0       0
 12825 ;;      Totals:         5       0       0       0       0       0       0
 12826 ;;Total ram usage:        5 bytes
 12827 ;; Hardware stack levels used:    1
 12828 ;; Hardware stack levels required when called:    1
 12829 ;; This function calls:
 12830 ;;		Nothing
 12831 ;; This function is called by:
 12832 ;;		_dylen
 12833 ;;		_isleap
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           	psect	text68
 12838  0057F6                     __ptext68:
 12839                           	opt stack 0
 12840  0057F6                     ___lwmod:
 12841                           	opt stack 0
 12842  0057F6  FFFF               	dw	65535	; assembler added errata NOP
 12843                           
 12844                           ;incstack = 0
 12845  0057F8  501B               	movf	___lwmod@divisor,w,c
 12846  0057FA  101C               	iorwf	___lwmod@divisor+1,w,c
 12847  0057FC  B4D8               	btfsc	status,2,c
 12848  0057FE  D01C               	goto	l1898
 12849  005800  0E01               	movlw	1
 12850  005802  6E1D               	movwf	___lwmod@counter,c
 12851  005804  D005               	goto	l1893
 12852  005806  FFFF               	dw	65535	; assembler added errata NOP
 12853  005808  90D8               	bcf	status,0,c
 12854  00580A  361B               	rlcf	___lwmod@divisor,f,c
 12855  00580C  361C               	rlcf	___lwmod@divisor+1,f,c
 12856  00580E  2A1D               	incf	___lwmod@counter,f,c
 12857  005810                     l1893:
 12858  005810  FFFF               	dw	65535	; assembler added errata NOP
 12859  005812  AE1C               	btfss	___lwmod@divisor+1,7,c
 12860  005814  D7F8               	goto	l1894
 12861  005816                     u7980:
 12862  005816  FFFF               	dw	65535	; assembler added errata NOP
 12863  005818  501B               	movf	___lwmod@divisor,w,c
 12864  00581A  5C19               	subwf	___lwmod@dividend,w,c
 12865  00581C  501C               	movf	___lwmod@divisor+1,w,c
 12866  00581E  581A               	subwfb	___lwmod@dividend+1,w,c
 12867  005820  A0D8               	btfss	status,0,c
 12868  005822  D004               	goto	l1897
 12869  005824  501B               	movf	___lwmod@divisor,w,c
 12870  005826  5E19               	subwf	___lwmod@dividend,f,c
 12871  005828  501C               	movf	___lwmod@divisor+1,w,c
 12872  00582A  5A1A               	subwfb	___lwmod@dividend+1,f,c
 12873  00582C                     l1897:
 12874  00582C  FFFF               	dw	65535	; assembler added errata NOP
 12875  00582E  90D8               	bcf	status,0,c
 12876  005830  321C               	rrcf	___lwmod@divisor+1,f,c
 12877  005832  321B               	rrcf	___lwmod@divisor,f,c
 12878  005834  2E1D               	decfsz	___lwmod@counter,f,c
 12879  005836  D7EF               	goto	u7980
 12880  005838                     l1898:
 12881  005838  FFFF               	dw	65535	; assembler added errata NOP
 12882  00583A  C019  F019         	movff	___lwmod@dividend,?___lwmod
 12883  00583E  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
 12884  005842  0012               	return		;funcret
 12885  005844  FFFF               	dw	65535	; errata NOP
 12886  005846                     __end_of___lwmod:
 12887                           	opt stack 0
 12888                           tblptru	equ	0xFF8
 12889                           tblptrh	equ	0xFF7
 12890                           tblptrl	equ	0xFF6
 12891                           tablat	equ	0xFF5
 12892                           prodl	equ	0xFF3
 12893                           intcon	equ	0xFF2
 12894                           postinc0	equ	0xFEE
 12895                           wreg	equ	0xFE8
 12896                           indf2	equ	0xFDF
 12897                           postinc2	equ	0xFDE
 12898                           postdec2	equ	0xFDD
 12899                           plusw2	equ	0xFDB
 12900                           fsr2h	equ	0xFDA
 12901                           fsr2l	equ	0xFD9
 12902                           status	equ	0xFD8
 12903                           
 12904 ;; *************** function ___almod *****************
 12905 ;; Defined at:
 12906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\almod.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;  dividend        4   24[COMRAM] long 
 12909 ;;  divisor         4   28[COMRAM] long 
 12910 ;; Auto vars:     Size  Location     Type
 12911 ;;  sign            1   33[COMRAM] unsigned char 
 12912 ;;  counter         1   32[COMRAM] unsigned char 
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  4   24[COMRAM] long 
 12915 ;; Registers used:
 12916 ;;		wreg, status,2, status,0
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12922 ;;      Params:         8       0       0       0       0       0       0
 12923 ;;      Locals:         2       0       0       0       0       0       0
 12924 ;;      Temps:          0       0       0       0       0       0       0
 12925 ;;      Totals:        10       0       0       0       0       0       0
 12926 ;;Total ram usage:       10 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    1
 12929 ;; This function calls:
 12930 ;;		Nothing
 12931 ;; This function is called by:
 12932 ;;		_gmtime
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           	psect	text69
 12937  006722                     __ptext69:
 12938                           	opt stack 0
 12939  006722                     ___almod:
 12940                           	opt stack 0
 12941  006722  FFFF               	dw	65535	; assembler added errata NOP
 12942                           
 12943                           ;incstack = 0
 12944  006724  0E00               	movlw	0
 12945  006726  6E22               	movwf	___almod@sign,c
 12946  006728  AE1C               	btfss	___almod@dividend+3,7,c
 12947  00672A  D00A               	goto	l1397
 12948  00672C  1E1C               	comf	___almod@dividend+3,f,c
 12949  00672E  1E1B               	comf	___almod@dividend+2,f,c
 12950  006730  1E1A               	comf	___almod@dividend+1,f,c
 12951  006732  6C19               	negf	___almod@dividend,c
 12952  006734  0E00               	movlw	0
 12953  006736  221A               	addwfc	___almod@dividend+1,f,c
 12954  006738  221B               	addwfc	___almod@dividend+2,f,c
 12955  00673A  221C               	addwfc	___almod@dividend+3,f,c
 12956  00673C  0E01               	movlw	1
 12957  00673E  6E22               	movwf	___almod@sign,c
 12958  006740                     l1397:
 12959  006740  FFFF               	dw	65535	; assembler added errata NOP
 12960  006742  AE20               	btfss	___almod@divisor+3,7,c
 12961  006744  D008               	goto	l1398
 12962  006746  1E20               	comf	___almod@divisor+3,f,c
 12963  006748  1E1F               	comf	___almod@divisor+2,f,c
 12964  00674A  1E1E               	comf	___almod@divisor+1,f,c
 12965  00674C  6C1D               	negf	___almod@divisor,c
 12966  00674E  0E00               	movlw	0
 12967  006750  221E               	addwfc	___almod@divisor+1,f,c
 12968  006752  221F               	addwfc	___almod@divisor+2,f,c
 12969  006754  2220               	addwfc	___almod@divisor+3,f,c
 12970  006756                     l1398:
 12971  006756  FFFF               	dw	65535	; assembler added errata NOP
 12972  006758  501D               	movf	___almod@divisor,w,c
 12973  00675A  101E               	iorwf	___almod@divisor+1,w,c
 12974  00675C  101F               	iorwf	___almod@divisor+2,w,c
 12975  00675E  1020               	iorwf	___almod@divisor+3,w,c
 12976  006760  B4D8               	btfsc	status,2,c
 12977  006762  D028               	goto	l1405
 12978  006764  0E01               	movlw	1
 12979  006766  6E21               	movwf	___almod@counter,c
 12980  006768  D007               	goto	l1400
 12981  00676A  FFFF               	dw	65535	; assembler added errata NOP
 12982  00676C  90D8               	bcf	status,0,c
 12983  00676E  361D               	rlcf	___almod@divisor,f,c
 12984  006770  361E               	rlcf	___almod@divisor+1,f,c
 12985  006772  361F               	rlcf	___almod@divisor+2,f,c
 12986  006774  3620               	rlcf	___almod@divisor+3,f,c
 12987  006776  2A21               	incf	___almod@counter,f,c
 12988  006778                     l1400:
 12989  006778  FFFF               	dw	65535	; assembler added errata NOP
 12990  00677A  AE20               	btfss	___almod@divisor+3,7,c
 12991  00677C  D7F6               	goto	l1401
 12992  00677E                     u9000:
 12993  00677E  FFFF               	dw	65535	; assembler added errata NOP
 12994  006780  501D               	movf	___almod@divisor,w,c
 12995  006782  5C19               	subwf	___almod@dividend,w,c
 12996  006784  501E               	movf	___almod@divisor+1,w,c
 12997  006786  581A               	subwfb	___almod@dividend+1,w,c
 12998  006788  501F               	movf	___almod@divisor+2,w,c
 12999  00678A  581B               	subwfb	___almod@dividend+2,w,c
 13000  00678C  5020               	movf	___almod@divisor+3,w,c
 13001  00678E  581C               	subwfb	___almod@dividend+3,w,c
 13002  006790  A0D8               	btfss	status,0,c
 13003  006792  D008               	goto	l1404
 13004  006794  501D               	movf	___almod@divisor,w,c
 13005  006796  5E19               	subwf	___almod@dividend,f,c
 13006  006798  501E               	movf	___almod@divisor+1,w,c
 13007  00679A  5A1A               	subwfb	___almod@dividend+1,f,c
 13008  00679C  501F               	movf	___almod@divisor+2,w,c
 13009  00679E  5A1B               	subwfb	___almod@dividend+2,f,c
 13010  0067A0  5020               	movf	___almod@divisor+3,w,c
 13011  0067A2  5A1C               	subwfb	___almod@dividend+3,f,c
 13012  0067A4                     l1404:
 13013  0067A4  FFFF               	dw	65535	; assembler added errata NOP
 13014  0067A6  90D8               	bcf	status,0,c
 13015  0067A8  3220               	rrcf	___almod@divisor+3,f,c
 13016  0067AA  321F               	rrcf	___almod@divisor+2,f,c
 13017  0067AC  321E               	rrcf	___almod@divisor+1,f,c
 13018  0067AE  321D               	rrcf	___almod@divisor,f,c
 13019  0067B0  2E21               	decfsz	___almod@counter,f,c
 13020  0067B2  D7E5               	goto	u9000
 13021  0067B4                     l1405:
 13022  0067B4  FFFF               	dw	65535	; assembler added errata NOP
 13023  0067B6  5022               	movf	___almod@sign,w,c
 13024  0067B8  B4D8               	btfsc	status,2,c
 13025  0067BA  D008               	goto	l1406
 13026  0067BC  1E1C               	comf	___almod@dividend+3,f,c
 13027  0067BE  1E1B               	comf	___almod@dividend+2,f,c
 13028  0067C0  1E1A               	comf	___almod@dividend+1,f,c
 13029  0067C2  6C19               	negf	___almod@dividend,c
 13030  0067C4  0E00               	movlw	0
 13031  0067C6  221A               	addwfc	___almod@dividend+1,f,c
 13032  0067C8  221B               	addwfc	___almod@dividend+2,f,c
 13033  0067CA  221C               	addwfc	___almod@dividend+3,f,c
 13034  0067CC                     l1406:
 13035  0067CC  FFFF               	dw	65535	; assembler added errata NOP
 13036  0067CE  C019  F019         	movff	___almod@dividend,?___almod
 13037  0067D2  C01A  F01A         	movff	___almod@dividend+1,?___almod+1
 13038  0067D6  C01B  F01B         	movff	___almod@dividend+2,?___almod+2
 13039  0067DA  C01C  F01C         	movff	___almod@dividend+3,?___almod+3
 13040  0067DE  0012               	return		;funcret
 13041  0067E0  FFFF               	dw	65535	; errata NOP
 13042  0067E2                     __end_of___almod:
 13043                           	opt stack 0
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodl	equ	0xFF3
 13049                           intcon	equ	0xFF2
 13050                           postinc0	equ	0xFEE
 13051                           wreg	equ	0xFE8
 13052                           indf2	equ	0xFDF
 13053                           postinc2	equ	0xFDE
 13054                           postdec2	equ	0xFDD
 13055                           plusw2	equ	0xFDB
 13056                           fsr2h	equ	0xFDA
 13057                           fsr2l	equ	0xFD9
 13058                           status	equ	0xFD8
 13059                           
 13060 ;; *************** function ___aldiv *****************
 13061 ;; Defined at:
 13062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\aldiv.c"
 13063 ;; Parameters:    Size  Location     Type
 13064 ;;  dividend        4   24[COMRAM] long 
 13065 ;;  divisor         4   28[COMRAM] long 
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;  quotient        4   34[COMRAM] long 
 13068 ;;  sign            1   33[COMRAM] unsigned char 
 13069 ;;  counter         1   32[COMRAM] unsigned char 
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  4   24[COMRAM] long 
 13072 ;; Registers used:
 13073 ;;		wreg, status,2, status,0
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13079 ;;      Params:         8       0       0       0       0       0       0
 13080 ;;      Locals:         6       0       0       0       0       0       0
 13081 ;;      Temps:          0       0       0       0       0       0       0
 13082 ;;      Totals:        14       0       0       0       0       0       0
 13083 ;;Total ram usage:       14 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    1
 13086 ;; This function calls:
 13087 ;;		Nothing
 13088 ;; This function is called by:
 13089 ;;		_gmtime
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text70
 13094  006BE8                     __ptext70:
 13095                           	opt stack 0
 13096  006BE8                     ___aldiv:
 13097                           	opt stack 0
 13098  006BE8  FFFF               	dw	65535	; assembler added errata NOP
 13099                           
 13100                           ;incstack = 0
 13101  006BEA  0E00               	movlw	0
 13102  006BEC  6E22               	movwf	___aldiv@sign,c
 13103  006BEE  AE20               	btfss	___aldiv@divisor+3,7,c
 13104  006BF0  D00A               	goto	l1384
 13105  006BF2  1E20               	comf	___aldiv@divisor+3,f,c
 13106  006BF4  1E1F               	comf	___aldiv@divisor+2,f,c
 13107  006BF6  1E1E               	comf	___aldiv@divisor+1,f,c
 13108  006BF8  6C1D               	negf	___aldiv@divisor,c
 13109  006BFA  0E00               	movlw	0
 13110  006BFC  221E               	addwfc	___aldiv@divisor+1,f,c
 13111  006BFE  221F               	addwfc	___aldiv@divisor+2,f,c
 13112  006C00  2220               	addwfc	___aldiv@divisor+3,f,c
 13113  006C02  0E01               	movlw	1
 13114  006C04  6E22               	movwf	___aldiv@sign,c
 13115  006C06                     l1384:
 13116  006C06  FFFF               	dw	65535	; assembler added errata NOP
 13117  006C08  AE1C               	btfss	___aldiv@dividend+3,7,c
 13118  006C0A  D00A               	goto	l1385
 13119  006C0C  1E1C               	comf	___aldiv@dividend+3,f,c
 13120  006C0E  1E1B               	comf	___aldiv@dividend+2,f,c
 13121  006C10  1E1A               	comf	___aldiv@dividend+1,f,c
 13122  006C12  6C19               	negf	___aldiv@dividend,c
 13123  006C14  0E00               	movlw	0
 13124  006C16  221A               	addwfc	___aldiv@dividend+1,f,c
 13125  006C18  221B               	addwfc	___aldiv@dividend+2,f,c
 13126  006C1A  221C               	addwfc	___aldiv@dividend+3,f,c
 13127  006C1C  0E01               	movlw	1
 13128  006C1E  1A22               	xorwf	___aldiv@sign,f,c
 13129  006C20                     l1385:
 13130  006C20  FFFF               	dw	65535	; assembler added errata NOP
 13131  006C22  0E00               	movlw	0
 13132  006C24  6E23               	movwf	___aldiv@quotient,c
 13133  006C26  0E00               	movlw	0
 13134  006C28  6E24               	movwf	___aldiv@quotient+1,c
 13135  006C2A  0E00               	movlw	0
 13136  006C2C  6E25               	movwf	___aldiv@quotient+2,c
 13137  006C2E  0E00               	movlw	0
 13138  006C30  6E26               	movwf	___aldiv@quotient+3,c
 13139  006C32  501D               	movf	___aldiv@divisor,w,c
 13140  006C34  101E               	iorwf	___aldiv@divisor+1,w,c
 13141  006C36  101F               	iorwf	___aldiv@divisor+2,w,c
 13142  006C38  1020               	iorwf	___aldiv@divisor+3,w,c
 13143  006C3A  B4D8               	btfsc	status,2,c
 13144  006C3C  D02E               	goto	l1392
 13145  006C3E  0E01               	movlw	1
 13146  006C40  6E21               	movwf	___aldiv@counter,c
 13147  006C42  D007               	goto	l1387
 13148  006C44  FFFF               	dw	65535	; assembler added errata NOP
 13149  006C46  90D8               	bcf	status,0,c
 13150  006C48  361D               	rlcf	___aldiv@divisor,f,c
 13151  006C4A  361E               	rlcf	___aldiv@divisor+1,f,c
 13152  006C4C  361F               	rlcf	___aldiv@divisor+2,f,c
 13153  006C4E  3620               	rlcf	___aldiv@divisor+3,f,c
 13154  006C50  2A21               	incf	___aldiv@counter,f,c
 13155  006C52                     l1387:
 13156  006C52  FFFF               	dw	65535	; assembler added errata NOP
 13157  006C54  AE20               	btfss	___aldiv@divisor+3,7,c
 13158  006C56  D7F6               	goto	l1388
 13159  006C58                     u8940:
 13160  006C58  FFFF               	dw	65535	; assembler added errata NOP
 13161  006C5A  90D8               	bcf	status,0,c
 13162  006C5C  3623               	rlcf	___aldiv@quotient,f,c
 13163  006C5E  3624               	rlcf	___aldiv@quotient+1,f,c
 13164  006C60  3625               	rlcf	___aldiv@quotient+2,f,c
 13165  006C62  3626               	rlcf	___aldiv@quotient+3,f,c
 13166  006C64  501D               	movf	___aldiv@divisor,w,c
 13167  006C66  5C19               	subwf	___aldiv@dividend,w,c
 13168  006C68  501E               	movf	___aldiv@divisor+1,w,c
 13169  006C6A  581A               	subwfb	___aldiv@dividend+1,w,c
 13170  006C6C  501F               	movf	___aldiv@divisor+2,w,c
 13171  006C6E  581B               	subwfb	___aldiv@dividend+2,w,c
 13172  006C70  5020               	movf	___aldiv@divisor+3,w,c
 13173  006C72  581C               	subwfb	___aldiv@dividend+3,w,c
 13174  006C74  A0D8               	btfss	status,0,c
 13175  006C76  D009               	goto	l1391
 13176  006C78  501D               	movf	___aldiv@divisor,w,c
 13177  006C7A  5E19               	subwf	___aldiv@dividend,f,c
 13178  006C7C  501E               	movf	___aldiv@divisor+1,w,c
 13179  006C7E  5A1A               	subwfb	___aldiv@dividend+1,f,c
 13180  006C80  501F               	movf	___aldiv@divisor+2,w,c
 13181  006C82  5A1B               	subwfb	___aldiv@dividend+2,f,c
 13182  006C84  5020               	movf	___aldiv@divisor+3,w,c
 13183  006C86  5A1C               	subwfb	___aldiv@dividend+3,f,c
 13184  006C88  8023               	bsf	___aldiv@quotient,0,c
 13185  006C8A                     l1391:
 13186  006C8A  FFFF               	dw	65535	; assembler added errata NOP
 13187  006C8C  90D8               	bcf	status,0,c
 13188  006C8E  3220               	rrcf	___aldiv@divisor+3,f,c
 13189  006C90  321F               	rrcf	___aldiv@divisor+2,f,c
 13190  006C92  321E               	rrcf	___aldiv@divisor+1,f,c
 13191  006C94  321D               	rrcf	___aldiv@divisor,f,c
 13192  006C96  2E21               	decfsz	___aldiv@counter,f,c
 13193  006C98  D7DF               	goto	u8940
 13194  006C9A                     l1392:
 13195  006C9A  FFFF               	dw	65535	; assembler added errata NOP
 13196  006C9C  5022               	movf	___aldiv@sign,w,c
 13197  006C9E  B4D8               	btfsc	status,2,c
 13198  006CA0  D008               	goto	l1393
 13199  006CA2  1E26               	comf	___aldiv@quotient+3,f,c
 13200  006CA4  1E25               	comf	___aldiv@quotient+2,f,c
 13201  006CA6  1E24               	comf	___aldiv@quotient+1,f,c
 13202  006CA8  6C23               	negf	___aldiv@quotient,c
 13203  006CAA  0E00               	movlw	0
 13204  006CAC  2224               	addwfc	___aldiv@quotient+1,f,c
 13205  006CAE  2225               	addwfc	___aldiv@quotient+2,f,c
 13206  006CB0  2226               	addwfc	___aldiv@quotient+3,f,c
 13207  006CB2                     l1393:
 13208  006CB2  FFFF               	dw	65535	; assembler added errata NOP
 13209  006CB4  C023  F019         	movff	___aldiv@quotient,?___aldiv
 13210  006CB8  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
 13211  006CBC  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
 13212  006CC0  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
 13213  006CC4  0012               	return		;funcret
 13214  006CC6  FFFF               	dw	65535	; errata NOP
 13215  006CC8                     __end_of___aldiv:
 13216                           	opt stack 0
 13217                           tblptru	equ	0xFF8
 13218                           tblptrh	equ	0xFF7
 13219                           tblptrl	equ	0xFF6
 13220                           tablat	equ	0xFF5
 13221                           prodl	equ	0xFF3
 13222                           intcon	equ	0xFF2
 13223                           postinc0	equ	0xFEE
 13224                           wreg	equ	0xFE8
 13225                           indf2	equ	0xFDF
 13226                           postinc2	equ	0xFDE
 13227                           postdec2	equ	0xFDD
 13228                           plusw2	equ	0xFDB
 13229                           fsr2h	equ	0xFDA
 13230                           fsr2l	equ	0xFD9
 13231                           status	equ	0xFD8
 13232                           
 13233 ;; *************** function ___lmul *****************
 13234 ;; Defined at:
 13235 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;  multiplier      4   24[COMRAM] unsigned long 
 13238 ;;  multiplicand    4   28[COMRAM] unsigned long 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  product         4   32[COMRAM] unsigned long 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;                  4   24[COMRAM] unsigned long 
 13243 ;; Registers used:
 13244 ;;		wreg, status,2, status,0
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13250 ;;      Params:         8       0       0       0       0       0       0
 13251 ;;      Locals:         4       0       0       0       0       0       0
 13252 ;;      Temps:          0       0       0       0       0       0       0
 13253 ;;      Totals:        12       0       0       0       0       0       0
 13254 ;;Total ram usage:       12 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    1
 13257 ;; This function calls:
 13258 ;;		Nothing
 13259 ;; This function is called by:
 13260 ;;		_strtod
 13261 ;;		_localtime
 13262 ;;		_years_to_days
 13263 ;;		_mktime
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           	psect	text71
 13268  005A50                     __ptext71:
 13269                           	opt stack 0
 13270  005A50                     ___lmul:
 13271                           	opt stack 0
 13272  005A50  FFFF               	dw	65535	; assembler added errata NOP
 13273                           
 13274                           ;incstack = 0
 13275  005A52  0E00               	movlw	0
 13276  005A54  6E21               	movwf	___lmul@product,c
 13277  005A56  0E00               	movlw	0
 13278  005A58  6E22               	movwf	___lmul@product+1,c
 13279  005A5A  0E00               	movlw	0
 13280  005A5C  6E23               	movwf	___lmul@product+2,c
 13281  005A5E  0E00               	movlw	0
 13282  005A60  6E24               	movwf	___lmul@product+3,c
 13283  005A62  FFFF               	dw	65535	; assembler added errata NOP
 13284  005A64  A019               	btfss	___lmul@multiplier,0,c
 13285  005A66  D008               	goto	l1341
 13286  005A68  501D               	movf	___lmul@multiplicand,w,c
 13287  005A6A  2621               	addwf	___lmul@product,f,c
 13288  005A6C  501E               	movf	___lmul@multiplicand+1,w,c
 13289  005A6E  2222               	addwfc	___lmul@product+1,f,c
 13290  005A70  501F               	movf	___lmul@multiplicand+2,w,c
 13291  005A72  2223               	addwfc	___lmul@product+2,f,c
 13292  005A74  5020               	movf	___lmul@multiplicand+3,w,c
 13293  005A76  2224               	addwfc	___lmul@product+3,f,c
 13294  005A78                     l1341:
 13295  005A78  FFFF               	dw	65535	; assembler added errata NOP
 13296  005A7A  90D8               	bcf	status,0,c
 13297  005A7C  361D               	rlcf	___lmul@multiplicand,f,c
 13298  005A7E  361E               	rlcf	___lmul@multiplicand+1,f,c
 13299  005A80  361F               	rlcf	___lmul@multiplicand+2,f,c
 13300  005A82  3620               	rlcf	___lmul@multiplicand+3,f,c
 13301  005A84  90D8               	bcf	status,0,c
 13302  005A86  321C               	rrcf	___lmul@multiplier+3,f,c
 13303  005A88  321B               	rrcf	___lmul@multiplier+2,f,c
 13304  005A8A  321A               	rrcf	___lmul@multiplier+1,f,c
 13305  005A8C  3219               	rrcf	___lmul@multiplier,f,c
 13306  005A8E  5019               	movf	___lmul@multiplier,w,c
 13307  005A90  101A               	iorwf	___lmul@multiplier+1,w,c
 13308  005A92  101B               	iorwf	___lmul@multiplier+2,w,c
 13309  005A94  101C               	iorwf	___lmul@multiplier+3,w,c
 13310  005A96  A4D8               	btfss	status,2,c
 13311  005A98  D7E4               	goto	l1340
 13312  005A9A  C021  F019         	movff	___lmul@product,?___lmul
 13313  005A9E  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 13314  005AA2  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 13315  005AA6  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 13316  005AAA  0012               	return		;funcret
 13317  005AAC  FFFF               	dw	65535	; errata NOP
 13318  005AAE                     __end_of___lmul:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodl	equ	0xFF3
 13325                           intcon	equ	0xFF2
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           indf2	equ	0xFDF
 13329                           postinc2	equ	0xFDE
 13330                           postdec2	equ	0xFDD
 13331                           plusw2	equ	0xFDB
 13332                           fsr2h	equ	0xFDA
 13333                           fsr2l	equ	0xFD9
 13334                           status	equ	0xFD8
 13335                           
 13336 ;; *************** function _asctime *****************
 13337 ;; Defined at:
 13338 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\asctime.c"
 13339 ;; Parameters:    Size  Location     Type
 13340 ;;  tim             2   12[BANK0 ] PTR const struct tm
 13341 ;;		 -> gmtime@tim(18), 
 13342 ;; Auto vars:     Size  Location     Type
 13343 ;;  cp              2   17[BANK0 ] PTR unsigned char 
 13344 ;;		 -> asctime@buf(27), 
 13345 ;;  s               2   15[BANK0 ] PTR const unsigned char 
 13346 ;;		 -> STR_89(37), STR_88(22), 
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  2   12[BANK0 ] PTR unsigned char 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13351 ;; Tracked objects:
 13352 ;;		On entry : 0/0
 13353 ;;		On exit  : 0/0
 13354 ;;		Unchanged: 0/0
 13355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13356 ;;      Params:         0       2       0       0       0       0       0
 13357 ;;      Locals:         0       5       0       0       0       0       0
 13358 ;;      Temps:          0       0       0       0       0       0       0
 13359 ;;      Totals:         0       7       0       0       0       0       0
 13360 ;;Total ram usage:        7 bytes
 13361 ;; Hardware stack levels used:    1
 13362 ;; Hardware stack levels required when called:    3
 13363 ;; This function calls:
 13364 ;;		___awdiv
 13365 ;;		___awmod
 13366 ;;		___wmul
 13367 ;;		_put2d
 13368 ;; This function is called by:
 13369 ;;		_ctime
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text72
 13374  0036A6                     __ptext72:
 13375                           	opt stack 0
 13376  0036A6                     _asctime:
 13377                           	opt stack 0
 13378  0036A6  FFFF               	dw	65535	; assembler added errata NOP
 13379                           
 13380                           ;incstack = 0
 13381  0036A8  0100               	movlb	0	; () banked
 13382  0036AA  EE20 F00C          	lfsr	2,12
 13383  0036AE  516C               	movf	asctime@tim& (0+255),w,b
 13384  0036B0  26D9               	addwf	fsr2l,f,c
 13385  0036B2  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13386  0036B4  22DA               	addwfc	fsr2h,f,c
 13387  0036B6  CFDE F027          	movff	postinc2,___wmul@multiplier
 13388  0036BA  CFDD F028          	movff	postdec2,___wmul@multiplier+1
 13389  0036BE  0E00               	movlw	0
 13390  0036C0  6E2A               	movwf	___wmul@multiplicand+1,c
 13391  0036C2  0E03               	movlw	3
 13392  0036C4  6E29               	movwf	___wmul@multiplicand,c
 13393  0036C6  EC10  F029         	call	___wmul	;wreg free
 13394  0036CA  0EAC               	movlw	low STR_88
 13395  0036CC  2427               	addwf	?___wmul,w,c
 13396  0036CE  0100               	movlb	0	; () banked
 13397  0036D0  6F6F               	movwf	asctime@s& (0+255),b
 13398  0036D2  0E7E               	movlw	high STR_88
 13399  0036D4  2028               	addwfc	?___wmul+1,w,c
 13400  0036D6  0100               	movlb	0	; () banked
 13401  0036D8  6F70               	movwf	(asctime@s+1)& (0+255),b
 13402                           
 13403                           ; BSR set to: 0
 13404  0036DA  0E76               	movlw	low asctime@buf
 13405  0036DC  0100               	movlb	0	; () banked
 13406  0036DE  6F71               	movwf	asctime@cp& (0+255),b
 13407  0036E0  0E01               	movlw	high asctime@buf
 13408  0036E2  0100               	movlb	0	; () banked
 13409  0036E4  6F72               	movwf	(asctime@cp+1)& (0+255),b
 13410                           
 13411                           ; BSR set to: 0
 13412  0036E6  C06F  FFF6         	movff	asctime@s,tblptrl
 13413  0036EA  C070  FFF7         	movff	asctime@s+1,tblptrh
 13414  0036EE                     	if	0	;tblptru may be non-zero
 13415  0036EE                     	endif
 13416  0036EE                     	if	0	;tblptru may be non-zero
 13417  0036EE                     	endif
 13418  0036EE  C071  FFD9         	movff	asctime@cp,fsr2l
 13419  0036F2  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13420  0036F6  0008               	tblrd		*
 13421  0036F8  FFFF               	dw	65535	; errata NOP
 13422  0036FA  CFF5 FFDF          	movff	tablat,indf2
 13423                           
 13424                           ; BSR set to: 0
 13425  0036FE  0100               	movlb	0	; () banked
 13426  003700  4B6F               	infsnz	asctime@s& (0+255),f,b
 13427  003702  2B70               	incf	(asctime@s+1)& (0+255),f,b
 13428                           
 13429                           ; BSR set to: 0
 13430  003704  0100               	movlb	0	; () banked
 13431  003706  4B71               	infsnz	asctime@cp& (0+255),f,b
 13432  003708  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13433                           
 13434                           ; BSR set to: 0
 13435  00370A  C06F  FFF6         	movff	asctime@s,tblptrl
 13436  00370E  C070  FFF7         	movff	asctime@s+1,tblptrh
 13437  003712                     	if	0	;tblptru may be non-zero
 13438  003712                     	endif
 13439  003712                     	if	0	;tblptru may be non-zero
 13440  003712                     	endif
 13441  003712  C071  FFD9         	movff	asctime@cp,fsr2l
 13442  003716  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13443  00371A  0008               	tblrd		*
 13444  00371C  FFFF               	dw	65535	; errata NOP
 13445  00371E  CFF5 FFDF          	movff	tablat,indf2
 13446                           
 13447                           ; BSR set to: 0
 13448  003722  0100               	movlb	0	; () banked
 13449  003724  4B6F               	infsnz	asctime@s& (0+255),f,b
 13450  003726  2B70               	incf	(asctime@s+1)& (0+255),f,b
 13451                           
 13452                           ; BSR set to: 0
 13453  003728  0100               	movlb	0	; () banked
 13454  00372A  4B71               	infsnz	asctime@cp& (0+255),f,b
 13455  00372C  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13456                           
 13457                           ; BSR set to: 0
 13458  00372E  C06F  FFF6         	movff	asctime@s,tblptrl
 13459  003732  C070  FFF7         	movff	asctime@s+1,tblptrh
 13460  003736                     	if	0	;tblptru may be non-zero
 13461  003736                     	endif
 13462  003736                     	if	0	;tblptru may be non-zero
 13463  003736                     	endif
 13464  003736  C071  FFD9         	movff	asctime@cp,fsr2l
 13465  00373A  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13466  00373E  0008               	tblrd		*
 13467  003740  FFFF               	dw	65535	; errata NOP
 13468  003742  CFF5 FFDF          	movff	tablat,indf2
 13469                           
 13470                           ; BSR set to: 0
 13471  003746  0100               	movlb	0	; () banked
 13472  003748  4B71               	infsnz	asctime@cp& (0+255),f,b
 13473  00374A  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13474                           
 13475                           ; BSR set to: 0
 13476  00374C  C071  FFD9         	movff	asctime@cp,fsr2l
 13477  003750  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13478  003754  0E20               	movlw	32
 13479  003756  6EDF               	movwf	indf2,c
 13480                           
 13481                           ; BSR set to: 0
 13482  003758  0100               	movlb	0	; () banked
 13483  00375A  4B71               	infsnz	asctime@cp& (0+255),f,b
 13484  00375C  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13485                           
 13486                           ; BSR set to: 0
 13487  00375E  0100               	movlb	0	; () banked
 13488  003760  EE20 F008          	lfsr	2,8
 13489  003764  516C               	movf	asctime@tim& (0+255),w,b
 13490  003766  26D9               	addwf	fsr2l,f,c
 13491  003768  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13492  00376A  22DA               	addwfc	fsr2h,f,c
 13493  00376C  CFDE F027          	movff	postinc2,___wmul@multiplier
 13494  003770  CFDD F028          	movff	postdec2,___wmul@multiplier+1
 13495  003774  0E00               	movlw	0
 13496  003776  6E2A               	movwf	___wmul@multiplicand+1,c
 13497  003778  0E03               	movlw	3
 13498  00377A  6E29               	movwf	___wmul@multiplicand,c
 13499  00377C  EC10  F029         	call	___wmul	;wreg free
 13500  003780  0E04               	movlw	low STR_89
 13501  003782  2427               	addwf	?___wmul,w,c
 13502  003784  0100               	movlb	0	; () banked
 13503  003786  6F6F               	movwf	asctime@s& (0+255),b
 13504  003788  0E7E               	movlw	high STR_89
 13505  00378A  2028               	addwfc	?___wmul+1,w,c
 13506  00378C  0100               	movlb	0	; () banked
 13507  00378E  6F70               	movwf	(asctime@s+1)& (0+255),b
 13508                           
 13509                           ; BSR set to: 0
 13510  003790  C06F  FFF6         	movff	asctime@s,tblptrl
 13511  003794  C070  FFF7         	movff	asctime@s+1,tblptrh
 13512  003798                     	if	0	;tblptru may be non-zero
 13513  003798                     	endif
 13514  003798                     	if	0	;tblptru may be non-zero
 13515  003798                     	endif
 13516  003798  C071  FFD9         	movff	asctime@cp,fsr2l
 13517  00379C  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13518  0037A0  0008               	tblrd		*
 13519  0037A2  FFFF               	dw	65535	; errata NOP
 13520  0037A4  CFF5 FFDF          	movff	tablat,indf2
 13521                           
 13522                           ; BSR set to: 0
 13523  0037A8  0100               	movlb	0	; () banked
 13524  0037AA  4B6F               	infsnz	asctime@s& (0+255),f,b
 13525  0037AC  2B70               	incf	(asctime@s+1)& (0+255),f,b
 13526                           
 13527                           ; BSR set to: 0
 13528  0037AE  0100               	movlb	0	; () banked
 13529  0037B0  4B71               	infsnz	asctime@cp& (0+255),f,b
 13530  0037B2  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13531                           
 13532                           ; BSR set to: 0
 13533  0037B4  C06F  FFF6         	movff	asctime@s,tblptrl
 13534  0037B8  C070  FFF7         	movff	asctime@s+1,tblptrh
 13535  0037BC                     	if	0	;tblptru may be non-zero
 13536  0037BC                     	endif
 13537  0037BC                     	if	0	;tblptru may be non-zero
 13538  0037BC                     	endif
 13539  0037BC  C071  FFD9         	movff	asctime@cp,fsr2l
 13540  0037C0  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13541  0037C4  0008               	tblrd		*
 13542  0037C6  FFFF               	dw	65535	; errata NOP
 13543  0037C8  CFF5 FFDF          	movff	tablat,indf2
 13544                           
 13545                           ; BSR set to: 0
 13546  0037CC  0100               	movlb	0	; () banked
 13547  0037CE  4B6F               	infsnz	asctime@s& (0+255),f,b
 13548  0037D0  2B70               	incf	(asctime@s+1)& (0+255),f,b
 13549                           
 13550                           ; BSR set to: 0
 13551  0037D2  0100               	movlb	0	; () banked
 13552  0037D4  4B71               	infsnz	asctime@cp& (0+255),f,b
 13553  0037D6  2B72               	incf	(asctime@cp+1)& (0+255),f,b
 13554                           
 13555                           ; BSR set to: 0
 13556  0037D8  C06F  FFF6         	movff	asctime@s,tblptrl
 13557  0037DC  C070  FFF7         	movff	asctime@s+1,tblptrh
 13558  0037E0                     	if	0	;tblptru may be non-zero
 13559  0037E0                     	endif
 13560  0037E0                     	if	0	;tblptru may be non-zero
 13561  0037E0                     	endif
 13562  0037E0  C071  FFD9         	movff	asctime@cp,fsr2l
 13563  0037E4  C072  FFDA         	movff	asctime@cp+1,fsr2h
 13564  0037E8  0008               	tblrd		*
 13565  0037EA  FFFF               	dw	65535	; errata NOP
 13566  0037EC  CFF5 FFDF          	movff	tablat,indf2
 13567                           
 13568                           ; BSR set to: 0
 13569  0037F0  0E20               	movlw	32
 13570  0037F2  0101               	movlb	1	; () banked
 13571  0037F4  6F7D               	movwf	(asctime@buf+7)& (0+255),b
 13572                           
 13573                           ; BSR set to: 1
 13574  0037F6  0E80               	movlw	low (asctime@buf+10)
 13575  0037F8  6E27               	movwf	put2d@cp,c
 13576  0037FA  0E01               	movlw	high (asctime@buf+10)
 13577  0037FC  6E28               	movwf	put2d@cp+1,c
 13578  0037FE  0100               	movlb	0	; () banked
 13579  003800  EE20 F006          	lfsr	2,6
 13580  003804  516C               	movf	asctime@tim& (0+255),w,b
 13581  003806  26D9               	addwf	fsr2l,f,c
 13582  003808  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13583  00380A  22DA               	addwfc	fsr2h,f,c
 13584  00380C  50DF               	movf	indf2,w,c
 13585  00380E  6E29               	movwf	put2d@i,c
 13586  003810  0E20               	movlw	32
 13587  003812  6E2A               	movwf	put2d@cl,c
 13588  003814  0E20               	movlw	32
 13589  003816  6E2B               	movwf	put2d@ct,c
 13590  003818  EC97  F02E         	call	_put2d	;wreg free
 13591  00381C  0E83               	movlw	low (asctime@buf+13)
 13592  00381E  6E27               	movwf	put2d@cp,c
 13593  003820  0E01               	movlw	high (asctime@buf+13)
 13594  003822  6E28               	movwf	put2d@cp+1,c
 13595  003824  0100               	movlb	0	; () banked
 13596  003826  EE20 F004          	lfsr	2,4
 13597  00382A  516C               	movf	asctime@tim& (0+255),w,b
 13598  00382C  26D9               	addwf	fsr2l,f,c
 13599  00382E  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13600  003830  22DA               	addwfc	fsr2h,f,c
 13601  003832  50DF               	movf	indf2,w,c
 13602  003834  6E29               	movwf	put2d@i,c
 13603  003836  0E30               	movlw	48
 13604  003838  6E2A               	movwf	put2d@cl,c
 13605  00383A  0E3A               	movlw	58
 13606  00383C  6E2B               	movwf	put2d@ct,c
 13607  00383E  EC97  F02E         	call	_put2d	;wreg free
 13608  003842  0E86               	movlw	low (asctime@buf+16)
 13609  003844  6E27               	movwf	put2d@cp,c
 13610  003846  0E01               	movlw	high (asctime@buf+16)
 13611  003848  6E28               	movwf	put2d@cp+1,c
 13612  00384A  0100               	movlb	0	; () banked
 13613  00384C  EE20 F002          	lfsr	2,2
 13614  003850  516C               	movf	asctime@tim& (0+255),w,b
 13615  003852  26D9               	addwf	fsr2l,f,c
 13616  003854  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13617  003856  22DA               	addwfc	fsr2h,f,c
 13618  003858  50DF               	movf	indf2,w,c
 13619  00385A  6E29               	movwf	put2d@i,c
 13620  00385C  0E30               	movlw	48
 13621  00385E  6E2A               	movwf	put2d@cl,c
 13622  003860  0E3A               	movlw	58
 13623  003862  6E2B               	movwf	put2d@ct,c
 13624  003864  EC97  F02E         	call	_put2d	;wreg free
 13625  003868  0E89               	movlw	low (asctime@buf+19)
 13626  00386A  6E27               	movwf	put2d@cp,c
 13627  00386C  0E01               	movlw	high (asctime@buf+19)
 13628  00386E  6E28               	movwf	put2d@cp+1,c
 13629  003870  C06C  FFD9         	movff	asctime@tim,fsr2l
 13630  003874  C06D  FFDA         	movff	asctime@tim+1,fsr2h
 13631  003878  50DF               	movf	indf2,w,c
 13632  00387A  6E29               	movwf	put2d@i,c
 13633  00387C  0E30               	movlw	48
 13634  00387E  6E2A               	movwf	put2d@cl,c
 13635  003880  0E20               	movlw	32
 13636  003882  6E2B               	movwf	put2d@ct,c
 13637  003884  EC97  F02E         	call	_put2d	;wreg free
 13638  003888  0E8C               	movlw	low (asctime@buf+22)
 13639  00388A  6E27               	movwf	put2d@cp,c
 13640  00388C  0E01               	movlw	high (asctime@buf+22)
 13641  00388E  6E28               	movwf	put2d@cp+1,c
 13642  003890  0100               	movlb	0	; () banked
 13643  003892  EE20 F00A          	lfsr	2,10
 13644  003896  516C               	movf	asctime@tim& (0+255),w,b
 13645  003898  26D9               	addwf	fsr2l,f,c
 13646  00389A  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13647  00389C  22DA               	addwfc	fsr2h,f,c
 13648  00389E  CFDE F01F          	movff	postinc2,___awdiv@dividend
 13649  0038A2  CFDD F020          	movff	postdec2,___awdiv@dividend+1
 13650  0038A6  0E00               	movlw	0
 13651  0038A8  6E22               	movwf	___awdiv@divisor+1,c
 13652  0038AA  0E64               	movlw	100
 13653  0038AC  6E21               	movwf	___awdiv@divisor,c
 13654  0038AE  EC2E  F031         	call	___awdiv	;wreg free
 13655  0038B2  501F               	movf	?___awdiv,w,c
 13656  0038B4  0F13               	addlw	19
 13657  0038B6  6E29               	movwf	put2d@i,c
 13658  0038B8  0E20               	movlw	32
 13659  0038BA  6E2A               	movwf	put2d@cl,c
 13660  0038BC  0E00               	movlw	0
 13661  0038BE  6E2B               	movwf	put2d@ct,c
 13662  0038C0  EC97  F02E         	call	_put2d	;wreg free
 13663  0038C4  0100               	movlb	0	; () banked
 13664  0038C6  EE20 F00A          	lfsr	2,10
 13665  0038CA  516C               	movf	asctime@tim& (0+255),w,b
 13666  0038CC  26D9               	addwf	fsr2l,f,c
 13667  0038CE  516D               	movf	(asctime@tim+1)& (0+255),w,b
 13668  0038D0  22DA               	addwfc	fsr2h,f,c
 13669  0038D2  CFDE F019          	movff	postinc2,___awmod@dividend
 13670  0038D6  CFDD F01A          	movff	postdec2,___awmod@dividend+1
 13671  0038DA  0E00               	movlw	0
 13672  0038DC  6E1C               	movwf	___awmod@divisor+1,c
 13673  0038DE  0E64               	movlw	100
 13674  0038E0  6E1B               	movwf	___awmod@divisor,c
 13675  0038E2  EC90  F02F         	call	___awmod	;wreg free
 13676  0038E6  5019               	movf	?___awmod,w,c
 13677  0038E8  0100               	movlb	0	; () banked
 13678  0038EA  6F6E               	movwf	_asctime$3559& (0+255),b
 13679                           
 13680                           ; BSR set to: 0
 13681  0038EC  0E8E               	movlw	low (asctime@buf+24)
 13682  0038EE  6E27               	movwf	put2d@cp,c
 13683  0038F0  0E01               	movlw	high (asctime@buf+24)
 13684  0038F2  6E28               	movwf	put2d@cp+1,c
 13685  0038F4  C06E  F029         	movff	_asctime$3559,put2d@i
 13686  0038F8  0E30               	movlw	48
 13687  0038FA  6E2A               	movwf	put2d@cl,c
 13688  0038FC  0E0A               	movlw	10
 13689  0038FE  6E2B               	movwf	put2d@ct,c
 13690  003900  EC97  F02E         	call	_put2d	;wreg free
 13691  003904  0E76               	movlw	low asctime@buf
 13692  003906  0100               	movlb	0	; () banked
 13693  003908  6F6C               	movwf	?_asctime& (0+255),b
 13694  00390A  0E01               	movlw	high asctime@buf
 13695  00390C  0100               	movlb	0	; () banked
 13696  00390E  6F6D               	movwf	(?_asctime+1)& (0+255),b
 13697                           
 13698                           ; BSR set to: 0
 13699                           
 13700                           ; BSR set to: 0
 13701  003910  0012               	return		;funcret
 13702  003912  FFFF               	dw	65535	; errata NOP
 13703  003914                     __end_of_asctime:
 13704                           	opt stack 0
 13705                           tblptru	equ	0xFF8
 13706                           tblptrh	equ	0xFF7
 13707                           tblptrl	equ	0xFF6
 13708                           tablat	equ	0xFF5
 13709                           prodl	equ	0xFF3
 13710                           intcon	equ	0xFF2
 13711                           postinc0	equ	0xFEE
 13712                           wreg	equ	0xFE8
 13713                           indf2	equ	0xFDF
 13714                           postinc2	equ	0xFDE
 13715                           postdec2	equ	0xFDD
 13716                           plusw2	equ	0xFDB
 13717                           fsr2h	equ	0xFDA
 13718                           fsr2l	equ	0xFD9
 13719                           status	equ	0xFD8
 13720                           
 13721 ;; *************** function _put2d *****************
 13722 ;; Defined at:
 13723 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\asctime.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;  cp              2   38[COMRAM] PTR unsigned char 
 13726 ;;		 -> asctime@buf(27), 
 13727 ;;  i               1   40[COMRAM] unsigned char 
 13728 ;;  cl              1   41[COMRAM] unsigned char 
 13729 ;;  ct              1   42[COMRAM] unsigned char 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;		None
 13732 ;; Return value:  Size  Location     Type
 13733 ;;                  2   38[COMRAM] int 
 13734 ;; Registers used:
 13735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13741 ;;      Params:         5       0       0       0       0       0       0
 13742 ;;      Locals:         0       0       0       0       0       0       0
 13743 ;;      Temps:          0       0       0       0       0       0       0
 13744 ;;      Totals:         5       0       0       0       0       0       0
 13745 ;;Total ram usage:        5 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; Hardware stack levels required when called:    2
 13748 ;; This function calls:
 13749 ;;		___awmod
 13750 ;;		___lbdiv
 13751 ;; This function is called by:
 13752 ;;		_asctime
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           	psect	text73
 13757  005D2E                     __ptext73:
 13758                           	opt stack 0
 13759  005D2E                     _put2d:
 13760                           	opt stack 0
 13761  005D2E  FFFF               	dw	65535	; assembler added errata NOP
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;incstack = 0
 13765  005D30  C027  FFD9         	movff	put2d@cp,fsr2l
 13766  005D34  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13767  005D38  C02B  FFDF         	movff	put2d@ct,indf2
 13768  005D3C  C029  F019         	movff	put2d@i,___awmod@dividend
 13769  005D40  6A1A               	clrf	___awmod@dividend+1,c
 13770  005D42  0E00               	movlw	0
 13771  005D44  6E1C               	movwf	___awmod@divisor+1,c
 13772  005D46  0E0A               	movlw	10
 13773  005D48  6E1B               	movwf	___awmod@divisor,c
 13774  005D4A  EC90  F02F         	call	___awmod	;wreg free
 13775  005D4E  5019               	movf	?___awmod,w,c
 13776  005D50  0F30               	addlw	48
 13777  005D52  0627               	decf	put2d@cp,f,c
 13778  005D54  A0D8               	btfss	status,0,c
 13779  005D56  0628               	decf	put2d@cp+1,f,c
 13780  005D58  C027  FFD9         	movff	put2d@cp,fsr2l
 13781  005D5C  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13782  005D60  6EDF               	movwf	indf2,c
 13783  005D62  0E0A               	movlw	10
 13784  005D64  6E19               	movwf	___lbdiv@divisor,c
 13785  005D66  5029               	movf	put2d@i,w,c
 13786  005D68  EC1E  F02B         	call	___lbdiv
 13787  005D6C  6E29               	movwf	put2d@i,c
 13788  005D6E  5029               	movf	put2d@i,w,c
 13789  005D70  B4D8               	btfsc	status,2,c
 13790  005D72  D00B               	goto	l2124
 13791  005D74  5029               	movf	put2d@i,w,c
 13792  005D76  0F30               	addlw	48
 13793  005D78  0627               	decf	put2d@cp,f,c
 13794  005D7A  A0D8               	btfss	status,0,c
 13795  005D7C  0628               	decf	put2d@cp+1,f,c
 13796  005D7E  C027  FFD9         	movff	put2d@cp,fsr2l
 13797  005D82  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13798  005D86  6EDF               	movwf	indf2,c
 13799  005D88  D00A               	goto	l2125
 13800  005D8A                     l2124:
 13801  005D8A  FFFF               	dw	65535	; assembler added errata NOP
 13802  005D8C  0627               	decf	put2d@cp,f,c
 13803  005D8E  A0D8               	btfss	status,0,c
 13804  005D90  0628               	decf	put2d@cp+1,f,c
 13805  005D92  C027  FFD9         	movff	put2d@cp,fsr2l
 13806  005D96  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13807  005D9A  C02A  FFDF         	movff	put2d@cl,indf2
 13808  005D9E                     l2125:
 13809  005D9E  FFFF               	dw	65535	; assembler added errata NOP
 13810  005DA0  0012               	return		;funcret
 13811  005DA2  FFFF               	dw	65535	; errata NOP
 13812  005DA4                     __end_of_put2d:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           postinc0	equ	0xFEE
 13821                           wreg	equ	0xFE8
 13822                           indf2	equ	0xFDF
 13823                           postinc2	equ	0xFDE
 13824                           postdec2	equ	0xFDD
 13825                           plusw2	equ	0xFDB
 13826                           fsr2h	equ	0xFDA
 13827                           fsr2l	equ	0xFD9
 13828                           status	equ	0xFD8
 13829                           
 13830 ;; *************** function ___lbdiv *****************
 13831 ;; Defined at:
 13832 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lbdiv.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  dividend        1    wreg     unsigned char 
 13835 ;;  divisor         1   24[COMRAM] unsigned char 
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  dividend        1   25[COMRAM] unsigned char 
 13838 ;;  quotient        1   27[COMRAM] unsigned char 
 13839 ;;  counter         1   26[COMRAM] unsigned char 
 13840 ;; Return value:  Size  Location     Type
 13841 ;;                  1    wreg      unsigned char 
 13842 ;; Registers used:
 13843 ;;		wreg, status,2, status,0
 13844 ;; Tracked objects:
 13845 ;;		On entry : 0/0
 13846 ;;		On exit  : 0/0
 13847 ;;		Unchanged: 0/0
 13848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13849 ;;      Params:         1       0       0       0       0       0       0
 13850 ;;      Locals:         3       0       0       0       0       0       0
 13851 ;;      Temps:          0       0       0       0       0       0       0
 13852 ;;      Totals:         4       0       0       0       0       0       0
 13853 ;;Total ram usage:        4 bytes
 13854 ;; Hardware stack levels used:    1
 13855 ;; Hardware stack levels required when called:    1
 13856 ;; This function calls:
 13857 ;;		Nothing
 13858 ;; This function is called by:
 13859 ;;		_put2d
 13860 ;; This function uses a non-reentrant model
 13861 ;;
 13862                           
 13863                           	psect	text74
 13864  00563C                     __ptext74:
 13865                           	opt stack 0
 13866  00563C                     ___lbdiv:
 13867                           	opt stack 0
 13868  00563C  FFFF               	dw	65535	; assembler added errata NOP
 13869                           
 13870                           ;incstack = 0
 13871                           ;___lbdiv@dividend stored from wreg
 13872  00563E  6E1A               	movwf	___lbdiv@dividend,c
 13873  005640  0E00               	movlw	0
 13874  005642  6E1C               	movwf	___lbdiv@quotient,c
 13875  005644  5019               	movf	___lbdiv@divisor,w,c
 13876  005646  B4D8               	btfsc	status,2,c
 13877  005648  D019               	goto	l1814
 13878  00564A  0E01               	movlw	1
 13879  00564C  6E1B               	movwf	___lbdiv@counter,c
 13880  00564E  D004               	goto	l1809
 13881  005650  FFFF               	dw	65535	; assembler added errata NOP
 13882  005652  90D8               	bcf	status,0,c
 13883  005654  3619               	rlcf	___lbdiv@divisor,f,c
 13884  005656  2A1B               	incf	___lbdiv@counter,f,c
 13885  005658                     l1809:
 13886  005658  FFFF               	dw	65535	; assembler added errata NOP
 13887  00565A  AE19               	btfss	___lbdiv@divisor,7,c
 13888  00565C  D7F9               	goto	l1810
 13889  00565E                     u10590:
 13890  00565E  FFFF               	dw	65535	; assembler added errata NOP
 13891  005660  90D8               	bcf	status,0,c
 13892  005662  361C               	rlcf	___lbdiv@quotient,f,c
 13893  005664  5019               	movf	___lbdiv@divisor,w,c
 13894  005666  5C1A               	subwf	___lbdiv@dividend,w,c
 13895  005668  A0D8               	btfss	status,0,c
 13896  00566A  D003               	goto	l1813
 13897  00566C  5019               	movf	___lbdiv@divisor,w,c
 13898  00566E  5E1A               	subwf	___lbdiv@dividend,f,c
 13899  005670  801C               	bsf	___lbdiv@quotient,0,c
 13900  005672                     l1813:
 13901  005672  FFFF               	dw	65535	; assembler added errata NOP
 13902  005674  90D8               	bcf	status,0,c
 13903  005676  3219               	rrcf	___lbdiv@divisor,f,c
 13904  005678  2E1B               	decfsz	___lbdiv@counter,f,c
 13905  00567A  D7F1               	goto	u10590
 13906  00567C                     l1814:
 13907  00567C  FFFF               	dw	65535	; assembler added errata NOP
 13908  00567E  501C               	movf	___lbdiv@quotient,w,c
 13909  005680  0012               	return		;funcret
 13910  005682  FFFF               	dw	65535	; errata NOP
 13911  005684                     __end_of___lbdiv:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodl	equ	0xFF3
 13918                           intcon	equ	0xFF2
 13919                           postinc0	equ	0xFEE
 13920                           wreg	equ	0xFE8
 13921                           indf2	equ	0xFDF
 13922                           postinc2	equ	0xFDE
 13923                           postdec2	equ	0xFDD
 13924                           plusw2	equ	0xFDB
 13925                           fsr2h	equ	0xFDA
 13926                           fsr2l	equ	0xFD9
 13927                           status	equ	0xFD8
 13928                           
 13929 ;; *************** function _check_start_flag *****************
 13930 ;; Defined at:
 13931 ;;		line 210 in file "main.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;		None
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;		None
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      unsigned char 
 13938 ;; Registers used:
 13939 ;;		wreg, status,2, status,0
 13940 ;; Tracked objects:
 13941 ;;		On entry : 0/0
 13942 ;;		On exit  : 0/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13945 ;;      Params:         0       0       0       0       0       0       0
 13946 ;;      Locals:         0       0       0       0       0       0       0
 13947 ;;      Temps:          5       0       0       0       0       0       0
 13948 ;;      Totals:         5       0       0       0       0       0       0
 13949 ;;Total ram usage:        5 bytes
 13950 ;; Hardware stack levels used:    1
 13951 ;; Hardware stack levels required when called:    1
 13952 ;; This function calls:
 13953 ;;		Nothing
 13954 ;; This function is called by:
 13955 ;;		_main
 13956 ;; This function uses a non-reentrant model
 13957 ;;
 13958                           
 13959                           	psect	text75
 13960  0055F4                     __ptext75:
 13961                           	opt stack 0
 13962  0055F4                     _check_start_flag:
 13963                           	opt stack 0
 13964  0055F4  FFFF               	dw	65535	; assembler added errata NOP
 13965                           
 13966                           ;main.c: 212: if(start_flag==0){
 13967                           
 13968                           ;incstack = 0
 13969  0055F6  5044               	movf	_start_flag,w,c
 13970  0055F8  A4D8               	btfss	status,2,c
 13971  0055FA  D01C               	goto	l1012
 13972                           
 13973                           ;main.c: 213: if(++start_counter>start_value+1)
 13974  0055FC  2A43               	incf	_start_counter,f,c
 13975  0055FE  5043               	movf	_start_counter,w,c
 13976  005600  6E19               	movwf	??_check_start_flag& (0+255),c
 13977  005602  6A1A               	clrf	(??_check_start_flag+1)& (0+255),c
 13978  005604  0E01               	movlw	1
 13979  005606  0100               	movlb	0	; () banked
 13980  005608  25F5               	addwf	_start_value& (0+255),w,b
 13981  00560A  6E1B               	movwf	(??_check_start_flag+2)& (0+255),c
 13982  00560C  0E00               	movlw	0
 13983  00560E  0100               	movlb	0	; () banked
 13984  005610  21F6               	addwfc	(_start_value+1)& (0+255),w,b
 13985  005612  6E1C               	movwf	(??_check_start_flag+3)& (0+255),c
 13986  005614  5019               	movf	??_check_start_flag,w,c
 13987  005616  5C1B               	subwf	??_check_start_flag+2,w,c
 13988  005618  501C               	movf	??_check_start_flag+3,w,c
 13989  00561A  0A80               	xorlw	128
 13990  00561C  6E1D               	movwf	(??_check_start_flag+4)& (0+255),c
 13991  00561E  501A               	movf	??_check_start_flag+1,w,c
 13992  005620  0A80               	xorlw	128
 13993  005622  581D               	subwfb	(??_check_start_flag+4)& (0+255),w,c
 13994  005624  B0D8               	btfsc	status,0,c
 13995  005626  D002               	goto	l1011
 13996                           
 13997                           ; BSR set to: 0
 13998                           ;main.c: 214: start_flag=1;
 13999  005628  0E01               	movlw	1
 14000  00562A  D002               	goto	L13
 14001  00562C                     l1011:
 14002  00562C  FFFF               	dw	65535	; assembler added errata NOP
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;main.c: 215: else
 14006                           ;main.c: 216: start_flag=0;
 14007                           
 14008                           ; BSR set to: 0
 14009  00562E  0E00               	movlw	0
 14010  005630                     L13:
 14011  005630  FFFF               	dw	65535	; assembler added errata NOP
 14012  005632  6E44               	movwf	_start_flag,c
 14013  005634                     l1012:
 14014  005634  FFFF               	dw	65535	; assembler added errata NOP
 14015                           
 14016                           ;main.c: 217: }
 14017                           ;main.c: 218: return start_flag;
 14018                           
 14019                           ; BSR set to: 0
 14020  005636  5044               	movf	_start_flag,w,c
 14021  005638  0012               	return		;funcret
 14022  00563A  FFFF               	dw	65535	; errata NOP
 14023  00563C                     __end_of_check_start_flag:
 14024                           	opt stack 0
 14025                           tblptru	equ	0xFF8
 14026                           tblptrh	equ	0xFF7
 14027                           tblptrl	equ	0xFF6
 14028                           tablat	equ	0xFF5
 14029                           prodl	equ	0xFF3
 14030                           intcon	equ	0xFF2
 14031                           postinc0	equ	0xFEE
 14032                           wreg	equ	0xFE8
 14033                           indf2	equ	0xFDF
 14034                           postinc2	equ	0xFDE
 14035                           postdec2	equ	0xFDD
 14036                           plusw2	equ	0xFDB
 14037                           fsr2h	equ	0xFDA
 14038                           fsr2l	equ	0xFD9
 14039                           status	equ	0xFD8
 14040                           
 14041 ;; *************** function _check_V3_status *****************
 14042 ;; Defined at:
 14043 ;;		line 371 in file "main.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;  status          1    wreg     struct data_check
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;  status          1   24[COMRAM] struct data_check
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14057 ;;      Params:         0       0       0       0       0       0       0
 14058 ;;      Locals:         1       0       0       0       0       0       0
 14059 ;;      Temps:          0       0       0       0       0       0       0
 14060 ;;      Totals:         1       0       0       0       0       0       0
 14061 ;;Total ram usage:        1 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    1
 14064 ;; This function calls:
 14065 ;;		Nothing
 14066 ;; This function is called by:
 14067 ;;		_main
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           	psect	text76
 14072  005474                     __ptext76:
 14073                           	opt stack 0
 14074  005474                     _check_V3_status:
 14075                           	opt stack 0
 14076  005474  FFFF               	dw	65535	; assembler added errata NOP
 14077                           
 14078                           ;incstack = 0
 14079                           ;check_V3_status@status stored from wreg
 14080  005476  6E19               	movwf	check_V3_status@status,c
 14081                           
 14082                           ;main.c: 374: if(status.VL3_Low==1){
 14083  005478  A819               	btfss	check_V3_status@status,4,c
 14084  00547A  D005               	goto	l1049
 14085                           
 14086                           ;main.c: 375: Outputs.led5=1;
 14087  00547C  0100               	movlb	0	; () banked
 14088  00547E  89EB               	bsf	(_Outputs+3)& (0+255),4,b
 14089                           
 14090                           ;main.c: 376: Outputs.led6=0;
 14091  005480  0100               	movlb	0	; () banked
 14092  005482  9BEB               	bcf	(_Outputs+3)& (0+255),5,b
 14093  005484  D007               	goto	L14
 14094  005486                     l1049:
 14095  005486  FFFF               	dw	65535	; assembler added errata NOP
 14096                           
 14097                           ;main.c: 380: else if(status.VL3_High==1){
 14098                           
 14099                           ; BSR set to: 0
 14100  005488  AA19               	btfss	check_V3_status@status,5,c
 14101  00548A  D00A               	goto	l1051
 14102                           
 14103                           ;main.c: 381: Outputs.led5=0;
 14104  00548C  0100               	movlb	0	; () banked
 14105  00548E  99EB               	bcf	(_Outputs+3)& (0+255),4,b
 14106                           
 14107                           ;main.c: 382: Outputs.led6=1;
 14108  005490  0100               	movlb	0	; () banked
 14109  005492  8BEB               	bsf	(_Outputs+3)& (0+255),5,b
 14110  005494                     L14:
 14111  005494  FFFF               	dw	65535	; assembler added errata NOP
 14112                           
 14113                           ;main.c: 383: Outputs.led16=1;
 14114  005496  0100               	movlb	0	; () banked
 14115  005498  8FEA               	bsf	(_Outputs+2)& (0+255),7,b
 14116                           
 14117                           ;main.c: 384: Outputs.rly3=1;
 14118  00549A  0100               	movlb	0	; () banked
 14119  00549C  85E9               	bsf	(_Outputs+1)& (0+255),2,b
 14120                           
 14121                           ;main.c: 385: }
 14122  00549E  D005               	goto	l1052
 14123  0054A0                     l1051:
 14124  0054A0  FFFF               	dw	65535	; assembler added errata NOP
 14125                           
 14126                           ;main.c: 386: else{
 14127                           ;main.c: 387: Outputs.led5=0;
 14128  0054A2  0100               	movlb	0	; () banked
 14129  0054A4  99EB               	bcf	(_Outputs+3)& (0+255),4,b
 14130                           
 14131                           ;main.c: 388: Outputs.led6=0;
 14132  0054A6  0100               	movlb	0	; () banked
 14133  0054A8  9BEB               	bcf	(_Outputs+3)& (0+255),5,b
 14134  0054AA                     l1052:
 14135  0054AA  FFFF               	dw	65535	; assembler added errata NOP
 14136                           
 14137                           ; BSR set to: 0
 14138                           
 14139                           ; BSR set to: 0
 14140                           
 14141                           ; BSR set to: 0
 14142  0054AC  0012               	return		;funcret
 14143  0054AE  FFFF               	dw	65535	; errata NOP
 14144  0054B0                     __end_of_check_V3_status:
 14145                           	opt stack 0
 14146                           tblptru	equ	0xFF8
 14147                           tblptrh	equ	0xFF7
 14148                           tblptrl	equ	0xFF6
 14149                           tablat	equ	0xFF5
 14150                           prodl	equ	0xFF3
 14151                           intcon	equ	0xFF2
 14152                           postinc0	equ	0xFEE
 14153                           wreg	equ	0xFE8
 14154                           indf2	equ	0xFDF
 14155                           postinc2	equ	0xFDE
 14156                           postdec2	equ	0xFDD
 14157                           plusw2	equ	0xFDB
 14158                           fsr2h	equ	0xFDA
 14159                           fsr2l	equ	0xFD9
 14160                           status	equ	0xFD8
 14161                           
 14162 ;; *************** function _check_V2_status *****************
 14163 ;; Defined at:
 14164 ;;		line 348 in file "main.c"
 14165 ;; Parameters:    Size  Location     Type
 14166 ;;  status          1    wreg     struct data_check
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;  status          1   24[COMRAM] struct data_check
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  1    wreg      void 
 14171 ;; Registers used:
 14172 ;;		wreg
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14178 ;;      Params:         0       0       0       0       0       0       0
 14179 ;;      Locals:         1       0       0       0       0       0       0
 14180 ;;      Temps:          0       0       0       0       0       0       0
 14181 ;;      Totals:         1       0       0       0       0       0       0
 14182 ;;Total ram usage:        1 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    1
 14185 ;; This function calls:
 14186 ;;		Nothing
 14187 ;; This function is called by:
 14188 ;;		_main
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           	psect	text77
 14193  005438                     __ptext77:
 14194                           	opt stack 0
 14195  005438                     _check_V2_status:
 14196                           	opt stack 0
 14197  005438  FFFF               	dw	65535	; assembler added errata NOP
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;incstack = 0
 14201                           ;check_V2_status@status stored from wreg
 14202  00543A  6E19               	movwf	check_V2_status@status,c
 14203                           
 14204                           ;main.c: 351: if(status.VL2_Low==1){
 14205  00543C  A419               	btfss	check_V2_status@status,2,c
 14206  00543E  D005               	goto	l1042
 14207                           
 14208                           ;main.c: 352: Outputs.led3=1;
 14209  005440  0100               	movlb	0	; () banked
 14210  005442  85EB               	bsf	(_Outputs+3)& (0+255),2,b
 14211                           
 14212                           ;main.c: 353: Outputs.led4=0;
 14213  005444  0100               	movlb	0	; () banked
 14214  005446  97EB               	bcf	(_Outputs+3)& (0+255),3,b
 14215  005448  D007               	goto	L15
 14216  00544A                     l1042:
 14217  00544A  FFFF               	dw	65535	; assembler added errata NOP
 14218                           
 14219                           ;main.c: 357: else if(status.VL2_High==1){
 14220                           
 14221                           ; BSR set to: 0
 14222  00544C  A619               	btfss	check_V2_status@status,3,c
 14223  00544E  D00A               	goto	l1044
 14224                           
 14225                           ;main.c: 358: Outputs.led3=0;
 14226  005450  0100               	movlb	0	; () banked
 14227  005452  95EB               	bcf	(_Outputs+3)& (0+255),2,b
 14228                           
 14229                           ;main.c: 359: Outputs.led4=1;
 14230  005454  0100               	movlb	0	; () banked
 14231  005456  87EB               	bsf	(_Outputs+3)& (0+255),3,b
 14232  005458                     L15:
 14233  005458  FFFF               	dw	65535	; assembler added errata NOP
 14234                           
 14235                           ;main.c: 360: Outputs.led16=1;
 14236  00545A  0100               	movlb	0	; () banked
 14237  00545C  8FEA               	bsf	(_Outputs+2)& (0+255),7,b
 14238                           
 14239                           ;main.c: 361: Outputs.rly3=1;
 14240  00545E  0100               	movlb	0	; () banked
 14241  005460  85E9               	bsf	(_Outputs+1)& (0+255),2,b
 14242                           
 14243                           ;main.c: 362: }
 14244  005462  D005               	goto	l1045
 14245  005464                     l1044:
 14246  005464  FFFF               	dw	65535	; assembler added errata NOP
 14247                           
 14248                           ;main.c: 363: else{
 14249                           ;main.c: 364: Outputs.led3=0;
 14250  005466  0100               	movlb	0	; () banked
 14251  005468  95EB               	bcf	(_Outputs+3)& (0+255),2,b
 14252                           
 14253                           ;main.c: 365: Outputs.led4=0;
 14254  00546A  0100               	movlb	0	; () banked
 14255  00546C  97EB               	bcf	(_Outputs+3)& (0+255),3,b
 14256  00546E                     l1045:
 14257  00546E  FFFF               	dw	65535	; assembler added errata NOP
 14258                           
 14259                           ; BSR set to: 0
 14260                           
 14261                           ; BSR set to: 0
 14262                           
 14263                           ; BSR set to: 0
 14264  005470  0012               	return		;funcret
 14265  005472  FFFF               	dw	65535	; errata NOP
 14266  005474                     __end_of_check_V2_status:
 14267                           	opt stack 0
 14268                           tblptru	equ	0xFF8
 14269                           tblptrh	equ	0xFF7
 14270                           tblptrl	equ	0xFF6
 14271                           tablat	equ	0xFF5
 14272                           prodl	equ	0xFF3
 14273                           intcon	equ	0xFF2
 14274                           postinc0	equ	0xFEE
 14275                           wreg	equ	0xFE8
 14276                           indf2	equ	0xFDF
 14277                           postinc2	equ	0xFDE
 14278                           postdec2	equ	0xFDD
 14279                           plusw2	equ	0xFDB
 14280                           fsr2h	equ	0xFDA
 14281                           fsr2l	equ	0xFD9
 14282                           status	equ	0xFD8
 14283                           
 14284 ;; *************** function _check_V1_status *****************
 14285 ;; Defined at:
 14286 ;;		line 321 in file "main.c"
 14287 ;; Parameters:    Size  Location     Type
 14288 ;;  status          1    wreg     struct data_check
 14289 ;; Auto vars:     Size  Location     Type
 14290 ;;  status          1   24[COMRAM] struct data_check
 14291 ;; Return value:  Size  Location     Type
 14292 ;;                  1    wreg      void 
 14293 ;; Registers used:
 14294 ;;		wreg
 14295 ;; Tracked objects:
 14296 ;;		On entry : 0/0
 14297 ;;		On exit  : 0/0
 14298 ;;		Unchanged: 0/0
 14299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14300 ;;      Params:         0       0       0       0       0       0       0
 14301 ;;      Locals:         1       0       0       0       0       0       0
 14302 ;;      Temps:          0       0       0       0       0       0       0
 14303 ;;      Totals:         1       0       0       0       0       0       0
 14304 ;;Total ram usage:        1 bytes
 14305 ;; Hardware stack levels used:    1
 14306 ;; Hardware stack levels required when called:    1
 14307 ;; This function calls:
 14308 ;;		Nothing
 14309 ;; This function is called by:
 14310 ;;		_main
 14311 ;; This function uses a non-reentrant model
 14312 ;;
 14313                           
 14314                           	psect	text78
 14315  0055B0                     __ptext78:
 14316                           	opt stack 0
 14317  0055B0                     _check_V1_status:
 14318                           	opt stack 0
 14319  0055B0  FFFF               	dw	65535	; assembler added errata NOP
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;incstack = 0
 14323                           ;check_V1_status@status stored from wreg
 14324  0055B2  6E19               	movwf	check_V1_status@status,c
 14325                           
 14326                           ;main.c: 324: if(status.VL1_Low==1){
 14327  0055B4  A019               	btfss	check_V1_status@status,0,c
 14328  0055B6  D005               	goto	l1035
 14329                           
 14330                           ;main.c: 325: Outputs.led1=1;
 14331  0055B8  0100               	movlb	0	; () banked
 14332  0055BA  81EB               	bsf	(_Outputs+3)& (0+255),0,b
 14333                           
 14334                           ;main.c: 326: Outputs.led2=0;
 14335  0055BC  0100               	movlb	0	; () banked
 14336  0055BE  93EB               	bcf	(_Outputs+3)& (0+255),1,b
 14337  0055C0  D007               	goto	L16
 14338  0055C2                     l1035:
 14339  0055C2  FFFF               	dw	65535	; assembler added errata NOP
 14340                           
 14341                           ;main.c: 331: else if(status.VL1_High==1){
 14342                           
 14343                           ; BSR set to: 0
 14344  0055C4  A219               	btfss	check_V1_status@status,1,c
 14345  0055C6  D00A               	goto	l1037
 14346                           
 14347                           ;main.c: 332: Outputs.led1=0;
 14348  0055C8  0100               	movlb	0	; () banked
 14349  0055CA  91EB               	bcf	(_Outputs+3)& (0+255),0,b
 14350                           
 14351                           ;main.c: 333: Outputs.led2=1;
 14352  0055CC  0100               	movlb	0	; () banked
 14353  0055CE  83EB               	bsf	(_Outputs+3)& (0+255),1,b
 14354  0055D0                     L16:
 14355  0055D0  FFFF               	dw	65535	; assembler added errata NOP
 14356                           
 14357                           ;main.c: 334: Outputs.led16=1;
 14358  0055D2  0100               	movlb	0	; () banked
 14359  0055D4  8FEA               	bsf	(_Outputs+2)& (0+255),7,b
 14360                           
 14361                           ;main.c: 335: Outputs.rly3=1;
 14362  0055D6  0100               	movlb	0	; () banked
 14363  0055D8  85E9               	bsf	(_Outputs+1)& (0+255),2,b
 14364                           
 14365                           ;main.c: 337: }
 14366  0055DA  D009               	goto	l1038
 14367  0055DC                     l1037:
 14368  0055DC  FFFF               	dw	65535	; assembler added errata NOP
 14369                           
 14370                           ;main.c: 338: else{
 14371                           ;main.c: 339: Outputs.led1=0;
 14372  0055DE  0100               	movlb	0	; () banked
 14373  0055E0  91EB               	bcf	(_Outputs+3)& (0+255),0,b
 14374                           
 14375                           ;main.c: 340: Outputs.led2=0;
 14376  0055E2  0100               	movlb	0	; () banked
 14377  0055E4  93EB               	bcf	(_Outputs+3)& (0+255),1,b
 14378                           
 14379                           ;main.c: 341: Outputs.led16=0;
 14380  0055E6  0100               	movlb	0	; () banked
 14381  0055E8  9FEA               	bcf	(_Outputs+2)& (0+255),7,b
 14382                           
 14383                           ;main.c: 342: Outputs.rly3=0;
 14384  0055EA  0100               	movlb	0	; () banked
 14385  0055EC  95E9               	bcf	(_Outputs+1)& (0+255),2,b
 14386  0055EE                     l1038:
 14387  0055EE  FFFF               	dw	65535	; assembler added errata NOP
 14388                           
 14389                           ; BSR set to: 0
 14390                           
 14391                           ; BSR set to: 0
 14392                           
 14393                           ; BSR set to: 0
 14394  0055F0  0012               	return		;funcret
 14395  0055F2  FFFF               	dw	65535	; errata NOP
 14396  0055F4                     __end_of_check_V1_status:
 14397                           	opt stack 0
 14398                           tblptru	equ	0xFF8
 14399                           tblptrh	equ	0xFF7
 14400                           tblptrl	equ	0xFF6
 14401                           tablat	equ	0xFF5
 14402                           prodl	equ	0xFF3
 14403                           intcon	equ	0xFF2
 14404                           postinc0	equ	0xFEE
 14405                           wreg	equ	0xFE8
 14406                           indf2	equ	0xFDF
 14407                           postinc2	equ	0xFDE
 14408                           postdec2	equ	0xFDD
 14409                           plusw2	equ	0xFDB
 14410                           fsr2h	equ	0xFDA
 14411                           fsr2l	equ	0xFD9
 14412                           status	equ	0xFD8
 14413                           
 14414 ;; *************** function _Rd_Digital_Inputs *****************
 14415 ;; Defined at:
 14416 ;;		line 66 in file "ior5e.c"
 14417 ;; Parameters:    Size  Location     Type
 14418 ;;		None
 14419 ;; Auto vars:     Size  Location     Type
 14420 ;;  Temp_RD         1   25[COMRAM] struct Digital_Inputs
 14421 ;;  Port_RD         1   24[COMRAM] struct Digital_Inputs
 14422 ;; Return value:  Size  Location     Type
 14423 ;;                  1    wreg      unsigned char 
 14424 ;; Registers used:
 14425 ;;		wreg, status,2
 14426 ;; Tracked objects:
 14427 ;;		On entry : 0/0
 14428 ;;		On exit  : 0/0
 14429 ;;		Unchanged: 0/0
 14430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14431 ;;      Params:         0       0       0       0       0       0       0
 14432 ;;      Locals:         2       0       0       0       0       0       0
 14433 ;;      Temps:          0       0       0       0       0       0       0
 14434 ;;      Totals:         2       0       0       0       0       0       0
 14435 ;;Total ram usage:        2 bytes
 14436 ;; Hardware stack levels used:    1
 14437 ;; Hardware stack levels required when called:    1
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_main
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           	psect	text79
 14446  00515C                     __ptext79:
 14447                           	opt stack 0
 14448  00515C                     _Rd_Digital_Inputs:
 14449                           	opt stack 0
 14450  00515C  FFFF               	dw	65535	; assembler added errata NOP
 14451                           
 14452                           ;ior5e.c: 68: union Digital_Inputs Port_RD, Temp_RD;
 14453                           ;ior5e.c: 70: Temp_RD.byte=PORTB;
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;incstack = 0
 14457  00515E  CF81 F01A          	movff	3969,Rd_Digital_Inputs@Temp_RD	;volatile
 14458                           
 14459                           ;ior5e.c: 72: Port_RD.B0=!Temp_RD.B0;
 14460  005162  8019               	bsf	Rd_Digital_Inputs@Port_RD,0,c
 14461  005164  B01A               	btfsc	Rd_Digital_Inputs@Temp_RD,0,c
 14462  005166  9019               	bcf	Rd_Digital_Inputs@Port_RD,0,c
 14463                           
 14464                           ;ior5e.c: 73: Port_RD.B1=!Temp_RD.B1;
 14465  005168  8219               	bsf	Rd_Digital_Inputs@Port_RD,1,c
 14466  00516A  B21A               	btfsc	Rd_Digital_Inputs@Temp_RD,1,c
 14467  00516C  9219               	bcf	Rd_Digital_Inputs@Port_RD,1,c
 14468                           
 14469                           ;ior5e.c: 74: Port_RD.B2=!Temp_RD.B4;
 14470  00516E  8419               	bsf	Rd_Digital_Inputs@Port_RD,2,c
 14471  005170  B81A               	btfsc	Rd_Digital_Inputs@Temp_RD,4,c
 14472  005172  9419               	bcf	Rd_Digital_Inputs@Port_RD,2,c
 14473                           
 14474                           ;ior5e.c: 75: Port_RD.B3=!Temp_RD.B5;
 14475  005174  8619               	bsf	Rd_Digital_Inputs@Port_RD,3,c
 14476  005176  BA1A               	btfsc	Rd_Digital_Inputs@Temp_RD,5,c
 14477  005178  9619               	bcf	Rd_Digital_Inputs@Port_RD,3,c
 14478                           
 14479                           ;ior5e.c: 77: return(Port_RD.byte);
 14480  00517A  5019               	movf	Rd_Digital_Inputs@Port_RD,w,c
 14481  00517C  0012               	return		;funcret
 14482  00517E  FFFF               	dw	65535	; errata NOP
 14483  005180                     __end_of_Rd_Digital_Inputs:
 14484                           	opt stack 0
 14485                           tblptru	equ	0xFF8
 14486                           tblptrh	equ	0xFF7
 14487                           tblptrl	equ	0xFF6
 14488                           tablat	equ	0xFF5
 14489                           prodl	equ	0xFF3
 14490                           intcon	equ	0xFF2
 14491                           postinc0	equ	0xFEE
 14492                           wreg	equ	0xFE8
 14493                           indf2	equ	0xFDF
 14494                           postinc2	equ	0xFDE
 14495                           postdec2	equ	0xFDD
 14496                           plusw2	equ	0xFDB
 14497                           fsr2h	equ	0xFDA
 14498                           fsr2l	equ	0xFD9
 14499                           status	equ	0xFD8
 14500                           
 14501 ;; *************** function _Open_Timer0 *****************
 14502 ;; Defined at:
 14503 ;;		line 12 in file "Timers.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;  config          1    wreg     unsigned char 
 14506 ;;  IE              1   24[COMRAM] unsigned char 
 14507 ;;  value           2   25[COMRAM] int 
 14508 ;; Auto vars:     Size  Location     Type
 14509 ;;  config          1   27[COMRAM] unsigned char 
 14510 ;;  data            2   28[COMRAM] struct tim
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  1    wreg      void 
 14513 ;; Registers used:
 14514 ;;		wreg, status,2, status,0
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14520 ;;      Params:         3       0       0       0       0       0       0
 14521 ;;      Locals:         3       0       0       0       0       0       0
 14522 ;;      Temps:          0       0       0       0       0       0       0
 14523 ;;      Totals:         6       0       0       0       0       0       0
 14524 ;;Total ram usage:        6 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; Hardware stack levels required when called:    1
 14527 ;; This function calls:
 14528 ;;		Nothing
 14529 ;; This function is called by:
 14530 ;;		_main
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           	psect	text80
 14535  0052A0                     __ptext80:
 14536                           	opt stack 0
 14537  0052A0                     _Open_Timer0:
 14538                           	opt stack 0
 14539  0052A0  FFFF               	dw	65535	; assembler added errata NOP
 14540                           
 14541                           ;incstack = 0
 14542                           ;Open_Timer0@config stored from wreg
 14543  0052A2  6E1C               	movwf	Open_Timer0@config,c
 14544                           
 14545                           ;Timers.c: 14: SplitInt data;
 14546                           ;Timers.c: 16: data.tim_value=value;
 14547  0052A4  C01A  F01D         	movff	Open_Timer0@value,Open_Timer0@data
 14548  0052A8  C01B  F01E         	movff	Open_Timer0@value+1,Open_Timer0@data+1
 14549                           
 14550                           ;Timers.c: 17: T0CON=config;
 14551  0052AC  C01C  FFD5         	movff	Open_Timer0@config,4053	;volatile
 14552                           
 14553                           ;Timers.c: 18: TMR0H=data.HSB;
 14554  0052B0  C01D  FFD7         	movff	Open_Timer0@data,4055	;volatile
 14555                           
 14556                           ;Timers.c: 19: TMR0L=data.LSB;
 14557  0052B4  C01E  FFD6         	movff	Open_Timer0@data+1,4054	;volatile
 14558                           
 14559                           ;Timers.c: 20: INTCONbits.TMR0IF=0;
 14560  0052B8  94F2               	bcf	intcon,2,c	;volatile
 14561                           
 14562                           ;Timers.c: 22: if(IE==1)
 14563  0052BA  0419               	decf	Open_Timer0@IE,w,c
 14564  0052BC  A4D8               	btfss	status,2,c
 14565  0052BE  D002               	goto	l1151
 14566                           
 14567                           ;Timers.c: 23: INTCONbits.TMR0IE=1;
 14568  0052C0  8AF2               	bsf	intcon,5,c	;volatile
 14569  0052C2  D002               	goto	l1152
 14570  0052C4                     l1151:
 14571  0052C4  FFFF               	dw	65535	; assembler added errata NOP
 14572                           
 14573                           ;Timers.c: 25: else
 14574                           ;Timers.c: 26: INTCONbits.TMR0IE=0;
 14575  0052C6  9AF2               	bcf	intcon,5,c	;volatile
 14576  0052C8                     l1152:
 14577  0052C8  FFFF               	dw	65535	; assembler added errata NOP
 14578  0052CA  0012               	return		;funcret
 14579  0052CC  FFFF               	dw	65535	; errata NOP
 14580  0052CE                     __end_of_Open_Timer0:
 14581                           	opt stack 0
 14582                           tblptru	equ	0xFF8
 14583                           tblptrh	equ	0xFF7
 14584                           tblptrl	equ	0xFF6
 14585                           tablat	equ	0xFF5
 14586                           prodl	equ	0xFF3
 14587                           intcon	equ	0xFF2
 14588                           postinc0	equ	0xFEE
 14589                           wreg	equ	0xFE8
 14590                           indf2	equ	0xFDF
 14591                           postinc2	equ	0xFDE
 14592                           postdec2	equ	0xFDD
 14593                           plusw2	equ	0xFDB
 14594                           fsr2h	equ	0xFDA
 14595                           fsr2l	equ	0xFD9
 14596                           status	equ	0xFD8
 14597                           
 14598 ;; *************** function _OpenUSART *****************
 14599 ;; Defined at:
 14600 ;;		line 15 in file "USART.c"
 14601 ;; Parameters:    Size  Location     Type
 14602 ;;  config          1    wreg     unsigned char 
 14603 ;;  spbrg           2   24[COMRAM] unsigned int 
 14604 ;; Auto vars:     Size  Location     Type
 14605 ;;  config          1   26[COMRAM] unsigned char 
 14606 ;; Return value:  Size  Location     Type
 14607 ;;                  1    wreg      void 
 14608 ;; Registers used:
 14609 ;;		wreg, status,2
 14610 ;; Tracked objects:
 14611 ;;		On entry : 0/0
 14612 ;;		On exit  : 0/0
 14613 ;;		Unchanged: 0/0
 14614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14615 ;;      Params:         2       0       0       0       0       0       0
 14616 ;;      Locals:         1       0       0       0       0       0       0
 14617 ;;      Temps:          0       0       0       0       0       0       0
 14618 ;;      Totals:         3       0       0       0       0       0       0
 14619 ;;Total ram usage:        3 bytes
 14620 ;; Hardware stack levels used:    1
 14621 ;; Hardware stack levels required when called:    1
 14622 ;; This function calls:
 14623 ;;		Nothing
 14624 ;; This function is called by:
 14625 ;;		_main
 14626 ;; This function uses a non-reentrant model
 14627 ;;
 14628                           
 14629                           	psect	text81
 14630  005B76                     __ptext81:
 14631                           	opt stack 0
 14632  005B76                     _OpenUSART:
 14633                           	opt stack 0
 14634  005B76  FFFF               	dw	65535	; assembler added errata NOP
 14635                           
 14636                           ;incstack = 0
 14637                           ;OpenUSART@config stored from wreg
 14638  005B78  6E1B               	movwf	OpenUSART@config,c
 14639                           
 14640                           ;USART.c: 16: TXSTA = 0;
 14641  005B7A  0E00               	movlw	0
 14642  005B7C  6EAC               	movwf	4012,c	;volatile
 14643                           
 14644                           ;USART.c: 17: RCSTA = 0;
 14645  005B7E  0E00               	movlw	0
 14646  005B80  6EAB               	movwf	4011,c	;volatile
 14647                           
 14648                           ;USART.c: 18: TRISCbits.RC6=0;
 14649  005B82  9C94               	bcf	3988,6,c	;volatile
 14650                           
 14651                           ;USART.c: 19: TRISCbits.RC7=1;
 14652  005B84  8E94               	bsf	3988,7,c	;volatile
 14653                           
 14654                           ;USART.c: 21: if (config & 0x01)
 14655  005B86  B01B               	btfsc	OpenUSART@config,0,c
 14656                           
 14657                           ;USART.c: 22: TXSTAbits.SYNC = 1;
 14658  005B88  88AC               	bsf	4012,4,c	;volatile
 14659                           
 14660                           ;USART.c: 24: if (config & 0x02)
 14661  005B8A  A21B               	btfss	OpenUSART@config,1,c
 14662  005B8C  D002               	goto	l1177
 14663                           
 14664                           ;USART.c: 25: {
 14665                           ;USART.c: 26: TXSTAbits.TX9 = 1;
 14666  005B8E  8CAC               	bsf	4012,6,c	;volatile
 14667                           
 14668                           ;USART.c: 27: RCSTAbits.RX9 = 1;
 14669  005B90  8CAB               	bsf	4011,6,c	;volatile
 14670  005B92                     l1177:
 14671  005B92  FFFF               	dw	65535	; assembler added errata NOP
 14672                           
 14673                           ;USART.c: 28: }
 14674                           ;USART.c: 30: if (config & 0x04)
 14675  005B94  B41B               	btfsc	OpenUSART@config,2,c
 14676                           
 14677                           ;USART.c: 31: TXSTAbits.CSRC = 1;
 14678  005B96  8EAC               	bsf	4012,7,c	;volatile
 14679                           
 14680                           ;USART.c: 33: if (config & 0x08)
 14681  005B98  A61B               	btfss	OpenUSART@config,3,c
 14682  005B9A  D002               	goto	l1179
 14683                           
 14684                           ;USART.c: 34: RCSTAbits.CREN = 1;
 14685  005B9C  88AB               	bsf	4011,4,c	;volatile
 14686  005B9E  D002               	goto	l1180
 14687  005BA0                     l1179:
 14688  005BA0  FFFF               	dw	65535	; assembler added errata NOP
 14689                           
 14690                           ;USART.c: 35: else
 14691                           ;USART.c: 36: RCSTAbits.SREN = 1;
 14692  005BA2  8AAB               	bsf	4011,5,c	;volatile
 14693  005BA4                     l1180:
 14694  005BA4  FFFF               	dw	65535	; assembler added errata NOP
 14695                           
 14696                           ;USART.c: 38: if (config & 0x10)
 14697  005BA6  A81B               	btfss	OpenUSART@config,4,c
 14698  005BA8  D002               	goto	l1181
 14699                           
 14700                           ;USART.c: 39: TXSTAbits.BRGH = 1;
 14701  005BAA  84AC               	bsf	4012,2,c	;volatile
 14702  005BAC  D002               	goto	l1182
 14703  005BAE                     l1181:
 14704  005BAE  FFFF               	dw	65535	; assembler added errata NOP
 14705                           
 14706                           ;USART.c: 40: else
 14707                           ;USART.c: 41: TXSTAbits.BRGH = 0;
 14708  005BB0  94AC               	bcf	4012,2,c	;volatile
 14709  005BB2                     l1182:
 14710  005BB2  FFFF               	dw	65535	; assembler added errata NOP
 14711                           
 14712                           ;USART.c: 43: PIR1bits.TXIF = 0;
 14713  005BB4  989E               	bcf	3998,4,c	;volatile
 14714                           
 14715                           ;USART.c: 45: if (config & 0x40)
 14716  005BB6  AC1B               	btfss	OpenUSART@config,6,c
 14717  005BB8  D002               	goto	l1183
 14718                           
 14719                           ;USART.c: 46: PIE1bits.RCIE = 1;
 14720  005BBA  8A9D               	bsf	3997,5,c	;volatile
 14721  005BBC  D002               	goto	l1184
 14722  005BBE                     l1183:
 14723  005BBE  FFFF               	dw	65535	; assembler added errata NOP
 14724                           
 14725                           ;USART.c: 47: else
 14726                           ;USART.c: 48: PIE1bits.RCIE = 0;
 14727  005BC0  9A9D               	bcf	3997,5,c	;volatile
 14728  005BC2                     l1184:
 14729  005BC2  FFFF               	dw	65535	; assembler added errata NOP
 14730                           
 14731                           ;USART.c: 52: if (config & 0x80)
 14732  005BC4  AE1B               	btfss	OpenUSART@config,7,c
 14733  005BC6  D002               	goto	l1185
 14734                           
 14735                           ;USART.c: 53: PIE1bits.TXIE = 1;
 14736  005BC8  889D               	bsf	3997,4,c	;volatile
 14737  005BCA  D002               	goto	l1186
 14738  005BCC                     l1185:
 14739  005BCC  FFFF               	dw	65535	; assembler added errata NOP
 14740                           
 14741                           ;USART.c: 54: else
 14742                           ;USART.c: 55: PIE1bits.TXIE = 0;
 14743  005BCE  989D               	bcf	3997,4,c	;volatile
 14744  005BD0                     l1186:
 14745  005BD0  FFFF               	dw	65535	; assembler added errata NOP
 14746                           
 14747                           ;USART.c: 57: SPBRG = spbrg;
 14748  005BD2  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 14749                           
 14750                           ;USART.c: 59: TXSTAbits.TXEN = 1;
 14751  005BD6  8AAC               	bsf	4012,5,c	;volatile
 14752                           
 14753                           ;USART.c: 60: RCSTAbits.SPEN = 1;
 14754  005BD8  8EAB               	bsf	4011,7,c	;volatile
 14755  005BDA  0012               	return		;funcret
 14756  005BDC  FFFF               	dw	65535	; errata NOP
 14757  005BDE                     __end_of_OpenUSART:
 14758                           	opt stack 0
 14759                           tblptru	equ	0xFF8
 14760                           tblptrh	equ	0xFF7
 14761                           tblptrl	equ	0xFF6
 14762                           tablat	equ	0xFF5
 14763                           prodl	equ	0xFF3
 14764                           intcon	equ	0xFF2
 14765                           postinc0	equ	0xFEE
 14766                           wreg	equ	0xFE8
 14767                           indf2	equ	0xFDF
 14768                           postinc2	equ	0xFDE
 14769                           postdec2	equ	0xFDD
 14770                           plusw2	equ	0xFDB
 14771                           fsr2h	equ	0xFDA
 14772                           fsr2l	equ	0xFD9
 14773                           status	equ	0xFD8
 14774                           
 14775 ;; *************** function _OpenIO5R *****************
 14776 ;; Defined at:
 14777 ;;		line 9 in file "ior5e.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;		None
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;		None
 14782 ;; Return value:  Size  Location     Type
 14783 ;;                  1    wreg      void 
 14784 ;; Registers used:
 14785 ;;		wreg, status,2, status,0, cstack
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : 0/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14791 ;;      Params:         0       0       0       0       0       0       0
 14792 ;;      Locals:         0       0       0       0       0       0       0
 14793 ;;      Temps:          0       0       0       0       0       0       0
 14794 ;;      Totals:         0       0       0       0       0       0       0
 14795 ;;Total ram usage:        0 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; Hardware stack levels required when called:    2
 14798 ;; This function calls:
 14799 ;;		_WriteIO5R
 14800 ;; This function is called by:
 14801 ;;		_main
 14802 ;; This function uses a non-reentrant model
 14803 ;;
 14804                           
 14805                           	psect	text82
 14806  00532A                     __ptext82:
 14807                           	opt stack 0
 14808  00532A                     _OpenIO5R:
 14809                           	opt stack 0
 14810  00532A  FFFF               	dw	65535	; assembler added errata NOP
 14811                           
 14812                           ;ior5e.c: 12: TRISCbits.TRISC0=0;
 14813                           
 14814                           ;incstack = 0
 14815  00532C  9094               	bcf	3988,0,c	;volatile
 14816                           
 14817                           ;ior5e.c: 13: TRISCbits.TRISC1=0;
 14818  00532E  9294               	bcf	3988,1,c	;volatile
 14819                           
 14820                           ;ior5e.c: 14: TRISCbits.TRISC2=0;
 14821  005330  9494               	bcf	3988,2,c	;volatile
 14822                           
 14823                           ;ior5e.c: 15: TRISCbits.TRISC5=0;
 14824  005332  9A94               	bcf	3988,5,c	;volatile
 14825                           
 14826                           ;ior5e.c: 17: TRISBbits.TRISB0=1;
 14827  005334  8093               	bsf	3987,0,c	;volatile
 14828                           
 14829                           ;ior5e.c: 18: TRISBbits.TRISB1=1;
 14830  005336  8293               	bsf	3987,1,c	;volatile
 14831                           
 14832                           ;ior5e.c: 19: TRISBbits.TRISB4=1;
 14833  005338  8893               	bsf	3987,4,c	;volatile
 14834                           
 14835                           ;ior5e.c: 20: TRISBbits.TRISB5=1;
 14836  00533A  8A93               	bsf	3987,5,c	;volatile
 14837                           
 14838                           ;ior5e.c: 22: LATCbits.LC1=1;
 14839  00533C  828B               	bsf	3979,1,c	;volatile
 14840                           
 14841                           ;ior5e.c: 23: LATCbits.LC2=1;
 14842  00533E  848B               	bsf	3979,2,c	;volatile
 14843                           
 14844                           ;ior5e.c: 24: LATCbits.LC5=1;
 14845  005340  8A8B               	bsf	3979,5,c	;volatile
 14846                           
 14847                           ;ior5e.c: 26: WriteIO5R(0x00000000);
 14848  005342  0E00               	movlw	0
 14849  005344  6E19               	movwf	WriteIO5R@data,c
 14850  005346  0E00               	movlw	0
 14851  005348  6E1A               	movwf	WriteIO5R@data+1,c
 14852  00534A  0E00               	movlw	0
 14853  00534C  6E1B               	movwf	WriteIO5R@data+2,c
 14854  00534E  0E00               	movlw	0
 14855  005350  6E1C               	movwf	WriteIO5R@data+3,c
 14856  005352  ECBE  F01F         	call	_WriteIO5R	;wreg free
 14857                           
 14858                           ;ior5e.c: 27: LATCbits.LC5=0;
 14859  005356  9A8B               	bcf	3979,5,c	;volatile
 14860  005358  0012               	return		;funcret
 14861  00535A  FFFF               	dw	65535	; errata NOP
 14862  00535C                     __end_of_OpenIO5R:
 14863                           	opt stack 0
 14864                           tblptru	equ	0xFF8
 14865                           tblptrh	equ	0xFF7
 14866                           tblptrl	equ	0xFF6
 14867                           tablat	equ	0xFF5
 14868                           prodl	equ	0xFF3
 14869                           intcon	equ	0xFF2
 14870                           postinc0	equ	0xFEE
 14871                           wreg	equ	0xFE8
 14872                           indf2	equ	0xFDF
 14873                           postinc2	equ	0xFDE
 14874                           postdec2	equ	0xFDD
 14875                           plusw2	equ	0xFDB
 14876                           fsr2h	equ	0xFDA
 14877                           fsr2l	equ	0xFD9
 14878                           status	equ	0xFD8
 14879                           
 14880 ;; *************** function _WriteIO5R *****************
 14881 ;; Defined at:
 14882 ;;		line 33 in file "ior5e.c"
 14883 ;; Parameters:    Size  Location     Type
 14884 ;;  data            4   24[COMRAM] unsigned long 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  temp            4   28[COMRAM] unsigned long 
 14887 ;;  bits            1   32[COMRAM] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1    wreg      void 
 14890 ;; Registers used:
 14891 ;;		wreg, status,2, status,0
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14897 ;;      Params:         4       0       0       0       0       0       0
 14898 ;;      Locals:         5       0       0       0       0       0       0
 14899 ;;      Temps:          0       0       0       0       0       0       0
 14900 ;;      Totals:         9       0       0       0       0       0       0
 14901 ;;Total ram usage:        9 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    1
 14904 ;; This function calls:
 14905 ;;		Nothing
 14906 ;; This function is called by:
 14907 ;;		_OpenIO5R
 14908 ;;		_main
 14909 ;; This function uses a non-reentrant model
 14910 ;;
 14911                           
 14912                           	psect	text83
 14913  003F7C                     __ptext83:
 14914                           	opt stack 0
 14915  003F7C                     _WriteIO5R:
 14916                           	opt stack 0
 14917  003F7C  FFFF               	dw	65535	; assembler added errata NOP
 14918                           
 14919                           ;ior5e.c: 35: char bits=0;
 14920                           
 14921                           ;incstack = 0
 14922  003F7E  0E00               	movlw	0
 14923  003F80  6E21               	movwf	WriteIO5R@bits,c
 14924                           
 14925                           ;ior5e.c: 36: unsigned long int temp;
 14926                           ;ior5e.c: 38: temp=data;
 14927  003F82  C019  F01D         	movff	WriteIO5R@data,WriteIO5R@temp
 14928  003F86  C01A  F01E         	movff	WriteIO5R@data+1,WriteIO5R@temp+1
 14929  003F8A  C01B  F01F         	movff	WriteIO5R@data+2,WriteIO5R@temp+2
 14930  003F8E  C01C  F020         	movff	WriteIO5R@data+3,WriteIO5R@temp+3
 14931                           
 14932                           ;ior5e.c: 40: for(bits=0;bits<24;bits++)
 14933  003F92  0E00               	movlw	0
 14934  003F94  6E21               	movwf	WriteIO5R@bits,c
 14935  003F96                     l10975:
 14936  003F96  FFFF               	dw	65535	; assembler added errata NOP
 14937  003F98  0E17               	movlw	23
 14938  003F9A  6421               	cpfsgt	WriteIO5R@bits,c
 14939  003F9C  D001               	goto	l708
 14940  003F9E  D028               	goto	u11180
 14941  003FA0                     l708:
 14942  003FA0  FFFF               	dw	65535	; assembler added errata NOP
 14943                           
 14944                           ;ior5e.c: 41: {
 14945                           ;ior5e.c: 42: temp=data & 0x80000000;
 14946  003FA2  0E00               	movlw	0
 14947  003FA4  1419               	andwf	WriteIO5R@data,w,c
 14948  003FA6  6E1D               	movwf	WriteIO5R@temp,c
 14949  003FA8  0E00               	movlw	0
 14950  003FAA  141A               	andwf	WriteIO5R@data+1,w,c
 14951  003FAC  6E1E               	movwf	WriteIO5R@temp+1,c
 14952  003FAE  0E00               	movlw	0
 14953  003FB0  141B               	andwf	WriteIO5R@data+2,w,c
 14954  003FB2  6E1F               	movwf	WriteIO5R@temp+2,c
 14955  003FB4  0E80               	movlw	128
 14956  003FB6  141C               	andwf	WriteIO5R@data+3,w,c
 14957  003FB8  6E20               	movwf	WriteIO5R@temp+3,c
 14958                           
 14959                           ;ior5e.c: 44: if(temp==0)
 14960  003FBA  501D               	movf	WriteIO5R@temp,w,c
 14961  003FBC  101E               	iorwf	WriteIO5R@temp+1,w,c
 14962  003FBE  101F               	iorwf	WriteIO5R@temp+2,w,c
 14963  003FC0  1020               	iorwf	WriteIO5R@temp+3,w,c
 14964  003FC2  A4D8               	btfss	status,2,c
 14965  003FC4  D002               	goto	l710
 14966                           
 14967                           ;ior5e.c: 45: LATCbits.LC0=0;
 14968  003FC6  908B               	bcf	3979,0,c	;volatile
 14969  003FC8  D002               	goto	l711
 14970  003FCA                     l710:
 14971  003FCA  FFFF               	dw	65535	; assembler added errata NOP
 14972                           
 14973                           ;ior5e.c: 46: else
 14974                           ;ior5e.c: 47: LATCbits.LC0=1;
 14975  003FCC  808B               	bsf	3979,0,c	;volatile
 14976  003FCE                     l711:
 14977  003FCE  FFFF               	dw	65535	; assembler added errata NOP
 14978                           
 14979                           ;ior5e.c: 51: LATCbits.LC1=0;
 14980  003FD0  928B               	bcf	3979,1,c	;volatile
 14981                           
 14982                           ;ior5e.c: 52: _delay((unsigned long)((2)*(10000000/4000000.0)));
 14983  003FD2  D000               	nop2		;2 cycle nop
 14984  003FD4  D000               	nop2		;2 cycle nop
 14985  003FD6  F000               	nop	
 14986                           
 14987                           ;ior5e.c: 53: LATCbits.LC1=1;
 14988  003FD8  828B               	bsf	3979,1,c	;volatile
 14989                           
 14990                           ;ior5e.c: 55: data=data<<1;
 14991  003FDA  90D8               	bcf	status,0,c
 14992  003FDC  3419               	rlcf	WriteIO5R@data,w,c
 14993  003FDE  6E19               	movwf	WriteIO5R@data,c
 14994  003FE0  341A               	rlcf	WriteIO5R@data+1,w,c
 14995  003FE2  6E1A               	movwf	WriteIO5R@data+1,c
 14996  003FE4  341B               	rlcf	WriteIO5R@data+2,w,c
 14997  003FE6  6E1B               	movwf	WriteIO5R@data+2,c
 14998  003FE8  341C               	rlcf	WriteIO5R@data+3,w,c
 14999  003FEA  6E1C               	movwf	WriteIO5R@data+3,c
 15000  003FEC  2A21               	incf	WriteIO5R@bits,f,c
 15001  003FEE  D7D3               	goto	l10975
 15002  003FF0                     u11180:
 15003  003FF0  FFFF               	dw	65535	; assembler added errata NOP
 15004                           
 15005                           ;ior5e.c: 56: }
 15006                           ;ior5e.c: 59: LATCbits.LC2=0;
 15007  003FF2  948B               	bcf	3979,2,c	;volatile
 15008                           
 15009                           ;ior5e.c: 60: _delay((unsigned long)((2)*(10000000/4000000.0)));
 15010  003FF4  D000               	nop2		;2 cycle nop
 15011  003FF6  D000               	nop2		;2 cycle nop
 15012  003FF8  F000               	nop	
 15013                           
 15014                           ;ior5e.c: 61: LATCbits.LC2=1;
 15015  003FFA  848B               	bsf	3979,2,c	;volatile
 15016  003FFC  0012               	return		;funcret
 15017  003FFE  FFFF               	dw	65535	; errata NOP
 15018  004000                     __end_of_WriteIO5R:
 15019                           	opt stack 0
 15020                           tblptru	equ	0xFF8
 15021                           tblptrh	equ	0xFF7
 15022                           tblptrl	equ	0xFF6
 15023                           tablat	equ	0xFF5
 15024                           prodl	equ	0xFF3
 15025                           intcon	equ	0xFF2
 15026                           postinc0	equ	0xFEE
 15027                           wreg	equ	0xFE8
 15028                           indf2	equ	0xFDF
 15029                           postinc2	equ	0xFDE
 15030                           postdec2	equ	0xFDD
 15031                           plusw2	equ	0xFDB
 15032                           fsr2h	equ	0xFDA
 15033                           fsr2l	equ	0xFD9
 15034                           status	equ	0xFD8
 15035                           
 15036 ;; *************** function _OpenADC *****************
 15037 ;; Defined at:
 15038 ;;		line 83 in file "ior5e.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;		None
 15043 ;; Return value:  Size  Location     Type
 15044 ;;                  1    wreg      void 
 15045 ;; Registers used:
 15046 ;;		wreg, status,2
 15047 ;; Tracked objects:
 15048 ;;		On entry : 0/0
 15049 ;;		On exit  : 0/0
 15050 ;;		Unchanged: 0/0
 15051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15052 ;;      Params:         0       0       0       0       0       0       0
 15053 ;;      Locals:         0       0       0       0       0       0       0
 15054 ;;      Temps:          0       0       0       0       0       0       0
 15055 ;;      Totals:         0       0       0       0       0       0       0
 15056 ;;Total ram usage:        0 bytes
 15057 ;; Hardware stack levels used:    1
 15058 ;; Hardware stack levels required when called:    1
 15059 ;; This function calls:
 15060 ;;		Nothing
 15061 ;; This function is called by:
 15062 ;;		_main
 15063 ;; This function uses a non-reentrant model
 15064 ;;
 15065                           
 15066                           	psect	text84
 15067  004C66                     __ptext84:
 15068                           	opt stack 0
 15069  004C66                     _OpenADC:
 15070                           	opt stack 0
 15071  004C66  FFFF               	dw	65535	; assembler added errata NOP
 15072                           
 15073                           ;ior5e.c: 85: ADCON0=0x81;
 15074                           
 15075                           ;incstack = 0
 15076  004C68  0E81               	movlw	129
 15077  004C6A  6EC2               	movwf	4034,c	;volatile
 15078                           
 15079                           ;ior5e.c: 86: ADCON1=0xc2;
 15080  004C6C  0EC2               	movlw	194
 15081  004C6E  6EC1               	movwf	4033,c	;volatile
 15082  004C70  0012               	return		;funcret
 15083  004C72  FFFF               	dw	65535	; errata NOP
 15084  004C74                     __end_of_OpenADC:
 15085                           	opt stack 0
 15086                           tblptru	equ	0xFF8
 15087                           tblptrh	equ	0xFF7
 15088                           tblptrl	equ	0xFF6
 15089                           tablat	equ	0xFF5
 15090                           prodl	equ	0xFF3
 15091                           intcon	equ	0xFF2
 15092                           postinc0	equ	0xFEE
 15093                           wreg	equ	0xFE8
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           plusw2	equ	0xFDB
 15098                           fsr2h	equ	0xFDA
 15099                           fsr2l	equ	0xFD9
 15100                           status	equ	0xFD8
 15101                           
 15102 ;; *************** function _Manual_Control *****************
 15103 ;; Defined at:
 15104 ;;		line 277 in file "main.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;		None
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;		None
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  1    wreg      void 
 15111 ;; Registers used:
 15112 ;;		wreg, status,2, cstack
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15118 ;;      Params:         0       0       0       0       0       0       0
 15119 ;;      Locals:         0       0       0       0       0       0       0
 15120 ;;      Temps:          0       0       0       0       0       0       0
 15121 ;;      Totals:         0       0       0       0       0       0       0
 15122 ;;Total ram usage:        0 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    2
 15125 ;; This function calls:
 15126 ;;		_reset_PID
 15127 ;; This function is called by:
 15128 ;;		_main
 15129 ;; This function uses a non-reentrant model
 15130 ;;
 15131                           
 15132                           	psect	text85
 15133  004FD6                     __ptext85:
 15134                           	opt stack 0
 15135  004FD6                     _Manual_Control:
 15136                           	opt stack 0
 15137  004FD6  FFFF               	dw	65535	; assembler added errata NOP
 15138                           
 15139                           ;main.c: 279: Outputs.led14 = 0;
 15140                           
 15141                           ;incstack = 0
 15142  004FD8  0100               	movlb	0	; () banked
 15143  004FDA  9BEA               	bcf	(_Outputs+2)& (0+255),5,b
 15144                           
 15145                           ;main.c: 280: Outputs.led13 = 0;
 15146  004FDC  0100               	movlb	0	; () banked
 15147  004FDE  99EA               	bcf	(_Outputs+2)& (0+255),4,b
 15148                           
 15149                           ;main.c: 281: Outputs.rly1 = 0;
 15150  004FE0  0100               	movlb	0	; () banked
 15151  004FE2  91E9               	bcf	(_Outputs+1)& (0+255),0,b
 15152                           
 15153                           ;main.c: 282: Outputs.rly2 = 0;
 15154  004FE4  0100               	movlb	0	; () banked
 15155  004FE6  93E9               	bcf	(_Outputs+1)& (0+255),1,b
 15156                           
 15157                           ; BSR set to: 0
 15158                           ;main.c: 283: reset_PID();
 15159  004FE8  ECFE  F029         	call	_reset_PID	;wreg free
 15160                           
 15161                           ;main.c: 284: return;
 15162  004FEC  0012               	return		;funcret
 15163  004FEE  FFFF               	dw	65535	; errata NOP
 15164  004FF0                     __end_of_Manual_Control:
 15165                           	opt stack 0
 15166                           tblptru	equ	0xFF8
 15167                           tblptrh	equ	0xFF7
 15168                           tblptrl	equ	0xFF6
 15169                           tablat	equ	0xFF5
 15170                           prodl	equ	0xFF3
 15171                           intcon	equ	0xFF2
 15172                           postinc0	equ	0xFEE
 15173                           wreg	equ	0xFE8
 15174                           indf2	equ	0xFDF
 15175                           postinc2	equ	0xFDE
 15176                           postdec2	equ	0xFDD
 15177                           plusw2	equ	0xFDB
 15178                           fsr2h	equ	0xFDA
 15179                           fsr2l	equ	0xFD9
 15180                           status	equ	0xFD8
 15181                           
 15182 ;; *************** function _reset_PID *****************
 15183 ;; Defined at:
 15184 ;;		line 74 in file "PID_Controller.c"
 15185 ;; Parameters:    Size  Location     Type
 15186 ;;		None
 15187 ;; Auto vars:     Size  Location     Type
 15188 ;;		None
 15189 ;; Return value:  Size  Location     Type
 15190 ;;                  1    wreg      void 
 15191 ;; Registers used:
 15192 ;;		wreg, status,2
 15193 ;; Tracked objects:
 15194 ;;		On entry : 0/0
 15195 ;;		On exit  : 0/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15198 ;;      Params:         0       0       0       0       0       0       0
 15199 ;;      Locals:         0       0       0       0       0       0       0
 15200 ;;      Temps:          0       0       0       0       0       0       0
 15201 ;;      Totals:         0       0       0       0       0       0       0
 15202 ;;Total ram usage:        0 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; Hardware stack levels required when called:    1
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_Manual_Control
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text86
 15213  0053FC                     __ptext86:
 15214                           	opt stack 0
 15215  0053FC                     _reset_PID:
 15216                           	opt stack 0
 15217  0053FC  FFFF               	dw	65535	; assembler added errata NOP
 15218                           
 15219                           ;PID_Controller.c: 75: last_output=0.0;
 15220                           
 15221                           ;incstack = 0
 15222  0053FE  0E00               	movlw	0
 15223  005400  0101               	movlb	1	; () banked
 15224  005402  6F10               	movwf	_last_output& (0+255),b
 15225  005404  0E00               	movlw	0
 15226  005406  0101               	movlb	1	; () banked
 15227  005408  6F11               	movwf	(_last_output+1)& (0+255),b
 15228  00540A  0E00               	movlw	0
 15229  00540C  0101               	movlb	1	; () banked
 15230  00540E  6F12               	movwf	(_last_output+2)& (0+255),b
 15231                           
 15232                           ;PID_Controller.c: 76: last_error=0.0;
 15233  005410  0E00               	movlw	0
 15234  005412  0101               	movlb	1	; () banked
 15235  005414  6F0D               	movwf	_last_error& (0+255),b
 15236  005416  0E00               	movlw	0
 15237  005418  0101               	movlb	1	; () banked
 15238  00541A  6F0E               	movwf	(_last_error+1)& (0+255),b
 15239  00541C  0E00               	movlw	0
 15240  00541E  0101               	movlb	1	; () banked
 15241  005420  6F0F               	movwf	(_last_error+2)& (0+255),b
 15242                           
 15243                           ;PID_Controller.c: 77: last_integral=0.0;
 15244  005422  0E00               	movlw	0
 15245  005424  0101               	movlb	1	; () banked
 15246  005426  6F0A               	movwf	_last_integral& (0+255),b
 15247  005428  0E00               	movlw	0
 15248  00542A  0101               	movlb	1	; () banked
 15249  00542C  6F0B               	movwf	(_last_integral+1)& (0+255),b
 15250  00542E  0E00               	movlw	0
 15251  005430  0101               	movlb	1	; () banked
 15252  005432  6F0C               	movwf	(_last_integral+2)& (0+255),b
 15253                           
 15254                           ; BSR set to: 1
 15255  005434  0012               	return		;funcret
 15256  005436  FFFF               	dw	65535	; errata NOP
 15257  005438                     __end_of_reset_PID:
 15258                           	opt stack 0
 15259                           tblptru	equ	0xFF8
 15260                           tblptrh	equ	0xFF7
 15261                           tblptrl	equ	0xFF6
 15262                           tablat	equ	0xFF5
 15263                           prodl	equ	0xFF3
 15264                           intcon	equ	0xFF2
 15265                           postinc0	equ	0xFEE
 15266                           wreg	equ	0xFE8
 15267                           indf2	equ	0xFDF
 15268                           postinc2	equ	0xFDE
 15269                           postdec2	equ	0xFDD
 15270                           plusw2	equ	0xFDB
 15271                           fsr2h	equ	0xFDA
 15272                           fsr2l	equ	0xFD9
 15273                           status	equ	0xFD8
 15274                           
 15275 ;; *************** function _LCD_Clear *****************
 15276 ;; Defined at:
 15277 ;;		line 50 in file "LCD2S.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;		None
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;		None
 15282 ;; Return value:  Size  Location     Type
 15283 ;;                  1    wreg      void 
 15284 ;; Registers used:
 15285 ;;		wreg, status,2, status,0, cstack
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15291 ;;      Params:         0       0       0       0       0       0       0
 15292 ;;      Locals:         0       0       0       0       0       0       0
 15293 ;;      Temps:          0       0       0       0       0       0       0
 15294 ;;      Totals:         0       0       0       0       0       0       0
 15295 ;;Total ram usage:        0 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    3
 15298 ;; This function calls:
 15299 ;;		_I2C_Send
 15300 ;; This function is called by:
 15301 ;;		_main
 15302 ;; This function uses a non-reentrant model
 15303 ;;
 15304                           
 15305                           	psect	text87
 15306  004C5A                     __ptext87:
 15307                           	opt stack 0
 15308  004C5A                     _LCD_Clear:
 15309                           	opt stack 0
 15310  004C5A  FFFF               	dw	65535	; assembler added errata NOP
 15311                           
 15312                           ;LCD2S.c: 52: I2C_Send(0x8c);
 15313                           
 15314                           ; BSR set to: 1
 15315                           ;incstack = 0
 15316  004C5C  0E8C               	movlw	140
 15317  004C5E  ECC8  F029         	call	_I2C_Send
 15318  004C62  0012               	return		;funcret
 15319  004C64  FFFF               	dw	65535	; errata NOP
 15320  004C66                     __end_of_LCD_Clear:
 15321                           	opt stack 0
 15322                           tblptru	equ	0xFF8
 15323                           tblptrh	equ	0xFF7
 15324                           tblptrl	equ	0xFF6
 15325                           tablat	equ	0xFF5
 15326                           prodl	equ	0xFF3
 15327                           intcon	equ	0xFF2
 15328                           postinc0	equ	0xFEE
 15329                           wreg	equ	0xFE8
 15330                           indf2	equ	0xFDF
 15331                           postinc2	equ	0xFDE
 15332                           postdec2	equ	0xFDD
 15333                           plusw2	equ	0xFDB
 15334                           fsr2h	equ	0xFDA
 15335                           fsr2l	equ	0xFD9
 15336                           status	equ	0xFD8
 15337                           
 15338 ;; *************** function _I2C_Send *****************
 15339 ;; Defined at:
 15340 ;;		line 12 in file "LCD2S.c"
 15341 ;; Parameters:    Size  Location     Type
 15342 ;;  command         1    wreg     unsigned char 
 15343 ;; Auto vars:     Size  Location     Type
 15344 ;;  command         1   26[COMRAM] unsigned char 
 15345 ;; Return value:  Size  Location     Type
 15346 ;;                  1    wreg      void 
 15347 ;; Registers used:
 15348 ;;		wreg, status,2, status,0, cstack
 15349 ;; Tracked objects:
 15350 ;;		On entry : 0/0
 15351 ;;		On exit  : 0/0
 15352 ;;		Unchanged: 0/0
 15353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15354 ;;      Params:         0       0       0       0       0       0       0
 15355 ;;      Locals:         1       0       0       0       0       0       0
 15356 ;;      Temps:          0       0       0       0       0       0       0
 15357 ;;      Totals:         1       0       0       0       0       0       0
 15358 ;;Total ram usage:        1 bytes
 15359 ;; Hardware stack levels used:    1
 15360 ;; Hardware stack levels required when called:    2
 15361 ;; This function calls:
 15362 ;;		_CloseI2C
 15363 ;;		_IdleI2C
 15364 ;;		_OpenI2C
 15365 ;;		_StartI2C
 15366 ;;		_StopI2C
 15367 ;;		_Wait_AckI2C
 15368 ;;		_WriteI2C
 15369 ;; This function is called by:
 15370 ;;		_LCD_Clear
 15371 ;;		_LCD_Shift_Right
 15372 ;;		_LCD_SetBackLight_On
 15373 ;;		_LCD_SetBackLight_Off
 15374 ;;		_LCD_MoveCursor_Forward
 15375 ;;		_LCD_MoveCursor_Backward
 15376 ;;		_LCD_BlinkBlockCursor_On
 15377 ;;		_LCD_BlinkBlockCursor_Off
 15378 ;;		_LCD_UnderLineCursor_On
 15379 ;;		_LCD_UnderLineCursor_Off
 15380 ;;		_LCD_Display_On
 15381 ;;		_LCD_Display_Off
 15382 ;;		_LCD_MoveCursor_Right
 15383 ;;		_LCD_MoveCursor_Left
 15384 ;;		_LCD_Shift_Left
 15385 ;;		_LCD_Shift_Up
 15386 ;;		_LCD_Shift_Down
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           	psect	text88
 15391  005390                     __ptext88:
 15392                           	opt stack 0
 15393  005390                     _I2C_Send:
 15394                           	opt stack 0
 15395  005390  FFFF               	dw	65535	; assembler added errata NOP
 15396                           
 15397                           ;incstack = 0
 15398                           ;I2C_Send@command stored from wreg
 15399  005392  6E1B               	movwf	I2C_Send@command,c
 15400                           
 15401                           ;LCD2S.c: 13: OpenI2C(8, 0xC0);
 15402  005394  0EC0               	movlw	192
 15403  005396  6E19               	movwf	OpenI2C@slew,c
 15404  005398  0E08               	movlw	8
 15405  00539A  EC67  F028         	call	_OpenI2C
 15406                           
 15407                           ;LCD2S.c: 14: IdleI2C();
 15408  00539E  EC78  F028         	call	_IdleI2C	;wreg free
 15409                           
 15410                           ;LCD2S.c: 15: StartI2C();
 15411  0053A2  ECD1  F027         	call	_StartI2C	;wreg free
 15412                           
 15413                           ;LCD2S.c: 16: WriteI2C(0x50);
 15414  0053A6  0E50               	movlw	80
 15415  0053A8  EC3A  F029         	call	_WriteI2C
 15416                           
 15417                           ;LCD2S.c: 17: Wait_AckI2C();
 15418  0053AC  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 15419                           
 15420                           ;LCD2S.c: 18: WriteI2C(command);
 15421  0053B0  501B               	movf	I2C_Send@command,w,c
 15422  0053B2  EC3A  F029         	call	_WriteI2C
 15423                           
 15424                           ;LCD2S.c: 19: Wait_AckI2C();
 15425  0053B6  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 15426                           
 15427                           ;LCD2S.c: 20: StopI2C();
 15428  0053BA  ECDE  F027         	call	_StopI2C	;wreg free
 15429                           
 15430                           ;LCD2S.c: 21: CloseI2C();
 15431  0053BE  EC29  F026         	call	_CloseI2C	;wreg free
 15432  0053C2  0012               	return		;funcret
 15433  0053C4  FFFF               	dw	65535	; errata NOP
 15434  0053C6                     __end_of_I2C_Send:
 15435                           	opt stack 0
 15436                           tblptru	equ	0xFF8
 15437                           tblptrh	equ	0xFF7
 15438                           tblptrl	equ	0xFF6
 15439                           tablat	equ	0xFF5
 15440                           prodl	equ	0xFF3
 15441                           intcon	equ	0xFF2
 15442                           postinc0	equ	0xFEE
 15443                           wreg	equ	0xFE8
 15444                           indf2	equ	0xFDF
 15445                           postinc2	equ	0xFDE
 15446                           postdec2	equ	0xFDD
 15447                           plusw2	equ	0xFDB
 15448                           fsr2h	equ	0xFDA
 15449                           fsr2l	equ	0xFD9
 15450                           status	equ	0xFD8
 15451                           
 15452 ;; *************** function _Get_Voltage_Data *****************
 15453 ;; Defined at:
 15454 ;;		line 185 in file "Get_Voltages.c"
 15455 ;; Parameters:    Size  Location     Type
 15456 ;;		None
 15457 ;; Auto vars:     Size  Location     Type
 15458 ;;  v1              2   43[BANK0 ] unsigned int 
 15459 ;;  check           1   42[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  1    wreg      unsigned char 
 15462 ;; Registers used:
 15463 ;;		wreg, status,2, status,0, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15469 ;;      Params:         0       0       0       0       0       0       0
 15470 ;;      Locals:         0       3       0       0       0       0       0
 15471 ;;      Temps:          0       0       0       0       0       0       0
 15472 ;;      Totals:         0       3       0       0       0       0       0
 15473 ;;Total ram usage:        3 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    4
 15476 ;; This function calls:
 15477 ;;		_Check_VL_N
 15478 ;;		_Get_Analog_Channel
 15479 ;;		_LowPass_VL1
 15480 ;;		_LowPass_VL2
 15481 ;;		_LowPass_VL3
 15482 ;;		_LowPass_Vin
 15483 ;;		___ftadd
 15484 ;;		___ftdiv
 15485 ;;		___ftge
 15486 ;;		___ftmul
 15487 ;;		___ftneg
 15488 ;;		___lwtoft
 15489 ;; This function is called by:
 15490 ;;		_main
 15491 ;; This function uses a non-reentrant model
 15492 ;;
 15493                           
 15494                           	psect	text89
 15495  0016E6                     __ptext89:
 15496                           	opt stack 0
 15497  0016E6                     _Get_Voltage_Data:
 15498                           	opt stack 0
 15499  0016E6  FFFF               	dw	65535	; assembler added errata NOP
 15500                           
 15501                           ;Get_Voltages.c: 188: unsigned int v1;
 15502                           ;Get_Voltages.c: 189: char check;
 15503                           ;Get_Voltages.c: 192: status.data=0;
 15504                           
 15505                           ;incstack = 0
 15506  0016E8  0E00               	movlw	0
 15507  0016EA  0100               	movlb	0	; () banked
 15508  0016EC  6FFC               	movwf	_status& (0+255),b
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;Get_Voltages.c: 193: v1 = Get_Analog_Channel(0);
 15512  0016EE  0E00               	movlw	0
 15513  0016F0  EC58  F02A         	call	_Get_Analog_Channel
 15514  0016F4  C019  F08B         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15515  0016F8  C01A  F08C         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15516                           
 15517                           ;Get_Voltages.c: 194: VL1 = (float) v1 / 1024.0 * 150.0;
 15518  0016FC  0E00               	movlw	0
 15519  0016FE  0100               	movlb	0	; () banked
 15520  001700  6F7E               	movwf	___ftdiv@f2& (0+255),b
 15521  001702  0E80               	movlw	128
 15522  001704  0100               	movlb	0	; () banked
 15523  001706  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 15524  001708  0E44               	movlw	68
 15525  00170A  0100               	movlb	0	; () banked
 15526  00170C  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 15527  00170E  C08B  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15528  001712  C08C  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15529  001716  ECE7  F028         	call	___lwtoft	;wreg free
 15530  00171A  C021  F07B         	movff	?___lwtoft,___ftdiv@f1
 15531  00171E  C022  F07C         	movff	?___lwtoft+1,___ftdiv@f1+1
 15532  001722  C023  F07D         	movff	?___lwtoft+2,___ftdiv@f1+2
 15533  001726  ECB0  F03B         	call	___ftdiv	;wreg free
 15534  00172A  C07B  F06C         	movff	?___ftdiv,___ftmul@f1
 15535  00172E  C07C  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
 15536  001732  C07D  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
 15537  001736  0E00               	movlw	0
 15538  001738  0100               	movlb	0	; () banked
 15539  00173A  6F6F               	movwf	___ftmul@f2& (0+255),b
 15540  00173C  0E16               	movlw	22
 15541  00173E  0100               	movlb	0	; () banked
 15542  001740  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 15543  001742  0E43               	movlw	67
 15544  001744  0100               	movlb	0	; () banked
 15545  001746  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 15546  001748  EC53  F03C         	call	___ftmul	;wreg free
 15547  00174C  C06C  F03B         	movff	?___ftmul,_VL1
 15548  001750  C06D  F03C         	movff	?___ftmul+1,_VL1+1
 15549  001754  C06E  F03D         	movff	?___ftmul+2,_VL1+2
 15550                           
 15551                           ;Get_Voltages.c: 195: VL1=(VL1-VL1_zero)*VL1_span;
 15552  001758  C03B  F063         	movff	_VL1,___ftadd@f2
 15553  00175C  C03C  F064         	movff	_VL1+1,___ftadd@f2+1
 15554  001760  C03D  F065         	movff	_VL1+2,___ftadd@f2+2
 15555  001764  C0F2  F01C         	movff	_VL1_zero,___ftneg@f1
 15556  001768  C0F3  F01D         	movff	_VL1_zero+1,___ftneg@f1+1
 15557  00176C  C0F4  F01E         	movff	_VL1_zero+2,___ftneg@f1+2
 15558  001770  ECFB  F028         	call	___ftneg	;wreg free
 15559  001774  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15560  001778  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15561  00177C  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15562  001780  EC45  F016         	call	___ftadd	;wreg free
 15563  001784  C060  F06C         	movff	?___ftadd,___ftmul@f1
 15564  001788  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 15565  00178C  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 15566  001790  C134  F06F         	movff	_VL1_span,___ftmul@f2
 15567  001794  C135  F070         	movff	_VL1_span+1,___ftmul@f2+1
 15568  001798  C136  F071         	movff	_VL1_span+2,___ftmul@f2+2
 15569  00179C  EC53  F03C         	call	___ftmul	;wreg free
 15570  0017A0  C06C  F03B         	movff	?___ftmul,_VL1
 15571  0017A4  C06D  F03C         	movff	?___ftmul+1,_VL1+1
 15572  0017A8  C06E  F03D         	movff	?___ftmul+2,_VL1+2
 15573                           
 15574                           ;Get_Voltages.c: 196: VL1 = LowPass_VL1(VL1);
 15575  0017AC  C03B  F07B         	movff	_VL1,LowPass_VL1@val
 15576  0017B0  C03C  F07C         	movff	_VL1+1,LowPass_VL1@val+1
 15577  0017B4  C03D  F07D         	movff	_VL1+2,LowPass_VL1@val+2
 15578  0017B8  EC19  F032         	call	_LowPass_VL1	;wreg free
 15579  0017BC  C07B  F03B         	movff	?_LowPass_VL1,_VL1
 15580  0017C0  C07C  F03C         	movff	?_LowPass_VL1+1,_VL1+1
 15581  0017C4  C07D  F03D         	movff	?_LowPass_VL1+2,_VL1+2
 15582                           
 15583                           ;Get_Voltages.c: 197: check=Check_VL_N(VL1);
 15584  0017C8  C03B  F028         	movff	_VL1,Check_VL_N@val
 15585  0017CC  C03C  F029         	movff	_VL1+1,Check_VL_N@val+1
 15586  0017D0  C03D  F02A         	movff	_VL1+2,Check_VL_N@val+2
 15587  0017D4  EC76  F02C         	call	_Check_VL_N	;wreg free
 15588  0017D8  0100               	movlb	0	; () banked
 15589  0017DA  6F8A               	movwf	Get_Voltage_Data@check& (0+255),b
 15590                           
 15591                           ;Get_Voltages.c: 199: switch(check){
 15592  0017DC  D011               	goto	l480
 15593  0017DE                     l481:
 15594  0017DE  FFFF               	dw	65535	; assembler added errata NOP
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;Get_Voltages.c: 202: status.VL1_Low=1;
 15598  0017E0  0100               	movlb	0	; () banked
 15599  0017E2  81FC               	bsf	_status& (0+255),0,b
 15600                           
 15601                           ;Get_Voltages.c: 203: status.VL1_High=0;
 15602  0017E4  0100               	movlb	0	; () banked
 15603  0017E6  93FC               	bcf	_status& (0+255),1,b
 15604                           
 15605                           ;Get_Voltages.c: 204: break;
 15606  0017E8  D017               	goto	l482
 15607  0017EA                     l483:
 15608  0017EA  FFFF               	dw	65535	; assembler added errata NOP
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;Get_Voltages.c: 207: status.VL1_High=1;
 15612  0017EC  0100               	movlb	0	; () banked
 15613  0017EE  83FC               	bsf	_status& (0+255),1,b
 15614  0017F0  D003               	goto	L17
 15615  0017F2                     l484:
 15616  0017F2  FFFF               	dw	65535	; assembler added errata NOP
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;Get_Voltages.c: 212: status.VL1_High=0;
 15620  0017F4  0100               	movlb	0	; () banked
 15621  0017F6  93FC               	bcf	_status& (0+255),1,b
 15622  0017F8                     L17:
 15623  0017F8  FFFF               	dw	65535	; assembler added errata NOP
 15624                           
 15625                           ;Get_Voltages.c: 213: status.VL1_Low=0;
 15626  0017FA  0100               	movlb	0	; () banked
 15627  0017FC  91FC               	bcf	_status& (0+255),0,b
 15628                           
 15629                           ;Get_Voltages.c: 214: }
 15630  0017FE  D00C               	goto	l482
 15631  001800                     l480:
 15632  001800  FFFF               	dw	65535	; assembler added errata NOP
 15633                           
 15634                           ; BSR set to: 0
 15635                           
 15636                           ; BSR set to: 0
 15637  001802  0100               	movlb	0	; () banked
 15638  001804  518A               	movf	Get_Voltage_Data@check& (0+255),w,b
 15639                           
 15640                           ; Switch size 1, requested type "space"
 15641                           ; Number of cases is 3, Range of values is 0 to 2
 15642                           ; switch strategies available:
 15643                           ; Name         Instructions Cycles
 15644                           ; simple_byte           10     6 (average)
 15645                           ;	Chosen strategy is simple_byte
 15646  001806  0A00               	xorlw	0	; case 0
 15647  001808  B4D8               	btfsc	status,2,c
 15648  00180A  D7F3               	goto	l484
 15649  00180C  0A01               	xorlw	1	; case 1
 15650  00180E  B4D8               	btfsc	status,2,c
 15651  001810  D7EC               	goto	l483
 15652  001812  0A03               	xorlw	3	; case 2
 15653  001814  B4D8               	btfsc	status,2,c
 15654  001816  D7E3               	goto	l481
 15655  001818                     l482:
 15656  001818  FFFF               	dw	65535	; assembler added errata NOP
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;Get_Voltages.c: 216: v1 = Get_Analog_Channel(1);
 15660                           
 15661                           ; BSR set to: 0
 15662  00181A  0E01               	movlw	1
 15663  00181C  EC58  F02A         	call	_Get_Analog_Channel
 15664  001820  C019  F08B         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15665  001824  C01A  F08C         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15666                           
 15667                           ;Get_Voltages.c: 217: VL2 = (float) v1 / 1024.0 * 150.0;
 15668  001828  0E00               	movlw	0
 15669  00182A  0100               	movlb	0	; () banked
 15670  00182C  6F7E               	movwf	___ftdiv@f2& (0+255),b
 15671  00182E  0E80               	movlw	128
 15672  001830  0100               	movlb	0	; () banked
 15673  001832  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 15674  001834  0E44               	movlw	68
 15675  001836  0100               	movlb	0	; () banked
 15676  001838  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 15677  00183A  C08B  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15678  00183E  C08C  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15679  001842  ECE7  F028         	call	___lwtoft	;wreg free
 15680  001846  C021  F07B         	movff	?___lwtoft,___ftdiv@f1
 15681  00184A  C022  F07C         	movff	?___lwtoft+1,___ftdiv@f1+1
 15682  00184E  C023  F07D         	movff	?___lwtoft+2,___ftdiv@f1+2
 15683  001852  ECB0  F03B         	call	___ftdiv	;wreg free
 15684  001856  C07B  F06C         	movff	?___ftdiv,___ftmul@f1
 15685  00185A  C07C  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
 15686  00185E  C07D  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
 15687  001862  0E00               	movlw	0
 15688  001864  0100               	movlb	0	; () banked
 15689  001866  6F6F               	movwf	___ftmul@f2& (0+255),b
 15690  001868  0E16               	movlw	22
 15691  00186A  0100               	movlb	0	; () banked
 15692  00186C  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 15693  00186E  0E43               	movlw	67
 15694  001870  0100               	movlb	0	; () banked
 15695  001872  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 15696  001874  EC53  F03C         	call	___ftmul	;wreg free
 15697  001878  C06C  F038         	movff	?___ftmul,_VL2
 15698  00187C  C06D  F039         	movff	?___ftmul+1,_VL2+1
 15699  001880  C06E  F03A         	movff	?___ftmul+2,_VL2+2
 15700                           
 15701                           ;Get_Voltages.c: 218: VL2=(VL2-VL2_zero)*VL2_span;
 15702  001884  C038  F063         	movff	_VL2,___ftadd@f2
 15703  001888  C039  F064         	movff	_VL2+1,___ftadd@f2+1
 15704  00188C  C03A  F065         	movff	_VL2+2,___ftadd@f2+2
 15705  001890  C13D  F01C         	movff	_VL2_zero,___ftneg@f1
 15706  001894  C13E  F01D         	movff	_VL2_zero+1,___ftneg@f1+1
 15707  001898  C13F  F01E         	movff	_VL2_zero+2,___ftneg@f1+2
 15708  00189C  ECFB  F028         	call	___ftneg	;wreg free
 15709  0018A0  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15710  0018A4  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15711  0018A8  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15712  0018AC  EC45  F016         	call	___ftadd	;wreg free
 15713  0018B0  C060  F06C         	movff	?___ftadd,___ftmul@f1
 15714  0018B4  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 15715  0018B8  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 15716  0018BC  C131  F06F         	movff	_VL2_span,___ftmul@f2
 15717  0018C0  C132  F070         	movff	_VL2_span+1,___ftmul@f2+1
 15718  0018C4  C133  F071         	movff	_VL2_span+2,___ftmul@f2+2
 15719  0018C8  EC53  F03C         	call	___ftmul	;wreg free
 15720  0018CC  C06C  F038         	movff	?___ftmul,_VL2
 15721  0018D0  C06D  F039         	movff	?___ftmul+1,_VL2+1
 15722  0018D4  C06E  F03A         	movff	?___ftmul+2,_VL2+2
 15723                           
 15724                           ;Get_Voltages.c: 219: VL2 = LowPass_VL2(VL2);
 15725  0018D8  C038  F07B         	movff	_VL2,LowPass_VL2@val
 15726  0018DC  C039  F07C         	movff	_VL2+1,LowPass_VL2@val+1
 15727  0018E0  C03A  F07D         	movff	_VL2+2,LowPass_VL2@val+2
 15728  0018E4  EC77  F032         	call	_LowPass_VL2	;wreg free
 15729  0018E8  C07B  F038         	movff	?_LowPass_VL2,_VL2
 15730  0018EC  C07C  F039         	movff	?_LowPass_VL2+1,_VL2+1
 15731  0018F0  C07D  F03A         	movff	?_LowPass_VL2+2,_VL2+2
 15732                           
 15733                           ;Get_Voltages.c: 220: check=Check_VL_N(VL2);
 15734  0018F4  C038  F028         	movff	_VL2,Check_VL_N@val
 15735  0018F8  C039  F029         	movff	_VL2+1,Check_VL_N@val+1
 15736  0018FC  C03A  F02A         	movff	_VL2+2,Check_VL_N@val+2
 15737  001900  EC76  F02C         	call	_Check_VL_N	;wreg free
 15738  001904  0100               	movlb	0	; () banked
 15739  001906  6F8A               	movwf	Get_Voltage_Data@check& (0+255),b
 15740                           
 15741                           ;Get_Voltages.c: 222: switch(check){
 15742  001908  D011               	goto	l485
 15743  00190A                     l486:
 15744  00190A  FFFF               	dw	65535	; assembler added errata NOP
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;Get_Voltages.c: 225: status.VL2_Low=1;
 15748  00190C  0100               	movlb	0	; () banked
 15749  00190E  85FC               	bsf	_status& (0+255),2,b
 15750                           
 15751                           ;Get_Voltages.c: 226: status.VL2_High=0;
 15752  001910  0100               	movlb	0	; () banked
 15753  001912  97FC               	bcf	_status& (0+255),3,b
 15754                           
 15755                           ;Get_Voltages.c: 227: break;
 15756  001914  D017               	goto	l487
 15757  001916                     l488:
 15758  001916  FFFF               	dw	65535	; assembler added errata NOP
 15759                           
 15760                           ; BSR set to: 0
 15761                           ;Get_Voltages.c: 230: status.VL2_High=1;
 15762  001918  0100               	movlb	0	; () banked
 15763  00191A  87FC               	bsf	_status& (0+255),3,b
 15764  00191C  D003               	goto	L18
 15765  00191E                     l489:
 15766  00191E  FFFF               	dw	65535	; assembler added errata NOP
 15767                           
 15768                           ; BSR set to: 0
 15769                           ;Get_Voltages.c: 235: status.VL2_High=0;
 15770  001920  0100               	movlb	0	; () banked
 15771  001922  97FC               	bcf	_status& (0+255),3,b
 15772  001924                     L18:
 15773  001924  FFFF               	dw	65535	; assembler added errata NOP
 15774                           
 15775                           ;Get_Voltages.c: 236: status.VL2_Low=0;
 15776  001926  0100               	movlb	0	; () banked
 15777  001928  95FC               	bcf	_status& (0+255),2,b
 15778                           
 15779                           ;Get_Voltages.c: 237: }
 15780  00192A  D00C               	goto	l487
 15781  00192C                     l485:
 15782  00192C  FFFF               	dw	65535	; assembler added errata NOP
 15783                           
 15784                           ; BSR set to: 0
 15785                           
 15786                           ; BSR set to: 0
 15787  00192E  0100               	movlb	0	; () banked
 15788  001930  518A               	movf	Get_Voltage_Data@check& (0+255),w,b
 15789                           
 15790                           ; Switch size 1, requested type "space"
 15791                           ; Number of cases is 3, Range of values is 0 to 2
 15792                           ; switch strategies available:
 15793                           ; Name         Instructions Cycles
 15794                           ; simple_byte           10     6 (average)
 15795                           ;	Chosen strategy is simple_byte
 15796  001932  0A00               	xorlw	0	; case 0
 15797  001934  B4D8               	btfsc	status,2,c
 15798  001936  D7F3               	goto	l489
 15799  001938  0A01               	xorlw	1	; case 1
 15800  00193A  B4D8               	btfsc	status,2,c
 15801  00193C  D7EC               	goto	l488
 15802  00193E  0A03               	xorlw	3	; case 2
 15803  001940  B4D8               	btfsc	status,2,c
 15804  001942  D7E3               	goto	l486
 15805  001944                     l487:
 15806  001944  FFFF               	dw	65535	; assembler added errata NOP
 15807                           
 15808                           ; BSR set to: 0
 15809                           ;Get_Voltages.c: 239: v1 = Get_Analog_Channel(2);
 15810                           
 15811                           ; BSR set to: 0
 15812  001946  0E02               	movlw	2
 15813  001948  EC58  F02A         	call	_Get_Analog_Channel
 15814  00194C  C019  F08B         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15815  001950  C01A  F08C         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15816                           
 15817                           ;Get_Voltages.c: 240: VL3 = (float) v1 / 1024.0 * 150.0;
 15818  001954  0E00               	movlw	0
 15819  001956  0100               	movlb	0	; () banked
 15820  001958  6F7E               	movwf	___ftdiv@f2& (0+255),b
 15821  00195A  0E80               	movlw	128
 15822  00195C  0100               	movlb	0	; () banked
 15823  00195E  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 15824  001960  0E44               	movlw	68
 15825  001962  0100               	movlb	0	; () banked
 15826  001964  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 15827  001966  C08B  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15828  00196A  C08C  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15829  00196E  ECE7  F028         	call	___lwtoft	;wreg free
 15830  001972  C021  F07B         	movff	?___lwtoft,___ftdiv@f1
 15831  001976  C022  F07C         	movff	?___lwtoft+1,___ftdiv@f1+1
 15832  00197A  C023  F07D         	movff	?___lwtoft+2,___ftdiv@f1+2
 15833  00197E  ECB0  F03B         	call	___ftdiv	;wreg free
 15834  001982  C07B  F06C         	movff	?___ftdiv,___ftmul@f1
 15835  001986  C07C  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
 15836  00198A  C07D  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
 15837  00198E  0E00               	movlw	0
 15838  001990  0100               	movlb	0	; () banked
 15839  001992  6F6F               	movwf	___ftmul@f2& (0+255),b
 15840  001994  0E16               	movlw	22
 15841  001996  0100               	movlb	0	; () banked
 15842  001998  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 15843  00199A  0E43               	movlw	67
 15844  00199C  0100               	movlb	0	; () banked
 15845  00199E  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 15846  0019A0  EC53  F03C         	call	___ftmul	;wreg free
 15847  0019A4  C06C  F035         	movff	?___ftmul,_VL3
 15848  0019A8  C06D  F036         	movff	?___ftmul+1,_VL3+1
 15849  0019AC  C06E  F037         	movff	?___ftmul+2,_VL3+2
 15850                           
 15851                           ;Get_Voltages.c: 241: VL3=(VL3-VL3_zero)*VL3_span;
 15852  0019B0  C035  F063         	movff	_VL3,___ftadd@f2
 15853  0019B4  C036  F064         	movff	_VL3+1,___ftadd@f2+1
 15854  0019B8  C037  F065         	movff	_VL3+2,___ftadd@f2+2
 15855  0019BC  C13A  F01C         	movff	_VL3_zero,___ftneg@f1
 15856  0019C0  C13B  F01D         	movff	_VL3_zero+1,___ftneg@f1+1
 15857  0019C4  C13C  F01E         	movff	_VL3_zero+2,___ftneg@f1+2
 15858  0019C8  ECFB  F028         	call	___ftneg	;wreg free
 15859  0019CC  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15860  0019D0  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15861  0019D4  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15862  0019D8  EC45  F016         	call	___ftadd	;wreg free
 15863  0019DC  C060  F06C         	movff	?___ftadd,___ftmul@f1
 15864  0019E0  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 15865  0019E4  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 15866  0019E8  C12E  F06F         	movff	_VL3_span,___ftmul@f2
 15867  0019EC  C12F  F070         	movff	_VL3_span+1,___ftmul@f2+1
 15868  0019F0  C130  F071         	movff	_VL3_span+2,___ftmul@f2+2
 15869  0019F4  EC53  F03C         	call	___ftmul	;wreg free
 15870  0019F8  C06C  F035         	movff	?___ftmul,_VL3
 15871  0019FC  C06D  F036         	movff	?___ftmul+1,_VL3+1
 15872  001A00  C06E  F037         	movff	?___ftmul+2,_VL3+2
 15873                           
 15874                           ;Get_Voltages.c: 242: VL3 = LowPass_VL3(VL3);
 15875  001A04  C035  F07B         	movff	_VL3,LowPass_VL3@val
 15876  001A08  C036  F07C         	movff	_VL3+1,LowPass_VL3@val+1
 15877  001A0C  C037  F07D         	movff	_VL3+2,LowPass_VL3@val+2
 15878  001A10  ECD5  F032         	call	_LowPass_VL3	;wreg free
 15879  001A14  C07B  F035         	movff	?_LowPass_VL3,_VL3
 15880  001A18  C07C  F036         	movff	?_LowPass_VL3+1,_VL3+1
 15881  001A1C  C07D  F037         	movff	?_LowPass_VL3+2,_VL3+2
 15882                           
 15883                           ;Get_Voltages.c: 243: check=Check_VL_N(VL3);
 15884  001A20  C035  F028         	movff	_VL3,Check_VL_N@val
 15885  001A24  C036  F029         	movff	_VL3+1,Check_VL_N@val+1
 15886  001A28  C037  F02A         	movff	_VL3+2,Check_VL_N@val+2
 15887  001A2C  EC76  F02C         	call	_Check_VL_N	;wreg free
 15888  001A30  0100               	movlb	0	; () banked
 15889  001A32  6F8A               	movwf	Get_Voltage_Data@check& (0+255),b
 15890                           
 15891                           ;Get_Voltages.c: 245: switch(check){
 15892  001A34  D011               	goto	l490
 15893  001A36                     l491:
 15894  001A36  FFFF               	dw	65535	; assembler added errata NOP
 15895                           
 15896                           ; BSR set to: 0
 15897                           ;Get_Voltages.c: 248: status.VL3_Low=1;
 15898  001A38  0100               	movlb	0	; () banked
 15899  001A3A  89FC               	bsf	_status& (0+255),4,b
 15900                           
 15901                           ;Get_Voltages.c: 249: status.VL3_High=0;
 15902  001A3C  0100               	movlb	0	; () banked
 15903  001A3E  9BFC               	bcf	_status& (0+255),5,b
 15904                           
 15905                           ;Get_Voltages.c: 250: break;
 15906  001A40  D017               	goto	l492
 15907  001A42                     l493:
 15908  001A42  FFFF               	dw	65535	; assembler added errata NOP
 15909                           
 15910                           ; BSR set to: 0
 15911                           ;Get_Voltages.c: 253: status.VL3_High=1;
 15912  001A44  0100               	movlb	0	; () banked
 15913  001A46  8BFC               	bsf	_status& (0+255),5,b
 15914  001A48  D003               	goto	L19
 15915  001A4A                     l494:
 15916  001A4A  FFFF               	dw	65535	; assembler added errata NOP
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;Get_Voltages.c: 258: status.VL3_High=0;
 15920  001A4C  0100               	movlb	0	; () banked
 15921  001A4E  9BFC               	bcf	_status& (0+255),5,b
 15922  001A50                     L19:
 15923  001A50  FFFF               	dw	65535	; assembler added errata NOP
 15924                           
 15925                           ;Get_Voltages.c: 259: status.VL3_Low=0;
 15926  001A52  0100               	movlb	0	; () banked
 15927  001A54  99FC               	bcf	_status& (0+255),4,b
 15928                           
 15929                           ;Get_Voltages.c: 260: }
 15930  001A56  D00C               	goto	l492
 15931  001A58                     l490:
 15932  001A58  FFFF               	dw	65535	; assembler added errata NOP
 15933                           
 15934                           ; BSR set to: 0
 15935                           
 15936                           ; BSR set to: 0
 15937  001A5A  0100               	movlb	0	; () banked
 15938  001A5C  518A               	movf	Get_Voltage_Data@check& (0+255),w,b
 15939                           
 15940                           ; Switch size 1, requested type "space"
 15941                           ; Number of cases is 3, Range of values is 0 to 2
 15942                           ; switch strategies available:
 15943                           ; Name         Instructions Cycles
 15944                           ; simple_byte           10     6 (average)
 15945                           ;	Chosen strategy is simple_byte
 15946  001A5E  0A00               	xorlw	0	; case 0
 15947  001A60  B4D8               	btfsc	status,2,c
 15948  001A62  D7F3               	goto	l494
 15949  001A64  0A01               	xorlw	1	; case 1
 15950  001A66  B4D8               	btfsc	status,2,c
 15951  001A68  D7EC               	goto	l493
 15952  001A6A  0A03               	xorlw	3	; case 2
 15953  001A6C  B4D8               	btfsc	status,2,c
 15954  001A6E  D7E3               	goto	l491
 15955  001A70                     l492:
 15956  001A70  FFFF               	dw	65535	; assembler added errata NOP
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;Get_Voltages.c: 262: v1 = Get_Analog_Channel(3);
 15960                           
 15961                           ; BSR set to: 0
 15962  001A72  0E03               	movlw	3
 15963  001A74  EC58  F02A         	call	_Get_Analog_Channel
 15964  001A78  C019  F08B         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15965  001A7C  C01A  F08C         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15966                           
 15967                           ;Get_Voltages.c: 263: Vin = (float) v1 / 1024.0 * 150.0;
 15968  001A80  0E00               	movlw	0
 15969  001A82  0100               	movlb	0	; () banked
 15970  001A84  6F7E               	movwf	___ftdiv@f2& (0+255),b
 15971  001A86  0E80               	movlw	128
 15972  001A88  0100               	movlb	0	; () banked
 15973  001A8A  6F7F               	movwf	(___ftdiv@f2+1)& (0+255),b
 15974  001A8C  0E44               	movlw	68
 15975  001A8E  0100               	movlb	0	; () banked
 15976  001A90  6F80               	movwf	(___ftdiv@f2+2)& (0+255),b
 15977  001A92  C08B  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15978  001A96  C08C  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15979  001A9A  ECE7  F028         	call	___lwtoft	;wreg free
 15980  001A9E  C021  F07B         	movff	?___lwtoft,___ftdiv@f1
 15981  001AA2  C022  F07C         	movff	?___lwtoft+1,___ftdiv@f1+1
 15982  001AA6  C023  F07D         	movff	?___lwtoft+2,___ftdiv@f1+2
 15983  001AAA  ECB0  F03B         	call	___ftdiv	;wreg free
 15984  001AAE  C07B  F06C         	movff	?___ftdiv,___ftmul@f1
 15985  001AB2  C07C  F06D         	movff	?___ftdiv+1,___ftmul@f1+1
 15986  001AB6  C07D  F06E         	movff	?___ftdiv+2,___ftmul@f1+2
 15987  001ABA  0E00               	movlw	0
 15988  001ABC  0100               	movlb	0	; () banked
 15989  001ABE  6F6F               	movwf	___ftmul@f2& (0+255),b
 15990  001AC0  0E16               	movlw	22
 15991  001AC2  0100               	movlb	0	; () banked
 15992  001AC4  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 15993  001AC6  0E43               	movlw	67
 15994  001AC8  0100               	movlb	0	; () banked
 15995  001ACA  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 15996  001ACC  EC53  F03C         	call	___ftmul	;wreg free
 15997  001AD0  C06C  F032         	movff	?___ftmul,_Vin
 15998  001AD4  C06D  F033         	movff	?___ftmul+1,_Vin+1
 15999  001AD8  C06E  F034         	movff	?___ftmul+2,_Vin+2
 16000                           
 16001                           ;Get_Voltages.c: 264: Vin=(Vin-Vin_zero)*Vin_Span;
 16002  001ADC  C032  F063         	movff	_Vin,___ftadd@f2
 16003  001AE0  C033  F064         	movff	_Vin+1,___ftadd@f2+1
 16004  001AE4  C034  F065         	movff	_Vin+2,___ftadd@f2+2
 16005  001AE8  C137  F01C         	movff	_Vin_zero,___ftneg@f1
 16006  001AEC  C138  F01D         	movff	_Vin_zero+1,___ftneg@f1+1
 16007  001AF0  C139  F01E         	movff	_Vin_zero+2,___ftneg@f1+2
 16008  001AF4  ECFB  F028         	call	___ftneg	;wreg free
 16009  001AF8  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16010  001AFC  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16011  001B00  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16012  001B04  EC45  F016         	call	___ftadd	;wreg free
 16013  001B08  C060  F06C         	movff	?___ftadd,___ftmul@f1
 16014  001B0C  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 16015  001B10  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 16016  001B14  C12B  F06F         	movff	_Vin_Span,___ftmul@f2
 16017  001B18  C12C  F070         	movff	_Vin_Span+1,___ftmul@f2+1
 16018  001B1C  C12D  F071         	movff	_Vin_Span+2,___ftmul@f2+2
 16019  001B20  EC53  F03C         	call	___ftmul	;wreg free
 16020  001B24  C06C  F032         	movff	?___ftmul,_Vin
 16021  001B28  C06D  F033         	movff	?___ftmul+1,_Vin+1
 16022  001B2C  C06E  F034         	movff	?___ftmul+2,_Vin+2
 16023                           
 16024                           ;Get_Voltages.c: 265: Vin = LowPass_Vin(Vin);
 16025  001B30  C032  F07B         	movff	_Vin,LowPass_Vin@val
 16026  001B34  C033  F07C         	movff	_Vin+1,LowPass_Vin@val+1
 16027  001B38  C034  F07D         	movff	_Vin+2,LowPass_Vin@val+2
 16028  001B3C  EC33  F033         	call	_LowPass_Vin	;wreg free
 16029  001B40  C07B  F032         	movff	?_LowPass_Vin,_Vin
 16030  001B44  C07C  F033         	movff	?_LowPass_Vin+1,_Vin+1
 16031  001B48  C07D  F034         	movff	?_LowPass_Vin+2,_Vin+2
 16032                           
 16033                           ;Get_Voltages.c: 267: if(Vin<min)
 16034  001B4C  C032  F01F         	movff	_Vin,___ftge@ff1
 16035  001B50  C033  F020         	movff	_Vin+1,___ftge@ff1+1
 16036  001B54  C034  F021         	movff	_Vin+2,___ftge@ff1+2
 16037  001B58  C122  F022         	movff	_min,___ftge@ff2
 16038  001B5C  C123  F023         	movff	_min+1,___ftge@ff2+1
 16039  001B60  C124  F024         	movff	_min+2,___ftge@ff2+2
 16040  001B64  EC7A  F031         	call	___ftge	;wreg free
 16041  001B68  B0D8               	btfsc	status,0,c
 16042  001B6A  D006               	goto	l495
 16043                           
 16044                           ;Get_Voltages.c: 268: min=Vin;
 16045  001B6C  C032  F122         	movff	_Vin,_min
 16046  001B70  C033  F123         	movff	_Vin+1,_min+1
 16047  001B74  C034  F124         	movff	_Vin+2,_min+2
 16048  001B78                     l495:
 16049  001B78  FFFF               	dw	65535	; assembler added errata NOP
 16050                           
 16051                           ;Get_Voltages.c: 270: if(Vin>max)
 16052  001B7A  C11F  F01F         	movff	_max,___ftge@ff1
 16053  001B7E  C120  F020         	movff	_max+1,___ftge@ff1+1
 16054  001B82  C121  F021         	movff	_max+2,___ftge@ff1+2
 16055  001B86  C032  F022         	movff	_Vin,___ftge@ff2
 16056  001B8A  C033  F023         	movff	_Vin+1,___ftge@ff2+1
 16057  001B8E  C034  F024         	movff	_Vin+2,___ftge@ff2+2
 16058  001B92  EC7A  F031         	call	___ftge	;wreg free
 16059  001B96  B0D8               	btfsc	status,0,c
 16060  001B98  D006               	goto	l496
 16061                           
 16062                           ;Get_Voltages.c: 271: max=Vin;
 16063  001B9A  C032  F11F         	movff	_Vin,_max
 16064  001B9E  C033  F120         	movff	_Vin+1,_max+1
 16065  001BA2  C034  F121         	movff	_Vin+2,_max+2
 16066  001BA6                     l496:
 16067  001BA6  FFFF               	dw	65535	; assembler added errata NOP
 16068                           
 16069                           ;Get_Voltages.c: 273: return status.data;
 16070  001BA8  0100               	movlb	0	; () banked
 16071  001BAA  51FC               	movf	_status& (0+255),w,b
 16072                           
 16073                           ; BSR set to: 0
 16074                           
 16075                           ; BSR set to: 0
 16076  001BAC  0012               	return		;funcret
 16077  001BAE  FFFF               	dw	65535	; errata NOP
 16078  001BB0                     __end_of_Get_Voltage_Data:
 16079                           	opt stack 0
 16080                           tblptru	equ	0xFF8
 16081                           tblptrh	equ	0xFF7
 16082                           tblptrl	equ	0xFF6
 16083                           tablat	equ	0xFF5
 16084                           prodl	equ	0xFF3
 16085                           intcon	equ	0xFF2
 16086                           postinc0	equ	0xFEE
 16087                           wreg	equ	0xFE8
 16088                           indf2	equ	0xFDF
 16089                           postinc2	equ	0xFDE
 16090                           postdec2	equ	0xFDD
 16091                           plusw2	equ	0xFDB
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8
 16095                           
 16096 ;; *************** function ___lwtoft *****************
 16097 ;; Defined at:
 16098 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;  c               2   32[COMRAM] unsigned int 
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;		None
 16103 ;; Return value:  Size  Location     Type
 16104 ;;                  3   32[COMRAM] float 
 16105 ;; Registers used:
 16106 ;;		wreg, status,2, status,0, cstack
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16112 ;;      Params:         3       0       0       0       0       0       0
 16113 ;;      Locals:         0       0       0       0       0       0       0
 16114 ;;      Temps:          0       0       0       0       0       0       0
 16115 ;;      Totals:         3       0       0       0       0       0       0
 16116 ;;Total ram usage:        3 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; Hardware stack levels required when called:    2
 16119 ;; This function calls:
 16120 ;;		___ftpack
 16121 ;; This function is called by:
 16122 ;;		_Get_Voltage_Data
 16123 ;; This function uses a non-reentrant model
 16124 ;;
 16125                           
 16126                           	psect	text90
 16127  0051CE                     __ptext90:
 16128                           	opt stack 0
 16129  0051CE                     ___lwtoft:
 16130                           	opt stack 0
 16131  0051CE  FFFF               	dw	65535	; assembler added errata NOP
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;incstack = 0
 16135  0051D0  C021  F019         	movff	___lwtoft@c,___ftpack@arg
 16136  0051D4  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
 16137  0051D8  6A1B               	clrf	___ftpack@arg+2,c
 16138  0051DA  0E8E               	movlw	142
 16139  0051DC  6E1C               	movwf	___ftpack@exp,c
 16140  0051DE  0E00               	movlw	0
 16141  0051E0  6E1D               	movwf	___ftpack@sign,c
 16142  0051E2  EC51  F034         	call	___ftpack	;wreg free
 16143  0051E6  C019  F021         	movff	?___ftpack,?___lwtoft
 16144  0051EA  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
 16145  0051EE  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
 16146  0051F2  0012               	return		;funcret
 16147  0051F4  FFFF               	dw	65535	; errata NOP
 16148  0051F6                     __end_of___lwtoft:
 16149                           	opt stack 0
 16150                           tblptru	equ	0xFF8
 16151                           tblptrh	equ	0xFF7
 16152                           tblptrl	equ	0xFF6
 16153                           tablat	equ	0xFF5
 16154                           prodl	equ	0xFF3
 16155                           intcon	equ	0xFF2
 16156                           postinc0	equ	0xFEE
 16157                           wreg	equ	0xFE8
 16158                           indf2	equ	0xFDF
 16159                           postinc2	equ	0xFDE
 16160                           postdec2	equ	0xFDD
 16161                           plusw2	equ	0xFDB
 16162                           fsr2h	equ	0xFDA
 16163                           fsr2l	equ	0xFD9
 16164                           status	equ	0xFD8
 16165                           
 16166 ;; *************** function _LowPass_Vin *****************
 16167 ;; Defined at:
 16168 ;;		line 46 in file "Filters.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;  val             3   27[BANK0 ] float 
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;  Vout            3   33[BANK0 ] float 
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  3   27[BANK0 ] float 
 16175 ;; Registers used:
 16176 ;;		wreg, status,2, status,0, cstack
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16182 ;;      Params:         0       3       0       0       0       0       0
 16183 ;;      Locals:         0       6       0       0       0       0       0
 16184 ;;      Temps:          0       0       0       0       0       0       0
 16185 ;;      Totals:         0       9       0       0       0       0       0
 16186 ;;Total ram usage:        9 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:    3
 16189 ;; This function calls:
 16190 ;;		___ftadd
 16191 ;;		___ftmul
 16192 ;;		___ftneg
 16193 ;; This function is called by:
 16194 ;;		_Get_Voltage_Data
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           	psect	text91
 16199  006666                     __ptext91:
 16200                           	opt stack 0
 16201  006666                     _LowPass_Vin:
 16202                           	opt stack 0
 16203  006666  FFFF               	dw	65535	; assembler added errata NOP
 16204                           
 16205                           ;Filters.c: 48: float Vout;
 16206                           ;Filters.c: 50: Vout=k1*Vin_last+(1.0-k1)*val;
 16207                           
 16208                           ;incstack = 0
 16209  006668  C07B  F06F         	movff	LowPass_Vin@val,___ftmul@f2
 16210  00666C  C07C  F070         	movff	LowPass_Vin@val+1,___ftmul@f2+1
 16211  006670  C07D  F071         	movff	LowPass_Vin@val+2,___ftmul@f2+2
 16212  006674  0E00               	movlw	0
 16213  006676  0100               	movlb	0	; () banked
 16214  006678  6F63               	movwf	___ftadd@f2& (0+255),b
 16215  00667A  0E80               	movlw	128
 16216  00667C  0100               	movlb	0	; () banked
 16217  00667E  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16218  006680  0E3F               	movlw	63
 16219  006682  0100               	movlb	0	; () banked
 16220  006684  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16221  006686  C03E  F01C         	movff	_k1,___ftneg@f1
 16222  00668A  C03F  F01D         	movff	_k1+1,___ftneg@f1+1
 16223  00668E  C040  F01E         	movff	_k1+2,___ftneg@f1+2
 16224  006692  ECFB  F028         	call	___ftneg	;wreg free
 16225  006696  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16226  00669A  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16227  00669E  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16228  0066A2  EC45  F016         	call	___ftadd	;wreg free
 16229  0066A6  C060  F06C         	movff	?___ftadd,___ftmul@f1
 16230  0066AA  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 16231  0066AE  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 16232  0066B2  EC53  F03C         	call	___ftmul	;wreg free
 16233  0066B6  C06C  F07E         	movff	?___ftmul,_LowPass_Vin$3551
 16234  0066BA  C06D  F07F         	movff	?___ftmul+1,_LowPass_Vin$3551+1
 16235  0066BE  C06E  F080         	movff	?___ftmul+2,_LowPass_Vin$3551+2
 16236                           
 16237                           ;Filters.c: 48: float Vout;
 16238                           ;Filters.c: 50: Vout=k1*Vin_last+(1.0-k1)*val;
 16239  0066C2  C140  F06F         	movff	_Vin_last,___ftmul@f2
 16240  0066C6  C141  F070         	movff	_Vin_last+1,___ftmul@f2+1
 16241  0066CA  C142  F071         	movff	_Vin_last+2,___ftmul@f2+2
 16242  0066CE  C03E  F06C         	movff	_k1,___ftmul@f1
 16243  0066D2  C03F  F06D         	movff	_k1+1,___ftmul@f1+1
 16244  0066D6  C040  F06E         	movff	_k1+2,___ftmul@f1+2
 16245  0066DA  EC53  F03C         	call	___ftmul	;wreg free
 16246  0066DE  C06C  F060         	movff	?___ftmul,___ftadd@f1
 16247  0066E2  C06D  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16248  0066E6  C06E  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16249  0066EA  C07E  F063         	movff	_LowPass_Vin$3551,___ftadd@f2
 16250  0066EE  C07F  F064         	movff	_LowPass_Vin$3551+1,___ftadd@f2+1
 16251  0066F2  C080  F065         	movff	_LowPass_Vin$3551+2,___ftadd@f2+2
 16252  0066F6  EC45  F016         	call	___ftadd	;wreg free
 16253  0066FA  C060  F081         	movff	?___ftadd,LowPass_Vin@Vout
 16254  0066FE  C061  F082         	movff	?___ftadd+1,LowPass_Vin@Vout+1
 16255  006702  C062  F083         	movff	?___ftadd+2,LowPass_Vin@Vout+2
 16256                           
 16257                           ;Filters.c: 51: Vin_last=Vout;
 16258  006706  C081  F140         	movff	LowPass_Vin@Vout,_Vin_last
 16259  00670A  C082  F141         	movff	LowPass_Vin@Vout+1,_Vin_last+1
 16260  00670E  C083  F142         	movff	LowPass_Vin@Vout+2,_Vin_last+2
 16261                           
 16262                           ;Filters.c: 52: return Vout;
 16263  006712  C081  F07B         	movff	LowPass_Vin@Vout,?_LowPass_Vin
 16264  006716  C082  F07C         	movff	LowPass_Vin@Vout+1,?_LowPass_Vin+1
 16265  00671A  C083  F07D         	movff	LowPass_Vin@Vout+2,?_LowPass_Vin+2
 16266  00671E  0012               	return		;funcret
 16267  006720  FFFF               	dw	65535	; errata NOP
 16268  006722                     __end_of_LowPass_Vin:
 16269                           	opt stack 0
 16270                           tblptru	equ	0xFF8
 16271                           tblptrh	equ	0xFF7
 16272                           tblptrl	equ	0xFF6
 16273                           tablat	equ	0xFF5
 16274                           prodl	equ	0xFF3
 16275                           intcon	equ	0xFF2
 16276                           postinc0	equ	0xFEE
 16277                           wreg	equ	0xFE8
 16278                           indf2	equ	0xFDF
 16279                           postinc2	equ	0xFDE
 16280                           postdec2	equ	0xFDD
 16281                           plusw2	equ	0xFDB
 16282                           fsr2h	equ	0xFDA
 16283                           fsr2l	equ	0xFD9
 16284                           status	equ	0xFD8
 16285                           
 16286 ;; *************** function _LowPass_VL3 *****************
 16287 ;; Defined at:
 16288 ;;		line 38 in file "Filters.c"
 16289 ;; Parameters:    Size  Location     Type
 16290 ;;  val             3   27[BANK0 ] float 
 16291 ;; Auto vars:     Size  Location     Type
 16292 ;;  Vout            3   33[BANK0 ] float 
 16293 ;; Return value:  Size  Location     Type
 16294 ;;                  3   27[BANK0 ] float 
 16295 ;; Registers used:
 16296 ;;		wreg, status,2, status,0, cstack
 16297 ;; Tracked objects:
 16298 ;;		On entry : 0/0
 16299 ;;		On exit  : 0/0
 16300 ;;		Unchanged: 0/0
 16301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16302 ;;      Params:         0       3       0       0       0       0       0
 16303 ;;      Locals:         0       6       0       0       0       0       0
 16304 ;;      Temps:          0       0       0       0       0       0       0
 16305 ;;      Totals:         0       9       0       0       0       0       0
 16306 ;;Total ram usage:        9 bytes
 16307 ;; Hardware stack levels used:    1
 16308 ;; Hardware stack levels required when called:    3
 16309 ;; This function calls:
 16310 ;;		___ftadd
 16311 ;;		___ftmul
 16312 ;;		___ftneg
 16313 ;; This function is called by:
 16314 ;;		_Get_Voltage_Data
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text92
 16319  0065AA                     __ptext92:
 16320                           	opt stack 0
 16321  0065AA                     _LowPass_VL3:
 16322                           	opt stack 0
 16323  0065AA  FFFF               	dw	65535	; assembler added errata NOP
 16324                           
 16325                           ;Filters.c: 40: float Vout;
 16326                           ;Filters.c: 42: Vout=k1*VL3_last+(1.0-k1)*val;
 16327                           
 16328                           ;incstack = 0
 16329  0065AC  C07B  F06F         	movff	LowPass_VL3@val,___ftmul@f2
 16330  0065B0  C07C  F070         	movff	LowPass_VL3@val+1,___ftmul@f2+1
 16331  0065B4  C07D  F071         	movff	LowPass_VL3@val+2,___ftmul@f2+2
 16332  0065B8  0E00               	movlw	0
 16333  0065BA  0100               	movlb	0	; () banked
 16334  0065BC  6F63               	movwf	___ftadd@f2& (0+255),b
 16335  0065BE  0E80               	movlw	128
 16336  0065C0  0100               	movlb	0	; () banked
 16337  0065C2  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16338  0065C4  0E3F               	movlw	63
 16339  0065C6  0100               	movlb	0	; () banked
 16340  0065C8  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16341  0065CA  C03E  F01C         	movff	_k1,___ftneg@f1
 16342  0065CE  C03F  F01D         	movff	_k1+1,___ftneg@f1+1
 16343  0065D2  C040  F01E         	movff	_k1+2,___ftneg@f1+2
 16344  0065D6  ECFB  F028         	call	___ftneg	;wreg free
 16345  0065DA  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16346  0065DE  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16347  0065E2  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16348  0065E6  EC45  F016         	call	___ftadd	;wreg free
 16349  0065EA  C060  F06C         	movff	?___ftadd,___ftmul@f1
 16350  0065EE  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 16351  0065F2  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 16352  0065F6  EC53  F03C         	call	___ftmul	;wreg free
 16353  0065FA  C06C  F07E         	movff	?___ftmul,_LowPass_VL3$3550
 16354  0065FE  C06D  F07F         	movff	?___ftmul+1,_LowPass_VL3$3550+1
 16355  006602  C06E  F080         	movff	?___ftmul+2,_LowPass_VL3$3550+2
 16356                           
 16357                           ;Filters.c: 40: float Vout;
 16358                           ;Filters.c: 42: Vout=k1*VL3_last+(1.0-k1)*val;
 16359  006606  C143  F06F         	movff	_VL3_last,___ftmul@f2
 16360  00660A  C144  F070         	movff	_VL3_last+1,___ftmul@f2+1
 16361  00660E  C145  F071         	movff	_VL3_last+2,___ftmul@f2+2
 16362  006612  C03E  F06C         	movff	_k1,___ftmul@f1
 16363  006616  C03F  F06D         	movff	_k1+1,___ftmul@f1+1
 16364  00661A  C040  F06E         	movff	_k1+2,___ftmul@f1+2
 16365  00661E  EC53  F03C         	call	___ftmul	;wreg free
 16366  006622  C06C  F060         	movff	?___ftmul,___ftadd@f1
 16367  006626  C06D  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16368  00662A  C06E  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16369  00662E  C07E  F063         	movff	_LowPass_VL3$3550,___ftadd@f2
 16370  006632  C07F  F064         	movff	_LowPass_VL3$3550+1,___ftadd@f2+1
 16371  006636  C080  F065         	movff	_LowPass_VL3$3550+2,___ftadd@f2+2
 16372  00663A  EC45  F016         	call	___ftadd	;wreg free
 16373  00663E  C060  F081         	movff	?___ftadd,LowPass_VL3@Vout
 16374  006642  C061  F082         	movff	?___ftadd+1,LowPass_VL3@Vout+1
 16375  006646  C062  F083         	movff	?___ftadd+2,LowPass_VL3@Vout+2
 16376                           
 16377                           ;Filters.c: 43: VL3_last=Vout;
 16378  00664A  C081  F143         	movff	LowPass_VL3@Vout,_VL3_last
 16379  00664E  C082  F144         	movff	LowPass_VL3@Vout+1,_VL3_last+1
 16380  006652  C083  F145         	movff	LowPass_VL3@Vout+2,_VL3_last+2
 16381                           
 16382                           ;Filters.c: 44: return Vout;
 16383  006656  C081  F07B         	movff	LowPass_VL3@Vout,?_LowPass_VL3
 16384  00665A  C082  F07C         	movff	LowPass_VL3@Vout+1,?_LowPass_VL3+1
 16385  00665E  C083  F07D         	movff	LowPass_VL3@Vout+2,?_LowPass_VL3+2
 16386  006662  0012               	return		;funcret
 16387  006664  FFFF               	dw	65535	; errata NOP
 16388  006666                     __end_of_LowPass_VL3:
 16389                           	opt stack 0
 16390                           tblptru	equ	0xFF8
 16391                           tblptrh	equ	0xFF7
 16392                           tblptrl	equ	0xFF6
 16393                           tablat	equ	0xFF5
 16394                           prodl	equ	0xFF3
 16395                           intcon	equ	0xFF2
 16396                           postinc0	equ	0xFEE
 16397                           wreg	equ	0xFE8
 16398                           indf2	equ	0xFDF
 16399                           postinc2	equ	0xFDE
 16400                           postdec2	equ	0xFDD
 16401                           plusw2	equ	0xFDB
 16402                           fsr2h	equ	0xFDA
 16403                           fsr2l	equ	0xFD9
 16404                           status	equ	0xFD8
 16405                           
 16406 ;; *************** function _LowPass_VL2 *****************
 16407 ;; Defined at:
 16408 ;;		line 29 in file "Filters.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  val             3   27[BANK0 ] float 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  Vout            3   33[BANK0 ] float 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  3   27[BANK0 ] float 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16422 ;;      Params:         0       3       0       0       0       0       0
 16423 ;;      Locals:         0       6       0       0       0       0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0
 16425 ;;      Totals:         0       9       0       0       0       0       0
 16426 ;;Total ram usage:        9 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    3
 16429 ;; This function calls:
 16430 ;;		___ftadd
 16431 ;;		___ftmul
 16432 ;;		___ftneg
 16433 ;; This function is called by:
 16434 ;;		_Get_Voltage_Data
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text93
 16439  0064EE                     __ptext93:
 16440                           	opt stack 0
 16441  0064EE                     _LowPass_VL2:
 16442                           	opt stack 0
 16443  0064EE  FFFF               	dw	65535	; assembler added errata NOP
 16444                           
 16445                           ;Filters.c: 31: float Vout;
 16446                           ;Filters.c: 33: Vout=k1*VL2_last+(1.0-k1)*val;
 16447                           
 16448                           ;incstack = 0
 16449  0064F0  C07B  F06F         	movff	LowPass_VL2@val,___ftmul@f2
 16450  0064F4  C07C  F070         	movff	LowPass_VL2@val+1,___ftmul@f2+1
 16451  0064F8  C07D  F071         	movff	LowPass_VL2@val+2,___ftmul@f2+2
 16452  0064FC  0E00               	movlw	0
 16453  0064FE  0100               	movlb	0	; () banked
 16454  006500  6F63               	movwf	___ftadd@f2& (0+255),b
 16455  006502  0E80               	movlw	128
 16456  006504  0100               	movlb	0	; () banked
 16457  006506  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16458  006508  0E3F               	movlw	63
 16459  00650A  0100               	movlb	0	; () banked
 16460  00650C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16461  00650E  C03E  F01C         	movff	_k1,___ftneg@f1
 16462  006512  C03F  F01D         	movff	_k1+1,___ftneg@f1+1
 16463  006516  C040  F01E         	movff	_k1+2,___ftneg@f1+2
 16464  00651A  ECFB  F028         	call	___ftneg	;wreg free
 16465  00651E  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16466  006522  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16467  006526  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16468  00652A  EC45  F016         	call	___ftadd	;wreg free
 16469  00652E  C060  F06C         	movff	?___ftadd,___ftmul@f1
 16470  006532  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 16471  006536  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 16472  00653A  EC53  F03C         	call	___ftmul	;wreg free
 16473  00653E  C06C  F07E         	movff	?___ftmul,_LowPass_VL2$3549
 16474  006542  C06D  F07F         	movff	?___ftmul+1,_LowPass_VL2$3549+1
 16475  006546  C06E  F080         	movff	?___ftmul+2,_LowPass_VL2$3549+2
 16476                           
 16477                           ;Filters.c: 31: float Vout;
 16478                           ;Filters.c: 33: Vout=k1*VL2_last+(1.0-k1)*val;
 16479  00654A  C146  F06F         	movff	_VL2_last,___ftmul@f2
 16480  00654E  C147  F070         	movff	_VL2_last+1,___ftmul@f2+1
 16481  006552  C148  F071         	movff	_VL2_last+2,___ftmul@f2+2
 16482  006556  C03E  F06C         	movff	_k1,___ftmul@f1
 16483  00655A  C03F  F06D         	movff	_k1+1,___ftmul@f1+1
 16484  00655E  C040  F06E         	movff	_k1+2,___ftmul@f1+2
 16485  006562  EC53  F03C         	call	___ftmul	;wreg free
 16486  006566  C06C  F060         	movff	?___ftmul,___ftadd@f1
 16487  00656A  C06D  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16488  00656E  C06E  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16489  006572  C07E  F063         	movff	_LowPass_VL2$3549,___ftadd@f2
 16490  006576  C07F  F064         	movff	_LowPass_VL2$3549+1,___ftadd@f2+1
 16491  00657A  C080  F065         	movff	_LowPass_VL2$3549+2,___ftadd@f2+2
 16492  00657E  EC45  F016         	call	___ftadd	;wreg free
 16493  006582  C060  F081         	movff	?___ftadd,LowPass_VL2@Vout
 16494  006586  C061  F082         	movff	?___ftadd+1,LowPass_VL2@Vout+1
 16495  00658A  C062  F083         	movff	?___ftadd+2,LowPass_VL2@Vout+2
 16496                           
 16497                           ;Filters.c: 34: VL2_last=Vout;
 16498  00658E  C081  F146         	movff	LowPass_VL2@Vout,_VL2_last
 16499  006592  C082  F147         	movff	LowPass_VL2@Vout+1,_VL2_last+1
 16500  006596  C083  F148         	movff	LowPass_VL2@Vout+2,_VL2_last+2
 16501                           
 16502                           ;Filters.c: 35: return Vout;
 16503  00659A  C081  F07B         	movff	LowPass_VL2@Vout,?_LowPass_VL2
 16504  00659E  C082  F07C         	movff	LowPass_VL2@Vout+1,?_LowPass_VL2+1
 16505  0065A2  C083  F07D         	movff	LowPass_VL2@Vout+2,?_LowPass_VL2+2
 16506  0065A6  0012               	return		;funcret
 16507  0065A8  FFFF               	dw	65535	; errata NOP
 16508  0065AA                     __end_of_LowPass_VL2:
 16509                           	opt stack 0
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodl	equ	0xFF3
 16515                           intcon	equ	0xFF2
 16516                           postinc0	equ	0xFEE
 16517                           wreg	equ	0xFE8
 16518                           indf2	equ	0xFDF
 16519                           postinc2	equ	0xFDE
 16520                           postdec2	equ	0xFDD
 16521                           plusw2	equ	0xFDB
 16522                           fsr2h	equ	0xFDA
 16523                           fsr2l	equ	0xFD9
 16524                           status	equ	0xFD8
 16525                           
 16526 ;; *************** function _LowPass_VL1 *****************
 16527 ;; Defined at:
 16528 ;;		line 20 in file "Filters.c"
 16529 ;; Parameters:    Size  Location     Type
 16530 ;;  val             3   27[BANK0 ] float 
 16531 ;; Auto vars:     Size  Location     Type
 16532 ;;  Vout            3   33[BANK0 ] float 
 16533 ;; Return value:  Size  Location     Type
 16534 ;;                  3   27[BANK0 ] float 
 16535 ;; Registers used:
 16536 ;;		wreg, status,2, status,0, cstack
 16537 ;; Tracked objects:
 16538 ;;		On entry : 0/0
 16539 ;;		On exit  : 0/0
 16540 ;;		Unchanged: 0/0
 16541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16542 ;;      Params:         0       3       0       0       0       0       0
 16543 ;;      Locals:         0       6       0       0       0       0       0
 16544 ;;      Temps:          0       0       0       0       0       0       0
 16545 ;;      Totals:         0       9       0       0       0       0       0
 16546 ;;Total ram usage:        9 bytes
 16547 ;; Hardware stack levels used:    1
 16548 ;; Hardware stack levels required when called:    3
 16549 ;; This function calls:
 16550 ;;		___ftadd
 16551 ;;		___ftmul
 16552 ;;		___ftneg
 16553 ;; This function is called by:
 16554 ;;		_Get_Voltage_Data
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           	psect	text94
 16559  006432                     __ptext94:
 16560                           	opt stack 0
 16561  006432                     _LowPass_VL1:
 16562                           	opt stack 0
 16563  006432  FFFF               	dw	65535	; assembler added errata NOP
 16564                           
 16565                           ;Filters.c: 22: float Vout;
 16566                           ;Filters.c: 24: Vout=k1*VL1_last+(1.0-k1)*val;
 16567                           
 16568                           ;incstack = 0
 16569  006434  C07B  F06F         	movff	LowPass_VL1@val,___ftmul@f2
 16570  006438  C07C  F070         	movff	LowPass_VL1@val+1,___ftmul@f2+1
 16571  00643C  C07D  F071         	movff	LowPass_VL1@val+2,___ftmul@f2+2
 16572  006440  0E00               	movlw	0
 16573  006442  0100               	movlb	0	; () banked
 16574  006444  6F63               	movwf	___ftadd@f2& (0+255),b
 16575  006446  0E80               	movlw	128
 16576  006448  0100               	movlb	0	; () banked
 16577  00644A  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16578  00644C  0E3F               	movlw	63
 16579  00644E  0100               	movlb	0	; () banked
 16580  006450  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16581  006452  C03E  F01C         	movff	_k1,___ftneg@f1
 16582  006456  C03F  F01D         	movff	_k1+1,___ftneg@f1+1
 16583  00645A  C040  F01E         	movff	_k1+2,___ftneg@f1+2
 16584  00645E  ECFB  F028         	call	___ftneg	;wreg free
 16585  006462  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16586  006466  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16587  00646A  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16588  00646E  EC45  F016         	call	___ftadd	;wreg free
 16589  006472  C060  F06C         	movff	?___ftadd,___ftmul@f1
 16590  006476  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 16591  00647A  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 16592  00647E  EC53  F03C         	call	___ftmul	;wreg free
 16593  006482  C06C  F07E         	movff	?___ftmul,_LowPass_VL1$3548
 16594  006486  C06D  F07F         	movff	?___ftmul+1,_LowPass_VL1$3548+1
 16595  00648A  C06E  F080         	movff	?___ftmul+2,_LowPass_VL1$3548+2
 16596                           
 16597                           ;Filters.c: 22: float Vout;
 16598                           ;Filters.c: 24: Vout=k1*VL1_last+(1.0-k1)*val;
 16599  00648E  C149  F06F         	movff	_VL1_last,___ftmul@f2
 16600  006492  C14A  F070         	movff	_VL1_last+1,___ftmul@f2+1
 16601  006496  C14B  F071         	movff	_VL1_last+2,___ftmul@f2+2
 16602  00649A  C03E  F06C         	movff	_k1,___ftmul@f1
 16603  00649E  C03F  F06D         	movff	_k1+1,___ftmul@f1+1
 16604  0064A2  C040  F06E         	movff	_k1+2,___ftmul@f1+2
 16605  0064A6  EC53  F03C         	call	___ftmul	;wreg free
 16606  0064AA  C06C  F060         	movff	?___ftmul,___ftadd@f1
 16607  0064AE  C06D  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16608  0064B2  C06E  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16609  0064B6  C07E  F063         	movff	_LowPass_VL1$3548,___ftadd@f2
 16610  0064BA  C07F  F064         	movff	_LowPass_VL1$3548+1,___ftadd@f2+1
 16611  0064BE  C080  F065         	movff	_LowPass_VL1$3548+2,___ftadd@f2+2
 16612  0064C2  EC45  F016         	call	___ftadd	;wreg free
 16613  0064C6  C060  F081         	movff	?___ftadd,LowPass_VL1@Vout
 16614  0064CA  C061  F082         	movff	?___ftadd+1,LowPass_VL1@Vout+1
 16615  0064CE  C062  F083         	movff	?___ftadd+2,LowPass_VL1@Vout+2
 16616                           
 16617                           ;Filters.c: 25: VL1_last=Vout;
 16618  0064D2  C081  F149         	movff	LowPass_VL1@Vout,_VL1_last
 16619  0064D6  C082  F14A         	movff	LowPass_VL1@Vout+1,_VL1_last+1
 16620  0064DA  C083  F14B         	movff	LowPass_VL1@Vout+2,_VL1_last+2
 16621                           
 16622                           ;Filters.c: 26: return Vout;
 16623  0064DE  C081  F07B         	movff	LowPass_VL1@Vout,?_LowPass_VL1
 16624  0064E2  C082  F07C         	movff	LowPass_VL1@Vout+1,?_LowPass_VL1+1
 16625  0064E6  C083  F07D         	movff	LowPass_VL1@Vout+2,?_LowPass_VL1+2
 16626  0064EA  0012               	return		;funcret
 16627  0064EC  FFFF               	dw	65535	; errata NOP
 16628  0064EE                     __end_of_LowPass_VL1:
 16629                           	opt stack 0
 16630                           tblptru	equ	0xFF8
 16631                           tblptrh	equ	0xFF7
 16632                           tblptrl	equ	0xFF6
 16633                           tablat	equ	0xFF5
 16634                           prodl	equ	0xFF3
 16635                           intcon	equ	0xFF2
 16636                           postinc0	equ	0xFEE
 16637                           wreg	equ	0xFE8
 16638                           indf2	equ	0xFDF
 16639                           postinc2	equ	0xFDE
 16640                           postdec2	equ	0xFDD
 16641                           plusw2	equ	0xFDB
 16642                           fsr2h	equ	0xFDA
 16643                           fsr2l	equ	0xFD9
 16644                           status	equ	0xFD8
 16645                           
 16646 ;; *************** function _Get_Analog_Channel *****************
 16647 ;; Defined at:
 16648 ;;		line 91 in file "ior5e.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;  channel         1    wreg     unsigned char 
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;  channel         1   27[COMRAM] unsigned char 
 16653 ;;  ADC_data        2   28[COMRAM] struct ADC
 16654 ;;  status          1    0        unsigned char 
 16655 ;; Return value:  Size  Location     Type
 16656 ;;                  2   24[COMRAM] unsigned int 
 16657 ;; Registers used:
 16658 ;;		wreg, status,2, status,0
 16659 ;; Tracked objects:
 16660 ;;		On entry : 0/0
 16661 ;;		On exit  : 0/0
 16662 ;;		Unchanged: 0/0
 16663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16664 ;;      Params:         2       0       0       0       0       0       0
 16665 ;;      Locals:         3       0       0       0       0       0       0
 16666 ;;      Temps:          1       0       0       0       0       0       0
 16667 ;;      Totals:         6       0       0       0       0       0       0
 16668 ;;Total ram usage:        6 bytes
 16669 ;; Hardware stack levels used:    1
 16670 ;; Hardware stack levels required when called:    1
 16671 ;; This function calls:
 16672 ;;		Nothing
 16673 ;; This function is called by:
 16674 ;;		_Get_Voltage_Data
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           	psect	text95
 16679  0054B0                     __ptext95:
 16680                           	opt stack 0
 16681  0054B0                     _Get_Analog_Channel:
 16682                           	opt stack 0
 16683  0054B0  FFFF               	dw	65535	; assembler added errata NOP
 16684                           
 16685                           ;incstack = 0
 16686                           ;Get_Analog_Channel@channel stored from wreg
 16687  0054B2  6E1C               	movwf	Get_Analog_Channel@channel,c
 16688                           
 16689                           ;ior5e.c: 93: union ADC {
 16690                           ;ior5e.c: 94: unsigned int Result;
 16691                           ;ior5e.c: 95: struct {
 16692                           ;ior5e.c: 96: unsigned char LSB;
 16693                           ;ior5e.c: 97: unsigned char MSB;
 16694                           ;ior5e.c: 98: };
 16695                           ;ior5e.c: 99: };
 16696                           ;ior5e.c: 101: union ADC ADC_data;
 16697                           ;ior5e.c: 102: char status;
 16698                           ;ior5e.c: 104: ADCON0bits.ADON=1;
 16699  0054B4  80C2               	bsf	4034,0,c	;volatile
 16700                           
 16701                           ;ior5e.c: 106: ADCON0bits.CHS=channel;
 16702  0054B6  C01C  F01B         	movff	Get_Analog_Channel@channel,??_Get_Analog_Channel
 16703  0054BA  461B               	rlncf	??_Get_Analog_Channel,f,c
 16704  0054BC  461B               	rlncf	??_Get_Analog_Channel,f,c
 16705  0054BE  461B               	rlncf	??_Get_Analog_Channel,f,c
 16706  0054C0  50C2               	movf	4034,w,c	;volatile
 16707  0054C2  181B               	xorwf	??_Get_Analog_Channel,w,c
 16708  0054C4  0BC7               	andlw	-57
 16709  0054C6  181B               	xorwf	??_Get_Analog_Channel,w,c
 16710  0054C8  6EC2               	movwf	4034,c	;volatile
 16711                           
 16712                           ;ior5e.c: 107: _delay((unsigned long)((15)*(10000000/4000000.0)));
 16713  0054CA  0E09               	movlw	9
 16714  0054CC                     u11657:
 16715  0054CC  FFFF               	dw	65535	; errata NOP
 16716  0054CE  2EE8               	decfsz	wreg,f,c
 16717  0054D0  D7FD               	bra	u11657
 16718  0054D2  F000               	nop	
 16719                           
 16720                           ;ior5e.c: 108: ADCON0bits.GO=1;
 16721  0054D4  84C2               	bsf	4034,2,c	;volatile
 16722  0054D6  FFFF               	dw	65535	; assembler added errata NOP
 16723  0054D8  B4C2               	btfsc	4034,2,c	;volatile
 16724  0054DA  D7FD               	goto	l722
 16725                           
 16726                           ;ior5e.c: 112: ADC_data.LSB=ADRESL;
 16727  0054DC  CFC3 F01D          	movff	4035,Get_Analog_Channel@ADC_data	;volatile
 16728                           
 16729                           ;ior5e.c: 113: ADC_data.MSB=ADRESH;
 16730  0054E0  CFC4 F01E          	movff	4036,Get_Analog_Channel@ADC_data+1	;volatile
 16731                           
 16732                           ;ior5e.c: 115: return(ADC_data.Result);
 16733  0054E4  C01D  F019         	movff	Get_Analog_Channel@ADC_data,?_Get_Analog_Channel
 16734  0054E8  C01E  F01A         	movff	Get_Analog_Channel@ADC_data+1,?_Get_Analog_Channel+1
 16735  0054EC  0012               	return		;funcret
 16736  0054EE  FFFF               	dw	65535	; errata NOP
 16737  0054F0                     __end_of_Get_Analog_Channel:
 16738                           	opt stack 0
 16739                           tblptru	equ	0xFF8
 16740                           tblptrh	equ	0xFF7
 16741                           tblptrl	equ	0xFF6
 16742                           tablat	equ	0xFF5
 16743                           prodl	equ	0xFF3
 16744                           intcon	equ	0xFF2
 16745                           postinc0	equ	0xFEE
 16746                           wreg	equ	0xFE8
 16747                           indf2	equ	0xFDF
 16748                           postinc2	equ	0xFDE
 16749                           postdec2	equ	0xFDD
 16750                           plusw2	equ	0xFDB
 16751                           fsr2h	equ	0xFDA
 16752                           fsr2l	equ	0xFD9
 16753                           status	equ	0xFD8
 16754                           
 16755 ;; *************** function _Check_VL_N *****************
 16756 ;; Defined at:
 16757 ;;		line 174 in file "Get_Voltages.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  val             3   39[COMRAM] float 
 16760 ;; Auto vars:     Size  Location     Type
 16761 ;;		None
 16762 ;; Return value:  Size  Location     Type
 16763 ;;                  1    wreg      unsigned char 
 16764 ;; Registers used:
 16765 ;;		wreg, status,2, status,0, cstack
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16771 ;;      Params:         3       0       0       0       0       0       0
 16772 ;;      Locals:         0       0       0       0       0       0       0
 16773 ;;      Temps:          0       0       0       0       0       0       0
 16774 ;;      Totals:         3       0       0       0       0       0       0
 16775 ;;Total ram usage:        3 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; Hardware stack levels required when called:    2
 16778 ;; This function calls:
 16779 ;;		___ftge
 16780 ;; This function is called by:
 16781 ;;		_Get_Voltage_Data
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           	psect	text96
 16786  0058EC                     __ptext96:
 16787                           	opt stack 0
 16788  0058EC                     _Check_VL_N:
 16789                           	opt stack 0
 16790  0058EC  FFFF               	dw	65535	; assembler added errata NOP
 16791                           
 16792                           ;Get_Voltages.c: 176: if(val>VL_max)
 16793                           
 16794                           ;incstack = 0
 16795  0058EE  C128  F01F         	movff	_VL_max,___ftge@ff1
 16796  0058F2  C129  F020         	movff	_VL_max+1,___ftge@ff1+1
 16797  0058F6  C12A  F021         	movff	_VL_max+2,___ftge@ff1+2
 16798  0058FA  C028  F022         	movff	Check_VL_N@val,___ftge@ff2
 16799  0058FE  C029  F023         	movff	Check_VL_N@val+1,___ftge@ff2+1
 16800  005902  C02A  F024         	movff	Check_VL_N@val+2,___ftge@ff2+2
 16801  005906  EC7A  F031         	call	___ftge	;wreg free
 16802  00590A  B0D8               	btfsc	status,0,c
 16803  00590C  D002               	goto	l473
 16804                           
 16805                           ;Get_Voltages.c: 177: return 1;
 16806  00590E  0E01               	movlw	1
 16807  005910  D015               	goto	l10961
 16808  005912                     l473:
 16809  005912  FFFF               	dw	65535	; assembler added errata NOP
 16810                           
 16811                           ;Get_Voltages.c: 178: else if(val<VL_min)
 16812  005914  C028  F01F         	movff	Check_VL_N@val,___ftge@ff1
 16813  005918  C029  F020         	movff	Check_VL_N@val+1,___ftge@ff1+1
 16814  00591C  C02A  F021         	movff	Check_VL_N@val+2,___ftge@ff1+2
 16815  005920  C125  F022         	movff	_VL_min,___ftge@ff2
 16816  005924  C126  F023         	movff	_VL_min+1,___ftge@ff2+1
 16817  005928  C127  F024         	movff	_VL_min+2,___ftge@ff2+2
 16818  00592C  EC7A  F031         	call	___ftge	;wreg free
 16819  005930  B0D8               	btfsc	status,0,c
 16820  005932  D002               	goto	l476
 16821                           
 16822                           ;Get_Voltages.c: 179: return 2;
 16823  005934  0E02               	movlw	2
 16824  005936  D002               	goto	l10961
 16825  005938                     l476:
 16826  005938  FFFF               	dw	65535	; assembler added errata NOP
 16827                           
 16828                           ;Get_Voltages.c: 180: else
 16829                           ;Get_Voltages.c: 181: return 0;
 16830  00593A  0E00               	movlw	0
 16831  00593C                     l10961:
 16832  00593C  FFFF               	dw	65535	; assembler added errata NOP
 16833  00593E  0012               	return		;funcret
 16834  005940  FFFF               	dw	65535	; errata NOP
 16835  005942                     __end_of_Check_VL_N:
 16836                           	opt stack 0
 16837                           tblptru	equ	0xFF8
 16838                           tblptrh	equ	0xFF7
 16839                           tblptrl	equ	0xFF6
 16840                           tablat	equ	0xFF5
 16841                           prodl	equ	0xFF3
 16842                           intcon	equ	0xFF2
 16843                           postinc0	equ	0xFEE
 16844                           wreg	equ	0xFE8
 16845                           indf2	equ	0xFDF
 16846                           postinc2	equ	0xFDE
 16847                           postdec2	equ	0xFDD
 16848                           plusw2	equ	0xFDB
 16849                           fsr2h	equ	0xFDA
 16850                           fsr2l	equ	0xFD9
 16851                           status	equ	0xFD8
 16852                           
 16853 ;; *************** function _Get_Variables *****************
 16854 ;; Defined at:
 16855 ;;		line 15 in file "InitVariables.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;		None
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  data           53    0[BANK0 ] struct data_var
 16860 ;; Return value:  Size  Location     Type
 16861 ;;                  2   30[COMRAM] int 
 16862 ;; Registers used:
 16863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16869 ;;      Params:         2       0       0       0       0       0       0
 16870 ;;      Locals:         0      53       0       0       0       0       0
 16871 ;;      Temps:          0       0       0       0       0       0       0
 16872 ;;      Totals:         2      53       0       0       0       0       0
 16873 ;;Total ram usage:       55 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    3
 16876 ;; This function calls:
 16877 ;;		_Set_LP_RC_constant
 16878 ;;		_rd_string_EE
 16879 ;;		_set_Deadband
 16880 ;;		_set_PID_Kd
 16881 ;;		_set_PID_Ki
 16882 ;;		_set_PID_Kp
 16883 ;;		_set_PID_T
 16884 ;;		_set_PID_setpoint
 16885 ;;		_set_VL1_span
 16886 ;;		_set_VL1_zero
 16887 ;;		_set_VL2_span
 16888 ;;		_set_VL2_zero
 16889 ;;		_set_VL3_span
 16890 ;;		_set_VL3_zero
 16891 ;;		_set_Vin_span
 16892 ;;		_set_Vin_zero
 16893 ;;		_set_max_VL
 16894 ;;		_set_min_VL
 16895 ;; This function is called by:
 16896 ;;		_main
 16897 ;; This function uses a non-reentrant model
 16898 ;;
 16899                           
 16900                           	psect	text97
 16901  0073CA                     __ptext97:
 16902                           	opt stack 0
 16903  0073CA                     _Get_Variables:
 16904                           	opt stack 0
 16905  0073CA  FFFF               	dw	65535	; assembler added errata NOP
 16906                           
 16907                           ;InitVariables.c: 17: union data_var data;
 16908                           ;InitVariables.c: 19: rd_string_EE(0, 53, &data);
 16909                           
 16910                           ;incstack = 0
 16911  0073CC  0E35               	movlw	53
 16912  0073CE  6E1A               	movwf	rd_string_EE@lenght,c
 16913  0073D0  0E60               	movlw	low Get_Variables@data
 16914  0073D2  6E1B               	movwf	rd_string_EE@buffer,c
 16915  0073D4  0E00               	movlw	high Get_Variables@data
 16916  0073D6  6E1C               	movwf	rd_string_EE@buffer+1,c
 16917  0073D8  0E00               	movlw	0
 16918  0073DA  ECAE  F029         	call	_rd_string_EE
 16919                           
 16920                           ;InitVariables.c: 20: set_PID_Kp(data.kp);
 16921  0073DE  C062  F019         	movff	Get_Variables@data+2,set_PID_Kp@val
 16922  0073E2  C063  F01A         	movff	Get_Variables@data+3,set_PID_Kp@val+1
 16923  0073E6  C064  F01B         	movff	Get_Variables@data+4,set_PID_Kp@val+2
 16924  0073EA  EC9C  F028         	call	_set_PID_Kp	;wreg free
 16925                           
 16926                           ;InitVariables.c: 21: set_PID_Ki(data.ti);
 16927  0073EE  C065  F019         	movff	Get_Variables@data+5,set_PID_Ki@val
 16928  0073F2  C066  F01A         	movff	Get_Variables@data+6,set_PID_Ki@val+1
 16929  0073F6  C067  F01B         	movff	Get_Variables@data+7,set_PID_Ki@val+2
 16930  0073FA  EC9D  F026         	call	_set_PID_Ki	;wreg free
 16931                           
 16932                           ;InitVariables.c: 22: set_PID_Kd(data.td);
 16933  0073FE  C068  F019         	movff	Get_Variables@data+8,set_PID_Kd@val
 16934  007402  C069  F01A         	movff	Get_Variables@data+9,set_PID_Kd@val+1
 16935  007406  C06A  F01B         	movff	Get_Variables@data+10,set_PID_Kd@val+2
 16936  00740A  EC94  F026         	call	_set_PID_Kd	;wreg free
 16937                           
 16938                           ;InitVariables.c: 23: set_PID_T(data.T_sample);
 16939  00740E  C06B  F019         	movff	Get_Variables@data+11,set_PID_T@val
 16940  007412  C06C  F01A         	movff	Get_Variables@data+12,set_PID_T@val+1
 16941  007416  C06D  F01B         	movff	Get_Variables@data+13,set_PID_T@val+2
 16942  00741A  ECA6  F026         	call	_set_PID_T	;wreg free
 16943                           
 16944                           ;InitVariables.c: 24: set_PID_setpoint(data.set_point);
 16945  00741E  C06E  F019         	movff	Get_Variables@data+14,set_PID_setpoint@val
 16946  007422  C06F  F01A         	movff	Get_Variables@data+15,set_PID_setpoint@val+1
 16947  007426  C070  F01B         	movff	Get_Variables@data+16,set_PID_setpoint@val+2
 16948  00742A  ECAF  F026         	call	_set_PID_setpoint	;wreg free
 16949                           
 16950                           ;InitVariables.c: 25: set_Deadband(data.deadband);
 16951  00742E  C071  F019         	movff	Get_Variables@data+17,set_Deadband@val
 16952  007432  C072  F01A         	movff	Get_Variables@data+18,set_Deadband@val+1
 16953  007436  C073  F01B         	movff	Get_Variables@data+19,set_Deadband@val+2
 16954  00743A  EC8B  F026         	call	_set_Deadband	;wreg free
 16955                           
 16956                           ;InitVariables.c: 26: Set_LP_RC_constant(data.RC_Constant);
 16957  00743E  C074  F019         	movff	Get_Variables@data+20,Set_LP_RC_constant@val
 16958  007442  C075  F01A         	movff	Get_Variables@data+21,Set_LP_RC_constant@val+1
 16959  007446  C076  F01B         	movff	Get_Variables@data+22,Set_LP_RC_constant@val+2
 16960  00744A  EC82  F026         	call	_Set_LP_RC_constant	;wreg free
 16961                           
 16962                           ;InitVariables.c: 27: set_max_VL(data.max_VL);
 16963  00744E  C077  F019         	movff	Get_Variables@data+23,set_max_VL@val
 16964  007452  C078  F01A         	movff	Get_Variables@data+24,set_max_VL@val+1
 16965  007456  C079  F01B         	movff	Get_Variables@data+25,set_max_VL@val+2
 16966  00745A  EC00  F027         	call	_set_max_VL	;wreg free
 16967                           
 16968                           ;InitVariables.c: 28: set_min_VL(data.min_VL);
 16969  00745E  C07A  F019         	movff	Get_Variables@data+26,set_min_VL@val
 16970  007462  C07B  F01A         	movff	Get_Variables@data+27,set_min_VL@val+1
 16971  007466  C07C  F01B         	movff	Get_Variables@data+28,set_min_VL@val+2
 16972  00746A  EC09  F027         	call	_set_min_VL	;wreg free
 16973                           
 16974                           ;InitVariables.c: 29: set_VL1_zero(data.V1_zero);
 16975  00746E  C07D  F019         	movff	Get_Variables@data+29,set_VL1_zero@val
 16976  007472  C07E  F01A         	movff	Get_Variables@data+30,set_VL1_zero@val+1
 16977  007476  C07F  F01B         	movff	Get_Variables@data+31,set_VL1_zero@val+2
 16978  00747A  ECC1  F026         	call	_set_VL1_zero	;wreg free
 16979                           
 16980                           ;InitVariables.c: 30: set_VL2_zero(data.V2_zero);
 16981  00747E  C080  F019         	movff	Get_Variables@data+32,set_VL2_zero@val
 16982  007482  C081  F01A         	movff	Get_Variables@data+33,set_VL2_zero@val+1
 16983  007486  C082  F01B         	movff	Get_Variables@data+34,set_VL2_zero@val+2
 16984  00748A  ECD3  F026         	call	_set_VL2_zero	;wreg free
 16985                           
 16986                           ;InitVariables.c: 31: set_VL3_zero(data.V3_zero);
 16987  00748E  C083  F019         	movff	Get_Variables@data+35,set_VL3_zero@val
 16988  007492  C084  F01A         	movff	Get_Variables@data+36,set_VL3_zero@val+1
 16989  007496  C085  F01B         	movff	Get_Variables@data+37,set_VL3_zero@val+2
 16990  00749A  ECE5  F026         	call	_set_VL3_zero	;wreg free
 16991                           
 16992                           ;InitVariables.c: 32: set_VL1_span(data.V1_span);
 16993  00749E  C086  F019         	movff	Get_Variables@data+38,set_VL1_span@val
 16994  0074A2  C087  F01A         	movff	Get_Variables@data+39,set_VL1_span@val+1
 16995  0074A6  C088  F01B         	movff	Get_Variables@data+40,set_VL1_span@val+2
 16996  0074AA  ECB8  F026         	call	_set_VL1_span	;wreg free
 16997                           
 16998                           ;InitVariables.c: 33: set_VL2_span(data.V2_span);
 16999  0074AE  C089  F019         	movff	Get_Variables@data+41,set_VL2_span@val
 17000  0074B2  C08A  F01A         	movff	Get_Variables@data+42,set_VL2_span@val+1
 17001  0074B6  C08B  F01B         	movff	Get_Variables@data+43,set_VL2_span@val+2
 17002  0074BA  ECCA  F026         	call	_set_VL2_span	;wreg free
 17003                           
 17004                           ;InitVariables.c: 34: set_VL3_span(data.V3_span);
 17005  0074BE  C08C  F019         	movff	Get_Variables@data+44,set_VL3_span@val
 17006  0074C2  C08D  F01A         	movff	Get_Variables@data+45,set_VL3_span@val+1
 17007  0074C6  C08E  F01B         	movff	Get_Variables@data+46,set_VL3_span@val+2
 17008  0074CA  ECDC  F026         	call	_set_VL3_span	;wreg free
 17009                           
 17010                           ;InitVariables.c: 35: set_Vin_zero(data.Vin_zero);
 17011  0074CE  C08F  F019         	movff	Get_Variables@data+47,set_Vin_zero@val
 17012  0074D2  C090  F01A         	movff	Get_Variables@data+48,set_Vin_zero@val+1
 17013  0074D6  C091  F01B         	movff	Get_Variables@data+49,set_Vin_zero@val+2
 17014  0074DA  ECF7  F026         	call	_set_Vin_zero	;wreg free
 17015                           
 17016                           ;InitVariables.c: 36: set_Vin_span(data.Vin_span);
 17017  0074DE  C092  F019         	movff	Get_Variables@data+50,set_Vin_span@val
 17018  0074E2  C093  F01A         	movff	Get_Variables@data+51,set_Vin_span@val+1
 17019  0074E6  C094  F01B         	movff	Get_Variables@data+52,set_Vin_span@val+2
 17020  0074EA  ECEE  F026         	call	_set_Vin_span	;wreg free
 17021                           
 17022                           ;InitVariables.c: 38: return data.code;
 17023  0074EE  C060  F01F         	movff	Get_Variables@data,?_Get_Variables
 17024  0074F2  C061  F020         	movff	Get_Variables@data+1,?_Get_Variables+1
 17025  0074F6  0012               	return		;funcret
 17026  0074F8  FFFF               	dw	65535	; errata NOP
 17027  0074FA                     __end_of_Get_Variables:
 17028                           	opt stack 0
 17029                           tblptru	equ	0xFF8
 17030                           tblptrh	equ	0xFF7
 17031                           tblptrl	equ	0xFF6
 17032                           tablat	equ	0xFF5
 17033                           prodl	equ	0xFF3
 17034                           intcon	equ	0xFF2
 17035                           postinc0	equ	0xFEE
 17036                           wreg	equ	0xFE8
 17037                           indf2	equ	0xFDF
 17038                           postinc2	equ	0xFDE
 17039                           postdec2	equ	0xFDD
 17040                           plusw2	equ	0xFDB
 17041                           fsr2h	equ	0xFDA
 17042                           fsr2l	equ	0xFD9
 17043                           status	equ	0xFD8
 17044                           
 17045 ;; *************** function _set_min_VL *****************
 17046 ;; Defined at:
 17047 ;;		line 109 in file "Get_Voltages.c"
 17048 ;; Parameters:    Size  Location     Type
 17049 ;;  val             3   24[COMRAM] float 
 17050 ;; Auto vars:     Size  Location     Type
 17051 ;;		None
 17052 ;; Return value:  Size  Location     Type
 17053 ;;                  1    wreg      void 
 17054 ;; Registers used:
 17055 ;;		None
 17056 ;; Tracked objects:
 17057 ;;		On entry : 0/0
 17058 ;;		On exit  : 0/0
 17059 ;;		Unchanged: 0/0
 17060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17061 ;;      Params:         3       0       0       0       0       0       0
 17062 ;;      Locals:         0       0       0       0       0       0       0
 17063 ;;      Temps:          0       0       0       0       0       0       0
 17064 ;;      Totals:         3       0       0       0       0       0       0
 17065 ;;Total ram usage:        3 bytes
 17066 ;; Hardware stack levels used:    1
 17067 ;; Hardware stack levels required when called:    1
 17068 ;; This function calls:
 17069 ;;		Nothing
 17070 ;; This function is called by:
 17071 ;;		_set_list
 17072 ;;		_Get_Variables
 17073 ;;		_main
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           	psect	text98
 17078  004E12                     __ptext98:
 17079                           	opt stack 0
 17080  004E12                     _set_min_VL:
 17081                           	opt stack 0
 17082  004E12  FFFF               	dw	65535	; assembler added errata NOP
 17083                           
 17084                           ;Get_Voltages.c: 110: VL_min=val;
 17085                           
 17086                           ;incstack = 0
 17087  004E14  C019  F125         	movff	set_min_VL@val,_VL_min
 17088  004E18  C01A  F126         	movff	set_min_VL@val+1,_VL_min+1
 17089  004E1C  C01B  F127         	movff	set_min_VL@val+2,_VL_min+2
 17090  004E20  0012               	return		;funcret
 17091  004E22  FFFF               	dw	65535	; errata NOP
 17092  004E24                     __end_of_set_min_VL:
 17093                           	opt stack 0
 17094                           tblptru	equ	0xFF8
 17095                           tblptrh	equ	0xFF7
 17096                           tblptrl	equ	0xFF6
 17097                           tablat	equ	0xFF5
 17098                           prodl	equ	0xFF3
 17099                           intcon	equ	0xFF2
 17100                           postinc0	equ	0xFEE
 17101                           wreg	equ	0xFE8
 17102                           indf2	equ	0xFDF
 17103                           postinc2	equ	0xFDE
 17104                           postdec2	equ	0xFDD
 17105                           plusw2	equ	0xFDB
 17106                           fsr2h	equ	0xFDA
 17107                           fsr2l	equ	0xFD9
 17108                           status	equ	0xFD8
 17109                           
 17110 ;; *************** function _set_max_VL *****************
 17111 ;; Defined at:
 17112 ;;		line 105 in file "Get_Voltages.c"
 17113 ;; Parameters:    Size  Location     Type
 17114 ;;  val             3   24[COMRAM] float 
 17115 ;; Auto vars:     Size  Location     Type
 17116 ;;		None
 17117 ;; Return value:  Size  Location     Type
 17118 ;;                  1    wreg      void 
 17119 ;; Registers used:
 17120 ;;		None
 17121 ;; Tracked objects:
 17122 ;;		On entry : 0/0
 17123 ;;		On exit  : 0/0
 17124 ;;		Unchanged: 0/0
 17125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17126 ;;      Params:         3       0       0       0       0       0       0
 17127 ;;      Locals:         0       0       0       0       0       0       0
 17128 ;;      Temps:          0       0       0       0       0       0       0
 17129 ;;      Totals:         3       0       0       0       0       0       0
 17130 ;;Total ram usage:        3 bytes
 17131 ;; Hardware stack levels used:    1
 17132 ;; Hardware stack levels required when called:    1
 17133 ;; This function calls:
 17134 ;;		Nothing
 17135 ;; This function is called by:
 17136 ;;		_set_list
 17137 ;;		_Get_Variables
 17138 ;;		_main
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           	psect	text99
 17143  004E00                     __ptext99:
 17144                           	opt stack 0
 17145  004E00                     _set_max_VL:
 17146                           	opt stack 0
 17147  004E00  FFFF               	dw	65535	; assembler added errata NOP
 17148                           
 17149                           ;Get_Voltages.c: 106: VL_max=val;
 17150                           
 17151                           ;incstack = 0
 17152  004E02  C019  F128         	movff	set_max_VL@val,_VL_max
 17153  004E06  C01A  F129         	movff	set_max_VL@val+1,_VL_max+1
 17154  004E0A  C01B  F12A         	movff	set_max_VL@val+2,_VL_max+2
 17155  004E0E  0012               	return		;funcret
 17156  004E10  FFFF               	dw	65535	; errata NOP
 17157  004E12                     __end_of_set_max_VL:
 17158                           	opt stack 0
 17159                           tblptru	equ	0xFF8
 17160                           tblptrh	equ	0xFF7
 17161                           tblptrl	equ	0xFF6
 17162                           tablat	equ	0xFF5
 17163                           prodl	equ	0xFF3
 17164                           intcon	equ	0xFF2
 17165                           postinc0	equ	0xFEE
 17166                           wreg	equ	0xFE8
 17167                           indf2	equ	0xFDF
 17168                           postinc2	equ	0xFDE
 17169                           postdec2	equ	0xFDD
 17170                           plusw2	equ	0xFDB
 17171                           fsr2h	equ	0xFDA
 17172                           fsr2l	equ	0xFD9
 17173                           status	equ	0xFD8
 17174                           
 17175 ;; *************** function _set_Vin_zero *****************
 17176 ;; Defined at:
 17177 ;;		line 72 in file "Get_Voltages.c"
 17178 ;; Parameters:    Size  Location     Type
 17179 ;;  val             3   24[COMRAM] float 
 17180 ;; Auto vars:     Size  Location     Type
 17181 ;;		None
 17182 ;; Return value:  Size  Location     Type
 17183 ;;                  1    wreg      void 
 17184 ;; Registers used:
 17185 ;;		None
 17186 ;; Tracked objects:
 17187 ;;		On entry : 0/0
 17188 ;;		On exit  : 0/0
 17189 ;;		Unchanged: 0/0
 17190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17191 ;;      Params:         3       0       0       0       0       0       0
 17192 ;;      Locals:         0       0       0       0       0       0       0
 17193 ;;      Temps:          0       0       0       0       0       0       0
 17194 ;;      Totals:         3       0       0       0       0       0       0
 17195 ;;Total ram usage:        3 bytes
 17196 ;; Hardware stack levels used:    1
 17197 ;; Hardware stack levels required when called:    1
 17198 ;; This function calls:
 17199 ;;		Nothing
 17200 ;; This function is called by:
 17201 ;;		_cal_analog
 17202 ;;		_Get_Variables
 17203 ;;		_main
 17204 ;; This function uses a non-reentrant model
 17205 ;;
 17206                           
 17207                           	psect	text100
 17208  004DEE                     __ptext100:
 17209                           	opt stack 0
 17210  004DEE                     _set_Vin_zero:
 17211                           	opt stack 0
 17212  004DEE  FFFF               	dw	65535	; assembler added errata NOP
 17213                           
 17214                           ;Get_Voltages.c: 73: Vin_zero=val;
 17215                           
 17216                           ;incstack = 0
 17217  004DF0  C019  F137         	movff	set_Vin_zero@val,_Vin_zero
 17218  004DF4  C01A  F138         	movff	set_Vin_zero@val+1,_Vin_zero+1
 17219  004DF8  C01B  F139         	movff	set_Vin_zero@val+2,_Vin_zero+2
 17220  004DFC  0012               	return		;funcret
 17221  004DFE  FFFF               	dw	65535	; errata NOP
 17222  004E00                     __end_of_set_Vin_zero:
 17223                           	opt stack 0
 17224                           tblptru	equ	0xFF8
 17225                           tblptrh	equ	0xFF7
 17226                           tblptrl	equ	0xFF6
 17227                           tablat	equ	0xFF5
 17228                           prodl	equ	0xFF3
 17229                           intcon	equ	0xFF2
 17230                           postinc0	equ	0xFEE
 17231                           wreg	equ	0xFE8
 17232                           indf2	equ	0xFDF
 17233                           postinc2	equ	0xFDE
 17234                           postdec2	equ	0xFDD
 17235                           plusw2	equ	0xFDB
 17236                           fsr2h	equ	0xFDA
 17237                           fsr2l	equ	0xFD9
 17238                           status	equ	0xFD8
 17239                           
 17240 ;; *************** function _set_Vin_span *****************
 17241 ;; Defined at:
 17242 ;;		line 86 in file "Get_Voltages.c"
 17243 ;; Parameters:    Size  Location     Type
 17244 ;;  val             3   24[COMRAM] float 
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;		None
 17247 ;; Return value:  Size  Location     Type
 17248 ;;                  1    wreg      void 
 17249 ;; Registers used:
 17250 ;;		None
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17256 ;;      Params:         3       0       0       0       0       0       0
 17257 ;;      Locals:         0       0       0       0       0       0       0
 17258 ;;      Temps:          0       0       0       0       0       0       0
 17259 ;;      Totals:         3       0       0       0       0       0       0
 17260 ;;Total ram usage:        3 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; Hardware stack levels required when called:    1
 17263 ;; This function calls:
 17264 ;;		Nothing
 17265 ;; This function is called by:
 17266 ;;		_cal_analog
 17267 ;;		_Get_Variables
 17268 ;;		_main
 17269 ;; This function uses a non-reentrant model
 17270 ;;
 17271                           
 17272                           	psect	text101
 17273  004DDC                     __ptext101:
 17274                           	opt stack 0
 17275  004DDC                     _set_Vin_span:
 17276                           	opt stack 0
 17277  004DDC  FFFF               	dw	65535	; assembler added errata NOP
 17278                           
 17279                           ;Get_Voltages.c: 87: Vin_Span=val;
 17280                           
 17281                           ;incstack = 0
 17282  004DDE  C019  F12B         	movff	set_Vin_span@val,_Vin_Span
 17283  004DE2  C01A  F12C         	movff	set_Vin_span@val+1,_Vin_Span+1
 17284  004DE6  C01B  F12D         	movff	set_Vin_span@val+2,_Vin_Span+2
 17285  004DEA  0012               	return		;funcret
 17286  004DEC  FFFF               	dw	65535	; errata NOP
 17287  004DEE                     __end_of_set_Vin_span:
 17288                           	opt stack 0
 17289                           tblptru	equ	0xFF8
 17290                           tblptrh	equ	0xFF7
 17291                           tblptrl	equ	0xFF6
 17292                           tablat	equ	0xFF5
 17293                           prodl	equ	0xFF3
 17294                           intcon	equ	0xFF2
 17295                           postinc0	equ	0xFEE
 17296                           wreg	equ	0xFE8
 17297                           indf2	equ	0xFDF
 17298                           postinc2	equ	0xFDE
 17299                           postdec2	equ	0xFDD
 17300                           plusw2	equ	0xFDB
 17301                           fsr2h	equ	0xFDA
 17302                           fsr2l	equ	0xFD9
 17303                           status	equ	0xFD8
 17304                           
 17305 ;; *************** function _set_VL3_zero *****************
 17306 ;; Defined at:
 17307 ;;		line 69 in file "Get_Voltages.c"
 17308 ;; Parameters:    Size  Location     Type
 17309 ;;  val             3   24[COMRAM] float 
 17310 ;; Auto vars:     Size  Location     Type
 17311 ;;		None
 17312 ;; Return value:  Size  Location     Type
 17313 ;;                  1    wreg      void 
 17314 ;; Registers used:
 17315 ;;		None
 17316 ;; Tracked objects:
 17317 ;;		On entry : 0/0
 17318 ;;		On exit  : 0/0
 17319 ;;		Unchanged: 0/0
 17320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17321 ;;      Params:         3       0       0       0       0       0       0
 17322 ;;      Locals:         0       0       0       0       0       0       0
 17323 ;;      Temps:          0       0       0       0       0       0       0
 17324 ;;      Totals:         3       0       0       0       0       0       0
 17325 ;;Total ram usage:        3 bytes
 17326 ;; Hardware stack levels used:    1
 17327 ;; Hardware stack levels required when called:    1
 17328 ;; This function calls:
 17329 ;;		Nothing
 17330 ;; This function is called by:
 17331 ;;		_cal_analog
 17332 ;;		_Get_Variables
 17333 ;;		_main
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           	psect	text102
 17338  004DCA                     __ptext102:
 17339                           	opt stack 0
 17340  004DCA                     _set_VL3_zero:
 17341                           	opt stack 0
 17342  004DCA  FFFF               	dw	65535	; assembler added errata NOP
 17343                           
 17344                           ;Get_Voltages.c: 70: VL3_zero=val;
 17345                           
 17346                           ;incstack = 0
 17347  004DCC  C019  F13A         	movff	set_VL3_zero@val,_VL3_zero
 17348  004DD0  C01A  F13B         	movff	set_VL3_zero@val+1,_VL3_zero+1
 17349  004DD4  C01B  F13C         	movff	set_VL3_zero@val+2,_VL3_zero+2
 17350  004DD8  0012               	return		;funcret
 17351  004DDA  FFFF               	dw	65535	; errata NOP
 17352  004DDC                     __end_of_set_VL3_zero:
 17353                           	opt stack 0
 17354                           tblptru	equ	0xFF8
 17355                           tblptrh	equ	0xFF7
 17356                           tblptrl	equ	0xFF6
 17357                           tablat	equ	0xFF5
 17358                           prodl	equ	0xFF3
 17359                           intcon	equ	0xFF2
 17360                           postinc0	equ	0xFEE
 17361                           wreg	equ	0xFE8
 17362                           indf2	equ	0xFDF
 17363                           postinc2	equ	0xFDE
 17364                           postdec2	equ	0xFDD
 17365                           plusw2	equ	0xFDB
 17366                           fsr2h	equ	0xFDA
 17367                           fsr2l	equ	0xFD9
 17368                           status	equ	0xFD8
 17369                           
 17370 ;; *************** function _set_VL3_span *****************
 17371 ;; Defined at:
 17372 ;;		line 83 in file "Get_Voltages.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;  val             3   24[COMRAM] float 
 17375 ;; Auto vars:     Size  Location     Type
 17376 ;;		None
 17377 ;; Return value:  Size  Location     Type
 17378 ;;                  1    wreg      void 
 17379 ;; Registers used:
 17380 ;;		None
 17381 ;; Tracked objects:
 17382 ;;		On entry : 0/0
 17383 ;;		On exit  : 0/0
 17384 ;;		Unchanged: 0/0
 17385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17386 ;;      Params:         3       0       0       0       0       0       0
 17387 ;;      Locals:         0       0       0       0       0       0       0
 17388 ;;      Temps:          0       0       0       0       0       0       0
 17389 ;;      Totals:         3       0       0       0       0       0       0
 17390 ;;Total ram usage:        3 bytes
 17391 ;; Hardware stack levels used:    1
 17392 ;; Hardware stack levels required when called:    1
 17393 ;; This function calls:
 17394 ;;		Nothing
 17395 ;; This function is called by:
 17396 ;;		_cal_analog
 17397 ;;		_Get_Variables
 17398 ;;		_main
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           	psect	text103
 17403  004DB8                     __ptext103:
 17404                           	opt stack 0
 17405  004DB8                     _set_VL3_span:
 17406                           	opt stack 0
 17407  004DB8  FFFF               	dw	65535	; assembler added errata NOP
 17408                           
 17409                           ;Get_Voltages.c: 84: VL3_span=val;
 17410                           
 17411                           ;incstack = 0
 17412  004DBA  C019  F12E         	movff	set_VL3_span@val,_VL3_span
 17413  004DBE  C01A  F12F         	movff	set_VL3_span@val+1,_VL3_span+1
 17414  004DC2  C01B  F130         	movff	set_VL3_span@val+2,_VL3_span+2
 17415  004DC6  0012               	return		;funcret
 17416  004DC8  FFFF               	dw	65535	; errata NOP
 17417  004DCA                     __end_of_set_VL3_span:
 17418                           	opt stack 0
 17419                           tblptru	equ	0xFF8
 17420                           tblptrh	equ	0xFF7
 17421                           tblptrl	equ	0xFF6
 17422                           tablat	equ	0xFF5
 17423                           prodl	equ	0xFF3
 17424                           intcon	equ	0xFF2
 17425                           postinc0	equ	0xFEE
 17426                           wreg	equ	0xFE8
 17427                           indf2	equ	0xFDF
 17428                           postinc2	equ	0xFDE
 17429                           postdec2	equ	0xFDD
 17430                           plusw2	equ	0xFDB
 17431                           fsr2h	equ	0xFDA
 17432                           fsr2l	equ	0xFD9
 17433                           status	equ	0xFD8
 17434                           
 17435 ;; *************** function _set_VL2_zero *****************
 17436 ;; Defined at:
 17437 ;;		line 65 in file "Get_Voltages.c"
 17438 ;; Parameters:    Size  Location     Type
 17439 ;;  val             3   24[COMRAM] float 
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;		None
 17442 ;; Return value:  Size  Location     Type
 17443 ;;                  1    wreg      void 
 17444 ;; Registers used:
 17445 ;;		None
 17446 ;; Tracked objects:
 17447 ;;		On entry : 0/0
 17448 ;;		On exit  : 0/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17451 ;;      Params:         3       0       0       0       0       0       0
 17452 ;;      Locals:         0       0       0       0       0       0       0
 17453 ;;      Temps:          0       0       0       0       0       0       0
 17454 ;;      Totals:         3       0       0       0       0       0       0
 17455 ;;Total ram usage:        3 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; Hardware stack levels required when called:    1
 17458 ;; This function calls:
 17459 ;;		Nothing
 17460 ;; This function is called by:
 17461 ;;		_cal_analog
 17462 ;;		_Get_Variables
 17463 ;;		_main
 17464 ;; This function uses a non-reentrant model
 17465 ;;
 17466                           
 17467                           	psect	text104
 17468  004DA6                     __ptext104:
 17469                           	opt stack 0
 17470  004DA6                     _set_VL2_zero:
 17471                           	opt stack 0
 17472  004DA6  FFFF               	dw	65535	; assembler added errata NOP
 17473                           
 17474                           ;Get_Voltages.c: 66: VL2_zero=val;
 17475                           
 17476                           ;incstack = 0
 17477  004DA8  C019  F13D         	movff	set_VL2_zero@val,_VL2_zero
 17478  004DAC  C01A  F13E         	movff	set_VL2_zero@val+1,_VL2_zero+1
 17479  004DB0  C01B  F13F         	movff	set_VL2_zero@val+2,_VL2_zero+2
 17480  004DB4  0012               	return		;funcret
 17481  004DB6  FFFF               	dw	65535	; errata NOP
 17482  004DB8                     __end_of_set_VL2_zero:
 17483                           	opt stack 0
 17484                           tblptru	equ	0xFF8
 17485                           tblptrh	equ	0xFF7
 17486                           tblptrl	equ	0xFF6
 17487                           tablat	equ	0xFF5
 17488                           prodl	equ	0xFF3
 17489                           intcon	equ	0xFF2
 17490                           postinc0	equ	0xFEE
 17491                           wreg	equ	0xFE8
 17492                           indf2	equ	0xFDF
 17493                           postinc2	equ	0xFDE
 17494                           postdec2	equ	0xFDD
 17495                           plusw2	equ	0xFDB
 17496                           fsr2h	equ	0xFDA
 17497                           fsr2l	equ	0xFD9
 17498                           status	equ	0xFD8
 17499                           
 17500 ;; *************** function _set_VL2_span *****************
 17501 ;; Defined at:
 17502 ;;		line 79 in file "Get_Voltages.c"
 17503 ;; Parameters:    Size  Location     Type
 17504 ;;  val             3   24[COMRAM] float 
 17505 ;; Auto vars:     Size  Location     Type
 17506 ;;		None
 17507 ;; Return value:  Size  Location     Type
 17508 ;;                  1    wreg      void 
 17509 ;; Registers used:
 17510 ;;		None
 17511 ;; Tracked objects:
 17512 ;;		On entry : 0/0
 17513 ;;		On exit  : 0/0
 17514 ;;		Unchanged: 0/0
 17515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17516 ;;      Params:         3       0       0       0       0       0       0
 17517 ;;      Locals:         0       0       0       0       0       0       0
 17518 ;;      Temps:          0       0       0       0       0       0       0
 17519 ;;      Totals:         3       0       0       0       0       0       0
 17520 ;;Total ram usage:        3 bytes
 17521 ;; Hardware stack levels used:    1
 17522 ;; Hardware stack levels required when called:    1
 17523 ;; This function calls:
 17524 ;;		Nothing
 17525 ;; This function is called by:
 17526 ;;		_cal_analog
 17527 ;;		_Get_Variables
 17528 ;;		_main
 17529 ;; This function uses a non-reentrant model
 17530 ;;
 17531                           
 17532                           	psect	text105
 17533  004D94                     __ptext105:
 17534                           	opt stack 0
 17535  004D94                     _set_VL2_span:
 17536                           	opt stack 0
 17537  004D94  FFFF               	dw	65535	; assembler added errata NOP
 17538                           
 17539                           ;Get_Voltages.c: 80: VL2_span=val;
 17540                           
 17541                           ;incstack = 0
 17542  004D96  C019  F131         	movff	set_VL2_span@val,_VL2_span
 17543  004D9A  C01A  F132         	movff	set_VL2_span@val+1,_VL2_span+1
 17544  004D9E  C01B  F133         	movff	set_VL2_span@val+2,_VL2_span+2
 17545  004DA2  0012               	return		;funcret
 17546  004DA4  FFFF               	dw	65535	; errata NOP
 17547  004DA6                     __end_of_set_VL2_span:
 17548                           	opt stack 0
 17549                           tblptru	equ	0xFF8
 17550                           tblptrh	equ	0xFF7
 17551                           tblptrl	equ	0xFF6
 17552                           tablat	equ	0xFF5
 17553                           prodl	equ	0xFF3
 17554                           intcon	equ	0xFF2
 17555                           postinc0	equ	0xFEE
 17556                           wreg	equ	0xFE8
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           plusw2	equ	0xFDB
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function _set_VL1_zero *****************
 17566 ;; Defined at:
 17567 ;;		line 61 in file "Get_Voltages.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  val             3   24[COMRAM] float 
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;		None
 17572 ;; Return value:  Size  Location     Type
 17573 ;;                  1    wreg      void 
 17574 ;; Registers used:
 17575 ;;		None
 17576 ;; Tracked objects:
 17577 ;;		On entry : 0/0
 17578 ;;		On exit  : 0/0
 17579 ;;		Unchanged: 0/0
 17580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17581 ;;      Params:         3       0       0       0       0       0       0
 17582 ;;      Locals:         0       0       0       0       0       0       0
 17583 ;;      Temps:          0       0       0       0       0       0       0
 17584 ;;      Totals:         3       0       0       0       0       0       0
 17585 ;;Total ram usage:        3 bytes
 17586 ;; Hardware stack levels used:    1
 17587 ;; Hardware stack levels required when called:    1
 17588 ;; This function calls:
 17589 ;;		Nothing
 17590 ;; This function is called by:
 17591 ;;		_cal_analog
 17592 ;;		_Get_Variables
 17593 ;;		_main
 17594 ;; This function uses a non-reentrant model
 17595 ;;
 17596                           
 17597                           	psect	text106
 17598  004D82                     __ptext106:
 17599                           	opt stack 0
 17600  004D82                     _set_VL1_zero:
 17601                           	opt stack 0
 17602  004D82  FFFF               	dw	65535	; assembler added errata NOP
 17603                           
 17604                           ;Get_Voltages.c: 62: VL1_zero=val;
 17605                           
 17606                           ;incstack = 0
 17607  004D84  C019  F0F2         	movff	set_VL1_zero@val,_VL1_zero
 17608  004D88  C01A  F0F3         	movff	set_VL1_zero@val+1,_VL1_zero+1
 17609  004D8C  C01B  F0F4         	movff	set_VL1_zero@val+2,_VL1_zero+2
 17610  004D90  0012               	return		;funcret
 17611  004D92  FFFF               	dw	65535	; errata NOP
 17612  004D94                     __end_of_set_VL1_zero:
 17613                           	opt stack 0
 17614                           tblptru	equ	0xFF8
 17615                           tblptrh	equ	0xFF7
 17616                           tblptrl	equ	0xFF6
 17617                           tablat	equ	0xFF5
 17618                           prodl	equ	0xFF3
 17619                           intcon	equ	0xFF2
 17620                           postinc0	equ	0xFEE
 17621                           wreg	equ	0xFE8
 17622                           indf2	equ	0xFDF
 17623                           postinc2	equ	0xFDE
 17624                           postdec2	equ	0xFDD
 17625                           plusw2	equ	0xFDB
 17626                           fsr2h	equ	0xFDA
 17627                           fsr2l	equ	0xFD9
 17628                           status	equ	0xFD8
 17629                           
 17630 ;; *************** function _set_VL1_span *****************
 17631 ;; Defined at:
 17632 ;;		line 75 in file "Get_Voltages.c"
 17633 ;; Parameters:    Size  Location     Type
 17634 ;;  val             3   24[COMRAM] float 
 17635 ;; Auto vars:     Size  Location     Type
 17636 ;;		None
 17637 ;; Return value:  Size  Location     Type
 17638 ;;                  1    wreg      void 
 17639 ;; Registers used:
 17640 ;;		None
 17641 ;; Tracked objects:
 17642 ;;		On entry : 0/0
 17643 ;;		On exit  : 0/0
 17644 ;;		Unchanged: 0/0
 17645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17646 ;;      Params:         3       0       0       0       0       0       0
 17647 ;;      Locals:         0       0       0       0       0       0       0
 17648 ;;      Temps:          0       0       0       0       0       0       0
 17649 ;;      Totals:         3       0       0       0       0       0       0
 17650 ;;Total ram usage:        3 bytes
 17651 ;; Hardware stack levels used:    1
 17652 ;; Hardware stack levels required when called:    1
 17653 ;; This function calls:
 17654 ;;		Nothing
 17655 ;; This function is called by:
 17656 ;;		_cal_analog
 17657 ;;		_Get_Variables
 17658 ;;		_main
 17659 ;; This function uses a non-reentrant model
 17660 ;;
 17661                           
 17662                           	psect	text107
 17663  004D70                     __ptext107:
 17664                           	opt stack 0
 17665  004D70                     _set_VL1_span:
 17666                           	opt stack 0
 17667  004D70  FFFF               	dw	65535	; assembler added errata NOP
 17668                           
 17669                           ;Get_Voltages.c: 76: VL1_span=val;
 17670                           
 17671                           ;incstack = 0
 17672  004D72  C019  F134         	movff	set_VL1_span@val,_VL1_span
 17673  004D76  C01A  F135         	movff	set_VL1_span@val+1,_VL1_span+1
 17674  004D7A  C01B  F136         	movff	set_VL1_span@val+2,_VL1_span+2
 17675  004D7E  0012               	return		;funcret
 17676  004D80  FFFF               	dw	65535	; errata NOP
 17677  004D82                     __end_of_set_VL1_span:
 17678                           	opt stack 0
 17679                           tblptru	equ	0xFF8
 17680                           tblptrh	equ	0xFF7
 17681                           tblptrl	equ	0xFF6
 17682                           tablat	equ	0xFF5
 17683                           prodl	equ	0xFF3
 17684                           intcon	equ	0xFF2
 17685                           postinc0	equ	0xFEE
 17686                           wreg	equ	0xFE8
 17687                           indf2	equ	0xFDF
 17688                           postinc2	equ	0xFDE
 17689                           postdec2	equ	0xFDD
 17690                           plusw2	equ	0xFDB
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _set_PID_setpoint *****************
 17696 ;; Defined at:
 17697 ;;		line 113 in file "PID_Controller.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  val             3   24[COMRAM] float 
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;		None
 17702 ;; Return value:  Size  Location     Type
 17703 ;;                  1    wreg      void 
 17704 ;; Registers used:
 17705 ;;		None
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/0
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17711 ;;      Params:         3       0       0       0       0       0       0
 17712 ;;      Locals:         0       0       0       0       0       0       0
 17713 ;;      Temps:          0       0       0       0       0       0       0
 17714 ;;      Totals:         3       0       0       0       0       0       0
 17715 ;;Total ram usage:        3 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    1
 17718 ;; This function calls:
 17719 ;;		Nothing
 17720 ;; This function is called by:
 17721 ;;		_set_list
 17722 ;;		_Get_Variables
 17723 ;;		_main
 17724 ;; This function uses a non-reentrant model
 17725 ;;
 17726                           
 17727                           	psect	text108
 17728  004D5E                     __ptext108:
 17729                           	opt stack 0
 17730  004D5E                     _set_PID_setpoint:
 17731                           	opt stack 0
 17732  004D5E  FFFF               	dw	65535	; assembler added errata NOP
 17733                           
 17734                           ;PID_Controller.c: 114: setpoint=val;
 17735                           
 17736                           ;incstack = 0
 17737  004D60  C019  F107         	movff	set_PID_setpoint@val,_setpoint
 17738  004D64  C01A  F108         	movff	set_PID_setpoint@val+1,_setpoint+1
 17739  004D68  C01B  F109         	movff	set_PID_setpoint@val+2,_setpoint+2
 17740                           
 17741                           ;PID_Controller.c: 115: return;
 17742  004D6C  0012               	return		;funcret
 17743  004D6E  FFFF               	dw	65535	; errata NOP
 17744  004D70                     __end_of_set_PID_setpoint:
 17745                           	opt stack 0
 17746                           tblptru	equ	0xFF8
 17747                           tblptrh	equ	0xFF7
 17748                           tblptrl	equ	0xFF6
 17749                           tablat	equ	0xFF5
 17750                           prodl	equ	0xFF3
 17751                           intcon	equ	0xFF2
 17752                           postinc0	equ	0xFEE
 17753                           wreg	equ	0xFE8
 17754                           indf2	equ	0xFDF
 17755                           postinc2	equ	0xFDE
 17756                           postdec2	equ	0xFDD
 17757                           plusw2	equ	0xFDB
 17758                           fsr2h	equ	0xFDA
 17759                           fsr2l	equ	0xFD9
 17760                           status	equ	0xFD8
 17761                           
 17762 ;; *************** function _set_PID_T *****************
 17763 ;; Defined at:
 17764 ;;		line 107 in file "PID_Controller.c"
 17765 ;; Parameters:    Size  Location     Type
 17766 ;;  val             3   24[COMRAM] float 
 17767 ;; Auto vars:     Size  Location     Type
 17768 ;;		None
 17769 ;; Return value:  Size  Location     Type
 17770 ;;                  1    wreg      void 
 17771 ;; Registers used:
 17772 ;;		None
 17773 ;; Tracked objects:
 17774 ;;		On entry : 0/0
 17775 ;;		On exit  : 0/0
 17776 ;;		Unchanged: 0/0
 17777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17778 ;;      Params:         3       0       0       0       0       0       0
 17779 ;;      Locals:         0       0       0       0       0       0       0
 17780 ;;      Temps:          0       0       0       0       0       0       0
 17781 ;;      Totals:         3       0       0       0       0       0       0
 17782 ;;Total ram usage:        3 bytes
 17783 ;; Hardware stack levels used:    1
 17784 ;; Hardware stack levels required when called:    1
 17785 ;; This function calls:
 17786 ;;		Nothing
 17787 ;; This function is called by:
 17788 ;;		_set_list
 17789 ;;		_Get_Variables
 17790 ;;		_main
 17791 ;; This function uses a non-reentrant model
 17792 ;;
 17793                           
 17794                           	psect	text109
 17795  004D4C                     __ptext109:
 17796                           	opt stack 0
 17797  004D4C                     _set_PID_T:
 17798                           	opt stack 0
 17799  004D4C  FFFF               	dw	65535	; assembler added errata NOP
 17800                           
 17801                           ;PID_Controller.c: 108: T_sample=val;
 17802                           
 17803                           ;incstack = 0
 17804  004D4E  C019  F0EF         	movff	set_PID_T@val,_T_sample
 17805  004D52  C01A  F0F0         	movff	set_PID_T@val+1,_T_sample+1
 17806  004D56  C01B  F0F1         	movff	set_PID_T@val+2,_T_sample+2
 17807                           
 17808                           ;PID_Controller.c: 109: return;
 17809  004D5A  0012               	return		;funcret
 17810  004D5C  FFFF               	dw	65535	; errata NOP
 17811  004D5E                     __end_of_set_PID_T:
 17812                           	opt stack 0
 17813                           tblptru	equ	0xFF8
 17814                           tblptrh	equ	0xFF7
 17815                           tblptrl	equ	0xFF6
 17816                           tablat	equ	0xFF5
 17817                           prodl	equ	0xFF3
 17818                           intcon	equ	0xFF2
 17819                           postinc0	equ	0xFEE
 17820                           wreg	equ	0xFE8
 17821                           indf2	equ	0xFDF
 17822                           postinc2	equ	0xFDE
 17823                           postdec2	equ	0xFDD
 17824                           plusw2	equ	0xFDB
 17825                           fsr2h	equ	0xFDA
 17826                           fsr2l	equ	0xFD9
 17827                           status	equ	0xFD8
 17828                           
 17829 ;; *************** function _set_PID_Kp *****************
 17830 ;; Defined at:
 17831 ;;		line 88 in file "PID_Controller.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;  val             3   24[COMRAM] float 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;		None
 17836 ;; Return value:  Size  Location     Type
 17837 ;;                  1    wreg      void 
 17838 ;; Registers used:
 17839 ;;		wreg, status,2
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17845 ;;      Params:         3       0       0       0       0       0       0
 17846 ;;      Locals:         0       0       0       0       0       0       0
 17847 ;;      Temps:          0       0       0       0       0       0       0
 17848 ;;      Totals:         3       0       0       0       0       0       0
 17849 ;;Total ram usage:        3 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    1
 17852 ;; This function calls:
 17853 ;;		Nothing
 17854 ;; This function is called by:
 17855 ;;		_set_list
 17856 ;;		_Get_Variables
 17857 ;;		_main
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           	psect	text110
 17862  005138                     __ptext110:
 17863                           	opt stack 0
 17864  005138                     _set_PID_Kp:
 17865                           	opt stack 0
 17866  005138  FFFF               	dw	65535	; assembler added errata NOP
 17867                           
 17868                           ;PID_Controller.c: 89: Kp=val;
 17869                           
 17870                           ;incstack = 0
 17871  00513A  C019  F11C         	movff	set_PID_Kp@val,_Kp
 17872  00513E  C01A  F11D         	movff	set_PID_Kp@val+1,_Kp+1
 17873  005142  C01B  F11E         	movff	set_PID_Kp@val+2,_Kp+2
 17874                           
 17875                           ;PID_Controller.c: 90: last_integral=0.0;
 17876  005146  0E00               	movlw	0
 17877  005148  0101               	movlb	1	; () banked
 17878  00514A  6F0A               	movwf	_last_integral& (0+255),b
 17879  00514C  0E00               	movlw	0
 17880  00514E  0101               	movlb	1	; () banked
 17881  005150  6F0B               	movwf	(_last_integral+1)& (0+255),b
 17882  005152  0E00               	movlw	0
 17883  005154  0101               	movlb	1	; () banked
 17884  005156  6F0C               	movwf	(_last_integral+2)& (0+255),b
 17885                           
 17886                           ; BSR set to: 1
 17887                           
 17888                           ; BSR set to: 1
 17889                           ;PID_Controller.c: 91: return;
 17890  005158  0012               	return		;funcret
 17891  00515A  FFFF               	dw	65535	; errata NOP
 17892  00515C                     __end_of_set_PID_Kp:
 17893                           	opt stack 0
 17894                           tblptru	equ	0xFF8
 17895                           tblptrh	equ	0xFF7
 17896                           tblptrl	equ	0xFF6
 17897                           tablat	equ	0xFF5
 17898                           prodl	equ	0xFF3
 17899                           intcon	equ	0xFF2
 17900                           postinc0	equ	0xFEE
 17901                           wreg	equ	0xFE8
 17902                           indf2	equ	0xFDF
 17903                           postinc2	equ	0xFDE
 17904                           postdec2	equ	0xFDD
 17905                           plusw2	equ	0xFDB
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function _set_PID_Ki *****************
 17911 ;; Defined at:
 17912 ;;		line 95 in file "PID_Controller.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;  val             3   24[COMRAM] float 
 17915 ;; Auto vars:     Size  Location     Type
 17916 ;;		None
 17917 ;; Return value:  Size  Location     Type
 17918 ;;                  1    wreg      void 
 17919 ;; Registers used:
 17920 ;;		None
 17921 ;; Tracked objects:
 17922 ;;		On entry : 0/0
 17923 ;;		On exit  : 0/0
 17924 ;;		Unchanged: 0/0
 17925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17926 ;;      Params:         3       0       0       0       0       0       0
 17927 ;;      Locals:         0       0       0       0       0       0       0
 17928 ;;      Temps:          0       0       0       0       0       0       0
 17929 ;;      Totals:         3       0       0       0       0       0       0
 17930 ;;Total ram usage:        3 bytes
 17931 ;; Hardware stack levels used:    1
 17932 ;; Hardware stack levels required when called:    1
 17933 ;; This function calls:
 17934 ;;		Nothing
 17935 ;; This function is called by:
 17936 ;;		_set_list
 17937 ;;		_Get_Variables
 17938 ;;		_main
 17939 ;; This function uses a non-reentrant model
 17940 ;;
 17941                           
 17942                           	psect	text111
 17943  004D3A                     __ptext111:
 17944                           	opt stack 0
 17945  004D3A                     _set_PID_Ki:
 17946                           	opt stack 0
 17947  004D3A  FFFF               	dw	65535	; assembler added errata NOP
 17948                           
 17949                           ;PID_Controller.c: 96: ti=val;
 17950                           
 17951                           ; BSR set to: 1
 17952                           ;incstack = 0
 17953  004D3C  C019  F02F         	movff	set_PID_Ki@val,_ti
 17954  004D40  C01A  F030         	movff	set_PID_Ki@val+1,_ti+1
 17955  004D44  C01B  F031         	movff	set_PID_Ki@val+2,_ti+2
 17956                           
 17957                           ;PID_Controller.c: 97: return;
 17958  004D48  0012               	return		;funcret
 17959  004D4A  FFFF               	dw	65535	; errata NOP
 17960  004D4C                     __end_of_set_PID_Ki:
 17961                           	opt stack 0
 17962                           tblptru	equ	0xFF8
 17963                           tblptrh	equ	0xFF7
 17964                           tblptrl	equ	0xFF6
 17965                           tablat	equ	0xFF5
 17966                           prodl	equ	0xFF3
 17967                           intcon	equ	0xFF2
 17968                           postinc0	equ	0xFEE
 17969                           wreg	equ	0xFE8
 17970                           indf2	equ	0xFDF
 17971                           postinc2	equ	0xFDE
 17972                           postdec2	equ	0xFDD
 17973                           plusw2	equ	0xFDB
 17974                           fsr2h	equ	0xFDA
 17975                           fsr2l	equ	0xFD9
 17976                           status	equ	0xFD8
 17977                           
 17978 ;; *************** function _set_PID_Kd *****************
 17979 ;; Defined at:
 17980 ;;		line 101 in file "PID_Controller.c"
 17981 ;; Parameters:    Size  Location     Type
 17982 ;;  val             3   24[COMRAM] float 
 17983 ;; Auto vars:     Size  Location     Type
 17984 ;;		None
 17985 ;; Return value:  Size  Location     Type
 17986 ;;                  1    wreg      void 
 17987 ;; Registers used:
 17988 ;;		None
 17989 ;; Tracked objects:
 17990 ;;		On entry : 0/0
 17991 ;;		On exit  : 0/0
 17992 ;;		Unchanged: 0/0
 17993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17994 ;;      Params:         3       0       0       0       0       0       0
 17995 ;;      Locals:         0       0       0       0       0       0       0
 17996 ;;      Temps:          0       0       0       0       0       0       0
 17997 ;;      Totals:         3       0       0       0       0       0       0
 17998 ;;Total ram usage:        3 bytes
 17999 ;; Hardware stack levels used:    1
 18000 ;; Hardware stack levels required when called:    1
 18001 ;; This function calls:
 18002 ;;		Nothing
 18003 ;; This function is called by:
 18004 ;;		_set_list
 18005 ;;		_Get_Variables
 18006 ;;		_main
 18007 ;; This function uses a non-reentrant model
 18008 ;;
 18009                           
 18010                           	psect	text112
 18011  004D28                     __ptext112:
 18012                           	opt stack 0
 18013  004D28                     _set_PID_Kd:
 18014                           	opt stack 0
 18015  004D28  FFFF               	dw	65535	; assembler added errata NOP
 18016                           
 18017                           ;PID_Controller.c: 102: td=val;
 18018                           
 18019                           ;incstack = 0
 18020  004D2A  C019  F119         	movff	set_PID_Kd@val,_td
 18021  004D2E  C01A  F11A         	movff	set_PID_Kd@val+1,_td+1
 18022  004D32  C01B  F11B         	movff	set_PID_Kd@val+2,_td+2
 18023                           
 18024                           ;PID_Controller.c: 103: return;
 18025  004D36  0012               	return		;funcret
 18026  004D38  FFFF               	dw	65535	; errata NOP
 18027  004D3A                     __end_of_set_PID_Kd:
 18028                           	opt stack 0
 18029                           tblptru	equ	0xFF8
 18030                           tblptrh	equ	0xFF7
 18031                           tblptrl	equ	0xFF6
 18032                           tablat	equ	0xFF5
 18033                           prodl	equ	0xFF3
 18034                           intcon	equ	0xFF2
 18035                           postinc0	equ	0xFEE
 18036                           wreg	equ	0xFE8
 18037                           indf2	equ	0xFDF
 18038                           postinc2	equ	0xFDE
 18039                           postdec2	equ	0xFDD
 18040                           plusw2	equ	0xFDB
 18041                           fsr2h	equ	0xFDA
 18042                           fsr2l	equ	0xFD9
 18043                           status	equ	0xFD8
 18044                           
 18045 ;; *************** function _set_Deadband *****************
 18046 ;; Defined at:
 18047 ;;		line 82 in file "PID_Controller.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  val             3   24[COMRAM] float 
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;		None
 18052 ;; Return value:  Size  Location     Type
 18053 ;;                  1    wreg      void 
 18054 ;; Registers used:
 18055 ;;		None
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18061 ;;      Params:         3       0       0       0       0       0       0
 18062 ;;      Locals:         0       0       0       0       0       0       0
 18063 ;;      Temps:          0       0       0       0       0       0       0
 18064 ;;      Totals:         3       0       0       0       0       0       0
 18065 ;;Total ram usage:        3 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    1
 18068 ;; This function calls:
 18069 ;;		Nothing
 18070 ;; This function is called by:
 18071 ;;		_set_list
 18072 ;;		_Get_Variables
 18073 ;;		_main
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           	psect	text113
 18078  004D16                     __ptext113:
 18079                           	opt stack 0
 18080  004D16                     _set_Deadband:
 18081                           	opt stack 0
 18082  004D16  FFFF               	dw	65535	; assembler added errata NOP
 18083                           
 18084                           ;PID_Controller.c: 83: deadband=val;
 18085                           
 18086                           ;incstack = 0
 18087  004D18  C019  F104         	movff	set_Deadband@val,_deadband
 18088  004D1C  C01A  F105         	movff	set_Deadband@val+1,_deadband+1
 18089  004D20  C01B  F106         	movff	set_Deadband@val+2,_deadband+2
 18090  004D24  0012               	return		;funcret
 18091  004D26  FFFF               	dw	65535	; errata NOP
 18092  004D28                     __end_of_set_Deadband:
 18093                           	opt stack 0
 18094                           tblptru	equ	0xFF8
 18095                           tblptrh	equ	0xFF7
 18096                           tblptrl	equ	0xFF6
 18097                           tablat	equ	0xFF5
 18098                           prodl	equ	0xFF3
 18099                           intcon	equ	0xFF2
 18100                           postinc0	equ	0xFEE
 18101                           wreg	equ	0xFE8
 18102                           indf2	equ	0xFDF
 18103                           postinc2	equ	0xFDE
 18104                           postdec2	equ	0xFDD
 18105                           plusw2	equ	0xFDB
 18106                           fsr2h	equ	0xFDA
 18107                           fsr2l	equ	0xFD9
 18108                           status	equ	0xFD8
 18109                           
 18110 ;; *************** function _rd_string_EE *****************
 18111 ;; Defined at:
 18112 ;;		line 24 in file "EEprom.c"
 18113 ;; Parameters:    Size  Location     Type
 18114 ;;  addr            1    wreg     unsigned char 
 18115 ;;  lenght          1   25[COMRAM] unsigned char 
 18116 ;;  buffer          2   26[COMRAM] PTR unsigned char 
 18117 ;;		 -> Get_Variables@data(53), 
 18118 ;; Auto vars:     Size  Location     Type
 18119 ;;  addr            1   28[COMRAM] unsigned char 
 18120 ;;  i               1   29[COMRAM] unsigned char 
 18121 ;; Return value:  Size  Location     Type
 18122 ;;                  1    wreg      void 
 18123 ;; Registers used:
 18124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18125 ;; Tracked objects:
 18126 ;;		On entry : 0/0
 18127 ;;		On exit  : 0/0
 18128 ;;		Unchanged: 0/0
 18129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18130 ;;      Params:         3       0       0       0       0       0       0
 18131 ;;      Locals:         2       0       0       0       0       0       0
 18132 ;;      Temps:          0       0       0       0       0       0       0
 18133 ;;      Totals:         5       0       0       0       0       0       0
 18134 ;;Total ram usage:        5 bytes
 18135 ;; Hardware stack levels used:    1
 18136 ;; Hardware stack levels required when called:    2
 18137 ;; This function calls:
 18138 ;;		_rd_byte_EE
 18139 ;; This function is called by:
 18140 ;;		_Get_Variables
 18141 ;; This function uses a non-reentrant model
 18142 ;;
 18143                           
 18144                           	psect	text114
 18145  00535C                     __ptext114:
 18146                           	opt stack 0
 18147  00535C                     _rd_string_EE:
 18148                           	opt stack 0
 18149  00535C  FFFF               	dw	65535	; assembler added errata NOP
 18150                           
 18151                           ;incstack = 0
 18152                           ;rd_string_EE@addr stored from wreg
 18153  00535E  6E1D               	movwf	rd_string_EE@addr,c
 18154                           
 18155                           ;EEprom.c: 26: char i;
 18156                           ;EEprom.c: 28: for(i=0;i<lenght;i++)
 18157  005360  0E00               	movlw	0
 18158  005362  6E1E               	movwf	rd_string_EE@i,c
 18159  005364  D00D               	goto	l293
 18160  005366  FFFF               	dw	65535	; assembler added errata NOP
 18161                           
 18162                           ;EEprom.c: 29: *buffer++=rd_byte_EE(addr++);
 18163  005368  501D               	movf	rd_string_EE@addr,w,c
 18164  00536A  ECC7  F027         	call	_rd_byte_EE
 18165  00536E  C01B  FFD9         	movff	rd_string_EE@buffer,fsr2l
 18166  005372  C01C  FFDA         	movff	rd_string_EE@buffer+1,fsr2h
 18167  005376  6EDF               	movwf	indf2,c
 18168  005378  2A1D               	incf	rd_string_EE@addr,f,c
 18169  00537A  4A1B               	infsnz	rd_string_EE@buffer,f,c
 18170  00537C  2A1C               	incf	rd_string_EE@buffer+1,f,c
 18171  00537E  2A1E               	incf	rd_string_EE@i,f,c
 18172  005380                     l293:
 18173  005380  FFFF               	dw	65535	; assembler added errata NOP
 18174  005382  501A               	movf	rd_string_EE@lenght,w,c
 18175  005384  5C1E               	subwf	rd_string_EE@i,w,c
 18176  005386  B0D8               	btfsc	status,0,c
 18177  005388  0012               	return		;funcret
 18178  00538A  FFFF               	dw	65535	; assembler added errata NOP
 18179  00538C  D7EC               	goto	l294
 18180  00538E  FFFF               	dw	65535	; errata NOP
 18181  005390                     __end_of_rd_string_EE:
 18182                           	opt stack 0
 18183                           tblptru	equ	0xFF8
 18184                           tblptrh	equ	0xFF7
 18185                           tblptrl	equ	0xFF6
 18186                           tablat	equ	0xFF5
 18187                           prodl	equ	0xFF3
 18188                           intcon	equ	0xFF2
 18189                           postinc0	equ	0xFEE
 18190                           wreg	equ	0xFE8
 18191                           indf2	equ	0xFDF
 18192                           postinc2	equ	0xFDE
 18193                           postdec2	equ	0xFDD
 18194                           plusw2	equ	0xFDB
 18195                           fsr2h	equ	0xFDA
 18196                           fsr2l	equ	0xFD9
 18197                           status	equ	0xFD8
 18198                           
 18199 ;; *************** function _rd_byte_EE *****************
 18200 ;; Defined at:
 18201 ;;		line 34 in file "EEprom.c"
 18202 ;; Parameters:    Size  Location     Type
 18203 ;;  addr            1    wreg     unsigned char 
 18204 ;; Auto vars:     Size  Location     Type
 18205 ;;  addr            1   24[COMRAM] unsigned char 
 18206 ;; Return value:  Size  Location     Type
 18207 ;;                  1    wreg      unsigned char 
 18208 ;; Registers used:
 18209 ;;		wreg, status,2
 18210 ;; Tracked objects:
 18211 ;;		On entry : 0/0
 18212 ;;		On exit  : 0/0
 18213 ;;		Unchanged: 0/0
 18214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18215 ;;      Params:         0       0       0       0       0       0       0
 18216 ;;      Locals:         1       0       0       0       0       0       0
 18217 ;;      Temps:          0       0       0       0       0       0       0
 18218 ;;      Totals:         1       0       0       0       0       0       0
 18219 ;;Total ram usage:        1 bytes
 18220 ;; Hardware stack levels used:    1
 18221 ;; Hardware stack levels required when called:    1
 18222 ;; This function calls:
 18223 ;;		Nothing
 18224 ;; This function is called by:
 18225 ;;		_rd_string_EE
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text115
 18230  004F8E                     __ptext115:
 18231                           	opt stack 0
 18232  004F8E                     _rd_byte_EE:
 18233                           	opt stack 0
 18234  004F8E  FFFF               	dw	65535	; assembler added errata NOP
 18235                           
 18236                           ;incstack = 0
 18237                           ;rd_byte_EE@addr stored from wreg
 18238  004F90  6E19               	movwf	rd_byte_EE@addr,c
 18239                           
 18240                           ;EEprom.c: 36: EEADR = addr;
 18241  004F92  C019  FFA9         	movff	rd_byte_EE@addr,4009	;volatile
 18242                           
 18243                           ;EEprom.c: 37: EECON1bits.EEPGD = 0;
 18244  004F96  9EA6               	bcf	4006,7,c	;volatile
 18245                           
 18246                           ;EEprom.c: 38: EECON1bits.CFGS=0;
 18247  004F98  9CA6               	bcf	4006,6,c	;volatile
 18248                           
 18249                           ;EEprom.c: 39: EECON1bits.RD = 1;
 18250  004F9A  80A6               	bsf	4006,0,c	;volatile
 18251                           
 18252                           ;EEprom.c: 40: return(EEDATA);
 18253  004F9C  50A8               	movf	4008,w,c	;volatile
 18254  004F9E  0012               	return		;funcret
 18255  004FA0  FFFF               	dw	65535	; errata NOP
 18256  004FA2                     __end_of_rd_byte_EE:
 18257                           	opt stack 0
 18258                           tblptru	equ	0xFF8
 18259                           tblptrh	equ	0xFF7
 18260                           tblptrl	equ	0xFF6
 18261                           tablat	equ	0xFF5
 18262                           prodl	equ	0xFF3
 18263                           intcon	equ	0xFF2
 18264                           postinc0	equ	0xFEE
 18265                           wreg	equ	0xFE8
 18266                           indf2	equ	0xFDF
 18267                           postinc2	equ	0xFDE
 18268                           postdec2	equ	0xFDD
 18269                           plusw2	equ	0xFDB
 18270                           fsr2h	equ	0xFDA
 18271                           fsr2l	equ	0xFD9
 18272                           status	equ	0xFD8
 18273                           
 18274 ;; *************** function _Set_LP_RC_constant *****************
 18275 ;; Defined at:
 18276 ;;		line 55 in file "Filters.c"
 18277 ;; Parameters:    Size  Location     Type
 18278 ;;  val             3   24[COMRAM] float 
 18279 ;; Auto vars:     Size  Location     Type
 18280 ;;		None
 18281 ;; Return value:  Size  Location     Type
 18282 ;;                  1    wreg      void 
 18283 ;; Registers used:
 18284 ;;		None
 18285 ;; Tracked objects:
 18286 ;;		On entry : 0/0
 18287 ;;		On exit  : 0/0
 18288 ;;		Unchanged: 0/0
 18289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18290 ;;      Params:         3       0       0       0       0       0       0
 18291 ;;      Locals:         0       0       0       0       0       0       0
 18292 ;;      Temps:          0       0       0       0       0       0       0
 18293 ;;      Totals:         3       0       0       0       0       0       0
 18294 ;;Total ram usage:        3 bytes
 18295 ;; Hardware stack levels used:    1
 18296 ;; Hardware stack levels required when called:    1
 18297 ;; This function calls:
 18298 ;;		Nothing
 18299 ;; This function is called by:
 18300 ;;		_set_list
 18301 ;;		_Get_Variables
 18302 ;;		_main
 18303 ;; This function uses a non-reentrant model
 18304 ;;
 18305                           
 18306                           	psect	text116
 18307  004D04                     __ptext116:
 18308                           	opt stack 0
 18309  004D04                     _Set_LP_RC_constant:
 18310                           	opt stack 0
 18311  004D04  FFFF               	dw	65535	; assembler added errata NOP
 18312                           
 18313                           ;Filters.c: 57: k1=val;
 18314                           
 18315                           ;incstack = 0
 18316  004D06  C019  F03E         	movff	Set_LP_RC_constant@val,_k1
 18317  004D0A  C01A  F03F         	movff	Set_LP_RC_constant@val+1,_k1+1
 18318  004D0E  C01B  F040         	movff	Set_LP_RC_constant@val+2,_k1+2
 18319  004D12  0012               	return		;funcret
 18320  004D14  FFFF               	dw	65535	; errata NOP
 18321  004D16                     __end_of_Set_LP_RC_constant:
 18322                           	opt stack 0
 18323                           tblptru	equ	0xFF8
 18324                           tblptrh	equ	0xFF7
 18325                           tblptrl	equ	0xFF6
 18326                           tablat	equ	0xFF5
 18327                           prodl	equ	0xFF3
 18328                           intcon	equ	0xFF2
 18329                           postinc0	equ	0xFEE
 18330                           wreg	equ	0xFE8
 18331                           indf2	equ	0xFDF
 18332                           postinc2	equ	0xFDE
 18333                           postdec2	equ	0xFDD
 18334                           plusw2	equ	0xFDB
 18335                           fsr2h	equ	0xFDA
 18336                           fsr2l	equ	0xFD9
 18337                           status	equ	0xFD8
 18338                           
 18339 ;; *************** function _Display_Data *****************
 18340 ;; Defined at:
 18341 ;;		line 239 in file "main.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;		None
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;  buffer         20    0[BANK1 ] unsigned char [20]
 18346 ;;  buff_len        1   20[BANK1 ] unsigned char 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;                  1    wreg      void 
 18349 ;; Registers used:
 18350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18356 ;;      Params:         0       0       0       0       0       0       0
 18357 ;;      Locals:         0       0      21       0       0       0       0
 18358 ;;      Temps:          0       0       0       0       0       0       0
 18359 ;;      Totals:         0       0      21       0       0       0       0
 18360 ;;Total ram usage:       21 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    6
 18363 ;; This function calls:
 18364 ;;		_Get_Voltage_VL1
 18365 ;;		_Get_Voltage_VL2
 18366 ;;		_Get_Voltage_VL3
 18367 ;;		_Get_Voltage_Vin
 18368 ;;		_LCD_SetCursor_Position
 18369 ;;		_LCD_WriteStr
 18370 ;;		_get_max
 18371 ;;		_get_min
 18372 ;;		_sprintf
 18373 ;; This function is called by:
 18374 ;;		_main
 18375 ;; This function uses a non-reentrant model
 18376 ;;
 18377                           
 18378                           	psect	text117
 18379  003914                     __ptext117:
 18380                           	opt stack 0
 18381  003914                     _Display_Data:
 18382                           	opt stack 0
 18383  003914  FFFF               	dw	65535	; assembler added errata NOP
 18384                           
 18385                           ;main.c: 241: char buff_len,buffer[20];
 18386                           ;main.c: 243: LCD_SetCursor_Position(1,1);
 18387                           
 18388                           ;incstack = 0
 18389  003916  0E01               	movlw	1
 18390  003918  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18391  00391A  0E01               	movlw	1
 18392  00391C  EC8A  F02B         	call	_LCD_SetCursor_Position
 18393                           
 18394                           ;main.c: 244: buff_len=sprintf(buffer,"V_Out (LN1-LN2-LN3)");
 18395  003920  0EB7               	movlw	low Display_Data@buffer
 18396  003922  0100               	movlb	0	; () banked
 18397  003924  6FC0               	movwf	sprintf@wh& (0+255),b
 18398  003926  0E01               	movlw	high Display_Data@buffer
 18399  003928  0100               	movlb	0	; () banked
 18400  00392A  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18401  00392C  0EC2               	movlw	low STR_79
 18402  00392E  0100               	movlb	0	; () banked
 18403  003930  6FC2               	movwf	sprintf@f& (0+255),b
 18404  003932  0E7E               	movlw	high STR_79
 18405  003934  0100               	movlb	0	; () banked
 18406  003936  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18407  003938  EC10  F02F         	call	_sprintf	;wreg free
 18408  00393C  0100               	movlb	0	; () banked
 18409  00393E  51C0               	movf	?_sprintf& (0+255),w,b
 18410  003940  0101               	movlb	1	; () banked
 18411  003942  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18412                           
 18413                           ; BSR set to: 1
 18414                           ;main.c: 245: LCD_WriteStr(buffer,buff_len);
 18415  003944  0EB7               	movlw	low Display_Data@buffer
 18416  003946  6E1B               	movwf	LCD_WriteStr@Str,c
 18417  003948  0E01               	movlw	high Display_Data@buffer
 18418  00394A  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18419  00394C  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18420  003950  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18421                           
 18422                           ;main.c: 247: LCD_SetCursor_Position(2,1);
 18423  003954  0E01               	movlw	1
 18424  003956  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18425  003958  0E02               	movlw	2
 18426  00395A  EC8A  F02B         	call	_LCD_SetCursor_Position
 18427                           
 18428                           ;main.c: 248: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL1());
 18429  00395E  0EB7               	movlw	low Display_Data@buffer
 18430  003960  0100               	movlb	0	; () banked
 18431  003962  6FC0               	movwf	sprintf@wh& (0+255),b
 18432  003964  0E01               	movlw	high Display_Data@buffer
 18433  003966  0100               	movlb	0	; () banked
 18434  003968  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18435  00396A  0E9B               	movlw	low STR_80
 18436  00396C  0100               	movlb	0	; () banked
 18437  00396E  6FC2               	movwf	sprintf@f& (0+255),b
 18438  003970  0E7F               	movlw	high STR_80
 18439  003972  0100               	movlb	0	; () banked
 18440  003974  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18441  003976  EC3A  F026         	call	_Get_Voltage_VL1	;wreg free
 18442  00397A  C019  F0C4         	movff	?_Get_Voltage_VL1,?_sprintf+4
 18443  00397E  C01A  F0C5         	movff	?_Get_Voltage_VL1+1,?_sprintf+5
 18444  003982  C01B  F0C6         	movff	?_Get_Voltage_VL1+2,?_sprintf+6
 18445  003986  EC10  F02F         	call	_sprintf	;wreg free
 18446  00398A  0100               	movlb	0	; () banked
 18447  00398C  51C0               	movf	?_sprintf& (0+255),w,b
 18448  00398E  0101               	movlb	1	; () banked
 18449  003990  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18450                           
 18451                           ;main.c: 249: LCD_WriteStr(buffer,buff_len);
 18452  003992  0EB7               	movlw	low Display_Data@buffer
 18453  003994  6E1B               	movwf	LCD_WriteStr@Str,c
 18454  003996  0E01               	movlw	high Display_Data@buffer
 18455  003998  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18456  00399A  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18457  00399E  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18458                           
 18459                           ;main.c: 251: LCD_SetCursor_Position(2,8);
 18460  0039A2  0E08               	movlw	8
 18461  0039A4  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18462  0039A6  0E02               	movlw	2
 18463  0039A8  EC8A  F02B         	call	_LCD_SetCursor_Position
 18464                           
 18465                           ;main.c: 252: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL2());
 18466  0039AC  0EB7               	movlw	low Display_Data@buffer
 18467  0039AE  0100               	movlb	0	; () banked
 18468  0039B0  6FC0               	movwf	sprintf@wh& (0+255),b
 18469  0039B2  0E01               	movlw	high Display_Data@buffer
 18470  0039B4  0100               	movlb	0	; () banked
 18471  0039B6  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18472  0039B8  0E9B               	movlw	low STR_80
 18473  0039BA  0100               	movlb	0	; () banked
 18474  0039BC  6FC2               	movwf	sprintf@f& (0+255),b
 18475  0039BE  0E7F               	movlw	high STR_80
 18476  0039C0  0100               	movlb	0	; () banked
 18477  0039C2  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18478  0039C4  EC43  F026         	call	_Get_Voltage_VL2	;wreg free
 18479  0039C8  C019  F0C4         	movff	?_Get_Voltage_VL2,?_sprintf+4
 18480  0039CC  C01A  F0C5         	movff	?_Get_Voltage_VL2+1,?_sprintf+5
 18481  0039D0  C01B  F0C6         	movff	?_Get_Voltage_VL2+2,?_sprintf+6
 18482  0039D4  EC10  F02F         	call	_sprintf	;wreg free
 18483  0039D8  0100               	movlb	0	; () banked
 18484  0039DA  51C0               	movf	?_sprintf& (0+255),w,b
 18485  0039DC  0101               	movlb	1	; () banked
 18486  0039DE  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18487                           
 18488                           ; BSR set to: 1
 18489                           ;main.c: 253: LCD_WriteStr(buffer,buff_len);
 18490  0039E0  0EB7               	movlw	low Display_Data@buffer
 18491  0039E2  6E1B               	movwf	LCD_WriteStr@Str,c
 18492  0039E4  0E01               	movlw	high Display_Data@buffer
 18493  0039E6  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18494  0039E8  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18495  0039EC  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18496                           
 18497                           ;main.c: 255: LCD_SetCursor_Position(2,15);
 18498  0039F0  0E0F               	movlw	15
 18499  0039F2  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18500  0039F4  0E02               	movlw	2
 18501  0039F6  EC8A  F02B         	call	_LCD_SetCursor_Position
 18502                           
 18503                           ;main.c: 256: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL3());
 18504  0039FA  0EB7               	movlw	low Display_Data@buffer
 18505  0039FC  0100               	movlb	0	; () banked
 18506  0039FE  6FC0               	movwf	sprintf@wh& (0+255),b
 18507  003A00  0E01               	movlw	high Display_Data@buffer
 18508  003A02  0100               	movlb	0	; () banked
 18509  003A04  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18510  003A06  0E9B               	movlw	low STR_80
 18511  003A08  0100               	movlb	0	; () banked
 18512  003A0A  6FC2               	movwf	sprintf@f& (0+255),b
 18513  003A0C  0E7F               	movlw	high STR_80
 18514  003A0E  0100               	movlb	0	; () banked
 18515  003A10  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18516  003A12  EC4C  F026         	call	_Get_Voltage_VL3	;wreg free
 18517  003A16  C019  F0C4         	movff	?_Get_Voltage_VL3,?_sprintf+4
 18518  003A1A  C01A  F0C5         	movff	?_Get_Voltage_VL3+1,?_sprintf+5
 18519  003A1E  C01B  F0C6         	movff	?_Get_Voltage_VL3+2,?_sprintf+6
 18520  003A22  EC10  F02F         	call	_sprintf	;wreg free
 18521  003A26  0100               	movlb	0	; () banked
 18522  003A28  51C0               	movf	?_sprintf& (0+255),w,b
 18523  003A2A  0101               	movlb	1	; () banked
 18524  003A2C  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18525                           
 18526                           ; BSR set to: 1
 18527                           ;main.c: 257: LCD_WriteStr(buffer,buff_len);
 18528  003A2E  0EB7               	movlw	low Display_Data@buffer
 18529  003A30  6E1B               	movwf	LCD_WriteStr@Str,c
 18530  003A32  0E01               	movlw	high Display_Data@buffer
 18531  003A34  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18532  003A36  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18533  003A3A  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18534                           
 18535                           ;main.c: 259: LCD_SetCursor_Position(3,1);
 18536  003A3E  0E01               	movlw	1
 18537  003A40  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18538  003A42  0E03               	movlw	3
 18539  003A44  EC8A  F02B         	call	_LCD_SetCursor_Position
 18540                           
 18541                           ;main.c: 260: buff_len=sprintf(buffer,"V_In (Min Act Max)");
 18542  003A48  0EB7               	movlw	low Display_Data@buffer
 18543  003A4A  0100               	movlb	0	; () banked
 18544  003A4C  6FC0               	movwf	sprintf@wh& (0+255),b
 18545  003A4E  0E01               	movlw	high Display_Data@buffer
 18546  003A50  0100               	movlb	0	; () banked
 18547  003A52  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18548  003A54  0ED6               	movlw	low STR_83
 18549  003A56  0100               	movlb	0	; () banked
 18550  003A58  6FC2               	movwf	sprintf@f& (0+255),b
 18551  003A5A  0E7E               	movlw	high STR_83
 18552  003A5C  0100               	movlb	0	; () banked
 18553  003A5E  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18554  003A60  EC10  F02F         	call	_sprintf	;wreg free
 18555  003A64  0100               	movlb	0	; () banked
 18556  003A66  51C0               	movf	?_sprintf& (0+255),w,b
 18557  003A68  0101               	movlb	1	; () banked
 18558  003A6A  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18559                           
 18560                           ; BSR set to: 1
 18561                           ;main.c: 261: LCD_WriteStr(buffer,buff_len);
 18562  003A6C  0EB7               	movlw	low Display_Data@buffer
 18563  003A6E  6E1B               	movwf	LCD_WriteStr@Str,c
 18564  003A70  0E01               	movlw	high Display_Data@buffer
 18565  003A72  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18566  003A74  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18567  003A78  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18568                           
 18569                           ;main.c: 263: LCD_SetCursor_Position(4,1);
 18570  003A7C  0E01               	movlw	1
 18571  003A7E  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18572  003A80  0E04               	movlw	4
 18573  003A82  EC8A  F02B         	call	_LCD_SetCursor_Position
 18574                           
 18575                           ;main.c: 264: buff_len=sprintf(buffer,"%.1f",get_min());
 18576  003A86  0EB7               	movlw	low Display_Data@buffer
 18577  003A88  0100               	movlb	0	; () banked
 18578  003A8A  6FC0               	movwf	sprintf@wh& (0+255),b
 18579  003A8C  0E01               	movlw	high Display_Data@buffer
 18580  003A8E  0100               	movlb	0	; () banked
 18581  003A90  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18582  003A92  0E9B               	movlw	low STR_80
 18583  003A94  0100               	movlb	0	; () banked
 18584  003A96  6FC2               	movwf	sprintf@f& (0+255),b
 18585  003A98  0E7F               	movlw	high STR_80
 18586  003A9A  0100               	movlb	0	; () banked
 18587  003A9C  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18588  003A9E  EC70  F026         	call	_get_min	;wreg free
 18589  003AA2  C019  F0C4         	movff	?_get_min,?_sprintf+4
 18590  003AA6  C01A  F0C5         	movff	?_get_min+1,?_sprintf+5
 18591  003AAA  C01B  F0C6         	movff	?_get_min+2,?_sprintf+6
 18592  003AAE  EC10  F02F         	call	_sprintf	;wreg free
 18593  003AB2  0100               	movlb	0	; () banked
 18594  003AB4  51C0               	movf	?_sprintf& (0+255),w,b
 18595  003AB6  0101               	movlb	1	; () banked
 18596  003AB8  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18597                           
 18598                           ; BSR set to: 1
 18599                           ;main.c: 265: LCD_WriteStr(buffer,buff_len);
 18600  003ABA  0EB7               	movlw	low Display_Data@buffer
 18601  003ABC  6E1B               	movwf	LCD_WriteStr@Str,c
 18602  003ABE  0E01               	movlw	high Display_Data@buffer
 18603  003AC0  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18604  003AC2  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18605  003AC6  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18606                           
 18607                           ;main.c: 267: LCD_SetCursor_Position(4,8);
 18608  003ACA  0E08               	movlw	8
 18609  003ACC  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18610  003ACE  0E04               	movlw	4
 18611  003AD0  EC8A  F02B         	call	_LCD_SetCursor_Position
 18612                           
 18613                           ;main.c: 268: buff_len=sprintf(buffer,"%.1f",Get_Voltage_Vin());
 18614  003AD4  0EB7               	movlw	low Display_Data@buffer
 18615  003AD6  0100               	movlb	0	; () banked
 18616  003AD8  6FC0               	movwf	sprintf@wh& (0+255),b
 18617  003ADA  0E01               	movlw	high Display_Data@buffer
 18618  003ADC  0100               	movlb	0	; () banked
 18619  003ADE  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18620  003AE0  0E9B               	movlw	low STR_80
 18621  003AE2  0100               	movlb	0	; () banked
 18622  003AE4  6FC2               	movwf	sprintf@f& (0+255),b
 18623  003AE6  0E7F               	movlw	high STR_80
 18624  003AE8  0100               	movlb	0	; () banked
 18625  003AEA  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18626  003AEC  EC5E  F026         	call	_Get_Voltage_Vin	;wreg free
 18627  003AF0  C019  F0C4         	movff	?_Get_Voltage_Vin,?_sprintf+4
 18628  003AF4  C01A  F0C5         	movff	?_Get_Voltage_Vin+1,?_sprintf+5
 18629  003AF8  C01B  F0C6         	movff	?_Get_Voltage_Vin+2,?_sprintf+6
 18630  003AFC  EC10  F02F         	call	_sprintf	;wreg free
 18631  003B00  0100               	movlb	0	; () banked
 18632  003B02  51C0               	movf	?_sprintf& (0+255),w,b
 18633  003B04  0101               	movlb	1	; () banked
 18634  003B06  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18635                           
 18636                           ;main.c: 269: LCD_WriteStr(buffer,buff_len);
 18637  003B08  0EB7               	movlw	low Display_Data@buffer
 18638  003B0A  6E1B               	movwf	LCD_WriteStr@Str,c
 18639  003B0C  0E01               	movlw	high Display_Data@buffer
 18640  003B0E  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18641  003B10  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18642  003B14  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18643                           
 18644                           ;main.c: 271: LCD_SetCursor_Position(4,15);
 18645  003B18  0E0F               	movlw	15
 18646  003B1A  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18647  003B1C  0E04               	movlw	4
 18648  003B1E  EC8A  F02B         	call	_LCD_SetCursor_Position
 18649                           
 18650                           ;main.c: 272: buff_len=sprintf(buffer,"%.1f",get_max());
 18651  003B22  0EB7               	movlw	low Display_Data@buffer
 18652  003B24  0100               	movlb	0	; () banked
 18653  003B26  6FC0               	movwf	sprintf@wh& (0+255),b
 18654  003B28  0E01               	movlw	high Display_Data@buffer
 18655  003B2A  0100               	movlb	0	; () banked
 18656  003B2C  6FC1               	movwf	(sprintf@wh+1)& (0+255),b
 18657  003B2E  0E9B               	movlw	low STR_80
 18658  003B30  0100               	movlb	0	; () banked
 18659  003B32  6FC2               	movwf	sprintf@f& (0+255),b
 18660  003B34  0E7F               	movlw	high STR_80
 18661  003B36  0100               	movlb	0	; () banked
 18662  003B38  6FC3               	movwf	(sprintf@f+1)& (0+255),b
 18663  003B3A  EC67  F026         	call	_get_max	;wreg free
 18664  003B3E  C019  F0C4         	movff	?_get_max,?_sprintf+4
 18665  003B42  C01A  F0C5         	movff	?_get_max+1,?_sprintf+5
 18666  003B46  C01B  F0C6         	movff	?_get_max+2,?_sprintf+6
 18667  003B4A  EC10  F02F         	call	_sprintf	;wreg free
 18668  003B4E  0100               	movlb	0	; () banked
 18669  003B50  51C0               	movf	?_sprintf& (0+255),w,b
 18670  003B52  0101               	movlb	1	; () banked
 18671  003B54  6FCB               	movwf	Display_Data@buff_len& (0+255),b
 18672                           
 18673                           ; BSR set to: 1
 18674                           ;main.c: 273: LCD_WriteStr(buffer,buff_len);
 18675  003B56  0EB7               	movlw	low Display_Data@buffer
 18676  003B58  6E1B               	movwf	LCD_WriteStr@Str,c
 18677  003B5A  0E01               	movlw	high Display_Data@buffer
 18678  003B5C  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18679  003B5E  C1CB  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18680  003B62  ECD2  F02F         	call	_LCD_WriteStr	;wreg free
 18681  003B66  0012               	return		;funcret
 18682  003B68  FFFF               	dw	65535	; errata NOP
 18683  003B6A                     __end_of_Display_Data:
 18684                           	opt stack 0
 18685                           tblptru	equ	0xFF8
 18686                           tblptrh	equ	0xFF7
 18687                           tblptrl	equ	0xFF6
 18688                           tablat	equ	0xFF5
 18689                           prodl	equ	0xFF3
 18690                           intcon	equ	0xFF2
 18691                           postinc0	equ	0xFEE
 18692                           wreg	equ	0xFE8
 18693                           indf2	equ	0xFDF
 18694                           postinc2	equ	0xFDE
 18695                           postdec2	equ	0xFDD
 18696                           plusw2	equ	0xFDB
 18697                           fsr2h	equ	0xFDA
 18698                           fsr2l	equ	0xFD9
 18699                           status	equ	0xFD8
 18700                           
 18701 ;; *************** function _sprintf *****************
 18702 ;; Defined at:
 18703 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprintf.c"
 18704 ;; Parameters:    Size  Location     Type
 18705 ;;  wh              2   96[BANK0 ] PTR unsigned char 
 18706 ;;		 -> Display_Data@buffer(20), tx_buffer(40), NULL(0), 
 18707 ;;  f               2   98[BANK0 ] PTR const unsigned char 
 18708 ;;		 -> STR_86(5), STR_85(5), STR_84(5), STR_83(19), 
 18709 ;;		 -> STR_82(5), STR_81(5), STR_80(5), STR_79(20), 
 18710 ;;		 -> STR_68(7), STR_67(6), STR_65(26), STR_64(28), 
 18711 ;;		 -> STR_62(10), STR_60(10), STR_58(6), STR_56(6), 
 18712 ;;		 -> STR_54(6), STR_53(8), STR_51(6), STR_49(6), 
 18713 ;;		 -> STR_47(6), STR_45(6), STR_43(6), STR_41(6), 
 18714 ;;		 -> STR_39(6), STR_37(6), STR_35(6), STR_33(17), 
 18715 ;;		 -> STR_21(17), STR_12(7), STR_7(18), 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;  pb              4  116[BANK0 ] struct __prbuf
 18718 ;;  ap              2  114[BANK0 ] PTR void [1]
 18719 ;;		 -> ?_sprintf(2), ?_printf(2), 
 18720 ;; Return value:  Size  Location     Type
 18721 ;;                  2   96[BANK0 ] int 
 18722 ;; Registers used:
 18723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18724 ;; Tracked objects:
 18725 ;;		On entry : 0/0
 18726 ;;		On exit  : 0/0
 18727 ;;		Unchanged: 0/0
 18728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18729 ;;      Params:         0      16       0       0       0       0       0
 18730 ;;      Locals:         0       6       0       0       0       0       0
 18731 ;;      Temps:          0       2       0       0       0       0       0
 18732 ;;      Totals:         0      24       0       0       0       0       0
 18733 ;;Total ram usage:       24 bytes
 18734 ;; Hardware stack levels used:    1
 18735 ;; Hardware stack levels required when called:    5
 18736 ;; This function calls:
 18737 ;;		__doprnt
 18738 ;; This function is called by:
 18739 ;;		_read_command
 18740 ;;		_reset_var
 18741 ;;		_cal_analog
 18742 ;;		_set_list
 18743 ;;		_get_list
 18744 ;;		_Display_Data
 18745 ;; This function uses a non-reentrant model
 18746 ;;
 18747                           
 18748                           	psect	text118
 18749  005E20                     __ptext118:
 18750                           	opt stack 0
 18751  005E20                     _sprintf:
 18752                           	opt stack 0
 18753  005E20  FFFF               	dw	65535	; assembler added errata NOP
 18754                           
 18755                           ;incstack = 0
 18756  005E22  C0C0  F0D4         	movff	sprintf@wh,sprintf@pb
 18757  005E26  C0C1  F0D5         	movff	sprintf@wh+1,sprintf@pb+1
 18758  005E2A  0E00               	movlw	0
 18759  005E2C  0100               	movlb	0	; () banked
 18760  005E2E  6FD6               	movwf	(sprintf@pb+2)& (0+255),b
 18761  005E30  0E00               	movlw	0
 18762  005E32  0100               	movlb	0	; () banked
 18763  005E34  6FD7               	movwf	(sprintf@pb+3)& (0+255),b
 18764  005E36  0EC4               	movlw	low (?_sprintf+4)
 18765  005E38  0100               	movlb	0	; () banked
 18766  005E3A  6FD2               	movwf	sprintf@ap& (0+255),b
 18767  005E3C  0E00               	movlw	high (?_sprintf+4)
 18768  005E3E  0100               	movlb	0	; () banked
 18769  005E40  6FD3               	movwf	(sprintf@ap+1)& (0+255),b
 18770                           
 18771                           ; BSR set to: 0
 18772  005E42  0ED4               	movlw	low sprintf@pb
 18773  005E44  0100               	movlb	0	; () banked
 18774  005E46  6F99               	movwf	__doprnt@pb& (0+255),b
 18775  005E48  0E00               	movlw	high sprintf@pb
 18776  005E4A  0100               	movlb	0	; () banked
 18777  005E4C  6F9A               	movwf	(__doprnt@pb+1)& (0+255),b
 18778  005E4E  C0C2  F09B         	movff	sprintf@f,__doprnt@f
 18779  005E52  C0C3  F09C         	movff	sprintf@f+1,__doprnt@f+1
 18780  005E56  0ED2               	movlw	low sprintf@ap
 18781  005E58  0100               	movlb	0	; () banked
 18782  005E5A  6F9D               	movwf	__doprnt@ap& (0+255),b
 18783  005E5C  0E00               	movlw	high sprintf@ap
 18784  005E5E  0100               	movlb	0	; () banked
 18785  005E60  6F9E               	movwf	(__doprnt@ap+1)& (0+255),b
 18786  005E62  ECDB  F000         	call	__doprnt	;wreg free
 18787  005E66  C0D4  FFD9         	movff	sprintf@pb,fsr2l
 18788  005E6A  C0D5  FFDA         	movff	sprintf@pb+1,fsr2h
 18789  005E6E  0E00               	movlw	0
 18790  005E70  6EDF               	movwf	indf2,c
 18791  005E72  C0C0  F0D0         	movff	sprintf@wh,??_sprintf
 18792  005E76  C0C1  F0D1         	movff	sprintf@wh+1,??_sprintf+1
 18793  005E7A  0100               	movlb	0	; () banked
 18794  005E7C  1FD0               	comf	??_sprintf& (0+255),f,b
 18795  005E7E  1FD1               	comf	(??_sprintf+1)& (0+255),f,b
 18796  005E80  4BD0               	infsnz	??_sprintf& (0+255),f,b
 18797  005E82  2BD1               	incf	(??_sprintf+1)& (0+255),f,b
 18798  005E84  0100               	movlb	0	; () banked
 18799  005E86  51D4               	movf	sprintf@pb& (0+255),w,b
 18800  005E88  0100               	movlb	0	; () banked
 18801  005E8A  25D0               	addwf	??_sprintf& (0+255),w,b
 18802  005E8C  0100               	movlb	0	; () banked
 18803  005E8E  6FC0               	movwf	?_sprintf& (0+255),b
 18804  005E90  0100               	movlb	0	; () banked
 18805  005E92  51D5               	movf	(sprintf@pb+1)& (0+255),w,b
 18806  005E94  0100               	movlb	0	; () banked
 18807  005E96  21D1               	addwfc	(??_sprintf+1)& (0+255),w,b
 18808  005E98  0100               	movlb	0	; () banked
 18809  005E9A  6FC1               	movwf	(?_sprintf+1)& (0+255),b
 18810                           
 18811                           ; BSR set to: 0
 18812                           
 18813                           ; BSR set to: 0
 18814  005E9C  0012               	return		;funcret
 18815  005E9E  FFFF               	dw	65535	; errata NOP
 18816  005EA0                     __end_of_sprintf:
 18817                           	opt stack 0
 18818                           tblptru	equ	0xFF8
 18819                           tblptrh	equ	0xFF7
 18820                           tblptrl	equ	0xFF6
 18821                           tablat	equ	0xFF5
 18822                           prodl	equ	0xFF3
 18823                           intcon	equ	0xFF2
 18824                           postinc0	equ	0xFEE
 18825                           wreg	equ	0xFE8
 18826                           indf2	equ	0xFDF
 18827                           postinc2	equ	0xFDE
 18828                           postdec2	equ	0xFDD
 18829                           plusw2	equ	0xFDB
 18830                           fsr2h	equ	0xFDA
 18831                           fsr2l	equ	0xFD9
 18832                           status	equ	0xFD8
 18833                           
 18834 ;; *************** function __doprnt *****************
 18835 ;; Defined at:
 18836 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;  pb              2   57[BANK0 ] PTR struct __prbuf
 18839 ;;		 -> sprintf@pb(4), printf@pb(4), 
 18840 ;;  f               2   59[BANK0 ] PTR const unsigned char 
 18841 ;;		 -> STR_86(5), STR_85(5), STR_84(5), STR_83(19), 
 18842 ;;		 -> STR_82(5), STR_81(5), STR_80(5), STR_79(20), 
 18843 ;;		 -> STR_78(4), STR_77(23), STR_76(8), STR_75(29), 
 18844 ;;		 -> STR_74(41), STR_73(8), STR_72(25), STR_68(7), 
 18845 ;;		 -> STR_67(6), STR_65(26), STR_64(28), STR_62(10), 
 18846 ;;		 -> STR_60(10), STR_58(6), STR_56(6), STR_54(6), 
 18847 ;;		 -> STR_53(8), STR_51(6), STR_49(6), STR_47(6), 
 18848 ;;		 -> STR_45(6), STR_43(6), STR_41(6), STR_39(6), 
 18849 ;;		 -> STR_37(6), STR_35(6), STR_33(17), STR_21(17), 
 18850 ;;		 -> STR_12(7), STR_7(18), 
 18851 ;;  ap              2   61[BANK0 ] PTR PTR void 
 18852 ;;		 -> sprintf@ap(2), printf@ap(2), 
 18853 ;; Auto vars:     Size  Location     Type
 18854 ;;  tmpval          4   86[BANK0 ] struct .
 18855 ;;  val             4   82[BANK0 ] unsigned long 
 18856 ;;  fval            3   90[BANK0 ] unsigned long 
 18857 ;;  prec            2   93[BANK0 ] int 
 18858 ;;  exp             2   80[BANK0 ] int 
 18859 ;;  ccnt            2   78[BANK0 ] int 
 18860 ;;  flag            2   76[BANK0 ] unsigned short 
 18861 ;;  cp              2   74[BANK0 ] PTR const unsigned char 
 18862 ;;		 -> asctime@buf(27), ?_sprintf(2), ?_printf(2), STR_87(7), 
 18863 ;;		 -> Display_Data@buffer(20), tx_buffer(40), NULL(0), 
 18864 ;;  len             2   72[BANK0 ] unsigned int 
 18865 ;;  width           2    0        int 
 18866 ;;  c               1   95[BANK0 ] char 
 18867 ;;  d               1    0        unsigned char 
 18868 ;; Return value:  Size  Location     Type
 18869 ;;                  2   57[BANK0 ] int 
 18870 ;; Registers used:
 18871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18872 ;; Tracked objects:
 18873 ;;		On entry : 0/0
 18874 ;;		On exit  : 0/0
 18875 ;;		Unchanged: 0/0
 18876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18877 ;;      Params:         0       6       0       0       0       0       0
 18878 ;;      Locals:         0      27       0       0       0       0       0
 18879 ;;      Temps:          0       6       0       0       0       0       0
 18880 ;;      Totals:         0      39       0       0       0       0       0
 18881 ;;Total ram usage:       39 bytes
 18882 ;; Hardware stack levels used:    1
 18883 ;; Hardware stack levels required when called:    4
 18884 ;; This function calls:
 18885 ;;		Absolute function
 18886 ;;		___awdiv
 18887 ;;		___ftadd
 18888 ;;		___ftge
 18889 ;;		___ftmul
 18890 ;;		___ftneg
 18891 ;;		___ftsub
 18892 ;;		___fttol
 18893 ;;		___lldiv
 18894 ;;		___llmod
 18895 ;;		___lltoft
 18896 ;;		___wmul
 18897 ;;		__div_to_l_
 18898 ;;		__tdiv_to_l_
 18899 ;;		_fround
 18900 ;;		_isdigit
 18901 ;;		_putch
 18902 ;;		_scale
 18903 ;; This function is called by:
 18904 ;;		_printf
 18905 ;;		_sprintf
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           	psect	text119
 18910  0001B6                     __ptext119:
 18911                           	opt stack 0
 18912  0001B6                     __doprnt:
 18913                           	opt stack 0
 18914  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 18915                           
 18916                           ;doprnt.c: 499: signed char c;
 18917                           ;doprnt.c: 501: int width;
 18918                           ;doprnt.c: 504: int prec;
 18919                           ;doprnt.c: 508: unsigned short flag;
 18920                           ;doprnt.c: 510: int ccnt = 0;
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;incstack = 0
 18924  0001B8  0E00               	movlw	0
 18925  0001BA  0100               	movlb	0	; () banked
 18926  0001BC  6FAF               	movwf	(__doprnt@ccnt+1)& (0+255),b
 18927  0001BE  0E00               	movlw	0
 18928  0001C0  6FAE               	movwf	__doprnt@ccnt& (0+255),b
 18929                           
 18930                           ;doprnt.c: 515: char d;
 18931                           ;doprnt.c: 516: double fval;
 18932                           ;doprnt.c: 517: int exp;
 18933                           ;doprnt.c: 523: union {
 18934                           ;doprnt.c: 524: unsigned long vd;
 18935                           ;doprnt.c: 525: double integ;
 18936                           ;doprnt.c: 526: } tmpval;
 18937                           ;doprnt.c: 528: unsigned long val;
 18938                           ;doprnt.c: 529: unsigned len;
 18939                           ;doprnt.c: 530: const char * cp;
 18940                           ;doprnt.c: 536: while(c = *f++) {
 18941  0001C2  EF5B  F008         	goto	u10210
 18942  0001C6  FFFF               	dw	65535	; assembler added errata NOP
 18943                           
 18944                           ; BSR set to: 0
 18945                           ;doprnt.c: 538: if(c != '%')
 18946                           
 18947                           ; BSR set to: 0
 18948  0001C8  0E25               	movlw	37
 18949  0001CA  0100               	movlb	0	; () banked
 18950  0001CC  19BF               	xorwf	__doprnt@c& (0+255),w,b
 18951  0001CE  B4D8               	btfsc	status,2,c
 18952  0001D0  D03F               	goto	l1234
 18953                           
 18954                           ; BSR set to: 0
 18955                           ;doprnt.c: 540: {
 18956                           ;doprnt.c: 541: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
 18957  0001D2  0100               	movlb	0	; () banked
 18958  0001D4  EE20 F002          	lfsr	2,2
 18959  0001D8  5199               	movf	__doprnt@pb& (0+255),w,b
 18960  0001DA  26D9               	addwf	fsr2l,f,c
 18961  0001DC  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 18962  0001DE  22DA               	addwfc	fsr2h,f,c
 18963  0001E0  50DE               	movf	postinc2,w,c
 18964  0001E2  10DE               	iorwf	postinc2,w,c
 18965  0001E4  B4D8               	btfsc	status,2,c
 18966  0001E6  D018               	goto	l1235
 18967                           
 18968                           ; BSR set to: 0
 18969  0001E8  0100               	movlb	0	; () banked
 18970  0001EA  EE20 F002          	lfsr	2,2
 18971  0001EE  5199               	movf	__doprnt@pb& (0+255),w,b
 18972  0001F0  26D9               	addwf	fsr2l,f,c
 18973  0001F2  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 18974  0001F4  22DA               	addwfc	fsr2h,f,c
 18975  0001F6  D801               	call	u9598
 18976  0001F8  D025               	goto	l9777
 18977  0001FA                     u9598:
 18978  0001FA  FFFF               	dw	65535	; assembler added errata NOP
 18979  0001FC  0005               	push	
 18980  0001FE  6EFA               	movwf	pclath,c
 18981  000200  50DE               	movf	postinc2,w,c
 18982  000202  6EFD               	movwf	tosl,c
 18983  000204  50DE               	movf	postinc2,w,c
 18984  000206  6EFE               	movwf	tosh,c
 18985  000208  50F8               	movf	tblptru,w,c
 18986  00020A  6EFF               	movwf	tosu,c
 18987  00020C  50FA               	movf	pclath,w,c
 18988  00020E  0100               	movlb	0	; () banked
 18989  000210  51BF               	movf	__doprnt@c& (0+255),w,b
 18990  000212  0012               	return		;indir
 18991  000214  FFFF               	dw	65535	; errata NOP
 18992  000216  D016               	goto	l9777
 18993  000218                     l1235:
 18994  000218  FFFF               	dw	65535	; assembler added errata NOP
 18995                           
 18996                           ; BSR set to: 0
 18997                           
 18998                           ; BSR set to: 0
 18999  00021A  C099  FFD9         	movff	__doprnt@pb,fsr2l
 19000  00021E  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 19001  000222  CFDE F09F          	movff	postinc2,??__doprnt
 19002  000226  CFDD F0A0          	movff	postdec2,??__doprnt+1
 19003  00022A  C09F  FFD9         	movff	??__doprnt,fsr2l
 19004  00022E  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 19005  000232  C0BF  FFDF         	movff	__doprnt@c,indf2
 19006                           
 19007                           ; BSR set to: 0
 19008  000236  C099  FFD9         	movff	__doprnt@pb,fsr2l
 19009  00023A  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 19010  00023E  2ADE               	incf	postinc2,f,c
 19011  000240  0E00               	movlw	0
 19012  000242  22DD               	addwfc	postdec2,f,c
 19013  000244                     l9777:
 19014  000244  FFFF               	dw	65535	; assembler added errata NOP
 19015                           
 19016                           ; BSR set to: 0
 19017  000246  0100               	movlb	0	; () banked
 19018  000248  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 19019  00024A  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 19020                           
 19021                           ; BSR set to: 0
 19022                           ;doprnt.c: 542: continue;
 19023  00024C  EF5B  F008         	goto	u10210
 19024  000250                     l1234:
 19025  000250  FFFF               	dw	65535	; assembler added errata NOP
 19026                           
 19027                           ; BSR set to: 0
 19028                           ;doprnt.c: 543: }
 19029                           ;doprnt.c: 548: flag = 0;
 19030                           
 19031                           ; BSR set to: 0
 19032  000252  0E00               	movlw	0
 19033  000254  0100               	movlb	0	; () banked
 19034  000256  6FAD               	movwf	(__doprnt@flag+1)& (0+255),b
 19035  000258  0E00               	movlw	0
 19036  00025A  6FAC               	movwf	__doprnt@flag& (0+255),b
 19037                           
 19038                           ; BSR set to: 0
 19039                           ;doprnt.c: 611: if(*f == '.') {
 19040  00025C  C09B  FFF6         	movff	__doprnt@f,tblptrl
 19041  000260  C09C  FFF7         	movff	__doprnt@f+1,tblptrh
 19042  000264                     	if	0	;tblptru may be non-zero
 19043  000264                     	endif
 19044  000264                     	if	0	;tblptru may be non-zero
 19045  000264                     	endif
 19046  000264  0008               	tblrd		*
 19047  000266  FFFF               	dw	65535	; errata NOP
 19048  000268  50F5               	movf	tablat,w,c
 19049  00026A  0A2E               	xorlw	46
 19050  00026C  A4D8               	btfss	status,2,c
 19051  00026E  D038               	goto	l1237
 19052                           
 19053                           ; BSR set to: 0
 19054                           ;doprnt.c: 612: flag |= 0x4000;
 19055  000270  0100               	movlb	0	; () banked
 19056  000272  8DAD               	bsf	(__doprnt@flag+1)& (0+255),6,b
 19057                           
 19058                           ;doprnt.c: 613: f++;
 19059  000274  0100               	movlb	0	; () banked
 19060  000276  4B9B               	infsnz	__doprnt@f& (0+255),f,b
 19061  000278  2B9C               	incf	(__doprnt@f+1)& (0+255),f,b
 19062                           
 19063                           ; BSR set to: 0
 19064                           ;doprnt.c: 620: {
 19065                           ;doprnt.c: 621: prec = 0;
 19066  00027A  0E00               	movlw	0
 19067  00027C  0100               	movlb	0	; () banked
 19068  00027E  6FBE               	movwf	(__doprnt@prec+1)& (0+255),b
 19069  000280  0E00               	movlw	0
 19070  000282  6FBD               	movwf	__doprnt@prec& (0+255),b
 19071                           
 19072                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 19073  000284  D020               	goto	l1238
 19074  000286  FFFF               	dw	65535	; assembler added errata NOP
 19075                           
 19076                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 19077                           
 19078                           ; BSR set to: 0
 19079  000288  C0BD  F027         	movff	__doprnt@prec,___wmul@multiplier
 19080  00028C  C0BE  F028         	movff	__doprnt@prec+1,___wmul@multiplier+1
 19081  000290  0E00               	movlw	0
 19082  000292  6E2A               	movwf	___wmul@multiplicand+1,c
 19083  000294  0E0A               	movlw	10
 19084  000296  6E29               	movwf	___wmul@multiplicand,c
 19085  000298  EC10  F029         	call	___wmul
 19086  00029C  C09B  FFF6         	movff	__doprnt@f,tblptrl
 19087  0002A0  C09C  FFF7         	movff	__doprnt@f+1,tblptrh
 19088  0002A4                     	if	0	;tblptru may be non-zero
 19089  0002A4                     	endif
 19090  0002A4                     	if	0	;tblptru may be non-zero
 19091  0002A4                     	endif
 19092  0002A4  0008               	tblrd		*
 19093  0002A6  FFFF               	dw	65535	; errata NOP
 19094  0002A8  50F5               	movf	tablat,w,c
 19095  0002AA  2627               	addwf	?___wmul,f,c
 19096  0002AC  0E00               	movlw	0
 19097  0002AE  2228               	addwfc	?___wmul+1,f,c
 19098  0002B0  0ED0               	movlw	208
 19099  0002B2  2427               	addwf	?___wmul,w,c
 19100  0002B4  0100               	movlb	0	; () banked
 19101  0002B6  6FBD               	movwf	__doprnt@prec& (0+255),b
 19102  0002B8  0EFF               	movlw	255
 19103  0002BA  2028               	addwfc	?___wmul+1,w,c
 19104  0002BC  0100               	movlb	0	; () banked
 19105  0002BE  6FBE               	movwf	(__doprnt@prec+1)& (0+255),b
 19106                           
 19107                           ; BSR set to: 0
 19108  0002C0  0100               	movlb	0	; () banked
 19109  0002C2  4B9B               	infsnz	__doprnt@f& (0+255),f,b
 19110  0002C4  2B9C               	incf	(__doprnt@f+1)& (0+255),f,b
 19111  0002C6                     l1238:
 19112  0002C6  FFFF               	dw	65535	; assembler added errata NOP
 19113                           
 19114                           ; BSR set to: 0
 19115                           
 19116                           ; BSR set to: 0
 19117  0002C8  C09B  FFF6         	movff	__doprnt@f,tblptrl
 19118  0002CC  C09C  FFF7         	movff	__doprnt@f+1,tblptrh
 19119  0002D0                     	if	0	;tblptru may be non-zero
 19120  0002D0                     	endif
 19121  0002D0                     	if	0	;tblptru may be non-zero
 19122  0002D0                     	endif
 19123  0002D0  0008               	tblrd		*
 19124  0002D2  FFFF               	dw	65535	; errata NOP
 19125  0002D4  50F5               	movf	tablat,w,c
 19126  0002D6  EC8A  F028         	call	_isdigit
 19127  0002DA  A0D8               	btfss	status,0,c
 19128  0002DC  D0E2               	goto	l1242
 19129  0002DE  D7D3               	goto	l1239
 19130  0002E0                     l1237:
 19131  0002E0  FFFF               	dw	65535	; assembler added errata NOP
 19132                           
 19133                           ;doprnt.c: 626: prec = 0;
 19134  0002E2  0E00               	movlw	0
 19135  0002E4  0100               	movlb	0	; () banked
 19136  0002E6  6FBE               	movwf	(__doprnt@prec+1)& (0+255),b
 19137  0002E8  0E00               	movlw	0
 19138  0002EA  6FBD               	movwf	__doprnt@prec& (0+255),b
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;doprnt.c: 628: flag |= 0x1000;
 19142  0002EC  0100               	movlb	0	; () banked
 19143  0002EE  89AD               	bsf	(__doprnt@flag+1)& (0+255),4,b
 19144                           
 19145                           ; BSR set to: 0
 19146                           ;doprnt.c: 630: }
 19147                           ;doprnt.c: 635: switch(c = *f++) {
 19148  0002F0  D0D8               	goto	l1242
 19149  0002F2  FFFF               	dw	65535	; assembler added errata NOP
 19150                           
 19151                           ; BSR set to: 0
 19152                           ;doprnt.c: 663: flag |= 0x400;
 19153                           
 19154                           ; BSR set to: 0
 19155  0002F4  0100               	movlb	0	; () banked
 19156  0002F6  85AD               	bsf	(__doprnt@flag+1)& (0+255),2,b
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;doprnt.c: 698: case 'i':
 19160                           ;doprnt.c: 699: break;
 19161                           
 19162                           ; BSR set to: 0
 19163                           
 19164                           ;doprnt.c: 697: case 'd':
 19165                           
 19166                           ;doprnt.c: 664: break;
 19167  0002F8  D0F4               	goto	l1246
 19168  0002FA  FFFF               	dw	65535	; assembler added errata NOP
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19172                           
 19173                           ; BSR set to: 0
 19174  0002FC  C09D  FFD9         	movff	__doprnt@ap,fsr2l
 19175  000300  C09E  FFDA         	movff	__doprnt@ap+1,fsr2h
 19176  000304  CFDF F09F          	movff	indf2,??__doprnt
 19177  000308  0E02               	movlw	2
 19178  00030A  26DE               	addwf	postinc2,f,c
 19179  00030C  CFDF F0A0          	movff	indf2,??__doprnt+1
 19180  000310  0E00               	movlw	0
 19181  000312  22DD               	addwfc	postdec2,f,c
 19182  000314  C09F  FFD9         	movff	??__doprnt,fsr2l
 19183  000318  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 19184  00031C  CFDE F0AA          	movff	postinc2,__doprnt@cp
 19185  000320  CFDD F0AB          	movff	postdec2,__doprnt@cp+1
 19186                           
 19187                           ; BSR set to: 0
 19188                           ;doprnt.c: 740: if(!cp)
 19189  000324  0100               	movlb	0	; () banked
 19190  000326  51AA               	movf	__doprnt@cp& (0+255),w,b
 19191  000328  0100               	movlb	0	; () banked
 19192  00032A  11AB               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 19193  00032C  A4D8               	btfss	status,2,c
 19194  00032E  D006               	goto	l1250
 19195                           
 19196                           ; BSR set to: 0
 19197                           ;doprnt.c: 741: cp = "(null)";
 19198  000330  0E62               	movlw	low STR_87
 19199  000332  0100               	movlb	0	; () banked
 19200  000334  6FAA               	movwf	__doprnt@cp& (0+255),b
 19201  000336  0E7F               	movlw	high STR_87
 19202  000338  0100               	movlb	0	; () banked
 19203  00033A  6FAB               	movwf	(__doprnt@cp+1)& (0+255),b
 19204  00033C                     l1250:
 19205  00033C  FFFF               	dw	65535	; assembler added errata NOP
 19206                           
 19207                           ; BSR set to: 0
 19208                           ;doprnt.c: 745: len = 0;
 19209                           
 19210                           ; BSR set to: 0
 19211  00033E  0E00               	movlw	0
 19212  000340  0100               	movlb	0	; () banked
 19213  000342  6FA9               	movwf	(__doprnt@len+1)& (0+255),b
 19214  000344  0E00               	movlw	0
 19215  000346  6FA8               	movwf	__doprnt@len& (0+255),b
 19216                           
 19217                           ;doprnt.c: 746: while(cp[len])
 19218  000348  D004               	goto	l1251
 19219  00034A  FFFF               	dw	65535	; assembler added errata NOP
 19220                           
 19221                           ;doprnt.c: 747: len++;
 19222                           
 19223                           ; BSR set to: 0
 19224  00034C  0100               	movlb	0	; () banked
 19225  00034E  4BA8               	infsnz	__doprnt@len& (0+255),f,b
 19226  000350  2BA9               	incf	(__doprnt@len+1)& (0+255),f,b
 19227  000352                     l1251:
 19228  000352  FFFF               	dw	65535	; assembler added errata NOP
 19229                           
 19230                           ; BSR set to: 0
 19231                           
 19232                           ; BSR set to: 0
 19233  000354  0100               	movlb	0	; () banked
 19234  000356  51A8               	movf	__doprnt@len& (0+255),w,b
 19235  000358  0100               	movlb	0	; () banked
 19236  00035A  25AA               	addwf	__doprnt@cp& (0+255),w,b
 19237  00035C  0100               	movlb	0	; () banked
 19238  00035E  6F9F               	movwf	??__doprnt& (0+255),b
 19239  000360  0100               	movlb	0	; () banked
 19240  000362  51A9               	movf	(__doprnt@len+1)& (0+255),w,b
 19241  000364  0100               	movlb	0	; () banked
 19242  000366  21AB               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 19243  000368  0100               	movlb	0	; () banked
 19244  00036A  6FA0               	movwf	(??__doprnt+1)& (0+255),b
 19245  00036C  C09F  FFF6         	movff	??__doprnt,tblptrl
 19246  000370  C0A0  FFF7         	movff	??__doprnt+1,tblptrh
 19247  000374  6AF8               	clrf	tblptru,c
 19248  000376  0E05               	movlw	(high __ramtop+-1)
 19249  000378  64F7               	cpfsgt	tblptrh,c
 19250  00037A  D004               	bra	u9637
 19251  00037C  0008               	tblrd		*
 19252  00037E  FFFF               	dw	65535	; errata NOP
 19253  000380  50F5               	movf	tablat,w,c
 19254  000382  D005               	bra	u9630
 19255  000384                     u9637:
 19256  000384  CFF6 FFE1          	movff	tblptrl,fsr1l
 19257  000388  CFF7 FFE2          	movff	tblptrh,fsr1h
 19258  00038C  50E7               	movf	indf1,w,c
 19259  00038E                     u9630:
 19260  00038E  0900               	iorlw	0
 19261  000390  A4D8               	btfss	status,2,c
 19262  000392  D7DB               	goto	l1252
 19263                           
 19264                           ;doprnt.c: 753: if(prec && prec < len)
 19265  000394  0100               	movlb	0	; () banked
 19266  000396  51BD               	movf	__doprnt@prec& (0+255),w,b
 19267  000398  0100               	movlb	0	; () banked
 19268  00039A  11BE               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 19269  00039C  B4D8               	btfsc	status,2,c
 19270  00039E  D073               	goto	l1258
 19271                           
 19272                           ; BSR set to: 0
 19273  0003A0  0100               	movlb	0	; () banked
 19274  0003A2  51A8               	movf	__doprnt@len& (0+255),w,b
 19275  0003A4  0100               	movlb	0	; () banked
 19276  0003A6  5DBD               	subwf	__doprnt@prec& (0+255),w,b
 19277  0003A8  0100               	movlb	0	; () banked
 19278  0003AA  51A9               	movf	(__doprnt@len+1)& (0+255),w,b
 19279  0003AC  0100               	movlb	0	; () banked
 19280  0003AE  59BE               	subwfb	(__doprnt@prec+1)& (0+255),w,b
 19281  0003B0  B0D8               	btfsc	status,0,c
 19282  0003B2  D069               	goto	l1258
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;doprnt.c: 754: len = prec;
 19286  0003B4  C0BD  F0A8         	movff	__doprnt@prec,__doprnt@len
 19287  0003B8  C0BE  F0A9         	movff	__doprnt@prec+1,__doprnt@len+1
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;doprnt.c: 767: while(len--)
 19291  0003BC  D064               	goto	l1258
 19292  0003BE  FFFF               	dw	65535	; assembler added errata NOP
 19293  0003C0                     l9817:
 19294                           
 19295                           ; BSR set to: 0
 19296                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)),(++ccnt); else ((*pb->ptr++ = *cp++),(++c
      +                          cnt));
 19297  0003C0  0100               	movlb	0	; () banked
 19298  0003C2  EE20 F002          	lfsr	2,2
 19299  0003C6  5199               	movf	__doprnt@pb& (0+255),w,b
 19300  0003C8  26D9               	addwf	fsr2l,f,c
 19301  0003CA  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 19302  0003CC  22DA               	addwfc	fsr2h,f,c
 19303  0003CE  50DE               	movf	postinc2,w,c
 19304  0003D0  10DE               	iorwf	postinc2,w,c
 19305  0003D2  B4D8               	btfsc	status,2,c
 19306  0003D4  D02B               	goto	l1257
 19307                           
 19308                           ; BSR set to: 0
 19309  0003D6  0100               	movlb	0	; () banked
 19310  0003D8  EE20 F002          	lfsr	2,2
 19311  0003DC  5199               	movf	__doprnt@pb& (0+255),w,b
 19312  0003DE  26D9               	addwf	fsr2l,f,c
 19313  0003E0  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 19314  0003E2  22DA               	addwfc	fsr2h,f,c
 19315  0003E4  D801               	call	u9688
 19316  0003E6  D01D               	goto	u9689
 19317  0003E8                     u9688:
 19318  0003E8  FFFF               	dw	65535	; assembler added errata NOP
 19319  0003EA  0005               	push	
 19320  0003EC  6EFA               	movwf	pclath,c
 19321  0003EE  50DE               	movf	postinc2,w,c
 19322  0003F0  6EFD               	movwf	tosl,c
 19323  0003F2  50DE               	movf	postinc2,w,c
 19324  0003F4  6EFE               	movwf	tosh,c
 19325  0003F6  50F8               	movf	tblptru,w,c
 19326  0003F8  6EFF               	movwf	tosu,c
 19327  0003FA  50FA               	movf	pclath,w,c
 19328  0003FC  C0AA  FFF6         	movff	__doprnt@cp,tblptrl
 19329  000400  C0AB  FFF7         	movff	__doprnt@cp+1,tblptrh
 19330  000404  6AF8               	clrf	tblptru,c
 19331  000406  0E05               	movlw	(high __ramtop+-1)
 19332  000408  64F7               	cpfsgt	tblptrh,c
 19333  00040A  D004               	bra	u9697
 19334  00040C  0008               	tblrd		*
 19335  00040E  FFFF               	dw	65535	; errata NOP
 19336  000410  50F5               	movf	tablat,w,c
 19337  000412  D005               	bra	u9690
 19338  000414                     u9697:
 19339  000414  CFF6 FFE1          	movff	tblptrl,fsr1l
 19340  000418  CFF7 FFE2          	movff	tblptrh,fsr1h
 19341  00041C  50E7               	movf	indf1,w,c
 19342  00041E                     u9690:
 19343  00041E  0012               	return		;indir
 19344  000420  FFFF               	dw	65535	; errata NOP
 19345  000422                     u9689:
 19346  000422  FFFF               	dw	65535	; assembler added errata NOP
 19347  000424  0100               	movlb	0	; () banked
 19348  000426  4BAA               	infsnz	__doprnt@cp& (0+255),f,b
 19349  000428  2BAB               	incf	(__doprnt@cp+1)& (0+255),f,b
 19350  00042A  D029               	goto	l9831
 19351  00042C                     l1257:
 19352  00042C  FFFF               	dw	65535	; assembler added errata NOP
 19353                           
 19354                           ; BSR set to: 0
 19355                           
 19356                           ; BSR set to: 0
 19357  00042E  C0AA  FFF6         	movff	__doprnt@cp,tblptrl
 19358  000432  C0AB  FFF7         	movff	__doprnt@cp+1,tblptrh
 19359  000436  6AF8               	clrf	tblptru,c
 19360  000438  C099  FFD9         	movff	__doprnt@pb,fsr2l
 19361  00043C  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 19362  000440  CFDE F09F          	movff	postinc2,??__doprnt
 19363  000444  CFDD F0A0          	movff	postdec2,??__doprnt+1
 19364  000448  C09F  FFD9         	movff	??__doprnt,fsr2l
 19365  00044C  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 19366  000450  0E05               	movlw	(high __ramtop+-1)
 19367  000452  64F7               	cpfsgt	tblptrh,c
 19368  000454  D004               	bra	u9707
 19369  000456  0008               	tblrd		*
 19370  000458  FFFF               	dw	65535	; errata NOP
 19371  00045A  50F5               	movf	tablat,w,c
 19372  00045C  D005               	bra	u9700
 19373  00045E                     u9707:
 19374  00045E  CFF6 FFE1          	movff	tblptrl,fsr1l
 19375  000462  CFF7 FFE2          	movff	tblptrh,fsr1h
 19376  000466  50E7               	movf	indf1,w,c
 19377  000468                     u9700:
 19378  000468  6EDF               	movwf	indf2,c
 19379  00046A  0100               	movlb	0	; () banked
 19380  00046C  4BAA               	infsnz	__doprnt@cp& (0+255),f,b
 19381  00046E  2BAB               	incf	(__doprnt@cp+1)& (0+255),f,b
 19382                           
 19383                           ; BSR set to: 0
 19384  000470  C099  FFD9         	movff	__doprnt@pb,fsr2l
 19385  000474  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 19386  000478  2ADE               	incf	postinc2,f,c
 19387  00047A  0E00               	movlw	0
 19388  00047C  22DD               	addwfc	postdec2,f,c
 19389  00047E                     l9831:
 19390  00047E  FFFF               	dw	65535	; assembler added errata NOP
 19391                           
 19392                           ; BSR set to: 0
 19393  000480  0100               	movlb	0	; () banked
 19394  000482  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 19395  000484  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 19396  000486                     l1258:
 19397  000486  FFFF               	dw	65535	; assembler added errata NOP
 19398                           
 19399                           ; BSR set to: 0
 19400                           
 19401                           ; BSR set to: 0
 19402                           
 19403                           ; BSR set to: 0
 19404  000488  0100               	movlb	0	; () banked
 19405  00048A  07A8               	decf	__doprnt@len& (0+255),f,b
 19406  00048C  A0D8               	btfss	status,0,c
 19407  00048E  07A9               	decf	(__doprnt@len+1)& (0+255),f,b
 19408  000490  0100               	movlb	0	; () banked
 19409  000492  29A8               	incf	__doprnt@len& (0+255),w,b
 19410  000494  E195               	bnz	l9817
 19411  000496  0100               	movlb	0	; () banked
 19412  000498  29A9               	incf	(__doprnt@len+1)& (0+255),w,b
 19413  00049A  B4D8               	btfsc	status,2,c
 19414  00049C  EF5B  F008         	goto	u10210
 19415  0004A0  D78E               	goto	l1256
 19416  0004A2                     l1242:
 19417  0004A2  FFFF               	dw	65535	; assembler added errata NOP
 19418                           
 19419                           ; BSR set to: 0
 19420  0004A4  C09B  FFF6         	movff	__doprnt@f,tblptrl
 19421  0004A8  C09C  FFF7         	movff	__doprnt@f+1,tblptrh
 19422  0004AC  0100               	movlb	0	; () banked
 19423  0004AE  4B9B               	infsnz	__doprnt@f& (0+255),f,b
 19424  0004B0  2B9C               	incf	(__doprnt@f+1)& (0+255),f,b
 19425  0004B2                     	if	0	;tblptru may be non-zero
 19426  0004B2                     	endif
 19427  0004B2                     	if	0	;tblptru may be non-zero
 19428  0004B2                     	endif
 19429  0004B2  0008               	tblrd		*
 19430  0004B4  FFFF               	dw	65535	; errata NOP
 19431  0004B6  CFF5 F0BF          	movff	tablat,__doprnt@c
 19432  0004BA  0100               	movlb	0	; () banked
 19433  0004BC  51BF               	movf	__doprnt@c& (0+255),w,b
 19434                           
 19435                           ; Switch size 1, requested type "space"
 19436                           ; Number of cases is 5, Range of values is 0 to 115
 19437                           ; switch strategies available:
 19438                           ; Name         Instructions Cycles
 19439                           ; simple_byte           16     9 (average)
 19440                           ;	Chosen strategy is simple_byte
 19441  0004BE  0A00               	xorlw	0	; case 0
 19442  0004C0  B4D8               	btfsc	status,2,c
 19443  0004C2  EF6C  F008         	goto	u10220
 19444  0004C6  0A64               	xorlw	100	; case 100
 19445  0004C8  B4D8               	btfsc	status,2,c
 19446  0004CA  D00B               	goto	l1246
 19447  0004CC  0A02               	xorlw	2	; case 102
 19448  0004CE  B4D8               	btfsc	status,2,c
 19449  0004D0  D710               	goto	l1245
 19450  0004D2  0A0F               	xorlw	15	; case 105
 19451  0004D4  B4D8               	btfsc	status,2,c
 19452  0004D6  D005               	goto	l1246
 19453  0004D8  0A1A               	xorlw	26	; case 115
 19454  0004DA  B4D8               	btfsc	status,2,c
 19455  0004DC  D70E               	goto	l1249
 19456  0004DE  EF5B  F008         	goto	u10210
 19457  0004E2                     l1246:
 19458  0004E2  FFFF               	dw	65535	; assembler added errata NOP
 19459                           
 19460                           ; BSR set to: 0
 19461                           ;doprnt.c: 825: if(flag & (0x700)) {
 19462                           
 19463                           ; BSR set to: 0
 19464  0004E4  0E07               	movlw	7
 19465  0004E6  0100               	movlb	0	; () banked
 19466  0004E8  15AD               	andwf	(__doprnt@flag+1)& (0+255),w,b
 19467  0004EA  B4D8               	btfsc	status,2,c
 19468  0004EC  EFF2  F006         	goto	l1261
 19469                           
 19470                           ; BSR set to: 0
 19471                           ;doprnt.c: 827: if(flag & 0x1000)
 19472  0004F0  0100               	movlb	0	; () banked
 19473  0004F2  A9AD               	btfss	(__doprnt@flag+1)& (0+255),4,b
 19474  0004F4  D005               	goto	l1262
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;doprnt.c: 829: prec = 6;
 19478  0004F6  0E00               	movlw	0
 19479  0004F8  0100               	movlb	0	; () banked
 19480  0004FA  6FBE               	movwf	(__doprnt@prec+1)& (0+255),b
 19481  0004FC  0E06               	movlw	6
 19482  0004FE  6FBD               	movwf	__doprnt@prec& (0+255),b
 19483  000500                     l1262:
 19484  000500  FFFF               	dw	65535	; assembler added errata NOP
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 19488                           
 19489                           ; BSR set to: 0
 19490  000502  C09D  FFD9         	movff	__doprnt@ap,fsr2l
 19491  000506  C09E  FFDA         	movff	__doprnt@ap+1,fsr2h
 19492  00050A  CFDF F09F          	movff	indf2,??__doprnt
 19493  00050E  0E03               	movlw	3
 19494  000510  26DE               	addwf	postinc2,f,c
 19495  000512  CFDF F0A0          	movff	indf2,??__doprnt+1
 19496  000516  0E00               	movlw	0
 19497  000518  22DD               	addwfc	postdec2,f,c
 19498  00051A  C09F  FFD9         	movff	??__doprnt,fsr2l
 19499  00051E  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 19500  000522  CFDE F0BA          	movff	postinc2,__doprnt@fval
 19501  000526  CFDE F0BB          	movff	postinc2,__doprnt@fval+1
 19502  00052A  CFDD F0BC          	movff	postdec2,__doprnt@fval+2
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;doprnt.c: 831: if(fval < 0.0) {
 19506  00052E  0100               	movlb	0	; () banked
 19507  000530  AFBC               	btfss	(__doprnt@fval+2)& (0+255),7,b
 19508  000532  D011               	goto	l1263
 19509                           
 19510                           ; BSR set to: 0
 19511                           ;doprnt.c: 832: fval = -fval;
 19512  000534  C0BA  F01C         	movff	__doprnt@fval,___ftneg@f1
 19513  000538  C0BB  F01D         	movff	__doprnt@fval+1,___ftneg@f1+1
 19514  00053C  C0BC  F01E         	movff	__doprnt@fval+2,___ftneg@f1+2
 19515  000540  ECFB  F028         	call	___ftneg
 19516  000544  C01C  F0BA         	movff	?___ftneg,__doprnt@fval
 19517  000548  C01D  F0BB         	movff	?___ftneg+1,__doprnt@fval+1
 19518  00054C  C01E  F0BC         	movff	?___ftneg+2,__doprnt@fval+2
 19519                           
 19520                           ;doprnt.c: 833: flag |= 0x03;
 19521  000550  0E03               	movlw	3
 19522  000552  0100               	movlb	0	; () banked
 19523  000554  13AC               	iorwf	__doprnt@flag& (0+255),f,b
 19524  000556                     l1263:
 19525  000556  FFFF               	dw	65535	; assembler added errata NOP
 19526                           
 19527                           ; BSR set to: 0
 19528                           ;doprnt.c: 834: }
 19529                           ;doprnt.c: 835: exp = 0;
 19530                           
 19531                           ; BSR set to: 0
 19532  000558  0E00               	movlw	0
 19533  00055A  0100               	movlb	0	; () banked
 19534  00055C  6FB1               	movwf	(__doprnt@exp+1)& (0+255),b
 19535  00055E  0E00               	movlw	0
 19536  000560  6FB0               	movwf	__doprnt@exp& (0+255),b
 19537                           
 19538                           ; BSR set to: 0
 19539                           ;doprnt.c: 836: if( fval!=0) {
 19540  000562  0100               	movlb	0	; () banked
 19541  000564  51BA               	movf	__doprnt@fval& (0+255),w,b
 19542  000566  0100               	movlb	0	; () banked
 19543  000568  11BB               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 19544  00056A  0100               	movlb	0	; () banked
 19545  00056C  11BC               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 19546  00056E  B4D8               	btfsc	status,2,c
 19547  000570  D095               	goto	l1268
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 19551  000572  0E82               	movlw	130
 19552  000574  0100               	movlb	0	; () banked
 19553  000576  6F9F               	movwf	??__doprnt& (0+255),b
 19554  000578  0EFF               	movlw	255
 19555  00057A  0100               	movlb	0	; () banked
 19556  00057C  6FA0               	movwf	(??__doprnt+1)& (0+255),b
 19557  00057E  C0BA  F0A1         	movff	__doprnt@fval,??__doprnt+2
 19558  000582  C0BB  F0A2         	movff	__doprnt@fval+1,??__doprnt+3
 19559  000586  C0BC  F0A3         	movff	__doprnt@fval+2,??__doprnt+4
 19560  00058A  C0BD  F0A4         	movff	__doprnt@fval+3,??__doprnt+5
 19561  00058E  0E10               	movlw	16
 19562  000590  D007               	goto	u9760
 19563  000592                     u9765:
 19564  000592  FFFF               	dw	65535	; assembler added errata NOP
 19565  000594  0100               	movlb	0	; () banked
 19566  000596  90D8               	bcf	status,0,c
 19567  000598  33A4               	rrcf	(??__doprnt+5)& (0+255),f,b
 19568  00059A  33A3               	rrcf	(??__doprnt+4)& (0+255),f,b
 19569  00059C  33A2               	rrcf	(??__doprnt+3)& (0+255),f,b
 19570  00059E  33A1               	rrcf	(??__doprnt+2)& (0+255),f,b
 19571  0005A0                     u9760:
 19572  0005A0  FFFF               	dw	65535	; assembler added errata NOP
 19573  0005A2  2EE8               	decfsz	wreg,f,c
 19574  0005A4  D7F6               	goto	u9765
 19575  0005A6  0100               	movlb	0	; () banked
 19576  0005A8  51A1               	movf	(??__doprnt+2)& (0+255),w,b
 19577  0005AA  0100               	movlb	0	; () banked
 19578  0005AC  259F               	addwf	??__doprnt& (0+255),w,b
 19579  0005AE  0100               	movlb	0	; () banked
 19580  0005B0  6FB0               	movwf	__doprnt@exp& (0+255),b
 19581  0005B2  0E00               	movlw	0
 19582  0005B4  0100               	movlb	0	; () banked
 19583  0005B6  21A0               	addwfc	(??__doprnt+1)& (0+255),w,b
 19584  0005B8  0100               	movlb	0	; () banked
 19585  0005BA  6FB1               	movwf	(__doprnt@exp+1)& (0+255),b
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;doprnt.c: 838: exp--;
 19589  0005BC  0100               	movlb	0	; () banked
 19590  0005BE  07B0               	decf	__doprnt@exp& (0+255),f,b
 19591  0005C0  A0D8               	btfss	status,0,c
 19592  0005C2  07B1               	decf	(__doprnt@exp+1)& (0+255),f,b
 19593                           
 19594                           ; BSR set to: 0
 19595                           ;doprnt.c: 839: exp *= 3;
 19596  0005C4  C0B0  F027         	movff	__doprnt@exp,___wmul@multiplier
 19597  0005C8  C0B1  F028         	movff	__doprnt@exp+1,___wmul@multiplier+1
 19598  0005CC  0E00               	movlw	0
 19599  0005CE  6E2A               	movwf	___wmul@multiplicand+1,c
 19600  0005D0  0E03               	movlw	3
 19601  0005D2  6E29               	movwf	___wmul@multiplicand,c
 19602  0005D4  EC10  F029         	call	___wmul	;wreg free
 19603  0005D8  C027  F0B0         	movff	?___wmul,__doprnt@exp
 19604  0005DC  C028  F0B1         	movff	?___wmul+1,__doprnt@exp+1
 19605                           
 19606                           ;doprnt.c: 840: exp /= 10;
 19607  0005E0  C0B0  F01F         	movff	__doprnt@exp,___awdiv@dividend
 19608  0005E4  C0B1  F020         	movff	__doprnt@exp+1,___awdiv@dividend+1
 19609  0005E8  0E00               	movlw	0
 19610  0005EA  6E22               	movwf	___awdiv@divisor+1,c
 19611  0005EC  0E0A               	movlw	10
 19612  0005EE  6E21               	movwf	___awdiv@divisor,c
 19613  0005F0  EC2E  F031         	call	___awdiv	;wreg free
 19614  0005F4  C01F  F0B0         	movff	?___awdiv,__doprnt@exp
 19615  0005F8  C020  F0B1         	movff	?___awdiv+1,__doprnt@exp+1
 19616                           
 19617                           ;doprnt.c: 841: if(exp < 0)
 19618  0005FC  0100               	movlb	0	; () banked
 19619  0005FE  AFB1               	btfss	(__doprnt@exp+1)& (0+255),7,b
 19620  000600  D004               	goto	l1265
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;doprnt.c: 842: exp--;
 19624  000602  0100               	movlb	0	; () banked
 19625  000604  07B0               	decf	__doprnt@exp& (0+255),f,b
 19626  000606  A0D8               	btfss	status,0,c
 19627  000608  07B1               	decf	(__doprnt@exp+1)& (0+255),f,b
 19628  00060A                     l1265:
 19629  00060A  FFFF               	dw	65535	; assembler added errata NOP
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 19633                           
 19634                           ; BSR set to: 0
 19635  00060C  0100               	movlb	0	; () banked
 19636  00060E  51B0               	movf	__doprnt@exp& (0+255),w,b
 19637  000610  0800               	sublw	0
 19638  000612  EC81  F012         	call	_scale
 19639  000616  C07B  F0B6         	movff	?_scale,__doprnt@tmpval
 19640  00061A  C07C  F0B7         	movff	?_scale+1,__doprnt@tmpval+1
 19641  00061E  C07D  F0B8         	movff	?_scale+2,__doprnt@tmpval+2
 19642                           
 19643                           ;doprnt.c: 847: tmpval.integ *= fval;
 19644  000622  C0B6  F06C         	movff	__doprnt@tmpval,___ftmul@f1
 19645  000626  C0B7  F06D         	movff	__doprnt@tmpval+1,___ftmul@f1+1
 19646  00062A  C0B8  F06E         	movff	__doprnt@tmpval+2,___ftmul@f1+2
 19647  00062E  C0BA  F06F         	movff	__doprnt@fval,___ftmul@f2
 19648  000632  C0BB  F070         	movff	__doprnt@fval+1,___ftmul@f2+1
 19649  000636  C0BC  F071         	movff	__doprnt@fval+2,___ftmul@f2+2
 19650  00063A  EC53  F03C         	call	___ftmul	;wreg free
 19651  00063E  C06C  F0B6         	movff	?___ftmul,__doprnt@tmpval
 19652  000642  C06D  F0B7         	movff	?___ftmul+1,__doprnt@tmpval+1
 19653  000646  C06E  F0B8         	movff	?___ftmul+2,__doprnt@tmpval+2
 19654                           
 19655                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 19656  00064A  C0B6  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19657  00064E  C0B7  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19658  000652  C0B8  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19659  000656  0E00               	movlw	0
 19660  000658  6E22               	movwf	___ftge@ff2,c
 19661  00065A  0E80               	movlw	128
 19662  00065C  6E23               	movwf	___ftge@ff2+1,c
 19663  00065E  0E3F               	movlw	63
 19664  000660  6E24               	movwf	___ftge@ff2+2,c
 19665  000662  EC7A  F031         	call	___ftge	;wreg free
 19666  000666  B0D8               	btfsc	status,0,c
 19667  000668  D005               	goto	l1266
 19668                           
 19669                           ;doprnt.c: 849: exp--;
 19670  00066A  0100               	movlb	0	; () banked
 19671  00066C  07B0               	decf	__doprnt@exp& (0+255),f,b
 19672  00066E  A0D8               	btfss	status,0,c
 19673  000670  07B1               	decf	(__doprnt@exp+1)& (0+255),f,b
 19674  000672  D014               	goto	l1268
 19675  000674                     l1266:
 19676  000674  FFFF               	dw	65535	; assembler added errata NOP
 19677                           
 19678                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 19679                           
 19680                           ; BSR set to: 0
 19681  000676  C0B6  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19682  00067A  C0B7  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19683  00067E  C0B8  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19684  000682  0E00               	movlw	0
 19685  000684  6E22               	movwf	___ftge@ff2,c
 19686  000686  0E20               	movlw	32
 19687  000688  6E23               	movwf	___ftge@ff2+1,c
 19688  00068A  0E41               	movlw	65
 19689  00068C  6E24               	movwf	___ftge@ff2+2,c
 19690  00068E  EC7A  F031         	call	___ftge	;wreg free
 19691  000692  A0D8               	btfss	status,0,c
 19692  000694  D003               	goto	l1268
 19693                           
 19694                           ;doprnt.c: 851: exp++;
 19695  000696  0100               	movlb	0	; () banked
 19696  000698  4BB0               	infsnz	__doprnt@exp& (0+255),f,b
 19697  00069A  2BB1               	incf	(__doprnt@exp+1)& (0+255),f,b
 19698  00069C                     l1268:
 19699  00069C  FFFF               	dw	65535	; assembler added errata NOP
 19700                           
 19701                           ;doprnt.c: 852: }
 19702                           ;doprnt.c: 1112: if(prec <= 12)
 19703                           
 19704                           ; BSR set to: 0
 19705                           
 19706                           ; BSR set to: 0
 19707                           
 19708                           ; BSR set to: 0
 19709  00069E  0100               	movlb	0	; () banked
 19710  0006A0  BFBE               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 19711  0006A2  D008               	goto	u9800
 19712  0006A4  0100               	movlb	0	; () banked
 19713  0006A6  51BE               	movf	(__doprnt@prec+1)& (0+255),w,b
 19714  0006A8  E11F               	bnz	l9885
 19715  0006AA  0E0D               	movlw	13
 19716  0006AC  0100               	movlb	0	; () banked
 19717  0006AE  5DBD               	subwf	__doprnt@prec& (0+255),w,b
 19718  0006B0  B0D8               	btfsc	status,0,c
 19719  0006B2  D019               	goto	l1269
 19720  0006B4                     u9800:
 19721  0006B4  FFFF               	dw	65535	; assembler added errata NOP
 19722                           
 19723                           ; BSR set to: 0
 19724                           ;doprnt.c: 1113: fval += fround(prec);
 19725  0006B6  C0BA  F060         	movff	__doprnt@fval,___ftadd@f1
 19726  0006BA  C0BB  F061         	movff	__doprnt@fval+1,___ftadd@f1+1
 19727  0006BE  C0BC  F062         	movff	__doprnt@fval+2,___ftadd@f1+2
 19728  0006C2  0100               	movlb	0	; () banked
 19729  0006C4  51BD               	movf	__doprnt@prec& (0+255),w,b
 19730  0006C6  EC12  F01A         	call	_fround
 19731  0006CA  C07B  F063         	movff	?_fround,___ftadd@f2
 19732  0006CE  C07C  F064         	movff	?_fround+1,___ftadd@f2+1
 19733  0006D2  C07D  F065         	movff	?_fround+2,___ftadd@f2+2
 19734  0006D6  EC45  F016         	call	___ftadd	;wreg free
 19735  0006DA  C060  F0BA         	movff	?___ftadd,__doprnt@fval
 19736  0006DE  C061  F0BB         	movff	?___ftadd+1,__doprnt@fval+1
 19737  0006E2  C062  F0BC         	movff	?___ftadd+2,__doprnt@fval+2
 19738  0006E6                     l1269:
 19739  0006E6  FFFF               	dw	65535	; assembler added errata NOP
 19740  0006E8                     l9885:
 19741                           
 19742                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 19743  0006E8  0100               	movlb	0	; () banked
 19744  0006EA  BFB1               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 19745  0006EC  D008               	goto	u9810
 19746  0006EE  0100               	movlb	0	; () banked
 19747  0006F0  51B1               	movf	(__doprnt@exp+1)& (0+255),w,b
 19748  0006F2  E12C               	bnz	l9893
 19749  0006F4  0E0A               	movlw	10
 19750  0006F6  0100               	movlb	0	; () banked
 19751  0006F8  5DB0               	subwf	__doprnt@exp& (0+255),w,b
 19752  0006FA  B0D8               	btfsc	status,0,c
 19753  0006FC  D026               	goto	u9840
 19754  0006FE                     u9810:
 19755  0006FE  FFFF               	dw	65535	; assembler added errata NOP
 19756                           
 19757                           ; BSR set to: 0
 19758  000700  0100               	movlb	0	; () banked
 19759  000702  51BA               	movf	__doprnt@fval& (0+255),w,b
 19760  000704  0100               	movlb	0	; () banked
 19761  000706  11BB               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 19762  000708  0100               	movlb	0	; () banked
 19763  00070A  11BC               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 19764  00070C  B4D8               	btfsc	status,2,c
 19765  00070E  D062               	goto	l1270
 19766                           
 19767                           ; BSR set to: 0
 19768  000710  C0BA  F08A         	movff	__doprnt@fval,___fttol@f1
 19769  000714  C0BB  F08B         	movff	__doprnt@fval+1,___fttol@f1+1
 19770  000718  C0BC  F08C         	movff	__doprnt@fval+2,___fttol@f1+2
 19771  00071C  EC16  F03B         	call	___fttol	;wreg free
 19772  000720  0100               	movlb	0	; () banked
 19773  000722  518A               	movf	?___fttol& (0+255),w,b
 19774  000724  0100               	movlb	0	; () banked
 19775  000726  118B               	iorwf	(?___fttol+1)& (0+255),w,b
 19776  000728  0100               	movlb	0	; () banked
 19777  00072A  118C               	iorwf	(?___fttol+2)& (0+255),w,b
 19778  00072C  0100               	movlb	0	; () banked
 19779  00072E  118D               	iorwf	(?___fttol+3)& (0+255),w,b
 19780  000730  A4D8               	btfss	status,2,c
 19781  000732  D050               	goto	l1270
 19782                           
 19783                           ; BSR set to: 0
 19784  000734  0100               	movlb	0	; () banked
 19785  000736  BFB1               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 19786  000738  D04D               	goto	l1270
 19787  00073A  0100               	movlb	0	; () banked
 19788  00073C  51B1               	movf	(__doprnt@exp+1)& (0+255),w,b
 19789  00073E  E106               	bnz	l9893
 19790  000740  0E02               	movlw	2
 19791  000742  0100               	movlb	0	; () banked
 19792  000744  5DB0               	subwf	__doprnt@exp& (0+255),w,b
 19793  000746  A0D8               	btfss	status,0,c
 19794  000748  D045               	goto	l1270
 19795  00074A                     u9840:
 19796  00074A  FFFF               	dw	65535	; assembler added errata NOP
 19797  00074C                     l9893:
 19798                           
 19799                           ; BSR set to: 0
 19800                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 19801  00074C  C0B6  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19802  000750  C0B7  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19803  000754  C0B8  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19804  000758  0E70               	movlw	112
 19805  00075A  6E22               	movwf	___ftge@ff2,c
 19806  00075C  0E89               	movlw	137
 19807  00075E  6E23               	movwf	___ftge@ff2+1,c
 19808  000760  0E40               	movlw	64
 19809  000762  6E24               	movwf	___ftge@ff2+2,c
 19810  000764  EC7A  F031         	call	___ftge	;wreg free
 19811  000768  B0D8               	btfsc	status,0,c
 19812  00076A  D003               	goto	l1273
 19813                           
 19814                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 19815  00076C  0100               	movlb	0	; () banked
 19816  00076E  0EF7               	movlw	247
 19817  000770  D003               	goto	L20
 19818  000772                     l1273:
 19819  000772  FFFF               	dw	65535	; assembler added errata NOP
 19820                           
 19821                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 19822                           
 19823                           ; BSR set to: 0
 19824  000774  0100               	movlb	0	; () banked
 19825  000776  0EF8               	movlw	248
 19826  000778                     L20:
 19827  000778  FFFF               	dw	65535	; assembler added errata NOP
 19828  00077A  27B0               	addwf	__doprnt@exp& (0+255),f,b
 19829  00077C  0EFF               	movlw	255
 19830  00077E  23B1               	addwfc	(__doprnt@exp+1)& (0+255),f,b
 19831                           
 19832                           ; BSR set to: 0
 19833                           ;doprnt.c: 1124: }
 19834                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 19835                           
 19836                           ; BSR set to: 0
 19837  000780  0100               	movlb	0	; () banked
 19838  000782  51B0               	movf	__doprnt@exp& (0+255),w,b
 19839  000784  EC81  F012         	call	_scale
 19840  000788  C07B  F0B6         	movff	?_scale,__doprnt@tmpval
 19841  00078C  C07C  F0B7         	movff	?_scale+1,__doprnt@tmpval+1
 19842  000790  C07D  F0B8         	movff	?_scale+2,__doprnt@tmpval+2
 19843                           
 19844                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 19845  000794  C0BA  F019         	movff	__doprnt@fval,__tdiv_to_l_@f1
 19846  000798  C0BB  F01A         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
 19847  00079C  C0BC  F01B         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
 19848  0007A0  C0B6  F01C         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
 19849  0007A4  C0B7  F01D         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
 19850  0007A8  C0B8  F01E         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
 19851  0007AC  ECCC  F038         	call	__tdiv_to_l_	;wreg free
 19852  0007B0  C019  F0B2         	movff	?__tdiv_to_l_,__doprnt@val
 19853  0007B4  C01A  F0B3         	movff	?__tdiv_to_l_+1,__doprnt@val+1
 19854  0007B8  C01B  F0B4         	movff	?__tdiv_to_l_+2,__doprnt@val+2
 19855  0007BC  C01C  F0B5         	movff	?__tdiv_to_l_+3,__doprnt@val+3
 19856                           
 19857                           ;doprnt.c: 1129: fval = 0.0;
 19858  0007C0  0E00               	movlw	0
 19859  0007C2  0100               	movlb	0	; () banked
 19860  0007C4  6FBA               	movwf	__doprnt@fval& (0+255),b
 19861  0007C6  0E00               	movlw	0
 19862  0007C8  0100               	movlb	0	; () banked
 19863  0007CA  6FBB               	movwf	(__doprnt@fval+1)& (0+255),b
 19864  0007CC  0E00               	movlw	0
 19865  0007CE  0100               	movlb	0	; () banked
 19866  0007D0  6FBC               	movwf	(__doprnt@fval+2)& (0+255),b
 19867                           
 19868                           ;doprnt.c: 1130: } else {
 19869  0007D2  D034               	goto	l1279
 19870  0007D4                     l1270:
 19871  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;doprnt.c: 1131: val = (unsigned long)fval;
 19875                           
 19876                           ; BSR set to: 0
 19877  0007D6  C0BA  F08A         	movff	__doprnt@fval,___fttol@f1
 19878  0007DA  C0BB  F08B         	movff	__doprnt@fval+1,___fttol@f1+1
 19879  0007DE  C0BC  F08C         	movff	__doprnt@fval+2,___fttol@f1+2
 19880  0007E2  EC16  F03B         	call	___fttol	;wreg free
 19881  0007E6  C08A  F0B2         	movff	?___fttol,__doprnt@val
 19882  0007EA  C08B  F0B3         	movff	?___fttol+1,__doprnt@val+1
 19883  0007EE  C08C  F0B4         	movff	?___fttol+2,__doprnt@val+2
 19884  0007F2  C08D  F0B5         	movff	?___fttol+3,__doprnt@val+3
 19885                           
 19886                           ;doprnt.c: 1132: fval -= (double)val;
 19887  0007F6  C0BA  F06C         	movff	__doprnt@fval,___ftsub@f1
 19888  0007FA  C0BB  F06D         	movff	__doprnt@fval+1,___ftsub@f1+1
 19889  0007FE  C0BC  F06E         	movff	__doprnt@fval+2,___ftsub@f1+2
 19890  000802  C0B2  F021         	movff	__doprnt@val,___lltoft@c
 19891  000806  C0B3  F022         	movff	__doprnt@val+1,___lltoft@c+1
 19892  00080A  C0B4  F023         	movff	__doprnt@val+2,___lltoft@c+2
 19893  00080E  C0B5  F024         	movff	__doprnt@val+3,___lltoft@c+3
 19894  000812  EC57  F02D         	call	___lltoft	;wreg free
 19895  000816  C021  F06F         	movff	?___lltoft,___ftsub@f2
 19896  00081A  C022  F070         	movff	?___lltoft+1,___ftsub@f2+1
 19897  00081E  C023  F071         	movff	?___lltoft+2,___ftsub@f2+2
 19898  000822  EC23  F02C         	call	___ftsub	;wreg free
 19899  000826  C06C  F0BA         	movff	?___ftsub,__doprnt@fval
 19900  00082A  C06D  F0BB         	movff	?___ftsub+1,__doprnt@fval+1
 19901  00082E  C06E  F0BC         	movff	?___ftsub+2,__doprnt@fval+2
 19902                           
 19903                           ;doprnt.c: 1133: exp = 0;
 19904  000832  0E00               	movlw	0
 19905  000834  0100               	movlb	0	; () banked
 19906  000836  6FB1               	movwf	(__doprnt@exp+1)& (0+255),b
 19907  000838  0E00               	movlw	0
 19908  00083A  6FB0               	movwf	__doprnt@exp& (0+255),b
 19909  00083C                     l1279:
 19910  00083C  FFFF               	dw	65535	; assembler added errata NOP
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;doprnt.c: 1134: }
 19914                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 19915                           
 19916                           ; BSR set to: 0
 19917  00083E  0E01               	movlw	1
 19918  000840  0100               	movlb	0	; () banked
 19919  000842  6FBF               	movwf	__doprnt@c& (0+255),b
 19920  000844                     l9913:
 19921  000844  FFFF               	dw	65535	; assembler added errata NOP
 19922                           
 19923                           ; BSR set to: 0
 19924  000846  0E0A               	movlw	10
 19925  000848  0100               	movlb	0	; () banked
 19926  00084A  19BF               	xorwf	__doprnt@c& (0+255),w,b
 19927  00084C  B4D8               	btfsc	status,2,c
 19928  00084E  D022               	goto	u9880
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;doprnt.c: 1137: if(val < dpowers[c])
 19932                           
 19933                           ; BSR set to: 0
 19934                           
 19935                           ; BSR set to: 0
 19936  000850  0100               	movlb	0	; () banked
 19937  000852  51BF               	movf	__doprnt@c& (0+255),w,b
 19938  000854  0D04               	mullw	4
 19939  000856  0E23               	movlw	low _dpowers
 19940  000858  24F3               	addwf	prodl,w,c
 19941  00085A  6EF6               	movwf	tblptrl,c
 19942  00085C  0E7D               	movlw	high _dpowers
 19943  00085E  20F4               	addwfc	prodh,w,c
 19944  000860  6EF7               	movwf	tblptrh,c
 19945  000862                     	if	0	;There are less than 3 active tblptr bytes
 19946  000862                     	endif
 19947  000862  0009               	tblrd		*+
 19948  000864  FFFF               	dw	65535	; errata NOP
 19949  000866  50F5               	movf	tablat,w,c
 19950  000868  0100               	movlb	0	; () banked
 19951  00086A  5DB2               	subwf	__doprnt@val& (0+255),w,b
 19952  00086C  0009               	tblrd		*+
 19953  00086E  FFFF               	dw	65535	; errata NOP
 19954  000870  50F5               	movf	tablat,w,c
 19955  000872  0100               	movlb	0	; () banked
 19956  000874  59B3               	subwfb	(__doprnt@val+1)& (0+255),w,b
 19957  000876  0009               	tblrd		*+
 19958  000878  FFFF               	dw	65535	; errata NOP
 19959  00087A  50F5               	movf	tablat,w,c
 19960  00087C  0100               	movlb	0	; () banked
 19961  00087E  59B4               	subwfb	(__doprnt@val+2)& (0+255),w,b
 19962  000880  0009               	tblrd		*+
 19963  000882  FFFF               	dw	65535	; errata NOP
 19964  000884  50F5               	movf	tablat,w,c
 19965  000886  0100               	movlb	0	; () banked
 19966  000888  59B5               	subwfb	(__doprnt@val+3)& (0+255),w,b
 19967  00088A  A0D8               	btfss	status,0,c
 19968  00088C  D003               	goto	u9880
 19969                           
 19970                           ; BSR set to: 0
 19971                           
 19972                           ; BSR set to: 0
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;doprnt.c: 1138: break;
 19976  00088E  0100               	movlb	0	; () banked
 19977  000890  2BBF               	incf	__doprnt@c& (0+255),f,b
 19978  000892  D7D8               	goto	l9913
 19979  000894                     u9880:
 19980  000894  FFFF               	dw	65535	; assembler added errata NOP
 19981                           
 19982                           ; BSR set to: 0
 19983                           ;doprnt.c: 1175: {
 19984                           ;doprnt.c: 1188: if(flag & 0x03)
 19985                           
 19986                           ; BSR set to: 0
 19987  000896  0E03               	movlw	3
 19988  000898  0100               	movlb	0	; () banked
 19989  00089A  15AC               	andwf	__doprnt@flag& (0+255),w,b
 19990  00089C  0100               	movlb	0	; () banked
 19991  00089E  6F9F               	movwf	??__doprnt& (0+255),b
 19992  0008A0  0E00               	movlw	0
 19993  0008A2  0100               	movlb	0	; () banked
 19994  0008A4  15AD               	andwf	(__doprnt@flag+1)& (0+255),w,b
 19995  0008A6  0100               	movlb	0	; () banked
 19996  0008A8  6FA0               	movwf	(??__doprnt+1)& (0+255),b
 19997  0008AA  0100               	movlb	0	; () banked
 19998  0008AC  519F               	movf	??__doprnt& (0+255),w,b
 19999  0008AE  0100               	movlb	0	; () banked
 20000  0008B0  11A0               	iorwf	(??__doprnt+1)& (0+255),w,b
 20001  0008B2  B4D8               	btfsc	status,2,c
 20002  0008B4  D0B8               	goto	l1289
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;doprnt.c: 1190: if(pb->func) (pb->func('-')),(++ccnt); else ((*pb->ptr++ = '-'),(++ccnt
      +                          ));
 20006  0008B6  0100               	movlb	0	; () banked
 20007  0008B8  EE20 F002          	lfsr	2,2
 20008  0008BC  5199               	movf	__doprnt@pb& (0+255),w,b
 20009  0008BE  26D9               	addwf	fsr2l,f,c
 20010  0008C0  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20011  0008C2  22DA               	addwfc	fsr2h,f,c
 20012  0008C4  50DE               	movf	postinc2,w,c
 20013  0008C6  10DE               	iorwf	postinc2,w,c
 20014  0008C8  B4D8               	btfsc	status,2,c
 20015  0008CA  D017               	goto	l1284
 20016                           
 20017                           ; BSR set to: 0
 20018  0008CC  0100               	movlb	0	; () banked
 20019  0008CE  EE20 F002          	lfsr	2,2
 20020  0008D2  5199               	movf	__doprnt@pb& (0+255),w,b
 20021  0008D4  26D9               	addwf	fsr2l,f,c
 20022  0008D6  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20023  0008D8  22DA               	addwfc	fsr2h,f,c
 20024  0008DA  D801               	call	u9918
 20025  0008DC  D0A0               	goto	l9951
 20026  0008DE                     u9918:
 20027  0008DE  FFFF               	dw	65535	; assembler added errata NOP
 20028  0008E0  0005               	push	
 20029  0008E2  6EFA               	movwf	pclath,c
 20030  0008E4  50DE               	movf	postinc2,w,c
 20031  0008E6  6EFD               	movwf	tosl,c
 20032  0008E8  50DE               	movf	postinc2,w,c
 20033  0008EA  6EFE               	movwf	tosh,c
 20034  0008EC  50F8               	movf	tblptru,w,c
 20035  0008EE  6EFF               	movwf	tosu,c
 20036  0008F0  50FA               	movf	pclath,w,c
 20037  0008F2  0E2D               	movlw	45
 20038  0008F4  0012               	return		;indir
 20039  0008F6  FFFF               	dw	65535	; errata NOP
 20040  0008F8  D092               	goto	l9951
 20041  0008FA                     l1284:
 20042  0008FA  FFFF               	dw	65535	; assembler added errata NOP
 20043                           
 20044                           ; BSR set to: 0
 20045                           
 20046                           ; BSR set to: 0
 20047  0008FC  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20048  000900  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20049  000904  CFDE F09F          	movff	postinc2,??__doprnt
 20050  000908  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20051  00090C  C09F  FFD9         	movff	??__doprnt,fsr2l
 20052  000910  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20053  000914  0E2D               	movlw	45
 20054  000916  D07A               	goto	L31
 20055  000918  FFFF               	dw	65535	; assembler added errata NOP
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;doprnt.c: 1200: {
 20059                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 20060                           
 20061                           ; BSR set to: 0
 20062  00091A  C0B2  F019         	movff	__doprnt@val,___lldiv@dividend
 20063  00091E  C0B3  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 20064  000922  C0B4  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 20065  000926  C0B5  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 20066  00092A  0100               	movlb	0	; () banked
 20067  00092C  51BF               	movf	__doprnt@c& (0+255),w,b
 20068  00092E  0D04               	mullw	4
 20069  000930  0E23               	movlw	low _dpowers
 20070  000932  24F3               	addwf	prodl,w,c
 20071  000934  6EF6               	movwf	tblptrl,c
 20072  000936  0E7D               	movlw	high _dpowers
 20073  000938  20F4               	addwfc	prodh,w,c
 20074  00093A  6EF7               	movwf	tblptrh,c
 20075  00093C                     	if	0	;There are less than 3 active tblptr bytes
 20076  00093C                     	endif
 20077  00093C  0009               	tblrd		*+
 20078  00093E  FFFF               	dw	65535	; errata NOP
 20079  000940  CFF5 F01D          	movff	tablat,___lldiv@divisor
 20080  000944  0009               	tblrd		*+
 20081  000946  FFFF               	dw	65535	; errata NOP
 20082  000948  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 20083  00094C  0009               	tblrd		*+
 20084  00094E  FFFF               	dw	65535	; errata NOP
 20085  000950  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 20086  000954  000A               	tblrd		*-
 20087  000956  FFFF               	dw	65535	; errata NOP
 20088  000958  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 20089  00095C  EC9D  F030         	call	___lldiv
 20090  000960  C019  F0B6         	movff	?___lldiv,__doprnt@tmpval
 20091  000964  C01A  F0B7         	movff	?___lldiv+1,__doprnt@tmpval+1
 20092  000968  C01B  F0B8         	movff	?___lldiv+2,__doprnt@tmpval+2
 20093  00096C  C01C  F0B9         	movff	?___lldiv+3,__doprnt@tmpval+3
 20094                           
 20095                           ;doprnt.c: 1202: tmpval.vd %= 10;
 20096  000970  C0B6  F026         	movff	__doprnt@tmpval,___llmod@dividend
 20097  000974  C0B7  F027         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 20098  000978  C0B8  F028         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 20099  00097C  C0B9  F029         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 20100  000980  0E0A               	movlw	10
 20101  000982  6E2A               	movwf	___llmod@divisor,c
 20102  000984  0E00               	movlw	0
 20103  000986  6E2B               	movwf	___llmod@divisor+1,c
 20104  000988  0E00               	movlw	0
 20105  00098A  6E2C               	movwf	___llmod@divisor+2,c
 20106  00098C  0E00               	movlw	0
 20107  00098E  6E2D               	movwf	___llmod@divisor+3,c
 20108  000990  EC5D  F02E         	call	___llmod	;wreg free
 20109  000994  C026  F0B6         	movff	?___llmod,__doprnt@tmpval
 20110  000998  C027  F0B7         	movff	?___llmod+1,__doprnt@tmpval+1
 20111  00099C  C028  F0B8         	movff	?___llmod+2,__doprnt@tmpval+2
 20112  0009A0  C029  F0B9         	movff	?___llmod+3,__doprnt@tmpval+3
 20113                           
 20114                           ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)),(++ccnt); else ((*pb->ptr++ = 
      +                          '0' + tmpval.vd),(++ccnt));
 20115  0009A4  0100               	movlb	0	; () banked
 20116  0009A6  EE20 F002          	lfsr	2,2
 20117  0009AA  5199               	movf	__doprnt@pb& (0+255),w,b
 20118  0009AC  26D9               	addwf	fsr2l,f,c
 20119  0009AE  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20120  0009B0  22DA               	addwfc	fsr2h,f,c
 20121  0009B2  50DE               	movf	postinc2,w,c
 20122  0009B4  10DE               	iorwf	postinc2,w,c
 20123  0009B6  B4D8               	btfsc	status,2,c
 20124  0009B8  D019               	goto	l1288
 20125                           
 20126                           ; BSR set to: 0
 20127  0009BA  0100               	movlb	0	; () banked
 20128  0009BC  EE20 F002          	lfsr	2,2
 20129  0009C0  5199               	movf	__doprnt@pb& (0+255),w,b
 20130  0009C2  26D9               	addwf	fsr2l,f,c
 20131  0009C4  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20132  0009C6  22DA               	addwfc	fsr2h,f,c
 20133  0009C8  D801               	call	u9938
 20134  0009CA  D029               	goto	l9951
 20135  0009CC                     u9938:
 20136  0009CC  FFFF               	dw	65535	; assembler added errata NOP
 20137  0009CE  0005               	push	
 20138  0009D0  6EFA               	movwf	pclath,c
 20139  0009D2  50DE               	movf	postinc2,w,c
 20140  0009D4  6EFD               	movwf	tosl,c
 20141  0009D6  50DE               	movf	postinc2,w,c
 20142  0009D8  6EFE               	movwf	tosh,c
 20143  0009DA  50F8               	movf	tblptru,w,c
 20144  0009DC  6EFF               	movwf	tosu,c
 20145  0009DE  50FA               	movf	pclath,w,c
 20146  0009E0  0100               	movlb	0	; () banked
 20147  0009E2  51B6               	movf	__doprnt@tmpval& (0+255),w,b
 20148  0009E4  0F30               	addlw	48
 20149  0009E6  0012               	return		;indir
 20150  0009E8  FFFF               	dw	65535	; errata NOP
 20151  0009EA  D019               	goto	l9951
 20152  0009EC                     l1288:
 20153  0009EC  FFFF               	dw	65535	; assembler added errata NOP
 20154                           
 20155                           ; BSR set to: 0
 20156                           
 20157                           ; BSR set to: 0
 20158  0009EE  0100               	movlb	0	; () banked
 20159  0009F0  51B6               	movf	__doprnt@tmpval& (0+255),w,b
 20160  0009F2  0F30               	addlw	48
 20161  0009F4  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20162  0009F8  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20163  0009FC  CFDE F09F          	movff	postinc2,??__doprnt
 20164  000A00  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20165  000A04  C09F  FFD9         	movff	??__doprnt,fsr2l
 20166  000A08  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20167  000A0C                     L31:
 20168  000A0C  FFFF               	dw	65535	; assembler added errata NOP
 20169  000A0E  6EDF               	movwf	indf2,c
 20170  000A10  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20171  000A14  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20172  000A18  2ADE               	incf	postinc2,f,c
 20173  000A1A  0E00               	movlw	0
 20174  000A1C  22DD               	addwfc	postdec2,f,c
 20175  000A1E                     l9951:
 20176  000A1E  FFFF               	dw	65535	; assembler added errata NOP
 20177                           
 20178                           ; BSR set to: 0
 20179  000A20  0100               	movlb	0	; () banked
 20180  000A22  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 20181  000A24  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20182  000A26                     l1289:
 20183  000A26  FFFF               	dw	65535	; assembler added errata NOP
 20184                           
 20185                           ; BSR set to: 0
 20186                           
 20187                           ; BSR set to: 0
 20188                           
 20189                           ; BSR set to: 0
 20190  000A28  0100               	movlb	0	; () banked
 20191  000A2A  07BF               	decf	__doprnt@c& (0+255),f,b
 20192  000A2C  0100               	movlb	0	; () banked
 20193  000A2E  29BF               	incf	__doprnt@c& (0+255),w,b
 20194  000A30  B4D8               	btfsc	status,2,c
 20195  000A32  D042               	goto	l1291
 20196  000A34  D771               	goto	l1287
 20197  000A36  FFFF               	dw	65535	; assembler added errata NOP
 20198  000A38                     l9955:
 20199                           
 20200                           ; BSR set to: 0
 20201                           ;doprnt.c: 1208: if(pb->func) (pb->func('0')),(++ccnt); else ((*pb->ptr++ = '0'),(++ccnt
      +                          ));
 20202  000A38  0100               	movlb	0	; () banked
 20203  000A3A  EE20 F002          	lfsr	2,2
 20204  000A3E  5199               	movf	__doprnt@pb& (0+255),w,b
 20205  000A40  26D9               	addwf	fsr2l,f,c
 20206  000A42  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20207  000A44  22DA               	addwfc	fsr2h,f,c
 20208  000A46  50DE               	movf	postinc2,w,c
 20209  000A48  10DE               	iorwf	postinc2,w,c
 20210  000A4A  B4D8               	btfsc	status,2,c
 20211  000A4C  D017               	goto	l1293
 20212                           
 20213                           ; BSR set to: 0
 20214  000A4E  0100               	movlb	0	; () banked
 20215  000A50  EE20 F002          	lfsr	2,2
 20216  000A54  5199               	movf	__doprnt@pb& (0+255),w,b
 20217  000A56  26D9               	addwf	fsr2l,f,c
 20218  000A58  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20219  000A5A  22DA               	addwfc	fsr2h,f,c
 20220  000A5C  D801               	call	u9968
 20221  000A5E  D024               	goto	l9965
 20222  000A60                     u9968:
 20223  000A60  FFFF               	dw	65535	; assembler added errata NOP
 20224  000A62  0005               	push	
 20225  000A64  6EFA               	movwf	pclath,c
 20226  000A66  50DE               	movf	postinc2,w,c
 20227  000A68  6EFD               	movwf	tosl,c
 20228  000A6A  50DE               	movf	postinc2,w,c
 20229  000A6C  6EFE               	movwf	tosh,c
 20230  000A6E  50F8               	movf	tblptru,w,c
 20231  000A70  6EFF               	movwf	tosu,c
 20232  000A72  50FA               	movf	pclath,w,c
 20233  000A74  0E30               	movlw	48
 20234  000A76  0012               	return		;indir
 20235  000A78  FFFF               	dw	65535	; errata NOP
 20236  000A7A  D016               	goto	l9965
 20237  000A7C                     l1293:
 20238  000A7C  FFFF               	dw	65535	; assembler added errata NOP
 20239                           
 20240                           ; BSR set to: 0
 20241                           
 20242                           ; BSR set to: 0
 20243  000A7E  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20244  000A82  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20245  000A86  CFDE F09F          	movff	postinc2,??__doprnt
 20246  000A8A  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20247  000A8E  C09F  FFD9         	movff	??__doprnt,fsr2l
 20248  000A92  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20249  000A96  0E30               	movlw	48
 20250  000A98  6EDF               	movwf	indf2,c
 20251                           
 20252                           ; BSR set to: 0
 20253  000A9A  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20254  000A9E  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20255  000AA2  2ADE               	incf	postinc2,f,c
 20256  000AA4  0E00               	movlw	0
 20257  000AA6  22DD               	addwfc	postdec2,f,c
 20258  000AA8                     l9965:
 20259  000AA8  FFFF               	dw	65535	; assembler added errata NOP
 20260                           
 20261                           ; BSR set to: 0
 20262  000AAA  0100               	movlb	0	; () banked
 20263  000AAC  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 20264  000AAE  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20265                           
 20266                           ; BSR set to: 0
 20267                           ;doprnt.c: 1209: exp--;
 20268                           
 20269                           ; BSR set to: 0
 20270  000AB0  0100               	movlb	0	; () banked
 20271  000AB2  07B0               	decf	__doprnt@exp& (0+255),f,b
 20272  000AB4  A0D8               	btfss	status,0,c
 20273  000AB6  07B1               	decf	(__doprnt@exp+1)& (0+255),f,b
 20274  000AB8                     l1291:
 20275  000AB8  FFFF               	dw	65535	; assembler added errata NOP
 20276                           
 20277                           ; BSR set to: 0
 20278                           
 20279                           ; BSR set to: 0
 20280  000ABA  0100               	movlb	0	; () banked
 20281  000ABC  BFB1               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 20282  000ABE  D007               	goto	u9970
 20283  000AC0  0100               	movlb	0	; () banked
 20284  000AC2  51B1               	movf	(__doprnt@exp+1)& (0+255),w,b
 20285  000AC4  E1B9               	bnz	l9955
 20286  000AC6  0100               	movlb	0	; () banked
 20287  000AC8  05B0               	decf	__doprnt@exp& (0+255),w,b
 20288  000ACA  B0D8               	btfsc	status,0,c
 20289  000ACC  D7B4               	goto	l1292
 20290  000ACE                     u9970:
 20291  000ACE  FFFF               	dw	65535	; assembler added errata NOP
 20292                           
 20293                           ; BSR set to: 0
 20294                           ;doprnt.c: 1210: }
 20295                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 20296                           
 20297                           ; BSR set to: 0
 20298  000AD0  0100               	movlb	0	; () banked
 20299  000AD2  BFBE               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 20300  000AD4  D00C               	goto	l1296
 20301  000AD6  0100               	movlb	0	; () banked
 20302  000AD8  51BE               	movf	(__doprnt@prec+1)& (0+255),w,b
 20303  000ADA  E105               	bnz	u9980
 20304  000ADC  0E09               	movlw	9
 20305  000ADE  0100               	movlb	0	; () banked
 20306  000AE0  5DBD               	subwf	__doprnt@prec& (0+255),w,b
 20307  000AE2  A0D8               	btfss	status,0,c
 20308  000AE4  D004               	goto	l1296
 20309  000AE6                     u9980:
 20310                           
 20311                           ; BSR set to: 0
 20312                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 20313  000AE6  0E08               	movlw	8
 20314  000AE8  0100               	movlb	0	; () banked
 20315  000AEA  6FBF               	movwf	__doprnt@c& (0+255),b
 20316  000AEC  D003               	goto	l1297
 20317  000AEE                     l1296:
 20318  000AEE  FFFF               	dw	65535	; assembler added errata NOP
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;doprnt.c: 1213: else
 20322                           ;doprnt.c: 1214: c = prec;
 20323  000AF0  C0BD  F0BF         	movff	__doprnt@prec,__doprnt@c
 20324  000AF4                     l1297:
 20325  000AF4  FFFF               	dw	65535	; assembler added errata NOP
 20326                           
 20327                           ; BSR set to: 0
 20328                           ;doprnt.c: 1215: prec -= c;
 20329                           
 20330                           ; BSR set to: 0
 20331  000AF6  0100               	movlb	0	; () banked
 20332  000AF8  51BF               	movf	__doprnt@c& (0+255),w,b
 20333  000AFA  0100               	movlb	0	; () banked
 20334  000AFC  5FBD               	subwf	__doprnt@prec& (0+255),f,b
 20335  000AFE  0E00               	movlw	0
 20336  000B00  0100               	movlb	0	; () banked
 20337  000B02  BFBF               	btfsc	__doprnt@c& (0+255),7,b
 20338  000B04  0EFF               	movlw	255
 20339  000B06  0100               	movlb	0	; () banked
 20340  000B08  5BBE               	subwfb	(__doprnt@prec+1)& (0+255),f,b
 20341                           
 20342                           ; BSR set to: 0
 20343                           ;doprnt.c: 1219: if(c)
 20344  000B0A  0100               	movlb	0	; () banked
 20345  000B0C  51BF               	movf	__doprnt@c& (0+255),w,b
 20346  000B0E  0100               	movlb	0	; () banked
 20347  000B10  B4D8               	btfsc	status,2,c
 20348  000B12  D03C               	goto	l1300
 20349                           
 20350                           ; BSR set to: 0
 20351                           ;doprnt.c: 1221: if(pb->func) (pb->func('.')),(++ccnt); else ((*pb->ptr++ = '.'),(++ccnt
      +                          ));
 20352  000B14  0100               	movlb	0	; () banked
 20353  000B16  EE20 F002          	lfsr	2,2
 20354  000B1A  5199               	movf	__doprnt@pb& (0+255),w,b
 20355  000B1C  26D9               	addwf	fsr2l,f,c
 20356  000B1E  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20357  000B20  22DA               	addwfc	fsr2h,f,c
 20358  000B22  50DE               	movf	postinc2,w,c
 20359  000B24  10DE               	iorwf	postinc2,w,c
 20360  000B26  B4D8               	btfsc	status,2,c
 20361  000B28  D017               	goto	l1299
 20362                           
 20363                           ; BSR set to: 0
 20364  000B2A  0100               	movlb	0	; () banked
 20365  000B2C  EE20 F002          	lfsr	2,2
 20366  000B30  5199               	movf	__doprnt@pb& (0+255),w,b
 20367  000B32  26D9               	addwf	fsr2l,f,c
 20368  000B34  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20369  000B36  22DA               	addwfc	fsr2h,f,c
 20370  000B38  D801               	call	u10018
 20371  000B3A  D024               	goto	l9989
 20372  000B3C                     u10018:
 20373  000B3C  FFFF               	dw	65535	; assembler added errata NOP
 20374  000B3E  0005               	push	
 20375  000B40  6EFA               	movwf	pclath,c
 20376  000B42  50DE               	movf	postinc2,w,c
 20377  000B44  6EFD               	movwf	tosl,c
 20378  000B46  50DE               	movf	postinc2,w,c
 20379  000B48  6EFE               	movwf	tosh,c
 20380  000B4A  50F8               	movf	tblptru,w,c
 20381  000B4C  6EFF               	movwf	tosu,c
 20382  000B4E  50FA               	movf	pclath,w,c
 20383  000B50  0E2E               	movlw	46
 20384  000B52  0012               	return		;indir
 20385  000B54  FFFF               	dw	65535	; errata NOP
 20386  000B56  D016               	goto	l9989
 20387  000B58                     l1299:
 20388  000B58  FFFF               	dw	65535	; assembler added errata NOP
 20389                           
 20390                           ; BSR set to: 0
 20391                           
 20392                           ; BSR set to: 0
 20393  000B5A  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20394  000B5E  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20395  000B62  CFDE F09F          	movff	postinc2,??__doprnt
 20396  000B66  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20397  000B6A  C09F  FFD9         	movff	??__doprnt,fsr2l
 20398  000B6E  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20399  000B72  0E2E               	movlw	46
 20400  000B74  6EDF               	movwf	indf2,c
 20401                           
 20402                           ; BSR set to: 0
 20403  000B76  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20404  000B7A  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20405  000B7E  2ADE               	incf	postinc2,f,c
 20406  000B80  0E00               	movlw	0
 20407  000B82  22DD               	addwfc	postdec2,f,c
 20408  000B84                     l9989:
 20409  000B84  FFFF               	dw	65535	; assembler added errata NOP
 20410                           
 20411                           ; BSR set to: 0
 20412  000B86  0100               	movlb	0	; () banked
 20413  000B88  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 20414  000B8A  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20415  000B8C                     l1300:
 20416  000B8C  FFFF               	dw	65535	; assembler added errata NOP
 20417                           
 20418                           ; BSR set to: 0
 20419                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 20420                           
 20421                           ; BSR set to: 0
 20422                           
 20423                           ; BSR set to: 0
 20424  000B8E  0100               	movlb	0	; () banked
 20425  000B90  51BF               	movf	__doprnt@c& (0+255),w,b
 20426  000B92  EC81  F012         	call	_scale
 20427  000B96  C07B  F0A5         	movff	?_scale,__doprnt$3558
 20428  000B9A  C07C  F0A6         	movff	?_scale+1,__doprnt$3558+1
 20429  000B9E  C07D  F0A7         	movff	?_scale+2,__doprnt$3558+2
 20430                           
 20431                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 20432  000BA2  C0BA  F06F         	movff	__doprnt@fval,___ftmul@f2
 20433  000BA6  C0BB  F070         	movff	__doprnt@fval+1,___ftmul@f2+1
 20434  000BAA  C0BC  F071         	movff	__doprnt@fval+2,___ftmul@f2+2
 20435  000BAE  C0A5  F06C         	movff	__doprnt$3558,___ftmul@f1
 20436  000BB2  C0A6  F06D         	movff	__doprnt$3558+1,___ftmul@f1+1
 20437  000BB6  C0A7  F06E         	movff	__doprnt$3558+2,___ftmul@f1+2
 20438  000BBA  EC53  F03C         	call	___ftmul	;wreg free
 20439  000BBE  C06C  F08A         	movff	?___ftmul,___fttol@f1
 20440  000BC2  C06D  F08B         	movff	?___ftmul+1,___fttol@f1+1
 20441  000BC6  C06E  F08C         	movff	?___ftmul+2,___fttol@f1+2
 20442  000BCA  EC16  F03B         	call	___fttol	;wreg free
 20443  000BCE  C08A  F0B2         	movff	?___fttol,__doprnt@val
 20444  000BD2  C08B  F0B3         	movff	?___fttol+1,__doprnt@val+1
 20445  000BD6  C08C  F0B4         	movff	?___fttol+2,__doprnt@val+2
 20446  000BDA  C08D  F0B5         	movff	?___fttol+3,__doprnt@val+3
 20447                           
 20448                           ;doprnt.c: 1228: while(c--) {
 20449  000BDE  D0B1               	goto	l1301
 20450  000BE0  FFFF               	dw	65535	; assembler added errata NOP
 20451                           
 20452                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 20453  000BE2  C0B2  F019         	movff	__doprnt@val,___lldiv@dividend
 20454  000BE6  C0B3  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 20455  000BEA  C0B4  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 20456  000BEE  C0B5  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 20457  000BF2  0100               	movlb	0	; () banked
 20458  000BF4  51BF               	movf	__doprnt@c& (0+255),w,b
 20459  000BF6  0D04               	mullw	4
 20460  000BF8  0E23               	movlw	low _dpowers
 20461  000BFA  24F3               	addwf	prodl,w,c
 20462  000BFC  6EF6               	movwf	tblptrl,c
 20463  000BFE  0E7D               	movlw	high _dpowers
 20464  000C00  20F4               	addwfc	prodh,w,c
 20465  000C02  6EF7               	movwf	tblptrh,c
 20466  000C04                     	if	0	;There are less than 3 active tblptr bytes
 20467  000C04                     	endif
 20468  000C04  0009               	tblrd		*+
 20469  000C06  FFFF               	dw	65535	; errata NOP
 20470  000C08  CFF5 F01D          	movff	tablat,___lldiv@divisor
 20471  000C0C  0009               	tblrd		*+
 20472  000C0E  FFFF               	dw	65535	; errata NOP
 20473  000C10  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 20474  000C14  0009               	tblrd		*+
 20475  000C16  FFFF               	dw	65535	; errata NOP
 20476  000C18  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 20477  000C1C  000A               	tblrd		*-
 20478  000C1E  FFFF               	dw	65535	; errata NOP
 20479  000C20  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 20480  000C24  EC9D  F030         	call	___lldiv	;wreg free
 20481  000C28  C019  F0B6         	movff	?___lldiv,__doprnt@tmpval
 20482  000C2C  C01A  F0B7         	movff	?___lldiv+1,__doprnt@tmpval+1
 20483  000C30  C01B  F0B8         	movff	?___lldiv+2,__doprnt@tmpval+2
 20484  000C34  C01C  F0B9         	movff	?___lldiv+3,__doprnt@tmpval+3
 20485                           
 20486                           ;doprnt.c: 1230: tmpval.vd %= 10;
 20487  000C38  C0B6  F026         	movff	__doprnt@tmpval,___llmod@dividend
 20488  000C3C  C0B7  F027         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 20489  000C40  C0B8  F028         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 20490  000C44  C0B9  F029         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 20491  000C48  0E0A               	movlw	10
 20492  000C4A  6E2A               	movwf	___llmod@divisor,c
 20493  000C4C  0E00               	movlw	0
 20494  000C4E  6E2B               	movwf	___llmod@divisor+1,c
 20495  000C50  0E00               	movlw	0
 20496  000C52  6E2C               	movwf	___llmod@divisor+2,c
 20497  000C54  0E00               	movlw	0
 20498  000C56  6E2D               	movwf	___llmod@divisor+3,c
 20499  000C58  EC5D  F02E         	call	___llmod	;wreg free
 20500  000C5C  C026  F0B6         	movff	?___llmod,__doprnt@tmpval
 20501  000C60  C027  F0B7         	movff	?___llmod+1,__doprnt@tmpval+1
 20502  000C64  C028  F0B8         	movff	?___llmod+2,__doprnt@tmpval+2
 20503  000C68  C029  F0B9         	movff	?___llmod+3,__doprnt@tmpval+3
 20504                           
 20505                           ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)),(++ccnt); else ((*pb->ptr++ = 
      +                          '0' + tmpval.vd),(++ccnt));
 20506  000C6C  0100               	movlb	0	; () banked
 20507  000C6E  EE20 F002          	lfsr	2,2
 20508  000C72  5199               	movf	__doprnt@pb& (0+255),w,b
 20509  000C74  26D9               	addwf	fsr2l,f,c
 20510  000C76  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20511  000C78  22DA               	addwfc	fsr2h,f,c
 20512  000C7A  50DE               	movf	postinc2,w,c
 20513  000C7C  10DE               	iorwf	postinc2,w,c
 20514  000C7E  B4D8               	btfsc	status,2,c
 20515  000C80  D019               	goto	l1303
 20516                           
 20517                           ; BSR set to: 0
 20518  000C82  0100               	movlb	0	; () banked
 20519  000C84  EE20 F002          	lfsr	2,2
 20520  000C88  5199               	movf	__doprnt@pb& (0+255),w,b
 20521  000C8A  26D9               	addwf	fsr2l,f,c
 20522  000C8C  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20523  000C8E  22DA               	addwfc	fsr2h,f,c
 20524  000C90  D801               	call	u10038
 20525  000C92  D028               	goto	l10007
 20526  000C94                     u10038:
 20527  000C94  FFFF               	dw	65535	; assembler added errata NOP
 20528  000C96  0005               	push	
 20529  000C98  6EFA               	movwf	pclath,c
 20530  000C9A  50DE               	movf	postinc2,w,c
 20531  000C9C  6EFD               	movwf	tosl,c
 20532  000C9E  50DE               	movf	postinc2,w,c
 20533  000CA0  6EFE               	movwf	tosh,c
 20534  000CA2  50F8               	movf	tblptru,w,c
 20535  000CA4  6EFF               	movwf	tosu,c
 20536  000CA6  50FA               	movf	pclath,w,c
 20537  000CA8  0100               	movlb	0	; () banked
 20538  000CAA  51B6               	movf	__doprnt@tmpval& (0+255),w,b
 20539  000CAC  0F30               	addlw	48
 20540  000CAE  0012               	return		;indir
 20541  000CB0  FFFF               	dw	65535	; errata NOP
 20542  000CB2  D018               	goto	l10007
 20543  000CB4                     l1303:
 20544  000CB4  FFFF               	dw	65535	; assembler added errata NOP
 20545                           
 20546                           ; BSR set to: 0
 20547                           
 20548                           ; BSR set to: 0
 20549  000CB6  0100               	movlb	0	; () banked
 20550  000CB8  51B6               	movf	__doprnt@tmpval& (0+255),w,b
 20551  000CBA  0F30               	addlw	48
 20552  000CBC  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20553  000CC0  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20554  000CC4  CFDE F09F          	movff	postinc2,??__doprnt
 20555  000CC8  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20556  000CCC  C09F  FFD9         	movff	??__doprnt,fsr2l
 20557  000CD0  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20558  000CD4  6EDF               	movwf	indf2,c
 20559  000CD6  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20560  000CDA  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20561  000CDE  2ADE               	incf	postinc2,f,c
 20562  000CE0  0E00               	movlw	0
 20563  000CE2  22DD               	addwfc	postdec2,f,c
 20564  000CE4                     l10007:
 20565  000CE4  FFFF               	dw	65535	; assembler added errata NOP
 20566                           
 20567                           ; BSR set to: 0
 20568  000CE6  0100               	movlb	0	; () banked
 20569  000CE8  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 20570  000CEA  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20571                           
 20572                           ; BSR set to: 0
 20573                           ;doprnt.c: 1232: val %= dpowers[c];
 20574                           
 20575                           ; BSR set to: 0
 20576  000CEC  C0B2  F026         	movff	__doprnt@val,___llmod@dividend
 20577  000CF0  C0B3  F027         	movff	__doprnt@val+1,___llmod@dividend+1
 20578  000CF4  C0B4  F028         	movff	__doprnt@val+2,___llmod@dividend+2
 20579  000CF8  C0B5  F029         	movff	__doprnt@val+3,___llmod@dividend+3
 20580  000CFC  0100               	movlb	0	; () banked
 20581  000CFE  51BF               	movf	__doprnt@c& (0+255),w,b
 20582  000D00  0D04               	mullw	4
 20583  000D02  0E23               	movlw	low _dpowers
 20584  000D04  24F3               	addwf	prodl,w,c
 20585  000D06  6EF6               	movwf	tblptrl,c
 20586  000D08  0E7D               	movlw	high _dpowers
 20587  000D0A  20F4               	addwfc	prodh,w,c
 20588  000D0C  6EF7               	movwf	tblptrh,c
 20589  000D0E                     	if	0	;There are less than 3 active tblptr bytes
 20590  000D0E                     	endif
 20591  000D0E  0009               	tblrd		*+
 20592  000D10  FFFF               	dw	65535	; errata NOP
 20593  000D12  CFF5 F02A          	movff	tablat,___llmod@divisor
 20594  000D16  0009               	tblrd		*+
 20595  000D18  FFFF               	dw	65535	; errata NOP
 20596  000D1A  CFF5 F02B          	movff	tablat,___llmod@divisor+1
 20597  000D1E  0009               	tblrd		*+
 20598  000D20  FFFF               	dw	65535	; errata NOP
 20599  000D22  CFF5 F02C          	movff	tablat,___llmod@divisor+2
 20600  000D26  000A               	tblrd		*-
 20601  000D28  FFFF               	dw	65535	; errata NOP
 20602  000D2A  CFF5 F02D          	movff	tablat,___llmod@divisor+3
 20603  000D2E  EC5D  F02E         	call	___llmod
 20604  000D32  C026  F0B2         	movff	?___llmod,__doprnt@val
 20605  000D36  C027  F0B3         	movff	?___llmod+1,__doprnt@val+1
 20606  000D3A  C028  F0B4         	movff	?___llmod+2,__doprnt@val+2
 20607  000D3E  C029  F0B5         	movff	?___llmod+3,__doprnt@val+3
 20608  000D42                     l1301:
 20609  000D42  FFFF               	dw	65535	; assembler added errata NOP
 20610  000D44  0100               	movlb	0	; () banked
 20611  000D46  07BF               	decf	__doprnt@c& (0+255),f,b
 20612  000D48  0100               	movlb	0	; () banked
 20613  000D4A  29BF               	incf	__doprnt@c& (0+255),w,b
 20614  000D4C  B4D8               	btfsc	status,2,c
 20615  000D4E  D042               	goto	l1306
 20616  000D50  D747               	goto	l1302
 20617  000D52  FFFF               	dw	65535	; assembler added errata NOP
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;doprnt.c: 1236: if(pb->func) (pb->func('0')),(++ccnt); else ((*pb->ptr++ = '0'),(++ccnt
      +                          ));
 20621                           
 20622                           ; BSR set to: 0
 20623  000D54  0100               	movlb	0	; () banked
 20624  000D56  EE20 F002          	lfsr	2,2
 20625  000D5A  5199               	movf	__doprnt@pb& (0+255),w,b
 20626  000D5C  26D9               	addwf	fsr2l,f,c
 20627  000D5E  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20628  000D60  22DA               	addwfc	fsr2h,f,c
 20629  000D62  50DE               	movf	postinc2,w,c
 20630  000D64  10DE               	iorwf	postinc2,w,c
 20631  000D66  B4D8               	btfsc	status,2,c
 20632  000D68  D017               	goto	l1308
 20633                           
 20634                           ; BSR set to: 0
 20635  000D6A  0100               	movlb	0	; () banked
 20636  000D6C  EE20 F002          	lfsr	2,2
 20637  000D70  5199               	movf	__doprnt@pb& (0+255),w,b
 20638  000D72  26D9               	addwf	fsr2l,f,c
 20639  000D74  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20640  000D76  22DA               	addwfc	fsr2h,f,c
 20641  000D78  D801               	call	u10068
 20642  000D7A  D024               	goto	l10023
 20643  000D7C                     u10068:
 20644  000D7C  FFFF               	dw	65535	; assembler added errata NOP
 20645  000D7E  0005               	push	
 20646  000D80  6EFA               	movwf	pclath,c
 20647  000D82  50DE               	movf	postinc2,w,c
 20648  000D84  6EFD               	movwf	tosl,c
 20649  000D86  50DE               	movf	postinc2,w,c
 20650  000D88  6EFE               	movwf	tosh,c
 20651  000D8A  50F8               	movf	tblptru,w,c
 20652  000D8C  6EFF               	movwf	tosu,c
 20653  000D8E  50FA               	movf	pclath,w,c
 20654  000D90  0E30               	movlw	48
 20655  000D92  0012               	return		;indir
 20656  000D94  FFFF               	dw	65535	; errata NOP
 20657  000D96  D016               	goto	l10023
 20658  000D98                     l1308:
 20659  000D98  FFFF               	dw	65535	; assembler added errata NOP
 20660                           
 20661                           ; BSR set to: 0
 20662                           
 20663                           ; BSR set to: 0
 20664  000D9A  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20665  000D9E  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20666  000DA2  CFDE F09F          	movff	postinc2,??__doprnt
 20667  000DA6  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20668  000DAA  C09F  FFD9         	movff	??__doprnt,fsr2l
 20669  000DAE  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20670  000DB2  0E30               	movlw	48
 20671  000DB4  6EDF               	movwf	indf2,c
 20672                           
 20673                           ; BSR set to: 0
 20674  000DB6  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20675  000DBA  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20676  000DBE  2ADE               	incf	postinc2,f,c
 20677  000DC0  0E00               	movlw	0
 20678  000DC2  22DD               	addwfc	postdec2,f,c
 20679  000DC4                     l10023:
 20680  000DC4  FFFF               	dw	65535	; assembler added errata NOP
 20681                           
 20682                           ; BSR set to: 0
 20683  000DC6  0100               	movlb	0	; () banked
 20684  000DC8  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 20685  000DCA  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;doprnt.c: 1237: prec--;
 20689                           
 20690                           ; BSR set to: 0
 20691  000DCC  0100               	movlb	0	; () banked
 20692  000DCE  07BD               	decf	__doprnt@prec& (0+255),f,b
 20693  000DD0  A0D8               	btfss	status,0,c
 20694  000DD2  07BE               	decf	(__doprnt@prec+1)& (0+255),f,b
 20695  000DD4                     l1306:
 20696  000DD4  FFFF               	dw	65535	; assembler added errata NOP
 20697                           
 20698                           ; BSR set to: 0
 20699                           
 20700                           ; BSR set to: 0
 20701  000DD6  0100               	movlb	0	; () banked
 20702  000DD8  51BD               	movf	__doprnt@prec& (0+255),w,b
 20703  000DDA  0100               	movlb	0	; () banked
 20704  000DDC  11BE               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 20705  000DDE  B4D8               	btfsc	status,2,c
 20706  000DE0  D16A               	goto	u10210
 20707  000DE2  D7B7               	goto	l1307
 20708  000DE4                     l1261:
 20709  000DE4  FFFF               	dw	65535	; assembler added errata NOP
 20710                           
 20711                           ; BSR set to: 0
 20712                           ;doprnt.c: 1246: }
 20713                           ;doprnt.c: 1253: {
 20714                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 20715                           
 20716                           ; BSR set to: 0
 20717  000DE6  C09D  FFD9         	movff	__doprnt@ap,fsr2l
 20718  000DEA  C09E  FFDA         	movff	__doprnt@ap+1,fsr2h
 20719  000DEE  CFDF F09F          	movff	indf2,??__doprnt
 20720  000DF2  0E02               	movlw	2
 20721  000DF4  26DE               	addwf	postinc2,f,c
 20722  000DF6  CFDF F0A0          	movff	indf2,??__doprnt+1
 20723  000DFA  0E00               	movlw	0
 20724  000DFC  22DD               	addwfc	postdec2,f,c
 20725  000DFE  C09F  FFD9         	movff	??__doprnt,fsr2l
 20726  000E02  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 20727  000E06  CFDE F0B2          	movff	postinc2,__doprnt@val
 20728  000E0A  CFDD F0B3          	movff	postdec2,__doprnt@val+1
 20729  000E0E  0100               	movlb	0	; () banked
 20730  000E10  0E00               	movlw	0
 20731  000E12  BFB3               	btfsc	(__doprnt@val+1)& (0+255),7,b
 20732  000E14  0EFF               	movlw	-1
 20733  000E16  6FB4               	movwf	(__doprnt@val+2)& (0+255),b
 20734  000E18  6FB5               	movwf	(__doprnt@val+3)& (0+255),b
 20735                           
 20736                           ; BSR set to: 0
 20737                           ;doprnt.c: 1261: if((long)val < 0) {
 20738  000E1A  0100               	movlb	0	; () banked
 20739  000E1C  AFB5               	btfss	(__doprnt@val+3)& (0+255),7,b
 20740  000E1E  D00C               	goto	l1311
 20741                           
 20742                           ; BSR set to: 0
 20743                           ;doprnt.c: 1262: flag |= 0x03;
 20744  000E20  0E03               	movlw	3
 20745  000E22  0100               	movlb	0	; () banked
 20746  000E24  13AC               	iorwf	__doprnt@flag& (0+255),f,b
 20747                           
 20748                           ; BSR set to: 0
 20749                           ;doprnt.c: 1263: val = -val;
 20750  000E26  0100               	movlb	0	; () banked
 20751  000E28  1FB5               	comf	(__doprnt@val+3)& (0+255),f,b
 20752  000E2A  1FB4               	comf	(__doprnt@val+2)& (0+255),f,b
 20753  000E2C  1FB3               	comf	(__doprnt@val+1)& (0+255),f,b
 20754  000E2E  6DB2               	negf	__doprnt@val& (0+255),b
 20755  000E30  0E00               	movlw	0
 20756  000E32  23B3               	addwfc	(__doprnt@val+1)& (0+255),f,b
 20757  000E34  23B4               	addwfc	(__doprnt@val+2)& (0+255),f,b
 20758  000E36  23B5               	addwfc	(__doprnt@val+3)& (0+255),f,b
 20759  000E38                     l1311:
 20760  000E38  FFFF               	dw	65535	; assembler added errata NOP
 20761                           
 20762                           ; BSR set to: 0
 20763                           ;doprnt.c: 1264: }
 20764                           ;doprnt.c: 1266: }
 20765                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 20766                           
 20767                           ; BSR set to: 0
 20768  000E3A  0100               	movlb	0	; () banked
 20769  000E3C  51BD               	movf	__doprnt@prec& (0+255),w,b
 20770  000E3E  0100               	movlb	0	; () banked
 20771  000E40  11BE               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 20772  000E42  A4D8               	btfss	status,2,c
 20773  000E44  D00D               	goto	l1312
 20774                           
 20775                           ; BSR set to: 0
 20776  000E46  0100               	movlb	0	; () banked
 20777  000E48  51B2               	movf	__doprnt@val& (0+255),w,b
 20778  000E4A  0100               	movlb	0	; () banked
 20779  000E4C  11B3               	iorwf	(__doprnt@val+1)& (0+255),w,b
 20780  000E4E  0100               	movlb	0	; () banked
 20781  000E50  11B4               	iorwf	(__doprnt@val+2)& (0+255),w,b
 20782  000E52  0100               	movlb	0	; () banked
 20783  000E54  11B5               	iorwf	(__doprnt@val+3)& (0+255),w,b
 20784  000E56  A4D8               	btfss	status,2,c
 20785  000E58  D003               	goto	l1312
 20786                           
 20787                           ; BSR set to: 0
 20788                           ;doprnt.c: 1291: prec++;
 20789  000E5A  0100               	movlb	0	; () banked
 20790  000E5C  4BBD               	infsnz	__doprnt@prec& (0+255),f,b
 20791  000E5E  2BBE               	incf	(__doprnt@prec+1)& (0+255),f,b
 20792  000E60                     l1312:
 20793  000E60  FFFF               	dw	65535	; assembler added errata NOP
 20794                           
 20795                           ; BSR set to: 0
 20796                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20797                           
 20798                           ; BSR set to: 0
 20799  000E62  0E01               	movlw	1
 20800  000E64  0100               	movlb	0	; () banked
 20801  000E66  6FBF               	movwf	__doprnt@c& (0+255),b
 20802  000E68                     l10045:
 20803  000E68  FFFF               	dw	65535	; assembler added errata NOP
 20804                           
 20805                           ; BSR set to: 0
 20806  000E6A  0E0A               	movlw	10
 20807  000E6C  0100               	movlb	0	; () banked
 20808  000E6E  19BF               	xorwf	__doprnt@c& (0+255),w,b
 20809  000E70  B4D8               	btfsc	status,2,c
 20810  000E72  D022               	goto	u10130
 20811                           
 20812                           ; BSR set to: 0
 20813                           ;doprnt.c: 1306: if(val < dpowers[c])
 20814                           
 20815                           ; BSR set to: 0
 20816                           
 20817                           ; BSR set to: 0
 20818  000E74  0100               	movlb	0	; () banked
 20819  000E76  51BF               	movf	__doprnt@c& (0+255),w,b
 20820  000E78  0D04               	mullw	4
 20821  000E7A  0E23               	movlw	low _dpowers
 20822  000E7C  24F3               	addwf	prodl,w,c
 20823  000E7E  6EF6               	movwf	tblptrl,c
 20824  000E80  0E7D               	movlw	high _dpowers
 20825  000E82  20F4               	addwfc	prodh,w,c
 20826  000E84  6EF7               	movwf	tblptrh,c
 20827  000E86                     	if	0	;There are less than 3 active tblptr bytes
 20828  000E86                     	endif
 20829  000E86  0009               	tblrd		*+
 20830  000E88  FFFF               	dw	65535	; errata NOP
 20831  000E8A  50F5               	movf	tablat,w,c
 20832  000E8C  0100               	movlb	0	; () banked
 20833  000E8E  5DB2               	subwf	__doprnt@val& (0+255),w,b
 20834  000E90  0009               	tblrd		*+
 20835  000E92  FFFF               	dw	65535	; errata NOP
 20836  000E94  50F5               	movf	tablat,w,c
 20837  000E96  0100               	movlb	0	; () banked
 20838  000E98  59B3               	subwfb	(__doprnt@val+1)& (0+255),w,b
 20839  000E9A  0009               	tblrd		*+
 20840  000E9C  FFFF               	dw	65535	; errata NOP
 20841  000E9E  50F5               	movf	tablat,w,c
 20842  000EA0  0100               	movlb	0	; () banked
 20843  000EA2  59B4               	subwfb	(__doprnt@val+2)& (0+255),w,b
 20844  000EA4  0009               	tblrd		*+
 20845  000EA6  FFFF               	dw	65535	; errata NOP
 20846  000EA8  50F5               	movf	tablat,w,c
 20847  000EAA  0100               	movlb	0	; () banked
 20848  000EAC  59B5               	subwfb	(__doprnt@val+3)& (0+255),w,b
 20849  000EAE  A0D8               	btfss	status,0,c
 20850  000EB0  D003               	goto	u10130
 20851                           
 20852                           ; BSR set to: 0
 20853                           
 20854                           ; BSR set to: 0
 20855                           
 20856                           ; BSR set to: 0
 20857                           ;doprnt.c: 1307: break;
 20858  000EB2  0100               	movlb	0	; () banked
 20859  000EB4  2BBF               	incf	__doprnt@c& (0+255),f,b
 20860  000EB6  D7D8               	goto	l10045
 20861  000EB8                     u10130:
 20862  000EB8  FFFF               	dw	65535	; assembler added errata NOP
 20863                           
 20864                           ; BSR set to: 0
 20865                           ;doprnt.c: 1339: if(c < prec)
 20866                           
 20867                           ; BSR set to: 0
 20868  000EBA  0E80               	movlw	128
 20869  000EBC  0100               	movlb	0	; () banked
 20870  000EBE  BFBF               	btfsc	__doprnt@c& (0+255),7,b
 20871  000EC0  0E7F               	movlw	127
 20872  000EC2  0100               	movlb	0	; () banked
 20873  000EC4  6F9F               	movwf	??__doprnt& (0+255),b
 20874  000EC6  0100               	movlb	0	; () banked
 20875  000EC8  51BD               	movf	__doprnt@prec& (0+255),w,b
 20876  000ECA  0100               	movlb	0	; () banked
 20877  000ECC  5DBF               	subwf	__doprnt@c& (0+255),w,b
 20878  000ECE  0100               	movlb	0	; () banked
 20879  000ED0  51BE               	movf	(__doprnt@prec+1)& (0+255),w,b
 20880  000ED2  0A80               	xorlw	128
 20881  000ED4  0100               	movlb	0	; () banked
 20882  000ED6  599F               	subwfb	??__doprnt& (0+255),w,b
 20883  000ED8  B0D8               	btfsc	status,0,c
 20884  000EDA  D003               	goto	l1316
 20885                           
 20886                           ; BSR set to: 0
 20887                           ;doprnt.c: 1340: c = prec;
 20888  000EDC  C0BD  F0BF         	movff	__doprnt@prec,__doprnt@c
 20889  000EE0  D019               	goto	l1318
 20890  000EE2                     l1316:
 20891  000EE2  FFFF               	dw	65535	; assembler added errata NOP
 20892                           
 20893                           ; BSR set to: 0
 20894                           ;doprnt.c: 1341: else if(prec < c)
 20895                           
 20896                           ; BSR set to: 0
 20897  000EE4  0100               	movlb	0	; () banked
 20898  000EE6  51BE               	movf	(__doprnt@prec+1)& (0+255),w,b
 20899  000EE8  0A80               	xorlw	128
 20900  000EEA  0100               	movlb	0	; () banked
 20901  000EEC  6F9F               	movwf	??__doprnt& (0+255),b
 20902  000EEE  0100               	movlb	0	; () banked
 20903  000EF0  51BF               	movf	__doprnt@c& (0+255),w,b
 20904  000EF2  0100               	movlb	0	; () banked
 20905  000EF4  5DBD               	subwf	__doprnt@prec& (0+255),w,b
 20906  000EF6  0E80               	movlw	128
 20907  000EF8  0100               	movlb	0	; () banked
 20908  000EFA  BFBF               	btfsc	__doprnt@c& (0+255),7,b
 20909  000EFC  0E7F               	movlw	127
 20910  000EFE  0100               	movlb	0	; () banked
 20911  000F00  599F               	subwfb	??__doprnt& (0+255),w,b
 20912  000F02  B0D8               	btfsc	status,0,c
 20913  000F04  D007               	goto	l1318
 20914                           
 20915                           ; BSR set to: 0
 20916                           ;doprnt.c: 1342: prec = c;
 20917  000F06  0100               	movlb	0	; () banked
 20918  000F08  51BF               	movf	__doprnt@c& (0+255),w,b
 20919  000F0A  0100               	movlb	0	; () banked
 20920  000F0C  6FBD               	movwf	__doprnt@prec& (0+255),b
 20921  000F0E  6BBE               	clrf	(__doprnt@prec+1)& (0+255),b
 20922  000F10  BFBD               	btfsc	__doprnt@prec& (0+255),7,b
 20923  000F12  07BE               	decf	(__doprnt@prec+1)& (0+255),f,b
 20924  000F14                     l1318:
 20925  000F14  FFFF               	dw	65535	; assembler added errata NOP
 20926                           
 20927                           ; BSR set to: 0
 20928                           ;doprnt.c: 1422: {
 20929                           ;doprnt.c: 1438: if(flag & 0x03)
 20930                           
 20931                           ; BSR set to: 0
 20932                           
 20933                           ; BSR set to: 0
 20934  000F16  0E03               	movlw	3
 20935  000F18  0100               	movlb	0	; () banked
 20936  000F1A  15AC               	andwf	__doprnt@flag& (0+255),w,b
 20937  000F1C  0100               	movlb	0	; () banked
 20938  000F1E  6F9F               	movwf	??__doprnt& (0+255),b
 20939  000F20  0E00               	movlw	0
 20940  000F22  0100               	movlb	0	; () banked
 20941  000F24  15AD               	andwf	(__doprnt@flag+1)& (0+255),w,b
 20942  000F26  0100               	movlb	0	; () banked
 20943  000F28  6FA0               	movwf	(??__doprnt+1)& (0+255),b
 20944  000F2A  0100               	movlb	0	; () banked
 20945  000F2C  519F               	movf	??__doprnt& (0+255),w,b
 20946  000F2E  0100               	movlb	0	; () banked
 20947  000F30  11A0               	iorwf	(??__doprnt+1)& (0+255),w,b
 20948  000F32  B4D8               	btfsc	status,2,c
 20949  000F34  D0B4               	goto	l1325
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')),(++ccnt); else ((*pb->ptr++ = '-'),(++ccnt
      +                          ));
 20953  000F36  0100               	movlb	0	; () banked
 20954  000F38  EE20 F002          	lfsr	2,2
 20955  000F3C  5199               	movf	__doprnt@pb& (0+255),w,b
 20956  000F3E  26D9               	addwf	fsr2l,f,c
 20957  000F40  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20958  000F42  22DA               	addwfc	fsr2h,f,c
 20959  000F44  50DE               	movf	postinc2,w,c
 20960  000F46  10DE               	iorwf	postinc2,w,c
 20961  000F48  B4D8               	btfsc	status,2,c
 20962  000F4A  D017               	goto	l1320
 20963                           
 20964                           ; BSR set to: 0
 20965  000F4C  0100               	movlb	0	; () banked
 20966  000F4E  EE20 F002          	lfsr	2,2
 20967  000F52  5199               	movf	__doprnt@pb& (0+255),w,b
 20968  000F54  26D9               	addwf	fsr2l,f,c
 20969  000F56  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 20970  000F58  22DA               	addwfc	fsr2h,f,c
 20971  000F5A  D801               	call	u10188
 20972  000F5C  D09C               	goto	l10091
 20973  000F5E                     u10188:
 20974  000F5E  FFFF               	dw	65535	; assembler added errata NOP
 20975  000F60  0005               	push	
 20976  000F62  6EFA               	movwf	pclath,c
 20977  000F64  50DE               	movf	postinc2,w,c
 20978  000F66  6EFD               	movwf	tosl,c
 20979  000F68  50DE               	movf	postinc2,w,c
 20980  000F6A  6EFE               	movwf	tosh,c
 20981  000F6C  50F8               	movf	tblptru,w,c
 20982  000F6E  6EFF               	movwf	tosu,c
 20983  000F70  50FA               	movf	pclath,w,c
 20984  000F72  0E2D               	movlw	45
 20985  000F74  0012               	return		;indir
 20986  000F76  FFFF               	dw	65535	; errata NOP
 20987  000F78  D08E               	goto	l10091
 20988  000F7A                     l1320:
 20989  000F7A  FFFF               	dw	65535	; assembler added errata NOP
 20990                           
 20991                           ; BSR set to: 0
 20992                           
 20993                           ; BSR set to: 0
 20994  000F7C  C099  FFD9         	movff	__doprnt@pb,fsr2l
 20995  000F80  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 20996  000F84  CFDE F09F          	movff	postinc2,??__doprnt
 20997  000F88  CFDD F0A0          	movff	postdec2,??__doprnt+1
 20998  000F8C  C09F  FFD9         	movff	??__doprnt,fsr2l
 20999  000F90  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 21000  000F94  0E2D               	movlw	45
 21001  000F96  6EDF               	movwf	indf2,c
 21002  000F98  D076               	goto	L32
 21003  000F9A  FFFF               	dw	65535	; assembler added errata NOP
 21004                           
 21005                           ; BSR set to: 0
 21006                           ;doprnt.c: 1478: {
 21007                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 21008                           
 21009                           ; BSR set to: 0
 21010  000F9C  C0BD  F09F         	movff	__doprnt@prec,??__doprnt
 21011  000FA0  C0BE  F0A0         	movff	__doprnt@prec+1,??__doprnt+1
 21012  000FA4  0100               	movlb	0	; () banked
 21013  000FA6  90D8               	bcf	status,0,c
 21014  000FA8  379F               	rlcf	??__doprnt& (0+255),f,b
 21015  000FAA  37A0               	rlcf	(??__doprnt+1)& (0+255),f,b
 21016  000FAC  0100               	movlb	0	; () banked
 21017  000FAE  90D8               	bcf	status,0,c
 21018  000FB0  379F               	rlcf	??__doprnt& (0+255),f,b
 21019  000FB2  37A0               	rlcf	(??__doprnt+1)& (0+255),f,b
 21020  000FB4  0E23               	movlw	low _dpowers
 21021  000FB6  0100               	movlb	0	; () banked
 21022  000FB8  259F               	addwf	??__doprnt& (0+255),w,b
 21023  000FBA  6EF6               	movwf	tblptrl,c
 21024  000FBC  0E7D               	movlw	high _dpowers
 21025  000FBE  21A0               	addwfc	(??__doprnt+1)& (0+255),w,b
 21026  000FC0  6EF7               	movwf	tblptrh,c
 21027  000FC2                     	if	0	;There are less than 3 active tblptr bytes
 21028  000FC2                     	endif
 21029  000FC2  0009               	tblrd		*+
 21030  000FC4  FFFF               	dw	65535	; errata NOP
 21031  000FC6  CFF5 F01D          	movff	tablat,___lldiv@divisor
 21032  000FCA  0009               	tblrd		*+
 21033  000FCC  FFFF               	dw	65535	; errata NOP
 21034  000FCE  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 21035  000FD2  0009               	tblrd		*+
 21036  000FD4  FFFF               	dw	65535	; errata NOP
 21037  000FD6  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 21038  000FDA  000A               	tblrd		*-
 21039  000FDC  FFFF               	dw	65535	; errata NOP
 21040  000FDE  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 21041  000FE2  C0B2  F019         	movff	__doprnt@val,___lldiv@dividend
 21042  000FE6  C0B3  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 21043  000FEA  C0B4  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 21044  000FEE  C0B5  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 21045  000FF2  EC9D  F030         	call	___lldiv
 21046  000FF6  C019  F026         	movff	?___lldiv,___llmod@dividend
 21047  000FFA  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
 21048  000FFE  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
 21049  001002  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
 21050  001006  0E0A               	movlw	10
 21051  001008  6E2A               	movwf	___llmod@divisor,c
 21052  00100A  0E00               	movlw	0
 21053  00100C  6E2B               	movwf	___llmod@divisor+1,c
 21054  00100E  0E00               	movlw	0
 21055  001010  6E2C               	movwf	___llmod@divisor+2,c
 21056  001012  0E00               	movlw	0
 21057  001014  6E2D               	movwf	___llmod@divisor+3,c
 21058  001016  EC5D  F02E         	call	___llmod	;wreg free
 21059  00101A  5026               	movf	?___llmod,w,c
 21060  00101C  0F30               	addlw	48
 21061  00101E  0100               	movlb	0	; () banked
 21062  001020  6FBF               	movwf	__doprnt@c& (0+255),b
 21063                           
 21064                           ; BSR set to: 0
 21065                           ;doprnt.c: 1523: }
 21066                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
 21067  001022  0100               	movlb	0	; () banked
 21068  001024  EE20 F002          	lfsr	2,2
 21069  001028  5199               	movf	__doprnt@pb& (0+255),w,b
 21070  00102A  26D9               	addwf	fsr2l,f,c
 21071  00102C  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 21072  00102E  22DA               	addwfc	fsr2h,f,c
 21073  001030  50DE               	movf	postinc2,w,c
 21074  001032  10DE               	iorwf	postinc2,w,c
 21075  001034  B4D8               	btfsc	status,2,c
 21076  001036  D018               	goto	l1324
 21077                           
 21078                           ; BSR set to: 0
 21079  001038  0100               	movlb	0	; () banked
 21080  00103A  EE20 F002          	lfsr	2,2
 21081  00103E  5199               	movf	__doprnt@pb& (0+255),w,b
 21082  001040  26D9               	addwf	fsr2l,f,c
 21083  001042  519A               	movf	(__doprnt@pb+1)& (0+255),w,b
 21084  001044  22DA               	addwfc	fsr2h,f,c
 21085  001046  D801               	call	u10208
 21086  001048  D026               	goto	l10091
 21087  00104A                     u10208:
 21088  00104A  FFFF               	dw	65535	; assembler added errata NOP
 21089  00104C  0005               	push	
 21090  00104E  6EFA               	movwf	pclath,c
 21091  001050  50DE               	movf	postinc2,w,c
 21092  001052  6EFD               	movwf	tosl,c
 21093  001054  50DE               	movf	postinc2,w,c
 21094  001056  6EFE               	movwf	tosh,c
 21095  001058  50F8               	movf	tblptru,w,c
 21096  00105A  6EFF               	movwf	tosu,c
 21097  00105C  50FA               	movf	pclath,w,c
 21098  00105E  0100               	movlb	0	; () banked
 21099  001060  51BF               	movf	__doprnt@c& (0+255),w,b
 21100  001062  0012               	return		;indir
 21101  001064  FFFF               	dw	65535	; errata NOP
 21102  001066  D017               	goto	l10091
 21103  001068                     l1324:
 21104  001068  FFFF               	dw	65535	; assembler added errata NOP
 21105                           
 21106                           ; BSR set to: 0
 21107                           
 21108                           ; BSR set to: 0
 21109  00106A  C099  FFD9         	movff	__doprnt@pb,fsr2l
 21110  00106E  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 21111  001072  CFDE F09F          	movff	postinc2,??__doprnt
 21112  001076  CFDD F0A0          	movff	postdec2,??__doprnt+1
 21113  00107A  C09F  FFD9         	movff	??__doprnt,fsr2l
 21114  00107E  C0A0  FFDA         	movff	??__doprnt+1,fsr2h
 21115  001082  C0BF  FFDF         	movff	__doprnt@c,indf2
 21116  001086                     L32:
 21117  001086  FFFF               	dw	65535	; assembler added errata NOP
 21118                           
 21119                           ; BSR set to: 0
 21120  001088  C099  FFD9         	movff	__doprnt@pb,fsr2l
 21121  00108C  C09A  FFDA         	movff	__doprnt@pb+1,fsr2h
 21122  001090  2ADE               	incf	postinc2,f,c
 21123  001092  0E00               	movlw	0
 21124  001094  22DD               	addwfc	postdec2,f,c
 21125  001096                     l10091:
 21126  001096  FFFF               	dw	65535	; assembler added errata NOP
 21127                           
 21128                           ; BSR set to: 0
 21129  001098  0100               	movlb	0	; () banked
 21130  00109A  4BAE               	infsnz	__doprnt@ccnt& (0+255),f,b
 21131  00109C  2BAF               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 21132  00109E                     l1325:
 21133  00109E  FFFF               	dw	65535	; assembler added errata NOP
 21134                           
 21135                           ; BSR set to: 0
 21136                           
 21137                           ; BSR set to: 0
 21138                           
 21139                           ; BSR set to: 0
 21140  0010A0  0100               	movlb	0	; () banked
 21141  0010A2  07BD               	decf	__doprnt@prec& (0+255),f,b
 21142  0010A4  A0D8               	btfss	status,0,c
 21143  0010A6  07BE               	decf	(__doprnt@prec+1)& (0+255),f,b
 21144  0010A8  0100               	movlb	0	; () banked
 21145  0010AA  29BD               	incf	__doprnt@prec& (0+255),w,b
 21146  0010AC  E103               	bnz	u10211
 21147  0010AE  0100               	movlb	0	; () banked
 21148  0010B0  29BE               	incf	(__doprnt@prec+1)& (0+255),w,b
 21149  0010B2  A4D8               	btfss	status,2,c
 21150  0010B4                     u10211:
 21151  0010B4  D772               	goto	l1323
 21152  0010B6                     u10210:
 21153  0010B6  FFFF               	dw	65535	; assembler added errata NOP
 21154                           
 21155                           ; BSR set to: 0
 21156                           
 21157                           ; BSR set to: 0
 21158                           
 21159                           ; BSR set to: 0
 21160  0010B8  C09B  FFF6         	movff	__doprnt@f,tblptrl
 21161  0010BC  C09C  FFF7         	movff	__doprnt@f+1,tblptrh
 21162  0010C0  0100               	movlb	0	; () banked
 21163  0010C2  4B9B               	infsnz	__doprnt@f& (0+255),f,b
 21164  0010C4  2B9C               	incf	(__doprnt@f+1)& (0+255),f,b
 21165  0010C6                     	if	0	;tblptru may be non-zero
 21166  0010C6                     	endif
 21167  0010C6                     	if	0	;tblptru may be non-zero
 21168  0010C6                     	endif
 21169  0010C6  0008               	tblrd		*
 21170  0010C8  FFFF               	dw	65535	; errata NOP
 21171  0010CA  CFF5 F0BF          	movff	tablat,__doprnt@c
 21172  0010CE  0100               	movlb	0	; () banked
 21173  0010D0  51BF               	movf	__doprnt@c& (0+255),w,b
 21174  0010D2  A4D8               	btfss	status,2,c
 21175  0010D4  EFE3  F000         	goto	l1233
 21176  0010D8                     u10220:
 21177  0010D8  FFFF               	dw	65535	; assembler added errata NOP
 21178                           
 21179                           ; BSR set to: 0
 21180                           ;doprnt.c: 1540: return ccnt;
 21181                           
 21182                           ; BSR set to: 0
 21183                           ;doprnt.c: 1525: }
 21184                           ;doprnt.c: 1533: }
 21185                           ;doprnt.c: 1535: alldone:
 21186  0010DA  C0AE  F099         	movff	__doprnt@ccnt,?__doprnt
 21187  0010DE  C0AF  F09A         	movff	__doprnt@ccnt+1,?__doprnt+1
 21188                           
 21189                           ; BSR set to: 0
 21190  0010E2  0012               	return		;funcret
 21191  0010E4  FFFF               	dw	65535	; errata NOP
 21192  0010E6                     __end_of__doprnt:
 21193                           	opt stack 0
 21194                           tosu	equ	0xFFF
 21195                           tosh	equ	0xFFE
 21196                           tosl	equ	0xFFD
 21197                           pclath	equ	0xFFA
 21198                           tblptru	equ	0xFF8
 21199                           tblptrh	equ	0xFF7
 21200                           tblptrl	equ	0xFF6
 21201                           tablat	equ	0xFF5
 21202                           prodh	equ	0xFF4
 21203                           prodl	equ	0xFF3
 21204                           intcon	equ	0xFF2
 21205                           postinc0	equ	0xFEE
 21206                           wreg	equ	0xFE8
 21207                           indf1	equ	0xFE7
 21208                           fsr1h	equ	0xFE2
 21209                           fsr1l	equ	0xFE1
 21210                           indf2	equ	0xFDF
 21211                           postinc2	equ	0xFDE
 21212                           postdec2	equ	0xFDD
 21213                           plusw2	equ	0xFDB
 21214                           fsr2h	equ	0xFDA
 21215                           fsr2l	equ	0xFD9
 21216                           status	equ	0xFD8
 21217                           
 21218 ;; *************** function _scale *****************
 21219 ;; Defined at:
 21220 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 21221 ;; Parameters:    Size  Location     Type
 21222 ;;  scl             1    wreg     char 
 21223 ;; Auto vars:     Size  Location     Type
 21224 ;;  scl             1   33[BANK0 ] char 
 21225 ;; Return value:  Size  Location     Type
 21226 ;;                  3   27[BANK0 ] char 
 21227 ;; Registers used:
 21228 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21229 ;; Tracked objects:
 21230 ;;		On entry : 0/0
 21231 ;;		On exit  : 0/0
 21232 ;;		Unchanged: 0/0
 21233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21234 ;;      Params:         0       3       0       0       0       0       0
 21235 ;;      Locals:         0       4       0       0       0       0       0
 21236 ;;      Temps:          0       0       0       0       0       0       0
 21237 ;;      Totals:         0       7       0       0       0       0       0
 21238 ;;Total ram usage:        7 bytes
 21239 ;; Hardware stack levels used:    1
 21240 ;; Hardware stack levels required when called:    3
 21241 ;; This function calls:
 21242 ;;		___awdiv
 21243 ;;		___awmod
 21244 ;;		___ftmul
 21245 ;;		___wmul
 21246 ;; This function is called by:
 21247 ;;		__doprnt
 21248 ;; This function uses a non-reentrant model
 21249 ;;
 21250                           
 21251                           	psect	text120
 21252  002502                     __ptext120:
 21253                           	opt stack 0
 21254  002502                     _scale:
 21255                           	opt stack 0
 21256  002502  FFFF               	dw	65535	; assembler added errata NOP
 21257                           
 21258                           ; BSR set to: 0
 21259                           ;incstack = 0
 21260                           ;scale@scl stored from wreg
 21261  002504  0100               	movlb	0	; () banked
 21262  002506  6F81               	movwf	scale@scl& (0+255),b
 21263                           
 21264                           ;doprnt.c: 428: if(scl < 0) {
 21265  002508  0100               	movlb	0	; () banked
 21266  00250A  AF81               	btfss	scale@scl& (0+255),7,b
 21267  00250C  D110               	goto	l1222
 21268                           
 21269                           ; BSR set to: 0
 21270                           ;doprnt.c: 429: scl = -scl;
 21271  00250E  0100               	movlb	0	; () banked
 21272  002510  6D81               	negf	scale@scl& (0+255),b
 21273                           
 21274                           ;doprnt.c: 430: if(scl>=110)
 21275  002512  0100               	movlb	0	; () banked
 21276  002514  5181               	movf	scale@scl& (0+255),w,b
 21277  002516  0A80               	xorlw	128
 21278  002518  0F12               	addlw	-238
 21279  00251A  A0D8               	btfss	status,0,c
 21280  00251C  D097               	goto	l1223
 21281                           
 21282                           ; BSR set to: 0
 21283                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 21284  00251E  0E00               	movlw	0
 21285  002520  6E2A               	movwf	___wmul@multiplicand+1,c
 21286  002522  0E03               	movlw	3
 21287  002524  6E29               	movwf	___wmul@multiplicand,c
 21288  002526  0E00               	movlw	0
 21289  002528  6E22               	movwf	___awdiv@divisor+1,c
 21290  00252A  0E0A               	movlw	10
 21291  00252C  6E21               	movwf	___awdiv@divisor,c
 21292  00252E  0E00               	movlw	0
 21293  002530  6E1C               	movwf	___awmod@divisor+1,c
 21294  002532  0E64               	movlw	100
 21295  002534  6E1B               	movwf	___awmod@divisor,c
 21296  002536  0100               	movlb	0	; () banked
 21297  002538  5181               	movf	scale@scl& (0+255),w,b
 21298  00253A  6E19               	movwf	___awmod@dividend,c
 21299  00253C  6A1A               	clrf	___awmod@dividend+1,c
 21300  00253E  BE19               	btfsc	___awmod@dividend,7,c
 21301  002540  061A               	decf	___awmod@dividend+1,f,c
 21302  002542  EC90  F02F         	call	___awmod
 21303  002546  C019  F01F         	movff	?___awmod,___awdiv@dividend
 21304  00254A  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 21305  00254E  EC2E  F031         	call	___awdiv	;wreg free
 21306  002552  0E09               	movlw	9
 21307  002554  241F               	addwf	?___awdiv,w,c
 21308  002556  6E27               	movwf	___wmul@multiplier,c
 21309  002558  0E00               	movlw	0
 21310  00255A  2020               	addwfc	?___awdiv+1,w,c
 21311  00255C  6E28               	movwf	___wmul@multiplier+1,c
 21312  00255E  EC10  F029         	call	___wmul	;wreg free
 21313  002562  0E72               	movlw	low __npowers_
 21314  002564  2427               	addwf	?___wmul,w,c
 21315  002566  6EF6               	movwf	tblptrl,c
 21316  002568  0E7D               	movlw	high __npowers_
 21317  00256A  2028               	addwfc	?___wmul+1,w,c
 21318  00256C  6EF7               	movwf	tblptrh,c
 21319  00256E                     	if	0	;There are less than 3 active tblptr bytes
 21320  00256E                     	endif
 21321  00256E  0009               	tblrd		*+
 21322  002570  FFFF               	dw	65535	; errata NOP
 21323  002572  CFF5 F06F          	movff	tablat,___ftmul@f2
 21324  002576  0009               	tblrd		*+
 21325  002578  FFFF               	dw	65535	; errata NOP
 21326  00257A  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21327  00257E  000A               	tblrd		*-
 21328  002580  FFFF               	dw	65535	; errata NOP
 21329  002582  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21330  002586  0E00               	movlw	0
 21331  002588  6E22               	movwf	___awdiv@divisor+1,c
 21332  00258A  0E64               	movlw	100
 21333  00258C  6E21               	movwf	___awdiv@divisor,c
 21334  00258E  0100               	movlb	0	; () banked
 21335  002590  5181               	movf	scale@scl& (0+255),w,b
 21336  002592  6E1F               	movwf	___awdiv@dividend,c
 21337  002594  6A20               	clrf	___awdiv@dividend+1,c
 21338  002596  BE1F               	btfsc	___awdiv@dividend,7,c
 21339  002598  0620               	decf	___awdiv@dividend+1,f,c
 21340  00259A  EC2E  F031         	call	___awdiv	;wreg free
 21341  00259E  0E12               	movlw	18
 21342  0025A0  241F               	addwf	?___awdiv,w,c
 21343  0025A2  6E27               	movwf	___wmul@multiplier,c
 21344  0025A4  0E00               	movlw	0
 21345  0025A6  2020               	addwfc	?___awdiv+1,w,c
 21346  0025A8  6E28               	movwf	___wmul@multiplier+1,c
 21347  0025AA  0E00               	movlw	0
 21348  0025AC  6E2A               	movwf	___wmul@multiplicand+1,c
 21349  0025AE  0E03               	movlw	3
 21350  0025B0  6E29               	movwf	___wmul@multiplicand,c
 21351  0025B2  EC10  F029         	call	___wmul	;wreg free
 21352  0025B6  0E72               	movlw	low __npowers_
 21353  0025B8  2427               	addwf	?___wmul,w,c
 21354  0025BA  6EF6               	movwf	tblptrl,c
 21355  0025BC  0E7D               	movlw	high __npowers_
 21356  0025BE  2028               	addwfc	?___wmul+1,w,c
 21357  0025C0  6EF7               	movwf	tblptrh,c
 21358  0025C2                     	if	0	;There are less than 3 active tblptr bytes
 21359  0025C2                     	endif
 21360  0025C2  0009               	tblrd		*+
 21361  0025C4  FFFF               	dw	65535	; errata NOP
 21362  0025C6  CFF5 F06C          	movff	tablat,___ftmul@f1
 21363  0025CA  0009               	tblrd		*+
 21364  0025CC  FFFF               	dw	65535	; errata NOP
 21365  0025CE  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 21366  0025D2  000A               	tblrd		*-
 21367  0025D4  FFFF               	dw	65535	; errata NOP
 21368  0025D6  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 21369  0025DA  EC53  F03C         	call	___ftmul	;wreg free
 21370  0025DE  C06C  F07E         	movff	?___ftmul,_scale$3557
 21371  0025E2  C06D  F07F         	movff	?___ftmul+1,_scale$3557+1
 21372  0025E6  C06E  F080         	movff	?___ftmul+2,_scale$3557+2
 21373                           
 21374                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 21375  0025EA  C07E  F06C         	movff	_scale$3557,___ftmul@f1
 21376  0025EE  C07F  F06D         	movff	_scale$3557+1,___ftmul@f1+1
 21377  0025F2  C080  F06E         	movff	_scale$3557+2,___ftmul@f1+2
 21378  0025F6  0E00               	movlw	0
 21379  0025F8  6E2A               	movwf	___wmul@multiplicand+1,c
 21380  0025FA  0E03               	movlw	3
 21381  0025FC  6E29               	movwf	___wmul@multiplicand,c
 21382  0025FE  0E00               	movlw	0
 21383  002600  6E1C               	movwf	___awmod@divisor+1,c
 21384  002602  0E0A               	movlw	10
 21385  002604  6E1B               	movwf	___awmod@divisor,c
 21386  002606  0100               	movlb	0	; () banked
 21387  002608  5181               	movf	scale@scl& (0+255),w,b
 21388  00260A  6E19               	movwf	___awmod@dividend,c
 21389  00260C  6A1A               	clrf	___awmod@dividend+1,c
 21390  00260E  BE19               	btfsc	___awmod@dividend,7,c
 21391  002610  061A               	decf	___awmod@dividend+1,f,c
 21392  002612  EC90  F02F         	call	___awmod	;wreg free
 21393  002616  C019  F027         	movff	?___awmod,___wmul@multiplier
 21394  00261A  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21395  00261E  EC10  F029         	call	___wmul	;wreg free
 21396  002622  0E72               	movlw	low __npowers_
 21397  002624  2427               	addwf	?___wmul,w,c
 21398  002626  6EF6               	movwf	tblptrl,c
 21399  002628  0E7D               	movlw	high __npowers_
 21400  00262A  2028               	addwfc	?___wmul+1,w,c
 21401  00262C  6EF7               	movwf	tblptrh,c
 21402  00262E                     	if	0	;There are less than 3 active tblptr bytes
 21403  00262E                     	endif
 21404  00262E  0009               	tblrd		*+
 21405  002630  FFFF               	dw	65535	; errata NOP
 21406  002632  CFF5 F06F          	movff	tablat,___ftmul@f2
 21407  002636  0009               	tblrd		*+
 21408  002638  FFFF               	dw	65535	; errata NOP
 21409  00263A  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21410  00263E  000A               	tblrd		*-
 21411  002640  FFFF               	dw	65535	; errata NOP
 21412  002642  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21413  002646  EC53  F03C         	call	___ftmul	;wreg free
 21414  00264A  D16A               	goto	L24
 21415  00264C                     l1223:
 21416  00264C  FFFF               	dw	65535	; assembler added errata NOP
 21417                           
 21418                           ;doprnt.c: 432: else if(scl > 10)
 21419  00264E  0100               	movlb	0	; () banked
 21420  002650  5181               	movf	scale@scl& (0+255),w,b
 21421  002652  0A80               	xorlw	128
 21422  002654  0F75               	addlw	-139
 21423  002656  A0D8               	btfss	status,0,c
 21424  002658  D055               	goto	l1226
 21425                           
 21426                           ; BSR set to: 0
 21427                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 21428  00265A  0E00               	movlw	0
 21429  00265C  6E22               	movwf	___awdiv@divisor+1,c
 21430  00265E  0E0A               	movlw	10
 21431  002660  6E21               	movwf	___awdiv@divisor,c
 21432  002662  0100               	movlb	0	; () banked
 21433  002664  5181               	movf	scale@scl& (0+255),w,b
 21434  002666  6E1F               	movwf	___awdiv@dividend,c
 21435  002668  6A20               	clrf	___awdiv@dividend+1,c
 21436  00266A  BE1F               	btfsc	___awdiv@dividend,7,c
 21437  00266C  0620               	decf	___awdiv@dividend+1,f,c
 21438  00266E  EC2E  F031         	call	___awdiv	;wreg free
 21439  002672  0E09               	movlw	9
 21440  002674  241F               	addwf	?___awdiv,w,c
 21441  002676  6E27               	movwf	___wmul@multiplier,c
 21442  002678  0E00               	movlw	0
 21443  00267A  2020               	addwfc	?___awdiv+1,w,c
 21444  00267C  6E28               	movwf	___wmul@multiplier+1,c
 21445  00267E  0E00               	movlw	0
 21446  002680  6E2A               	movwf	___wmul@multiplicand+1,c
 21447  002682  0E03               	movlw	3
 21448  002684  6E29               	movwf	___wmul@multiplicand,c
 21449  002686  EC10  F029         	call	___wmul	;wreg free
 21450  00268A  0E72               	movlw	low __npowers_
 21451  00268C  2427               	addwf	?___wmul,w,c
 21452  00268E  6EF6               	movwf	tblptrl,c
 21453  002690  0E7D               	movlw	high __npowers_
 21454  002692  2028               	addwfc	?___wmul+1,w,c
 21455  002694  6EF7               	movwf	tblptrh,c
 21456  002696                     	if	0	;There are less than 3 active tblptr bytes
 21457  002696                     	endif
 21458  002696  0009               	tblrd		*+
 21459  002698  FFFF               	dw	65535	; errata NOP
 21460  00269A  CFF5 F06C          	movff	tablat,___ftmul@f1
 21461  00269E  0009               	tblrd		*+
 21462  0026A0  FFFF               	dw	65535	; errata NOP
 21463  0026A2  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 21464  0026A6  000A               	tblrd		*-
 21465  0026A8  FFFF               	dw	65535	; errata NOP
 21466  0026AA  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 21467  0026AE  0E00               	movlw	0
 21468  0026B0  6E2A               	movwf	___wmul@multiplicand+1,c
 21469  0026B2  0E03               	movlw	3
 21470  0026B4  6E29               	movwf	___wmul@multiplicand,c
 21471  0026B6  0E00               	movlw	0
 21472  0026B8  6E1C               	movwf	___awmod@divisor+1,c
 21473  0026BA  0E0A               	movlw	10
 21474  0026BC  6E1B               	movwf	___awmod@divisor,c
 21475  0026BE  0100               	movlb	0	; () banked
 21476  0026C0  5181               	movf	scale@scl& (0+255),w,b
 21477  0026C2  6E19               	movwf	___awmod@dividend,c
 21478  0026C4  6A1A               	clrf	___awmod@dividend+1,c
 21479  0026C6  BE19               	btfsc	___awmod@dividend,7,c
 21480  0026C8  061A               	decf	___awmod@dividend+1,f,c
 21481  0026CA  EC90  F02F         	call	___awmod	;wreg free
 21482  0026CE  C019  F027         	movff	?___awmod,___wmul@multiplier
 21483  0026D2  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21484  0026D6  EC10  F029         	call	___wmul	;wreg free
 21485  0026DA  0E72               	movlw	low __npowers_
 21486  0026DC  2427               	addwf	?___wmul,w,c
 21487  0026DE  6EF6               	movwf	tblptrl,c
 21488  0026E0  0E7D               	movlw	high __npowers_
 21489  0026E2  2028               	addwfc	?___wmul+1,w,c
 21490  0026E4  6EF7               	movwf	tblptrh,c
 21491  0026E6                     	if	0	;There are less than 3 active tblptr bytes
 21492  0026E6                     	endif
 21493  0026E6  0009               	tblrd		*+
 21494  0026E8  FFFF               	dw	65535	; errata NOP
 21495  0026EA  CFF5 F06F          	movff	tablat,___ftmul@f2
 21496  0026EE  0009               	tblrd		*+
 21497  0026F0  FFFF               	dw	65535	; errata NOP
 21498  0026F2  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21499  0026F6  000A               	tblrd		*-
 21500  0026F8  FFFF               	dw	65535	; errata NOP
 21501  0026FA  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21502  0026FE  EC53  F03C         	call	___ftmul	;wreg free
 21503  002702  D10E               	goto	L24
 21504  002704                     l1226:
 21505  002704  FFFF               	dw	65535	; assembler added errata NOP
 21506                           
 21507                           ;doprnt.c: 434: return _npowers_[scl];
 21508  002706  0100               	movlb	0	; () banked
 21509  002708  5181               	movf	scale@scl& (0+255),w,b
 21510  00270A  0D03               	mullw	3
 21511  00270C  0E72               	movlw	low __npowers_
 21512  00270E  24F3               	addwf	prodl,w,c
 21513  002710  6EF6               	movwf	tblptrl,c
 21514  002712  0E7D               	movlw	high __npowers_
 21515  002714  20F4               	addwfc	prodh,w,c
 21516  002716  6EF7               	movwf	tblptrh,c
 21517  002718                     	if	0	;There are less than 3 active tblptr bytes
 21518  002718                     	endif
 21519  002718  0009               	tblrd		*+
 21520  00271A  FFFF               	dw	65535	; errata NOP
 21521  00271C  CFF5 F07B          	movff	tablat,?_scale
 21522  002720  0009               	tblrd		*+
 21523  002722  FFFF               	dw	65535	; errata NOP
 21524  002724  CFF5 F07C          	movff	tablat,?_scale+1
 21525  002728  000A               	tblrd		*-
 21526  00272A  FFFF               	dw	65535	; errata NOP
 21527  00272C  D115               	goto	L23
 21528  00272E                     l1222:
 21529  00272E  FFFF               	dw	65535	; assembler added errata NOP
 21530                           
 21531                           ; BSR set to: 0
 21532                           ;doprnt.c: 435: }
 21533                           ;doprnt.c: 436: if(scl>=110)
 21534                           
 21535                           ; BSR set to: 0
 21536  002730  0100               	movlb	0	; () banked
 21537  002732  5181               	movf	scale@scl& (0+255),w,b
 21538  002734  0A80               	xorlw	128
 21539  002736  0F12               	addlw	-238
 21540  002738  A0D8               	btfss	status,0,c
 21541  00273A  D097               	goto	l1227
 21542                           
 21543                           ; BSR set to: 0
 21544                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 21545  00273C  0E00               	movlw	0
 21546  00273E  6E2A               	movwf	___wmul@multiplicand+1,c
 21547  002740  0E03               	movlw	3
 21548  002742  6E29               	movwf	___wmul@multiplicand,c
 21549  002744  0E00               	movlw	0
 21550  002746  6E22               	movwf	___awdiv@divisor+1,c
 21551  002748  0E0A               	movlw	10
 21552  00274A  6E21               	movwf	___awdiv@divisor,c
 21553  00274C  0E00               	movlw	0
 21554  00274E  6E1C               	movwf	___awmod@divisor+1,c
 21555  002750  0E64               	movlw	100
 21556  002752  6E1B               	movwf	___awmod@divisor,c
 21557  002754  0100               	movlb	0	; () banked
 21558  002756  5181               	movf	scale@scl& (0+255),w,b
 21559  002758  6E19               	movwf	___awmod@dividend,c
 21560  00275A  6A1A               	clrf	___awmod@dividend+1,c
 21561  00275C  BE19               	btfsc	___awmod@dividend,7,c
 21562  00275E  061A               	decf	___awmod@dividend+1,f,c
 21563  002760  EC90  F02F         	call	___awmod	;wreg free
 21564  002764  C019  F01F         	movff	?___awmod,___awdiv@dividend
 21565  002768  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 21566  00276C  EC2E  F031         	call	___awdiv	;wreg free
 21567  002770  0E09               	movlw	9
 21568  002772  241F               	addwf	?___awdiv,w,c
 21569  002774  6E27               	movwf	___wmul@multiplier,c
 21570  002776  0E00               	movlw	0
 21571  002778  2020               	addwfc	?___awdiv+1,w,c
 21572  00277A  6E28               	movwf	___wmul@multiplier+1,c
 21573  00277C  EC10  F029         	call	___wmul	;wreg free
 21574  002780  0E4B               	movlw	low __powers_
 21575  002782  2427               	addwf	?___wmul,w,c
 21576  002784  6EF6               	movwf	tblptrl,c
 21577  002786  0E7D               	movlw	high __powers_
 21578  002788  2028               	addwfc	?___wmul+1,w,c
 21579  00278A  6EF7               	movwf	tblptrh,c
 21580  00278C                     	if	0	;There are less than 3 active tblptr bytes
 21581  00278C                     	endif
 21582  00278C  0009               	tblrd		*+
 21583  00278E  FFFF               	dw	65535	; errata NOP
 21584  002790  CFF5 F06F          	movff	tablat,___ftmul@f2
 21585  002794  0009               	tblrd		*+
 21586  002796  FFFF               	dw	65535	; errata NOP
 21587  002798  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21588  00279C  000A               	tblrd		*-
 21589  00279E  FFFF               	dw	65535	; errata NOP
 21590  0027A0  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21591  0027A4  0E00               	movlw	0
 21592  0027A6  6E22               	movwf	___awdiv@divisor+1,c
 21593  0027A8  0E64               	movlw	100
 21594  0027AA  6E21               	movwf	___awdiv@divisor,c
 21595  0027AC  0100               	movlb	0	; () banked
 21596  0027AE  5181               	movf	scale@scl& (0+255),w,b
 21597  0027B0  6E1F               	movwf	___awdiv@dividend,c
 21598  0027B2  6A20               	clrf	___awdiv@dividend+1,c
 21599  0027B4  BE1F               	btfsc	___awdiv@dividend,7,c
 21600  0027B6  0620               	decf	___awdiv@dividend+1,f,c
 21601  0027B8  EC2E  F031         	call	___awdiv	;wreg free
 21602  0027BC  0E12               	movlw	18
 21603  0027BE  241F               	addwf	?___awdiv,w,c
 21604  0027C0  6E27               	movwf	___wmul@multiplier,c
 21605  0027C2  0E00               	movlw	0
 21606  0027C4  2020               	addwfc	?___awdiv+1,w,c
 21607  0027C6  6E28               	movwf	___wmul@multiplier+1,c
 21608  0027C8  0E00               	movlw	0
 21609  0027CA  6E2A               	movwf	___wmul@multiplicand+1,c
 21610  0027CC  0E03               	movlw	3
 21611  0027CE  6E29               	movwf	___wmul@multiplicand,c
 21612  0027D0  EC10  F029         	call	___wmul	;wreg free
 21613  0027D4  0E4B               	movlw	low __powers_
 21614  0027D6  2427               	addwf	?___wmul,w,c
 21615  0027D8  6EF6               	movwf	tblptrl,c
 21616  0027DA  0E7D               	movlw	high __powers_
 21617  0027DC  2028               	addwfc	?___wmul+1,w,c
 21618  0027DE  6EF7               	movwf	tblptrh,c
 21619  0027E0                     	if	0	;There are less than 3 active tblptr bytes
 21620  0027E0                     	endif
 21621  0027E0  0009               	tblrd		*+
 21622  0027E2  FFFF               	dw	65535	; errata NOP
 21623  0027E4  CFF5 F06C          	movff	tablat,___ftmul@f1
 21624  0027E8  0009               	tblrd		*+
 21625  0027EA  FFFF               	dw	65535	; errata NOP
 21626  0027EC  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 21627  0027F0  000A               	tblrd		*-
 21628  0027F2  FFFF               	dw	65535	; errata NOP
 21629  0027F4  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 21630  0027F8  EC53  F03C         	call	___ftmul	;wreg free
 21631  0027FC  C06C  F07E         	movff	?___ftmul,_scale$3557
 21632  002800  C06D  F07F         	movff	?___ftmul+1,_scale$3557+1
 21633  002804  C06E  F080         	movff	?___ftmul+2,_scale$3557+2
 21634                           
 21635                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 21636  002808  C07E  F06C         	movff	_scale$3557,___ftmul@f1
 21637  00280C  C07F  F06D         	movff	_scale$3557+1,___ftmul@f1+1
 21638  002810  C080  F06E         	movff	_scale$3557+2,___ftmul@f1+2
 21639  002814  0E00               	movlw	0
 21640  002816  6E2A               	movwf	___wmul@multiplicand+1,c
 21641  002818  0E03               	movlw	3
 21642  00281A  6E29               	movwf	___wmul@multiplicand,c
 21643  00281C  0E00               	movlw	0
 21644  00281E  6E1C               	movwf	___awmod@divisor+1,c
 21645  002820  0E0A               	movlw	10
 21646  002822  6E1B               	movwf	___awmod@divisor,c
 21647  002824  0100               	movlb	0	; () banked
 21648  002826  5181               	movf	scale@scl& (0+255),w,b
 21649  002828  6E19               	movwf	___awmod@dividend,c
 21650  00282A  6A1A               	clrf	___awmod@dividend+1,c
 21651  00282C  BE19               	btfsc	___awmod@dividend,7,c
 21652  00282E  061A               	decf	___awmod@dividend+1,f,c
 21653  002830  EC90  F02F         	call	___awmod	;wreg free
 21654  002834  C019  F027         	movff	?___awmod,___wmul@multiplier
 21655  002838  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21656  00283C  EC10  F029         	call	___wmul	;wreg free
 21657  002840  0E4B               	movlw	low __powers_
 21658  002842  2427               	addwf	?___wmul,w,c
 21659  002844  6EF6               	movwf	tblptrl,c
 21660  002846  0E7D               	movlw	high __powers_
 21661  002848  2028               	addwfc	?___wmul+1,w,c
 21662  00284A  6EF7               	movwf	tblptrh,c
 21663  00284C                     	if	0	;There are less than 3 active tblptr bytes
 21664  00284C                     	endif
 21665  00284C  0009               	tblrd		*+
 21666  00284E  FFFF               	dw	65535	; errata NOP
 21667  002850  CFF5 F06F          	movff	tablat,___ftmul@f2
 21668  002854  0009               	tblrd		*+
 21669  002856  FFFF               	dw	65535	; errata NOP
 21670  002858  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21671  00285C  000A               	tblrd		*-
 21672  00285E  FFFF               	dw	65535	; errata NOP
 21673  002860  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21674  002864  EC53  F03C         	call	___ftmul	;wreg free
 21675  002868  D05B               	goto	L24
 21676  00286A                     l1227:
 21677  00286A  FFFF               	dw	65535	; assembler added errata NOP
 21678                           
 21679                           ;doprnt.c: 438: else if(scl > 10)
 21680  00286C  0100               	movlb	0	; () banked
 21681  00286E  5181               	movf	scale@scl& (0+255),w,b
 21682  002870  0A80               	xorlw	128
 21683  002872  0F75               	addlw	-139
 21684  002874  A0D8               	btfss	status,0,c
 21685  002876  D05C               	goto	l1229
 21686                           
 21687                           ; BSR set to: 0
 21688                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 21689  002878  0E00               	movlw	0
 21690  00287A  6E22               	movwf	___awdiv@divisor+1,c
 21691  00287C  0E0A               	movlw	10
 21692  00287E  6E21               	movwf	___awdiv@divisor,c
 21693  002880  0100               	movlb	0	; () banked
 21694  002882  5181               	movf	scale@scl& (0+255),w,b
 21695  002884  6E1F               	movwf	___awdiv@dividend,c
 21696  002886  6A20               	clrf	___awdiv@dividend+1,c
 21697  002888  BE1F               	btfsc	___awdiv@dividend,7,c
 21698  00288A  0620               	decf	___awdiv@dividend+1,f,c
 21699  00288C  EC2E  F031         	call	___awdiv	;wreg free
 21700  002890  0E09               	movlw	9
 21701  002892  241F               	addwf	?___awdiv,w,c
 21702  002894  6E27               	movwf	___wmul@multiplier,c
 21703  002896  0E00               	movlw	0
 21704  002898  2020               	addwfc	?___awdiv+1,w,c
 21705  00289A  6E28               	movwf	___wmul@multiplier+1,c
 21706  00289C  0E00               	movlw	0
 21707  00289E  6E2A               	movwf	___wmul@multiplicand+1,c
 21708  0028A0  0E03               	movlw	3
 21709  0028A2  6E29               	movwf	___wmul@multiplicand,c
 21710  0028A4  EC10  F029         	call	___wmul	;wreg free
 21711  0028A8  0E4B               	movlw	low __powers_
 21712  0028AA  2427               	addwf	?___wmul,w,c
 21713  0028AC  6EF6               	movwf	tblptrl,c
 21714  0028AE  0E7D               	movlw	high __powers_
 21715  0028B0  2028               	addwfc	?___wmul+1,w,c
 21716  0028B2  6EF7               	movwf	tblptrh,c
 21717  0028B4                     	if	0	;There are less than 3 active tblptr bytes
 21718  0028B4                     	endif
 21719  0028B4  0009               	tblrd		*+
 21720  0028B6  FFFF               	dw	65535	; errata NOP
 21721  0028B8  CFF5 F06C          	movff	tablat,___ftmul@f1
 21722  0028BC  0009               	tblrd		*+
 21723  0028BE  FFFF               	dw	65535	; errata NOP
 21724  0028C0  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 21725  0028C4  000A               	tblrd		*-
 21726  0028C6  FFFF               	dw	65535	; errata NOP
 21727  0028C8  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 21728  0028CC  0E00               	movlw	0
 21729  0028CE  6E2A               	movwf	___wmul@multiplicand+1,c
 21730  0028D0  0E03               	movlw	3
 21731  0028D2  6E29               	movwf	___wmul@multiplicand,c
 21732  0028D4  0E00               	movlw	0
 21733  0028D6  6E1C               	movwf	___awmod@divisor+1,c
 21734  0028D8  0E0A               	movlw	10
 21735  0028DA  6E1B               	movwf	___awmod@divisor,c
 21736  0028DC  0100               	movlb	0	; () banked
 21737  0028DE  5181               	movf	scale@scl& (0+255),w,b
 21738  0028E0  6E19               	movwf	___awmod@dividend,c
 21739  0028E2  6A1A               	clrf	___awmod@dividend+1,c
 21740  0028E4  BE19               	btfsc	___awmod@dividend,7,c
 21741  0028E6  061A               	decf	___awmod@dividend+1,f,c
 21742  0028E8  EC90  F02F         	call	___awmod	;wreg free
 21743  0028EC  C019  F027         	movff	?___awmod,___wmul@multiplier
 21744  0028F0  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21745  0028F4  EC10  F029         	call	___wmul	;wreg free
 21746  0028F8  0E4B               	movlw	low __powers_
 21747  0028FA  2427               	addwf	?___wmul,w,c
 21748  0028FC  6EF6               	movwf	tblptrl,c
 21749  0028FE  0E7D               	movlw	high __powers_
 21750  002900  2028               	addwfc	?___wmul+1,w,c
 21751  002902  6EF7               	movwf	tblptrh,c
 21752  002904                     	if	0	;There are less than 3 active tblptr bytes
 21753  002904                     	endif
 21754  002904  0009               	tblrd		*+
 21755  002906  FFFF               	dw	65535	; errata NOP
 21756  002908  CFF5 F06F          	movff	tablat,___ftmul@f2
 21757  00290C  0009               	tblrd		*+
 21758  00290E  FFFF               	dw	65535	; errata NOP
 21759  002910  CFF5 F070          	movff	tablat,___ftmul@f2+1
 21760  002914  000A               	tblrd		*-
 21761  002916  FFFF               	dw	65535	; errata NOP
 21762  002918  CFF5 F071          	movff	tablat,___ftmul@f2+2
 21763  00291C  EC53  F03C         	call	___ftmul	;wreg free
 21764  002920                     L24:
 21765  002920  FFFF               	dw	65535	; assembler added errata NOP
 21766  002922  C06C  F07B         	movff	?___ftmul,?_scale
 21767  002926  C06D  F07C         	movff	?___ftmul+1,?_scale+1
 21768  00292A  C06E  F07D         	movff	?___ftmul+2,?_scale+2
 21769  00292E  D017               	goto	l9147
 21770  002930                     l1229:
 21771  002930  FFFF               	dw	65535	; assembler added errata NOP
 21772                           
 21773                           ;doprnt.c: 440: return _powers_[scl];
 21774  002932  0100               	movlb	0	; () banked
 21775  002934  5181               	movf	scale@scl& (0+255),w,b
 21776  002936  0D03               	mullw	3
 21777  002938  0E4B               	movlw	low __powers_
 21778  00293A  24F3               	addwf	prodl,w,c
 21779  00293C  6EF6               	movwf	tblptrl,c
 21780  00293E  0E7D               	movlw	high __powers_
 21781  002940  20F4               	addwfc	prodh,w,c
 21782  002942  6EF7               	movwf	tblptrh,c
 21783  002944                     	if	0	;There are less than 3 active tblptr bytes
 21784  002944                     	endif
 21785  002944  0009               	tblrd		*+
 21786  002946  FFFF               	dw	65535	; errata NOP
 21787  002948  CFF5 F07B          	movff	tablat,?_scale
 21788  00294C  0009               	tblrd		*+
 21789  00294E  FFFF               	dw	65535	; errata NOP
 21790  002950  CFF5 F07C          	movff	tablat,?_scale+1
 21791  002954  000A               	tblrd		*-
 21792  002956  FFFF               	dw	65535	; errata NOP
 21793  002958                     L23:
 21794  002958  FFFF               	dw	65535	; assembler added errata NOP
 21795  00295A  CFF5 F07D          	movff	tablat,?_scale+2
 21796  00295E                     l9147:
 21797  00295E  FFFF               	dw	65535	; assembler added errata NOP
 21798                           
 21799                           ; BSR set to: 0
 21800  002960  0012               	return		;funcret
 21801  002962  FFFF               	dw	65535	; errata NOP
 21802  002964                     __end_of_scale:
 21803                           	opt stack 0
 21804                           tosu	equ	0xFFF
 21805                           tosh	equ	0xFFE
 21806                           tosl	equ	0xFFD
 21807                           pclath	equ	0xFFA
 21808                           tblptru	equ	0xFF8
 21809                           tblptrh	equ	0xFF7
 21810                           tblptrl	equ	0xFF6
 21811                           tablat	equ	0xFF5
 21812                           prodh	equ	0xFF4
 21813                           prodl	equ	0xFF3
 21814                           intcon	equ	0xFF2
 21815                           postinc0	equ	0xFEE
 21816                           wreg	equ	0xFE8
 21817                           indf1	equ	0xFE7
 21818                           fsr1h	equ	0xFE2
 21819                           fsr1l	equ	0xFE1
 21820                           indf2	equ	0xFDF
 21821                           postinc2	equ	0xFDE
 21822                           postdec2	equ	0xFDD
 21823                           plusw2	equ	0xFDB
 21824                           fsr2h	equ	0xFDA
 21825                           fsr2l	equ	0xFD9
 21826                           status	equ	0xFD8
 21827                           
 21828 ;; *************** function _putch *****************
 21829 ;; Defined at:
 21830 ;;		line 65 in file "USART.c"
 21831 ;; Parameters:    Size  Location     Type
 21832 ;;  byte            1    wreg     unsigned char 
 21833 ;; Auto vars:     Size  Location     Type
 21834 ;;  byte            1   24[COMRAM] unsigned char 
 21835 ;; Return value:  Size  Location     Type
 21836 ;;                  1    wreg      void 
 21837 ;; Registers used:
 21838 ;;		wreg
 21839 ;; Tracked objects:
 21840 ;;		On entry : 0/0
 21841 ;;		On exit  : 0/0
 21842 ;;		Unchanged: 0/0
 21843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21844 ;;      Params:         0       0       0       0       0       0       0
 21845 ;;      Locals:         1       0       0       0       0       0       0
 21846 ;;      Temps:          0       0       0       0       0       0       0
 21847 ;;      Totals:         1       0       0       0       0       0       0
 21848 ;;Total ram usage:        1 bytes
 21849 ;; Hardware stack levels used:    1
 21850 ;; Hardware stack levels required when called:    1
 21851 ;; This function calls:
 21852 ;;		Nothing
 21853 ;; This function is called by:
 21854 ;;		_printf
 21855 ;;		__doprnt
 21856 ;; This function uses a non-reentrant model
 21857 ;;
 21858                           
 21859                           	psect	text121
 21860  004CF2                     __ptext121:
 21861                           	opt stack 0
 21862  004CF2                     _putch:
 21863                           	opt stack 0
 21864  004CF2  FFFF               	dw	65535	; assembler added errata NOP
 21865                           
 21866                           ;incstack = 0
 21867                           ;putch@byte stored from wreg
 21868  004CF4  6E19               	movwf	putch@byte,c
 21869  004CF6  FFFF               	dw	65535	; assembler added errata NOP
 21870                           
 21871                           ;USART.c: 68: continue;
 21872                           
 21873                           ;USART.c: 67: while (!PIR1bits.TXIF)
 21874  004CF8  A89E               	btfss	3998,4,c	;volatile
 21875  004CFA  D7FD               	goto	l9085
 21876                           
 21877                           ;USART.c: 69: TXREG = byte;
 21878  004CFC  C019  FFAD         	movff	putch@byte,4013	;volatile
 21879  004D00  0012               	return		;funcret
 21880  004D02  FFFF               	dw	65535	; errata NOP
 21881  004D04                     __end_of_putch:
 21882                           	opt stack 0
 21883                           tosu	equ	0xFFF
 21884                           tosh	equ	0xFFE
 21885                           tosl	equ	0xFFD
 21886                           pclath	equ	0xFFA
 21887                           tblptru	equ	0xFF8
 21888                           tblptrh	equ	0xFF7
 21889                           tblptrl	equ	0xFF6
 21890                           tablat	equ	0xFF5
 21891                           prodh	equ	0xFF4
 21892                           prodl	equ	0xFF3
 21893                           intcon	equ	0xFF2
 21894                           postinc0	equ	0xFEE
 21895                           wreg	equ	0xFE8
 21896                           indf1	equ	0xFE7
 21897                           fsr1h	equ	0xFE2
 21898                           fsr1l	equ	0xFE1
 21899                           indf2	equ	0xFDF
 21900                           postinc2	equ	0xFDE
 21901                           postdec2	equ	0xFDD
 21902                           plusw2	equ	0xFDB
 21903                           fsr2h	equ	0xFDA
 21904                           fsr2l	equ	0xFD9
 21905                           status	equ	0xFD8
 21906                           
 21907 ;; *************** function _isdigit *****************
 21908 ;; Defined at:
 21909 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
 21910 ;; Parameters:    Size  Location     Type
 21911 ;;  c               1    wreg     unsigned char 
 21912 ;; Auto vars:     Size  Location     Type
 21913 ;;  c               1   26[COMRAM] unsigned char 
 21914 ;; Return value:  Size  Location     Type
 21915 ;;		None               void
 21916 ;; Registers used:
 21917 ;;		wreg, status,2, status,0
 21918 ;; Tracked objects:
 21919 ;;		On entry : 0/0
 21920 ;;		On exit  : 0/0
 21921 ;;		Unchanged: 0/0
 21922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21923 ;;      Params:         0       0       0       0       0       0       0
 21924 ;;      Locals:         2       0       0       0       0       0       0
 21925 ;;      Temps:          1       0       0       0       0       0       0
 21926 ;;      Totals:         3       0       0       0       0       0       0
 21927 ;;Total ram usage:        3 bytes
 21928 ;; Hardware stack levels used:    1
 21929 ;; Hardware stack levels required when called:    1
 21930 ;; This function calls:
 21931 ;;		Nothing
 21932 ;; This function is called by:
 21933 ;;		__doprnt
 21934 ;;		_strtod
 21935 ;;		_atoi
 21936 ;; This function uses a non-reentrant model
 21937 ;;
 21938                           
 21939                           	psect	text122
 21940  005114                     __ptext122:
 21941                           	opt stack 0
 21942  005114                     _isdigit:
 21943                           	opt stack 0
 21944  005114  FFFF               	dw	65535	; assembler added errata NOP
 21945                           
 21946                           ;incstack = 0
 21947                           ;isdigit@c stored from wreg
 21948  005116  6E1B               	movwf	isdigit@c,c
 21949  005118  0E00               	movlw	0
 21950  00511A  6E1A               	movwf	_isdigit$2880,c
 21951  00511C  0E3A               	movlw	58
 21952  00511E  601B               	cpfslt	isdigit@c,c
 21953  005120  D005               	goto	l1799
 21954  005122  0E2F               	movlw	47
 21955  005124  641B               	cpfsgt	isdigit@c,c
 21956  005126  D002               	goto	l1799
 21957  005128  0E01               	movlw	1
 21958  00512A  6E1A               	movwf	_isdigit$2880,c
 21959  00512C                     l1799:
 21960  00512C  FFFF               	dw	65535	; assembler added errata NOP
 21961  00512E  C01A  F019         	movff	_isdigit$2880,??_isdigit
 21962  005132  3019               	rrcf	??_isdigit,w,c
 21963  005134  0012               	return		;funcret
 21964  005136  FFFF               	dw	65535	; errata NOP
 21965  005138                     __end_of_isdigit:
 21966                           	opt stack 0
 21967                           tosu	equ	0xFFF
 21968                           tosh	equ	0xFFE
 21969                           tosl	equ	0xFFD
 21970                           pclath	equ	0xFFA
 21971                           tblptru	equ	0xFF8
 21972                           tblptrh	equ	0xFF7
 21973                           tblptrl	equ	0xFF6
 21974                           tablat	equ	0xFF5
 21975                           prodh	equ	0xFF4
 21976                           prodl	equ	0xFF3
 21977                           intcon	equ	0xFF2
 21978                           postinc0	equ	0xFEE
 21979                           wreg	equ	0xFE8
 21980                           indf1	equ	0xFE7
 21981                           fsr1h	equ	0xFE2
 21982                           fsr1l	equ	0xFE1
 21983                           indf2	equ	0xFDF
 21984                           postinc2	equ	0xFDE
 21985                           postdec2	equ	0xFDD
 21986                           plusw2	equ	0xFDB
 21987                           fsr2h	equ	0xFDA
 21988                           fsr2l	equ	0xFD9
 21989                           status	equ	0xFD8
 21990                           
 21991 ;; *************** function _fround *****************
 21992 ;; Defined at:
 21993 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 21994 ;; Parameters:    Size  Location     Type
 21995 ;;  prec            1    wreg     unsigned char 
 21996 ;; Auto vars:     Size  Location     Type
 21997 ;;  prec            1   36[BANK0 ] unsigned char 
 21998 ;; Return value:  Size  Location     Type
 21999 ;;                  3   27[BANK0 ] unsigned char 
 22000 ;; Registers used:
 22001 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22002 ;; Tracked objects:
 22003 ;;		On entry : 0/0
 22004 ;;		On exit  : 0/0
 22005 ;;		Unchanged: 0/0
 22006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22007 ;;      Params:         0       3       0       0       0       0       0
 22008 ;;      Locals:         0       7       0       0       0       0       0
 22009 ;;      Temps:          0       0       0       0       0       0       0
 22010 ;;      Totals:         0      10       0       0       0       0       0
 22011 ;;Total ram usage:       10 bytes
 22012 ;; Hardware stack levels used:    1
 22013 ;; Hardware stack levels required when called:    3
 22014 ;; This function calls:
 22015 ;;		___awdiv
 22016 ;;		___awmod
 22017 ;;		___ftmul
 22018 ;;		___wmul
 22019 ;; This function is called by:
 22020 ;;		__doprnt
 22021 ;; This function uses a non-reentrant model
 22022 ;;
 22023                           
 22024                           	psect	text123
 22025  003424                     __ptext123:
 22026                           	opt stack 0
 22027  003424                     _fround:
 22028                           	opt stack 0
 22029  003424  FFFF               	dw	65535	; assembler added errata NOP
 22030                           
 22031                           ;incstack = 0
 22032                           ;fround@prec stored from wreg
 22033  003426  0100               	movlb	0	; () banked
 22034  003428  6F84               	movwf	fround@prec& (0+255),b
 22035                           
 22036                           ;doprnt.c: 413: if(prec>=110)
 22037  00342A  0E6D               	movlw	109
 22038  00342C  0100               	movlb	0	; () banked
 22039  00342E  6584               	cpfsgt	fround@prec& (0+255),b
 22040  003430  D0A5               	goto	l1216
 22041                           
 22042                           ; BSR set to: 0
 22043                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 22044  003432  0E00               	movlw	0
 22045  003434  6E2A               	movwf	___wmul@multiplicand+1,c
 22046  003436  0E03               	movlw	3
 22047  003438  6E29               	movwf	___wmul@multiplicand,c
 22048  00343A  0E00               	movlw	0
 22049  00343C  6E22               	movwf	___awdiv@divisor+1,c
 22050  00343E  0E0A               	movlw	10
 22051  003440  6E21               	movwf	___awdiv@divisor,c
 22052  003442  0E00               	movlw	0
 22053  003444  6E1C               	movwf	___awmod@divisor+1,c
 22054  003446  0E64               	movlw	100
 22055  003448  6E1B               	movwf	___awmod@divisor,c
 22056  00344A  C084  F019         	movff	fround@prec,___awmod@dividend
 22057  00344E  6A1A               	clrf	___awmod@dividend+1,c
 22058  003450  EC90  F02F         	call	___awmod	;wreg free
 22059  003454  C019  F01F         	movff	?___awmod,___awdiv@dividend
 22060  003458  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 22061  00345C  EC2E  F031         	call	___awdiv	;wreg free
 22062  003460  0E09               	movlw	9
 22063  003462  241F               	addwf	?___awdiv,w,c
 22064  003464  6E27               	movwf	___wmul@multiplier,c
 22065  003466  0E00               	movlw	0
 22066  003468  2020               	addwfc	?___awdiv+1,w,c
 22067  00346A  6E28               	movwf	___wmul@multiplier+1,c
 22068  00346C  EC10  F029         	call	___wmul	;wreg free
 22069  003470  0E72               	movlw	low __npowers_
 22070  003472  2427               	addwf	?___wmul,w,c
 22071  003474  6EF6               	movwf	tblptrl,c
 22072  003476  0E7D               	movlw	high __npowers_
 22073  003478  2028               	addwfc	?___wmul+1,w,c
 22074  00347A  6EF7               	movwf	tblptrh,c
 22075  00347C                     	if	0	;There are less than 3 active tblptr bytes
 22076  00347C                     	endif
 22077  00347C  0009               	tblrd		*+
 22078  00347E  FFFF               	dw	65535	; errata NOP
 22079  003480  CFF5 F06F          	movff	tablat,___ftmul@f2
 22080  003484  0009               	tblrd		*+
 22081  003486  FFFF               	dw	65535	; errata NOP
 22082  003488  CFF5 F070          	movff	tablat,___ftmul@f2+1
 22083  00348C  000A               	tblrd		*-
 22084  00348E  FFFF               	dw	65535	; errata NOP
 22085  003490  CFF5 F071          	movff	tablat,___ftmul@f2+2
 22086  003494  0E00               	movlw	0
 22087  003496  6E22               	movwf	___awdiv@divisor+1,c
 22088  003498  0E64               	movlw	100
 22089  00349A  6E21               	movwf	___awdiv@divisor,c
 22090  00349C  C084  F01F         	movff	fround@prec,___awdiv@dividend
 22091  0034A0  6A20               	clrf	___awdiv@dividend+1,c
 22092  0034A2  EC2E  F031         	call	___awdiv	;wreg free
 22093  0034A6  0E12               	movlw	18
 22094  0034A8  241F               	addwf	?___awdiv,w,c
 22095  0034AA  6E27               	movwf	___wmul@multiplier,c
 22096  0034AC  0E00               	movlw	0
 22097  0034AE  2020               	addwfc	?___awdiv+1,w,c
 22098  0034B0  6E28               	movwf	___wmul@multiplier+1,c
 22099  0034B2  0E00               	movlw	0
 22100  0034B4  6E2A               	movwf	___wmul@multiplicand+1,c
 22101  0034B6  0E03               	movlw	3
 22102  0034B8  6E29               	movwf	___wmul@multiplicand,c
 22103  0034BA  EC10  F029         	call	___wmul	;wreg free
 22104  0034BE  0E72               	movlw	low __npowers_
 22105  0034C0  2427               	addwf	?___wmul,w,c
 22106  0034C2  6EF6               	movwf	tblptrl,c
 22107  0034C4  0E7D               	movlw	high __npowers_
 22108  0034C6  2028               	addwfc	?___wmul+1,w,c
 22109  0034C8  6EF7               	movwf	tblptrh,c
 22110  0034CA                     	if	0	;There are less than 3 active tblptr bytes
 22111  0034CA                     	endif
 22112  0034CA  0009               	tblrd		*+
 22113  0034CC  FFFF               	dw	65535	; errata NOP
 22114  0034CE  CFF5 F06C          	movff	tablat,___ftmul@f1
 22115  0034D2  0009               	tblrd		*+
 22116  0034D4  FFFF               	dw	65535	; errata NOP
 22117  0034D6  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 22118  0034DA  000A               	tblrd		*-
 22119  0034DC  FFFF               	dw	65535	; errata NOP
 22120  0034DE  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 22121  0034E2  EC53  F03C         	call	___ftmul	;wreg free
 22122  0034E6  C06C  F081         	movff	?___ftmul,_fround$3555
 22123  0034EA  C06D  F082         	movff	?___ftmul+1,_fround$3555+1
 22124  0034EE  C06E  F083         	movff	?___ftmul+2,_fround$3555+2
 22125                           
 22126                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 22127  0034F2  0E00               	movlw	0
 22128  0034F4  6E2A               	movwf	___wmul@multiplicand+1,c
 22129  0034F6  0E03               	movlw	3
 22130  0034F8  6E29               	movwf	___wmul@multiplicand,c
 22131  0034FA  0E00               	movlw	0
 22132  0034FC  6E1C               	movwf	___awmod@divisor+1,c
 22133  0034FE  0E0A               	movlw	10
 22134  003500  6E1B               	movwf	___awmod@divisor,c
 22135  003502  C084  F019         	movff	fround@prec,___awmod@dividend
 22136  003506  6A1A               	clrf	___awmod@dividend+1,c
 22137  003508  EC90  F02F         	call	___awmod	;wreg free
 22138  00350C  C019  F027         	movff	?___awmod,___wmul@multiplier
 22139  003510  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 22140  003514  EC10  F029         	call	___wmul	;wreg free
 22141  003518  0E72               	movlw	low __npowers_
 22142  00351A  2427               	addwf	?___wmul,w,c
 22143  00351C  6EF6               	movwf	tblptrl,c
 22144  00351E  0E7D               	movlw	high __npowers_
 22145  003520  2028               	addwfc	?___wmul+1,w,c
 22146  003522  6EF7               	movwf	tblptrh,c
 22147  003524                     	if	0	;There are less than 3 active tblptr bytes
 22148  003524                     	endif
 22149  003524  0009               	tblrd		*+
 22150  003526  FFFF               	dw	65535	; errata NOP
 22151  003528  CFF5 F06F          	movff	tablat,___ftmul@f2
 22152  00352C  0009               	tblrd		*+
 22153  00352E  FFFF               	dw	65535	; errata NOP
 22154  003530  CFF5 F070          	movff	tablat,___ftmul@f2+1
 22155  003534  000A               	tblrd		*-
 22156  003536  FFFF               	dw	65535	; errata NOP
 22157  003538  CFF5 F071          	movff	tablat,___ftmul@f2+2
 22158  00353C  C081  F06C         	movff	_fround$3555,___ftmul@f1
 22159  003540  C082  F06D         	movff	_fround$3555+1,___ftmul@f1+1
 22160  003544  C083  F06E         	movff	_fround$3555+2,___ftmul@f1+2
 22161  003548  EC53  F03C         	call	___ftmul	;wreg free
 22162  00354C  C06C  F07E         	movff	?___ftmul,_fround$3556
 22163  003550  C06D  F07F         	movff	?___ftmul+1,_fround$3556+1
 22164  003554  C06E  F080         	movff	?___ftmul+2,_fround$3556+2
 22165                           
 22166                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 22167  003558  C07E  F06C         	movff	_fround$3556,___ftmul@f1
 22168  00355C  C07F  F06D         	movff	_fround$3556+1,___ftmul@f1+1
 22169  003560  C080  F06E         	movff	_fround$3556+2,___ftmul@f1+2
 22170  003564  0E00               	movlw	0
 22171  003566  0100               	movlb	0	; () banked
 22172  003568  6F6F               	movwf	___ftmul@f2& (0+255),b
 22173  00356A  0E00               	movlw	0
 22174  00356C  0100               	movlb	0	; () banked
 22175  00356E  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 22176  003570  0E3F               	movlw	63
 22177  003572  0100               	movlb	0	; () banked
 22178  003574  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 22179  003576  EC53  F03C         	call	___ftmul	;wreg free
 22180  00357A  D08C               	goto	L26
 22181  00357C                     l1216:
 22182  00357C  FFFF               	dw	65535	; assembler added errata NOP
 22183                           
 22184                           ;doprnt.c: 415: else if(prec > 10)
 22185  00357E  0E0A               	movlw	10
 22186  003580  0100               	movlb	0	; () banked
 22187  003582  6584               	cpfsgt	fround@prec& (0+255),b
 22188  003584  D066               	goto	l1219
 22189                           
 22190                           ; BSR set to: 0
 22191                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 22192  003586  0E00               	movlw	0
 22193  003588  6E2A               	movwf	___wmul@multiplicand+1,c
 22194  00358A  0E03               	movlw	3
 22195  00358C  6E29               	movwf	___wmul@multiplicand,c
 22196  00358E  0E00               	movlw	0
 22197  003590  6E1C               	movwf	___awmod@divisor+1,c
 22198  003592  0E0A               	movlw	10
 22199  003594  6E1B               	movwf	___awmod@divisor,c
 22200  003596  C084  F019         	movff	fround@prec,___awmod@dividend
 22201  00359A  6A1A               	clrf	___awmod@dividend+1,c
 22202  00359C  EC90  F02F         	call	___awmod	;wreg free
 22203  0035A0  C019  F027         	movff	?___awmod,___wmul@multiplier
 22204  0035A4  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 22205  0035A8  EC10  F029         	call	___wmul	;wreg free
 22206  0035AC  0E72               	movlw	low __npowers_
 22207  0035AE  2427               	addwf	?___wmul,w,c
 22208  0035B0  6EF6               	movwf	tblptrl,c
 22209  0035B2  0E7D               	movlw	high __npowers_
 22210  0035B4  2028               	addwfc	?___wmul+1,w,c
 22211  0035B6  6EF7               	movwf	tblptrh,c
 22212  0035B8                     	if	0	;There are less than 3 active tblptr bytes
 22213  0035B8                     	endif
 22214  0035B8  0009               	tblrd		*+
 22215  0035BA  FFFF               	dw	65535	; errata NOP
 22216  0035BC  CFF5 F06F          	movff	tablat,___ftmul@f2
 22217  0035C0  0009               	tblrd		*+
 22218  0035C2  FFFF               	dw	65535	; errata NOP
 22219  0035C4  CFF5 F070          	movff	tablat,___ftmul@f2+1
 22220  0035C8  000A               	tblrd		*-
 22221  0035CA  FFFF               	dw	65535	; errata NOP
 22222  0035CC  CFF5 F071          	movff	tablat,___ftmul@f2+2
 22223  0035D0  0E00               	movlw	0
 22224  0035D2  6E22               	movwf	___awdiv@divisor+1,c
 22225  0035D4  0E0A               	movlw	10
 22226  0035D6  6E21               	movwf	___awdiv@divisor,c
 22227  0035D8  C084  F01F         	movff	fround@prec,___awdiv@dividend
 22228  0035DC  6A20               	clrf	___awdiv@dividend+1,c
 22229  0035DE  EC2E  F031         	call	___awdiv	;wreg free
 22230  0035E2  0E09               	movlw	9
 22231  0035E4  241F               	addwf	?___awdiv,w,c
 22232  0035E6  6E27               	movwf	___wmul@multiplier,c
 22233  0035E8  0E00               	movlw	0
 22234  0035EA  2020               	addwfc	?___awdiv+1,w,c
 22235  0035EC  6E28               	movwf	___wmul@multiplier+1,c
 22236  0035EE  0E00               	movlw	0
 22237  0035F0  6E2A               	movwf	___wmul@multiplicand+1,c
 22238  0035F2  0E03               	movlw	3
 22239  0035F4  6E29               	movwf	___wmul@multiplicand,c
 22240  0035F6  EC10  F029         	call	___wmul	;wreg free
 22241  0035FA  0E72               	movlw	low __npowers_
 22242  0035FC  2427               	addwf	?___wmul,w,c
 22243  0035FE  6EF6               	movwf	tblptrl,c
 22244  003600  0E7D               	movlw	high __npowers_
 22245  003602  2028               	addwfc	?___wmul+1,w,c
 22246  003604  6EF7               	movwf	tblptrh,c
 22247  003606                     	if	0	;There are less than 3 active tblptr bytes
 22248  003606                     	endif
 22249  003606  0009               	tblrd		*+
 22250  003608  FFFF               	dw	65535	; errata NOP
 22251  00360A  CFF5 F06C          	movff	tablat,___ftmul@f1
 22252  00360E  0009               	tblrd		*+
 22253  003610  FFFF               	dw	65535	; errata NOP
 22254  003612  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 22255  003616  000A               	tblrd		*-
 22256  003618  FFFF               	dw	65535	; errata NOP
 22257  00361A  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 22258  00361E  EC53  F03C         	call	___ftmul	;wreg free
 22259  003622  C06C  F081         	movff	?___ftmul,_fround$3555
 22260  003626  C06D  F082         	movff	?___ftmul+1,_fround$3555+1
 22261  00362A  C06E  F083         	movff	?___ftmul+2,_fround$3555+2
 22262                           
 22263                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 22264  00362E  C081  F06C         	movff	_fround$3555,___ftmul@f1
 22265  003632  C082  F06D         	movff	_fround$3555+1,___ftmul@f1+1
 22266  003636  C083  F06E         	movff	_fround$3555+2,___ftmul@f1+2
 22267  00363A  0E00               	movlw	0
 22268  00363C  0100               	movlb	0	; () banked
 22269  00363E  6F6F               	movwf	___ftmul@f2& (0+255),b
 22270  003640  0E00               	movlw	0
 22271  003642  0100               	movlb	0	; () banked
 22272  003644  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 22273  003646  0E3F               	movlw	63
 22274  003648  0100               	movlb	0	; () banked
 22275  00364A  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 22276  00364C  EC53  F03C         	call	___ftmul	;wreg free
 22277  003650  D021               	goto	L26
 22278  003652                     l1219:
 22279  003652  FFFF               	dw	65535	; assembler added errata NOP
 22280                           
 22281                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 22282  003654  0100               	movlb	0	; () banked
 22283  003656  5184               	movf	fround@prec& (0+255),w,b
 22284  003658  0D03               	mullw	3
 22285  00365A  0E72               	movlw	low __npowers_
 22286  00365C  24F3               	addwf	prodl,w,c
 22287  00365E  6EF6               	movwf	tblptrl,c
 22288  003660  0E7D               	movlw	high __npowers_
 22289  003662  20F4               	addwfc	prodh,w,c
 22290  003664  6EF7               	movwf	tblptrh,c
 22291  003666                     	if	0	;There are less than 3 active tblptr bytes
 22292  003666                     	endif
 22293  003666  0009               	tblrd		*+
 22294  003668  FFFF               	dw	65535	; errata NOP
 22295  00366A  CFF5 F06C          	movff	tablat,___ftmul@f1
 22296  00366E  0009               	tblrd		*+
 22297  003670  FFFF               	dw	65535	; errata NOP
 22298  003672  CFF5 F06D          	movff	tablat,___ftmul@f1+1
 22299  003676  000A               	tblrd		*-
 22300  003678  FFFF               	dw	65535	; errata NOP
 22301  00367A  CFF5 F06E          	movff	tablat,___ftmul@f1+2
 22302  00367E  0E00               	movlw	0
 22303  003680  0100               	movlb	0	; () banked
 22304  003682  6F6F               	movwf	___ftmul@f2& (0+255),b
 22305  003684  0E00               	movlw	0
 22306  003686  0100               	movlb	0	; () banked
 22307  003688  6F70               	movwf	(___ftmul@f2+1)& (0+255),b
 22308  00368A  0E3F               	movlw	63
 22309  00368C  0100               	movlb	0	; () banked
 22310  00368E  6F71               	movwf	(___ftmul@f2+2)& (0+255),b
 22311  003690  EC53  F03C         	call	___ftmul	;wreg free
 22312  003694                     L26:
 22313  003694  FFFF               	dw	65535	; assembler added errata NOP
 22314  003696  C06C  F07B         	movff	?___ftmul,?_fround
 22315  00369A  C06D  F07C         	movff	?___ftmul+1,?_fround+1
 22316  00369E  C06E  F07D         	movff	?___ftmul+2,?_fround+2
 22317  0036A2  0012               	return		;funcret
 22318  0036A4  FFFF               	dw	65535	; errata NOP
 22319  0036A6                     __end_of_fround:
 22320                           	opt stack 0
 22321                           tosu	equ	0xFFF
 22322                           tosh	equ	0xFFE
 22323                           tosl	equ	0xFFD
 22324                           pclath	equ	0xFFA
 22325                           tblptru	equ	0xFF8
 22326                           tblptrh	equ	0xFF7
 22327                           tblptrl	equ	0xFF6
 22328                           tablat	equ	0xFF5
 22329                           prodh	equ	0xFF4
 22330                           prodl	equ	0xFF3
 22331                           intcon	equ	0xFF2
 22332                           postinc0	equ	0xFEE
 22333                           wreg	equ	0xFE8
 22334                           indf1	equ	0xFE7
 22335                           fsr1h	equ	0xFE2
 22336                           fsr1l	equ	0xFE1
 22337                           indf2	equ	0xFDF
 22338                           postinc2	equ	0xFDE
 22339                           postdec2	equ	0xFDD
 22340                           plusw2	equ	0xFDB
 22341                           fsr2h	equ	0xFDA
 22342                           fsr2l	equ	0xFD9
 22343                           status	equ	0xFD8
 22344                           
 22345 ;; *************** function ___wmul *****************
 22346 ;; Defined at:
 22347 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 22348 ;; Parameters:    Size  Location     Type
 22349 ;;  multiplier      2   38[COMRAM] unsigned int 
 22350 ;;  multiplicand    2   40[COMRAM] unsigned int 
 22351 ;; Auto vars:     Size  Location     Type
 22352 ;;  product         2   42[COMRAM] unsigned int 
 22353 ;; Return value:  Size  Location     Type
 22354 ;;                  2   38[COMRAM] unsigned int 
 22355 ;; Registers used:
 22356 ;;		wreg, status,2, status,0, prodl, prodh
 22357 ;; Tracked objects:
 22358 ;;		On entry : 0/0
 22359 ;;		On exit  : 0/0
 22360 ;;		Unchanged: 0/0
 22361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22362 ;;      Params:         4       0       0       0       0       0       0
 22363 ;;      Locals:         2       0       0       0       0       0       0
 22364 ;;      Temps:          0       0       0       0       0       0       0
 22365 ;;      Totals:         6       0       0       0       0       0       0
 22366 ;;Total ram usage:        6 bytes
 22367 ;; Hardware stack levels used:    1
 22368 ;; Hardware stack levels required when called:    1
 22369 ;; This function calls:
 22370 ;;		Nothing
 22371 ;; This function is called by:
 22372 ;;		_bcdTOint
 22373 ;;		_intTObcd
 22374 ;;		_fround
 22375 ;;		_scale
 22376 ;;		__doprnt
 22377 ;;		_atoi
 22378 ;;		_months_to_days
 22379 ;;		_asctime
 22380 ;; This function uses a non-reentrant model
 22381 ;;
 22382                           
 22383                           	psect	text124
 22384  005220                     __ptext124:
 22385                           	opt stack 0
 22386  005220                     ___wmul:
 22387                           	opt stack 0
 22388  005220  FFFF               	dw	65535	; assembler added errata NOP
 22389                           
 22390                           ;incstack = 0
 22391  005222  5027               	movf	___wmul@multiplier,w,c
 22392  005224  0229               	mulwf	___wmul@multiplicand,c
 22393  005226  CFF3 F02B          	movff	prodl,___wmul@product
 22394  00522A  CFF4 F02C          	movff	prodh,___wmul@product+1
 22395  00522E  5027               	movf	___wmul@multiplier,w,c
 22396  005230  022A               	mulwf	___wmul@multiplicand+1,c
 22397  005232  50F3               	movf	prodl,w,c
 22398  005234  262C               	addwf	___wmul@product+1,f,c
 22399  005236  5028               	movf	___wmul@multiplier+1,w,c
 22400  005238  0229               	mulwf	___wmul@multiplicand,c
 22401  00523A  50F3               	movf	prodl,w,c
 22402  00523C  262C               	addwf	___wmul@product+1,f,c
 22403  00523E  C02B  F027         	movff	___wmul@product,?___wmul
 22404  005242  C02C  F028         	movff	___wmul@product+1,?___wmul+1
 22405  005246  0012               	return		;funcret
 22406  005248  FFFF               	dw	65535	; errata NOP
 22407  00524A                     __end_of___wmul:
 22408                           	opt stack 0
 22409                           tosu	equ	0xFFF
 22410                           tosh	equ	0xFFE
 22411                           tosl	equ	0xFFD
 22412                           pclath	equ	0xFFA
 22413                           tblptru	equ	0xFF8
 22414                           tblptrh	equ	0xFF7
 22415                           tblptrl	equ	0xFF6
 22416                           tablat	equ	0xFF5
 22417                           prodh	equ	0xFF4
 22418                           prodl	equ	0xFF3
 22419                           intcon	equ	0xFF2
 22420                           postinc0	equ	0xFEE
 22421                           wreg	equ	0xFE8
 22422                           indf1	equ	0xFE7
 22423                           fsr1h	equ	0xFE2
 22424                           fsr1l	equ	0xFE1
 22425                           indf2	equ	0xFDF
 22426                           postinc2	equ	0xFDE
 22427                           postdec2	equ	0xFDD
 22428                           plusw2	equ	0xFDB
 22429                           fsr2h	equ	0xFDA
 22430                           fsr2l	equ	0xFD9
 22431                           status	equ	0xFD8
 22432                           
 22433 ;; *************** function ___awmod *****************
 22434 ;; Defined at:
 22435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 22436 ;; Parameters:    Size  Location     Type
 22437 ;;  dividend        2   24[COMRAM] int 
 22438 ;;  divisor         2   26[COMRAM] int 
 22439 ;; Auto vars:     Size  Location     Type
 22440 ;;  sign            1   29[COMRAM] unsigned char 
 22441 ;;  counter         1   28[COMRAM] unsigned char 
 22442 ;; Return value:  Size  Location     Type
 22443 ;;                  2   24[COMRAM] int 
 22444 ;; Registers used:
 22445 ;;		wreg, status,2, status,0
 22446 ;; Tracked objects:
 22447 ;;		On entry : 0/0
 22448 ;;		On exit  : 0/0
 22449 ;;		Unchanged: 0/0
 22450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22451 ;;      Params:         4       0       0       0       0       0       0
 22452 ;;      Locals:         2       0       0       0       0       0       0
 22453 ;;      Temps:          0       0       0       0       0       0       0
 22454 ;;      Totals:         6       0       0       0       0       0       0
 22455 ;;Total ram usage:        6 bytes
 22456 ;; Hardware stack levels used:    1
 22457 ;; Hardware stack levels required when called:    1
 22458 ;; This function calls:
 22459 ;;		Nothing
 22460 ;; This function is called by:
 22461 ;;		_intTObcd
 22462 ;;		_fround
 22463 ;;		_scale
 22464 ;;		_gmtime
 22465 ;;		_put2d
 22466 ;;		_asctime
 22467 ;; This function uses a non-reentrant model
 22468 ;;
 22469                           
 22470                           	psect	text125
 22471  005F20                     __ptext125:
 22472                           	opt stack 0
 22473  005F20                     ___awmod:
 22474                           	opt stack 0
 22475  005F20  FFFF               	dw	65535	; assembler added errata NOP
 22476                           
 22477                           ;incstack = 0
 22478  005F22  0E00               	movlw	0
 22479  005F24  6E1E               	movwf	___awmod@sign,c
 22480  005F26  AE1A               	btfss	___awmod@dividend+1,7,c
 22481  005F28  D006               	goto	l1585
 22482  005F2A  6C19               	negf	___awmod@dividend,c
 22483  005F2C  1E1A               	comf	___awmod@dividend+1,f,c
 22484  005F2E  B0D8               	btfsc	status,0,c
 22485  005F30  2A1A               	incf	___awmod@dividend+1,f,c
 22486  005F32  0E01               	movlw	1
 22487  005F34  6E1E               	movwf	___awmod@sign,c
 22488  005F36                     l1585:
 22489  005F36  FFFF               	dw	65535	; assembler added errata NOP
 22490  005F38  AE1C               	btfss	___awmod@divisor+1,7,c
 22491  005F3A  D004               	goto	l1586
 22492  005F3C  6C1B               	negf	___awmod@divisor,c
 22493  005F3E  1E1C               	comf	___awmod@divisor+1,f,c
 22494  005F40  B0D8               	btfsc	status,0,c
 22495  005F42  2A1C               	incf	___awmod@divisor+1,f,c
 22496  005F44                     l1586:
 22497  005F44  FFFF               	dw	65535	; assembler added errata NOP
 22498  005F46  501B               	movf	___awmod@divisor,w,c
 22499  005F48  101C               	iorwf	___awmod@divisor+1,w,c
 22500  005F4A  B4D8               	btfsc	status,2,c
 22501  005F4C  D01C               	goto	l1593
 22502  005F4E  0E01               	movlw	1
 22503  005F50  6E1D               	movwf	___awmod@counter,c
 22504  005F52  D005               	goto	l1588
 22505  005F54  FFFF               	dw	65535	; assembler added errata NOP
 22506  005F56  90D8               	bcf	status,0,c
 22507  005F58  361B               	rlcf	___awmod@divisor,f,c
 22508  005F5A  361C               	rlcf	___awmod@divisor+1,f,c
 22509  005F5C  2A1D               	incf	___awmod@counter,f,c
 22510  005F5E                     l1588:
 22511  005F5E  FFFF               	dw	65535	; assembler added errata NOP
 22512  005F60  AE1C               	btfss	___awmod@divisor+1,7,c
 22513  005F62  D7F8               	goto	l1589
 22514  005F64                     u8470:
 22515  005F64  FFFF               	dw	65535	; assembler added errata NOP
 22516  005F66  501B               	movf	___awmod@divisor,w,c
 22517  005F68  5C19               	subwf	___awmod@dividend,w,c
 22518  005F6A  501C               	movf	___awmod@divisor+1,w,c
 22519  005F6C  581A               	subwfb	___awmod@dividend+1,w,c
 22520  005F6E  A0D8               	btfss	status,0,c
 22521  005F70  D004               	goto	l1592
 22522  005F72  501B               	movf	___awmod@divisor,w,c
 22523  005F74  5E19               	subwf	___awmod@dividend,f,c
 22524  005F76  501C               	movf	___awmod@divisor+1,w,c
 22525  005F78  5A1A               	subwfb	___awmod@dividend+1,f,c
 22526  005F7A                     l1592:
 22527  005F7A  FFFF               	dw	65535	; assembler added errata NOP
 22528  005F7C  90D8               	bcf	status,0,c
 22529  005F7E  321C               	rrcf	___awmod@divisor+1,f,c
 22530  005F80  321B               	rrcf	___awmod@divisor,f,c
 22531  005F82  2E1D               	decfsz	___awmod@counter,f,c
 22532  005F84  D7EF               	goto	u8470
 22533  005F86                     l1593:
 22534  005F86  FFFF               	dw	65535	; assembler added errata NOP
 22535  005F88  501E               	movf	___awmod@sign,w,c
 22536  005F8A  B4D8               	btfsc	status,2,c
 22537  005F8C  D004               	goto	l1594
 22538  005F8E  6C19               	negf	___awmod@dividend,c
 22539  005F90  1E1A               	comf	___awmod@dividend+1,f,c
 22540  005F92  B0D8               	btfsc	status,0,c
 22541  005F94  2A1A               	incf	___awmod@dividend+1,f,c
 22542  005F96                     l1594:
 22543  005F96  FFFF               	dw	65535	; assembler added errata NOP
 22544  005F98  C019  F019         	movff	___awmod@dividend,?___awmod
 22545  005F9C  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
 22546  005FA0  0012               	return		;funcret
 22547  005FA2  FFFF               	dw	65535	; errata NOP
 22548  005FA4                     __end_of___awmod:
 22549                           	opt stack 0
 22550                           tosu	equ	0xFFF
 22551                           tosh	equ	0xFFE
 22552                           tosl	equ	0xFFD
 22553                           pclath	equ	0xFFA
 22554                           tblptru	equ	0xFF8
 22555                           tblptrh	equ	0xFF7
 22556                           tblptrl	equ	0xFF6
 22557                           tablat	equ	0xFF5
 22558                           prodh	equ	0xFF4
 22559                           prodl	equ	0xFF3
 22560                           intcon	equ	0xFF2
 22561                           postinc0	equ	0xFEE
 22562                           wreg	equ	0xFE8
 22563                           indf1	equ	0xFE7
 22564                           fsr1h	equ	0xFE2
 22565                           fsr1l	equ	0xFE1
 22566                           indf2	equ	0xFDF
 22567                           postinc2	equ	0xFDE
 22568                           postdec2	equ	0xFDD
 22569                           plusw2	equ	0xFDB
 22570                           fsr2h	equ	0xFDA
 22571                           fsr2l	equ	0xFD9
 22572                           status	equ	0xFD8
 22573                           
 22574 ;; *************** function ___awdiv *****************
 22575 ;; Defined at:
 22576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 22577 ;; Parameters:    Size  Location     Type
 22578 ;;  dividend        2   30[COMRAM] int 
 22579 ;;  divisor         2   32[COMRAM] int 
 22580 ;; Auto vars:     Size  Location     Type
 22581 ;;  quotient        2   36[COMRAM] int 
 22582 ;;  sign            1   35[COMRAM] unsigned char 
 22583 ;;  counter         1   34[COMRAM] unsigned char 
 22584 ;; Return value:  Size  Location     Type
 22585 ;;                  2   30[COMRAM] int 
 22586 ;; Registers used:
 22587 ;;		wreg, status,2, status,0
 22588 ;; Tracked objects:
 22589 ;;		On entry : 0/0
 22590 ;;		On exit  : 0/0
 22591 ;;		Unchanged: 0/0
 22592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22593 ;;      Params:         4       0       0       0       0       0       0
 22594 ;;      Locals:         4       0       0       0       0       0       0
 22595 ;;      Temps:          0       0       0       0       0       0       0
 22596 ;;      Totals:         8       0       0       0       0       0       0
 22597 ;;Total ram usage:        8 bytes
 22598 ;; Hardware stack levels used:    1
 22599 ;; Hardware stack levels required when called:    1
 22600 ;; This function calls:
 22601 ;;		Nothing
 22602 ;; This function is called by:
 22603 ;;		_intTObcd
 22604 ;;		_fround
 22605 ;;		_scale
 22606 ;;		__doprnt
 22607 ;;		_asctime
 22608 ;; This function uses a non-reentrant model
 22609 ;;
 22610                           
 22611                           	psect	text126
 22612  00625C                     __ptext126:
 22613                           	opt stack 0
 22614  00625C                     ___awdiv:
 22615                           	opt stack 0
 22616  00625C  FFFF               	dw	65535	; assembler added errata NOP
 22617                           
 22618                           ;incstack = 0
 22619  00625E  0E00               	movlw	0
 22620  006260  6E24               	movwf	___awdiv@sign,c
 22621  006262  AE22               	btfss	___awdiv@divisor+1,7,c
 22622  006264  D006               	goto	l1572
 22623  006266  6C21               	negf	___awdiv@divisor,c
 22624  006268  1E22               	comf	___awdiv@divisor+1,f,c
 22625  00626A  B0D8               	btfsc	status,0,c
 22626  00626C  2A22               	incf	___awdiv@divisor+1,f,c
 22627  00626E  0E01               	movlw	1
 22628  006270  6E24               	movwf	___awdiv@sign,c
 22629  006272                     l1572:
 22630  006272  FFFF               	dw	65535	; assembler added errata NOP
 22631  006274  AE20               	btfss	___awdiv@dividend+1,7,c
 22632  006276  D006               	goto	l1573
 22633  006278  6C1F               	negf	___awdiv@dividend,c
 22634  00627A  1E20               	comf	___awdiv@dividend+1,f,c
 22635  00627C  B0D8               	btfsc	status,0,c
 22636  00627E  2A20               	incf	___awdiv@dividend+1,f,c
 22637  006280  0E01               	movlw	1
 22638  006282  1A24               	xorwf	___awdiv@sign,f,c
 22639  006284                     l1573:
 22640  006284  FFFF               	dw	65535	; assembler added errata NOP
 22641  006286  0E00               	movlw	0
 22642  006288  6E26               	movwf	___awdiv@quotient+1,c
 22643  00628A  0E00               	movlw	0
 22644  00628C  6E25               	movwf	___awdiv@quotient,c
 22645  00628E  5021               	movf	___awdiv@divisor,w,c
 22646  006290  1022               	iorwf	___awdiv@divisor+1,w,c
 22647  006292  B4D8               	btfsc	status,2,c
 22648  006294  D020               	goto	l1580
 22649  006296  0E01               	movlw	1
 22650  006298  6E23               	movwf	___awdiv@counter,c
 22651  00629A  D005               	goto	l1575
 22652  00629C  FFFF               	dw	65535	; assembler added errata NOP
 22653  00629E  90D8               	bcf	status,0,c
 22654  0062A0  3621               	rlcf	___awdiv@divisor,f,c
 22655  0062A2  3622               	rlcf	___awdiv@divisor+1,f,c
 22656  0062A4  2A23               	incf	___awdiv@counter,f,c
 22657  0062A6                     l1575:
 22658  0062A6  FFFF               	dw	65535	; assembler added errata NOP
 22659  0062A8  AE22               	btfss	___awdiv@divisor+1,7,c
 22660  0062AA  D7F8               	goto	l1576
 22661  0062AC                     u8410:
 22662  0062AC  FFFF               	dw	65535	; assembler added errata NOP
 22663  0062AE  90D8               	bcf	status,0,c
 22664  0062B0  3625               	rlcf	___awdiv@quotient,f,c
 22665  0062B2  3626               	rlcf	___awdiv@quotient+1,f,c
 22666  0062B4  5021               	movf	___awdiv@divisor,w,c
 22667  0062B6  5C1F               	subwf	___awdiv@dividend,w,c
 22668  0062B8  5022               	movf	___awdiv@divisor+1,w,c
 22669  0062BA  5820               	subwfb	___awdiv@dividend+1,w,c
 22670  0062BC  A0D8               	btfss	status,0,c
 22671  0062BE  D005               	goto	l1579
 22672  0062C0  5021               	movf	___awdiv@divisor,w,c
 22673  0062C2  5E1F               	subwf	___awdiv@dividend,f,c
 22674  0062C4  5022               	movf	___awdiv@divisor+1,w,c
 22675  0062C6  5A20               	subwfb	___awdiv@dividend+1,f,c
 22676  0062C8  8025               	bsf	___awdiv@quotient,0,c
 22677  0062CA                     l1579:
 22678  0062CA  FFFF               	dw	65535	; assembler added errata NOP
 22679  0062CC  90D8               	bcf	status,0,c
 22680  0062CE  3222               	rrcf	___awdiv@divisor+1,f,c
 22681  0062D0  3221               	rrcf	___awdiv@divisor,f,c
 22682  0062D2  2E23               	decfsz	___awdiv@counter,f,c
 22683  0062D4  D7EB               	goto	u8410
 22684  0062D6                     l1580:
 22685  0062D6  FFFF               	dw	65535	; assembler added errata NOP
 22686  0062D8  5024               	movf	___awdiv@sign,w,c
 22687  0062DA  B4D8               	btfsc	status,2,c
 22688  0062DC  D004               	goto	l1581
 22689  0062DE  6C25               	negf	___awdiv@quotient,c
 22690  0062E0  1E26               	comf	___awdiv@quotient+1,f,c
 22691  0062E2  B0D8               	btfsc	status,0,c
 22692  0062E4  2A26               	incf	___awdiv@quotient+1,f,c
 22693  0062E6                     l1581:
 22694  0062E6  FFFF               	dw	65535	; assembler added errata NOP
 22695  0062E8  C025  F01F         	movff	___awdiv@quotient,?___awdiv
 22696  0062EC  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
 22697  0062F0  0012               	return		;funcret
 22698  0062F2  FFFF               	dw	65535	; errata NOP
 22699  0062F4                     __end_of___awdiv:
 22700                           	opt stack 0
 22701                           tosu	equ	0xFFF
 22702                           tosh	equ	0xFFE
 22703                           tosl	equ	0xFFD
 22704                           pclath	equ	0xFFA
 22705                           tblptru	equ	0xFF8
 22706                           tblptrh	equ	0xFF7
 22707                           tblptrl	equ	0xFF6
 22708                           tablat	equ	0xFF5
 22709                           prodh	equ	0xFF4
 22710                           prodl	equ	0xFF3
 22711                           intcon	equ	0xFF2
 22712                           postinc0	equ	0xFEE
 22713                           wreg	equ	0xFE8
 22714                           indf1	equ	0xFE7
 22715                           fsr1h	equ	0xFE2
 22716                           fsr1l	equ	0xFE1
 22717                           indf2	equ	0xFDF
 22718                           postinc2	equ	0xFDE
 22719                           postdec2	equ	0xFDD
 22720                           plusw2	equ	0xFDB
 22721                           fsr2h	equ	0xFDA
 22722                           fsr2l	equ	0xFD9
 22723                           status	equ	0xFD8
 22724                           
 22725 ;; *************** function __tdiv_to_l_ *****************
 22726 ;; Defined at:
 22727 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 22728 ;; Parameters:    Size  Location     Type
 22729 ;;  f1              3   24[COMRAM] float 
 22730 ;;  f2              3   27[COMRAM] float 
 22731 ;; Auto vars:     Size  Location     Type
 22732 ;;  quot            4   33[COMRAM] unsigned long 
 22733 ;;  exp1            1   38[COMRAM] unsigned char 
 22734 ;;  cntr            1   37[COMRAM] unsigned char 
 22735 ;; Return value:  Size  Location     Type
 22736 ;;                  4   24[COMRAM] unsigned long 
 22737 ;; Registers used:
 22738 ;;		wreg, status,2, status,0
 22739 ;; Tracked objects:
 22740 ;;		On entry : 0/0
 22741 ;;		On exit  : 0/0
 22742 ;;		Unchanged: 0/0
 22743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22744 ;;      Params:         6       0       0       0       0       0       0
 22745 ;;      Locals:         6       0       0       0       0       0       0
 22746 ;;      Temps:          3       0       0       0       0       0       0
 22747 ;;      Totals:        15       0       0       0       0       0       0
 22748 ;;Total ram usage:       15 bytes
 22749 ;; Hardware stack levels used:    1
 22750 ;; Hardware stack levels required when called:    1
 22751 ;; This function calls:
 22752 ;;		Nothing
 22753 ;; This function is called by:
 22754 ;;		__doprnt
 22755 ;; This function uses a non-reentrant model
 22756 ;;
 22757                           
 22758                           	psect	text127
 22759  007198                     __ptext127:
 22760                           	opt stack 0
 22761  007198                     __tdiv_to_l_:
 22762                           	opt stack 0
 22763  007198  FFFF               	dw	65535	; assembler added errata NOP
 22764                           
 22765                           ;incstack = 0
 22766  00719A  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 22767  00719E  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 22768  0071A0  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 22769  0071A2  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
 22770  0071A4  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 22771  0071A6  E301               	bnc	u8751
 22772  0071A8  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 22773  0071AA                     u8751:
 22774  0071AA  501F               	movf	??__tdiv_to_l_,w,c
 22775  0071AC  6E27               	movwf	__tdiv_to_l_@exp1,c
 22776  0071AE  5027               	movf	__tdiv_to_l_@exp1,w,c
 22777  0071B0  B4D8               	btfsc	status,2,c
 22778  0071B2  D05A               	goto	u8820
 22779  0071B4  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 22780  0071B8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 22781  0071BA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 22782  0071BC  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
 22783  0071BE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 22784  0071C0  E301               	bnc	u8771
 22785  0071C2  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 22786  0071C4                     u8771:
 22787  0071C4  501F               	movf	??__tdiv_to_l_,w,c
 22788  0071C6  6E26               	movwf	__tdiv_to_l_@cntr,c
 22789  0071C8  5026               	movf	__tdiv_to_l_@cntr,w,c
 22790  0071CA  B4D8               	btfsc	status,2,c
 22791  0071CC  D04D               	goto	u8820
 22792  0071CE  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
 22793  0071D0  0EFF               	movlw	255
 22794  0071D2  1619               	andwf	__tdiv_to_l_@f1,f,c
 22795  0071D4  0EFF               	movlw	255
 22796  0071D6  161A               	andwf	__tdiv_to_l_@f1+1,f,c
 22797  0071D8  0E00               	movlw	0
 22798  0071DA  161B               	andwf	__tdiv_to_l_@f1+2,f,c
 22799  0071DC  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
 22800  0071DE  0EFF               	movlw	255
 22801  0071E0  161C               	andwf	__tdiv_to_l_@f2,f,c
 22802  0071E2  0EFF               	movlw	255
 22803  0071E4  161D               	andwf	__tdiv_to_l_@f2+1,f,c
 22804  0071E6  0E00               	movlw	0
 22805  0071E8  161E               	andwf	__tdiv_to_l_@f2+2,f,c
 22806  0071EA  0E00               	movlw	0
 22807  0071EC  6E22               	movwf	__tdiv_to_l_@quot,c
 22808  0071EE  0E00               	movlw	0
 22809  0071F0  6E23               	movwf	__tdiv_to_l_@quot+1,c
 22810  0071F2  0E00               	movlw	0
 22811  0071F4  6E24               	movwf	__tdiv_to_l_@quot+2,c
 22812  0071F6  0E00               	movlw	0
 22813  0071F8  6E25               	movwf	__tdiv_to_l_@quot+3,c
 22814  0071FA  0E7F               	movlw	127
 22815  0071FC  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 22816  0071FE  5026               	movf	__tdiv_to_l_@cntr,w,c
 22817  007200  0F98               	addlw	152
 22818  007202  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 22819  007204  0E18               	movlw	24
 22820  007206  6E26               	movwf	__tdiv_to_l_@cntr,c
 22821  007208                     l1742:
 22822  007208  FFFF               	dw	65535	; assembler added errata NOP
 22823  00720A  90D8               	bcf	status,0,c
 22824  00720C  3622               	rlcf	__tdiv_to_l_@quot,f,c
 22825  00720E  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 22826  007210  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 22827  007212  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 22828  007214  501C               	movf	__tdiv_to_l_@f2,w,c
 22829  007216  5C19               	subwf	__tdiv_to_l_@f1,w,c
 22830  007218  501D               	movf	__tdiv_to_l_@f2+1,w,c
 22831  00721A  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
 22832  00721C  501E               	movf	__tdiv_to_l_@f2+2,w,c
 22833  00721E  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
 22834  007220  A0D8               	btfss	status,0,c
 22835  007222  D007               	goto	l1743
 22836  007224  501C               	movf	__tdiv_to_l_@f2,w,c
 22837  007226  5E19               	subwf	__tdiv_to_l_@f1,f,c
 22838  007228  501D               	movf	__tdiv_to_l_@f2+1,w,c
 22839  00722A  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
 22840  00722C  501E               	movf	__tdiv_to_l_@f2+2,w,c
 22841  00722E  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
 22842  007230  8022               	bsf	__tdiv_to_l_@quot,0,c
 22843  007232                     l1743:
 22844  007232  FFFF               	dw	65535	; assembler added errata NOP
 22845  007234  90D8               	bcf	status,0,c
 22846  007236  3619               	rlcf	__tdiv_to_l_@f1,f,c
 22847  007238  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
 22848  00723A  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
 22849  00723C  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
 22850  00723E  D7E4               	goto	l1742
 22851  007240  AE27               	btfss	__tdiv_to_l_@exp1,7,c
 22852  007242  D00E               	goto	l1745
 22853  007244  5027               	movf	__tdiv_to_l_@exp1,w,c
 22854  007246  0A80               	xorlw	128
 22855  007248  0F97               	addlw	151
 22856  00724A  A0D8               	btfss	status,0,c
 22857  00724C  D00D               	goto	u8820
 22858  00724E  FFFF               	dw	65535	; assembler added errata NOP
 22859  007250  90D8               	bcf	status,0,c
 22860  007252  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
 22861  007254  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
 22862  007256  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
 22863  007258  3222               	rrcf	__tdiv_to_l_@quot,f,c
 22864  00725A  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
 22865  00725C  D7F8               	goto	l1746
 22866  00725E  D019               	goto	u8830
 22867  007260                     l1745:
 22868  007260  FFFF               	dw	65535	; assembler added errata NOP
 22869  007262  0E17               	movlw	23
 22870  007264  6427               	cpfsgt	__tdiv_to_l_@exp1,c
 22871  007266  D011               	goto	l1751
 22872  007268                     u8820:
 22873  007268  FFFF               	dw	65535	; assembler added errata NOP
 22874  00726A  0E00               	movlw	0
 22875  00726C  6E19               	movwf	?__tdiv_to_l_,c
 22876  00726E  0E00               	movlw	0
 22877  007270  6E1A               	movwf	?__tdiv_to_l_+1,c
 22878  007272  0E00               	movlw	0
 22879  007274  6E1B               	movwf	?__tdiv_to_l_+2,c
 22880  007276  0E00               	movlw	0
 22881  007278  6E1C               	movwf	?__tdiv_to_l_+3,c
 22882  00727A  D014               	goto	l1740
 22883  00727C  FFFF               	dw	65535	; assembler added errata NOP
 22884  00727E  90D8               	bcf	status,0,c
 22885  007280  3622               	rlcf	__tdiv_to_l_@quot,f,c
 22886  007282  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 22887  007284  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 22888  007286  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 22889  007288  0627               	decf	__tdiv_to_l_@exp1,f,c
 22890  00728A                     l1751:
 22891  00728A  FFFF               	dw	65535	; assembler added errata NOP
 22892  00728C  5027               	movf	__tdiv_to_l_@exp1,w,c
 22893  00728E  A4D8               	btfss	status,2,c
 22894  007290  D7F5               	goto	l1752
 22895  007292                     u8830:
 22896  007292  FFFF               	dw	65535	; assembler added errata NOP
 22897  007294  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 22898  007298  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 22899  00729C  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 22900  0072A0  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 22901  0072A4                     l1740:
 22902  0072A4  FFFF               	dw	65535	; assembler added errata NOP
 22903  0072A6  0012               	return		;funcret
 22904  0072A8  FFFF               	dw	65535	; errata NOP
 22905  0072AA                     __end_of__tdiv_to_l_:
 22906                           	opt stack 0
 22907                           tosu	equ	0xFFF
 22908                           tosh	equ	0xFFE
 22909                           tosl	equ	0xFFD
 22910                           pclath	equ	0xFFA
 22911                           tblptru	equ	0xFF8
 22912                           tblptrh	equ	0xFF7
 22913                           tblptrl	equ	0xFF6
 22914                           tablat	equ	0xFF5
 22915                           prodh	equ	0xFF4
 22916                           prodl	equ	0xFF3
 22917                           intcon	equ	0xFF2
 22918                           postinc0	equ	0xFEE
 22919                           wreg	equ	0xFE8
 22920                           indf1	equ	0xFE7
 22921                           fsr1h	equ	0xFE2
 22922                           fsr1l	equ	0xFE1
 22923                           indf2	equ	0xFDF
 22924                           postinc2	equ	0xFDE
 22925                           postdec2	equ	0xFDD
 22926                           plusw2	equ	0xFDB
 22927                           fsr2h	equ	0xFDA
 22928                           fsr2l	equ	0xFD9
 22929                           status	equ	0xFD8
 22930                           
 22931 ;; *************** function __div_to_l_ *****************
 22932 ;; Defined at:
 22933 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 22934 ;; Parameters:    Size  Location     Type
 22935 ;;  f1              3   24[COMRAM] unsigned long 
 22936 ;;  f2              3   27[COMRAM] unsigned long 
 22937 ;; Auto vars:     Size  Location     Type
 22938 ;;  quot            4   30[COMRAM] unsigned long 
 22939 ;;  exp1            1   35[COMRAM] unsigned char 
 22940 ;;  cntr            1   34[COMRAM] unsigned char 
 22941 ;; Return value:  Size  Location     Type
 22942 ;;                  4   24[COMRAM] unsigned long 
 22943 ;; Registers used:
 22944 ;;		wreg, status,2, status,0
 22945 ;; Tracked objects:
 22946 ;;		On entry : 0/0
 22947 ;;		On exit  : 0/0
 22948 ;;		Unchanged: 0/0
 22949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22950 ;;      Params:         6       0       0       0       0       0       0
 22951 ;;      Locals:         6       0       0       0       0       0       0
 22952 ;;      Temps:          0       0       0       0       0       0       0
 22953 ;;      Totals:        12       0       0       0       0       0       0
 22954 ;;Total ram usage:       12 bytes
 22955 ;; Hardware stack levels used:    1
 22956 ;; Hardware stack levels required when called:    1
 22957 ;; This function calls:
 22958 ;;		Nothing
 22959 ;; This function is called by:
 22960 ;;		__doprnt
 22961 ;; This function uses a non-reentrant model
 22962 ;;
 22963                           
 22964                           	psect	text128
 22965  007090                     __ptext128:
 22966                           	opt stack 0
 22967  007090                     __div_to_l_:
 22968                           	opt stack 0
 22969  007090  FFFF               	dw	65535	; assembler added errata NOP
 22970                           
 22971                           ;incstack = 0
 22972  007092  341B               	rlcf	__div_to_l_@f1+2,w,c
 22973  007094  341C               	rlcf	__div_to_l_@f1+3,w,c
 22974  007096  6E24               	movwf	__div_to_l_@exp1,c
 22975  007098  5024               	movf	__div_to_l_@exp1,w,c
 22976  00709A  B4D8               	btfsc	status,2,c
 22977  00709C  D05C               	goto	u8890
 22978  00709E  341E               	rlcf	__div_to_l_@f2+2,w,c
 22979  0070A0  341F               	rlcf	__div_to_l_@f2+3,w,c
 22980  0070A2  6E23               	movwf	__div_to_l_@cntr,c
 22981  0070A4  5023               	movf	__div_to_l_@cntr,w,c
 22982  0070A6  B4D8               	btfsc	status,2,c
 22983  0070A8  D056               	goto	u8890
 22984  0070AA  8E1B               	bsf	__div_to_l_@f1+2,7,c
 22985  0070AC  0EFF               	movlw	255
 22986  0070AE  1619               	andwf	__div_to_l_@f1,f,c
 22987  0070B0  0EFF               	movlw	255
 22988  0070B2  161A               	andwf	__div_to_l_@f1+1,f,c
 22989  0070B4  0EFF               	movlw	255
 22990  0070B6  161B               	andwf	__div_to_l_@f1+2,f,c
 22991  0070B8  0E00               	movlw	0
 22992  0070BA  161C               	andwf	__div_to_l_@f1+3,f,c
 22993  0070BC  8E1E               	bsf	__div_to_l_@f2+2,7,c
 22994  0070BE  0EFF               	movlw	255
 22995  0070C0  161C               	andwf	__div_to_l_@f2,f,c
 22996  0070C2  0EFF               	movlw	255
 22997  0070C4  161D               	andwf	__div_to_l_@f2+1,f,c
 22998  0070C6  0EFF               	movlw	255
 22999  0070C8  161E               	andwf	__div_to_l_@f2+2,f,c
 23000  0070CA  0E00               	movlw	0
 23001  0070CC  161F               	andwf	__div_to_l_@f2+3,f,c
 23002  0070CE  0E00               	movlw	0
 23003  0070D0  6E1F               	movwf	__div_to_l_@quot,c
 23004  0070D2  0E00               	movlw	0
 23005  0070D4  6E20               	movwf	__div_to_l_@quot+1,c
 23006  0070D6  0E00               	movlw	0
 23007  0070D8  6E21               	movwf	__div_to_l_@quot+2,c
 23008  0070DA  0E00               	movlw	0
 23009  0070DC  6E22               	movwf	__div_to_l_@quot+3,c
 23010  0070DE  0E7F               	movlw	127
 23011  0070E0  5E24               	subwf	__div_to_l_@exp1,f,c
 23012  0070E2  5023               	movf	__div_to_l_@cntr,w,c
 23013  0070E4  0FA0               	addlw	160
 23014  0070E6  5E24               	subwf	__div_to_l_@exp1,f,c
 23015  0070E8  0E20               	movlw	32
 23016  0070EA  6E23               	movwf	__div_to_l_@cntr,c
 23017  0070EC  FFFF               	dw	65535	; assembler added errata NOP
 23018  0070EE  90D8               	bcf	status,0,c
 23019  0070F0  361F               	rlcf	__div_to_l_@quot,f,c
 23020  0070F2  3620               	rlcf	__div_to_l_@quot+1,f,c
 23021  0070F4  3621               	rlcf	__div_to_l_@quot+2,f,c
 23022  0070F6  3622               	rlcf	__div_to_l_@quot+3,f,c
 23023  0070F8  501C               	movf	__div_to_l_@f2,w,c
 23024  0070FA  5C19               	subwf	__div_to_l_@f1,w,c
 23025  0070FC  501D               	movf	__div_to_l_@f2+1,w,c
 23026  0070FE  581A               	subwfb	__div_to_l_@f1+1,w,c
 23027  007100  501E               	movf	__div_to_l_@f2+2,w,c
 23028  007102  581B               	subwfb	__div_to_l_@f1+2,w,c
 23029  007104  501F               	movf	__div_to_l_@f2+3,w,c
 23030  007106  581C               	subwfb	__div_to_l_@f1+3,w,c
 23031  007108  A0D8               	btfss	status,0,c
 23032  00710A  D009               	goto	l1639
 23033  00710C  501C               	movf	__div_to_l_@f2,w,c
 23034  00710E  5E19               	subwf	__div_to_l_@f1,f,c
 23035  007110  501D               	movf	__div_to_l_@f2+1,w,c
 23036  007112  5A1A               	subwfb	__div_to_l_@f1+1,f,c
 23037  007114  501E               	movf	__div_to_l_@f2+2,w,c
 23038  007116  5A1B               	subwfb	__div_to_l_@f1+2,f,c
 23039  007118  501F               	movf	__div_to_l_@f2+3,w,c
 23040  00711A  5A1C               	subwfb	__div_to_l_@f1+3,f,c
 23041  00711C  801F               	bsf	__div_to_l_@quot,0,c
 23042  00711E                     l1639:
 23043  00711E  FFFF               	dw	65535	; assembler added errata NOP
 23044  007120  90D8               	bcf	status,0,c
 23045  007122  3619               	rlcf	__div_to_l_@f1,f,c
 23046  007124  361A               	rlcf	__div_to_l_@f1+1,f,c
 23047  007126  361B               	rlcf	__div_to_l_@f1+2,f,c
 23048  007128  361C               	rlcf	__div_to_l_@f1+3,f,c
 23049  00712A  2E23               	decfsz	__div_to_l_@cntr,f,c
 23050  00712C  D7DF               	goto	l1638
 23051  00712E  AE24               	btfss	__div_to_l_@exp1,7,c
 23052  007130  D00E               	goto	l1641
 23053  007132  5024               	movf	__div_to_l_@exp1,w,c
 23054  007134  0A80               	xorlw	128
 23055  007136  0F9F               	addlw	159
 23056  007138  A0D8               	btfss	status,0,c
 23057  00713A  D00D               	goto	u8890
 23058  00713C  FFFF               	dw	65535	; assembler added errata NOP
 23059  00713E  90D8               	bcf	status,0,c
 23060  007140  3222               	rrcf	__div_to_l_@quot+3,f,c
 23061  007142  3221               	rrcf	__div_to_l_@quot+2,f,c
 23062  007144  3220               	rrcf	__div_to_l_@quot+1,f,c
 23063  007146  321F               	rrcf	__div_to_l_@quot,f,c
 23064  007148  3E24               	incfsz	__div_to_l_@exp1,f,c
 23065  00714A  D7F8               	goto	l1642
 23066  00714C  D019               	goto	u8900
 23067  00714E                     l1641:
 23068  00714E  FFFF               	dw	65535	; assembler added errata NOP
 23069  007150  0E1F               	movlw	31
 23070  007152  6424               	cpfsgt	__div_to_l_@exp1,c
 23071  007154  D011               	goto	l1647
 23072  007156                     u8890:
 23073  007156  FFFF               	dw	65535	; assembler added errata NOP
 23074  007158  0E00               	movlw	0
 23075  00715A  6E19               	movwf	?__div_to_l_,c
 23076  00715C  0E00               	movlw	0
 23077  00715E  6E1A               	movwf	?__div_to_l_+1,c
 23078  007160  0E00               	movlw	0
 23079  007162  6E1B               	movwf	?__div_to_l_+2,c
 23080  007164  0E00               	movlw	0
 23081  007166  6E1C               	movwf	?__div_to_l_+3,c
 23082  007168  D014               	goto	l1636
 23083  00716A  FFFF               	dw	65535	; assembler added errata NOP
 23084  00716C  90D8               	bcf	status,0,c
 23085  00716E  361F               	rlcf	__div_to_l_@quot,f,c
 23086  007170  3620               	rlcf	__div_to_l_@quot+1,f,c
 23087  007172  3621               	rlcf	__div_to_l_@quot+2,f,c
 23088  007174  3622               	rlcf	__div_to_l_@quot+3,f,c
 23089  007176  0624               	decf	__div_to_l_@exp1,f,c
 23090  007178                     l1647:
 23091  007178  FFFF               	dw	65535	; assembler added errata NOP
 23092  00717A  5024               	movf	__div_to_l_@exp1,w,c
 23093  00717C  A4D8               	btfss	status,2,c
 23094  00717E  D7F5               	goto	l1648
 23095  007180                     u8900:
 23096  007180  FFFF               	dw	65535	; assembler added errata NOP
 23097  007182  C01F  F019         	movff	__div_to_l_@quot,?__div_to_l_
 23098  007186  C020  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 23099  00718A  C021  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 23100  00718E  C022  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 23101  007192                     l1636:
 23102  007192  FFFF               	dw	65535	; assembler added errata NOP
 23103  007194  0012               	return		;funcret
 23104  007196  FFFF               	dw	65535	; errata NOP
 23105  007198                     __end_of__div_to_l_:
 23106                           	opt stack 0
 23107                           tosu	equ	0xFFF
 23108                           tosh	equ	0xFFE
 23109                           tosl	equ	0xFFD
 23110                           pclath	equ	0xFFA
 23111                           tblptru	equ	0xFF8
 23112                           tblptrh	equ	0xFF7
 23113                           tblptrl	equ	0xFF6
 23114                           tablat	equ	0xFF5
 23115                           prodh	equ	0xFF4
 23116                           prodl	equ	0xFF3
 23117                           intcon	equ	0xFF2
 23118                           postinc0	equ	0xFEE
 23119                           wreg	equ	0xFE8
 23120                           indf1	equ	0xFE7
 23121                           fsr1h	equ	0xFE2
 23122                           fsr1l	equ	0xFE1
 23123                           indf2	equ	0xFDF
 23124                           postinc2	equ	0xFDE
 23125                           postdec2	equ	0xFDD
 23126                           plusw2	equ	0xFDB
 23127                           fsr2h	equ	0xFDA
 23128                           fsr2l	equ	0xFD9
 23129                           status	equ	0xFD8
 23130                           
 23131 ;; *************** function ___lltoft *****************
 23132 ;; Defined at:
 23133 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
 23134 ;; Parameters:    Size  Location     Type
 23135 ;;  c               4   32[COMRAM] unsigned long 
 23136 ;; Auto vars:     Size  Location     Type
 23137 ;;  exp             1   40[COMRAM] unsigned char 
 23138 ;; Return value:  Size  Location     Type
 23139 ;;                  3   32[COMRAM] float 
 23140 ;; Registers used:
 23141 ;;		wreg, status,2, status,0, cstack
 23142 ;; Tracked objects:
 23143 ;;		On entry : 0/0
 23144 ;;		On exit  : 0/0
 23145 ;;		Unchanged: 0/0
 23146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23147 ;;      Params:         4       0       0       0       0       0       0
 23148 ;;      Locals:         1       0       0       0       0       0       0
 23149 ;;      Temps:          4       0       0       0       0       0       0
 23150 ;;      Totals:         9       0       0       0       0       0       0
 23151 ;;Total ram usage:        9 bytes
 23152 ;; Hardware stack levels used:    1
 23153 ;; Hardware stack levels required when called:    2
 23154 ;; This function calls:
 23155 ;;		___ftpack
 23156 ;; This function is called by:
 23157 ;;		__doprnt
 23158 ;; This function uses a non-reentrant model
 23159 ;;
 23160                           
 23161                           	psect	text129
 23162  005AAE                     __ptext129:
 23163                           	opt stack 0
 23164  005AAE                     ___lltoft:
 23165                           	opt stack 0
 23166  005AAE  FFFF               	dw	65535	; assembler added errata NOP
 23167                           
 23168                           ;incstack = 0
 23169  005AB0  0E8E               	movlw	142
 23170  005AB2  6E29               	movwf	___lltoft@exp,c
 23171  005AB4  D007               	goto	l1851
 23172  005AB6  FFFF               	dw	65535	; assembler added errata NOP
 23173  005AB8  90D8               	bcf	status,0,c
 23174  005ABA  3224               	rrcf	___lltoft@c+3,f,c
 23175  005ABC  3223               	rrcf	___lltoft@c+2,f,c
 23176  005ABE  3222               	rrcf	___lltoft@c+1,f,c
 23177  005AC0  3221               	rrcf	___lltoft@c,f,c
 23178  005AC2  2A29               	incf	___lltoft@exp,f,c
 23179  005AC4                     l1851:
 23180  005AC4  FFFF               	dw	65535	; assembler added errata NOP
 23181  005AC6  0E00               	movlw	0
 23182  005AC8  1421               	andwf	___lltoft@c,w,c
 23183  005ACA  6E25               	movwf	??___lltoft& (0+255),c
 23184  005ACC  0E00               	movlw	0
 23185  005ACE  1422               	andwf	___lltoft@c+1,w,c
 23186  005AD0  6E26               	movwf	(??___lltoft+1)& (0+255),c
 23187  005AD2  0E00               	movlw	0
 23188  005AD4  1423               	andwf	___lltoft@c+2,w,c
 23189  005AD6  6E27               	movwf	(??___lltoft+2)& (0+255),c
 23190  005AD8  0EFF               	movlw	255
 23191  005ADA  1424               	andwf	___lltoft@c+3,w,c
 23192  005ADC  6E28               	movwf	(??___lltoft+3)& (0+255),c
 23193  005ADE  5025               	movf	??___lltoft,w,c
 23194  005AE0  1026               	iorwf	??___lltoft+1,w,c
 23195  005AE2  1027               	iorwf	??___lltoft+2,w,c
 23196  005AE4  1028               	iorwf	??___lltoft+3,w,c
 23197  005AE6  A4D8               	btfss	status,2,c
 23198  005AE8  D7E6               	goto	l1852
 23199  005AEA  C021  F019         	movff	___lltoft@c,___ftpack@arg
 23200  005AEE  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
 23201  005AF2  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
 23202  005AF6  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
 23203  005AFA  0E00               	movlw	0
 23204  005AFC  6E1D               	movwf	___ftpack@sign,c
 23205  005AFE  EC51  F034         	call	___ftpack	;wreg free
 23206  005B02  C019  F021         	movff	?___ftpack,?___lltoft
 23207  005B06  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
 23208  005B0A  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
 23209  005B0E  0012               	return		;funcret
 23210  005B10  FFFF               	dw	65535	; errata NOP
 23211  005B12                     __end_of___lltoft:
 23212                           	opt stack 0
 23213                           tosu	equ	0xFFF
 23214                           tosh	equ	0xFFE
 23215                           tosl	equ	0xFFD
 23216                           pclath	equ	0xFFA
 23217                           tblptru	equ	0xFF8
 23218                           tblptrh	equ	0xFF7
 23219                           tblptrl	equ	0xFF6
 23220                           tablat	equ	0xFF5
 23221                           prodh	equ	0xFF4
 23222                           prodl	equ	0xFF3
 23223                           intcon	equ	0xFF2
 23224                           postinc0	equ	0xFEE
 23225                           wreg	equ	0xFE8
 23226                           indf1	equ	0xFE7
 23227                           fsr1h	equ	0xFE2
 23228                           fsr1l	equ	0xFE1
 23229                           indf2	equ	0xFDF
 23230                           postinc2	equ	0xFDE
 23231                           postdec2	equ	0xFDD
 23232                           plusw2	equ	0xFDB
 23233                           fsr2h	equ	0xFDA
 23234                           fsr2l	equ	0xFD9
 23235                           status	equ	0xFD8
 23236                           
 23237 ;; *************** function ___llmod *****************
 23238 ;; Defined at:
 23239 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 23240 ;; Parameters:    Size  Location     Type
 23241 ;;  dividend        4   37[COMRAM] unsigned long 
 23242 ;;  divisor         4   41[COMRAM] unsigned long 
 23243 ;; Auto vars:     Size  Location     Type
 23244 ;;  counter         1   45[COMRAM] unsigned char 
 23245 ;; Return value:  Size  Location     Type
 23246 ;;                  4   37[COMRAM] unsigned long 
 23247 ;; Registers used:
 23248 ;;		wreg, status,2, status,0
 23249 ;; Tracked objects:
 23250 ;;		On entry : 0/0
 23251 ;;		On exit  : 0/0
 23252 ;;		Unchanged: 0/0
 23253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23254 ;;      Params:         8       0       0       0       0       0       0
 23255 ;;      Locals:         1       0       0       0       0       0       0
 23256 ;;      Temps:          0       0       0       0       0       0       0
 23257 ;;      Totals:         9       0       0       0       0       0       0
 23258 ;;Total ram usage:        9 bytes
 23259 ;; Hardware stack levels used:    1
 23260 ;; Hardware stack levels required when called:    1
 23261 ;; This function calls:
 23262 ;;		Nothing
 23263 ;; This function is called by:
 23264 ;;		__doprnt
 23265 ;; This function uses a non-reentrant model
 23266 ;;
 23267                           
 23268                           	psect	text130
 23269  005CBA                     __ptext130:
 23270                           	opt stack 0
 23271  005CBA                     ___llmod:
 23272                           	opt stack 0
 23273  005CBA  FFFF               	dw	65535	; assembler added errata NOP
 23274                           
 23275                           ;incstack = 0
 23276  005CBC  502A               	movf	___llmod@divisor,w,c
 23277  005CBE  102B               	iorwf	___llmod@divisor+1,w,c
 23278  005CC0  102C               	iorwf	___llmod@divisor+2,w,c
 23279  005CC2  102D               	iorwf	___llmod@divisor+3,w,c
 23280  005CC4  B4D8               	btfsc	status,2,c
 23281  005CC6  D028               	goto	l1845
 23282  005CC8  0E01               	movlw	1
 23283  005CCA  6E2E               	movwf	___llmod@counter,c
 23284  005CCC  D007               	goto	l1840
 23285  005CCE  FFFF               	dw	65535	; assembler added errata NOP
 23286  005CD0  90D8               	bcf	status,0,c
 23287  005CD2  362A               	rlcf	___llmod@divisor,f,c
 23288  005CD4  362B               	rlcf	___llmod@divisor+1,f,c
 23289  005CD6  362C               	rlcf	___llmod@divisor+2,f,c
 23290  005CD8  362D               	rlcf	___llmod@divisor+3,f,c
 23291  005CDA  2A2E               	incf	___llmod@counter,f,c
 23292  005CDC                     l1840:
 23293  005CDC  FFFF               	dw	65535	; assembler added errata NOP
 23294  005CDE  AE2D               	btfss	___llmod@divisor+3,7,c
 23295  005CE0  D7F6               	goto	l1841
 23296  005CE2                     u9330:
 23297  005CE2  FFFF               	dw	65535	; assembler added errata NOP
 23298  005CE4  502A               	movf	___llmod@divisor,w,c
 23299  005CE6  5C26               	subwf	___llmod@dividend,w,c
 23300  005CE8  502B               	movf	___llmod@divisor+1,w,c
 23301  005CEA  5827               	subwfb	___llmod@dividend+1,w,c
 23302  005CEC  502C               	movf	___llmod@divisor+2,w,c
 23303  005CEE  5828               	subwfb	___llmod@dividend+2,w,c
 23304  005CF0  502D               	movf	___llmod@divisor+3,w,c
 23305  005CF2  5829               	subwfb	___llmod@dividend+3,w,c
 23306  005CF4  A0D8               	btfss	status,0,c
 23307  005CF6  D008               	goto	l1844
 23308  005CF8  502A               	movf	___llmod@divisor,w,c
 23309  005CFA  5E26               	subwf	___llmod@dividend,f,c
 23310  005CFC  502B               	movf	___llmod@divisor+1,w,c
 23311  005CFE  5A27               	subwfb	___llmod@dividend+1,f,c
 23312  005D00  502C               	movf	___llmod@divisor+2,w,c
 23313  005D02  5A28               	subwfb	___llmod@dividend+2,f,c
 23314  005D04  502D               	movf	___llmod@divisor+3,w,c
 23315  005D06  5A29               	subwfb	___llmod@dividend+3,f,c
 23316  005D08                     l1844:
 23317  005D08  FFFF               	dw	65535	; assembler added errata NOP
 23318  005D0A  90D8               	bcf	status,0,c
 23319  005D0C  322D               	rrcf	___llmod@divisor+3,f,c
 23320  005D0E  322C               	rrcf	___llmod@divisor+2,f,c
 23321  005D10  322B               	rrcf	___llmod@divisor+1,f,c
 23322  005D12  322A               	rrcf	___llmod@divisor,f,c
 23323  005D14  2E2E               	decfsz	___llmod@counter,f,c
 23324  005D16  D7E5               	goto	u9330
 23325  005D18                     l1845:
 23326  005D18  FFFF               	dw	65535	; assembler added errata NOP
 23327  005D1A  C026  F026         	movff	___llmod@dividend,?___llmod
 23328  005D1E  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 23329  005D22  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 23330  005D26  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 23331  005D2A  0012               	return		;funcret
 23332  005D2C  FFFF               	dw	65535	; errata NOP
 23333  005D2E                     __end_of___llmod:
 23334                           	opt stack 0
 23335                           tosu	equ	0xFFF
 23336                           tosh	equ	0xFFE
 23337                           tosl	equ	0xFFD
 23338                           pclath	equ	0xFFA
 23339                           tblptru	equ	0xFF8
 23340                           tblptrh	equ	0xFF7
 23341                           tblptrl	equ	0xFF6
 23342                           tablat	equ	0xFF5
 23343                           prodh	equ	0xFF4
 23344                           prodl	equ	0xFF3
 23345                           intcon	equ	0xFF2
 23346                           postinc0	equ	0xFEE
 23347                           wreg	equ	0xFE8
 23348                           indf1	equ	0xFE7
 23349                           fsr1h	equ	0xFE2
 23350                           fsr1l	equ	0xFE1
 23351                           indf2	equ	0xFDF
 23352                           postinc2	equ	0xFDE
 23353                           postdec2	equ	0xFDD
 23354                           plusw2	equ	0xFDB
 23355                           fsr2h	equ	0xFDA
 23356                           fsr2l	equ	0xFD9
 23357                           status	equ	0xFD8
 23358                           
 23359 ;; *************** function ___lldiv *****************
 23360 ;; Defined at:
 23361 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 23362 ;; Parameters:    Size  Location     Type
 23363 ;;  dividend        4   24[COMRAM] unsigned long 
 23364 ;;  divisor         4   28[COMRAM] unsigned long 
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;  quotient        4   32[COMRAM] unsigned long 
 23367 ;;  counter         1   36[COMRAM] unsigned char 
 23368 ;; Return value:  Size  Location     Type
 23369 ;;                  4   24[COMRAM] unsigned long 
 23370 ;; Registers used:
 23371 ;;		wreg, status,2, status,0
 23372 ;; Tracked objects:
 23373 ;;		On entry : 0/0
 23374 ;;		On exit  : 0/0
 23375 ;;		Unchanged: 0/0
 23376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23377 ;;      Params:         8       0       0       0       0       0       0
 23378 ;;      Locals:         5       0       0       0       0       0       0
 23379 ;;      Temps:          0       0       0       0       0       0       0
 23380 ;;      Totals:        13       0       0       0       0       0       0
 23381 ;;Total ram usage:       13 bytes
 23382 ;; Hardware stack levels used:    1
 23383 ;; Hardware stack levels required when called:    1
 23384 ;; This function calls:
 23385 ;;		Nothing
 23386 ;; This function is called by:
 23387 ;;		__doprnt
 23388 ;; This function uses a non-reentrant model
 23389 ;;
 23390                           
 23391                           	psect	text131
 23392  00613A                     __ptext131:
 23393                           	opt stack 0
 23394  00613A                     ___lldiv:
 23395                           	opt stack 0
 23396  00613A  FFFF               	dw	65535	; assembler added errata NOP
 23397                           
 23398                           ;incstack = 0
 23399  00613C  0E00               	movlw	0
 23400  00613E  6E21               	movwf	___lldiv@quotient,c
 23401  006140  0E00               	movlw	0
 23402  006142  6E22               	movwf	___lldiv@quotient+1,c
 23403  006144  0E00               	movlw	0
 23404  006146  6E23               	movwf	___lldiv@quotient+2,c
 23405  006148  0E00               	movlw	0
 23406  00614A  6E24               	movwf	___lldiv@quotient+3,c
 23407  00614C  501D               	movf	___lldiv@divisor,w,c
 23408  00614E  101E               	iorwf	___lldiv@divisor+1,w,c
 23409  006150  101F               	iorwf	___lldiv@divisor+2,w,c
 23410  006152  1020               	iorwf	___lldiv@divisor+3,w,c
 23411  006154  B4D8               	btfsc	status,2,c
 23412  006156  D02E               	goto	l1835
 23413  006158  0E01               	movlw	1
 23414  00615A  6E25               	movwf	___lldiv@counter,c
 23415  00615C  D007               	goto	l1830
 23416  00615E  FFFF               	dw	65535	; assembler added errata NOP
 23417  006160  90D8               	bcf	status,0,c
 23418  006162  361D               	rlcf	___lldiv@divisor,f,c
 23419  006164  361E               	rlcf	___lldiv@divisor+1,f,c
 23420  006166  361F               	rlcf	___lldiv@divisor+2,f,c
 23421  006168  3620               	rlcf	___lldiv@divisor+3,f,c
 23422  00616A  2A25               	incf	___lldiv@counter,f,c
 23423  00616C                     l1830:
 23424  00616C  FFFF               	dw	65535	; assembler added errata NOP
 23425  00616E  AE20               	btfss	___lldiv@divisor+3,7,c
 23426  006170  D7F6               	goto	l1831
 23427  006172                     u9300:
 23428  006172  FFFF               	dw	65535	; assembler added errata NOP
 23429  006174  90D8               	bcf	status,0,c
 23430  006176  3621               	rlcf	___lldiv@quotient,f,c
 23431  006178  3622               	rlcf	___lldiv@quotient+1,f,c
 23432  00617A  3623               	rlcf	___lldiv@quotient+2,f,c
 23433  00617C  3624               	rlcf	___lldiv@quotient+3,f,c
 23434  00617E  501D               	movf	___lldiv@divisor,w,c
 23435  006180  5C19               	subwf	___lldiv@dividend,w,c
 23436  006182  501E               	movf	___lldiv@divisor+1,w,c
 23437  006184  581A               	subwfb	___lldiv@dividend+1,w,c
 23438  006186  501F               	movf	___lldiv@divisor+2,w,c
 23439  006188  581B               	subwfb	___lldiv@dividend+2,w,c
 23440  00618A  5020               	movf	___lldiv@divisor+3,w,c
 23441  00618C  581C               	subwfb	___lldiv@dividend+3,w,c
 23442  00618E  A0D8               	btfss	status,0,c
 23443  006190  D009               	goto	l1834
 23444  006192  501D               	movf	___lldiv@divisor,w,c
 23445  006194  5E19               	subwf	___lldiv@dividend,f,c
 23446  006196  501E               	movf	___lldiv@divisor+1,w,c
 23447  006198  5A1A               	subwfb	___lldiv@dividend+1,f,c
 23448  00619A  501F               	movf	___lldiv@divisor+2,w,c
 23449  00619C  5A1B               	subwfb	___lldiv@dividend+2,f,c
 23450  00619E  5020               	movf	___lldiv@divisor+3,w,c
 23451  0061A0  5A1C               	subwfb	___lldiv@dividend+3,f,c
 23452  0061A2  8021               	bsf	___lldiv@quotient,0,c
 23453  0061A4                     l1834:
 23454  0061A4  FFFF               	dw	65535	; assembler added errata NOP
 23455  0061A6  90D8               	bcf	status,0,c
 23456  0061A8  3220               	rrcf	___lldiv@divisor+3,f,c
 23457  0061AA  321F               	rrcf	___lldiv@divisor+2,f,c
 23458  0061AC  321E               	rrcf	___lldiv@divisor+1,f,c
 23459  0061AE  321D               	rrcf	___lldiv@divisor,f,c
 23460  0061B0  2E25               	decfsz	___lldiv@counter,f,c
 23461  0061B2  D7DF               	goto	u9300
 23462  0061B4                     l1835:
 23463  0061B4  FFFF               	dw	65535	; assembler added errata NOP
 23464  0061B6  C021  F019         	movff	___lldiv@quotient,?___lldiv
 23465  0061BA  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 23466  0061BE  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 23467  0061C2  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 23468  0061C6  0012               	return		;funcret
 23469  0061C8  FFFF               	dw	65535	; errata NOP
 23470  0061CA                     __end_of___lldiv:
 23471                           	opt stack 0
 23472                           tosu	equ	0xFFF
 23473                           tosh	equ	0xFFE
 23474                           tosl	equ	0xFFD
 23475                           pclath	equ	0xFFA
 23476                           tblptru	equ	0xFF8
 23477                           tblptrh	equ	0xFF7
 23478                           tblptrl	equ	0xFF6
 23479                           tablat	equ	0xFF5
 23480                           prodh	equ	0xFF4
 23481                           prodl	equ	0xFF3
 23482                           intcon	equ	0xFF2
 23483                           postinc0	equ	0xFEE
 23484                           wreg	equ	0xFE8
 23485                           indf1	equ	0xFE7
 23486                           fsr1h	equ	0xFE2
 23487                           fsr1l	equ	0xFE1
 23488                           indf2	equ	0xFDF
 23489                           postinc2	equ	0xFDE
 23490                           postdec2	equ	0xFDD
 23491                           plusw2	equ	0xFDB
 23492                           fsr2h	equ	0xFDA
 23493                           fsr2l	equ	0xFD9
 23494                           status	equ	0xFD8
 23495                           
 23496 ;; *************** function ___fttol *****************
 23497 ;; Defined at:
 23498 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
 23499 ;; Parameters:    Size  Location     Type
 23500 ;;  f1              3   42[BANK0 ] float 
 23501 ;; Auto vars:     Size  Location     Type
 23502 ;;  lval            4   52[BANK0 ] unsigned long 
 23503 ;;  exp1            1   56[BANK0 ] unsigned char 
 23504 ;;  sign1           1   51[BANK0 ] unsigned char 
 23505 ;; Return value:  Size  Location     Type
 23506 ;;                  4   42[BANK0 ] long 
 23507 ;; Registers used:
 23508 ;;		wreg, status,2, status,0
 23509 ;; Tracked objects:
 23510 ;;		On entry : 0/0
 23511 ;;		On exit  : 0/0
 23512 ;;		Unchanged: 0/0
 23513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23514 ;;      Params:         0       4       0       0       0       0       0
 23515 ;;      Locals:         0       6       0       0       0       0       0
 23516 ;;      Temps:          0       5       0       0       0       0       0
 23517 ;;      Totals:         0      15       0       0       0       0       0
 23518 ;;Total ram usage:       15 bytes
 23519 ;; Hardware stack levels used:    1
 23520 ;; Hardware stack levels required when called:    1
 23521 ;; This function calls:
 23522 ;;		Nothing
 23523 ;; This function is called by:
 23524 ;;		_main
 23525 ;;		__doprnt
 23526 ;; This function uses a non-reentrant model
 23527 ;;
 23528                           
 23529                           	psect	text132
 23530  00762C                     __ptext132:
 23531                           	opt stack 0
 23532  00762C                     ___fttol:
 23533                           	opt stack 0
 23534  00762C  FFFF               	dw	65535	; assembler added errata NOP
 23535                           
 23536                           ;incstack = 0
 23537  00762E  C08C  F08E         	movff	___fttol@f1+2,??___fttol
 23538  007632  0100               	movlb	0	; () banked
 23539  007634  6B8F               	clrf	(??___fttol+1)& (0+255),b
 23540  007636  6B90               	clrf	(??___fttol+2)& (0+255),b
 23541  007638  0100               	movlb	0	; () banked
 23542  00763A  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 23543  00763C  0100               	movlb	0	; () banked
 23544  00763E  378E               	rlcf	??___fttol& (0+255),f,b
 23545  007640  E301               	bnc	u9211
 23546  007642  818F               	bsf	(??___fttol+1)& (0+255),0,b
 23547  007644                     u9211:
 23548  007644  0100               	movlb	0	; () banked
 23549  007646  518E               	movf	??___fttol& (0+255),w,b
 23550  007648  0100               	movlb	0	; () banked
 23551  00764A  6F98               	movwf	___fttol@exp1& (0+255),b
 23552  00764C  0100               	movlb	0	; () banked
 23553  00764E  5198               	movf	___fttol@exp1& (0+255),w,b
 23554  007650  B4D8               	btfsc	status,2,c
 23555  007652  D051               	goto	u9260
 23556                           
 23557                           ; BSR set to: 0
 23558                           
 23559                           ; BSR set to: 0
 23560                           
 23561                           ; BSR set to: 0
 23562                           
 23563                           ; BSR set to: 0
 23564  007654  0E17               	movlw	23
 23565  007656  0100               	movlb	0	; () banked
 23566  007658  6F8E               	movwf	??___fttol& (0+255),b
 23567  00765A  C08A  F08F         	movff	___fttol@f1,??___fttol+1
 23568  00765E  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
 23569  007662  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
 23570  007666  0100               	movlb	0	; () banked
 23571  007668  298E               	incf	??___fttol& (0+255),w,b
 23572  00766A  0100               	movlb	0	; () banked
 23573  00766C  6F92               	movwf	(??___fttol+4)& (0+255),b
 23574  00766E  D006               	goto	u9230
 23575  007670                     u9235:
 23576  007670  FFFF               	dw	65535	; assembler added errata NOP
 23577  007672  0100               	movlb	0	; () banked
 23578  007674  90D8               	bcf	status,0,c
 23579  007676  3391               	rrcf	(??___fttol+3)& (0+255),f,b
 23580  007678  3390               	rrcf	(??___fttol+2)& (0+255),f,b
 23581  00767A  338F               	rrcf	(??___fttol+1)& (0+255),f,b
 23582  00767C                     u9230:
 23583  00767C  FFFF               	dw	65535	; assembler added errata NOP
 23584  00767E  0100               	movlb	0	; () banked
 23585  007680  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
 23586  007682  D7F6               	goto	u9235
 23587  007684  0100               	movlb	0	; () banked
 23588  007686  518F               	movf	(??___fttol+1)& (0+255),w,b
 23589  007688  0100               	movlb	0	; () banked
 23590  00768A  6F93               	movwf	___fttol@sign1& (0+255),b
 23591                           
 23592                           ; BSR set to: 0
 23593  00768C  0100               	movlb	0	; () banked
 23594  00768E  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
 23595                           
 23596                           ; BSR set to: 0
 23597  007690  0EFF               	movlw	255
 23598  007692  0100               	movlb	0	; () banked
 23599  007694  178A               	andwf	___fttol@f1& (0+255),f,b
 23600  007696  0EFF               	movlw	255
 23601  007698  0100               	movlb	0	; () banked
 23602  00769A  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
 23603  00769C  0E00               	movlw	0
 23604  00769E  0100               	movlb	0	; () banked
 23605  0076A0  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
 23606                           
 23607                           ; BSR set to: 0
 23608  0076A2  0100               	movlb	0	; () banked
 23609  0076A4  518A               	movf	___fttol@f1& (0+255),w,b
 23610  0076A6  0100               	movlb	0	; () banked
 23611  0076A8  6F94               	movwf	___fttol@lval& (0+255),b
 23612  0076AA  0100               	movlb	0	; () banked
 23613  0076AC  518B               	movf	(___fttol@f1+1)& (0+255),w,b
 23614  0076AE  0100               	movlb	0	; () banked
 23615  0076B0  6F95               	movwf	(___fttol@lval+1)& (0+255),b
 23616  0076B2  0100               	movlb	0	; () banked
 23617  0076B4  518C               	movf	(___fttol@f1+2)& (0+255),w,b
 23618  0076B6  0100               	movlb	0	; () banked
 23619  0076B8  6F96               	movwf	(___fttol@lval+2)& (0+255),b
 23620  0076BA  0100               	movlb	0	; () banked
 23621  0076BC  6B97               	clrf	(___fttol@lval+3)& (0+255),b
 23622                           
 23623                           ; BSR set to: 0
 23624  0076BE  0E8E               	movlw	142
 23625  0076C0  0100               	movlb	0	; () banked
 23626  0076C2  5F98               	subwf	___fttol@exp1& (0+255),f,b
 23627                           
 23628                           ; BSR set to: 0
 23629  0076C4  0100               	movlb	0	; () banked
 23630  0076C6  AF98               	btfss	___fttol@exp1& (0+255),7,b
 23631  0076C8  D011               	goto	l1786
 23632                           
 23633                           ; BSR set to: 0
 23634  0076CA  0100               	movlb	0	; () banked
 23635  0076CC  5198               	movf	___fttol@exp1& (0+255),w,b
 23636  0076CE  0A80               	xorlw	128
 23637  0076D0  0F8F               	addlw	143
 23638  0076D2  A0D8               	btfss	status,0,c
 23639  0076D4  D010               	goto	u9260
 23640  0076D6  FFFF               	dw	65535	; assembler added errata NOP
 23641                           
 23642                           ; BSR set to: 0
 23643                           
 23644                           ; BSR set to: 0
 23645                           
 23646                           ; BSR set to: 0
 23647  0076D8  0100               	movlb	0	; () banked
 23648  0076DA  90D8               	bcf	status,0,c
 23649  0076DC  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
 23650  0076DE  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
 23651  0076E0  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
 23652  0076E2  3394               	rrcf	___fttol@lval& (0+255),f,b
 23653                           
 23654                           ; BSR set to: 0
 23655  0076E4  0100               	movlb	0	; () banked
 23656  0076E6  3F98               	incfsz	___fttol@exp1& (0+255),f,b
 23657  0076E8  D7F6               	goto	l1787
 23658                           
 23659                           ; BSR set to: 0
 23660  0076EA  D01F               	goto	u9270
 23661  0076EC                     l1786:
 23662  0076EC  FFFF               	dw	65535	; assembler added errata NOP
 23663                           
 23664                           ; BSR set to: 0
 23665                           
 23666                           ; BSR set to: 0
 23667  0076EE  0E17               	movlw	23
 23668  0076F0  0100               	movlb	0	; () banked
 23669  0076F2  6598               	cpfsgt	___fttol@exp1& (0+255),b
 23670  0076F4  D014               	goto	l1792
 23671  0076F6                     u9260:
 23672  0076F6  FFFF               	dw	65535	; assembler added errata NOP
 23673                           
 23674                           ; BSR set to: 0
 23675  0076F8  0E00               	movlw	0
 23676  0076FA  0100               	movlb	0	; () banked
 23677  0076FC  6F8A               	movwf	?___fttol& (0+255),b
 23678  0076FE  0E00               	movlw	0
 23679  007700  6F8B               	movwf	(?___fttol+1)& (0+255),b
 23680  007702  0E00               	movlw	0
 23681  007704  6F8C               	movwf	(?___fttol+2)& (0+255),b
 23682  007706  0E00               	movlw	0
 23683  007708  6F8D               	movwf	(?___fttol+3)& (0+255),b
 23684                           
 23685                           ; BSR set to: 0
 23686  00770A  D027               	goto	l9521
 23687  00770C  FFFF               	dw	65535	; assembler added errata NOP
 23688                           
 23689                           ; BSR set to: 0
 23690                           
 23691                           ; BSR set to: 0
 23692  00770E  0100               	movlb	0	; () banked
 23693  007710  90D8               	bcf	status,0,c
 23694  007712  3794               	rlcf	___fttol@lval& (0+255),f,b
 23695  007714  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
 23696  007716  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
 23697  007718  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
 23698  00771A  0100               	movlb	0	; () banked
 23699  00771C  0798               	decf	___fttol@exp1& (0+255),f,b
 23700  00771E                     l1792:
 23701  00771E  FFFF               	dw	65535	; assembler added errata NOP
 23702                           
 23703                           ; BSR set to: 0
 23704                           
 23705                           ; BSR set to: 0
 23706  007720  0100               	movlb	0	; () banked
 23707  007722  5198               	movf	___fttol@exp1& (0+255),w,b
 23708  007724  0100               	movlb	0	; () banked
 23709  007726  A4D8               	btfss	status,2,c
 23710  007728  D7F1               	goto	l1793
 23711  00772A                     u9270:
 23712  00772A  FFFF               	dw	65535	; assembler added errata NOP
 23713                           
 23714                           ; BSR set to: 0
 23715                           
 23716                           ; BSR set to: 0
 23717                           
 23718                           ; BSR set to: 0
 23719  00772C  0100               	movlb	0	; () banked
 23720  00772E  5193               	movf	___fttol@sign1& (0+255),w,b
 23721  007730  0100               	movlb	0	; () banked
 23722  007732  B4D8               	btfsc	status,2,c
 23723  007734  D009               	goto	l1795
 23724                           
 23725                           ; BSR set to: 0
 23726  007736  0100               	movlb	0	; () banked
 23727  007738  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
 23728  00773A  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
 23729  00773C  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
 23730  00773E  6D94               	negf	___fttol@lval& (0+255),b
 23731  007740  0E00               	movlw	0
 23732  007742  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
 23733  007744  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
 23734  007746  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
 23735  007748                     l1795:
 23736  007748  FFFF               	dw	65535	; assembler added errata NOP
 23737                           
 23738                           ; BSR set to: 0
 23739                           
 23740                           ; BSR set to: 0
 23741  00774A  C094  F08A         	movff	___fttol@lval,?___fttol
 23742  00774E  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
 23743  007752  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
 23744  007756  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
 23745  00775A                     l9521:
 23746  00775A  FFFF               	dw	65535	; assembler added errata NOP
 23747                           
 23748                           ; BSR set to: 0
 23749                           
 23750                           ; BSR set to: 0
 23751  00775C  0012               	return		;funcret
 23752  00775E  FFFF               	dw	65535	; errata NOP
 23753  007760                     __end_of___fttol:
 23754                           	opt stack 0
 23755                           tosu	equ	0xFFF
 23756                           tosh	equ	0xFFE
 23757                           tosl	equ	0xFFD
 23758                           pclath	equ	0xFFA
 23759                           tblptru	equ	0xFF8
 23760                           tblptrh	equ	0xFF7
 23761                           tblptrl	equ	0xFF6
 23762                           tablat	equ	0xFF5
 23763                           prodh	equ	0xFF4
 23764                           prodl	equ	0xFF3
 23765                           intcon	equ	0xFF2
 23766                           postinc0	equ	0xFEE
 23767                           wreg	equ	0xFE8
 23768                           indf1	equ	0xFE7
 23769                           fsr1h	equ	0xFE2
 23770                           fsr1l	equ	0xFE1
 23771                           indf2	equ	0xFDF
 23772                           postinc2	equ	0xFDE
 23773                           postdec2	equ	0xFDD
 23774                           plusw2	equ	0xFDB
 23775                           fsr2h	equ	0xFDA
 23776                           fsr2l	equ	0xFD9
 23777                           status	equ	0xFD8
 23778                           
 23779 ;; *************** function ___ftsub *****************
 23780 ;; Defined at:
 23781 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
 23782 ;; Parameters:    Size  Location     Type
 23783 ;;  f1              3   12[BANK0 ] float 
 23784 ;;  f2              3   15[BANK0 ] float 
 23785 ;; Auto vars:     Size  Location     Type
 23786 ;;		None
 23787 ;; Return value:  Size  Location     Type
 23788 ;;                  3   12[BANK0 ] float 
 23789 ;; Registers used:
 23790 ;;		wreg, status,2, status,0, cstack
 23791 ;; Tracked objects:
 23792 ;;		On entry : 0/0
 23793 ;;		On exit  : 0/0
 23794 ;;		Unchanged: 0/0
 23795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23796 ;;      Params:         0       6       0       0       0       0       0
 23797 ;;      Locals:         0       0       0       0       0       0       0
 23798 ;;      Temps:          0       0       0       0       0       0       0
 23799 ;;      Totals:         0       6       0       0       0       0       0
 23800 ;;Total ram usage:        6 bytes
 23801 ;; Hardware stack levels used:    1
 23802 ;; Hardware stack levels required when called:    3
 23803 ;; This function calls:
 23804 ;;		___ftadd
 23805 ;; This function is called by:
 23806 ;;		__doprnt
 23807 ;; This function uses a non-reentrant model
 23808 ;;
 23809                           
 23810                           	psect	text133
 23811  005846                     __ptext133:
 23812                           	opt stack 0
 23813  005846                     ___ftsub:
 23814                           	opt stack 0
 23815  005846  FFFF               	dw	65535	; assembler added errata NOP
 23816                           
 23817                           ; BSR set to: 0
 23818                           ;incstack = 0
 23819  005848  0100               	movlb	0	; () banked
 23820  00584A  516F               	movf	___ftsub@f2& (0+255),w,b
 23821  00584C  0100               	movlb	0	; () banked
 23822  00584E  1170               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 23823  005850  0100               	movlb	0	; () banked
 23824  005852  1171               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 23825  005854  B4D8               	btfsc	status,2,c
 23826  005856  D009               	goto	l1780
 23827                           
 23828                           ; BSR set to: 0
 23829  005858  0E00               	movlw	0
 23830  00585A  0100               	movlb	0	; () banked
 23831  00585C  1B6F               	xorwf	___ftsub@f2& (0+255),f,b
 23832  00585E  0E00               	movlw	0
 23833  005860  0100               	movlb	0	; () banked
 23834  005862  1B70               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 23835  005864  0E80               	movlw	128
 23836  005866  0100               	movlb	0	; () banked
 23837  005868  1B71               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 23838  00586A                     l1780:
 23839  00586A  FFFF               	dw	65535	; assembler added errata NOP
 23840                           
 23841                           ; BSR set to: 0
 23842                           
 23843                           ; BSR set to: 0
 23844  00586C  C06C  F060         	movff	___ftsub@f1,___ftadd@f1
 23845  005870  C06D  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
 23846  005874  C06E  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
 23847  005878  C06F  F063         	movff	___ftsub@f2,___ftadd@f2
 23848  00587C  C070  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
 23849  005880  C071  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
 23850  005884  EC45  F016         	call	___ftadd	;wreg free
 23851  005888  C060  F06C         	movff	?___ftadd,?___ftsub
 23852  00588C  C061  F06D         	movff	?___ftadd+1,?___ftsub+1
 23853  005890  C062  F06E         	movff	?___ftadd+2,?___ftsub+2
 23854  005894  0012               	return		;funcret
 23855  005896  FFFF               	dw	65535	; errata NOP
 23856  005898                     __end_of___ftsub:
 23857                           	opt stack 0
 23858                           tosu	equ	0xFFF
 23859                           tosh	equ	0xFFE
 23860                           tosl	equ	0xFFD
 23861                           pclath	equ	0xFFA
 23862                           tblptru	equ	0xFF8
 23863                           tblptrh	equ	0xFF7
 23864                           tblptrl	equ	0xFF6
 23865                           tablat	equ	0xFF5
 23866                           prodh	equ	0xFF4
 23867                           prodl	equ	0xFF3
 23868                           intcon	equ	0xFF2
 23869                           postinc0	equ	0xFEE
 23870                           wreg	equ	0xFE8
 23871                           indf1	equ	0xFE7
 23872                           fsr1h	equ	0xFE2
 23873                           fsr1l	equ	0xFE1
 23874                           indf2	equ	0xFDF
 23875                           postinc2	equ	0xFDE
 23876                           postdec2	equ	0xFDD
 23877                           plusw2	equ	0xFDB
 23878                           fsr2h	equ	0xFDA
 23879                           fsr2l	equ	0xFD9
 23880                           status	equ	0xFD8
 23881                           
 23882 ;; *************** function _get_min *****************
 23883 ;; Defined at:
 23884 ;;		line 95 in file "Get_Voltages.c"
 23885 ;; Parameters:    Size  Location     Type
 23886 ;;		None
 23887 ;; Auto vars:     Size  Location     Type
 23888 ;;		None
 23889 ;; Return value:  Size  Location     Type
 23890 ;;                  3   24[COMRAM] float 
 23891 ;; Registers used:
 23892 ;;		None
 23893 ;; Tracked objects:
 23894 ;;		On entry : 0/0
 23895 ;;		On exit  : 0/0
 23896 ;;		Unchanged: 0/0
 23897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23898 ;;      Params:         3       0       0       0       0       0       0
 23899 ;;      Locals:         0       0       0       0       0       0       0
 23900 ;;      Temps:          0       0       0       0       0       0       0
 23901 ;;      Totals:         3       0       0       0       0       0       0
 23902 ;;Total ram usage:        3 bytes
 23903 ;; Hardware stack levels used:    1
 23904 ;; Hardware stack levels required when called:    1
 23905 ;; This function calls:
 23906 ;;		Nothing
 23907 ;; This function is called by:
 23908 ;;		_Display_Data
 23909 ;; This function uses a non-reentrant model
 23910 ;;
 23911                           
 23912                           	psect	text134
 23913  004CE0                     __ptext134:
 23914                           	opt stack 0
 23915  004CE0                     _get_min:
 23916                           	opt stack 0
 23917  004CE0  FFFF               	dw	65535	; assembler added errata NOP
 23918                           
 23919                           ;Get_Voltages.c: 96: return min;
 23920                           
 23921                           ;incstack = 0
 23922  004CE2  C122  F019         	movff	_min,?_get_min
 23923  004CE6  C123  F01A         	movff	_min+1,?_get_min+1
 23924  004CEA  C124  F01B         	movff	_min+2,?_get_min+2
 23925  004CEE  0012               	return		;funcret
 23926  004CF0  FFFF               	dw	65535	; errata NOP
 23927  004CF2                     __end_of_get_min:
 23928                           	opt stack 0
 23929                           tosu	equ	0xFFF
 23930                           tosh	equ	0xFFE
 23931                           tosl	equ	0xFFD
 23932                           pclath	equ	0xFFA
 23933                           tblptru	equ	0xFF8
 23934                           tblptrh	equ	0xFF7
 23935                           tblptrl	equ	0xFF6
 23936                           tablat	equ	0xFF5
 23937                           prodh	equ	0xFF4
 23938                           prodl	equ	0xFF3
 23939                           intcon	equ	0xFF2
 23940                           postinc0	equ	0xFEE
 23941                           wreg	equ	0xFE8
 23942                           indf1	equ	0xFE7
 23943                           fsr1h	equ	0xFE2
 23944                           fsr1l	equ	0xFE1
 23945                           indf2	equ	0xFDF
 23946                           postinc2	equ	0xFDE
 23947                           postdec2	equ	0xFDD
 23948                           plusw2	equ	0xFDB
 23949                           fsr2h	equ	0xFDA
 23950                           fsr2l	equ	0xFD9
 23951                           status	equ	0xFD8
 23952                           
 23953 ;; *************** function _get_max *****************
 23954 ;; Defined at:
 23955 ;;		line 91 in file "Get_Voltages.c"
 23956 ;; Parameters:    Size  Location     Type
 23957 ;;		None
 23958 ;; Auto vars:     Size  Location     Type
 23959 ;;		None
 23960 ;; Return value:  Size  Location     Type
 23961 ;;                  3   24[COMRAM] float 
 23962 ;; Registers used:
 23963 ;;		None
 23964 ;; Tracked objects:
 23965 ;;		On entry : 0/0
 23966 ;;		On exit  : 0/0
 23967 ;;		Unchanged: 0/0
 23968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23969 ;;      Params:         3       0       0       0       0       0       0
 23970 ;;      Locals:         0       0       0       0       0       0       0
 23971 ;;      Temps:          0       0       0       0       0       0       0
 23972 ;;      Totals:         3       0       0       0       0       0       0
 23973 ;;Total ram usage:        3 bytes
 23974 ;; Hardware stack levels used:    1
 23975 ;; Hardware stack levels required when called:    1
 23976 ;; This function calls:
 23977 ;;		Nothing
 23978 ;; This function is called by:
 23979 ;;		_Display_Data
 23980 ;; This function uses a non-reentrant model
 23981 ;;
 23982                           
 23983                           	psect	text135
 23984  004CCE                     __ptext135:
 23985                           	opt stack 0
 23986  004CCE                     _get_max:
 23987                           	opt stack 0
 23988  004CCE  FFFF               	dw	65535	; assembler added errata NOP
 23989                           
 23990                           ;Get_Voltages.c: 92: return max;
 23991                           
 23992                           ;incstack = 0
 23993  004CD0  C11F  F019         	movff	_max,?_get_max
 23994  004CD4  C120  F01A         	movff	_max+1,?_get_max+1
 23995  004CD8  C121  F01B         	movff	_max+2,?_get_max+2
 23996  004CDC  0012               	return		;funcret
 23997  004CDE  FFFF               	dw	65535	; errata NOP
 23998  004CE0                     __end_of_get_max:
 23999                           	opt stack 0
 24000                           tosu	equ	0xFFF
 24001                           tosh	equ	0xFFE
 24002                           tosl	equ	0xFFD
 24003                           pclath	equ	0xFFA
 24004                           tblptru	equ	0xFF8
 24005                           tblptrh	equ	0xFF7
 24006                           tblptrl	equ	0xFF6
 24007                           tablat	equ	0xFF5
 24008                           prodh	equ	0xFF4
 24009                           prodl	equ	0xFF3
 24010                           intcon	equ	0xFF2
 24011                           postinc0	equ	0xFEE
 24012                           wreg	equ	0xFE8
 24013                           indf1	equ	0xFE7
 24014                           fsr1h	equ	0xFE2
 24015                           fsr1l	equ	0xFE1
 24016                           indf2	equ	0xFDF
 24017                           postinc2	equ	0xFDE
 24018                           postdec2	equ	0xFDD
 24019                           plusw2	equ	0xFDB
 24020                           fsr2h	equ	0xFDA
 24021                           fsr2l	equ	0xFD9
 24022                           status	equ	0xFD8
 24023                           
 24024 ;; *************** function _LCD_WriteStr *****************
 24025 ;; Defined at:
 24026 ;;		line 23 in file "LCD2S.c"
 24027 ;; Parameters:    Size  Location     Type
 24028 ;;  Str             2   26[COMRAM] PTR unsigned char 
 24029 ;;		 -> Display_Data@buffer(20), STR_71(54), 
 24030 ;;  Str_Size        1   28[COMRAM] unsigned char 
 24031 ;; Auto vars:     Size  Location     Type
 24032 ;;  stat            1   30[COMRAM] unsigned char 
 24033 ;;  i               1   29[COMRAM] unsigned char 
 24034 ;; Return value:  Size  Location     Type
 24035 ;;                  1    wreg      void 
 24036 ;; Registers used:
 24037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24038 ;; Tracked objects:
 24039 ;;		On entry : 0/0
 24040 ;;		On exit  : 0/0
 24041 ;;		Unchanged: 0/0
 24042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24043 ;;      Params:         3       0       0       0       0       0       0
 24044 ;;      Locals:         2       0       0       0       0       0       0
 24045 ;;      Temps:          0       0       0       0       0       0       0
 24046 ;;      Totals:         5       0       0       0       0       0       0
 24047 ;;Total ram usage:        5 bytes
 24048 ;; Hardware stack levels used:    1
 24049 ;; Hardware stack levels required when called:    2
 24050 ;; This function calls:
 24051 ;;		_CloseI2C
 24052 ;;		_IdleI2C
 24053 ;;		_OpenI2C
 24054 ;;		_StartI2C
 24055 ;;		_StopI2C
 24056 ;;		_Wait_AckI2C
 24057 ;;		_WriteI2C
 24058 ;; This function is called by:
 24059 ;;		_main
 24060 ;;		_Display_Data
 24061 ;; This function uses a non-reentrant model
 24062 ;;
 24063                           
 24064                           	psect	text136
 24065  005FA4                     __ptext136:
 24066                           	opt stack 0
 24067  005FA4                     _LCD_WriteStr:
 24068                           	opt stack 0
 24069  005FA4  FFFF               	dw	65535	; assembler added errata NOP
 24070                           
 24071                           ;LCD2S.c: 25: char stat=0,i=0;
 24072                           
 24073                           ;incstack = 0
 24074  005FA6  0E00               	movlw	0
 24075  005FA8  6E1F               	movwf	LCD_WriteStr@stat,c
 24076  005FAA  0E00               	movlw	0
 24077  005FAC  6E1E               	movwf	LCD_WriteStr@i,c
 24078                           
 24079                           ;LCD2S.c: 27: OpenI2C(8, 0xC0);
 24080  005FAE  0EC0               	movlw	192
 24081  005FB0  6E19               	movwf	OpenI2C@slew,c
 24082  005FB2  0E08               	movlw	8
 24083  005FB4  EC67  F028         	call	_OpenI2C
 24084                           
 24085                           ;LCD2S.c: 28: SSPADD=0x18;
 24086  005FB8  0E18               	movlw	24
 24087  005FBA  6EC8               	movwf	4040,c	;volatile
 24088                           
 24089                           ;LCD2S.c: 29: IdleI2C();
 24090  005FBC  EC78  F028         	call	_IdleI2C	;wreg free
 24091                           
 24092                           ;LCD2S.c: 32: StartI2C();
 24093  005FC0  ECD1  F027         	call	_StartI2C	;wreg free
 24094                           
 24095                           ;LCD2S.c: 33: stat=WriteI2C(0x50);
 24096  005FC4  0E50               	movlw	80
 24097  005FC6  EC3A  F029         	call	_WriteI2C
 24098  005FCA  6E1F               	movwf	LCD_WriteStr@stat,c
 24099                           
 24100                           ;LCD2S.c: 34: stat+=Wait_AckI2C();
 24101  005FCC  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24102  005FD0  261F               	addwf	LCD_WriteStr@stat,f,c
 24103                           
 24104                           ;LCD2S.c: 37: stat+=WriteI2C(0x80);
 24105  005FD2  0E80               	movlw	128
 24106  005FD4  EC3A  F029         	call	_WriteI2C
 24107  005FD8  261F               	addwf	LCD_WriteStr@stat,f,c
 24108                           
 24109                           ;LCD2S.c: 38: stat+=Wait_AckI2C();
 24110  005FDA  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24111  005FDE  D019               	goto	L27
 24112  005FE0  FFFF               	dw	65535	; assembler added errata NOP
 24113                           
 24114                           ;LCD2S.c: 42: stat+=WriteI2C(*Str++);
 24115  005FE2  C01B  FFF6         	movff	LCD_WriteStr@Str,tblptrl
 24116  005FE6  C01C  FFF7         	movff	LCD_WriteStr@Str+1,tblptrh
 24117  005FEA  6AF8               	clrf	tblptru,c
 24118  005FEC  0E05               	movlw	(high __ramtop+-1)
 24119  005FEE  64F7               	cpfsgt	tblptrh,c
 24120  005FF0  D004               	bra	u11197
 24121  005FF2  0008               	tblrd		*
 24122  005FF4  FFFF               	dw	65535	; errata NOP
 24123  005FF6  50F5               	movf	tablat,w,c
 24124  005FF8  D005               	bra	u11190
 24125  005FFA                     u11197:
 24126  005FFA  CFF6 FFE1          	movff	tblptrl,fsr1l
 24127  005FFE  CFF7 FFE2          	movff	tblptrh,fsr1h
 24128  006002  50E7               	movf	indf1,w,c
 24129  006004                     u11190:
 24130  006004  EC3A  F029         	call	_WriteI2C
 24131  006008  261F               	addwf	LCD_WriteStr@stat,f,c
 24132  00600A  4A1B               	infsnz	LCD_WriteStr@Str,f,c
 24133  00600C  2A1C               	incf	LCD_WriteStr@Str+1,f,c
 24134                           
 24135                           ;LCD2S.c: 43: stat+=Wait_AckI2C();
 24136  00600E  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24137  006012                     L27:
 24138  006012  FFFF               	dw	65535	; assembler added errata NOP
 24139  006014  261F               	addwf	LCD_WriteStr@stat,f,c
 24140  006016  061D               	decf	LCD_WriteStr@Str_Size,f,c
 24141  006018  281D               	incf	LCD_WriteStr@Str_Size,w,c
 24142  00601A  A4D8               	btfss	status,2,c
 24143  00601C  D7E1               	goto	l747
 24144                           
 24145                           ;LCD2S.c: 44: }
 24146                           ;LCD2S.c: 45: StopI2C();
 24147  00601E  ECDE  F027         	call	_StopI2C	;wreg free
 24148                           
 24149                           ;LCD2S.c: 46: CloseI2C();
 24150  006022  EC29  F026         	call	_CloseI2C	;wreg free
 24151  006026  0012               	return		;funcret
 24152  006028  FFFF               	dw	65535	; errata NOP
 24153  00602A                     __end_of_LCD_WriteStr:
 24154                           	opt stack 0
 24155                           tosu	equ	0xFFF
 24156                           tosh	equ	0xFFE
 24157                           tosl	equ	0xFFD
 24158                           pclath	equ	0xFFA
 24159                           tblptru	equ	0xFF8
 24160                           tblptrh	equ	0xFF7
 24161                           tblptrl	equ	0xFF6
 24162                           tablat	equ	0xFF5
 24163                           prodh	equ	0xFF4
 24164                           prodl	equ	0xFF3
 24165                           intcon	equ	0xFF2
 24166                           postinc0	equ	0xFEE
 24167                           wreg	equ	0xFE8
 24168                           indf1	equ	0xFE7
 24169                           fsr1h	equ	0xFE2
 24170                           fsr1l	equ	0xFE1
 24171                           indf2	equ	0xFDF
 24172                           postinc2	equ	0xFDE
 24173                           postdec2	equ	0xFDD
 24174                           plusw2	equ	0xFDB
 24175                           fsr2h	equ	0xFDA
 24176                           fsr2l	equ	0xFD9
 24177                           status	equ	0xFD8
 24178                           
 24179 ;; *************** function _LCD_SetCursor_Position *****************
 24180 ;; Defined at:
 24181 ;;		line 177 in file "LCD2S.c"
 24182 ;; Parameters:    Size  Location     Type
 24183 ;;  row             1    wreg     unsigned char 
 24184 ;;  column          1   26[COMRAM] unsigned char 
 24185 ;; Auto vars:     Size  Location     Type
 24186 ;;  row             1   27[COMRAM] unsigned char 
 24187 ;; Return value:  Size  Location     Type
 24188 ;;                  1    wreg      void 
 24189 ;; Registers used:
 24190 ;;		wreg, status,2, status,0, cstack
 24191 ;; Tracked objects:
 24192 ;;		On entry : 0/0
 24193 ;;		On exit  : 0/0
 24194 ;;		Unchanged: 0/0
 24195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24196 ;;      Params:         1       0       0       0       0       0       0
 24197 ;;      Locals:         1       0       0       0       0       0       0
 24198 ;;      Temps:          0       0       0       0       0       0       0
 24199 ;;      Totals:         2       0       0       0       0       0       0
 24200 ;;Total ram usage:        2 bytes
 24201 ;; Hardware stack levels used:    1
 24202 ;; Hardware stack levels required when called:    2
 24203 ;; This function calls:
 24204 ;;		_CloseI2C
 24205 ;;		_IdleI2C
 24206 ;;		_OpenI2C
 24207 ;;		_StartI2C
 24208 ;;		_StopI2C
 24209 ;;		_Wait_AckI2C
 24210 ;;		_WriteI2C
 24211 ;; This function is called by:
 24212 ;;		_Display_Data
 24213 ;; This function uses a non-reentrant model
 24214 ;;
 24215                           
 24216                           	psect	text137
 24217  005714                     __ptext137:
 24218                           	opt stack 0
 24219  005714                     _LCD_SetCursor_Position:
 24220                           	opt stack 0
 24221  005714  FFFF               	dw	65535	; assembler added errata NOP
 24222                           
 24223                           ;incstack = 0
 24224                           ;LCD_SetCursor_Position@row stored from wreg
 24225  005716  6E1C               	movwf	LCD_SetCursor_Position@row,c
 24226                           
 24227                           ;LCD2S.c: 179: OpenI2C(8, 0xC0);
 24228  005718  0EC0               	movlw	192
 24229  00571A  6E19               	movwf	OpenI2C@slew,c
 24230  00571C  0E08               	movlw	8
 24231  00571E  EC67  F028         	call	_OpenI2C
 24232                           
 24233                           ;LCD2S.c: 180: IdleI2C();
 24234  005722  EC78  F028         	call	_IdleI2C	;wreg free
 24235                           
 24236                           ;LCD2S.c: 181: StartI2C();
 24237  005726  ECD1  F027         	call	_StartI2C	;wreg free
 24238                           
 24239                           ;LCD2S.c: 182: WriteI2C(0x50);
 24240  00572A  0E50               	movlw	80
 24241  00572C  EC3A  F029         	call	_WriteI2C
 24242                           
 24243                           ;LCD2S.c: 183: Wait_AckI2C();
 24244  005730  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24245                           
 24246                           ;LCD2S.c: 184: WriteI2C(0x8a);
 24247  005734  0E8A               	movlw	138
 24248  005736  EC3A  F029         	call	_WriteI2C
 24249                           
 24250                           ;LCD2S.c: 185: Wait_AckI2C();
 24251  00573A  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24252                           
 24253                           ;LCD2S.c: 186: WriteI2C(row);
 24254  00573E  501C               	movf	LCD_SetCursor_Position@row,w,c
 24255  005740  EC3A  F029         	call	_WriteI2C
 24256                           
 24257                           ;LCD2S.c: 187: Wait_AckI2C();
 24258  005744  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24259                           
 24260                           ;LCD2S.c: 188: WriteI2C(column);
 24261  005748  501B               	movf	LCD_SetCursor_Position@column,w,c
 24262  00574A  EC3A  F029         	call	_WriteI2C
 24263                           
 24264                           ;LCD2S.c: 189: Wait_AckI2C();
 24265  00574E  ECBD  F027         	call	_Wait_AckI2C	;wreg free
 24266                           
 24267                           ;LCD2S.c: 190: StopI2C();
 24268  005752  ECDE  F027         	call	_StopI2C	;wreg free
 24269                           
 24270                           ;LCD2S.c: 191: CloseI2C();
 24271  005756  EC29  F026         	call	_CloseI2C	;wreg free
 24272  00575A  0012               	return		;funcret
 24273  00575C  FFFF               	dw	65535	; errata NOP
 24274  00575E                     __end_of_LCD_SetCursor_Position:
 24275                           	opt stack 0
 24276                           tosu	equ	0xFFF
 24277                           tosh	equ	0xFFE
 24278                           tosl	equ	0xFFD
 24279                           pclath	equ	0xFFA
 24280                           tblptru	equ	0xFF8
 24281                           tblptrh	equ	0xFF7
 24282                           tblptrl	equ	0xFF6
 24283                           tablat	equ	0xFF5
 24284                           prodh	equ	0xFF4
 24285                           prodl	equ	0xFF3
 24286                           intcon	equ	0xFF2
 24287                           postinc0	equ	0xFEE
 24288                           wreg	equ	0xFE8
 24289                           indf1	equ	0xFE7
 24290                           fsr1h	equ	0xFE2
 24291                           fsr1l	equ	0xFE1
 24292                           indf2	equ	0xFDF
 24293                           postinc2	equ	0xFDE
 24294                           postdec2	equ	0xFDD
 24295                           plusw2	equ	0xFDB
 24296                           fsr2h	equ	0xFDA
 24297                           fsr2l	equ	0xFD9
 24298                           status	equ	0xFD8
 24299                           
 24300 ;; *************** function _WriteI2C *****************
 24301 ;; Defined at:
 24302 ;;		line 64 in file "i2c_FRM.c"
 24303 ;; Parameters:    Size  Location     Type
 24304 ;;  data_out        1    wreg     unsigned char 
 24305 ;; Auto vars:     Size  Location     Type
 24306 ;;  data_out        1   24[COMRAM] unsigned char 
 24307 ;;  IE_stat         1   25[COMRAM] unsigned char 
 24308 ;; Return value:  Size  Location     Type
 24309 ;;                  1    wreg      unsigned char 
 24310 ;; Registers used:
 24311 ;;		wreg
 24312 ;; Tracked objects:
 24313 ;;		On entry : 0/0
 24314 ;;		On exit  : 0/0
 24315 ;;		Unchanged: 0/0
 24316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24317 ;;      Params:         0       0       0       0       0       0       0
 24318 ;;      Locals:         2       0       0       0       0       0       0
 24319 ;;      Temps:          0       0       0       0       0       0       0
 24320 ;;      Totals:         2       0       0       0       0       0       0
 24321 ;;Total ram usage:        2 bytes
 24322 ;; Hardware stack levels used:    1
 24323 ;; Hardware stack levels required when called:    1
 24324 ;; This function calls:
 24325 ;;		Nothing
 24326 ;; This function is called by:
 24327 ;;		_WriteStr_I2C
 24328 ;;		_ReadStr_I2C
 24329 ;;		_I2C_Send
 24330 ;;		_LCD_WriteStr
 24331 ;;		_LCD_SetBackLight_Brightness
 24332 ;;		_LCD_SetContrast
 24333 ;;		_LCD_SetCursor_Position
 24334 ;; This function uses a non-reentrant model
 24335 ;;
 24336                           
 24337                           	psect	text138
 24338  005274                     __ptext138:
 24339                           	opt stack 0
 24340  005274                     _WriteI2C:
 24341                           	opt stack 0
 24342  005274  FFFF               	dw	65535	; assembler added errata NOP
 24343                           
 24344                           ;incstack = 0
 24345                           ;WriteI2C@data_out stored from wreg
 24346  005276  6E19               	movwf	WriteI2C@data_out,c
 24347                           
 24348                           ;i2c_FRM.c: 65: char IE_stat;
 24349                           ;i2c_FRM.c: 66: SSPBUF = data_out;
 24350  005278  C019  FFC9         	movff	WriteI2C@data_out,4041	;volatile
 24351                           
 24352                           ;i2c_FRM.c: 67: if (SSPCON1bits.WCOL)
 24353  00527C  AEC6               	btfss	4038,7,c	;volatile
 24354  00527E  D002               	goto	l539
 24355                           
 24356                           ;i2c_FRM.c: 68: return ( -1);
 24357  005280  0EFF               	movlw	255
 24358  005282  D00B               	goto	l8679
 24359  005284                     l539:
 24360  005284  FFFF               	dw	65535	; assembler added errata NOP
 24361                           
 24362                           ;i2c_FRM.c: 69: else {
 24363                           ;i2c_FRM.c: 71: IE_stat = INTCON;
 24364  005286  CFF2 F01A          	movff	intcon,WriteI2C@IE_stat	;volatile
 24365                           
 24366                           ;i2c_FRM.c: 72: INTCONbits.GIE = 0;
 24367  00528A  9EF2               	bcf	intcon,7,c	;volatile
 24368                           
 24369                           ;i2c_FRM.c: 73: PIR1bits.SSPIF = 0;
 24370  00528C  969E               	bcf	3998,3,c	;volatile
 24371  00528E  FFFF               	dw	65535	; assembler added errata NOP
 24372  005290  A69E               	btfss	3998,3,c	;volatile
 24373  005292  D7FD               	goto	l543
 24374                           
 24375                           ;i2c_FRM.c: 75: INTCON = IE_stat;
 24376  005294  C01A  FFF2         	movff	WriteI2C@IE_stat,intcon	;volatile
 24377                           
 24378                           ;i2c_FRM.c: 76: return ( 0);
 24379  005298  0E00               	movlw	0
 24380  00529A                     l8679:
 24381  00529A  FFFF               	dw	65535	; assembler added errata NOP
 24382  00529C  0012               	return		;funcret
 24383  00529E  FFFF               	dw	65535	; errata NOP
 24384  0052A0                     __end_of_WriteI2C:
 24385                           	opt stack 0
 24386                           tosu	equ	0xFFF
 24387                           tosh	equ	0xFFE
 24388                           tosl	equ	0xFFD
 24389                           pclath	equ	0xFFA
 24390                           tblptru	equ	0xFF8
 24391                           tblptrh	equ	0xFF7
 24392                           tblptrl	equ	0xFF6
 24393                           tablat	equ	0xFF5
 24394                           prodh	equ	0xFF4
 24395                           prodl	equ	0xFF3
 24396                           intcon	equ	0xFF2
 24397                           postinc0	equ	0xFEE
 24398                           wreg	equ	0xFE8
 24399                           indf1	equ	0xFE7
 24400                           fsr1h	equ	0xFE2
 24401                           fsr1l	equ	0xFE1
 24402                           indf2	equ	0xFDF
 24403                           postinc2	equ	0xFDE
 24404                           postdec2	equ	0xFDD
 24405                           plusw2	equ	0xFDB
 24406                           fsr2h	equ	0xFDA
 24407                           fsr2l	equ	0xFD9
 24408                           status	equ	0xFD8
 24409                           
 24410 ;; *************** function _Wait_AckI2C *****************
 24411 ;; Defined at:
 24412 ;;		line 87 in file "i2c_FRM.c"
 24413 ;; Parameters:    Size  Location     Type
 24414 ;;		None
 24415 ;; Auto vars:     Size  Location     Type
 24416 ;;		None
 24417 ;; Return value:  Size  Location     Type
 24418 ;;                  1    wreg      unsigned char 
 24419 ;; Registers used:
 24420 ;;		wreg
 24421 ;; Tracked objects:
 24422 ;;		On entry : 0/0
 24423 ;;		On exit  : 0/0
 24424 ;;		Unchanged: 0/0
 24425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24426 ;;      Params:         0       0       0       0       0       0       0
 24427 ;;      Locals:         0       0       0       0       0       0       0
 24428 ;;      Temps:          0       0       0       0       0       0       0
 24429 ;;      Totals:         0       0       0       0       0       0       0
 24430 ;;Total ram usage:        0 bytes
 24431 ;; Hardware stack levels used:    1
 24432 ;; Hardware stack levels required when called:    1
 24433 ;; This function calls:
 24434 ;;		Nothing
 24435 ;; This function is called by:
 24436 ;;		_WriteStr_I2C
 24437 ;;		_ReadStr_I2C
 24438 ;;		_I2C_Send
 24439 ;;		_LCD_WriteStr
 24440 ;;		_LCD_SetBackLight_Brightness
 24441 ;;		_LCD_SetContrast
 24442 ;;		_LCD_SetCursor_Position
 24443 ;; This function uses a non-reentrant model
 24444 ;;
 24445                           
 24446                           	psect	text139
 24447  004F7A                     __ptext139:
 24448                           	opt stack 0
 24449  004F7A                     _Wait_AckI2C:
 24450                           	opt stack 0
 24451  004F7A  FFFF               	dw	65535	; assembler added errata NOP
 24452                           
 24453                           ;i2c_FRM.c: 89: if(SSPCON2bits.ACKSTAT)
 24454                           
 24455                           ;incstack = 0
 24456  004F7C  ACC5               	btfss	4037,6,c	;volatile
 24457  004F7E  D002               	goto	l547
 24458                           
 24459                           ;i2c_FRM.c: 90: return(-1);
 24460  004F80  0EFF               	movlw	255
 24461  004F82  D002               	goto	l8691
 24462  004F84                     l547:
 24463  004F84  FFFF               	dw	65535	; assembler added errata NOP
 24464                           
 24465                           ;i2c_FRM.c: 91: else
 24466                           ;i2c_FRM.c: 92: return(0);
 24467  004F86  0E00               	movlw	0
 24468  004F88                     l8691:
 24469  004F88  FFFF               	dw	65535	; assembler added errata NOP
 24470  004F8A  0012               	return		;funcret
 24471  004F8C  FFFF               	dw	65535	; errata NOP
 24472  004F8E                     __end_of_Wait_AckI2C:
 24473                           	opt stack 0
 24474                           tosu	equ	0xFFF
 24475                           tosh	equ	0xFFE
 24476                           tosl	equ	0xFFD
 24477                           pclath	equ	0xFFA
 24478                           tblptru	equ	0xFF8
 24479                           tblptrh	equ	0xFF7
 24480                           tblptrl	equ	0xFF6
 24481                           tablat	equ	0xFF5
 24482                           prodh	equ	0xFF4
 24483                           prodl	equ	0xFF3
 24484                           intcon	equ	0xFF2
 24485                           postinc0	equ	0xFEE
 24486                           wreg	equ	0xFE8
 24487                           indf1	equ	0xFE7
 24488                           fsr1h	equ	0xFE2
 24489                           fsr1l	equ	0xFE1
 24490                           indf2	equ	0xFDF
 24491                           postinc2	equ	0xFDE
 24492                           postdec2	equ	0xFDD
 24493                           plusw2	equ	0xFDB
 24494                           fsr2h	equ	0xFDA
 24495                           fsr2l	equ	0xFD9
 24496                           status	equ	0xFD8
 24497                           
 24498 ;; *************** function _StopI2C *****************
 24499 ;; Defined at:
 24500 ;;		line 159 in file "i2c_FRM.c"
 24501 ;; Parameters:    Size  Location     Type
 24502 ;;		None
 24503 ;; Auto vars:     Size  Location     Type
 24504 ;;  IE_stat         1   24[COMRAM] unsigned char 
 24505 ;; Return value:  Size  Location     Type
 24506 ;;                  1    wreg      void 
 24507 ;; Registers used:
 24508 ;;		None
 24509 ;; Tracked objects:
 24510 ;;		On entry : 0/0
 24511 ;;		On exit  : 0/0
 24512 ;;		Unchanged: 0/0
 24513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24514 ;;      Params:         0       0       0       0       0       0       0
 24515 ;;      Locals:         1       0       0       0       0       0       0
 24516 ;;      Temps:          0       0       0       0       0       0       0
 24517 ;;      Totals:         1       0       0       0       0       0       0
 24518 ;;Total ram usage:        1 bytes
 24519 ;; Hardware stack levels used:    1
 24520 ;; Hardware stack levels required when called:    1
 24521 ;; This function calls:
 24522 ;;		Nothing
 24523 ;; This function is called by:
 24524 ;;		_WriteStr_I2C
 24525 ;;		_ReadStr_I2C
 24526 ;;		_I2C_Send
 24527 ;;		_LCD_WriteStr
 24528 ;;		_LCD_SetBackLight_Brightness
 24529 ;;		_LCD_SetContrast
 24530 ;;		_LCD_SetCursor_Position
 24531 ;; This function uses a non-reentrant model
 24532 ;;
 24533                           
 24534                           	psect	text140
 24535  004FBC                     __ptext140:
 24536                           	opt stack 0
 24537  004FBC                     _StopI2C:
 24538                           	opt stack 0
 24539  004FBC  FFFF               	dw	65535	; assembler added errata NOP
 24540                           
 24541                           ;i2c_FRM.c: 160: char IE_stat;
 24542                           ;i2c_FRM.c: 162: IE_stat = INTCON;
 24543                           
 24544                           ;incstack = 0
 24545  004FBE  CFF2 F019          	movff	intcon,StopI2C@IE_stat	;volatile
 24546                           
 24547                           ;i2c_FRM.c: 163: INTCONbits.GIE = 0;
 24548  004FC2  9EF2               	bcf	intcon,7,c	;volatile
 24549                           
 24550                           ;i2c_FRM.c: 164: SSPCON2bits.PEN = 1;
 24551  004FC4  84C5               	bsf	4037,2,c	;volatile
 24552                           
 24553                           ;i2c_FRM.c: 165: PIR1bits.SSPIF = 0;
 24554  004FC6  969E               	bcf	3998,3,c	;volatile
 24555  004FC8  FFFF               	dw	65535	; assembler added errata NOP
 24556  004FCA  A69E               	btfss	3998,3,c	;volatile
 24557  004FCC  D7FD               	goto	l571
 24558                           
 24559                           ;i2c_FRM.c: 167: INTCON = IE_stat;
 24560  004FCE  C019  FFF2         	movff	StopI2C@IE_stat,intcon	;volatile
 24561  004FD2  0012               	return		;funcret
 24562  004FD4  FFFF               	dw	65535	; errata NOP
 24563  004FD6                     __end_of_StopI2C:
 24564                           	opt stack 0
 24565                           tosu	equ	0xFFF
 24566                           tosh	equ	0xFFE
 24567                           tosl	equ	0xFFD
 24568                           pclath	equ	0xFFA
 24569                           tblptru	equ	0xFF8
 24570                           tblptrh	equ	0xFF7
 24571                           tblptrl	equ	0xFF6
 24572                           tablat	equ	0xFF5
 24573                           prodh	equ	0xFF4
 24574                           prodl	equ	0xFF3
 24575                           intcon	equ	0xFF2
 24576                           postinc0	equ	0xFEE
 24577                           wreg	equ	0xFE8
 24578                           indf1	equ	0xFE7
 24579                           fsr1h	equ	0xFE2
 24580                           fsr1l	equ	0xFE1
 24581                           indf2	equ	0xFDF
 24582                           postinc2	equ	0xFDE
 24583                           postdec2	equ	0xFDD
 24584                           plusw2	equ	0xFDB
 24585                           fsr2h	equ	0xFDA
 24586                           fsr2l	equ	0xFD9
 24587                           status	equ	0xFD8
 24588                           
 24589 ;; *************** function _StartI2C *****************
 24590 ;; Defined at:
 24591 ;;		line 47 in file "i2c_FRM.c"
 24592 ;; Parameters:    Size  Location     Type
 24593 ;;		None
 24594 ;; Auto vars:     Size  Location     Type
 24595 ;;  IE_stat         1   24[COMRAM] unsigned char 
 24596 ;; Return value:  Size  Location     Type
 24597 ;;                  1    wreg      void 
 24598 ;; Registers used:
 24599 ;;		None
 24600 ;; Tracked objects:
 24601 ;;		On entry : 0/0
 24602 ;;		On exit  : 0/0
 24603 ;;		Unchanged: 0/0
 24604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24605 ;;      Params:         0       0       0       0       0       0       0
 24606 ;;      Locals:         1       0       0       0       0       0       0
 24607 ;;      Temps:          0       0       0       0       0       0       0
 24608 ;;      Totals:         1       0       0       0       0       0       0
 24609 ;;Total ram usage:        1 bytes
 24610 ;; Hardware stack levels used:    1
 24611 ;; Hardware stack levels required when called:    1
 24612 ;; This function calls:
 24613 ;;		Nothing
 24614 ;; This function is called by:
 24615 ;;		_WriteStr_I2C
 24616 ;;		_ReadStr_I2C
 24617 ;;		_I2C_Send
 24618 ;;		_LCD_WriteStr
 24619 ;;		_LCD_SetBackLight_Brightness
 24620 ;;		_LCD_SetContrast
 24621 ;;		_LCD_SetCursor_Position
 24622 ;; This function uses a non-reentrant model
 24623 ;;
 24624                           
 24625                           	psect	text141
 24626  004FA2                     __ptext141:
 24627                           	opt stack 0
 24628  004FA2                     _StartI2C:
 24629                           	opt stack 0
 24630  004FA2  FFFF               	dw	65535	; assembler added errata NOP
 24631                           
 24632                           ;i2c_FRM.c: 48: char IE_stat;
 24633                           ;i2c_FRM.c: 50: IE_stat = INTCON;
 24634                           
 24635                           ;incstack = 0
 24636  004FA4  CFF2 F019          	movff	intcon,StartI2C@IE_stat	;volatile
 24637                           
 24638                           ;i2c_FRM.c: 51: INTCONbits.GIE = 0;
 24639  004FA8  9EF2               	bcf	intcon,7,c	;volatile
 24640                           
 24641                           ;i2c_FRM.c: 52: SSPCON2bits.SEN = 1;
 24642  004FAA  80C5               	bsf	4037,0,c	;volatile
 24643                           
 24644                           ;i2c_FRM.c: 53: PIR1bits.SSPIF = 0;
 24645  004FAC  969E               	bcf	3998,3,c	;volatile
 24646  004FAE  FFFF               	dw	65535	; assembler added errata NOP
 24647  004FB0  A69E               	btfss	3998,3,c	;volatile
 24648  004FB2  D7FD               	goto	l534
 24649                           
 24650                           ;i2c_FRM.c: 55: INTCON = IE_stat;
 24651  004FB4  C019  FFF2         	movff	StartI2C@IE_stat,intcon	;volatile
 24652  004FB8  0012               	return		;funcret
 24653  004FBA  FFFF               	dw	65535	; errata NOP
 24654  004FBC                     __end_of_StartI2C:
 24655                           	opt stack 0
 24656                           tosu	equ	0xFFF
 24657                           tosh	equ	0xFFE
 24658                           tosl	equ	0xFFD
 24659                           pclath	equ	0xFFA
 24660                           tblptru	equ	0xFF8
 24661                           tblptrh	equ	0xFF7
 24662                           tblptrl	equ	0xFF6
 24663                           tablat	equ	0xFF5
 24664                           prodh	equ	0xFF4
 24665                           prodl	equ	0xFF3
 24666                           intcon	equ	0xFF2
 24667                           postinc0	equ	0xFEE
 24668                           wreg	equ	0xFE8
 24669                           indf1	equ	0xFE7
 24670                           fsr1h	equ	0xFE2
 24671                           fsr1l	equ	0xFE1
 24672                           indf2	equ	0xFDF
 24673                           postinc2	equ	0xFDE
 24674                           postdec2	equ	0xFDD
 24675                           plusw2	equ	0xFDB
 24676                           fsr2h	equ	0xFDA
 24677                           fsr2l	equ	0xFD9
 24678                           status	equ	0xFD8
 24679                           
 24680 ;; *************** function _OpenI2C *****************
 24681 ;; Defined at:
 24682 ;;		line 12 in file "i2c_FRM.c"
 24683 ;; Parameters:    Size  Location     Type
 24684 ;;  sync_mode       1    wreg     unsigned char 
 24685 ;;  slew            1   24[COMRAM] unsigned char 
 24686 ;; Auto vars:     Size  Location     Type
 24687 ;;  sync_mode       1   25[COMRAM] unsigned char 
 24688 ;; Return value:  Size  Location     Type
 24689 ;;                  1    wreg      void 
 24690 ;; Registers used:
 24691 ;;		wreg, status,2, status,0
 24692 ;; Tracked objects:
 24693 ;;		On entry : 0/0
 24694 ;;		On exit  : 0/0
 24695 ;;		Unchanged: 0/0
 24696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24697 ;;      Params:         1       0       0       0       0       0       0
 24698 ;;      Locals:         1       0       0       0       0       0       0
 24699 ;;      Temps:          0       0       0       0       0       0       0
 24700 ;;      Totals:         2       0       0       0       0       0       0
 24701 ;;Total ram usage:        2 bytes
 24702 ;; Hardware stack levels used:    1
 24703 ;; Hardware stack levels required when called:    1
 24704 ;; This function calls:
 24705 ;;		Nothing
 24706 ;; This function is called by:
 24707 ;;		_WriteStr_I2C
 24708 ;;		_ReadStr_I2C
 24709 ;;		_I2C_Send
 24710 ;;		_LCD_WriteStr
 24711 ;;		_LCD_SetBackLight_Brightness
 24712 ;;		_LCD_SetContrast
 24713 ;;		_LCD_SetCursor_Position
 24714 ;;		_main
 24715 ;; This function uses a non-reentrant model
 24716 ;;
 24717                           
 24718                           	psect	text142
 24719  0050CE                     __ptext142:
 24720                           	opt stack 0
 24721  0050CE                     _OpenI2C:
 24722                           	opt stack 0
 24723  0050CE  FFFF               	dw	65535	; assembler added errata NOP
 24724                           
 24725                           ;incstack = 0
 24726                           ;OpenI2C@sync_mode stored from wreg
 24727  0050D0  6E1A               	movwf	OpenI2C@sync_mode,c
 24728                           
 24729                           ;i2c_FRM.c: 14: SSPSTAT &= 0x3F;
 24730  0050D2  0E3F               	movlw	63
 24731  0050D4  16C7               	andwf	4039,f,c	;volatile
 24732                           
 24733                           ;i2c_FRM.c: 15: SSPCON1 = 0x00;
 24734  0050D6  0E00               	movlw	0
 24735  0050D8  6EC6               	movwf	4038,c	;volatile
 24736                           
 24737                           ;i2c_FRM.c: 16: SSPCON2 = 0x00;
 24738  0050DA  0E00               	movlw	0
 24739  0050DC  6EC5               	movwf	4037,c	;volatile
 24740                           
 24741                           ;i2c_FRM.c: 17: SSPCON1 |= sync_mode;
 24742  0050DE  501A               	movf	OpenI2C@sync_mode,w,c
 24743  0050E0  12C6               	iorwf	4038,f,c	;volatile
 24744                           
 24745                           ;i2c_FRM.c: 18: SSPSTAT |= slew;
 24746  0050E2  5019               	movf	OpenI2C@slew,w,c
 24747  0050E4  12C7               	iorwf	4039,f,c	;volatile
 24748                           
 24749                           ;i2c_FRM.c: 20: DDRCbits.RC3 = 1;
 24750  0050E6  8694               	bsf	3988,3,c	;volatile
 24751                           
 24752                           ;i2c_FRM.c: 21: DDRCbits.RC4 = 1;
 24753  0050E8  8894               	bsf	3988,4,c	;volatile
 24754                           
 24755                           ;i2c_FRM.c: 23: SSPCON1 |= 0x20;
 24756  0050EA  8AC6               	bsf	4038,5,c	;volatile
 24757  0050EC  0012               	return		;funcret
 24758  0050EE  FFFF               	dw	65535	; errata NOP
 24759  0050F0                     __end_of_OpenI2C:
 24760                           	opt stack 0
 24761                           tosu	equ	0xFFF
 24762                           tosh	equ	0xFFE
 24763                           tosl	equ	0xFFD
 24764                           pclath	equ	0xFFA
 24765                           tblptru	equ	0xFF8
 24766                           tblptrh	equ	0xFF7
 24767                           tblptrl	equ	0xFF6
 24768                           tablat	equ	0xFF5
 24769                           prodh	equ	0xFF4
 24770                           prodl	equ	0xFF3
 24771                           intcon	equ	0xFF2
 24772                           postinc0	equ	0xFEE
 24773                           wreg	equ	0xFE8
 24774                           indf1	equ	0xFE7
 24775                           fsr1h	equ	0xFE2
 24776                           fsr1l	equ	0xFE1
 24777                           indf2	equ	0xFDF
 24778                           postinc2	equ	0xFDE
 24779                           postdec2	equ	0xFDD
 24780                           plusw2	equ	0xFDB
 24781                           fsr2h	equ	0xFDA
 24782                           fsr2l	equ	0xFD9
 24783                           status	equ	0xFD8
 24784                           
 24785 ;; *************** function _IdleI2C *****************
 24786 ;; Defined at:
 24787 ;;		line 33 in file "i2c_FRM.c"
 24788 ;; Parameters:    Size  Location     Type
 24789 ;;		None
 24790 ;; Auto vars:     Size  Location     Type
 24791 ;;		None
 24792 ;; Return value:  Size  Location     Type
 24793 ;;                  1    wreg      void 
 24794 ;; Registers used:
 24795 ;;		wreg, status,2, status,0
 24796 ;; Tracked objects:
 24797 ;;		On entry : 0/0
 24798 ;;		On exit  : 0/0
 24799 ;;		Unchanged: 0/0
 24800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24801 ;;      Params:         0       0       0       0       0       0       0
 24802 ;;      Locals:         0       0       0       0       0       0       0
 24803 ;;      Temps:          1       0       0       0       0       0       0
 24804 ;;      Totals:         1       0       0       0       0       0       0
 24805 ;;Total ram usage:        1 bytes
 24806 ;; Hardware stack levels used:    1
 24807 ;; Hardware stack levels required when called:    1
 24808 ;; This function calls:
 24809 ;;		Nothing
 24810 ;; This function is called by:
 24811 ;;		_WriteStr_I2C
 24812 ;;		_ReadStr_I2C
 24813 ;;		_I2C_Send
 24814 ;;		_LCD_WriteStr
 24815 ;;		_LCD_SetBackLight_Brightness
 24816 ;;		_LCD_SetContrast
 24817 ;;		_LCD_SetCursor_Position
 24818 ;; This function uses a non-reentrant model
 24819 ;;
 24820                           
 24821                           	psect	text143
 24822  0050F0                     __ptext143:
 24823                           	opt stack 0
 24824  0050F0                     _IdleI2C:
 24825                           	opt stack 0
 24826  0050F0  FFFF               	dw	65535	; assembler added errata NOP
 24827                           
 24828                           ;i2c_FRM.c: 36: continue;
 24829                           
 24830                           ;i2c_FRM.c: 35: while ( ( SSPCON2 & 0x1F ) | ( SSPSTATbits.R_W ) )
 24831                           
 24832                           ;incstack = 0
 24833  0050F2  A4C7               	btfss	4039,2,c	;volatile
 24834  0050F4  D003               	goto	u8000
 24835  0050F6  6A19               	clrf	??_IdleI2C& (0+255),c
 24836  0050F8  2A19               	incf	??_IdleI2C& (0+255),f,c
 24837  0050FA  D002               	goto	u8008
 24838  0050FC                     u8000:
 24839  0050FC  FFFF               	dw	65535	; assembler added errata NOP
 24840  0050FE  6A19               	clrf	??_IdleI2C& (0+255),c
 24841  005100                     u8008:
 24842  005100  FFFF               	dw	65535	; assembler added errata NOP
 24843  005102  50C5               	movf	4037,w,c	;volatile
 24844  005104  0B1F               	andlw	31
 24845  005106  1019               	iorwf	??_IdleI2C,w,c
 24846  005108  0900               	iorlw	0
 24847  00510A  B4D8               	btfsc	status,2,c
 24848  00510C  0012               	return		;funcret
 24849  00510E  FFFF               	dw	65535	; assembler added errata NOP
 24850  005110  D7EF               	goto	_IdleI2C
 24851  005112  FFFF               	dw	65535	; errata NOP
 24852  005114                     __end_of_IdleI2C:
 24853                           	opt stack 0
 24854                           tosu	equ	0xFFF
 24855                           tosh	equ	0xFFE
 24856                           tosl	equ	0xFFD
 24857                           pclath	equ	0xFFA
 24858                           tblptru	equ	0xFF8
 24859                           tblptrh	equ	0xFF7
 24860                           tblptrl	equ	0xFF6
 24861                           tablat	equ	0xFF5
 24862                           prodh	equ	0xFF4
 24863                           prodl	equ	0xFF3
 24864                           intcon	equ	0xFF2
 24865                           postinc0	equ	0xFEE
 24866                           wreg	equ	0xFE8
 24867                           indf1	equ	0xFE7
 24868                           fsr1h	equ	0xFE2
 24869                           fsr1l	equ	0xFE1
 24870                           indf2	equ	0xFDF
 24871                           postinc2	equ	0xFDE
 24872                           postdec2	equ	0xFDD
 24873                           plusw2	equ	0xFDB
 24874                           fsr2h	equ	0xFDA
 24875                           fsr2l	equ	0xFD9
 24876                           status	equ	0xFD8
 24877                           
 24878 ;; *************** function _CloseI2C *****************
 24879 ;; Defined at:
 24880 ;;		line 179 in file "i2c_FRM.c"
 24881 ;; Parameters:    Size  Location     Type
 24882 ;;		None
 24883 ;; Auto vars:     Size  Location     Type
 24884 ;;		None
 24885 ;; Return value:  Size  Location     Type
 24886 ;;                  1    wreg      void 
 24887 ;; Registers used:
 24888 ;;		status,2, status,0
 24889 ;; Tracked objects:
 24890 ;;		On entry : 0/0
 24891 ;;		On exit  : 0/0
 24892 ;;		Unchanged: 0/0
 24893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24894 ;;      Params:         0       0       0       0       0       0       0
 24895 ;;      Locals:         0       0       0       0       0       0       0
 24896 ;;      Temps:          0       0       0       0       0       0       0
 24897 ;;      Totals:         0       0       0       0       0       0       0
 24898 ;;Total ram usage:        0 bytes
 24899 ;; Hardware stack levels used:    1
 24900 ;; Hardware stack levels required when called:    1
 24901 ;; This function calls:
 24902 ;;		Nothing
 24903 ;; This function is called by:
 24904 ;;		_WriteStr_I2C
 24905 ;;		_ReadStr_I2C
 24906 ;;		_I2C_Send
 24907 ;;		_LCD_WriteStr
 24908 ;;		_LCD_SetBackLight_Brightness
 24909 ;;		_LCD_SetContrast
 24910 ;;		_LCD_SetCursor_Position
 24911 ;; This function uses a non-reentrant model
 24912 ;;
 24913                           
 24914                           	psect	text144
 24915  004C52                     __ptext144:
 24916                           	opt stack 0
 24917  004C52                     _CloseI2C:
 24918                           	opt stack 0
 24919  004C52  FFFF               	dw	65535	; assembler added errata NOP
 24920                           
 24921                           ;i2c_FRM.c: 181: SSPCON1 &= 0xDF;
 24922                           
 24923                           ;incstack = 0
 24924  004C54  9AC6               	bcf	4038,5,c	;volatile
 24925  004C56  0012               	return		;funcret
 24926  004C58  FFFF               	dw	65535	; errata NOP
 24927  004C5A                     __end_of_CloseI2C:
 24928                           	opt stack 0
 24929                           tosu	equ	0xFFF
 24930                           tosh	equ	0xFFE
 24931                           tosl	equ	0xFFD
 24932                           pclath	equ	0xFFA
 24933                           tblptru	equ	0xFF8
 24934                           tblptrh	equ	0xFF7
 24935                           tblptrl	equ	0xFF6
 24936                           tablat	equ	0xFF5
 24937                           prodh	equ	0xFF4
 24938                           prodl	equ	0xFF3
 24939                           intcon	equ	0xFF2
 24940                           postinc0	equ	0xFEE
 24941                           wreg	equ	0xFE8
 24942                           indf1	equ	0xFE7
 24943                           fsr1h	equ	0xFE2
 24944                           fsr1l	equ	0xFE1
 24945                           indf2	equ	0xFDF
 24946                           postinc2	equ	0xFDE
 24947                           postdec2	equ	0xFDD
 24948                           plusw2	equ	0xFDB
 24949                           fsr2h	equ	0xFDA
 24950                           fsr2l	equ	0xFD9
 24951                           status	equ	0xFD8
 24952                           
 24953 ;; *************** function _Get_Voltage_Vin *****************
 24954 ;; Defined at:
 24955 ;;		line 139 in file "Get_Voltages.c"
 24956 ;; Parameters:    Size  Location     Type
 24957 ;;		None
 24958 ;; Auto vars:     Size  Location     Type
 24959 ;;		None
 24960 ;; Return value:  Size  Location     Type
 24961 ;;                  3   24[COMRAM] float 
 24962 ;; Registers used:
 24963 ;;		None
 24964 ;; Tracked objects:
 24965 ;;		On entry : 0/0
 24966 ;;		On exit  : 0/0
 24967 ;;		Unchanged: 0/0
 24968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24969 ;;      Params:         3       0       0       0       0       0       0
 24970 ;;      Locals:         0       0       0       0       0       0       0
 24971 ;;      Temps:          0       0       0       0       0       0       0
 24972 ;;      Totals:         3       0       0       0       0       0       0
 24973 ;;Total ram usage:        3 bytes
 24974 ;; Hardware stack levels used:    1
 24975 ;; Hardware stack levels required when called:    1
 24976 ;; This function calls:
 24977 ;;		Nothing
 24978 ;; This function is called by:
 24979 ;;		_reset_var
 24980 ;;		_get_list
 24981 ;;		_main
 24982 ;;		_Display_Data
 24983 ;;		_reset_max_min
 24984 ;; This function uses a non-reentrant model
 24985 ;;
 24986                           
 24987                           	psect	text145
 24988  004CBC                     __ptext145:
 24989                           	opt stack 0
 24990  004CBC                     _Get_Voltage_Vin:
 24991                           	opt stack 0
 24992  004CBC  FFFF               	dw	65535	; assembler added errata NOP
 24993                           
 24994                           ;Get_Voltages.c: 141: return Vin;
 24995                           
 24996                           ;incstack = 0
 24997  004CBE  C032  F019         	movff	_Vin,?_Get_Voltage_Vin
 24998  004CC2  C033  F01A         	movff	_Vin+1,?_Get_Voltage_Vin+1
 24999  004CC6  C034  F01B         	movff	_Vin+2,?_Get_Voltage_Vin+2
 25000  004CCA  0012               	return		;funcret
 25001  004CCC  FFFF               	dw	65535	; errata NOP
 25002  004CCE                     __end_of_Get_Voltage_Vin:
 25003                           	opt stack 0
 25004                           tosu	equ	0xFFF
 25005                           tosh	equ	0xFFE
 25006                           tosl	equ	0xFFD
 25007                           pclath	equ	0xFFA
 25008                           tblptru	equ	0xFF8
 25009                           tblptrh	equ	0xFF7
 25010                           tblptrl	equ	0xFF6
 25011                           tablat	equ	0xFF5
 25012                           prodh	equ	0xFF4
 25013                           prodl	equ	0xFF3
 25014                           intcon	equ	0xFF2
 25015                           postinc0	equ	0xFEE
 25016                           wreg	equ	0xFE8
 25017                           indf1	equ	0xFE7
 25018                           fsr1h	equ	0xFE2
 25019                           fsr1l	equ	0xFE1
 25020                           indf2	equ	0xFDF
 25021                           postinc2	equ	0xFDE
 25022                           postdec2	equ	0xFDD
 25023                           plusw2	equ	0xFDB
 25024                           fsr2h	equ	0xFDA
 25025                           fsr2l	equ	0xFD9
 25026                           status	equ	0xFD8
 25027                           
 25028 ;; *************** function _Control_Loop *****************
 25029 ;; Defined at:
 25030 ;;		line 288 in file "main.c"
 25031 ;; Parameters:    Size  Location     Type
 25032 ;;		None
 25033 ;; Auto vars:     Size  Location     Type
 25034 ;;  Control_Out     3   57[BANK0 ] float 
 25035 ;;  voltage         3   54[BANK0 ] float 
 25036 ;; Return value:  Size  Location     Type
 25037 ;;                  1    wreg      void 
 25038 ;; Registers used:
 25039 ;;		wreg, status,2, status,0, cstack
 25040 ;; Tracked objects:
 25041 ;;		On entry : 0/0
 25042 ;;		On exit  : 0/0
 25043 ;;		Unchanged: 0/0
 25044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25045 ;;      Params:         0       0       0       0       0       0       0
 25046 ;;      Locals:         0       6       0       0       0       0       0
 25047 ;;      Temps:          0       0       0       0       0       0       0
 25048 ;;      Totals:         0       6       0       0       0       0       0
 25049 ;;Total ram usage:        6 bytes
 25050 ;; Hardware stack levels used:    1
 25051 ;; Hardware stack levels required when called:    4
 25052 ;; This function calls:
 25053 ;;		_Get_Control_Voltage
 25054 ;;		_PID_Controller
 25055 ;;		___ftge
 25056 ;;		___ftneg
 25057 ;;		_get_PID_deadband
 25058 ;; This function is called by:
 25059 ;;		_main
 25060 ;; This function uses a non-reentrant model
 25061 ;;
 25062                           
 25063                           	psect	text146
 25064  006966                     __ptext146:
 25065                           	opt stack 0
 25066  006966                     _Control_Loop:
 25067                           	opt stack 0
 25068  006966  FFFF               	dw	65535	; assembler added errata NOP
 25069                           
 25070                           ;main.c: 290: float voltage, Control_Out;
 25071                           ;main.c: 292: voltage = Get_Control_Voltage();
 25072                           
 25073                           ;incstack = 0
 25074  006968  EC55  F039         	call	_Get_Control_Voltage	;wreg free
 25075  00696C  C08A  F096         	movff	?_Get_Control_Voltage,Control_Loop@voltage
 25076  006970  C08B  F097         	movff	?_Get_Control_Voltage+1,Control_Loop@voltage+1
 25077  006974  C08C  F098         	movff	?_Get_Control_Voltage+2,Control_Loop@voltage+2
 25078                           
 25079                           ;main.c: 293: Control_Out = PID_Controller(voltage);
 25080  006978  C096  F08A         	movff	Control_Loop@voltage,PID_Controller@val
 25081  00697C  C097  F08B         	movff	Control_Loop@voltage+1,PID_Controller@val+1
 25082  006980  C098  F08C         	movff	Control_Loop@voltage+2,PID_Controller@val+2
 25083  006984  ECD2  F01E         	call	_PID_Controller	;wreg free
 25084  006988  C08A  F099         	movff	?_PID_Controller,Control_Loop@Control_Out
 25085  00698C  C08B  F09A         	movff	?_PID_Controller+1,Control_Loop@Control_Out+1
 25086  006990  C08C  F09B         	movff	?_PID_Controller+2,Control_Loop@Control_Out+2
 25087                           
 25088                           ;main.c: 295: if (voltage != 0.0) {
 25089  006994  0100               	movlb	0	; () banked
 25090  006996  5196               	movf	Control_Loop@voltage& (0+255),w,b
 25091  006998  0100               	movlb	0	; () banked
 25092  00699A  1197               	iorwf	(Control_Loop@voltage+1)& (0+255),w,b
 25093  00699C  0100               	movlb	0	; () banked
 25094  00699E  1198               	iorwf	(Control_Loop@voltage+2)& (0+255),w,b
 25095  0069A0  B4D8               	btfsc	status,2,c
 25096  0069A2  D03D               	goto	l1029
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;main.c: 296: if (Control_Out > get_PID_deadband()) {
 25100  0069A4  EC55  F026         	call	_get_PID_deadband	;wreg free
 25101  0069A8  C019  F01F         	movff	?_get_PID_deadband,___ftge@ff1
 25102  0069AC  C01A  F020         	movff	?_get_PID_deadband+1,___ftge@ff1+1
 25103  0069B0  C01B  F021         	movff	?_get_PID_deadband+2,___ftge@ff1+2
 25104  0069B4  C099  F022         	movff	Control_Loop@Control_Out,___ftge@ff2
 25105  0069B8  C09A  F023         	movff	Control_Loop@Control_Out+1,___ftge@ff2+1
 25106  0069BC  C09B  F024         	movff	Control_Loop@Control_Out+2,___ftge@ff2+2
 25107  0069C0  EC7A  F031         	call	___ftge	;wreg free
 25108  0069C4  B0D8               	btfsc	status,0,c
 25109  0069C6  D007               	goto	l1027
 25110                           
 25111                           ;main.c: 297: Outputs.led14 = 1;
 25112  0069C8  0100               	movlb	0	; () banked
 25113  0069CA  8BEA               	bsf	(_Outputs+2)& (0+255),5,b
 25114                           
 25115                           ;main.c: 298: Outputs.led13 = 0;
 25116  0069CC  0100               	movlb	0	; () banked
 25117  0069CE  99EA               	bcf	(_Outputs+2)& (0+255),4,b
 25118                           
 25119                           ;main.c: 299: Outputs.rly1 = 1;
 25120  0069D0  0100               	movlb	0	; () banked
 25121  0069D2  81E9               	bsf	(_Outputs+1)& (0+255),0,b
 25122  0069D4  D02B               	goto	L33
 25123  0069D6                     l1027:
 25124  0069D6  FFFF               	dw	65535	; assembler added errata NOP
 25125                           
 25126                           ; BSR set to: 0
 25127  0069D8  C099  F01F         	movff	Control_Loop@Control_Out,___ftge@ff1
 25128  0069DC  C09A  F020         	movff	Control_Loop@Control_Out+1,___ftge@ff1+1
 25129  0069E0  C09B  F021         	movff	Control_Loop@Control_Out+2,___ftge@ff1+2
 25130  0069E4  EC55  F026         	call	_get_PID_deadband	;wreg free
 25131  0069E8  C019  F01C         	movff	?_get_PID_deadband,___ftneg@f1
 25132  0069EC  C01A  F01D         	movff	?_get_PID_deadband+1,___ftneg@f1+1
 25133  0069F0  C01B  F01E         	movff	?_get_PID_deadband+2,___ftneg@f1+2
 25134  0069F4  ECFB  F028         	call	___ftneg	;wreg free
 25135  0069F8  C01C  F022         	movff	?___ftneg,___ftge@ff2
 25136  0069FC  C01D  F023         	movff	?___ftneg+1,___ftge@ff2+1
 25137  006A00  C01E  F024         	movff	?___ftneg+2,___ftge@ff2+2
 25138  006A04  EC7A  F031         	call	___ftge	;wreg free
 25139  006A08  B0D8               	btfsc	status,0,c
 25140  006A0A  D009               	goto	l1029
 25141                           
 25142                           ;main.c: 302: Outputs.led14 = 0;
 25143  006A0C  0100               	movlb	0	; () banked
 25144  006A0E  9BEA               	bcf	(_Outputs+2)& (0+255),5,b
 25145                           
 25146                           ;main.c: 303: Outputs.led13 = 1;
 25147  006A10  0100               	movlb	0	; () banked
 25148  006A12  89EA               	bsf	(_Outputs+2)& (0+255),4,b
 25149                           
 25150                           ;main.c: 304: Outputs.rly1 = 0;
 25151  006A14  0100               	movlb	0	; () banked
 25152  006A16  91E9               	bcf	(_Outputs+1)& (0+255),0,b
 25153                           
 25154                           ;main.c: 305: Outputs.rly2 = 1;
 25155  006A18  0100               	movlb	0	; () banked
 25156  006A1A  83E9               	bsf	(_Outputs+1)& (0+255),1,b
 25157                           
 25158                           ;main.c: 306: } else {
 25159  006A1C  D00A               	goto	l1031
 25160  006A1E                     l1029:
 25161  006A1E  FFFF               	dw	65535	; assembler added errata NOP
 25162                           
 25163                           ; BSR set to: 0
 25164                           ;main.c: 313: Outputs.led14 = 0;
 25165                           
 25166                           ; BSR set to: 0
 25167                           ;main.c: 311: }
 25168                           ;main.c: 312: } else {
 25169                           
 25170                           ; BSR set to: 0
 25171                           
 25172                           ;main.c: 310: Outputs.rly2 = 0;
 25173                           
 25174                           ;main.c: 309: Outputs.rly1 = 0;
 25175                           
 25176                           ;main.c: 308: Outputs.led13 = 0;
 25177                           
 25178                           ;main.c: 307: Outputs.led14 = 0;
 25179  006A20  0100               	movlb	0	; () banked
 25180  006A22  9BEA               	bcf	(_Outputs+2)& (0+255),5,b
 25181                           
 25182                           ;main.c: 314: Outputs.led13 = 0;
 25183  006A24  0100               	movlb	0	; () banked
 25184  006A26  99EA               	bcf	(_Outputs+2)& (0+255),4,b
 25185                           
 25186                           ;main.c: 315: Outputs.rly1 = 0;
 25187  006A28  0100               	movlb	0	; () banked
 25188  006A2A  91E9               	bcf	(_Outputs+1)& (0+255),0,b
 25189  006A2C                     L33:
 25190  006A2C  FFFF               	dw	65535	; assembler added errata NOP
 25191                           
 25192                           ;main.c: 316: Outputs.rly2 = 0;
 25193  006A2E  0100               	movlb	0	; () banked
 25194  006A30  93E9               	bcf	(_Outputs+1)& (0+255),1,b
 25195  006A32                     l1031:
 25196  006A32  FFFF               	dw	65535	; assembler added errata NOP
 25197                           
 25198                           ; BSR set to: 0
 25199                           
 25200                           ; BSR set to: 0
 25201  006A34  0012               	return		;funcret
 25202  006A36  FFFF               	dw	65535	; errata NOP
 25203  006A38                     __end_of_Control_Loop:
 25204                           	opt stack 0
 25205                           tosu	equ	0xFFF
 25206                           tosh	equ	0xFFE
 25207                           tosl	equ	0xFFD
 25208                           pclath	equ	0xFFA
 25209                           tblptru	equ	0xFF8
 25210                           tblptrh	equ	0xFF7
 25211                           tblptrl	equ	0xFF6
 25212                           tablat	equ	0xFF5
 25213                           prodh	equ	0xFF4
 25214                           prodl	equ	0xFF3
 25215                           intcon	equ	0xFF2
 25216                           postinc0	equ	0xFEE
 25217                           wreg	equ	0xFE8
 25218                           indf1	equ	0xFE7
 25219                           fsr1h	equ	0xFE2
 25220                           fsr1l	equ	0xFE1
 25221                           indf2	equ	0xFDF
 25222                           postinc2	equ	0xFDE
 25223                           postdec2	equ	0xFDD
 25224                           plusw2	equ	0xFDB
 25225                           fsr2h	equ	0xFDA
 25226                           fsr2l	equ	0xFD9
 25227                           status	equ	0xFD8
 25228                           
 25229 ;; *************** function _get_PID_deadband *****************
 25230 ;; Defined at:
 25231 ;;		line 50 in file "PID_Controller.c"
 25232 ;; Parameters:    Size  Location     Type
 25233 ;;		None
 25234 ;; Auto vars:     Size  Location     Type
 25235 ;;		None
 25236 ;; Return value:  Size  Location     Type
 25237 ;;                  3   24[COMRAM] float 
 25238 ;; Registers used:
 25239 ;;		None
 25240 ;; Tracked objects:
 25241 ;;		On entry : 0/0
 25242 ;;		On exit  : 0/0
 25243 ;;		Unchanged: 0/0
 25244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25245 ;;      Params:         3       0       0       0       0       0       0
 25246 ;;      Locals:         0       0       0       0       0       0       0
 25247 ;;      Temps:          0       0       0       0       0       0       0
 25248 ;;      Totals:         3       0       0       0       0       0       0
 25249 ;;Total ram usage:        3 bytes
 25250 ;; Hardware stack levels used:    1
 25251 ;; Hardware stack levels required when called:    1
 25252 ;; This function calls:
 25253 ;;		Nothing
 25254 ;; This function is called by:
 25255 ;;		_get_list
 25256 ;;		_Save_Variables
 25257 ;;		_Control_Loop
 25258 ;; This function uses a non-reentrant model
 25259 ;;
 25260                           
 25261                           	psect	text147
 25262  004CAA                     __ptext147:
 25263                           	opt stack 0
 25264  004CAA                     _get_PID_deadband:
 25265                           	opt stack 0
 25266  004CAA  FFFF               	dw	65535	; assembler added errata NOP
 25267                           
 25268                           ;PID_Controller.c: 51: return deadband;
 25269                           
 25270                           ; BSR set to: 0
 25271                           ;incstack = 0
 25272  004CAC  C104  F019         	movff	_deadband,?_get_PID_deadband
 25273  004CB0  C105  F01A         	movff	_deadband+1,?_get_PID_deadband+1
 25274  004CB4  C106  F01B         	movff	_deadband+2,?_get_PID_deadband+2
 25275  004CB8  0012               	return		;funcret
 25276  004CBA  FFFF               	dw	65535	; errata NOP
 25277  004CBC                     __end_of_get_PID_deadband:
 25278                           	opt stack 0
 25279                           tosu	equ	0xFFF
 25280                           tosh	equ	0xFFE
 25281                           tosl	equ	0xFFD
 25282                           pclath	equ	0xFFA
 25283                           tblptru	equ	0xFF8
 25284                           tblptrh	equ	0xFF7
 25285                           tblptrl	equ	0xFF6
 25286                           tablat	equ	0xFF5
 25287                           prodh	equ	0xFF4
 25288                           prodl	equ	0xFF3
 25289                           intcon	equ	0xFF2
 25290                           postinc0	equ	0xFEE
 25291                           wreg	equ	0xFE8
 25292                           indf1	equ	0xFE7
 25293                           fsr1h	equ	0xFE2
 25294                           fsr1l	equ	0xFE1
 25295                           indf2	equ	0xFDF
 25296                           postinc2	equ	0xFDE
 25297                           postdec2	equ	0xFDD
 25298                           plusw2	equ	0xFDB
 25299                           fsr2h	equ	0xFDA
 25300                           fsr2l	equ	0xFD9
 25301                           status	equ	0xFD8
 25302                           
 25303 ;; *************** function ___ftge *****************
 25304 ;; Defined at:
 25305 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
 25306 ;; Parameters:    Size  Location     Type
 25307 ;;  ff1             3   30[COMRAM] float 
 25308 ;;  ff2             3   33[COMRAM] float 
 25309 ;; Auto vars:     Size  Location     Type
 25310 ;;		None
 25311 ;; Return value:  Size  Location     Type
 25312 ;;		None               void
 25313 ;; Registers used:
 25314 ;;		wreg, status,2, status,0
 25315 ;; Tracked objects:
 25316 ;;		On entry : 0/0
 25317 ;;		On exit  : 0/0
 25318 ;;		Unchanged: 0/0
 25319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25320 ;;      Params:         6       0       0       0       0       0       0
 25321 ;;      Locals:         0       0       0       0       0       0       0
 25322 ;;      Temps:          3       0       0       0       0       0       0
 25323 ;;      Totals:         9       0       0       0       0       0       0
 25324 ;;Total ram usage:        9 bytes
 25325 ;; Hardware stack levels used:    1
 25326 ;; Hardware stack levels required when called:    1
 25327 ;; This function calls:
 25328 ;;		Nothing
 25329 ;; This function is called by:
 25330 ;;		_Check_VL_N
 25331 ;;		_Get_Voltage_Data
 25332 ;;		_Control_Loop
 25333 ;;		__doprnt
 25334 ;;		_strtod
 25335 ;; This function uses a non-reentrant model
 25336 ;;
 25337                           
 25338                           	psect	text148
 25339  0062F4                     __ptext148:
 25340                           	opt stack 0
 25341  0062F4                     ___ftge:
 25342                           	opt stack 0
 25343  0062F4  FFFF               	dw	65535	; assembler added errata NOP
 25344                           
 25345                           ;incstack = 0
 25346  0062F6  AE21               	btfss	___ftge@ff1+2,7,c
 25347  0062F8  D016               	goto	l1756
 25348  0062FA  C01F  F025         	movff	___ftge@ff1,??___ftge
 25349  0062FE  C020  F026         	movff	___ftge@ff1+1,??___ftge+1
 25350  006302  C021  F027         	movff	___ftge@ff1+2,??___ftge+2
 25351  006306  1E25               	comf	??___ftge,f,c
 25352  006308  1E26               	comf	??___ftge+1,f,c
 25353  00630A  1E27               	comf	??___ftge+2,f,c
 25354  00630C  2A25               	incf	??___ftge,f,c
 25355  00630E  0E00               	movlw	0
 25356  006310  2226               	addwfc	??___ftge+1,f,c
 25357  006312  2227               	addwfc	??___ftge+2,f,c
 25358  006314  0E00               	movlw	0
 25359  006316  2425               	addwf	??___ftge,w,c
 25360  006318  6E1F               	movwf	___ftge@ff1,c
 25361  00631A  0E00               	movlw	0
 25362  00631C  2026               	addwfc	??___ftge+1,w,c
 25363  00631E  6E20               	movwf	___ftge@ff1+1,c
 25364  006320  0E80               	movlw	128
 25365  006322  2027               	addwfc	??___ftge+2,w,c
 25366  006324  6E21               	movwf	___ftge@ff1+2,c
 25367  006326                     l1756:
 25368  006326  FFFF               	dw	65535	; assembler added errata NOP
 25369  006328  AE24               	btfss	___ftge@ff2+2,7,c
 25370  00632A  D016               	goto	l1757
 25371  00632C  C022  F025         	movff	___ftge@ff2,??___ftge
 25372  006330  C023  F026         	movff	___ftge@ff2+1,??___ftge+1
 25373  006334  C024  F027         	movff	___ftge@ff2+2,??___ftge+2
 25374  006338  1E25               	comf	??___ftge,f,c
 25375  00633A  1E26               	comf	??___ftge+1,f,c
 25376  00633C  1E27               	comf	??___ftge+2,f,c
 25377  00633E  2A25               	incf	??___ftge,f,c
 25378  006340  0E00               	movlw	0
 25379  006342  2226               	addwfc	??___ftge+1,f,c
 25380  006344  2227               	addwfc	??___ftge+2,f,c
 25381  006346  0E00               	movlw	0
 25382  006348  2425               	addwf	??___ftge,w,c
 25383  00634A  6E22               	movwf	___ftge@ff2,c
 25384  00634C  0E00               	movlw	0
 25385  00634E  2026               	addwfc	??___ftge+1,w,c
 25386  006350  6E23               	movwf	___ftge@ff2+1,c
 25387  006352  0E80               	movlw	128
 25388  006354  2027               	addwfc	??___ftge+2,w,c
 25389  006356  6E24               	movwf	___ftge@ff2+2,c
 25390  006358                     l1757:
 25391  006358  FFFF               	dw	65535	; assembler added errata NOP
 25392  00635A  0E00               	movlw	0
 25393  00635C  1A1F               	xorwf	___ftge@ff1,f,c
 25394  00635E  0E00               	movlw	0
 25395  006360  1A20               	xorwf	___ftge@ff1+1,f,c
 25396  006362  0E80               	movlw	128
 25397  006364  1A21               	xorwf	___ftge@ff1+2,f,c
 25398  006366  0E00               	movlw	0
 25399  006368  1A22               	xorwf	___ftge@ff2,f,c
 25400  00636A  0E00               	movlw	0
 25401  00636C  1A23               	xorwf	___ftge@ff2+1,f,c
 25402  00636E  0E80               	movlw	128
 25403  006370  1A24               	xorwf	___ftge@ff2+2,f,c
 25404  006372  5022               	movf	___ftge@ff2,w,c
 25405  006374  5C1F               	subwf	___ftge@ff1,w,c
 25406  006376  5023               	movf	___ftge@ff2+1,w,c
 25407  006378  5820               	subwfb	___ftge@ff1+1,w,c
 25408  00637A  5024               	movf	___ftge@ff2+2,w,c
 25409  00637C  5821               	subwfb	___ftge@ff1+2,w,c
 25410  00637E  B0D8               	btfsc	status,0,c
 25411  006380  D002               	goto	l8555
 25412  006382  90D8               	bcf	status,0,c
 25413  006384  D002               	goto	l8557
 25414  006386                     l8555:
 25415  006386  FFFF               	dw	65535	; assembler added errata NOP
 25416  006388  80D8               	bsf	status,0,c
 25417  00638A                     l8557:
 25418  00638A  FFFF               	dw	65535	; assembler added errata NOP
 25419  00638C  0012               	return		;funcret
 25420  00638E  FFFF               	dw	65535	; errata NOP
 25421  006390                     __end_of___ftge:
 25422                           	opt stack 0
 25423                           tosu	equ	0xFFF
 25424                           tosh	equ	0xFFE
 25425                           tosl	equ	0xFFD
 25426                           pclath	equ	0xFFA
 25427                           tblptru	equ	0xFF8
 25428                           tblptrh	equ	0xFF7
 25429                           tblptrl	equ	0xFF6
 25430                           tablat	equ	0xFF5
 25431                           prodh	equ	0xFF4
 25432                           prodl	equ	0xFF3
 25433                           intcon	equ	0xFF2
 25434                           postinc0	equ	0xFEE
 25435                           wreg	equ	0xFE8
 25436                           indf1	equ	0xFE7
 25437                           fsr1h	equ	0xFE2
 25438                           fsr1l	equ	0xFE1
 25439                           indf2	equ	0xFDF
 25440                           postinc2	equ	0xFDE
 25441                           postdec2	equ	0xFDD
 25442                           plusw2	equ	0xFDB
 25443                           fsr2h	equ	0xFDA
 25444                           fsr2l	equ	0xFD9
 25445                           status	equ	0xFD8
 25446                           
 25447 ;; *************** function _PID_Controller *****************
 25448 ;; Defined at:
 25449 ;;		line 55 in file "PID_Controller.c"
 25450 ;; Parameters:    Size  Location     Type
 25451 ;;  val             3   42[BANK0 ] float 
 25452 ;; Auto vars:     Size  Location     Type
 25453 ;;  abs_error       3    0        float 
 25454 ;; Return value:  Size  Location     Type
 25455 ;;                  3   42[BANK0 ] float 
 25456 ;; Registers used:
 25457 ;;		wreg, status,2, status,0, cstack
 25458 ;; Tracked objects:
 25459 ;;		On entry : 0/0
 25460 ;;		On exit  : 0/0
 25461 ;;		Unchanged: 0/0
 25462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25463 ;;      Params:         0       3       0       0       0       0       0
 25464 ;;      Locals:         0       9       0       0       0       0       0
 25465 ;;      Temps:          0       0       0       0       0       0       0
 25466 ;;      Totals:         0      12       0       0       0       0       0
 25467 ;;Total ram usage:       12 bytes
 25468 ;; Hardware stack levels used:    1
 25469 ;; Hardware stack levels required when called:    3
 25470 ;; This function calls:
 25471 ;;		___ftadd
 25472 ;;		___ftdiv
 25473 ;;		___ftmul
 25474 ;;		___ftneg
 25475 ;; This function is called by:
 25476 ;;		_Control_Loop
 25477 ;; This function uses a non-reentrant model
 25478 ;;
 25479                           
 25480                           	psect	text149
 25481  003DA4                     __ptext149:
 25482                           	opt stack 0
 25483  003DA4                     _PID_Controller:
 25484                           	opt stack 0
 25485  003DA4  FFFF               	dw	65535	; assembler added errata NOP
 25486                           
 25487                           ;PID_Controller.c: 56: float abs_error;
 25488                           ;PID_Controller.c: 59: error = setpoint - val;
 25489                           
 25490                           ;incstack = 0
 25491  003DA6  C08A  F01C         	movff	PID_Controller@val,___ftneg@f1
 25492  003DAA  C08B  F01D         	movff	PID_Controller@val+1,___ftneg@f1+1
 25493  003DAE  C08C  F01E         	movff	PID_Controller@val+2,___ftneg@f1+2
 25494  003DB2  ECFB  F028         	call	___ftneg	;wreg free
 25495  003DB6  C01C  F060         	movff	?___ftneg,___ftadd@f1
 25496  003DBA  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 25497  003DBE  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 25498  003DC2  C107  F063         	movff	_setpoint,___ftadd@f2
 25499  003DC6  C108  F064         	movff	_setpoint+1,___ftadd@f2+1
 25500  003DCA  C109  F065         	movff	_setpoint+2,___ftadd@f2+2
 25501  003DCE  EC45  F016         	call	___ftadd	;wreg free
 25502  003DD2  C060  F0EC         	movff	?___ftadd,_error
 25503  003DD6  C061  F0ED         	movff	?___ftadd+1,_error+1
 25504  003DDA  C062  F0EE         	movff	?___ftadd+2,_error+2
 25505                           
 25506                           ;PID_Controller.c: 60: if(ti!=0){
 25507  003DDE  502F               	movf	_ti,w,c
 25508  003DE0  1030               	iorwf	_ti+1,w,c
 25509  003DE2  1031               	iorwf	_ti+2,w,c
 25510  003DE4  B4D8               	btfsc	status,2,c
 25511  003DE6  D037               	goto	l1117
 25512                           
 25513                           ;PID_Controller.c: 61: integral = (last_integral + error * T_sample*ti);
 25514  003DE8  C0EF  F06F         	movff	_T_sample,___ftmul@f2
 25515  003DEC  C0F0  F070         	movff	_T_sample+1,___ftmul@f2+1
 25516  003DF0  C0F1  F071         	movff	_T_sample+2,___ftmul@f2+2
 25517  003DF4  C0EC  F06C         	movff	_error,___ftmul@f1
 25518  003DF8  C0ED  F06D         	movff	_error+1,___ftmul@f1+1
 25519  003DFC  C0EE  F06E         	movff	_error+2,___ftmul@f1+2
 25520  003E00  EC53  F03C         	call	___ftmul	;wreg free
 25521  003E04  C06C  F08D         	movff	?___ftmul,_PID_Controller$3552
 25522  003E08  C06D  F08E         	movff	?___ftmul+1,_PID_Controller$3552+1
 25523  003E0C  C06E  F08F         	movff	?___ftmul+2,_PID_Controller$3552+2
 25524                           
 25525                           ;PID_Controller.c: 61: integral = (last_integral + error * T_sample*ti);
 25526  003E10  C02F  F06F         	movff	_ti,___ftmul@f2
 25527  003E14  C030  F070         	movff	_ti+1,___ftmul@f2+1
 25528  003E18  C031  F071         	movff	_ti+2,___ftmul@f2+2
 25529  003E1C  C08D  F06C         	movff	_PID_Controller$3552,___ftmul@f1
 25530  003E20  C08E  F06D         	movff	_PID_Controller$3552+1,___ftmul@f1+1
 25531  003E24  C08F  F06E         	movff	_PID_Controller$3552+2,___ftmul@f1+2
 25532  003E28  EC53  F03C         	call	___ftmul	;wreg free
 25533  003E2C  C06C  F060         	movff	?___ftmul,___ftadd@f1
 25534  003E30  C06D  F061         	movff	?___ftmul+1,___ftadd@f1+1
 25535  003E34  C06E  F062         	movff	?___ftmul+2,___ftadd@f1+2
 25536  003E38  C10A  F063         	movff	_last_integral,___ftadd@f2
 25537  003E3C  C10B  F064         	movff	_last_integral+1,___ftadd@f2+1
 25538  003E40  C10C  F065         	movff	_last_integral+2,___ftadd@f2+2
 25539  003E44  EC45  F016         	call	___ftadd	;wreg free
 25540  003E48  C060  F113         	movff	?___ftadd,_integral
 25541  003E4C  C061  F114         	movff	?___ftadd+1,_integral+1
 25542  003E50  C062  F115         	movff	?___ftadd+2,_integral+2
 25543                           
 25544                           ;PID_Controller.c: 62: }
 25545  003E54  D00A               	goto	l1118
 25546  003E56                     l1117:
 25547  003E56  FFFF               	dw	65535	; assembler added errata NOP
 25548                           
 25549                           ;PID_Controller.c: 63: else{
 25550                           ;PID_Controller.c: 64: integral=0.0;
 25551  003E58  0E00               	movlw	0
 25552  003E5A  0101               	movlb	1	; () banked
 25553  003E5C  6F13               	movwf	_integral& (0+255),b
 25554  003E5E  0E00               	movlw	0
 25555  003E60  0101               	movlb	1	; () banked
 25556  003E62  6F14               	movwf	(_integral+1)& (0+255),b
 25557  003E64  0E00               	movlw	0
 25558  003E66  0101               	movlb	1	; () banked
 25559  003E68  6F15               	movwf	(_integral+2)& (0+255),b
 25560  003E6A                     l1118:
 25561  003E6A  FFFF               	dw	65535	; assembler added errata NOP
 25562                           
 25563                           ;PID_Controller.c: 65: }
 25564                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25565                           
 25566                           ; BSR set to: 1
 25567  003E6C  C0EF  F07E         	movff	_T_sample,___ftdiv@f2
 25568  003E70  C0F0  F07F         	movff	_T_sample+1,___ftdiv@f2+1
 25569  003E74  C0F1  F080         	movff	_T_sample+2,___ftdiv@f2+2
 25570  003E78  C119  F06F         	movff	_td,___ftmul@f2
 25571  003E7C  C11A  F070         	movff	_td+1,___ftmul@f2+1
 25572  003E80  C11B  F071         	movff	_td+2,___ftmul@f2+2
 25573  003E84  C0EC  F063         	movff	_error,___ftadd@f2
 25574  003E88  C0ED  F064         	movff	_error+1,___ftadd@f2+1
 25575  003E8C  C0EE  F065         	movff	_error+2,___ftadd@f2+2
 25576  003E90  C10D  F01C         	movff	_last_error,___ftneg@f1
 25577  003E94  C10E  F01D         	movff	_last_error+1,___ftneg@f1+1
 25578  003E98  C10F  F01E         	movff	_last_error+2,___ftneg@f1+2
 25579  003E9C  ECFB  F028         	call	___ftneg	;wreg free
 25580  003EA0  C01C  F060         	movff	?___ftneg,___ftadd@f1
 25581  003EA4  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 25582  003EA8  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 25583  003EAC  EC45  F016         	call	___ftadd	;wreg free
 25584  003EB0  C060  F06C         	movff	?___ftadd,___ftmul@f1
 25585  003EB4  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 25586  003EB8  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 25587  003EBC  EC53  F03C         	call	___ftmul	;wreg free
 25588  003EC0  C06C  F07B         	movff	?___ftmul,___ftdiv@f1
 25589  003EC4  C06D  F07C         	movff	?___ftmul+1,___ftdiv@f1+1
 25590  003EC8  C06E  F07D         	movff	?___ftmul+2,___ftdiv@f1+2
 25591  003ECC  ECB0  F03B         	call	___ftdiv	;wreg free
 25592  003ED0  C07B  F090         	movff	?___ftdiv,_PID_Controller$3553
 25593  003ED4  C07C  F091         	movff	?___ftdiv+1,_PID_Controller$3553+1
 25594  003ED8  C07D  F092         	movff	?___ftdiv+2,_PID_Controller$3553+2
 25595                           
 25596                           ;PID_Controller.c: 65: }
 25597                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25598  003EDC  C0EC  F063         	movff	_error,___ftadd@f2
 25599  003EE0  C0ED  F064         	movff	_error+1,___ftadd@f2+1
 25600  003EE4  C0EE  F065         	movff	_error+2,___ftadd@f2+2
 25601  003EE8  C090  F060         	movff	_PID_Controller$3553,___ftadd@f1
 25602  003EEC  C091  F061         	movff	_PID_Controller$3553+1,___ftadd@f1+1
 25603  003EF0  C092  F062         	movff	_PID_Controller$3553+2,___ftadd@f1+2
 25604  003EF4  EC45  F016         	call	___ftadd	;wreg free
 25605  003EF8  C060  F093         	movff	?___ftadd,_PID_Controller$3554
 25606  003EFC  C061  F094         	movff	?___ftadd+1,_PID_Controller$3554+1
 25607  003F00  C062  F095         	movff	?___ftadd+2,_PID_Controller$3554+2
 25608                           
 25609                           ;PID_Controller.c: 65: }
 25610                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25611  003F04  C113  F063         	movff	_integral,___ftadd@f2
 25612  003F08  C114  F064         	movff	_integral+1,___ftadd@f2+1
 25613  003F0C  C115  F065         	movff	_integral+2,___ftadd@f2+2
 25614  003F10  C093  F060         	movff	_PID_Controller$3554,___ftadd@f1
 25615  003F14  C094  F061         	movff	_PID_Controller$3554+1,___ftadd@f1+1
 25616  003F18  C095  F062         	movff	_PID_Controller$3554+2,___ftadd@f1+2
 25617  003F1C  EC45  F016         	call	___ftadd	;wreg free
 25618  003F20  C060  F06C         	movff	?___ftadd,___ftmul@f1
 25619  003F24  C061  F06D         	movff	?___ftadd+1,___ftmul@f1+1
 25620  003F28  C062  F06E         	movff	?___ftadd+2,___ftmul@f1+2
 25621  003F2C  C11C  F06F         	movff	_Kp,___ftmul@f2
 25622  003F30  C11D  F070         	movff	_Kp+1,___ftmul@f2+1
 25623  003F34  C11E  F071         	movff	_Kp+2,___ftmul@f2+2
 25624  003F38  EC53  F03C         	call	___ftmul	;wreg free
 25625  003F3C  C06C  F116         	movff	?___ftmul,_output
 25626  003F40  C06D  F117         	movff	?___ftmul+1,_output+1
 25627  003F44  C06E  F118         	movff	?___ftmul+2,_output+2
 25628                           
 25629                           ;PID_Controller.c: 67: last_output = output;
 25630  003F48  C116  F110         	movff	_output,_last_output
 25631  003F4C  C117  F111         	movff	_output+1,_last_output+1
 25632  003F50  C118  F112         	movff	_output+2,_last_output+2
 25633                           
 25634                           ;PID_Controller.c: 68: last_error = error;
 25635  003F54  C0EC  F10D         	movff	_error,_last_error
 25636  003F58  C0ED  F10E         	movff	_error+1,_last_error+1
 25637  003F5C  C0EE  F10F         	movff	_error+2,_last_error+2
 25638                           
 25639                           ;PID_Controller.c: 69: last_integral = integral;
 25640  003F60  C113  F10A         	movff	_integral,_last_integral
 25641  003F64  C114  F10B         	movff	_integral+1,_last_integral+1
 25642  003F68  C115  F10C         	movff	_integral+2,_last_integral+2
 25643                           
 25644                           ;PID_Controller.c: 70: return output;
 25645  003F6C  C116  F08A         	movff	_output,?_PID_Controller
 25646  003F70  C117  F08B         	movff	_output+1,?_PID_Controller+1
 25647  003F74  C118  F08C         	movff	_output+2,?_PID_Controller+2
 25648  003F78  0012               	return		;funcret
 25649  003F7A  FFFF               	dw	65535	; errata NOP
 25650  003F7C                     __end_of_PID_Controller:
 25651                           	opt stack 0
 25652                           tosu	equ	0xFFF
 25653                           tosh	equ	0xFFE
 25654                           tosl	equ	0xFFD
 25655                           pclath	equ	0xFFA
 25656                           tblptru	equ	0xFF8
 25657                           tblptrh	equ	0xFF7
 25658                           tblptrl	equ	0xFF6
 25659                           tablat	equ	0xFF5
 25660                           prodh	equ	0xFF4
 25661                           prodl	equ	0xFF3
 25662                           intcon	equ	0xFF2
 25663                           postinc0	equ	0xFEE
 25664                           wreg	equ	0xFE8
 25665                           indf1	equ	0xFE7
 25666                           fsr1h	equ	0xFE2
 25667                           fsr1l	equ	0xFE1
 25668                           indf2	equ	0xFDF
 25669                           postinc2	equ	0xFDE
 25670                           postdec2	equ	0xFDD
 25671                           plusw2	equ	0xFDB
 25672                           fsr2h	equ	0xFDA
 25673                           fsr2l	equ	0xFD9
 25674                           status	equ	0xFD8
 25675                           
 25676 ;; *************** function ___ftneg *****************
 25677 ;; Defined at:
 25678 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
 25679 ;; Parameters:    Size  Location     Type
 25680 ;;  f1              3   27[COMRAM] float 
 25681 ;; Auto vars:     Size  Location     Type
 25682 ;;		None
 25683 ;; Return value:  Size  Location     Type
 25684 ;;                  3   27[COMRAM] float 
 25685 ;; Registers used:
 25686 ;;		wreg, status,2, status,0
 25687 ;; Tracked objects:
 25688 ;;		On entry : 0/0
 25689 ;;		On exit  : 0/0
 25690 ;;		Unchanged: 0/0
 25691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25692 ;;      Params:         3       0       0       0       0       0       0
 25693 ;;      Locals:         0       0       0       0       0       0       0
 25694 ;;      Temps:          0       0       0       0       0       0       0
 25695 ;;      Totals:         3       0       0       0       0       0       0
 25696 ;;Total ram usage:        3 bytes
 25697 ;; Hardware stack levels used:    1
 25698 ;; Hardware stack levels required when called:    1
 25699 ;; This function calls:
 25700 ;;		Nothing
 25701 ;; This function is called by:
 25702 ;;		_LowPass_VL1
 25703 ;;		_LowPass_VL2
 25704 ;;		_LowPass_VL3
 25705 ;;		_LowPass_Vin
 25706 ;;		_Get_Voltage_Data
 25707 ;;		_Control_Loop
 25708 ;;		_PID_Controller
 25709 ;;		__doprnt
 25710 ;;		_strtod
 25711 ;; This function uses a non-reentrant model
 25712 ;;
 25713                           
 25714                           	psect	text150
 25715  0051F6                     __ptext150:
 25716                           	opt stack 0
 25717  0051F6                     ___ftneg:
 25718                           	opt stack 0
 25719  0051F6  FFFF               	dw	65535	; assembler added errata NOP
 25720                           
 25721                           ;incstack = 0
 25722  0051F8  501C               	movf	___ftneg@f1,w,c
 25723  0051FA  101D               	iorwf	___ftneg@f1+1,w,c
 25724  0051FC  101E               	iorwf	___ftneg@f1+2,w,c
 25725  0051FE  B4D8               	btfsc	status,2,c
 25726  005200  D006               	goto	l1774
 25727  005202  0E00               	movlw	0
 25728  005204  1A1C               	xorwf	___ftneg@f1,f,c
 25729  005206  0E00               	movlw	0
 25730  005208  1A1D               	xorwf	___ftneg@f1+1,f,c
 25731  00520A  0E80               	movlw	128
 25732  00520C  1A1E               	xorwf	___ftneg@f1+2,f,c
 25733  00520E                     l1774:
 25734  00520E  FFFF               	dw	65535	; assembler added errata NOP
 25735  005210  C01C  F01C         	movff	___ftneg@f1,?___ftneg
 25736  005214  C01D  F01D         	movff	___ftneg@f1+1,?___ftneg+1
 25737  005218  C01E  F01E         	movff	___ftneg@f1+2,?___ftneg+2
 25738  00521C  0012               	return		;funcret
 25739  00521E  FFFF               	dw	65535	; errata NOP
 25740  005220                     __end_of___ftneg:
 25741                           	opt stack 0
 25742                           tosu	equ	0xFFF
 25743                           tosh	equ	0xFFE
 25744                           tosl	equ	0xFFD
 25745                           pclath	equ	0xFFA
 25746                           tblptru	equ	0xFF8
 25747                           tblptrh	equ	0xFF7
 25748                           tblptrl	equ	0xFF6
 25749                           tablat	equ	0xFF5
 25750                           prodh	equ	0xFF4
 25751                           prodl	equ	0xFF3
 25752                           intcon	equ	0xFF2
 25753                           postinc0	equ	0xFEE
 25754                           wreg	equ	0xFE8
 25755                           indf1	equ	0xFE7
 25756                           fsr1h	equ	0xFE2
 25757                           fsr1l	equ	0xFE1
 25758                           indf2	equ	0xFDF
 25759                           postinc2	equ	0xFDE
 25760                           postdec2	equ	0xFDD
 25761                           plusw2	equ	0xFDB
 25762                           fsr2h	equ	0xFDA
 25763                           fsr2l	equ	0xFD9
 25764                           status	equ	0xFD8
 25765                           
 25766 ;; *************** function ___ftmul *****************
 25767 ;; Defined at:
 25768 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
 25769 ;; Parameters:    Size  Location     Type
 25770 ;;  f1              3   12[BANK0 ] float 
 25771 ;;  f2              3   15[BANK0 ] float 
 25772 ;; Auto vars:     Size  Location     Type
 25773 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
 25774 ;;  sign            1   26[BANK0 ] unsigned char 
 25775 ;;  cntr            1   25[BANK0 ] unsigned char 
 25776 ;;  exp             1   21[BANK0 ] unsigned char 
 25777 ;; Return value:  Size  Location     Type
 25778 ;;                  3   12[BANK0 ] float 
 25779 ;; Registers used:
 25780 ;;		wreg, status,2, status,0, cstack
 25781 ;; Tracked objects:
 25782 ;;		On entry : 0/0
 25783 ;;		On exit  : 0/0
 25784 ;;		Unchanged: 0/0
 25785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25786 ;;      Params:         0       6       0       0       0       0       0
 25787 ;;      Locals:         0       6       0       0       0       0       0
 25788 ;;      Temps:          0       3       0       0       0       0       0
 25789 ;;      Totals:         0      15       0       0       0       0       0
 25790 ;;Total ram usage:       15 bytes
 25791 ;; Hardware stack levels used:    1
 25792 ;; Hardware stack levels required when called:    2
 25793 ;; This function calls:
 25794 ;;		___ftpack
 25795 ;; This function is called by:
 25796 ;;		_LowPass_VL1
 25797 ;;		_LowPass_VL2
 25798 ;;		_LowPass_VL3
 25799 ;;		_LowPass_Vin
 25800 ;;		_Get_Voltage_Data
 25801 ;;		_main
 25802 ;;		_PID_Controller
 25803 ;;		_fround
 25804 ;;		_scale
 25805 ;;		__doprnt
 25806 ;;		_strtod
 25807 ;; This function uses a non-reentrant model
 25808 ;;
 25809                           
 25810                           	psect	text151
 25811  0078A6                     __ptext151:
 25812                           	opt stack 0
 25813  0078A6                     ___ftmul:
 25814                           	opt stack 0
 25815  0078A6  FFFF               	dw	65535	; assembler added errata NOP
 25816                           
 25817                           ;incstack = 0
 25818  0078A8  C06E  F072         	movff	___ftmul@f1+2,??___ftmul
 25819  0078AC  0100               	movlb	0	; () banked
 25820  0078AE  6B73               	clrf	(??___ftmul+1)& (0+255),b
 25821  0078B0  6B74               	clrf	(??___ftmul+2)& (0+255),b
 25822  0078B2  0100               	movlb	0	; () banked
 25823  0078B4  356D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 25824  0078B6  0100               	movlb	0	; () banked
 25825  0078B8  3772               	rlcf	??___ftmul& (0+255),f,b
 25826  0078BA  E301               	bnc	u8321
 25827  0078BC  8173               	bsf	(??___ftmul+1)& (0+255),0,b
 25828  0078BE                     u8321:
 25829  0078BE  0100               	movlb	0	; () banked
 25830  0078C0  5172               	movf	??___ftmul& (0+255),w,b
 25831  0078C2  0100               	movlb	0	; () banked
 25832  0078C4  6F75               	movwf	___ftmul@exp& (0+255),b
 25833  0078C6  0100               	movlb	0	; () banked
 25834  0078C8  5175               	movf	___ftmul@exp& (0+255),w,b
 25835  0078CA  B4D8               	btfsc	status,2,c
 25836  0078CC  D013               	goto	u8350
 25837                           
 25838                           ; BSR set to: 0
 25839                           
 25840                           ; BSR set to: 0
 25841                           
 25842                           ; BSR set to: 0
 25843                           
 25844                           ; BSR set to: 0
 25845  0078CE  C071  F072         	movff	___ftmul@f2+2,??___ftmul
 25846  0078D2  0100               	movlb	0	; () banked
 25847  0078D4  6B73               	clrf	(??___ftmul+1)& (0+255),b
 25848  0078D6  6B74               	clrf	(??___ftmul+2)& (0+255),b
 25849  0078D8  0100               	movlb	0	; () banked
 25850  0078DA  3570               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 25851  0078DC  0100               	movlb	0	; () banked
 25852  0078DE  3772               	rlcf	??___ftmul& (0+255),f,b
 25853  0078E0  E301               	bnc	u8341
 25854  0078E2  8173               	bsf	(??___ftmul+1)& (0+255),0,b
 25855  0078E4                     u8341:
 25856  0078E4  0100               	movlb	0	; () banked
 25857  0078E6  5172               	movf	??___ftmul& (0+255),w,b
 25858  0078E8  0100               	movlb	0	; () banked
 25859  0078EA  6F7A               	movwf	___ftmul@sign& (0+255),b
 25860  0078EC  0100               	movlb	0	; () banked
 25861  0078EE  517A               	movf	___ftmul@sign& (0+255),w,b
 25862  0078F0  A4D8               	btfss	status,2,c
 25863  0078F2  D00B               	goto	l1765
 25864  0078F4                     u8350:
 25865  0078F4  FFFF               	dw	65535	; assembler added errata NOP
 25866                           
 25867                           ; BSR set to: 0
 25868  0078F6  0E00               	movlw	0
 25869  0078F8  0100               	movlb	0	; () banked
 25870  0078FA  6F6C               	movwf	?___ftmul& (0+255),b
 25871  0078FC  0E00               	movlw	0
 25872  0078FE  0100               	movlb	0	; () banked
 25873  007900  6F6D               	movwf	(?___ftmul+1)& (0+255),b
 25874  007902  0E00               	movlw	0
 25875  007904  0100               	movlb	0	; () banked
 25876  007906  6F6E               	movwf	(?___ftmul+2)& (0+255),b
 25877                           
 25878                           ; BSR set to: 0
 25879  007908  D079               	goto	l8825
 25880  00790A                     l1765:
 25881  00790A  FFFF               	dw	65535	; assembler added errata NOP
 25882                           
 25883                           ; BSR set to: 0
 25884                           
 25885                           ; BSR set to: 0
 25886  00790C  0100               	movlb	0	; () banked
 25887  00790E  517A               	movf	___ftmul@sign& (0+255),w,b
 25888  007910  0F7B               	addlw	123
 25889  007912  0100               	movlb	0	; () banked
 25890  007914  2775               	addwf	___ftmul@exp& (0+255),f,b
 25891                           
 25892                           ; BSR set to: 0
 25893  007916  C06E  F07A         	movff	___ftmul@f1+2,___ftmul@sign
 25894  00791A  0100               	movlb	0	; () banked
 25895  00791C  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
 25896  00791E  0100               	movlb	0	; () banked
 25897  007920  1B7A               	xorwf	___ftmul@sign& (0+255),f,b
 25898  007922  0E80               	movlw	128
 25899  007924  0100               	movlb	0	; () banked
 25900  007926  177A               	andwf	___ftmul@sign& (0+255),f,b
 25901                           
 25902                           ; BSR set to: 0
 25903  007928  0100               	movlb	0	; () banked
 25904  00792A  8F6D               	bsf	(___ftmul@f1+1)& (0+255),7,b
 25905                           
 25906                           ; BSR set to: 0
 25907  00792C  0100               	movlb	0	; () banked
 25908  00792E  8F70               	bsf	(___ftmul@f2+1)& (0+255),7,b
 25909                           
 25910                           ; BSR set to: 0
 25911  007930  0EFF               	movlw	255
 25912  007932  0100               	movlb	0	; () banked
 25913  007934  176F               	andwf	___ftmul@f2& (0+255),f,b
 25914  007936  0EFF               	movlw	255
 25915  007938  0100               	movlb	0	; () banked
 25916  00793A  1770               	andwf	(___ftmul@f2+1)& (0+255),f,b
 25917  00793C  0E00               	movlw	0
 25918  00793E  0100               	movlb	0	; () banked
 25919  007940  1771               	andwf	(___ftmul@f2+2)& (0+255),f,b
 25920                           
 25921                           ; BSR set to: 0
 25922  007942  0E00               	movlw	0
 25923  007944  0100               	movlb	0	; () banked
 25924  007946  6F76               	movwf	___ftmul@f3_as_product& (0+255),b
 25925  007948  0E00               	movlw	0
 25926  00794A  0100               	movlb	0	; () banked
 25927  00794C  6F77               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 25928  00794E  0E00               	movlw	0
 25929  007950  0100               	movlb	0	; () banked
 25930  007952  6F78               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 25931                           
 25932                           ; BSR set to: 0
 25933  007954  0E07               	movlw	7
 25934  007956  0100               	movlb	0	; () banked
 25935  007958  6F79               	movwf	___ftmul@cntr& (0+255),b
 25936  00795A  FFFF               	dw	65535	; assembler added errata NOP
 25937                           
 25938                           ; BSR set to: 0
 25939                           
 25940                           ; BSR set to: 0
 25941  00795C  0100               	movlb	0	; () banked
 25942  00795E  A16C               	btfss	___ftmul@f1& (0+255),0,b
 25943  007960  D00C               	goto	l1767
 25944                           
 25945                           ; BSR set to: 0
 25946  007962  0100               	movlb	0	; () banked
 25947  007964  516F               	movf	___ftmul@f2& (0+255),w,b
 25948  007966  0100               	movlb	0	; () banked
 25949  007968  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
 25950  00796A  0100               	movlb	0	; () banked
 25951  00796C  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
 25952  00796E  0100               	movlb	0	; () banked
 25953  007970  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 25954  007972  0100               	movlb	0	; () banked
 25955  007974  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
 25956  007976  0100               	movlb	0	; () banked
 25957  007978  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 25958  00797A                     l1767:
 25959  00797A  FFFF               	dw	65535	; assembler added errata NOP
 25960                           
 25961                           ; BSR set to: 0
 25962                           
 25963                           ; BSR set to: 0
 25964  00797C  0100               	movlb	0	; () banked
 25965  00797E  90D8               	bcf	status,0,c
 25966  007980  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 25967  007982  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 25968  007984  336C               	rrcf	___ftmul@f1& (0+255),f,b
 25969  007986  0100               	movlb	0	; () banked
 25970  007988  90D8               	bcf	status,0,c
 25971  00798A  376F               	rlcf	___ftmul@f2& (0+255),f,b
 25972  00798C  3770               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 25973  00798E  3771               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 25974                           
 25975                           ; BSR set to: 0
 25976  007990  0100               	movlb	0	; () banked
 25977  007992  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
 25978  007994  D7E2               	goto	l1766
 25979                           
 25980                           ; BSR set to: 0
 25981                           
 25982                           ; BSR set to: 0
 25983  007996  0E09               	movlw	9
 25984  007998  0100               	movlb	0	; () banked
 25985  00799A  6F79               	movwf	___ftmul@cntr& (0+255),b
 25986  00799C  FFFF               	dw	65535	; assembler added errata NOP
 25987                           
 25988                           ; BSR set to: 0
 25989                           
 25990                           ; BSR set to: 0
 25991  00799E  0100               	movlb	0	; () banked
 25992  0079A0  A16C               	btfss	___ftmul@f1& (0+255),0,b
 25993  0079A2  D00C               	goto	l1770
 25994                           
 25995                           ; BSR set to: 0
 25996  0079A4  0100               	movlb	0	; () banked
 25997  0079A6  516F               	movf	___ftmul@f2& (0+255),w,b
 25998  0079A8  0100               	movlb	0	; () banked
 25999  0079AA  2776               	addwf	___ftmul@f3_as_product& (0+255),f,b
 26000  0079AC  0100               	movlb	0	; () banked
 26001  0079AE  5170               	movf	(___ftmul@f2+1)& (0+255),w,b
 26002  0079B0  0100               	movlb	0	; () banked
 26003  0079B2  2377               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 26004  0079B4  0100               	movlb	0	; () banked
 26005  0079B6  5171               	movf	(___ftmul@f2+2)& (0+255),w,b
 26006  0079B8  0100               	movlb	0	; () banked
 26007  0079BA  2378               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 26008  0079BC                     l1770:
 26009  0079BC  FFFF               	dw	65535	; assembler added errata NOP
 26010                           
 26011                           ; BSR set to: 0
 26012                           
 26013                           ; BSR set to: 0
 26014  0079BE  0100               	movlb	0	; () banked
 26015  0079C0  90D8               	bcf	status,0,c
 26016  0079C2  336E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 26017  0079C4  336D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 26018  0079C6  336C               	rrcf	___ftmul@f1& (0+255),f,b
 26019  0079C8  0100               	movlb	0	; () banked
 26020  0079CA  90D8               	bcf	status,0,c
 26021  0079CC  3378               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 26022  0079CE  3377               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 26023  0079D0  3376               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 26024                           
 26025                           ; BSR set to: 0
 26026  0079D2  0100               	movlb	0	; () banked
 26027  0079D4  2F79               	decfsz	___ftmul@cntr& (0+255),f,b
 26028  0079D6  D7E2               	goto	l1769
 26029                           
 26030                           ; BSR set to: 0
 26031                           
 26032                           ; BSR set to: 0
 26033  0079D8  C076  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
 26034  0079DC  C077  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 26035  0079E0  C078  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 26036  0079E4  C075  F01C         	movff	___ftmul@exp,___ftpack@exp
 26037  0079E8  C07A  F01D         	movff	___ftmul@sign,___ftpack@sign
 26038  0079EC  EC51  F034         	call	___ftpack	;wreg free
 26039  0079F0  C019  F06C         	movff	?___ftpack,?___ftmul
 26040  0079F4  C01A  F06D         	movff	?___ftpack+1,?___ftmul+1
 26041  0079F8  C01B  F06E         	movff	?___ftpack+2,?___ftmul+2
 26042  0079FC                     l8825:
 26043  0079FC  FFFF               	dw	65535	; assembler added errata NOP
 26044  0079FE  0012               	return		;funcret
 26045  007A00  FFFF               	dw	65535	; errata NOP
 26046  007A02                     __end_of___ftmul:
 26047                           	opt stack 0
 26048                           tosu	equ	0xFFF
 26049                           tosh	equ	0xFFE
 26050                           tosl	equ	0xFFD
 26051                           pclath	equ	0xFFA
 26052                           tblptru	equ	0xFF8
 26053                           tblptrh	equ	0xFF7
 26054                           tblptrl	equ	0xFF6
 26055                           tablat	equ	0xFF5
 26056                           prodh	equ	0xFF4
 26057                           prodl	equ	0xFF3
 26058                           intcon	equ	0xFF2
 26059                           postinc0	equ	0xFEE
 26060                           wreg	equ	0xFE8
 26061                           indf1	equ	0xFE7
 26062                           fsr1h	equ	0xFE2
 26063                           fsr1l	equ	0xFE1
 26064                           indf2	equ	0xFDF
 26065                           postinc2	equ	0xFDE
 26066                           postdec2	equ	0xFDD
 26067                           plusw2	equ	0xFDB
 26068                           fsr2h	equ	0xFDA
 26069                           fsr2l	equ	0xFD9
 26070                           status	equ	0xFD8
 26071                           
 26072 ;; *************** function _Get_Control_Voltage *****************
 26073 ;; Defined at:
 26074 ;;		line 145 in file "Get_Voltages.c"
 26075 ;; Parameters:    Size  Location     Type
 26076 ;;		None
 26077 ;; Auto vars:     Size  Location     Type
 26078 ;;  volt            3   46[BANK0 ] float 
 26079 ;;  count           1   45[BANK0 ] unsigned char 
 26080 ;; Return value:  Size  Location     Type
 26081 ;;                  3   42[BANK0 ] float 
 26082 ;; Registers used:
 26083 ;;		wreg, status,2, status,0, cstack
 26084 ;; Tracked objects:
 26085 ;;		On entry : 0/0
 26086 ;;		On exit  : 0/0
 26087 ;;		Unchanged: 0/0
 26088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26089 ;;      Params:         0       3       0       0       0       0       0
 26090 ;;      Locals:         0       4       0       0       0       0       0
 26091 ;;      Temps:          1       0       0       0       0       0       0
 26092 ;;      Totals:         1       7       0       0       0       0       0
 26093 ;;Total ram usage:        8 bytes
 26094 ;; Hardware stack levels used:    1
 26095 ;; Hardware stack levels required when called:    3
 26096 ;; This function calls:
 26097 ;;		_Get_Voltage_VL1
 26098 ;;		_Get_Voltage_VL2
 26099 ;;		_Get_Voltage_VL3
 26100 ;;		___ftadd
 26101 ;;		___ftdiv
 26102 ;;		___lbtoft
 26103 ;; This function is called by:
 26104 ;;		_get_list
 26105 ;;		_Control_Loop
 26106 ;; This function uses a non-reentrant model
 26107 ;;
 26108                           
 26109                           	psect	text152
 26110  0072AA                     __ptext152:
 26111                           	opt stack 0
 26112  0072AA                     _Get_Control_Voltage:
 26113                           	opt stack 0
 26114  0072AA  FFFF               	dw	65535	; assembler added errata NOP
 26115                           
 26116                           ;Get_Voltages.c: 147: float volt=0.0;
 26117                           
 26118                           ;incstack = 0
 26119  0072AC  0E00               	movlw	0
 26120  0072AE  0100               	movlb	0	; () banked
 26121  0072B0  6F8E               	movwf	Get_Control_Voltage@volt& (0+255),b
 26122  0072B2  0E00               	movlw	0
 26123  0072B4  0100               	movlb	0	; () banked
 26124  0072B6  6F8F               	movwf	(Get_Control_Voltage@volt+1)& (0+255),b
 26125  0072B8  0E00               	movlw	0
 26126  0072BA  0100               	movlb	0	; () banked
 26127  0072BC  6F90               	movwf	(Get_Control_Voltage@volt+2)& (0+255),b
 26128                           
 26129                           ;Get_Voltages.c: 148: char count=3;
 26130  0072BE  0E03               	movlw	3
 26131  0072C0  0100               	movlb	0	; () banked
 26132  0072C2  6F8D               	movwf	Get_Control_Voltage@count& (0+255),b
 26133                           
 26134                           ; BSR set to: 0
 26135                           ;Get_Voltages.c: 150: if(status.data&0b00000011){
 26136  0072C4  C0FC  F02D         	movff	_status,??_Get_Control_Voltage
 26137  0072C8  0E03               	movlw	3
 26138  0072CA  162D               	andwf	??_Get_Control_Voltage,f,c
 26139  0072CC  B4D8               	btfsc	status,2,c
 26140  0072CE  D003               	goto	l464
 26141                           
 26142                           ; BSR set to: 0
 26143                           ;Get_Voltages.c: 151: count--;
 26144  0072D0  0100               	movlb	0	; () banked
 26145  0072D2  078D               	decf	Get_Control_Voltage@count& (0+255),f,b
 26146                           
 26147                           ;Get_Voltages.c: 152: }
 26148  0072D4  D017               	goto	l465
 26149  0072D6                     l464:
 26150  0072D6  FFFF               	dw	65535	; assembler added errata NOP
 26151                           
 26152                           ; BSR set to: 0
 26153                           ;Get_Voltages.c: 153: else{
 26154                           ;Get_Voltages.c: 154: volt=volt+Get_Voltage_VL1();
 26155                           
 26156                           ; BSR set to: 0
 26157  0072D8  EC3A  F026         	call	_Get_Voltage_VL1	;wreg free
 26158  0072DC  C019  F060         	movff	?_Get_Voltage_VL1,___ftadd@f1
 26159  0072E0  C01A  F061         	movff	?_Get_Voltage_VL1+1,___ftadd@f1+1
 26160  0072E4  C01B  F062         	movff	?_Get_Voltage_VL1+2,___ftadd@f1+2
 26161  0072E8  C08E  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 26162  0072EC  C08F  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 26163  0072F0  C090  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 26164  0072F4  EC45  F016         	call	___ftadd	;wreg free
 26165  0072F8  C060  F08E         	movff	?___ftadd,Get_Control_Voltage@volt
 26166  0072FC  C061  F08F         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 26167  007300  C062  F090         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 26168  007304                     l465:
 26169  007304  FFFF               	dw	65535	; assembler added errata NOP
 26170                           
 26171                           ;Get_Voltages.c: 155: }
 26172                           ;Get_Voltages.c: 157: if(status.data&0b00001100){
 26173  007306  C0FC  F02D         	movff	_status,??_Get_Control_Voltage
 26174  00730A  0E0C               	movlw	12
 26175  00730C  162D               	andwf	??_Get_Control_Voltage,f,c
 26176  00730E  B4D8               	btfsc	status,2,c
 26177  007310  D003               	goto	l466
 26178                           
 26179                           ;Get_Voltages.c: 158: count--;
 26180  007312  0100               	movlb	0	; () banked
 26181  007314  078D               	decf	Get_Control_Voltage@count& (0+255),f,b
 26182                           
 26183                           ;Get_Voltages.c: 159: }
 26184  007316  D017               	goto	l467
 26185  007318                     l466:
 26186  007318  FFFF               	dw	65535	; assembler added errata NOP
 26187                           
 26188                           ;Get_Voltages.c: 160: else{
 26189                           ;Get_Voltages.c: 161: volt=volt+Get_Voltage_VL2();
 26190                           
 26191                           ; BSR set to: 0
 26192  00731A  EC43  F026         	call	_Get_Voltage_VL2	;wreg free
 26193  00731E  C019  F060         	movff	?_Get_Voltage_VL2,___ftadd@f1
 26194  007322  C01A  F061         	movff	?_Get_Voltage_VL2+1,___ftadd@f1+1
 26195  007326  C01B  F062         	movff	?_Get_Voltage_VL2+2,___ftadd@f1+2
 26196  00732A  C08E  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 26197  00732E  C08F  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 26198  007332  C090  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 26199  007336  EC45  F016         	call	___ftadd	;wreg free
 26200  00733A  C060  F08E         	movff	?___ftadd,Get_Control_Voltage@volt
 26201  00733E  C061  F08F         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 26202  007342  C062  F090         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 26203  007346                     l467:
 26204  007346  FFFF               	dw	65535	; assembler added errata NOP
 26205                           
 26206                           ;Get_Voltages.c: 162: }
 26207                           ;Get_Voltages.c: 164: if(status.data&0b00110000){
 26208  007348  C0FC  F02D         	movff	_status,??_Get_Control_Voltage
 26209  00734C  0E30               	movlw	48
 26210  00734E  162D               	andwf	??_Get_Control_Voltage,f,c
 26211  007350  B4D8               	btfsc	status,2,c
 26212  007352  D003               	goto	l468
 26213                           
 26214                           ;Get_Voltages.c: 165: count--;
 26215  007354  0100               	movlb	0	; () banked
 26216  007356  078D               	decf	Get_Control_Voltage@count& (0+255),f,b
 26217                           
 26218                           ;Get_Voltages.c: 166: }
 26219  007358  D017               	goto	l469
 26220  00735A                     l468:
 26221  00735A  FFFF               	dw	65535	; assembler added errata NOP
 26222                           
 26223                           ;Get_Voltages.c: 167: else{
 26224                           ;Get_Voltages.c: 168: volt=volt+Get_Voltage_VL3();
 26225                           
 26226                           ; BSR set to: 0
 26227  00735C  EC4C  F026         	call	_Get_Voltage_VL3	;wreg free
 26228  007360  C019  F060         	movff	?_Get_Voltage_VL3,___ftadd@f1
 26229  007364  C01A  F061         	movff	?_Get_Voltage_VL3+1,___ftadd@f1+1
 26230  007368  C01B  F062         	movff	?_Get_Voltage_VL3+2,___ftadd@f1+2
 26231  00736C  C08E  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 26232  007370  C08F  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 26233  007374  C090  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 26234  007378  EC45  F016         	call	___ftadd	;wreg free
 26235  00737C  C060  F08E         	movff	?___ftadd,Get_Control_Voltage@volt
 26236  007380  C061  F08F         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 26237  007384  C062  F090         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 26238  007388                     l469:
 26239  007388  FFFF               	dw	65535	; assembler added errata NOP
 26240                           
 26241                           ;Get_Voltages.c: 169: }
 26242                           ;Get_Voltages.c: 170: volt=volt/(float)count;
 26243  00738A  C08E  F07B         	movff	Get_Control_Voltage@volt,___ftdiv@f1
 26244  00738E  C08F  F07C         	movff	Get_Control_Voltage@volt+1,___ftdiv@f1+1
 26245  007392  C090  F07D         	movff	Get_Control_Voltage@volt+2,___ftdiv@f1+2
 26246  007396  0100               	movlb	0	; () banked
 26247  007398  518D               	movf	Get_Control_Voltage@count& (0+255),w,b
 26248  00739A  ECD3  F028         	call	___lbtoft
 26249  00739E  C021  F07E         	movff	?___lbtoft,___ftdiv@f2
 26250  0073A2  C022  F07F         	movff	?___lbtoft+1,___ftdiv@f2+1
 26251  0073A6  C023  F080         	movff	?___lbtoft+2,___ftdiv@f2+2
 26252  0073AA  ECB0  F03B         	call	___ftdiv	;wreg free
 26253  0073AE  C07B  F08E         	movff	?___ftdiv,Get_Control_Voltage@volt
 26254  0073B2  C07C  F08F         	movff	?___ftdiv+1,Get_Control_Voltage@volt+1
 26255  0073B6  C07D  F090         	movff	?___ftdiv+2,Get_Control_Voltage@volt+2
 26256                           
 26257                           ;Get_Voltages.c: 171: return volt;
 26258  0073BA  C08E  F08A         	movff	Get_Control_Voltage@volt,?_Get_Control_Voltage
 26259  0073BE  C08F  F08B         	movff	Get_Control_Voltage@volt+1,?_Get_Control_Voltage+1
 26260  0073C2  C090  F08C         	movff	Get_Control_Voltage@volt+2,?_Get_Control_Voltage+2
 26261  0073C6  0012               	return		;funcret
 26262  0073C8  FFFF               	dw	65535	; errata NOP
 26263  0073CA                     __end_of_Get_Control_Voltage:
 26264                           	opt stack 0
 26265                           tosu	equ	0xFFF
 26266                           tosh	equ	0xFFE
 26267                           tosl	equ	0xFFD
 26268                           pclath	equ	0xFFA
 26269                           tblptru	equ	0xFF8
 26270                           tblptrh	equ	0xFF7
 26271                           tblptrl	equ	0xFF6
 26272                           tablat	equ	0xFF5
 26273                           prodh	equ	0xFF4
 26274                           prodl	equ	0xFF3
 26275                           intcon	equ	0xFF2
 26276                           postinc0	equ	0xFEE
 26277                           wreg	equ	0xFE8
 26278                           indf1	equ	0xFE7
 26279                           fsr1h	equ	0xFE2
 26280                           fsr1l	equ	0xFE1
 26281                           indf2	equ	0xFDF
 26282                           postinc2	equ	0xFDE
 26283                           postdec2	equ	0xFDD
 26284                           plusw2	equ	0xFDB
 26285                           fsr2h	equ	0xFDA
 26286                           fsr2l	equ	0xFD9
 26287                           status	equ	0xFD8
 26288                           
 26289 ;; *************** function ___lbtoft *****************
 26290 ;; Defined at:
 26291 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lbtoft.c"
 26292 ;; Parameters:    Size  Location     Type
 26293 ;;  c               1    wreg     unsigned char 
 26294 ;; Auto vars:     Size  Location     Type
 26295 ;;  c               1   35[COMRAM] unsigned char 
 26296 ;; Return value:  Size  Location     Type
 26297 ;;                  3   32[COMRAM] float 
 26298 ;; Registers used:
 26299 ;;		wreg, status,2, status,0, cstack
 26300 ;; Tracked objects:
 26301 ;;		On entry : 0/0
 26302 ;;		On exit  : 0/0
 26303 ;;		Unchanged: 0/0
 26304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26305 ;;      Params:         3       0       0       0       0       0       0
 26306 ;;      Locals:         1       0       0       0       0       0       0
 26307 ;;      Temps:          0       0       0       0       0       0       0
 26308 ;;      Totals:         4       0       0       0       0       0       0
 26309 ;;Total ram usage:        4 bytes
 26310 ;; Hardware stack levels used:    1
 26311 ;; Hardware stack levels required when called:    2
 26312 ;; This function calls:
 26313 ;;		___ftpack
 26314 ;; This function is called by:
 26315 ;;		_Get_Control_Voltage
 26316 ;; This function uses a non-reentrant model
 26317 ;;
 26318                           
 26319                           	psect	text153
 26320  0051A6                     __ptext153:
 26321                           	opt stack 0
 26322  0051A6                     ___lbtoft:
 26323                           	opt stack 0
 26324  0051A6  FFFF               	dw	65535	; assembler added errata NOP
 26325                           
 26326                           ;incstack = 0
 26327                           ;___lbtoft@c stored from wreg
 26328  0051A8  6E24               	movwf	___lbtoft@c,c
 26329  0051AA  5024               	movf	___lbtoft@c,w,c
 26330  0051AC  6E19               	movwf	___ftpack@arg,c
 26331  0051AE  6A1A               	clrf	___ftpack@arg+1,c
 26332  0051B0  6A1B               	clrf	___ftpack@arg+2,c
 26333  0051B2  0E8E               	movlw	142
 26334  0051B4  6E1C               	movwf	___ftpack@exp,c
 26335  0051B6  0E00               	movlw	0
 26336  0051B8  6E1D               	movwf	___ftpack@sign,c
 26337  0051BA  EC51  F034         	call	___ftpack	;wreg free
 26338  0051BE  C019  F021         	movff	?___ftpack,?___lbtoft
 26339  0051C2  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
 26340  0051C6  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
 26341  0051CA  0012               	return		;funcret
 26342  0051CC  FFFF               	dw	65535	; errata NOP
 26343  0051CE                     __end_of___lbtoft:
 26344                           	opt stack 0
 26345                           tosu	equ	0xFFF
 26346                           tosh	equ	0xFFE
 26347                           tosl	equ	0xFFD
 26348                           pclath	equ	0xFFA
 26349                           tblptru	equ	0xFF8
 26350                           tblptrh	equ	0xFF7
 26351                           tblptrl	equ	0xFF6
 26352                           tablat	equ	0xFF5
 26353                           prodh	equ	0xFF4
 26354                           prodl	equ	0xFF3
 26355                           intcon	equ	0xFF2
 26356                           postinc0	equ	0xFEE
 26357                           wreg	equ	0xFE8
 26358                           indf1	equ	0xFE7
 26359                           fsr1h	equ	0xFE2
 26360                           fsr1l	equ	0xFE1
 26361                           indf2	equ	0xFDF
 26362                           postinc2	equ	0xFDE
 26363                           postdec2	equ	0xFDD
 26364                           plusw2	equ	0xFDB
 26365                           fsr2h	equ	0xFDA
 26366                           fsr2l	equ	0xFD9
 26367                           status	equ	0xFD8
 26368                           
 26369 ;; *************** function ___ftdiv *****************
 26370 ;; Defined at:
 26371 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
 26372 ;; Parameters:    Size  Location     Type
 26373 ;;  f1              3   27[BANK0 ] float 
 26374 ;;  f2              3   30[BANK0 ] float 
 26375 ;; Auto vars:     Size  Location     Type
 26376 ;;  f3              3   37[BANK0 ] float 
 26377 ;;  sign            1   41[BANK0 ] unsigned char 
 26378 ;;  exp             1   40[BANK0 ] unsigned char 
 26379 ;;  cntr            1   36[BANK0 ] unsigned char 
 26380 ;; Return value:  Size  Location     Type
 26381 ;;                  3   27[BANK0 ] float 
 26382 ;; Registers used:
 26383 ;;		wreg, status,2, status,0, cstack
 26384 ;; Tracked objects:
 26385 ;;		On entry : 0/0
 26386 ;;		On exit  : 0/0
 26387 ;;		Unchanged: 0/0
 26388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26389 ;;      Params:         0       6       0       0       0       0       0
 26390 ;;      Locals:         0       6       0       0       0       0       0
 26391 ;;      Temps:          0       3       0       0       0       0       0
 26392 ;;      Totals:         0      15       0       0       0       0       0
 26393 ;;Total ram usage:       15 bytes
 26394 ;; Hardware stack levels used:    1
 26395 ;; Hardware stack levels required when called:    2
 26396 ;; This function calls:
 26397 ;;		___ftpack
 26398 ;; This function is called by:
 26399 ;;		_Get_Control_Voltage
 26400 ;;		_Get_Voltage_Data
 26401 ;;		_main
 26402 ;;		_PID_Controller
 26403 ;;		_strtod
 26404 ;; This function uses a non-reentrant model
 26405 ;;
 26406                           
 26407                           	psect	text154
 26408  007760                     __ptext154:
 26409                           	opt stack 0
 26410  007760                     ___ftdiv:
 26411                           	opt stack 0
 26412  007760  FFFF               	dw	65535	; assembler added errata NOP
 26413                           
 26414                           ;incstack = 0
 26415  007762  C07D  F081         	movff	___ftdiv@f1+2,??___ftdiv
 26416  007766  0100               	movlb	0	; () banked
 26417  007768  6B82               	clrf	(??___ftdiv+1)& (0+255),b
 26418  00776A  6B83               	clrf	(??___ftdiv+2)& (0+255),b
 26419  00776C  0100               	movlb	0	; () banked
 26420  00776E  357C               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 26421  007770  0100               	movlb	0	; () banked
 26422  007772  3781               	rlcf	??___ftdiv& (0+255),f,b
 26423  007774  E301               	bnc	u9051
 26424  007776  8182               	bsf	(??___ftdiv+1)& (0+255),0,b
 26425  007778                     u9051:
 26426  007778  0100               	movlb	0	; () banked
 26427  00777A  5181               	movf	??___ftdiv& (0+255),w,b
 26428  00777C  0100               	movlb	0	; () banked
 26429  00777E  6F88               	movwf	___ftdiv@exp& (0+255),b
 26430  007780  0100               	movlb	0	; () banked
 26431  007782  5188               	movf	___ftdiv@exp& (0+255),w,b
 26432  007784  B4D8               	btfsc	status,2,c
 26433  007786  D013               	goto	u9080
 26434                           
 26435                           ; BSR set to: 0
 26436                           
 26437                           ; BSR set to: 0
 26438                           
 26439                           ; BSR set to: 0
 26440                           
 26441                           ; BSR set to: 0
 26442  007788  C080  F081         	movff	___ftdiv@f2+2,??___ftdiv
 26443  00778C  0100               	movlb	0	; () banked
 26444  00778E  6B82               	clrf	(??___ftdiv+1)& (0+255),b
 26445  007790  6B83               	clrf	(??___ftdiv+2)& (0+255),b
 26446  007792  0100               	movlb	0	; () banked
 26447  007794  357F               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 26448  007796  0100               	movlb	0	; () banked
 26449  007798  3781               	rlcf	??___ftdiv& (0+255),f,b
 26450  00779A  E301               	bnc	u9071
 26451  00779C  8182               	bsf	(??___ftdiv+1)& (0+255),0,b
 26452  00779E                     u9071:
 26453  00779E  0100               	movlb	0	; () banked
 26454  0077A0  5181               	movf	??___ftdiv& (0+255),w,b
 26455  0077A2  0100               	movlb	0	; () banked
 26456  0077A4  6F89               	movwf	___ftdiv@sign& (0+255),b
 26457  0077A6  0100               	movlb	0	; () banked
 26458  0077A8  5189               	movf	___ftdiv@sign& (0+255),w,b
 26459  0077AA  A4D8               	btfss	status,2,c
 26460  0077AC  D00B               	goto	l1733
 26461  0077AE                     u9080:
 26462  0077AE  FFFF               	dw	65535	; assembler added errata NOP
 26463                           
 26464                           ; BSR set to: 0
 26465  0077B0  0E00               	movlw	0
 26466  0077B2  0100               	movlb	0	; () banked
 26467  0077B4  6F7B               	movwf	?___ftdiv& (0+255),b
 26468  0077B6  0E00               	movlw	0
 26469  0077B8  0100               	movlb	0	; () banked
 26470  0077BA  6F7C               	movwf	(?___ftdiv+1)& (0+255),b
 26471  0077BC  0E00               	movlw	0
 26472  0077BE  0100               	movlb	0	; () banked
 26473  0077C0  6F7D               	movwf	(?___ftdiv+2)& (0+255),b
 26474                           
 26475                           ; BSR set to: 0
 26476  0077C2  D06E               	goto	l9417
 26477  0077C4                     l1733:
 26478  0077C4  FFFF               	dw	65535	; assembler added errata NOP
 26479                           
 26480                           ; BSR set to: 0
 26481                           
 26482                           ; BSR set to: 0
 26483  0077C6  0E00               	movlw	0
 26484  0077C8  0100               	movlb	0	; () banked
 26485  0077CA  6F85               	movwf	___ftdiv@f3& (0+255),b
 26486  0077CC  0E00               	movlw	0
 26487  0077CE  0100               	movlb	0	; () banked
 26488  0077D0  6F86               	movwf	(___ftdiv@f3+1)& (0+255),b
 26489  0077D2  0E00               	movlw	0
 26490  0077D4  0100               	movlb	0	; () banked
 26491  0077D6  6F87               	movwf	(___ftdiv@f3+2)& (0+255),b
 26492                           
 26493                           ; BSR set to: 0
 26494  0077D8  0100               	movlb	0	; () banked
 26495  0077DA  5189               	movf	___ftdiv@sign& (0+255),w,b
 26496  0077DC  0F89               	addlw	137
 26497  0077DE  0100               	movlb	0	; () banked
 26498  0077E0  5F88               	subwf	___ftdiv@exp& (0+255),f,b
 26499                           
 26500                           ; BSR set to: 0
 26501  0077E2  C07D  F089         	movff	___ftdiv@f1+2,___ftdiv@sign
 26502                           
 26503                           ; BSR set to: 0
 26504  0077E6  0100               	movlb	0	; () banked
 26505  0077E8  5180               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26506  0077EA  0100               	movlb	0	; () banked
 26507  0077EC  1B89               	xorwf	___ftdiv@sign& (0+255),f,b
 26508                           
 26509                           ; BSR set to: 0
 26510  0077EE  0E80               	movlw	128
 26511  0077F0  0100               	movlb	0	; () banked
 26512  0077F2  1789               	andwf	___ftdiv@sign& (0+255),f,b
 26513                           
 26514                           ; BSR set to: 0
 26515  0077F4  0100               	movlb	0	; () banked
 26516  0077F6  8F7C               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 26517                           
 26518                           ; BSR set to: 0
 26519  0077F8  0EFF               	movlw	255
 26520  0077FA  0100               	movlb	0	; () banked
 26521  0077FC  177B               	andwf	___ftdiv@f1& (0+255),f,b
 26522  0077FE  0EFF               	movlw	255
 26523  007800  0100               	movlb	0	; () banked
 26524  007802  177C               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 26525  007804  0E00               	movlw	0
 26526  007806  0100               	movlb	0	; () banked
 26527  007808  177D               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 26528                           
 26529                           ; BSR set to: 0
 26530  00780A  0100               	movlb	0	; () banked
 26531  00780C  8F7F               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 26532                           
 26533                           ; BSR set to: 0
 26534  00780E  0EFF               	movlw	255
 26535  007810  0100               	movlb	0	; () banked
 26536  007812  177E               	andwf	___ftdiv@f2& (0+255),f,b
 26537  007814  0EFF               	movlw	255
 26538  007816  0100               	movlb	0	; () banked
 26539  007818  177F               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 26540  00781A  0E00               	movlw	0
 26541  00781C  0100               	movlb	0	; () banked
 26542  00781E  1780               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 26543                           
 26544                           ; BSR set to: 0
 26545  007820  0E18               	movlw	24
 26546  007822  0100               	movlb	0	; () banked
 26547  007824  6F84               	movwf	___ftdiv@cntr& (0+255),b
 26548  007826  FFFF               	dw	65535	; assembler added errata NOP
 26549                           
 26550                           ; BSR set to: 0
 26551                           
 26552                           ; BSR set to: 0
 26553  007828  0100               	movlb	0	; () banked
 26554  00782A  90D8               	bcf	status,0,c
 26555  00782C  3785               	rlcf	___ftdiv@f3& (0+255),f,b
 26556  00782E  3786               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 26557  007830  3787               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 26558                           
 26559                           ; BSR set to: 0
 26560  007832  0100               	movlb	0	; () banked
 26561  007834  517E               	movf	___ftdiv@f2& (0+255),w,b
 26562  007836  0100               	movlb	0	; () banked
 26563  007838  5D7B               	subwf	___ftdiv@f1& (0+255),w,b
 26564  00783A  0100               	movlb	0	; () banked
 26565  00783C  517F               	movf	(___ftdiv@f2+1)& (0+255),w,b
 26566  00783E  0100               	movlb	0	; () banked
 26567  007840  597C               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 26568  007842  0100               	movlb	0	; () banked
 26569  007844  5180               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26570  007846  0100               	movlb	0	; () banked
 26571  007848  597D               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 26572  00784A  A0D8               	btfss	status,0,c
 26573  00784C  D00E               	goto	l1735
 26574                           
 26575                           ; BSR set to: 0
 26576  00784E  0100               	movlb	0	; () banked
 26577  007850  517E               	movf	___ftdiv@f2& (0+255),w,b
 26578  007852  0100               	movlb	0	; () banked
 26579  007854  5F7B               	subwf	___ftdiv@f1& (0+255),f,b
 26580  007856  0100               	movlb	0	; () banked
 26581  007858  517F               	movf	(___ftdiv@f2+1)& (0+255),w,b
 26582  00785A  0100               	movlb	0	; () banked
 26583  00785C  5B7C               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 26584  00785E  0100               	movlb	0	; () banked
 26585  007860  5180               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26586  007862  0100               	movlb	0	; () banked
 26587  007864  5B7D               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 26588                           
 26589                           ; BSR set to: 0
 26590  007866  0100               	movlb	0	; () banked
 26591  007868  8185               	bsf	___ftdiv@f3& (0+255),0,b
 26592  00786A                     l1735:
 26593  00786A  FFFF               	dw	65535	; assembler added errata NOP
 26594                           
 26595                           ; BSR set to: 0
 26596  00786C  0100               	movlb	0	; () banked
 26597  00786E  90D8               	bcf	status,0,c
 26598  007870  377B               	rlcf	___ftdiv@f1& (0+255),f,b
 26599  007872  377C               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 26600  007874  377D               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 26601                           
 26602                           ; BSR set to: 0
 26603  007876  0100               	movlb	0	; () banked
 26604  007878  2F84               	decfsz	___ftdiv@cntr& (0+255),f,b
 26605  00787A  D7D5               	goto	l1734
 26606                           
 26607                           ; BSR set to: 0
 26608                           
 26609                           ; BSR set to: 0
 26610  00787C  C085  F019         	movff	___ftdiv@f3,___ftpack@arg
 26611  007880  C086  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
 26612  007884  C087  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
 26613  007888  C088  F01C         	movff	___ftdiv@exp,___ftpack@exp
 26614  00788C  C089  F01D         	movff	___ftdiv@sign,___ftpack@sign
 26615  007890  EC51  F034         	call	___ftpack	;wreg free
 26616  007894  C019  F07B         	movff	?___ftpack,?___ftdiv
 26617  007898  C01A  F07C         	movff	?___ftpack+1,?___ftdiv+1
 26618  00789C  C01B  F07D         	movff	?___ftpack+2,?___ftdiv+2
 26619  0078A0                     l9417:
 26620  0078A0  FFFF               	dw	65535	; assembler added errata NOP
 26621  0078A2  0012               	return		;funcret
 26622  0078A4  FFFF               	dw	65535	; errata NOP
 26623  0078A6                     __end_of___ftdiv:
 26624                           	opt stack 0
 26625                           tosu	equ	0xFFF
 26626                           tosh	equ	0xFFE
 26627                           tosl	equ	0xFFD
 26628                           pclath	equ	0xFFA
 26629                           tblptru	equ	0xFF8
 26630                           tblptrh	equ	0xFF7
 26631                           tblptrl	equ	0xFF6
 26632                           tablat	equ	0xFF5
 26633                           prodh	equ	0xFF4
 26634                           prodl	equ	0xFF3
 26635                           intcon	equ	0xFF2
 26636                           postinc0	equ	0xFEE
 26637                           wreg	equ	0xFE8
 26638                           indf1	equ	0xFE7
 26639                           fsr1h	equ	0xFE2
 26640                           fsr1l	equ	0xFE1
 26641                           indf2	equ	0xFDF
 26642                           postinc2	equ	0xFDE
 26643                           postdec2	equ	0xFDD
 26644                           plusw2	equ	0xFDB
 26645                           fsr2h	equ	0xFDA
 26646                           fsr2l	equ	0xFD9
 26647                           status	equ	0xFD8
 26648                           
 26649 ;; *************** function ___ftadd *****************
 26650 ;; Defined at:
 26651 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
 26652 ;; Parameters:    Size  Location     Type
 26653 ;;  f1              3    0[BANK0 ] float 
 26654 ;;  f2              3    3[BANK0 ] float 
 26655 ;; Auto vars:     Size  Location     Type
 26656 ;;  exp1            1   11[BANK0 ] unsigned char 
 26657 ;;  exp2            1   10[BANK0 ] unsigned char 
 26658 ;;  sign            1    9[BANK0 ] unsigned char 
 26659 ;; Return value:  Size  Location     Type
 26660 ;;                  3    0[BANK0 ] float 
 26661 ;; Registers used:
 26662 ;;		wreg, status,2, status,0, cstack
 26663 ;; Tracked objects:
 26664 ;;		On entry : 0/0
 26665 ;;		On exit  : 0/0
 26666 ;;		Unchanged: 0/0
 26667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26668 ;;      Params:         0       6       0       0       0       0       0
 26669 ;;      Locals:         0       3       0       0       0       0       0
 26670 ;;      Temps:          0       3       0       0       0       0       0
 26671 ;;      Totals:         0      12       0       0       0       0       0
 26672 ;;Total ram usage:       12 bytes
 26673 ;; Hardware stack levels used:    1
 26674 ;; Hardware stack levels required when called:    2
 26675 ;; This function calls:
 26676 ;;		___ftpack
 26677 ;; This function is called by:
 26678 ;;		_LowPass_VL1
 26679 ;;		_LowPass_VL2
 26680 ;;		_LowPass_VL3
 26681 ;;		_LowPass_Vin
 26682 ;;		_Get_Control_Voltage
 26683 ;;		_Get_Voltage_Data
 26684 ;;		_PID_Controller
 26685 ;;		__doprnt
 26686 ;;		___ftsub
 26687 ;; This function uses a non-reentrant model
 26688 ;;
 26689                           
 26690                           	psect	text155
 26691  002C8A                     __ptext155:
 26692                           	opt stack 0
 26693  002C8A                     ___ftadd:
 26694                           	opt stack 0
 26695  002C8A  FFFF               	dw	65535	; assembler added errata NOP
 26696                           
 26697                           ;incstack = 0
 26698  002C8C  C062  F066         	movff	___ftadd@f1+2,??___ftadd
 26699  002C90  0100               	movlb	0	; () banked
 26700  002C92  6B67               	clrf	(??___ftadd+1)& (0+255),b
 26701  002C94  6B68               	clrf	(??___ftadd+2)& (0+255),b
 26702  002C96  0100               	movlb	0	; () banked
 26703  002C98  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 26704  002C9A  0100               	movlb	0	; () banked
 26705  002C9C  3766               	rlcf	??___ftadd& (0+255),f,b
 26706  002C9E  E301               	bnc	u8111
 26707  002CA0  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 26708  002CA2                     u8111:
 26709  002CA2  0100               	movlb	0	; () banked
 26710  002CA4  5166               	movf	??___ftadd& (0+255),w,b
 26711  002CA6  0100               	movlb	0	; () banked
 26712  002CA8  6F6B               	movwf	___ftadd@exp1& (0+255),b
 26713  002CAA  C065  F066         	movff	___ftadd@f2+2,??___ftadd
 26714  002CAE  0100               	movlb	0	; () banked
 26715  002CB0  6B67               	clrf	(??___ftadd+1)& (0+255),b
 26716  002CB2  6B68               	clrf	(??___ftadd+2)& (0+255),b
 26717  002CB4  0100               	movlb	0	; () banked
 26718  002CB6  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 26719  002CB8  0100               	movlb	0	; () banked
 26720  002CBA  3766               	rlcf	??___ftadd& (0+255),f,b
 26721  002CBC  E301               	bnc	u8121
 26722  002CBE  8167               	bsf	(??___ftadd+1)& (0+255),0,b
 26723  002CC0                     u8121:
 26724  002CC0  0100               	movlb	0	; () banked
 26725  002CC2  5166               	movf	??___ftadd& (0+255),w,b
 26726  002CC4  0100               	movlb	0	; () banked
 26727  002CC6  6F6A               	movwf	___ftadd@exp2& (0+255),b
 26728                           
 26729                           ; BSR set to: 0
 26730  002CC8  0100               	movlb	0	; () banked
 26731  002CCA  516B               	movf	___ftadd@exp1& (0+255),w,b
 26732  002CCC  0100               	movlb	0	; () banked
 26733  002CCE  B4D8               	btfsc	status,2,c
 26734  002CD0  D011               	goto	u8150
 26735                           
 26736                           ; BSR set to: 0
 26737  002CD2  0100               	movlb	0	; () banked
 26738  002CD4  516A               	movf	___ftadd@exp2& (0+255),w,b
 26739  002CD6  0100               	movlb	0	; () banked
 26740  002CD8  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 26741  002CDA  B0D8               	btfsc	status,0,c
 26742  002CDC  D013               	goto	l1698
 26743                           
 26744                           ; BSR set to: 0
 26745  002CDE  0100               	movlb	0	; () banked
 26746  002CE0  516B               	movf	___ftadd@exp1& (0+255),w,b
 26747  002CE2  0800               	sublw	0
 26748  002CE4  0100               	movlb	0	; () banked
 26749  002CE6  256A               	addwf	___ftadd@exp2& (0+255),w,b
 26750  002CE8  0100               	movlb	0	; () banked
 26751  002CEA  6F66               	movwf	??___ftadd& (0+255),b
 26752  002CEC  0E18               	movlw	24
 26753  002CEE  0100               	movlb	0	; () banked
 26754  002CF0  6566               	cpfsgt	??___ftadd& (0+255),b
 26755  002CF2  D008               	goto	l1698
 26756  002CF4                     u8150:
 26757  002CF4  FFFF               	dw	65535	; assembler added errata NOP
 26758                           
 26759                           ; BSR set to: 0
 26760  002CF6  C063  F060         	movff	___ftadd@f2,?___ftadd
 26761  002CFA  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
 26762  002CFE  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
 26763  002D02  D108               	goto	l8777
 26764  002D04                     l1698:
 26765  002D04  FFFF               	dw	65535	; assembler added errata NOP
 26766                           
 26767                           ; BSR set to: 0
 26768                           
 26769                           ; BSR set to: 0
 26770  002D06  0100               	movlb	0	; () banked
 26771  002D08  516A               	movf	___ftadd@exp2& (0+255),w,b
 26772  002D0A  0100               	movlb	0	; () banked
 26773  002D0C  B4D8               	btfsc	status,2,c
 26774  002D0E  D011               	goto	u8180
 26775                           
 26776                           ; BSR set to: 0
 26777  002D10  0100               	movlb	0	; () banked
 26778  002D12  516B               	movf	___ftadd@exp1& (0+255),w,b
 26779  002D14  0100               	movlb	0	; () banked
 26780  002D16  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 26781  002D18  B0D8               	btfsc	status,0,c
 26782  002D1A  D013               	goto	l1702
 26783                           
 26784                           ; BSR set to: 0
 26785  002D1C  0100               	movlb	0	; () banked
 26786  002D1E  516A               	movf	___ftadd@exp2& (0+255),w,b
 26787  002D20  0800               	sublw	0
 26788  002D22  0100               	movlb	0	; () banked
 26789  002D24  256B               	addwf	___ftadd@exp1& (0+255),w,b
 26790  002D26  0100               	movlb	0	; () banked
 26791  002D28  6F66               	movwf	??___ftadd& (0+255),b
 26792  002D2A  0E18               	movlw	24
 26793  002D2C  0100               	movlb	0	; () banked
 26794  002D2E  6566               	cpfsgt	??___ftadd& (0+255),b
 26795  002D30  D008               	goto	l1702
 26796  002D32                     u8180:
 26797  002D32  FFFF               	dw	65535	; assembler added errata NOP
 26798                           
 26799                           ; BSR set to: 0
 26800  002D34  C060  F060         	movff	___ftadd@f1,?___ftadd
 26801  002D38  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
 26802  002D3C  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
 26803  002D40  D0E9               	goto	l8777
 26804  002D42                     l1702:
 26805  002D42  FFFF               	dw	65535	; assembler added errata NOP
 26806                           
 26807                           ; BSR set to: 0
 26808                           
 26809                           ; BSR set to: 0
 26810  002D44  0E06               	movlw	6
 26811  002D46  0100               	movlb	0	; () banked
 26812  002D48  6F69               	movwf	___ftadd@sign& (0+255),b
 26813                           
 26814                           ; BSR set to: 0
 26815  002D4A  0100               	movlb	0	; () banked
 26816  002D4C  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
 26817  002D4E  D002               	goto	l1705
 26818                           
 26819                           ; BSR set to: 0
 26820  002D50  0100               	movlb	0	; () banked
 26821  002D52  8F69               	bsf	___ftadd@sign& (0+255),7,b
 26822  002D54                     l1705:
 26823  002D54  FFFF               	dw	65535	; assembler added errata NOP
 26824                           
 26825                           ; BSR set to: 0
 26826                           
 26827                           ; BSR set to: 0
 26828  002D56  0100               	movlb	0	; () banked
 26829  002D58  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 26830  002D5A  D002               	goto	l1706
 26831                           
 26832                           ; BSR set to: 0
 26833  002D5C  0100               	movlb	0	; () banked
 26834  002D5E  8D69               	bsf	___ftadd@sign& (0+255),6,b
 26835  002D60                     l1706:
 26836  002D60  FFFF               	dw	65535	; assembler added errata NOP
 26837                           
 26838                           ; BSR set to: 0
 26839  002D62  0100               	movlb	0	; () banked
 26840  002D64  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
 26841                           
 26842                           ; BSR set to: 0
 26843  002D66  0EFF               	movlw	255
 26844  002D68  0100               	movlb	0	; () banked
 26845  002D6A  1760               	andwf	___ftadd@f1& (0+255),f,b
 26846  002D6C  0EFF               	movlw	255
 26847  002D6E  0100               	movlb	0	; () banked
 26848  002D70  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
 26849  002D72  0E00               	movlw	0
 26850  002D74  0100               	movlb	0	; () banked
 26851  002D76  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
 26852  002D78  0100               	movlb	0	; () banked
 26853  002D7A  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
 26854                           
 26855                           ; BSR set to: 0
 26856  002D7C  0EFF               	movlw	255
 26857  002D7E  0100               	movlb	0	; () banked
 26858  002D80  1763               	andwf	___ftadd@f2& (0+255),f,b
 26859  002D82  0EFF               	movlw	255
 26860  002D84  0100               	movlb	0	; () banked
 26861  002D86  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
 26862  002D88  0E00               	movlw	0
 26863  002D8A  0100               	movlb	0	; () banked
 26864  002D8C  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
 26865                           
 26866                           ; BSR set to: 0
 26867  002D8E  0100               	movlb	0	; () banked
 26868  002D90  516A               	movf	___ftadd@exp2& (0+255),w,b
 26869  002D92  0100               	movlb	0	; () banked
 26870  002D94  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
 26871  002D96  B0D8               	btfsc	status,0,c
 26872  002D98  D028               	goto	l1707
 26873  002D9A                     u8210:
 26874  002D9A  FFFF               	dw	65535	; assembler added errata NOP
 26875                           
 26876                           ; BSR set to: 0
 26877                           
 26878                           ; BSR set to: 0
 26879  002D9C  0100               	movlb	0	; () banked
 26880  002D9E  90D8               	bcf	status,0,c
 26881  002DA0  3763               	rlcf	___ftadd@f2& (0+255),f,b
 26882  002DA2  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 26883  002DA4  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 26884  002DA6  0100               	movlb	0	; () banked
 26885  002DA8  076A               	decf	___ftadd@exp2& (0+255),f,b
 26886                           
 26887                           ; BSR set to: 0
 26888  002DAA  0100               	movlb	0	; () banked
 26889  002DAC  516B               	movf	___ftadd@exp1& (0+255),w,b
 26890  002DAE  0100               	movlb	0	; () banked
 26891  002DB0  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 26892  002DB2  B4D8               	btfsc	status,2,c
 26893  002DB4  D012               	goto	l1712
 26894                           
 26895                           ; BSR set to: 0
 26896  002DB6  0100               	movlb	0	; () banked
 26897  002DB8  0769               	decf	___ftadd@sign& (0+255),f,b
 26898  002DBA  C069  F066         	movff	___ftadd@sign,??___ftadd
 26899  002DBE  0E07               	movlw	7
 26900  002DC0  0100               	movlb	0	; () banked
 26901  002DC2  1766               	andwf	??___ftadd& (0+255),f,b
 26902  002DC4  B4D8               	btfsc	status,2,c
 26903  002DC6  D009               	goto	l1712
 26904  002DC8  D7E8               	goto	u8210
 26905  002DCA  FFFF               	dw	65535	; assembler added errata NOP
 26906                           
 26907                           ; BSR set to: 0
 26908                           
 26909                           ; BSR set to: 0
 26910  002DCC  0100               	movlb	0	; () banked
 26911  002DCE  90D8               	bcf	status,0,c
 26912  002DD0  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 26913  002DD2  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 26914  002DD4  3360               	rrcf	___ftadd@f1& (0+255),f,b
 26915  002DD6  0100               	movlb	0	; () banked
 26916  002DD8  2B6B               	incf	___ftadd@exp1& (0+255),f,b
 26917  002DDA                     l1712:
 26918  002DDA  FFFF               	dw	65535	; assembler added errata NOP
 26919                           
 26920                           ; BSR set to: 0
 26921                           
 26922                           ; BSR set to: 0
 26923  002DDC  0100               	movlb	0	; () banked
 26924  002DDE  516A               	movf	___ftadd@exp2& (0+255),w,b
 26925  002DE0  0100               	movlb	0	; () banked
 26926  002DE2  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 26927  002DE4  B4D8               	btfsc	status,2,c
 26928  002DE6  D02F               	goto	u8280
 26929  002DE8  D7F0               	goto	l1713
 26930  002DEA                     l1707:
 26931  002DEA  FFFF               	dw	65535	; assembler added errata NOP
 26932                           
 26933                           ; BSR set to: 0
 26934                           
 26935                           ; BSR set to: 0
 26936  002DEC  0100               	movlb	0	; () banked
 26937  002DEE  516B               	movf	___ftadd@exp1& (0+255),w,b
 26938  002DF0  0100               	movlb	0	; () banked
 26939  002DF2  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
 26940  002DF4  B0D8               	btfsc	status,0,c
 26941  002DF6  D027               	goto	u8280
 26942  002DF8                     u8250:
 26943  002DF8  FFFF               	dw	65535	; assembler added errata NOP
 26944                           
 26945                           ; BSR set to: 0
 26946                           
 26947                           ; BSR set to: 0
 26948  002DFA  0100               	movlb	0	; () banked
 26949  002DFC  90D8               	bcf	status,0,c
 26950  002DFE  3760               	rlcf	___ftadd@f1& (0+255),f,b
 26951  002E00  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 26952  002E02  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 26953  002E04  0100               	movlb	0	; () banked
 26954  002E06  076B               	decf	___ftadd@exp1& (0+255),f,b
 26955                           
 26956                           ; BSR set to: 0
 26957  002E08  0100               	movlb	0	; () banked
 26958  002E0A  516B               	movf	___ftadd@exp1& (0+255),w,b
 26959  002E0C  0100               	movlb	0	; () banked
 26960  002E0E  196A               	xorwf	___ftadd@exp2& (0+255),w,b
 26961  002E10  B4D8               	btfsc	status,2,c
 26962  002E12  D012               	goto	l1721
 26963                           
 26964                           ; BSR set to: 0
 26965  002E14  0100               	movlb	0	; () banked
 26966  002E16  0769               	decf	___ftadd@sign& (0+255),f,b
 26967  002E18  C069  F066         	movff	___ftadd@sign,??___ftadd
 26968  002E1C  0E07               	movlw	7
 26969  002E1E  0100               	movlb	0	; () banked
 26970  002E20  1766               	andwf	??___ftadd& (0+255),f,b
 26971  002E22  B4D8               	btfsc	status,2,c
 26972  002E24  D009               	goto	l1721
 26973  002E26  D7E8               	goto	u8250
 26974  002E28  FFFF               	dw	65535	; assembler added errata NOP
 26975                           
 26976                           ; BSR set to: 0
 26977                           
 26978                           ; BSR set to: 0
 26979  002E2A  0100               	movlb	0	; () banked
 26980  002E2C  90D8               	bcf	status,0,c
 26981  002E2E  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 26982  002E30  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 26983  002E32  3363               	rrcf	___ftadd@f2& (0+255),f,b
 26984  002E34  0100               	movlb	0	; () banked
 26985  002E36  2B6A               	incf	___ftadd@exp2& (0+255),f,b
 26986  002E38                     l1721:
 26987  002E38  FFFF               	dw	65535	; assembler added errata NOP
 26988                           
 26989                           ; BSR set to: 0
 26990                           
 26991                           ; BSR set to: 0
 26992  002E3A  0100               	movlb	0	; () banked
 26993  002E3C  516A               	movf	___ftadd@exp2& (0+255),w,b
 26994  002E3E  0100               	movlb	0	; () banked
 26995  002E40  196B               	xorwf	___ftadd@exp1& (0+255),w,b
 26996  002E42  A4D8               	btfss	status,2,c
 26997  002E44  D7F1               	goto	l1722
 26998  002E46                     u8280:
 26999  002E46  FFFF               	dw	65535	; assembler added errata NOP
 27000                           
 27001                           ; BSR set to: 0
 27002                           
 27003                           ; BSR set to: 0
 27004                           
 27005                           ; BSR set to: 0
 27006  002E48  0100               	movlb	0	; () banked
 27007  002E4A  AF69               	btfss	___ftadd@sign& (0+255),7,b
 27008  002E4C  D012               	goto	l1724
 27009                           
 27010                           ; BSR set to: 0
 27011  002E4E  0EFF               	movlw	255
 27012  002E50  0100               	movlb	0	; () banked
 27013  002E52  1B60               	xorwf	___ftadd@f1& (0+255),f,b
 27014  002E54  0EFF               	movlw	255
 27015  002E56  0100               	movlb	0	; () banked
 27016  002E58  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 27017  002E5A  0EFF               	movlw	255
 27018  002E5C  0100               	movlb	0	; () banked
 27019  002E5E  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 27020  002E60  0E01               	movlw	1
 27021  002E62  0100               	movlb	0	; () banked
 27022  002E64  2760               	addwf	___ftadd@f1& (0+255),f,b
 27023  002E66  0E00               	movlw	0
 27024  002E68  0100               	movlb	0	; () banked
 27025  002E6A  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 27026  002E6C  0E00               	movlw	0
 27027  002E6E  0100               	movlb	0	; () banked
 27028  002E70  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 27029  002E72                     l1724:
 27030  002E72  FFFF               	dw	65535	; assembler added errata NOP
 27031                           
 27032                           ; BSR set to: 0
 27033  002E74  0100               	movlb	0	; () banked
 27034  002E76  AD69               	btfss	___ftadd@sign& (0+255),6,b
 27035  002E78  D012               	goto	l1725
 27036                           
 27037                           ; BSR set to: 0
 27038  002E7A  0EFF               	movlw	255
 27039  002E7C  0100               	movlb	0	; () banked
 27040  002E7E  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 27041  002E80  0EFF               	movlw	255
 27042  002E82  0100               	movlb	0	; () banked
 27043  002E84  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 27044  002E86  0EFF               	movlw	255
 27045  002E88  0100               	movlb	0	; () banked
 27046  002E8A  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 27047  002E8C  0E01               	movlw	1
 27048  002E8E  0100               	movlb	0	; () banked
 27049  002E90  2763               	addwf	___ftadd@f2& (0+255),f,b
 27050  002E92  0E00               	movlw	0
 27051  002E94  0100               	movlb	0	; () banked
 27052  002E96  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 27053  002E98  0E00               	movlw	0
 27054  002E9A  0100               	movlb	0	; () banked
 27055  002E9C  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 27056  002E9E                     l1725:
 27057  002E9E  FFFF               	dw	65535	; assembler added errata NOP
 27058                           
 27059                           ; BSR set to: 0
 27060                           
 27061                           ; BSR set to: 0
 27062  002EA0  0E00               	movlw	0
 27063  002EA2  0100               	movlb	0	; () banked
 27064  002EA4  6F69               	movwf	___ftadd@sign& (0+255),b
 27065                           
 27066                           ; BSR set to: 0
 27067  002EA6  0100               	movlb	0	; () banked
 27068  002EA8  5160               	movf	___ftadd@f1& (0+255),w,b
 27069  002EAA  0100               	movlb	0	; () banked
 27070  002EAC  2763               	addwf	___ftadd@f2& (0+255),f,b
 27071  002EAE  0100               	movlb	0	; () banked
 27072  002EB0  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
 27073  002EB2  0100               	movlb	0	; () banked
 27074  002EB4  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 27075  002EB6  0100               	movlb	0	; () banked
 27076  002EB8  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
 27077  002EBA  0100               	movlb	0	; () banked
 27078  002EBC  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 27079                           
 27080                           ; BSR set to: 0
 27081  002EBE  0100               	movlb	0	; () banked
 27082  002EC0  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 27083  002EC2  D015               	goto	l1726
 27084                           
 27085                           ; BSR set to: 0
 27086  002EC4  0EFF               	movlw	255
 27087  002EC6  0100               	movlb	0	; () banked
 27088  002EC8  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 27089  002ECA  0EFF               	movlw	255
 27090  002ECC  0100               	movlb	0	; () banked
 27091  002ECE  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 27092  002ED0  0EFF               	movlw	255
 27093  002ED2  0100               	movlb	0	; () banked
 27094  002ED4  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 27095  002ED6  0E01               	movlw	1
 27096  002ED8  0100               	movlb	0	; () banked
 27097  002EDA  2763               	addwf	___ftadd@f2& (0+255),f,b
 27098  002EDC  0E00               	movlw	0
 27099  002EDE  0100               	movlb	0	; () banked
 27100  002EE0  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 27101  002EE2  0E00               	movlw	0
 27102  002EE4  0100               	movlb	0	; () banked
 27103  002EE6  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 27104                           
 27105                           ; BSR set to: 0
 27106  002EE8  0E01               	movlw	1
 27107  002EEA  0100               	movlb	0	; () banked
 27108  002EEC  6F69               	movwf	___ftadd@sign& (0+255),b
 27109  002EEE                     l1726:
 27110  002EEE  FFFF               	dw	65535	; assembler added errata NOP
 27111                           
 27112                           ; BSR set to: 0
 27113                           
 27114                           ; BSR set to: 0
 27115  002EF0  C063  F019         	movff	___ftadd@f2,___ftpack@arg
 27116  002EF4  C064  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
 27117  002EF8  C065  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
 27118  002EFC  C06B  F01C         	movff	___ftadd@exp1,___ftpack@exp
 27119  002F00  C069  F01D         	movff	___ftadd@sign,___ftpack@sign
 27120  002F04  EC51  F034         	call	___ftpack	;wreg free
 27121  002F08  C019  F060         	movff	?___ftpack,?___ftadd
 27122  002F0C  C01A  F061         	movff	?___ftpack+1,?___ftadd+1
 27123  002F10  C01B  F062         	movff	?___ftpack+2,?___ftadd+2
 27124  002F14                     l8777:
 27125  002F14  FFFF               	dw	65535	; assembler added errata NOP
 27126  002F16  0012               	return		;funcret
 27127  002F18  FFFF               	dw	65535	; errata NOP
 27128  002F1A                     __end_of___ftadd:
 27129                           	opt stack 0
 27130                           tosu	equ	0xFFF
 27131                           tosh	equ	0xFFE
 27132                           tosl	equ	0xFFD
 27133                           pclath	equ	0xFFA
 27134                           tblptru	equ	0xFF8
 27135                           tblptrh	equ	0xFF7
 27136                           tblptrl	equ	0xFF6
 27137                           tablat	equ	0xFF5
 27138                           prodh	equ	0xFF4
 27139                           prodl	equ	0xFF3
 27140                           intcon	equ	0xFF2
 27141                           postinc0	equ	0xFEE
 27142                           wreg	equ	0xFE8
 27143                           indf1	equ	0xFE7
 27144                           fsr1h	equ	0xFE2
 27145                           fsr1l	equ	0xFE1
 27146                           indf2	equ	0xFDF
 27147                           postinc2	equ	0xFDE
 27148                           postdec2	equ	0xFDD
 27149                           plusw2	equ	0xFDB
 27150                           fsr2h	equ	0xFDA
 27151                           fsr2l	equ	0xFD9
 27152                           status	equ	0xFD8
 27153                           
 27154 ;; *************** function ___ftpack *****************
 27155 ;; Defined at:
 27156 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
 27157 ;; Parameters:    Size  Location     Type
 27158 ;;  arg             3   24[COMRAM] unsigned um
 27159 ;;  exp             1   27[COMRAM] unsigned char 
 27160 ;;  sign            1   28[COMRAM] unsigned char 
 27161 ;; Auto vars:     Size  Location     Type
 27162 ;;		None
 27163 ;; Return value:  Size  Location     Type
 27164 ;;                  3   24[COMRAM] float 
 27165 ;; Registers used:
 27166 ;;		wreg, status,2, status,0
 27167 ;; Tracked objects:
 27168 ;;		On entry : 0/0
 27169 ;;		On exit  : 0/0
 27170 ;;		Unchanged: 0/0
 27171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27172 ;;      Params:         5       0       0       0       0       0       0
 27173 ;;      Locals:         0       0       0       0       0       0       0
 27174 ;;      Temps:          3       0       0       0       0       0       0
 27175 ;;      Totals:         8       0       0       0       0       0       0
 27176 ;;Total ram usage:        8 bytes
 27177 ;; Hardware stack levels used:    1
 27178 ;; Hardware stack levels required when called:    1
 27179 ;; This function calls:
 27180 ;;		Nothing
 27181 ;; This function is called by:
 27182 ;;		___altoft
 27183 ;;		___ftadd
 27184 ;;		___ftdiv
 27185 ;;		___ftmul
 27186 ;;		___lbtoft
 27187 ;;		___lltoft
 27188 ;;		___lwtoft
 27189 ;; This function uses a non-reentrant model
 27190 ;;
 27191                           
 27192                           	psect	text156
 27193  0068A2                     __ptext156:
 27194                           	opt stack 0
 27195  0068A2                     ___ftpack:
 27196                           	opt stack 0
 27197  0068A2  FFFF               	dw	65535	; assembler added errata NOP
 27198                           
 27199                           ;incstack = 0
 27200  0068A4  501C               	movf	___ftpack@exp,w,c
 27201  0068A6  B4D8               	btfsc	status,2,c
 27202  0068A8  D005               	goto	u7870
 27203  0068AA  5019               	movf	___ftpack@arg,w,c
 27204  0068AC  101A               	iorwf	___ftpack@arg+1,w,c
 27205  0068AE  101B               	iorwf	___ftpack@arg+2,w,c
 27206  0068B0  A4D8               	btfss	status,2,c
 27207  0068B2  D00E               	goto	l1667
 27208  0068B4                     u7870:
 27209  0068B4  FFFF               	dw	65535	; assembler added errata NOP
 27210  0068B6  0E00               	movlw	0
 27211  0068B8  6E19               	movwf	?___ftpack,c
 27212  0068BA  0E00               	movlw	0
 27213  0068BC  6E1A               	movwf	?___ftpack+1,c
 27214  0068BE  0E00               	movlw	0
 27215  0068C0  6E1B               	movwf	?___ftpack+2,c
 27216  0068C2  D04E               	goto	l8609
 27217  0068C4  FFFF               	dw	65535	; assembler added errata NOP
 27218  0068C6  2A1C               	incf	___ftpack@exp,f,c
 27219  0068C8  90D8               	bcf	status,0,c
 27220  0068CA  321B               	rrcf	___ftpack@arg+2,f,c
 27221  0068CC  321A               	rrcf	___ftpack@arg+1,f,c
 27222  0068CE  3219               	rrcf	___ftpack@arg,f,c
 27223  0068D0                     l1667:
 27224  0068D0  FFFF               	dw	65535	; assembler added errata NOP
 27225  0068D2  0E00               	movlw	0
 27226  0068D4  1419               	andwf	___ftpack@arg,w,c
 27227  0068D6  6E1E               	movwf	??___ftpack& (0+255),c
 27228  0068D8  0E00               	movlw	0
 27229  0068DA  141A               	andwf	___ftpack@arg+1,w,c
 27230  0068DC  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 27231  0068DE  0EFE               	movlw	254
 27232  0068E0  141B               	andwf	___ftpack@arg+2,w,c
 27233  0068E2  6E20               	movwf	(??___ftpack+2)& (0+255),c
 27234  0068E4  501E               	movf	??___ftpack,w,c
 27235  0068E6  101F               	iorwf	??___ftpack+1,w,c
 27236  0068E8  1020               	iorwf	??___ftpack+2,w,c
 27237  0068EA  B4D8               	btfsc	status,2,c
 27238  0068EC  D00D               	goto	l1670
 27239  0068EE  D7EA               	goto	l1668
 27240  0068F0  FFFF               	dw	65535	; assembler added errata NOP
 27241  0068F2  2A1C               	incf	___ftpack@exp,f,c
 27242  0068F4  0E01               	movlw	1
 27243  0068F6  2619               	addwf	___ftpack@arg,f,c
 27244  0068F8  0E00               	movlw	0
 27245  0068FA  221A               	addwfc	___ftpack@arg+1,f,c
 27246  0068FC  0E00               	movlw	0
 27247  0068FE  221B               	addwfc	___ftpack@arg+2,f,c
 27248  006900  90D8               	bcf	status,0,c
 27249  006902  321B               	rrcf	___ftpack@arg+2,f,c
 27250  006904  321A               	rrcf	___ftpack@arg+1,f,c
 27251  006906  3219               	rrcf	___ftpack@arg,f,c
 27252  006908                     l1670:
 27253  006908  FFFF               	dw	65535	; assembler added errata NOP
 27254  00690A  0E00               	movlw	0
 27255  00690C  1419               	andwf	___ftpack@arg,w,c
 27256  00690E  6E1E               	movwf	??___ftpack& (0+255),c
 27257  006910  0E00               	movlw	0
 27258  006912  141A               	andwf	___ftpack@arg+1,w,c
 27259  006914  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 27260  006916  0EFF               	movlw	255
 27261  006918  141B               	andwf	___ftpack@arg+2,w,c
 27262  00691A  6E20               	movwf	(??___ftpack+2)& (0+255),c
 27263  00691C  501E               	movf	??___ftpack,w,c
 27264  00691E  101F               	iorwf	??___ftpack+1,w,c
 27265  006920  1020               	iorwf	??___ftpack+2,w,c
 27266  006922  B4D8               	btfsc	status,2,c
 27267  006924  D007               	goto	l1673
 27268  006926  D7E4               	goto	l1671
 27269  006928  FFFF               	dw	65535	; assembler added errata NOP
 27270  00692A  061C               	decf	___ftpack@exp,f,c
 27271  00692C  90D8               	bcf	status,0,c
 27272  00692E  3619               	rlcf	___ftpack@arg,f,c
 27273  006930  361A               	rlcf	___ftpack@arg+1,f,c
 27274  006932  361B               	rlcf	___ftpack@arg+2,f,c
 27275  006934                     l1673:
 27276  006934  FFFF               	dw	65535	; assembler added errata NOP
 27277  006936  BE1A               	btfsc	___ftpack@arg+1,7,c
 27278  006938  D003               	goto	u7910
 27279  00693A  0E02               	movlw	2
 27280  00693C  601C               	cpfslt	___ftpack@exp,c
 27281  00693E  D7F4               	goto	l1674
 27282  006940                     u7910:
 27283  006940  FFFF               	dw	65535	; assembler added errata NOP
 27284  006942  A01C               	btfss	___ftpack@exp,0,c
 27285  006944  9E1A               	bcf	___ftpack@arg+1,7,c
 27286  006946  90D8               	bcf	status,0,c
 27287  006948  321C               	rrcf	___ftpack@exp,f,c
 27288  00694A  501C               	movf	___ftpack@exp,w,c
 27289  00694C  121B               	iorwf	___ftpack@arg+2,f,c
 27290  00694E  501D               	movf	___ftpack@sign,w,c
 27291  006950  A4D8               	btfss	status,2,c
 27292  006952  8E1B               	bsf	___ftpack@arg+2,7,c
 27293  006954  C019  F019         	movff	___ftpack@arg,?___ftpack
 27294  006958  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
 27295  00695C  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
 27296  006960                     l8609:
 27297  006960  FFFF               	dw	65535	; assembler added errata NOP
 27298  006962  0012               	return		;funcret
 27299  006964  FFFF               	dw	65535	; errata NOP
 27300  006966                     __end_of___ftpack:
 27301                           	opt stack 0
 27302                           tosu	equ	0xFFF
 27303                           tosh	equ	0xFFE
 27304                           tosl	equ	0xFFD
 27305                           pclath	equ	0xFFA
 27306                           tblptru	equ	0xFF8
 27307                           tblptrh	equ	0xFF7
 27308                           tblptrl	equ	0xFF6
 27309                           tablat	equ	0xFF5
 27310                           prodh	equ	0xFF4
 27311                           prodl	equ	0xFF3
 27312                           intcon	equ	0xFF2
 27313                           postinc0	equ	0xFEE
 27314                           wreg	equ	0xFE8
 27315                           indf1	equ	0xFE7
 27316                           fsr1h	equ	0xFE2
 27317                           fsr1l	equ	0xFE1
 27318                           indf2	equ	0xFDF
 27319                           postinc2	equ	0xFDE
 27320                           postdec2	equ	0xFDD
 27321                           plusw2	equ	0xFDB
 27322                           fsr2h	equ	0xFDA
 27323                           fsr2l	equ	0xFD9
 27324                           status	equ	0xFD8
 27325                           
 27326 ;; *************** function _Get_Voltage_VL3 *****************
 27327 ;; Defined at:
 27328 ;;		line 133 in file "Get_Voltages.c"
 27329 ;; Parameters:    Size  Location     Type
 27330 ;;		None
 27331 ;; Auto vars:     Size  Location     Type
 27332 ;;		None
 27333 ;; Return value:  Size  Location     Type
 27334 ;;                  3   24[COMRAM] float 
 27335 ;; Registers used:
 27336 ;;		None
 27337 ;; Tracked objects:
 27338 ;;		On entry : 0/0
 27339 ;;		On exit  : 0/0
 27340 ;;		Unchanged: 0/0
 27341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27342 ;;      Params:         3       0       0       0       0       0       0
 27343 ;;      Locals:         0       0       0       0       0       0       0
 27344 ;;      Temps:          0       0       0       0       0       0       0
 27345 ;;      Totals:         3       0       0       0       0       0       0
 27346 ;;Total ram usage:        3 bytes
 27347 ;; Hardware stack levels used:    1
 27348 ;; Hardware stack levels required when called:    1
 27349 ;; This function calls:
 27350 ;;		Nothing
 27351 ;; This function is called by:
 27352 ;;		_Get_Control_Voltage
 27353 ;;		_Display_Data
 27354 ;; This function uses a non-reentrant model
 27355 ;;
 27356                           
 27357                           	psect	text157
 27358  004C98                     __ptext157:
 27359                           	opt stack 0
 27360  004C98                     _Get_Voltage_VL3:
 27361                           	opt stack 0
 27362  004C98  FFFF               	dw	65535	; assembler added errata NOP
 27363                           
 27364                           ;Get_Voltages.c: 135: return VL3;
 27365                           
 27366                           ;incstack = 0
 27367  004C9A  C035  F019         	movff	_VL3,?_Get_Voltage_VL3
 27368  004C9E  C036  F01A         	movff	_VL3+1,?_Get_Voltage_VL3+1
 27369  004CA2  C037  F01B         	movff	_VL3+2,?_Get_Voltage_VL3+2
 27370  004CA6  0012               	return		;funcret
 27371  004CA8  FFFF               	dw	65535	; errata NOP
 27372  004CAA                     __end_of_Get_Voltage_VL3:
 27373                           	opt stack 0
 27374                           tosu	equ	0xFFF
 27375                           tosh	equ	0xFFE
 27376                           tosl	equ	0xFFD
 27377                           pclath	equ	0xFFA
 27378                           tblptru	equ	0xFF8
 27379                           tblptrh	equ	0xFF7
 27380                           tblptrl	equ	0xFF6
 27381                           tablat	equ	0xFF5
 27382                           prodh	equ	0xFF4
 27383                           prodl	equ	0xFF3
 27384                           intcon	equ	0xFF2
 27385                           postinc0	equ	0xFEE
 27386                           wreg	equ	0xFE8
 27387                           indf1	equ	0xFE7
 27388                           fsr1h	equ	0xFE2
 27389                           fsr1l	equ	0xFE1
 27390                           indf2	equ	0xFDF
 27391                           postinc2	equ	0xFDE
 27392                           postdec2	equ	0xFDD
 27393                           plusw2	equ	0xFDB
 27394                           fsr2h	equ	0xFDA
 27395                           fsr2l	equ	0xFD9
 27396                           status	equ	0xFD8
 27397                           
 27398 ;; *************** function _Get_Voltage_VL2 *****************
 27399 ;; Defined at:
 27400 ;;		line 127 in file "Get_Voltages.c"
 27401 ;; Parameters:    Size  Location     Type
 27402 ;;		None
 27403 ;; Auto vars:     Size  Location     Type
 27404 ;;		None
 27405 ;; Return value:  Size  Location     Type
 27406 ;;                  3   24[COMRAM] float 
 27407 ;; Registers used:
 27408 ;;		None
 27409 ;; Tracked objects:
 27410 ;;		On entry : 0/0
 27411 ;;		On exit  : 0/0
 27412 ;;		Unchanged: 0/0
 27413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27414 ;;      Params:         3       0       0       0       0       0       0
 27415 ;;      Locals:         0       0       0       0       0       0       0
 27416 ;;      Temps:          0       0       0       0       0       0       0
 27417 ;;      Totals:         3       0       0       0       0       0       0
 27418 ;;Total ram usage:        3 bytes
 27419 ;; Hardware stack levels used:    1
 27420 ;; Hardware stack levels required when called:    1
 27421 ;; This function calls:
 27422 ;;		Nothing
 27423 ;; This function is called by:
 27424 ;;		_Get_Control_Voltage
 27425 ;;		_Display_Data
 27426 ;; This function uses a non-reentrant model
 27427 ;;
 27428                           
 27429                           	psect	text158
 27430  004C86                     __ptext158:
 27431                           	opt stack 0
 27432  004C86                     _Get_Voltage_VL2:
 27433                           	opt stack 0
 27434  004C86  FFFF               	dw	65535	; assembler added errata NOP
 27435                           
 27436                           ;Get_Voltages.c: 129: return VL2;
 27437                           
 27438                           ;incstack = 0
 27439  004C88  C038  F019         	movff	_VL2,?_Get_Voltage_VL2
 27440  004C8C  C039  F01A         	movff	_VL2+1,?_Get_Voltage_VL2+1
 27441  004C90  C03A  F01B         	movff	_VL2+2,?_Get_Voltage_VL2+2
 27442  004C94  0012               	return		;funcret
 27443  004C96  FFFF               	dw	65535	; errata NOP
 27444  004C98                     __end_of_Get_Voltage_VL2:
 27445                           	opt stack 0
 27446                           tosu	equ	0xFFF
 27447                           tosh	equ	0xFFE
 27448                           tosl	equ	0xFFD
 27449                           pclath	equ	0xFFA
 27450                           tblptru	equ	0xFF8
 27451                           tblptrh	equ	0xFF7
 27452                           tblptrl	equ	0xFF6
 27453                           tablat	equ	0xFF5
 27454                           prodh	equ	0xFF4
 27455                           prodl	equ	0xFF3
 27456                           intcon	equ	0xFF2
 27457                           postinc0	equ	0xFEE
 27458                           wreg	equ	0xFE8
 27459                           indf1	equ	0xFE7
 27460                           fsr1h	equ	0xFE2
 27461                           fsr1l	equ	0xFE1
 27462                           indf2	equ	0xFDF
 27463                           postinc2	equ	0xFDE
 27464                           postdec2	equ	0xFDD
 27465                           plusw2	equ	0xFDB
 27466                           fsr2h	equ	0xFDA
 27467                           fsr2l	equ	0xFD9
 27468                           status	equ	0xFD8
 27469                           
 27470 ;; *************** function _Get_Voltage_VL1 *****************
 27471 ;; Defined at:
 27472 ;;		line 121 in file "Get_Voltages.c"
 27473 ;; Parameters:    Size  Location     Type
 27474 ;;		None
 27475 ;; Auto vars:     Size  Location     Type
 27476 ;;		None
 27477 ;; Return value:  Size  Location     Type
 27478 ;;                  3   24[COMRAM] float 
 27479 ;; Registers used:
 27480 ;;		None
 27481 ;; Tracked objects:
 27482 ;;		On entry : 0/0
 27483 ;;		On exit  : 0/0
 27484 ;;		Unchanged: 0/0
 27485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27486 ;;      Params:         3       0       0       0       0       0       0
 27487 ;;      Locals:         0       0       0       0       0       0       0
 27488 ;;      Temps:          0       0       0       0       0       0       0
 27489 ;;      Totals:         3       0       0       0       0       0       0
 27490 ;;Total ram usage:        3 bytes
 27491 ;; Hardware stack levels used:    1
 27492 ;; Hardware stack levels required when called:    1
 27493 ;; This function calls:
 27494 ;;		Nothing
 27495 ;; This function is called by:
 27496 ;;		_Get_Control_Voltage
 27497 ;;		_Display_Data
 27498 ;; This function uses a non-reentrant model
 27499 ;;
 27500                           
 27501                           	psect	text159
 27502  004C74                     __ptext159:
 27503                           	opt stack 0
 27504  004C74                     _Get_Voltage_VL1:
 27505                           	opt stack 0
 27506  004C74  FFFF               	dw	65535	; assembler added errata NOP
 27507                           
 27508                           ;Get_Voltages.c: 123: return VL1;
 27509                           
 27510                           ;incstack = 0
 27511  004C76  C03B  F019         	movff	_VL1,?_Get_Voltage_VL1
 27512  004C7A  C03C  F01A         	movff	_VL1+1,?_Get_Voltage_VL1+1
 27513  004C7E  C03D  F01B         	movff	_VL1+2,?_Get_Voltage_VL1+2
 27514  004C82  0012               	return		;funcret
 27515  004C84  FFFF               	dw	65535	; errata NOP
 27516  004C86                     __end_of_Get_Voltage_VL1:
 27517                           	opt stack 0
 27518                           tosu	equ	0xFFF
 27519                           tosh	equ	0xFFE
 27520                           tosl	equ	0xFFD
 27521                           pclath	equ	0xFFA
 27522                           tblptru	equ	0xFF8
 27523                           tblptrh	equ	0xFF7
 27524                           tblptrl	equ	0xFF6
 27525                           tablat	equ	0xFF5
 27526                           prodh	equ	0xFF4
 27527                           prodl	equ	0xFF3
 27528                           intcon	equ	0xFF2
 27529                           postinc0	equ	0xFEE
 27530                           wreg	equ	0xFE8
 27531                           indf1	equ	0xFE7
 27532                           fsr1h	equ	0xFE2
 27533                           fsr1l	equ	0xFE1
 27534                           indf2	equ	0xFDF
 27535                           postinc2	equ	0xFDE
 27536                           postdec2	equ	0xFDD
 27537                           plusw2	equ	0xFDB
 27538                           fsr2h	equ	0xFDA
 27539                           fsr2l	equ	0xFD9
 27540                           status	equ	0xFD8
 27541                           
 27542 ;; *************** function _TimerInt *****************
 27543 ;; Defined at:
 27544 ;;		line 395 in file "main.c"
 27545 ;; Parameters:    Size  Location     Type
 27546 ;;		None
 27547 ;; Auto vars:     Size  Location     Type
 27548 ;;  stat            1   23[COMRAM] unsigned char 
 27549 ;; Return value:  Size  Location     Type
 27550 ;;                  1    wreg      void 
 27551 ;; Registers used:
 27552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27553 ;; Tracked objects:
 27554 ;;		On entry : 0/0
 27555 ;;		On exit  : 0/0
 27556 ;;		Unchanged: 0/0
 27557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27558 ;;      Params:         0       0       0       0       0       0       0
 27559 ;;      Locals:         1       0       0       0       0       0       0
 27560 ;;      Temps:         23       0       0       0       0       0       0
 27561 ;;      Totals:        24       0       0       0       0       0       0
 27562 ;;Total ram usage:       24 bytes
 27563 ;; Hardware stack levels used:    1
 27564 ;; This function calls:
 27565 ;;		Nothing
 27566 ;; This function is called by:
 27567 ;;		Interrupt level 2
 27568 ;; This function uses a non-reentrant model
 27569 ;;
 27570                           
 27571                           	psect	intcode
 27572  000008                     __pintcode:
 27573                           	opt stack 0
 27574  000008                     _TimerInt:
 27575                           	opt stack 0
 27576  000008  FFFF               	dw	65535	; assembler added errata NOP
 27577                           
 27578                           ;incstack = 0
 27579  00000A  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27580  00000C  CFFA F006          	movff	pclath,??_TimerInt+5
 27581  000010  CFFB F007          	movff	pclatu,??_TimerInt+6
 27582  000014  CFE9 F008          	movff	fsr0l,??_TimerInt+7
 27583  000018  CFEA F009          	movff	fsr0h,??_TimerInt+8
 27584  00001C  CFE1 F00A          	movff	fsr1l,??_TimerInt+9
 27585  000020  CFE2 F00B          	movff	fsr1h,??_TimerInt+10
 27586  000024  CFD9 F00C          	movff	fsr2l,??_TimerInt+11
 27587  000028  CFDA F00D          	movff	fsr2h,??_TimerInt+12
 27588  00002C  CFF3 F00E          	movff	prodl,??_TimerInt+13
 27589  000030  CFF4 F00F          	movff	prodh,??_TimerInt+14
 27590  000034  CFF6 F010          	movff	tblptrl,??_TimerInt+15
 27591  000038  CFF7 F011          	movff	tblptrh,??_TimerInt+16
 27592  00003C  CFF8 F012          	movff	tblptru,??_TimerInt+17
 27593  000040  CFF5 F013          	movff	tablat,??_TimerInt+18
 27594  000044  C047  F014         	movff	btemp,??_TimerInt+19
 27595  000048  C048  F015         	movff	btemp+1,??_TimerInt+20
 27596  00004C  C049  F016         	movff	btemp+2,??_TimerInt+21
 27597  000050  C04A  F017         	movff	btemp+3,??_TimerInt+22
 27598                           
 27599                           ;main.c: 397: char stat;
 27600                           ;main.c: 399: if (TMR0IE && TMR0IF) {
 27601  000054  BAF2               	btfsc	intcon,5,c	;volatile
 27602  000056  A4F2               	btfss	intcon,2,c	;volatile
 27603  000058  D008               	goto	i2l1058
 27604                           
 27605                           ;main.c: 400: TMR0IF = 0;
 27606  00005A  94F2               	bcf	intcon,2,c	;volatile
 27607                           
 27608                           ;main.c: 401: Int_Flag=1;
 27609  00005C  0E01               	movlw	1
 27610  00005E  0100               	movlb	0	; () banked
 27611  000060  6FFB               	movwf	_Int_Flag& (0+255),b
 27612                           
 27613                           ; BSR set to: 0
 27614                           ;main.c: 402: TMR0H=value.HSB;
 27615  000062  C0FE  FFD7         	movff	_value,4055	;volatile
 27616                           
 27617                           ; BSR set to: 0
 27618                           ;main.c: 403: TMR0L=value.LSB;
 27619  000066  C0FF  FFD6         	movff	_value+1,4054	;volatile
 27620  00006A                     i2l1058:
 27621  00006A  FFFF               	dw	65535	; assembler added errata NOP
 27622                           
 27623                           ;main.c: 404: }
 27624                           ;main.c: 405: if(TXIE && TXIF){
 27625                           
 27626                           ; BSR set to: 0
 27627  00006C  B89D               	btfsc	3997,4,c	;volatile
 27628  00006E  A89E               	btfss	3998,4,c	;volatile
 27629  000070  D026               	goto	i2l1062
 27630                           
 27631                           ;main.c: 407: if(tx_buffer[tx_pointer]!=(0)){
 27632  000072  5045               	movf	_tx_pointer,w,c
 27633  000074  0D01               	mullw	1
 27634  000076  0E4E               	movlw	low _tx_buffer
 27635  000078  24F3               	addwf	prodl,w,c
 27636  00007A  6ED9               	movwf	fsr2l,c
 27637  00007C  0E01               	movlw	high _tx_buffer
 27638  00007E  20F4               	addwfc	prodh,w,c
 27639  000080  6EDA               	movwf	fsr2h,c
 27640  000082  50DF               	movf	indf2,w,c
 27641  000084  B4D8               	btfsc	status,2,c
 27642  000086  D012               	goto	i2l1060
 27643                           
 27644                           ;main.c: 408: TXREG=tx_buffer[tx_pointer++];
 27645  000088  5045               	movf	_tx_pointer,w,c
 27646  00008A  0D01               	mullw	1
 27647  00008C  0E4E               	movlw	low _tx_buffer
 27648  00008E  24F3               	addwf	prodl,w,c
 27649  000090  6ED9               	movwf	fsr2l,c
 27650  000092  0E01               	movlw	high _tx_buffer
 27651  000094  20F4               	addwfc	prodh,w,c
 27652  000096  6EDA               	movwf	fsr2h,c
 27653  000098  50DF               	movf	indf2,w,c
 27654  00009A  6EAD               	movwf	4013,c	;volatile
 27655  00009C  2A45               	incf	_tx_pointer,f,c
 27656                           
 27657                           ;main.c: 409: if(tx_pointer>40){
 27658  00009E  0E28               	movlw	40
 27659  0000A0  6445               	cpfsgt	_tx_pointer,c
 27660  0000A2  D00D               	goto	i2l1062
 27661                           
 27662                           ;main.c: 410: tx_pointer=0;
 27663  0000A4  0E00               	movlw	0
 27664  0000A6  6E45               	movwf	_tx_pointer,c
 27665                           
 27666                           ;main.c: 411: tx_flag=3;
 27667  0000A8  0E03               	movlw	3
 27668  0000AA  D005               	goto	L29
 27669  0000AC                     i2l1060:
 27670  0000AC  FFFF               	dw	65535	; assembler added errata NOP
 27671                           
 27672                           ;main.c: 415: else {
 27673                           ;main.c: 416: TXREG==(0);
 27674                           
 27675                           ; BSR set to: 0
 27676  0000AE  50AD               	movf	4013,w,c	;volatile
 27677                           
 27678                           ;main.c: 417: tx_pointer=0;
 27679  0000B0  0E00               	movlw	0
 27680  0000B2  6E45               	movwf	_tx_pointer,c
 27681                           
 27682                           ;main.c: 418: tx_flag=2;
 27683  0000B4  0E02               	movlw	2
 27684  0000B6                     L29:
 27685  0000B6  FFFF               	dw	65535	; assembler added errata NOP
 27686  0000B8  0100               	movlb	0	; () banked
 27687  0000BA  6FF9               	movwf	_tx_flag& (0+255),b
 27688                           
 27689                           ; BSR set to: 0
 27690                           ;main.c: 419: TXIE=0;
 27691  0000BC  989D               	bcf	3997,4,c	;volatile
 27692  0000BE                     i2l1062:
 27693  0000BE  FFFF               	dw	65535	; assembler added errata NOP
 27694                           
 27695                           ;main.c: 420: }
 27696                           ;main.c: 421: }
 27697                           ;main.c: 423: if (RCIE && RCIF) {
 27698                           
 27699                           ; BSR set to: 0
 27700                           
 27701                           ; BSR set to: 0
 27702  0000C0  BA9D               	btfsc	3997,5,c	;volatile
 27703  0000C2  AA9E               	btfss	3998,5,c	;volatile
 27704  0000C4  D04E               	goto	i2l1068
 27705                           
 27706                           ;main.c: 424: stat = RCSTA & 0x06;
 27707  0000C6  50AB               	movf	4011,w,c	;volatile
 27708  0000C8  0B06               	andlw	6
 27709  0000CA  6E18               	movwf	TimerInt@stat,c
 27710                           
 27711                           ;main.c: 425: if (stat == 0) {
 27712  0000CC  5018               	movf	TimerInt@stat,w,c
 27713  0000CE  A4D8               	btfss	status,2,c
 27714  0000D0  D03F               	goto	i2l1064
 27715                           
 27716                           ;main.c: 426: rx_buffer[rx_pointer++] = RCREG;
 27717  0000D2  5046               	movf	_rx_pointer,w,c
 27718  0000D4  0D01               	mullw	1
 27719  0000D6  0E91               	movlw	low _rx_buffer
 27720  0000D8  24F3               	addwf	prodl,w,c
 27721  0000DA  6ED9               	movwf	fsr2l,c
 27722  0000DC  0E01               	movlw	high _rx_buffer
 27723  0000DE  20F4               	addwfc	prodh,w,c
 27724  0000E0  6EDA               	movwf	fsr2h,c
 27725  0000E2  CFAE FFDF          	movff	4014,indf2	;volatile
 27726  0000E6  2A46               	incf	_rx_pointer,f,c
 27727                           
 27728                           ;main.c: 427: if (rx_pointer > 20) {
 27729  0000E8  0E14               	movlw	20
 27730  0000EA  6446               	cpfsgt	_rx_pointer,c
 27731  0000EC  D001               	goto	i2l1065
 27732  0000EE  D033               	goto	i2l8549
 27733  0000F0                     i2l1065:
 27734  0000F0  FFFF               	dw	65535	; assembler added errata NOP
 27735                           
 27736                           ;main.c: 431: else if (rx_buffer[rx_pointer - 1] == 0x0d) {
 27737                           
 27738                           ; BSR set to: 0
 27739  0000F2  0EFF               	movlw	255
 27740  0000F4  6E01               	movwf	??_TimerInt& (0+255),c
 27741  0000F6  0EFF               	movlw	255
 27742  0000F8  6E02               	movwf	(??_TimerInt+1)& (0+255),c
 27743  0000FA  5046               	movf	_rx_pointer,w,c
 27744  0000FC  6E03               	movwf	(??_TimerInt+2)& (0+255),c
 27745  0000FE  6A04               	clrf	(??_TimerInt+3)& (0+255),c
 27746  000100  5001               	movf	??_TimerInt,w,c
 27747  000102  2603               	addwf	??_TimerInt+2,f,c
 27748  000104  5002               	movf	??_TimerInt+1,w,c
 27749  000106  2204               	addwfc	??_TimerInt+3,f,c
 27750  000108  0E91               	movlw	low _rx_buffer
 27751  00010A  2403               	addwf	??_TimerInt+2,w,c
 27752  00010C  6ED9               	movwf	fsr2l,c
 27753  00010E  0E01               	movlw	high _rx_buffer
 27754  000110  2004               	addwfc	??_TimerInt+3,w,c
 27755  000112  6EDA               	movwf	fsr2h,c
 27756  000114  0E0D               	movlw	13
 27757  000116  18DE               	xorwf	postinc2,w,c
 27758  000118  A4D8               	btfss	status,2,c
 27759  00011A  D023               	goto	i2l1068
 27760                           
 27761                           ;main.c: 432: rx_buffer[rx_pointer - 1] = (0);
 27762  00011C  0EFF               	movlw	255
 27763  00011E  6E01               	movwf	??_TimerInt& (0+255),c
 27764  000120  0EFF               	movlw	255
 27765  000122  6E02               	movwf	(??_TimerInt+1)& (0+255),c
 27766  000124  5046               	movf	_rx_pointer,w,c
 27767  000126  6E03               	movwf	(??_TimerInt+2)& (0+255),c
 27768  000128  6A04               	clrf	(??_TimerInt+3)& (0+255),c
 27769  00012A  5001               	movf	??_TimerInt,w,c
 27770  00012C  2603               	addwf	??_TimerInt+2,f,c
 27771  00012E  5002               	movf	??_TimerInt+1,w,c
 27772  000130  2204               	addwfc	??_TimerInt+3,f,c
 27773  000132  0E91               	movlw	low _rx_buffer
 27774  000134  2403               	addwf	??_TimerInt+2,w,c
 27775  000136  6ED9               	movwf	fsr2l,c
 27776  000138  0E01               	movlw	high _rx_buffer
 27777  00013A  2004               	addwfc	??_TimerInt+3,w,c
 27778  00013C  6EDA               	movwf	fsr2h,c
 27779  00013E  0E00               	movlw	0
 27780  000140  6EDF               	movwf	indf2,c
 27781                           
 27782                           ;main.c: 433: rx_flag = 1;
 27783  000142  0E01               	movlw	1
 27784  000144  0100               	movlb	0	; () banked
 27785  000146  6FFA               	movwf	_rx_flag& (0+255),b
 27786                           
 27787                           ; BSR set to: 0
 27788                           ;main.c: 434: rx_pointer = 0;
 27789  000148  0E00               	movlw	0
 27790  00014A  6E46               	movwf	_rx_pointer,c
 27791                           
 27792                           ; BSR set to: 0
 27793                           ;main.c: 435: RCIE = 0;
 27794  00014C  9A9D               	bcf	3997,5,c	;volatile
 27795                           
 27796                           ; BSR set to: 0
 27797                           ;main.c: 436: }
 27798                           ;main.c: 438: }
 27799                           
 27800                           ; BSR set to: 0
 27801  00014E  D009               	goto	i2l1068
 27802  000150                     i2l1064:
 27803  000150  FFFF               	dw	65535	; assembler added errata NOP
 27804                           
 27805                           ;main.c: 439: else {
 27806                           ;main.c: 440: RCSTAbits.CREN = 0;
 27807  000152  98AB               	bcf	4011,4,c	;volatile
 27808                           
 27809                           ;main.c: 441: RCSTAbits.CREN = 1;
 27810  000154  88AB               	bsf	4011,4,c	;volatile
 27811  000156                     i2l8549:
 27812  000156  FFFF               	dw	65535	; assembler added errata NOP
 27813                           
 27814                           ;main.c: 442: rx_pointer = 0;
 27815  000158  0E00               	movlw	0
 27816  00015A  6E46               	movwf	_rx_pointer,c
 27817                           
 27818                           ;main.c: 443: rx_flag = 3;
 27819  00015C  0E03               	movlw	3
 27820  00015E  0100               	movlb	0	; () banked
 27821  000160  6FFA               	movwf	_rx_flag& (0+255),b
 27822  000162                     i2l1068:
 27823  000162  FFFF               	dw	65535	; assembler added errata NOP
 27824                           
 27825                           ; BSR set to: 0
 27826                           
 27827                           ; BSR set to: 0
 27828  000164  C017  F04A         	movff	??_TimerInt+22,btemp+3
 27829  000168  C016  F049         	movff	??_TimerInt+21,btemp+2
 27830  00016C  C015  F048         	movff	??_TimerInt+20,btemp+1
 27831  000170  C014  F047         	movff	??_TimerInt+19,btemp
 27832  000174  C013  FFF5         	movff	??_TimerInt+18,tablat
 27833  000178  C012  FFF8         	movff	??_TimerInt+17,tblptru
 27834  00017C  C011  FFF7         	movff	??_TimerInt+16,tblptrh
 27835  000180  C010  FFF6         	movff	??_TimerInt+15,tblptrl
 27836  000184  C00F  FFF4         	movff	??_TimerInt+14,prodh
 27837  000188  C00E  FFF3         	movff	??_TimerInt+13,prodl
 27838  00018C  C00D  FFDA         	movff	??_TimerInt+12,fsr2h
 27839  000190  C00C  FFD9         	movff	??_TimerInt+11,fsr2l
 27840  000194  C00B  FFE2         	movff	??_TimerInt+10,fsr1h
 27841  000198  C00A  FFE1         	movff	??_TimerInt+9,fsr1l
 27842  00019C  C009  FFEA         	movff	??_TimerInt+8,fsr0h
 27843  0001A0  C008  FFE9         	movff	??_TimerInt+7,fsr0l
 27844  0001A4  C007  FFFB         	movff	??_TimerInt+6,pclatu
 27845  0001A8  C006  FFFA         	movff	??_TimerInt+5,pclath
 27846  0001AC  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27847  0001AE  0011               	retfie		f
 27848  0001B0  FFFF               	dw	65535	; errata NOP
 27849  0001B2                     __end_of_TimerInt:
 27850                           	opt stack 0
 27851                           tosu	equ	0xFFF
 27852                           tosh	equ	0xFFE
 27853                           tosl	equ	0xFFD
 27854                           pclatu	equ	0xFFB
 27855                           pclath	equ	0xFFA
 27856                           tblptru	equ	0xFF8
 27857                           tblptrh	equ	0xFF7
 27858                           tblptrl	equ	0xFF6
 27859                           tablat	equ	0xFF5
 27860                           prodh	equ	0xFF4
 27861                           prodl	equ	0xFF3
 27862                           intcon	equ	0xFF2
 27863                           postinc0	equ	0xFEE
 27864                           fsr0h	equ	0xFEA
 27865                           fsr0l	equ	0xFE9
 27866                           wreg	equ	0xFE8
 27867                           indf1	equ	0xFE7
 27868                           fsr1h	equ	0xFE2
 27869                           fsr1l	equ	0xFE1
 27870                           indf2	equ	0xFDF
 27871                           postinc2	equ	0xFDE
 27872                           postdec2	equ	0xFDD
 27873                           plusw2	equ	0xFDB
 27874                           fsr2h	equ	0xFDA
 27875                           fsr2l	equ	0xFD9
 27876                           status	equ	0xFD8
 27877                           tosu	equ	0xFFF
 27878                           tosh	equ	0xFFE
 27879                           tosl	equ	0xFFD
 27880                           pclatu	equ	0xFFB
 27881                           pclath	equ	0xFFA
 27882                           tblptru	equ	0xFF8
 27883                           tblptrh	equ	0xFF7
 27884                           tblptrl	equ	0xFF6
 27885                           tablat	equ	0xFF5
 27886                           prodh	equ	0xFF4
 27887                           prodl	equ	0xFF3
 27888                           intcon	equ	0xFF2
 27889                           postinc0	equ	0xFEE
 27890                           fsr0h	equ	0xFEA
 27891                           fsr0l	equ	0xFE9
 27892                           wreg	equ	0xFE8
 27893                           indf1	equ	0xFE7
 27894                           fsr1h	equ	0xFE2
 27895                           fsr1l	equ	0xFE1
 27896                           indf2	equ	0xFDF
 27897                           postinc2	equ	0xFDE
 27898                           postdec2	equ	0xFDD
 27899                           plusw2	equ	0xFDB
 27900                           fsr2h	equ	0xFDA
 27901                           fsr2l	equ	0xFD9
 27902                           status	equ	0xFD8
 27903                           
 27904                           	psect	rparam
 27905  0000                     tosu	equ	0xFFF
 27906                           tosh	equ	0xFFE
 27907                           tosl	equ	0xFFD
 27908                           pclatu	equ	0xFFB
 27909                           pclath	equ	0xFFA
 27910                           tblptru	equ	0xFF8
 27911                           tblptrh	equ	0xFF7
 27912                           tblptrl	equ	0xFF6
 27913                           tablat	equ	0xFF5
 27914                           prodh	equ	0xFF4
 27915                           prodl	equ	0xFF3
 27916                           intcon	equ	0xFF2
 27917                           postinc0	equ	0xFEE
 27918                           fsr0h	equ	0xFEA
 27919                           fsr0l	equ	0xFE9
 27920                           wreg	equ	0xFE8
 27921                           indf1	equ	0xFE7
 27922                           fsr1h	equ	0xFE2
 27923                           fsr1l	equ	0xFE1
 27924                           indf2	equ	0xFDF
 27925                           postinc2	equ	0xFDE
 27926                           postdec2	equ	0xFDD
 27927                           plusw2	equ	0xFDB
 27928                           fsr2h	equ	0xFDA
 27929                           fsr2l	equ	0xFD9
 27930                           status	equ	0xFD8
 27931                           
 27932                           	psect	temp
 27933  000047                     btemp:
 27934                           	opt stack 0
 27935  000047                     	ds	1
 27936  0000                     int$flags	set	btemp
 27937  0000                     wtemp6	set	btemp+1
 27938                           tosu	equ	0xFFF
 27939                           tosh	equ	0xFFE
 27940                           tosl	equ	0xFFD
 27941                           pclatu	equ	0xFFB
 27942                           pclath	equ	0xFFA
 27943                           tblptru	equ	0xFF8
 27944                           tblptrh	equ	0xFF7
 27945                           tblptrl	equ	0xFF6
 27946                           tablat	equ	0xFF5
 27947                           prodh	equ	0xFF4
 27948                           prodl	equ	0xFF3
 27949                           intcon	equ	0xFF2
 27950                           postinc0	equ	0xFEE
 27951                           fsr0h	equ	0xFEA
 27952                           fsr0l	equ	0xFE9
 27953                           wreg	equ	0xFE8
 27954                           indf1	equ	0xFE7
 27955                           fsr1h	equ	0xFE2
 27956                           fsr1l	equ	0xFE1
 27957                           indf2	equ	0xFDF
 27958                           postinc2	equ	0xFDE
 27959                           postdec2	equ	0xFDD
 27960                           plusw2	equ	0xFDB
 27961                           fsr2h	equ	0xFDA
 27962                           fsr2l	equ	0xFD9
 27963                           status	equ	0xFD8


Data Sizes:
    Strings     601
    Constant    130
    Data        2
    BSS         229
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      70
    BANK0           160    136     160
    BANK1           256     36     219
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    time_set$3547	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set$3546	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    asctime@cp	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    asctime@tim	PTR const struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    asctime@s	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_89(CODE[37]), STR_88(CODE[22]), 

    put2d@cp	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_66(CODE[7]), STR_63(CODE[5]), STR_61(CODE[5]), STR_59(CODE[5]), 
		 -> STR_57(CODE[4]), STR_55(CODE[3]), STR_52(CODE[5]), STR_50(CODE[4]), 
		 -> STR_48(CODE[4]), STR_46(CODE[3]), STR_44(CODE[9]), STR_42(CODE[9]), 
		 -> STR_40(CODE[9]), STR_38(CODE[3]), STR_36(CODE[3]), STR_34(CODE[3]), 
		 -> STR_32(CODE[5]), STR_31(CODE[5]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[3]), STR_27(CODE[9]), STR_26(CODE[9]), STR_25(CODE[12]), 
		 -> STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[6]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[10]), STR_8(CODE[9]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_84(CODE[5]), STR_83(CODE[19]), 
		 -> STR_82(CODE[5]), STR_81(CODE[5]), STR_80(CODE[5]), STR_79(CODE[20]), 
		 -> STR_68(CODE[7]), STR_67(CODE[6]), STR_65(CODE[26]), STR_64(CODE[28]), 
		 -> STR_62(CODE[10]), STR_60(CODE[10]), STR_58(CODE[6]), STR_56(CODE[6]), 
		 -> STR_54(CODE[6]), STR_53(CODE[8]), STR_51(CODE[6]), STR_49(CODE[6]), 
		 -> STR_47(CODE[6]), STR_45(CODE[6]), STR_43(CODE[6]), STR_41(CODE[6]), 
		 -> STR_39(CODE[6]), STR_37(CODE[6]), STR_35(CODE[6]), STR_33(CODE[17]), 
		 -> STR_21(CODE[17]), STR_12(CODE[7]), STR_7(CODE[18]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_78(CODE[4]), STR_77(CODE[23]), STR_76(CODE[8]), STR_75(CODE[29]), 
		 -> STR_74(CODE[41]), STR_73(CODE[8]), STR_72(CODE[25]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    mktime@timeptr	PTR struct tm size(2) Largest target is 18
		 -> time@DateTime(BANK0[18]), 

    sp__asctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    ctime@tp	PTR const long  size(2) Largest target is 4
		 -> main@sys_time(BANK1[4]), 

    gmtime@tp	PTR const long  size(2) Largest target is 4
		 -> localtime@t(BANK0[4]), 

    sp__gmtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    localtime@tp	PTR const long  size(2) Largest target is 4
		 -> reset_max_min@system_time(COMRAM[4]), main@sys_time(BANK1[4]), get_list@systime(BANK0[4]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> asctime@buf(BANK1[27]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_87(CODE[7]), 
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_84(CODE[5]), STR_83(CODE[19]), 
		 -> STR_82(CODE[5]), STR_81(CODE[5]), STR_80(CODE[5]), STR_79(CODE[20]), 
		 -> STR_78(CODE[4]), STR_77(CODE[23]), STR_76(CODE[8]), STR_75(CODE[29]), 
		 -> STR_74(CODE[41]), STR_73(CODE[8]), STR_72(CODE[25]), STR_68(CODE[7]), 
		 -> STR_67(CODE[6]), STR_65(CODE[26]), STR_64(CODE[28]), STR_62(CODE[10]), 
		 -> STR_60(CODE[10]), STR_58(CODE[6]), STR_56(CODE[6]), STR_54(CODE[6]), 
		 -> STR_53(CODE[8]), STR_51(CODE[6]), STR_49(CODE[6]), STR_47(CODE[6]), 
		 -> STR_45(CODE[6]), STR_43(CODE[6]), STR_41(CODE[6]), STR_39(CODE[6]), 
		 -> STR_37(CODE[6]), STR_35(CODE[6]), STR_33(CODE[17]), STR_21(CODE[17]), 
		 -> STR_12(CODE[7]), STR_7(CODE[18]), 

    S2482__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2482__prbuf$ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    sp__ctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    main@p	PTR unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    LCD_WriteStr@Str	PTR unsigned char  size(2) Largest target is 54
		 -> Display_Data@buffer(BANK1[20]), STR_71(CODE[54]), 

    ReadStr_I2C@Str	PTR unsigned char  size(2) Largest target is 4
		 -> time@time(BANK0[3]), time@date(BANK0[4]), 

    WriteStr_I2C@Str	PTR unsigned char  size(2) Largest target is 4
		 -> time_set@hour(BANK0[3]), date_set@date(BANK0[4]), 

    rd_string_EE@buffer	PTR unsigned char  size(2) Largest target is 53
		 -> Get_Variables@data(BANK0[53]), 

    wr_string_EE@buffer	PTR unsigned char  size(2) Largest target is 53
		 -> Save_Variables@data(BANK0[53]), 

    time@t	PTR long  size(2) Largest target is 4
		 -> reset_max_min@system_time(COMRAM[4]), main@sys_time(BANK1[4]), get_list@systime(BANK0[4]), 

    set_date@Date_Data	PTR unsigned char  size(2) Largest target is 4
		 -> date_set@date(BANK0[4]), 

    set_time@Time_Data	PTR unsigned char  size(2) Largest target is 3
		 -> time_set@hour(BANK0[3]), 

    get_date@Date_Data	PTR unsigned char  size(2) Largest target is 4
		 -> time@date(BANK0[4]), 

    get_time@Time_Data	PTR unsigned char  size(2) Largest target is 3
		 -> time@time(BANK0[3]), 

    time_set@tim	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    time_set@ptr	PTR unsigned char [3] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    time_set@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), 

    date_set@dat	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set@ptr	PTR unsigned char [5] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_69(CODE[2]), 

    sp__localtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    get_list@t	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    get_list@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    set_list@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    set_list@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    cal_analog@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    cal_analog@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    reset_var@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    lcd_display@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    lcd_display@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    read_command@rx_buff	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), 

    read_command@ptr	PTR unsigned char [3] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    read_command@tx_buff	PTR unsigned char  size(2) Largest target is 40
		 -> tx_buffer(BANK1[40]), 

    buffer	PTR unsigned char  size(2) Largest target is 40
		 -> tx_buffer(BANK1[40]), NULL(NULL[0]), 

    read_command@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _time_set->_atoi
    _set_time->_WriteStr_I2C
    _date_set->_atoi
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _set_date->_WriteStr_I2C
    _WriteStr_I2C->_OpenI2C
    _WriteStr_I2C->_WriteI2C
    _intTObcd->_atoi
    _set_min->_Get_Voltage_Vin
    _set_max->_Get_Voltage_Vin
    _lcd_display->_atoi
    _atoi->___wmul
    _LCD_SetContrast->_OpenI2C
    _LCD_SetContrast->_WriteI2C
    _LCD_SetBackLight_Brightness->_OpenI2C
    _LCD_SetBackLight_Brightness->_WriteI2C
    _time->_bcdTOint
    _ymd_to_scalar->_months_to_days
    _ymd_to_scalar->_years_to_days
    _months_to_days->___wmul
    ___lwdiv->___wmul
    _isleap->___lwmod
    _get_time->_ReadStr_I2C
    _get_date->_ReadStr_I2C
    _ReadStr_I2C->_OpenI2C
    _ReadStr_I2C->_WriteI2C
    _bcdTOint->___wmul
    _atof->_strtod
    ___altoft->___ftpack
    _Save_Variables->_wr_string_EE
    _wr_string_EE->_wr_byte_EE
    _ctime->_localtime
    _localtime->_gmtime
    _gmtime->___aldiv
    _dylen->___lwmod
    _asctime->_localtime
    _put2d->___awdiv
    _OpenIO5R->_WriteIO5R
    _LCD_Clear->_I2C_Send
    _I2C_Send->_OpenI2C
    _I2C_Send->_WriteI2C
    ___lwtoft->___ftpack
    _Check_VL_N->___ftge
    _Get_Variables->_rd_string_EE
    _rd_string_EE->_rd_byte_EE
    __doprnt->___llmod
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _LCD_WriteStr->_OpenI2C
    _LCD_WriteStr->_WriteI2C
    _LCD_SetCursor_Position->_OpenI2C
    _LCD_SetCursor_Position->_WriteI2C
    _Control_Loop->_Get_Control_Voltage
    ___ftge->___ftneg
    ___ftneg->_get_PID_deadband
    ___ftmul->___wmul
    ___lbtoft->___ftpack
    ___ftadd->___wmul

Critical Paths under _TimerInt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_read_command
    _read_command->_get_list
    _set_list->_sprintf
    _time_set->_intTObcd
    _date_set->_intTObcd
    _intTObcd->_atoi
    _reset_var->_sprintf
    _lcd_display->_atoi
    _get_list->_sprintf
    _time->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _cal_analog->_sprintf
    _atof->_strtod
    _strtod->___ftdiv
    _printf->__doprnt
    _ctime->_asctime
    _localtime->_gmtime
    _asctime->_localtime
    _Get_Voltage_Data->___ftdiv
    _LowPass_Vin->___ftmul
    _LowPass_VL3->___ftmul
    _LowPass_VL2->___ftmul
    _LowPass_VL1->___ftmul
    _Display_Data->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->___ftdiv
    ___ftsub->___ftadd
    _Control_Loop->_PID_Controller
    _PID_Controller->___ftdiv
    ___ftmul->___ftadd
    _Get_Control_Voltage->___ftdiv
    ___ftdiv->___ftmul

Critical Paths under _TimerInt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Display_Data

Critical Paths under _TimerInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TimerInt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TimerInt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TimerInt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TimerInt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                44    44      0 1191435
                                             21 BANK1     15    15      0
                       _Control_Loop
                       _Display_Data
                      _Get_Variables
                   _Get_Voltage_Data
                    _Get_Voltage_Vin
                          _LCD_Clear
                       _LCD_WriteStr
                     _Manual_Control
                            _OpenADC
                            _OpenI2C
                           _OpenIO5R
                          _OpenUSART
                        _Open_Timer0
                  _Rd_Digital_Inputs
                     _Save_Variables
                 _Set_LP_RC_constant
                          _WriteIO5R
                            ___ftdiv
                            ___ftmul
                            ___fttol
                    _check_V1_status
                    _check_V2_status
                    _check_V3_status
                   _check_start_flag
                              _ctime
                 _get_LP_RC_Constant
                             _printf
                       _read_command
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                            _set_max
                         _set_max_VL
                            _set_min
                         _set_min_VL
                             _strlen
                               _time
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     220
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _read_command                                        16    12      4  738273
                                            130 BANK0      6     2      4
                                              0 BANK1     10    10      0
                         _cal_analog
                           _get_list
                        _lcd_display
                          _reset_var
                           _set_list
                            _sprintf
                             _strcmp
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _set_list                                             7     3      4  191072
                                            120 BANK0      7     3      4
                     _Save_Variables
                 _Set_LP_RC_constant
                               _atof
                           _date_set
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                         _set_max_VL
                         _set_min_VL
                            _sprintf
                             _strcmp
                           _time_set
 ---------------------------------------------------------------------------------
 (3) _time_set                                            23    21      2   23851
                                             11 BANK0     23    21      2
                               _atoi
                           _intTObcd
                           _set_time
                             _strtok
 ---------------------------------------------------------------------------------
 (4) _set_time                                             2     0      2    1734
                                             33 COMRAM     2     0      2
                       _WriteStr_I2C
 ---------------------------------------------------------------------------------
 (3) _date_set                                            30    28      2   24194
                                             11 BANK0     30    28      2
                               _atoi
                           _intTObcd
                           _set_date
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    2959
                                             35 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     3      4     797
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     3      4     797
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               4     0      4     484
                                             24 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _set_date                                             2     0      2    1734
                                             33 COMRAM     2     0      2
                       _WriteStr_I2C
 ---------------------------------------------------------------------------------
 (5) _WriteStr_I2C                                         7     3      4    1613
                                             26 COMRAM     7     3      4
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _intTObcd                                             6     4      2   11620
                                              5 BANK0      6     4      2
                            ___awdiv
                            ___awmod
                             ___wmul
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _reset_var                                            2     0      2  111433
                                            120 BANK0      2     0      2
                    _Get_Voltage_Vin
                            _set_max
                            _set_min
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _set_min                                              3     0      3     391
                                             27 COMRAM     3     0      3
                    _Get_Voltage_Vin (ARG)
 ---------------------------------------------------------------------------------
 (1) _set_max                                              3     0      3     391
                                             27 COMRAM     3     0      3
                    _Get_Voltage_Vin (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_display                                          6     2      4   17122
                                              5 BANK0      6     2      4
        _LCD_SetBackLight_Brightness
                    _LCD_SetContrast
                               _atoi
                             _strcmp
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    6805
                                             44 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _LCD_SetContrast                                      1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _LCD_SetBackLight_Brightness                          1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _get_list                                            10     8      2  161744
                                            120 BANK0     10     8      2
                _Get_Control_Voltage
                    _Get_Voltage_Vin
                 _get_LP_RC_Constant
                         _get_PID_Kp
                          _get_PID_T
                         _get_PID_Td
                         _get_PID_Ti
                   _get_PID_deadband
                     _get_PID_output
                   _get_PID_setpoint
                         _get_max_VL
                         _get_min_VL
                          _localtime
                            _sprintf
                             _strcmp
                               _time
 ---------------------------------------------------------------------------------
 (1) _time                                                27    25      2   25172
                                             45 BANK0     27    25      2
                           _bcdTOint
                           _get_date
                           _get_time
                             _mktime
 ---------------------------------------------------------------------------------
 (2) _mktime                                              14    10      4   13088
                                             31 BANK0     14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (3) _ymd_to_scalar                                       16    10      6   11252
                                             15 BANK0     16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (4) _years_to_days                                       10     6      4    2391
                                             44 COMRAM     2     2      0
                                              7 BANK0      8     4      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) _months_to_days                                       2     0      2    6914
                                             44 COMRAM     2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     781
                                              0 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _isleap                                               5     3      2    1172
                                             29 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _get_time                                             2     0      2    2108
                                             32 COMRAM     2     0      2
                        _ReadStr_I2C
 ---------------------------------------------------------------------------------
 (2) _get_date                                             2     0      2    2108
                                             32 COMRAM     2     0      2
                        _ReadStr_I2C
 ---------------------------------------------------------------------------------
 (3) _ReadStr_I2C                                          6     2      4    1987
                                             26 COMRAM     6     2      4
                             _AckI2C
                           _CloseI2C
                            _IdleI2C
                         _Not_AckI2C
                            _OpenI2C
                            _ReadI2C
                         _RestartI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _RestartI2C                                           1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Not_AckI2C                                           1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _AckI2C                                               1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcdTOint                                             7     5      2    6704
                                             44 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _get_PID_output                                       3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _cal_analog                                           7     3      4  142506
                                            120 BANK0      7     3      4
                     _Save_Variables
                               _atof
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    8053
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _atof                                                 3     0      3   27517
                                             53 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (4) _strtod                                              12     8      4   25956
                                             44 COMRAM     1     1      0
                                             42 BANK0     11     7      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             32 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Save_Variables                                      53    53      0    1134
                                              0 BANK0     53    53      0
                 _get_LP_RC_Constant
                         _get_PID_Kp
                          _get_PID_T
                         _get_PID_Td
                         _get_PID_Ti
                   _get_PID_deadband
                   _get_PID_setpoint
                       _get_VL1_span
                       _get_VL1_zero
                       _get_VL2_span
                       _get_VL2_zero
                       _get_VL3_span
                       _get_VL3_zero
                       _get_Vin_span
                       _get_Vin_zero
                         _get_max_VL
                         _get_min_VL
                       _wr_string_EE
 ---------------------------------------------------------------------------------
 (4) _wr_string_EE                                         5     2      3     468
                                             26 COMRAM     5     2      3
                         _wr_byte_EE
 ---------------------------------------------------------------------------------
 (5) _wr_byte_EE                                           2     1      1     152
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _get_min_VL                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_max_VL                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_Vin_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_Vin_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL3_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL3_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL2_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL2_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL1_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL1_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_setpoint                                     3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Ti                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Td                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_T                                            3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Kp                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_LP_RC_Constant                                   3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     6      4   97372
                                             96 BANK0     10     6      4
                            __doprnt
                              _ctime (ARG)
 ---------------------------------------------------------------------------------
 (1) _ctime                                                2     0      2   25885
                                             19 BANK0      2     0      2
                            _asctime
                          _localtime
 ---------------------------------------------------------------------------------
 (3) _localtime                                           10     8      2    8194
                                             43 COMRAM     2     0      2
                                              4 BANK0      8     8      0
                             ___lmul
                             _gmtime
 ---------------------------------------------------------------------------------
 (4) _gmtime                                               9     7      2    6410
                                             38 COMRAM     5     3      2
                                              0 BANK0      4     4      0
                            ___aldiv
                            ___almod
                            ___awmod
                              _dylen
 ---------------------------------------------------------------------------------
 (5) _dylen                                                4     2      2    1315
                                             29 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     952
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___almod                                             10     2      8     973
                                             24 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     985
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    1356
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _asctime                                              7     5      2   17570
                                             12 BANK0      7     5      2
                            ___awdiv
                            ___awmod
                             ___wmul
                          _localtime (ARG)
                              _put2d
 ---------------------------------------------------------------------------------
 (3) _put2d                                                5     0      5    5486
                                             38 COMRAM     5     0      5
                            ___awdiv (ARG)
                            ___awmod
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _check_start_flag                                     5     5      0       0
                                             24 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _check_V3_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_V2_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_V1_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Rd_Digital_Inputs                                    2     2      0     170
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Open_Timer0                                          6     3      3     341
                                             24 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            3     1      2     338
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _OpenIO5R                                             0     0      0     474
                          _WriteIO5R
 ---------------------------------------------------------------------------------
 (1) _WriteIO5R                                            9     5      4     474
                                             24 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Manual_Control                                       0     0      0       0
                          _reset_PID
 ---------------------------------------------------------------------------------
 (2) _reset_PID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     946
                           _I2C_Send
 ---------------------------------------------------------------------------------
 (2) _I2C_Send                                             1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (1) _Get_Voltage_Data                                     3     3      0  114595
                                             42 BANK0      3     3      0
                         _Check_VL_N
                 _Get_Analog_Channel
                        _LowPass_VL1
                        _LowPass_VL2
                        _LowPass_VL3
                        _LowPass_Vin
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3464
                                             32 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _LowPass_Vin                                          9     6      3   20214
                                             27 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL3                                          9     6      3   20214
                                             27 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL2                                          9     6      3   20214
                                             27 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL1                                          9     6      3   20214
                                             27 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _Get_Analog_Channel                                   7     5      2     102
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Check_VL_N                                           3     0      3    2510
                                             39 COMRAM     3     0      3
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Get_Variables                                       55    53      2    6110
                                             30 COMRAM     2     0      2
                                              0 BANK0     53    53      0
                 _Set_LP_RC_constant
                       _rd_string_EE
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                         _set_max_VL
                         _set_min_VL
 ---------------------------------------------------------------------------------
 (1) _set_min_VL                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_max_VL                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Vin_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Vin_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL3_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL3_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL2_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL2_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL1_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL1_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_setpoint                                     3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_T                                            3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Kp                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Ki                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Kd                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Deadband                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _rd_string_EE                                         5     2      3     347
                                             25 COMRAM     5     2      3
                         _rd_byte_EE
 ---------------------------------------------------------------------------------
 (3) _rd_byte_EE                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Set_LP_RC_constant                                   3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Display_Data                                        21    21      0  107613
                                              0 BANK1     21    21      0
                    _Get_Voltage_VL1
                    _Get_Voltage_VL2
                    _Get_Voltage_VL3
                    _Get_Voltage_Vin
             _LCD_SetCursor_Position
                       _LCD_WriteStr
                            _get_max
                            _get_min
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24     8     16  102446
                                             96 BANK0     24     8     16
                _Get_Control_Voltage (ARG)
                    _Get_Voltage_VL1 (ARG)
                    _Get_Voltage_VL2 (ARG)
                    _Get_Voltage_VL3 (ARG)
                    _Get_Voltage_Vin (ARG)
                            __doprnt
                 _get_LP_RC_Constant (ARG)
                         _get_PID_Kp (ARG)
                          _get_PID_T (ARG)
                         _get_PID_Td (ARG)
                         _get_PID_Ti (ARG)
                   _get_PID_deadband (ARG)
                     _get_PID_output (ARG)
                   _get_PID_setpoint (ARG)
                            _get_max (ARG)
                         _get_max_VL (ARG)
                            _get_min (ARG)
                         _get_min_VL (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             42    36      6   96438
                                             57 BANK0     39    33      6
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   22328
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   22049
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    6012
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    2713
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2545
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     634
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     853
                                             24 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    3265
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     952
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     781
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     731
                                             42 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                 _get_LP_RC_Constant (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8814
                                             12 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_min                                              3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _get_max                                              3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteStr                                         5     2      3    2624
                                             26 COMRAM     5     2      3
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor_Position                               2     1      1    1697
                                             26 COMRAM     2     1      1
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             2     2      0      65
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Wait_AckI2C                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _StopI2C                                              1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _StartI2C                                             1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _OpenI2C                                              2     1      1     782
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Get_Voltage_Vin                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Control_Loop                                         6     6      0   45981
                                             54 BANK0      6     6      0
                _Get_Control_Voltage
                     _PID_Controller
                             ___ftge
                            ___ftneg
                   _get_PID_deadband
 ---------------------------------------------------------------------------------
 (4) _get_PID_deadband                                     3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2178
                                             30 COMRAM     9     3      6
                            ___ftneg (ARG)
                   _get_PID_deadband (ARG)
 ---------------------------------------------------------------------------------
 (2) _PID_Controller                                      15    12      3   25470
                                             42 BANK0     12     9      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3    1235
                                             27 COMRAM     3     0      3
                   _get_PID_deadband (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6   10361
                                             12 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                 _get_LP_RC_Constant (ARG)
 ---------------------------------------------------------------------------------
 (3) _Get_Control_Voltage                                  8     5      3   16968
                                             44 COMRAM     1     1      0
                                             42 BANK0      7     4      3
                    _Get_Voltage_VL1
                    _Get_Voltage_VL2
                    _Get_Voltage_VL3
                            ___ftadd
                            ___ftdiv
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    3104
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5253
                                             27 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
                 _get_LP_RC_Constant (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    8398
                                              0 BANK0     12     6      6
                    _Get_Voltage_VL1 (ARG)
                    _Get_Voltage_VL2 (ARG)
                    _Get_Voltage_VL3 (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL3                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL2                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL1                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _TimerInt                                            24    24      0      23
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Control_Loop
     _Get_Control_Voltage
       _Get_Voltage_VL1
       _Get_Voltage_VL2
       _Get_Voltage_VL3
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _get_LP_RC_Constant (ARG)
       ___lbtoft
         ___ftpack
     _PID_Controller
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _get_LP_RC_Constant (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     ___ftge
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       _get_PID_deadband (ARG)
     ___ftneg
       _get_PID_deadband (ARG)
     _get_PID_deadband
   _Display_Data
     _Get_Voltage_VL1
     _Get_Voltage_VL2
     _Get_Voltage_VL3
     _Get_Voltage_Vin
     _LCD_SetCursor_Position
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
     _LCD_WriteStr
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
     _get_max
     _get_min
     _sprintf
       _Get_Control_Voltage (ARG)
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _get_LP_RC_Constant (ARG)
         ___lbtoft
           ___ftpack
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       _Get_Voltage_Vin (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           _get_PID_deadband (ARG)
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___ftneg *
           _get_PID_deadband (ARG)
         ___ftsub *
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           _get_LP_RC_Constant (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
       _get_PID_Kp (ARG)
       _get_PID_T (ARG)
       _get_PID_Td (ARG)
       _get_PID_Ti (ARG)
       _get_PID_deadband (ARG)
       _get_PID_output (ARG)
       _get_PID_setpoint (ARG)
       _get_max (ARG)
       _get_max_VL (ARG)
       _get_min (ARG)
       _get_min_VL (ARG)
   _Get_Variables
     _Set_LP_RC_constant
     _rd_string_EE
       _rd_byte_EE
     _set_Deadband
     _set_PID_Kd
     _set_PID_Ki
     _set_PID_Kp
     _set_PID_T
     _set_PID_setpoint
     _set_VL1_span
     _set_VL1_zero
     _set_VL2_span
     _set_VL2_zero
     _set_VL3_span
     _set_VL3_zero
     _set_Vin_span
     _set_Vin_zero
     _set_max_VL
     _set_min_VL
   _Get_Voltage_Data
     _Check_VL_N
       ___ftge
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         _get_PID_deadband (ARG)
     _Get_Analog_Channel
     _LowPass_VL1
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_VL2
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_VL3
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_Vin
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     ___ftadd
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _get_LP_RC_Constant (ARG)
     ___ftge
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       _get_PID_deadband (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
     ___ftneg
       _get_PID_deadband (ARG)
     ___lwtoft
       ___ftpack
   _Get_Voltage_Vin
   _LCD_Clear
     _I2C_Send
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
   _LCD_WriteStr
     _CloseI2C
     _IdleI2C
     _OpenI2C
     _StartI2C
     _StopI2C
     _Wait_AckI2C
     _WriteI2C
   _Manual_Control
     _reset_PID
   _OpenADC
   _OpenI2C
   _OpenIO5R
     _WriteIO5R
   _OpenUSART
   _Open_Timer0
   _Rd_Digital_Inputs
   _Save_Variables
     _get_LP_RC_Constant
     _get_PID_Kp
     _get_PID_T
     _get_PID_Td
     _get_PID_Ti
     _get_PID_deadband
     _get_PID_setpoint
     _get_VL1_span
     _get_VL1_zero
     _get_VL2_span
     _get_VL2_zero
     _get_VL3_span
     _get_VL3_zero
     _get_Vin_span
     _get_Vin_zero
     _get_max_VL
     _get_min_VL
     _wr_string_EE
       _wr_byte_EE
   _Set_LP_RC_constant
   _WriteIO5R
   ___ftdiv
     ___ftadd (ARG)
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
     ___ftneg (ARG)
       _get_PID_deadband (ARG)
     ___ftpack (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     _get_LP_RC_Constant (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftadd (ARG)
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
       _get_PID_deadband (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _get_LP_RC_Constant (ARG)
   ___fttol
     ___ftdiv (ARG)
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _get_LP_RC_Constant (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
     _get_LP_RC_Constant (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _check_V1_status
   _check_V2_status
   _check_V3_status
   _check_start_flag
   _ctime
     _asctime
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _localtime (ARG)
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
       _put2d (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
     _localtime
       ___lmul
       _gmtime
         ___aldiv
         ___almod
         ___awmod
         _dylen
           ___lwmod
   _get_LP_RC_Constant
   _printf
     __doprnt
       Absolute function(Fake) *
       ___awdiv *
         ___awmod (ARG)
       ___ftadd *
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge *
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         _get_PID_deadband (ARG)
       ___ftmul *
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
       ___ftneg *
         _get_PID_deadband (ARG)
       ___ftsub *
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol *
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _get_LP_RC_Constant (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         _get_LP_RC_Constant (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv *
       ___llmod *
         ___lldiv (ARG)
       ___lltoft *
         ___ftpack
       ___wmul *
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ *
       __tdiv_to_l_ *
       _fround *
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit *
       _putch *
       _scale *
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _ctime (ARG)
       _asctime
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _localtime (ARG)
           ___lmul
           _gmtime
             ___aldiv
             ___almod
             ___awmod
             _dylen
               ___lwmod
         _put2d (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
       _localtime
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
   _read_command
     _cal_analog
       _Save_Variables
         _get_LP_RC_Constant
         _get_PID_Kp
         _get_PID_T
         _get_PID_Td
         _get_PID_Ti
         _get_PID_deadband
         _get_PID_setpoint
         _get_VL1_span
         _get_VL1_zero
         _get_VL2_span
         _get_VL2_zero
         _get_VL3_span
         _get_VL3_zero
         _get_Vin_span
         _get_Vin_zero
         _get_max_VL
         _get_min_VL
         _wr_string_EE
           _wr_byte_EE
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___ftge
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg
             _get_PID_deadband (ARG)
           ___lmul
           _isdigit
           _isspace
       _set_VL1_span
       _set_VL1_zero
       _set_VL2_span
       _set_VL2_zero
       _set_VL3_span
       _set_VL3_zero
       _set_Vin_span
       _set_Vin_zero
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _get_LP_RC_Constant (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             _get_LP_RC_Constant (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
     _get_list
       _Get_Control_Voltage
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _get_LP_RC_Constant (ARG)
         ___lbtoft
           ___ftpack
       _Get_Voltage_Vin
       _get_LP_RC_Constant
       _get_PID_Kp
       _get_PID_T
       _get_PID_Td
       _get_PID_Ti
       _get_PID_deadband
       _get_PID_output
       _get_PID_setpoint
       _get_max_VL
       _get_min_VL
       _localtime
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _get_LP_RC_Constant (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             _get_LP_RC_Constant (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
       _time
         _bcdTOint
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _get_date
           _ReadStr_I2C
             _AckI2C
             _CloseI2C
             _IdleI2C
             _Not_AckI2C
             _OpenI2C
             _ReadI2C
             _RestartI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _get_time
           _ReadStr_I2C
             _AckI2C
             _CloseI2C
             _IdleI2C
             _Not_AckI2C
             _OpenI2C
             _ReadI2C
             _RestartI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _mktime
           ___lmul
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _years_to_days
               ___lmul
               ___lwdiv
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
     _lcd_display
       _LCD_SetBackLight_Brightness
         _CloseI2C
         _IdleI2C
         _OpenI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
       _LCD_SetContrast
         _CloseI2C
         _IdleI2C
         _OpenI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
       _atoi
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _isdigit
       _strcmp
     _reset_var
       _Get_Voltage_Vin
       _set_max
         _Get_Voltage_Vin (ARG)
       _set_min
         _Get_Voltage_Vin (ARG)
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _get_LP_RC_Constant (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             _get_LP_RC_Constant (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
     _set_list
       _Save_Variables
         _get_LP_RC_Constant
         _get_PID_Kp
         _get_PID_T
         _get_PID_Td
         _get_PID_Ti
         _get_PID_deadband
         _get_PID_setpoint
         _get_VL1_span
         _get_VL1_zero
         _get_VL2_span
         _get_VL2_zero
         _get_VL3_span
         _get_VL3_zero
         _get_Vin_span
         _get_Vin_zero
         _get_max_VL
         _get_min_VL
         _wr_string_EE
           _wr_byte_EE
       _Set_LP_RC_constant
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___ftge
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg
             _get_PID_deadband (ARG)
           ___lmul
           _isdigit
           _isspace
       _date_set
         _atoi
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _isdigit
         _intTObcd
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _atoi (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _isdigit
         _set_date
           _WriteStr_I2C
             _CloseI2C
             _IdleI2C
             _OpenI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _set_Deadband
       _set_PID_Kd
       _set_PID_Ki
       _set_PID_Kp
       _set_PID_T
       _set_PID_setpoint
       _set_max_VL
       _set_min_VL
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _get_LP_RC_Constant (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             _get_LP_RC_Constant (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _get_LP_RC_Constant (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
       _time_set
         _atoi
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _isdigit
         _intTObcd
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _atoi (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _isdigit
         _set_time
           _WriteStr_I2C
             _CloseI2C
             _IdleI2C
             _OpenI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
     _sprintf
       _Get_Control_Voltage (ARG)
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _get_LP_RC_Constant (ARG)
         ___lbtoft
           ___ftpack
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       _Get_Voltage_Vin (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           _get_PID_deadband (ARG)
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _get_LP_RC_Constant (ARG)
         ___ftneg *
           _get_PID_deadband (ARG)
         ___ftsub *
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _get_LP_RC_Constant (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           _get_LP_RC_Constant (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _get_LP_RC_Constant (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _get_LP_RC_Constant (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
       _get_PID_Kp (ARG)
       _get_PID_T (ARG)
       _get_PID_Td (ARG)
       _get_PID_Ti (ARG)
       _get_PID_deadband (ARG)
       _get_PID_output (ARG)
       _get_PID_setpoint (ARG)
       _get_max (ARG)
       _get_max_VL (ARG)
       _get_min (ARG)
       _get_min_VL (ARG)
     _strcmp
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _set_Deadband
   _set_PID_Kd
   _set_PID_Ki
   _set_PID_Kp
   _set_PID_T
   _set_PID_setpoint
   _set_VL1_span
   _set_VL1_zero
   _set_VL2_span
   _set_VL2_zero
   _set_VL3_span
   _set_VL3_zero
   _set_Vin_span
   _set_Vin_zero
   _set_max
     _Get_Voltage_Vin (ARG)
   _set_max_VL
   _set_min
     _Get_Voltage_Vin (ARG)
   _set_min_VL
   _strlen
   _time
     _bcdTOint
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _get_date
       _ReadStr_I2C
         _AckI2C
         _CloseI2C
         _IdleI2C
         _Not_AckI2C
         _OpenI2C
         _ReadI2C
         _RestartI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
     _get_time
       _ReadStr_I2C
         _AckI2C
         _CloseI2C
         _IdleI2C
         _Not_AckI2C
         _OpenI2C
         _ReadI2C
         _RestartI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
     _mktime
       ___lmul
       _ymd_to_scalar
         _isleap
           ___lwmod
         _months_to_days
           ___lwdiv
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _years_to_days
           ___lmul
           ___lwdiv
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _TimerInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     24      DB       6       85.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     88      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1       9        0.0%
DATA                 0      0     1C1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Nov 09 14:01:02 2017

                                                  __size_of_Get_Analog_Channel 0040  
                                                                 ___altoft@exp 0029  
                                                                _years_to_days 6A38  
                                                                  _SSPSTATbits 000FC7  
                                                                ___altoft@sign 002A  
                                                                           _Kp 011C  
                                                                           _k1 003E  
                                                                 ___awdiv@sign 0024  
                                                          months_to_days@month 002D  
                                                               ??_get_Vin_span 001C  
                                                                           _td 0119  
                                                                           _ti 002F  
                                                               ??_get_Vin_zero 001C  
                                                          ___wmul@multiplicand 0029  
                                                                 __CFG_CP0$OFF 000000  
                                                                 __CFG_CP1$OFF 000000  
                                                                 __CFG_CP2$OFF 000000  
                                                                 __CFG_CP3$OFF 000000  
                                                                  __CFG_OSC$HS 000000  
                                                                 ___ftadd@exp1 006B  
                                                                 ___ftadd@exp2 006A  
                                                                 ___ftadd@sign 0069  
                                                                          l200 1326  
                                                                          l120 7C94  
                                                                          l210 1458  
                                                                          l202 136E  
                                                                          l122 7CC8  
                                                                          l114 7BB0  
                                                                          l131 5E1A  
                                                                          l220 16C4  
                                                                          l212 150A  
                                                                          l204 13C8  
                                                                          l124 7CFC  
                                                                          l116 7C34  
                                                                          l205 13AC  
                                                                          l125 7D1C  
                                                                          l150 331E  
                                                                          l142 31EE  
                                                                          l214 15A2  
                                                                          l118 7C68  
                                                                          l303 52EE  
                                                                          l135 60E4  
                                                                          l152 336A  
                                                                          l144 323A  
                                                                          l216 167C  
                                                                          l208 1410  
                                                                          l217 1620  
                                                                          l129 5DE0  
                                                                          l137 6118  
                                                                          l161 29B0  
                                                                          l154 33B6  
                                                                          l146 3286  
                                                                          l138 6134  
                                                                          l226 7A30  
                                                                          l234 6DD8  
                                                                          l171 2B2C  
                                                                          l163 29FC  
                                                                          l156 3402  
                                                                          l148 32D2  
                                                                          l228 7AF6  
                                                                          l157 341E  
                                                                          l229 7B5A  
                                                                          l181 2C68  
                                                                          l173 2B78  
                                                                          l165 2A48  
                                                                          l190 11BE  
                                                                          l182 2C84  
                                                                          l175 2BC4  
                                                                          l167 2A94  
                                                                          l600 6F76  
                                                                          l192 1206  
                                                                          l601 6F7C  
                                                                          l265 640E  
                                                                          l177 2C10  
                                                                          l169 2AE0  
                                                                          l194 124E  
                                                                          l186 112E  
                                                                          l266 63A8  
                                                                          l179 2C3C  
                                                                          l196 1296  
                                                                          l188 1176  
                                                                          l293 5380  
                                                                          l534 4FAE  
                                                                          l294 5366  
                                                                          l710 3FCA  
                                                                          l198 12DE  
                                                                          l543 528E  
                                                                          l711 3FCE  
                                                                          l287 53EC  
                                                                          l464 72D6  
                                                                          l480 1800  
                                                                          l288 53D0  
                                                                          l465 7304  
                                                                          l473 5912  
                                                                          l481 17DE  
                                                                          l553 4FFC  
                                                                          l466 7318  
                                                                          l722 54D6  
                                                                          l490 1A58  
                                                                          l482 1818  
                                                                          l467 7346  
                                                                          l571 4FC8  
                                                                          l547 4F84  
                                                                          l539 5284  
                                                                          l491 1A36  
                                                                          l483 17EA  
                                                                          l468 735A  
                                                                          l476 5938  
                                                                          l492 1A70  
                                                                          l484 17F2  
                                                                          l708 3FA0  
                                                                          l580 5034  
                                                                          l469 7388  
                                                                          l493 1A42  
                                                                          l485 192C  
                                                                          l565 5018  
                                                                          l494 1A4A  
                                                                          l486 190A  
                                                                          l495 1B78  
                                                                          l487 1944  
                                                                          l559 504E  
                                                                          l591 6ED4  
                                                                          l496 1BA6  
                                                                          l488 1916  
                                                                          l489 191E  
                                                                          l593 6EEC  
                                                                          l594 6F06  
                                                                          l586 5C88  
                                                                          l747 5FE0  
                                                                          l595 6F1E  
                                                                          l596 6F3E  
                                                                          l599 6F56  
                                                                          l990 1D64  
                                                                          l992 1ED8  
                                                                          l993 1F3E  
                                                                          l995 1F7A  
                                                                          l988 1C0E  
                                                                          l997 1F56  
                                                                          l999 1F8A  
                                                                 __CFG_CPB$OFF 000000  
                                                                 __CFG_CPD$OFF 000000  
                                                                          _VL1 003B  
                                                                          _VL2 0038  
                                                                          _VL3 0035  
                                                                          _Vin 0032  
                                                                 __CFG_BOR$OFF 000000  
                                                                          _max 011F  
                                                                          _min 0122  
                                                                  _start_value 00F5  
                                                                 __CFG_BORV$25 000000  
                                                                 ___awmod@sign 001E  
                                                                          prod 000FF3  
                                                    __size_of_check_start_flag 0048  
                                                                          tosl 000FFD  
                                                                          wreg 000FE8  
                                                    __end_of_Rd_Digital_Inputs 5180  
                                                                  get_list@var 00D8  
                                                                   _Check_VL_N 58EC  
                                                                 __CFG_LVP$OFF 000000  
                                                                 ___ftdiv@cntr 0084  
                                                                 ___ftdiv@sign 0089  
                                                                 __CFG_WDT$OFF 000000  
                                                                         l1001 1FEC  
                                                                         l1011 562C  
                                                                         l1003 1FF6  
                                                                         l1012 5634  
                                                                         l1004 2026  
                                                                         l1031 6A32  
                                                                         l1042 544A  
                                                                         l1027 69D6  
                                                                         l1035 55C2  
                                                                         l1051 54A0  
                                                                         l1300 0B8C  
                                                                         l1044 5464  
                                                                         l1052 54AA  
                                                                         l1117 3E56  
                                                                         l1029 6A1E  
                                                                         l1301 0D42  
                                                                         l1037 55DC  
                                                                         l1045 546E  
                                                                         l1118 3E6A  
                                                                         l1222 272E  
                                                                         l1302 0BE0  
                                                                         l1038 55EE  
                                                                         l1223 264C  
                                                                         l1311 0E38  
                                                                         l1303 0CB4  
                                                                         l1151 52C4  
                                                                         l1216 357C  
                                                                         l1320 0F7A  
                                                                         l1312 0E60  
                                                                         l1152 52C8  
                                                                         l1400 6778  
                                                                         l1233 01C6  
                                                                         l1049 5486  
                                                                         l1401 676A  
                                                                         l1226 2704  
                                                                         l1306 0DD4  
                                                                         l1242 04A2  
                                                                         l1250 033C  
                                                                         l1234 0250  
                                                                         l1219 3652  
                                                                         l1227 286A  
                                                                         l1323 0F9A  
                                                                         l1307 0D52  
                                                                         l1251 0352  
                                                                         l1235 0218  
                                                                         l1324 1068  
                                                                         l1316 0EE2  
                                                                         l1308 0D98  
                                                                         l1252 034A  
                                                                         l1180 5BA4  
                                                                         l2124 5D8A  
                                                                         l1340 5A62  
                                                                         l1404 67A4  
                                                                         l1500 20E0  
                                                                         l1229 2930  
                                                                         l1325 109E  
                                                                         l1261 0DE4  
                                                                         l1245 02F2  
                                                                         l1237 02E0  
                                                                         l1181 5BAE  
                                                                         l2125 5D9E  
                                                                         l1341 5A78  
                                                                         l1405 67B4  
                                                                         l1413 5ED2  
                                                                         l1501 2100  
                                                                         l1318 0F14  
                                                                         l1270 07D4  
                                                                         l1262 0500  
                                                                         l1246 04E2  
                                                                         l1238 02C6  
                                                                         l1182 5BB2  
                                                                         l1406 67CC  
                                                                         l1414 5EC4  
                                                                         l1502 211E  
                                                                         l1263 0556  
                                                                         l1239 0286  
                                                                         l1183 5BBE  
                                                                         l1256 03BE  
                                                                         l1184 5BC2  
                                                                         l2136 59B2  
                                                                         l1273 0772  
                                                                         l1265 060A  
                                                                         l1257 042C  
                                                                         l1249 02FA  
                                                                         l1185 5BCC  
                                                                         l1177 5B92  
                                                                         l1521 22B6  
                                                                         l1513 2200  
                                                                         l1505 21BA  
                                                                         l2073 58A6  
                                                                         l2137 59A8  
                                                                         l2081 56DE  
                                                                         l1266 0674  
                                                                         l1258 0486  
                                                                         l1186 5BD0  
                                                                         l1530 23B2  
                                                                         l1522 22C2  
                                                                         l1506 21A4  
                                                                         l2074 589C  
                                                                         l2146 5A0C  
                                                                         l2082 56D8  
                                                                         l1291 0AB8  
                                                                         l1179 5BA0  
                                                                         l1531 237E  
                                                                         l1523 22EE  
                                                                         l1507 214A  
                                                                         l2155 56A4  
                                                                         l2147 5A02  
                                                                         l1292 0A36  
                                                                         l1284 08FA  
                                                                         l1268 069C  
                                                                         l1612 5C3A  
                                                                         l1540 246C  
                                                                         l1524 232A  
                                                                         l1516 221A  
                                                                         l1293 0A7C  
                                                                         l1269 06E6  
                                                                         l1541 2438  
                                                                         l1509 21B0  
                                                                         l2093 67F4  
                                                                         l1702 2D42  
                                                                         l1526 23E6  
                                                                         l2094 6808  
                                                                         l1287 0918  
                                                                         l1279 083C  
                                                                         l1391 6C8A  
                                                                         l1623 3CEC  
                                                                         l1543 24CA  
                                                                         l1527 236E  
                                                                         l1712 2DDA  
                                                                         l1296 0AEE  
                                                                         l1288 09EC  
                                                                         l1392 6C9A  
                                                                         l1384 6C06  
                                                                         l1624 3CCC  
                                                                         l1544 24B0  
                                                                         l1528 2338  
                                                                         l1560 6FFA  
                                                                         l2096 6846  
                                                                         l1721 2E38  
                                                                         l1713 2DCA  
                                                                         l1705 2D54  
                                                                         l1641 714E  
                                                                         l1297 0AF4  
                                                                         l1289 0A26  
                                                                         l1393 6CB2  
                                                                         l1385 6C20  
                                                                         l1545 24EE  
                                                                         l1537 242C  
                                                                         l1553 6F9E  
                                                                         l2097 6888  
                                                                         l1722 2E28  
                                                                         l1706 2D60  
                                                                         l1642 713C  
                                                                         l1810 5650  
                                                                         l1626 3D54  
                                                                         l1538 23F6  
                                                                         l1562 7080  
                                                                         l1554 6F98  
                                                                         l2098 6892  
                                                                         l1707 2DEA  
                                                                         l1299 0B58  
                                                                         l1387 6C52  
                                                                         l1627 3D3A  
                                                                         l1563 708A  
                                                                         l1724 2E72  
                                                                         l1636 7192  
                                                                         l1740 72A4  
                                                                         l1580 62D6  
                                                                         l1572 6272  
                                                                         l1388 6C44  
                                                                         l1804 531E  
                                                                         l1556 6FE6  
                                                                         l1725 2E9E  
                                                                         l1733 77C4  
                                                                         l1581 62E6  
                                                                         l1573 6284  
                                                                         l1813 5672  
                                                                         l1397 6740  
                                                                         l1670 6908  
                                                                         l1726 2EEE  
                                                                         l1734 7826  
                                                                         l1830 616C  
                                                                         l1638 70EC  
                                                                         l1742 7208  
                                                                         l1814 567C  
                                                                         l1398 6756  
                                                                         l1671 68F0  
                                                                         l1735 786A  
                                                                         l1831 615E  
                                                                         l1647 7178  
                                                                         l1639 711E  
                                                                         l1751 728A  
                                                                         l1743 7232  
                                                                         l1575 62A6  
                                                                         l1495 2098  
                                                                         l1559 7046  
                                                                         l1840 5CDC  
                                                                         l1648 716A  
                                                                         l1752 727C  
                                                                         l1576 629C  
                                                                         l1592 5F7A  
                                                                         l1496 2090  
                                                                         l1920 6D1E  
                                                                         l1673 6934  
                                                                         l1841 5CCE  
                                                                         l1745 7260  
                                                                         l1593 5F86  
                                                                         l1585 5F36  
                                                                         l1809 5658  
                                                                         l1674 6928  
                                                                         l1770 79BC  
                                                                         l1834 61A4  
                                                                         l1746 724E  
                                                                         l1594 5F96  
                                                                         l1586 5F44  
                                                                         l1498 20CC  
                                                                         l1667 68D0  
                                                                         l1835 61B4  
                                                                         l1851 5AC4  
                                                                         l1579 62CA  
                                                                         l1668 68C4  
                                                                         l1756 6326  
                                                                         l1780 586A  
                                                                         l1844 5D08  
                                                                         l1852 5AB6  
                                                                         l1588 5F5E  
                                                                         l1908 5B6A  
                                                                         l1765 790A  
                                                                         l1757 6358  
                                                                         l1845 5D18  
                                                                         l1589 5F54  
                                                                         l1766 795A  
                                                                         l1774 520E  
                                                                         l1918 6D60  
                                                                         l1926 2F6E  
                                                                         l1767 797A  
                                                                         l1792 771E  
                                                                         l1769 799C  
                                                                         l1793 770C  
                                                                         l1929 318C  
                                                                         l1698 2D04  
                                                                         l1786 76EC  
                                                                         l1795 7748  
                                                                         l1787 76D6  
                                                                         l1883 6058  
                                                                         l1884 604A  
                                                                         l1893 5810  
                                                                         l1894 5806  
                                                                         l1799 512C  
                                                                         l1887 6092  
                                                                         l1888 60A2  
                                                                         l1897 582C  
                                                                         l1898 5838  
                                                                         l9031 6F8E  
                                                                         l9147 295E  
                                                                         l9085 4CF6  
                                                                         l8609 6960  
                                                                         l9417 78A0  
                                                                         l9521 775A  
                                                                         l8555 6386  
                                                                         l8557 638A  
                                                                         l8825 79FC  
                                                                         l9633 689C  
                                                                         l8691 4F88  
                                                                         l8941 56C6  
                                                                         l8679 529A  
                                                                         l9831 047E  
                                                                         l9655 7040  
                                                                         l8777 2F14  
                                                                         l9913 0844  
                                                                         l9817 03C0  
                                                                         l9683 63AA  
                                                                         l9951 0A1E  
                                                                         STR_1 7FF8  
                                                                         STR_2 7F8F  
                                                                         l9777 0244  
                                                                         STR_3 7F91  
                                                                         STR_4 7FE1  
                                                                         l9955 0A38  
                                                                         STR_5 7FD5  
                                                                         STR_6 7FD1  
                                                                         l9965 0AA8  
                                                                         l9893 074C  
                                                                         l9885 06E8  
                                                                         STR_7 7EE9  
                                                                         STR_8 7F51  
                                                                         STR_9 7F2C  
                                                                         l9989 0B84  
                                                                         u8000 50FC  
                                                                         _RCIE 007CED  
                                                                         _RCIF 007CF5  
                                                                         u8111 2CA2  
                                                                         u8008 5100  
                                                                         u9000 677E  
                                                                         u8121 2CC0  
                                                                         u8210 2D9A  
                                                                         u8150 2CF4  
                                                                         u8321 78BE  
                                                                         u8250 2DF8  
                                                                         u8410 62AC  
                                                                         u9130 5318  
                                                                         u9051 7778  
                                                                         u9211 7644  
                                                                         u8180 2D32  
                                                                         u9300 6172  
                                                                         u8341 78E4  
                                                                         u8350 78F4  
                                                                         u9230 767C  
                                                                         u9071 779E  
                                                                         u8280 2E46  
                                                                         u9080 77AE  
                                                                         u9160 5C30  
                                                                         u8520 5B64  
                                                                         u9330 5CE2  
                                                                         u9410 59E8  
                                                                         u9235 7670  
                                                                         u9260 76F6  
                                                                         u7910 6940  
                                                                         u9270 772A  
                                                                         u8470 5F64  
                                                                         u9360 6D00  
                                                                         u9520 6424  
                                                                         u8900 7180  
                                                                         u8820 7268  
                                                                         u9700 0468  
                                                                         u9540 2F3E  
                                                                         u7870 68B4  
                                                                         u8830 7292  
                                                                         u9630 038E  
                                                                         u7950 6060  
                                                                         u9550 2F60  
                                                                         u9390 5A42  
                                                                         u8751 71AA  
                                                                         u9535 5962  
                                                                         u9800 06B4  
                                                                         u9810 06FE  
                                                                         u8771 71C4  
                                                                         u9707 045E  
                                                                         u8940 6C58  
                                                                         u7980 5816  
                                                                         u9637 0384  
                                         __size_of_LCD_SetBackLight_Brightness 0040  
                                                                         u9840 074A  
                                                                         u9760 05A0  
                                                                         u8890 7156  
                                                                         u9690 041E  
                                                                         u9765 0592  
                                                                         u9918 08DE  
                                                                         u9598 01FA  
                                                                         u9880 0894  
                                                                         u9688 03E8  
                                                                         u9697 0414  
                                                                         u9689 0422  
                                                                         u9970 0ACE  
                                                                         u9938 09CC  
                                                                         u9980 0AE6  
                                                                         u9968 0A60  
                                                                         _TXIE 007CEC  
                                                                         _TXIF 007CF4  
                                                                 __CFG_PWRT$ON 000000  
                                                                 __CFG_STVR$ON 000000  
                                                                         _atof 524A  
                                                                         _atoi 6F94  
                                                        __size_of_WriteStr_I2C 0070  
                                                               ReadStr_I2C@Str 001C  
                                                                         _main 1BB0  
                                                              ?_PID_Controller 008A  
                                                                 ___ftpack@arg 0019  
                                                           __size_of_LCD_Clear 000C  
                                                                 ___ftpack@exp 001C  
                                                                         _time 6B0C  
                                                                         fsr0h 000FEA  
                                                                         fsr1h 000FE2  
                                                                         fsr2h 000FDA  
                                                                         fsr0l 000FE9  
                                                                         indf1 000FE7  
                                                                         indf2 000FDF  
                                                                         fsr1l 000FE1  
                                                                         fsr2l 000FD9  
                                                             __end_of_I2C_Send 53C6  
                                                                         btemp 0047  
                                                 __size_of_Get_Control_Voltage 0120  
                                                            ?_get_PID_deadband 0019  
                                                                         prodh 000FF4  
                                                                         prodl 000FF3  
                                                                         start 01B2  
                                                               ??_Control_Loop 002E  
                                                              __end_of_IdleI2C 5114  
                                                              _LCD_SetContrast 5570  
                                                           ??_get_PID_deadband 001C  
                                                                ?_LCD_WriteStr 001B  
                                                                 ___ftmul@cntr 0079  
                                                                 ___param_bank 000000  
                                                                 ___ftmul@sign 007A  
                                                               ?_years_to_days 0067  
                                                              __end_of_ReadI2C 505E  
                                                              __end_of_OpenI2C 50F0  
                                                              __end_of_OpenADC 4C74  
                                                                 ___fttol@exp1 0098  
                                                                 ___fttol@lval 0094  
                                                           Display_Data@buffer 01B7  
                                                                ??_ReadStr_I2C 001F  
                                                                __CFG_OSCS$OFF 000000  
                                                              __end_of_StopI2C 4FD6  
                                                                        l10023 0DC4  
                                                                        l10007 0CE4  
                                                                        l10045 0E68  
                                                                        l10091 1096  
                                                                        l10261 24FC  
                                                                        l10813 16DE  
                                                                        l11537 1D4C  
                                                                        l10961 593C  
                                                                        l11577 1F86  
                                                                        l11489 1BF6  
                                                                        l10975 3F96  
                                                              __end_of___aldiv 6CC8  
                                                                        ?_atof 0095  
                                                                        ?_atoi 002D  
                                                              __end_of___almod 67E2  
                                                                        ?_main 0001  
                                                       __size_of_ymd_to_scalar 00E2  
                                                               ReadI2C@IE_stat 0019  
                                                              __end_of___awdiv 62F4  
                                                              __end_of___lbdiv 5684  
                                                                        _EEADR 000FA9  
                                                              __end_of___ftadd 2F1A  
                                                                        STR_10 7FE5  
                                                                        STR_11 7FD9  
                                                                        STR_20 7F95  
                                                                        STR_12 7F69  
                                                                        STR_13 7FBE  
                                                                        STR_21 7EFB  
                                                                        STR_30 7FD9  
                                                                        STR_22 7FF5  
                                                                        STR_14 7FC3  
                                                                        STR_31 7F13  
                                                                        STR_23 7FF2  
                                                                        STR_15 7FC8  
                                                                        STR_24 7FEF  
                                                                        STR_16 7FAF  
                                                                        STR_32 7FA5  
                                                                        STR_40 7F3F  
                                                                        STR_41 7F77  
                                                                        STR_33 7EFB  
                                                                        STR_17 7FB4  
                                                                        STR_25 7F0C  
                                                                        STR_50 7FD9  
                                                                        STR_34 7FF5  
                                                                        STR_42 7F48  
                                                                        STR_18 7FB9  
                                                                        STR_26 7F48  
                                                                        STR_51 7F77  
                                                                        STR_43 7F77  
                                                                        STR_19 7F89  
                                                                        STR_35 7F77  
                                                                        STR_27 7F36  
                                                                        STR_44 7F36  
                                                                        STR_36 7FF2  
                                                                        STR_28 7FE9  
                                                                        STR_52 7FAA  
                                                                        STR_60 7F18  
                                                              __end_of___awmod 5FA4  
                                                                        STR_45 7F77  
                                                                        STR_37 7F77  
                                                                        STR_61 7F13  
                                                                        STR_29 7FE5  
                                                                        STR_53 7F5A  
                                                                        STR_46 7FE9  
                                                                        STR_38 7FEF  
                                                                        STR_70 7FFC  
                                                                        STR_54 7F83  
                                                                        STR_62 7F22  
                                                                        STR_39 7F77  
                                                                        STR_55 7FEC  
                                                                        STR_63 7FA0  
                                                                        STR_47 7F7D  
                                                                        STR_71 7DA5  
                                                                        STR_56 7F77  
                                                                        STR_48 7FE5  
                                                                        STR_80 7F9B  
                                                                        STR_72 7E7C  
                                                                        STR_64 7E46  
                                                                        STR_73 7EA4  
                                                                        STR_49 7F77  
                                                                        STR_81 7F9B  
                                                                        STR_57 7FDD  
                                                                        STR_65 7E62  
                                                                        STR_58 7F77  
                                                                        STR_82 7F9B  
                                                                        STR_66 7F70  
                                                                        STR_74 7DDB  
                                                                        STR_67 7F77  
                                                                        STR_59 7FA5  
                                                                        STR_83 7ED6  
                                                                        STR_75 7E29  
                                                                        STR_76 7EA4  
                                                                        STR_68 7F69  
                                                                        STR_84 7F9B  
                                                                        STR_85 7F9B  
                                                                        STR_69 7FFA  
                                                                        STR_77 7E95  
                                                                        STR_86 7F9B  
                                                                        STR_78 7FCD  
                                                                        ?_time 008D  
                                                                        STR_87 7F62  
                                                                        STR_79 7EC2  
                                                                        STR_88 7EAC  
                                                                        STR_89 7E04  
                                                              __end_of___ftdiv 78A6  
                                                              __end_of___ftneg 5220  
                                                              __end_of___lldiv 61CA  
                                                                        u10210 10B6  
                                                                        u10130 0EB8  
                                                                        u10018 0B3C  
                                                                        u10211 10B4  
                                                                        u10220 10D8  
                                                                        u10038 0C94  
                                                                        u10208 104A  
                                                                        u10068 0D7C  
                                                                        u10340 21E2  
                                                                        u10260 20D8  
                                                              __end_of___ftmul 7A02  
                                                                        u10360 2212  
                                                                        _T0CON 000FD5  
                                                                        u10188 0F5E  
                                                                        u11180 3FF0  
                                                                        u10540 249E  
                                                                        u10620 58DC  
                                                              ___awdiv@divisor 0021  
                                                                        u11190 6004  
                                                                        u11510 1C18  
                                                              __end_of___llmod 5D2E  
                                                                        u11530 1D84  
                                                              __end_of___ftsub 5898  
                                                                        u10660 7B5A  
                                                                        u11620 2036  
                                                                        u11540 1DC4  
                                                                        u11197 5FFA  
                                                              __end_of___fttol 7760  
                                                                        u10590 565E  
                                                                        u11626 203A  
                                                                        u11647 1D6E  
                                                                        u11657 54CC  
                                                              __end_of___lwdiv 60B0  
                                                              __end_of___lwmod 5846  
                                                              ___awdiv@counter 0023  
                                                                        _RCREG 000FAE  
                                                                        _RCSTA 000FAB  
                                                                        _TMR0H 000FD7  
                                                                        _TMR0L 000FD6  
                                                                        _SPBRG 000FAF  
                                                                        _PORTB 000F81  
                                                              __end_of__doprnt 10E6  
                                                                        _TRISA 000F92  
                                                                        _TRISB 000F93  
                                                                        _TRISC 000F94  
                                                                        _TXREG 000FAD  
                                                                        _TXSTA 000FAC  
                                                                __CFG_WRT0$OFF 000000  
                                                                __CFG_WRT1$OFF 000000  
                                                                __CFG_WRT2$OFF 000000  
                                                          ___lmul@multiplicand 001D  
                                                                __CFG_WRT3$OFF 000000  
                                                               _Manual_Control 4FD6  
                                                                 ___lltoft@exp 0029  
                                                               __CFG_EBTR0$OFF 000000  
                                                               __CFG_EBTR1$OFF 000000  
                                                               __CFG_EBTR2$OFF 000000  
                                                               __CFG_EBTR3$OFF 000000  
                                                              __end_of_asctime 3914  
                                                              __end_of_get_max 4CE0  
                                                              __end_of_get_min 4CF2  
                                                                _start_counter 0043  
                                                             _set_PID_setpoint 4D5E  
                                                                __CFG_WRTB$OFF 000000  
                                                                __CFG_WRTC$OFF 000000  
                                                                __CFG_WRTD$OFF 000000  
                                                                 _WriteStr_I2C 5C4A  
                                                             ?_check_V1_status 0001  
                                                               __CFG_EBTRB$OFF 000000  
                                                             ?_check_V2_status 0001  
                                                            ?_get_PID_setpoint 0019  
                                                              __end_of_dpowers 7D4B  
                                                                        _ctime 5180  
                                                             ?_check_V3_status 0001  
                                                                        _dylen 5BDE  
                                                                        _error 00EC  
                                                                        _scale 2502  
                                                              __end_of_isdigit 5138  
                                                                        _put2d 5D2E  
                                                        __size_of_wr_string_EE 0036  
                                                                ___ftpack@sign 001D  
                                                                        _value 00FE  
                                                                        atoi@a 0063  
                                                                        atof@s 0095  
                                                                        atoi@s 002D  
                                                              ReadStr_I2C@stat 0020  
                                                                        _putch 4CF2  
                                                                        main@i 01D9  
                                                                        main@p 01D2  
                                                              __end_of_isspace 532A  
                                                              __end_of_moninit 7DA5  
                                                           ??_get_PID_setpoint 001C  
                                                     ??_LCD_SetCursor_Position 001C  
                                                                        pclath 000FFA  
                                                              __end_of_set_max 4F68  
                                                              __end_of_set_min 4F7A  
                                                                        tablat 000FF5  
                                                             ymd_to_scalar@day 0073  
                                                                        time@t 008D  
                                                                        plusw2 000FDB  
                                                                        status 000FD8  
                                                         __end_of_get_VL1_span 4EA2  
                                                                        wtemp6 0048  
                                                              __end_of_sprintf 5EA0  
                                                         __end_of_get_VL2_span 4EC6  
                                                         __end_of_get_VL1_zero 4EB4  
                                                         __end_of_get_VL3_span 4EEA  
                                                         __end_of_get_VL2_zero 4ED8  
                                                              __end_of_strcspn 59F6  
                                                         __end_of_get_VL3_zero 4EFC  
                                                              ___lbdiv@divisor 0019  
                                                              years_to_days@yr 0067  
                                                              ___lbdiv@counter 001B  
                                                               ??_LCD_WriteStr 001E  
                                                                ??_LowPass_VL1 002D  
                                                                ??_LowPass_VL2 002D  
                                                                ??_LowPass_VL3 002D  
                                                             __end_of_CloseI2C 4C5A  
                                                                 main@sys_time 01D5  
                                                                ??_LowPass_Vin 002D  
                                                              __initialization 575E  
                                                                 __end_of_atof 5274  
                                                                 __end_of_atoi 7090  
                                                                 __end_of_main 2070  
                                                                 __end_of_time 6BE8  
                                                            PID_Controller@val 008A  
                                                             __end_of_OpenIO5R 535C  
                                                                       ??_atof 002E  
                                                                       ??_atoi 0060  
                                                                       ??_main 01CC  
                                                                ___fttol@sign1 0093  
                                                                       ??_time 002F  
                                                            __end_of_LCD_Clear 4C66  
                                                       __end_of_Manual_Control 4FF0  
                                                                __activetblptr 000002  
                                                                 _wr_string_EE 53C6  
                                                                ??_Open_Timer0 001C  
                                                                Open_Timer0@IE 0019  
                                                         __size_of__tdiv_to_l_ 0112  
                                                             __end_of_TimerInt 01B2  
                                                            get_date@Date_Data 0021  
                                                            set_date@Date_Data 0022  
                                                          __end_of_ReadStr_I2C 6F94  
                                                             __end_of_StartI2C 4FBC  
                                                   __size_of_Rd_Digital_Inputs 0024  
                                                         __end_of_Display_Data 3B6A  
                                                                   _Not_AckI2C 5026  
                                                   Get_Analog_Channel@ADC_data 001D  
                                                               lcd_display@val 0069  
                                                               lcd_display@var 0065  
                                                                  ?_Check_VL_N 0028  
                                                                       _ADCON0 000FC2  
                                                                       _ADCON1 000FC1  
                                                                       ?_ctime 0073  
                                                                       ?_dylen 001E  
                                                             __end_of___altoft 5F20  
                                                             ___llmod@dividend 0026  
                                                                       ?_scale 007B  
                                                                       _ADRESH 000FC4  
                                                                       _ADRESL 000FC3  
                                                                       _EEDATA 000FA8  
                                                             __end_of_bcdTOint 599C  
                                                                       _EECON2 000FA7  
                                                                       ?_put2d 0027  
                                                             ___awdiv@dividend 001F  
                                                             __end_of_WriteI2C 52A0  
                                                                       ?_putch 0001  
                                                             __end_of___ftpack 6966  
                                                             __end_of___lbtoft 51CE  
                                                             __end_of___lltoft 5B12  
                                                                  OpenI2C@slew 0019  
                                                                       i2l1060 00AC  
                                                                       i2l1062 00BE  
                                                                       i2l1064 0150  
                                                                       i2l1065 00F0  
                                                                       i2l1058 006A  
                                                                       i2l1068 0162  
                                                                       _INTCON 000FF2  
                                                                       i2l8549 0156  
                                                                ??_Wait_AckI2C 0019  
                                                             __end_of___lwtoft 51F6  
                                                                    ??_IdleI2C 0019  
                                                      __end_of_LCD_SetContrast 55B0  
                                                         __end_of_get_Vin_span 4F0E  
                                                         __end_of_get_Vin_zero 4F20  
                                                                       _AckI2C 500A  
                                                                       _TMR0IE 007F95  
                                                                       _TMR0IF 007F92  
                                                               __CFG_WDTPS$128 000000  
                                                                _ymd_to_scalar 6CC8  
                                                                       _SSPADD 000FC8  
                                                        __end_of_Get_Variables 74FA  
                                                                       _SSPBUF 000FC9  
                                                             rd_string_EE@addr 001D  
                                                             wr_string_EE@addr 001E  
                                                                    ??_ReadI2C 0019  
                                                             __end_of_date_set 7B7A  
                                                                       _VL_max 0128  
                                                                       _VL_min 0125  
                                                                    ??_OpenI2C 001A  
                                                                    ??_OpenADC 0019  
                                                              ??_years_to_days 002D  
                                                                 __doprnt$3558 00A5  
                                                            Not_AckI2C@IE_stat 0019  
                                                                       _Inputs 00FD  
                                                                ?_read_command 00E2  
                                                             __end_of__powers_ 7D72  
                                                             __end_of_get_date 507A  
                                                                   _RestartI2C 4FF0  
                                                             __end_of_get_list 16E6  
                                                         __size_of_lcd_display 007C  
                                                           __size_of_OpenUSART 0068  
                                                             __end_of_get_time 5096  
                                                   __end_of_get_LP_RC_Constant 4E36  
                                                                    ??_StopI2C 0019  
                                                                       ___ftge 62F4  
                                                                       ___lmul 5A50  
                                                      __size_of_get_PID_output 0012  
                                                                    ??___aldiv 0021  
                                                                    ??___almod 0021  
                                                        check_V2_status@status 0019  
                                                                       ___wmul 5220  
                                                                    ??___awdiv 0023  
                                                                    ??___lbdiv 001A  
                                                                    ??___ftadd 0066  
                                                                    ??___awmod 001D  
                                                                    ??___ftdiv 0081  
                                                                    ??___ftneg 001F  
                                                             __end_of_intTObcd 6432  
                                                                    ??___lldiv 0021  
                                                                    ??___ftmul 0072  
                                                                    ??___llmod 002E  
                                                                    ??___ftsub 002D  
                                                                    ??___fttol 008E  
                                                                    ??___lwdiv 002D  
                                                                    ??___lwmod 001D  
                                                                       _buffer 00F7  
                                                                       _gmtime 3B6A  
                                                                    ??__doprnt 009F  
                                                                       _fround 3424  
                                                                       _isleap 5B12  
                                                          __end_of_LowPass_VL1 64EE  
                                                          __end_of_LowPass_VL2 65AA  
                                                          __end_of_LowPass_VL3 6666  
                                                                       clear_0 577C  
                                                                       clear_1 5788  
                                                                       clear_2 5794  
                                                             ___awdiv@quotient 0025  
                                                                       _mktime 2F1A  
                                                              ___awmod@divisor 001B  
                                                          __end_of_LowPass_Vin 6722  
                                                                 __doprnt@ccnt 00AE  
                                                                 __doprnt@flag 00AC  
                                                              ___awmod@counter 001D  
                                                                       _printf 57A8  
                                                                 __doprnt@fval 00BA  
                                                                    ??_asctime 002E  
                                                                 __doprnt@prec 00BD  
                                                                       _status 00FC  
                                                                       _output 0116  
                                                                    ??_get_max 001C  
                                                                       _strchr 5684  
                                                                    ??_get_min 001C  
                                                                       _strcmp 5898  
                                                                       _strlen 56CC  
                                                                       _strtod 2070  
                                                                       _strtok 67E2  
                                                                       _strspn 59F6  
                                                             ??_Save_Variables 0020  
                                                        ___ftmul@f3_as_product 0076  
                                                              ?_Manual_Control 0001  
                                                             __end_of_set_date 50B2  
                                                                    ??_isdigit 0019  
                                                             __end_of_set_list 2C8A  
                                                                    ?_I2C_Send 0001  
                                                             __end_of_set_time 50CE  
                                                             _check_start_flag 55F4  
                                                           _Set_LP_RC_constant 4D04  
                                                               wr_byte_EE@addr 001A  
                                                                       put2d@i 0029  
                                                               wr_byte_EE@data 0019  
                                                             __end_of_time_set 6E9E  
                                                                 __mediumconst 7D22  
                                                                    ??_isspace 0019  
                                                         __end_of_Control_Loop 6A38  
                                                                       tblptrh 000FF7  
                                                                       tblptrl 000FF6  
                                                                       tblptru 000FF8  
                                                                    ??_set_max 001F  
                                                                    ??_set_min 001F  
                                                        Get_Voltage_Data@check 008A  
                                                           intTObcd@resultbase 0069  
                                                                    ??_sprintf 00D0  
                                                                    ??_strcspn 0021  
                                                             ___lbdiv@dividend 001A  
                                                          __end_of_Open_Timer0 52CE  
                                                                  localtime@tp 002C  
                                                          ?_Set_LP_RC_constant 0019  
                                                             years_to_days@ret 006B  
                                                                _last_integral 010A  
                                                               ?_ymd_to_scalar 006F  
                                              __size_of_LCD_SetCursor_Position 004A  
                                                                   __accesstop 0060  
                                                      __end_of__initialization 579A  
                                                                   ___altoft@c 0021  
                                                           __size_of_WriteIO5R 0084  
                                                             LCD_WriteStr@stat 001F  
                                                                   ___ftadd@f1 0060  
                                                                   ___ftadd@f2 0063  
                                                                   ___ftge@ff1 001F  
                                                                   ___ftge@ff2 0022  
                                                                ___rparam_used 000001  
                                                                   ___ftdiv@f1 007B  
                                                                   ___ftdiv@f2 007E  
                                                                   ___ftdiv@f3 0085  
                                                                   ___ftneg@f1 001C  
                                                               ??_read_command 00E6  
                                                                   ___lbtoft@c 0024  
                                                                   ___ftmul@f1 006C  
                                                                   ___ftmul@f2 006F  
                                                          __end_of_Wait_AckI2C 4F8E  
                                                                set_PID_Kd@val 0019  
                                                                   ___ftsub@f1 006C  
                                                                   ___ftsub@f2 006F  
                                                                   ___fttol@f1 008A  
                                                                set_PID_Ki@val 0019  
                                                               __pcstackCOMRAM 0001  
                                                              set_VL1_span@val 0019  
                                                                set_PID_Kp@val 0019  
                                                                 __pidataBANK0 0006  
                                                                rd_string_EE@i 001E  
                                                                   ___lltoft@c 0021  
                                                          __size_of_Check_VL_N 0056  
                                                                __end_of_ctime 51A6  
                                                                __end_of_dylen 5C4A  
                                                         ??_Set_LP_RC_constant 001C  
                                                              set_Vin_span@val 0019  
                                                                __end_of_scale 2964  
                                                                __end_of_put2d 5DA4  
                                                              set_VL2_span@val 0019  
                                                                __end_of_putch 4D04  
                                                              set_VL1_zero@val 0019  
                                                                  _ReadStr_I2C 6E9E  
                                                                ?_rd_string_EE 001A  
                                                             ___lbdiv@quotient 001C  
                                                                   ___lwtoft@c 0021  
                                                              set_VL3_span@val 0019  
                                                    __size_of_Get_Voltage_Data 04CA  
                                                           __size_of_get_PID_T 0012  
                                                              set_Vin_zero@val 0019  
                                                          _Get_Control_Voltage 72AA  
                                                              set_VL2_zero@val 0019  
                                                                   __div_to_l_ 7090  
                                                                   _cal_analog 31A2  
                                                             Open_Timer0@value 001A  
                                                                ?_set_VL1_span 0019  
                                                                ?_set_VL2_span 0019  
                                                                   ??_I2C_Send 001B  
                                                                ?_set_VL1_zero 0019  
                                                                ?_set_VL3_span 0019  
                                                                ?_set_VL2_zero 0019  
                                                                ?_set_VL3_zero 0019  
                                                      __size_of_months_to_days 0040  
                                                         __end_of_LCD_WriteStr 602A  
                                                              set_VL3_zero@val 0019  
                                                                  ?_Not_AckI2C 0001  
                                                                    ?_CloseI2C 0001  
                                                                   __doprnt@ap 009D  
                                                                   __doprnt@cp 00AA  
                                                            __end_of_OpenUSART 5BDE  
                                                                   __doprnt@pb 0099  
                                                             ??_PID_Controller 002D  
                                                                      ??_ctime 002E  
                                                                ?_set_Deadband 0019  
                                                              __div_to_l_@exp1 0024  
                                                              __div_to_l_@cntr 0023  
                                                        __size_of_get_VL1_span 0012  
                                                                      ??_dylen 0020  
                                                        __size_of_get_VL2_span 0012  
                                                                      ??_scale 002D  
                                                        __size_of_get_VL1_zero 0012  
                                                        __size_of_get_VL3_span 0012  
                                                        __size_of_get_VL2_zero 0012  
                                                                      ??_put2d 002C  
                                                        __size_of_get_VL3_zero 0012  
                                                              __div_to_l_@quot 001F  
                                                                      ??_putch 0019  
                                                                   __pbssBANK0 00E8  
                                                                   __pbssBANK1 0100  
                                                         Display_Data@buff_len 01CB  
                                                             ?_LCD_SetContrast 0001  
                                                                      ?_AckI2C 0001  
                                                         ?_Get_Control_Voltage 008A  
                                                                    ?_OpenIO5R 0001  
                                                                __div_to_l_@f1 0019  
                                                                __div_to_l_@f2 001C  
                                                   __end_of_Get_Analog_Channel 54F0  
                                                           __size_of_localtime 0092  
                                                                  _LowPass_VL1 6432  
                                                                  _LowPass_VL2 64EE  
                                                                  _LowPass_VL3 65AA  
                                                                  _LowPass_Vin 6666  
                                                      Control_Loop@Control_Out 0099  
                                                                  ?_RestartI2C 0001  
                                                     __end_of_set_PID_setpoint 4D70  
                                                                    ?_TimerInt 0001  
                                                                   _get_PID_Kp 4E36  
                                                                   _get_PID_Td 4E5A  
                                                                   _get_PID_Ti 4E6C  
                                                                      ?___ftge 001F  
                                                           __size_of_set_PID_T 0012  
                                                                      ?___lmul 0019  
                                                              lcd_display@data 0067  
                                                                      ?___wmul 0027  
                                                                    ?_StartI2C 0001  
                                        LCD_SetBackLight_Brightness@brightness 001B  
                                          __end_of_LCD_SetBackLight_Brightness 5570  
                                                  _LCD_SetBackLight_Brightness 5530  
                                                              bcdTOint@bcdByte 002D  
                                                               ??_rd_string_EE 001D  
                                                                    ?___altoft 0021  
                                                                      ?_gmtime 0027  
                                                       _LCD_SetCursor_Position 5714  
                                                                    ?_bcdTOint 002D  
                                                                      ?_fround 007B  
                                                                      ?_isleap 001E  
                                                               ___lmul@product 0021  
                                                     __size_of_Get_Voltage_VL1 0012  
                                                     __size_of_Get_Voltage_VL2 0012  
                                                     __size_of_Get_Voltage_VL3 0012  
                                                           __size_of_reset_PID 003C  
                                                                    ?_WriteI2C 0001  
                                                                      ?_mktime 007F  
                                                                    ?___ftpack 0019  
                                                            Get_Variables@data 0060  
                                                                    ?___lbtoft 0021  
                                                     __size_of_Get_Voltage_Vin 0012  
                                                                      ?_printf 00C0  
                                                           __size_of_reset_var 008A  
                                                                    ?___lltoft 0021  
                                                        __size_of_Display_Data 0256  
                                                            __end_of_WriteIO5R 4000  
                                                                      ?_strchr 0019  
                                                                      ?_strcmp 0019  
                                                    __size_of_get_PID_deadband 0012  
                                                                      ?_strlen 0019  
                                                                    ?___lwtoft 0021  
                                                                      ?_strtod 008A  
                                                                      ?_strtok 0024  
                                                                      ?_strspn 001D  
                                                                 _get_VL1_span 4E90  
                                                                 _get_VL2_span 4EB4  
                                                                ?_set_Vin_span 0019  
                                                               ??_set_VL1_span 001C  
                                                                 _get_VL1_zero 4EA2  
                                                                 _get_VL3_span 4ED8  
                                                               ??_set_VL2_span 001C  
                                                                 _get_VL2_zero 4EC6  
                                                                ?_set_Vin_zero 0019  
                                                               ??_set_VL1_zero 001C  
                                                               ??_set_VL3_span 001C  
                                                                 _get_VL3_zero 4EEA  
                                                               ??_set_VL2_zero 001C  
                                                               ??_set_VL3_zero 001C  
                                                                  _Open_Timer0 52A0  
                                                                   _get_max_VL 4F20  
                                                                    ?_date_set 006B  
                                                                   _get_min_VL 4F32  
                                                               ??_set_Deadband 001C  
                                                        __size_of_get_Vin_span 0012  
                                                                   ??_CloseI2C 0019  
                                                        __size_of_get_Vin_zero 0012  
                                                                      _SSPCON1 000FC6  
                                                                      _SSPCON2 000FC5  
                                                                    ?_get_date 0021  
                                                              ??_ymd_to_scalar 0075  
                                                                AckI2C@IE_stat 0019  
                                                                    ?_get_list 00D8  
                                                                      _SSPSTAT 000FC7  
                                                                    ?_get_time 0021  
                                                                    ?_intTObcd 0065  
                                                                      _IdleI2C 50F0  
                                                                  _Wait_AckI2C 4F7A  
                                                    LCD_SetCursor_Position@row 001C  
                                                        ??_Get_Control_Voltage 002D  
                                                              __size_of_AckI2C 001C  
                                                            __end_of_get_PID_T 4E5A  
                                                                      _ReadI2C 5042  
                                                                   ??_OpenIO5R 0022  
                                                                      _OpenI2C 50CE  
                                                                      _OpenADC 4C66  
                                                            __end_of__npowers_ 7D99  
                                                                      __Hparam 0000  
                                                                   _scale$3557 007E  
                                                                      __Lparam 0000  
                                                                    ?_set_date 0022  
                                                                    ?_set_list 00D8  
                                                                    ?_set_time 0022  
                                                    __size_of_get_PID_setpoint 0012  
                                                                   ??_TimerInt 0001  
                                                                 _Display_Data 3914  
                                                               _get_PID_output 4F44  
                                                                    ?_time_set 006B  
                                                                      _StopI2C 4FBC  
                                                                      ___aldiv 6BE8  
                                                                   _last_error 010D  
                                                              StartI2C@IE_stat 0019  
                                                          __size_of_Not_AckI2C 001C  
                                                                      ___almod 6722  
                                                                   ??_StartI2C 0019  
                                                              __size_of___ftge 009C  
                                                                LCD_WriteStr@i 001E  
                                                                      ___awdiv 625C  
                                                                 _asctime$3559 006E  
                                                                      ___lbdiv 563C  
                                                              __size_of___lmul 005E  
                                                                      _Outputs 00E8  
                                                                      ___ftadd 2C8A  
                                                                      ___awmod 5F20  
                                                                      ___ftdiv 7760  
                                                                      ___ftneg 51F6  
                                                                      ___lldiv 613A  
                                                              __size_of___wmul 002A  
                                                                      ___ftmul 78A6  
                                                                      ___llmod 5CBA  
                                                                      ___ftsub 5846  
                                                                      ___fttol 762C  
                                                                      ___lwdiv 602A  
                                                                      ___lwmod 57F6  
                                                                   ??___altoft 0025  
                                                                      __doprnt 01B6  
                                                                   ??_bcdTOint 0060  
                                                                      __pcinit 575E  
                                                                   ??_WriteI2C 0019  
                                                              __size_of_gmtime 023A  
                                                                   ??___ftpack 001E  
                                                                   ??___lbtoft 0024  
                                                              __size_of_fround 0282  
                                                              __size_of_isleap 0064  
                                                                      __ramtop 0600  
                                                        __size_of_Control_Loop 00D2  
                                                              __size_of_mktime 0288  
                                                                   ??___lltoft 0025  
                                                                 _get_Vin_span 4EFC  
                                                                      __ptext0 1BB0  
                                                                      __ptext1 56CC  
                                                                      __ptext2 7B7A  
                                                                      __ptext3 2964  
                                                                      __ptext4 6DAA  
                                                                      __ptext5 50B2  
                                                                      __ptext6 7A02  
                                                                      __ptext7 67E2  
                                                                      __ptext8 59F6  
                                                                      __ptext9 599C  
                                                               ??_set_Vin_span 001C  
                                                                 _get_Vin_zero 4F0E  
                                                                      _asctime 36A6  
                                                               ??_set_Vin_zero 001C  
                                                                   _rd_byte_EE 4F8E  
                                                             WriteStr_I2C@stat 0021  
                                                              __size_of_printf 004E  
                                                                      _get_max 4CCE  
                                                                      _get_min 4CE0  
                                                                   ??___lwtoft 0024  
                                                              __size_of_strchr 0048  
                                                              __size_of_strcmp 0054  
                                                              __size_of_strlen 0048  
                                                                  ?__div_to_l_ 0019  
                                                              __size_of_strtod 0492  
                                                              __size_of_strtok 00C0  
                                                              __size_of_strspn 005A  
                                                                      _dpowers 7D23  
                                                                  ?_cal_analog 00D8  
                                                                      _isdigit 5114  
                                                             ___awmod@dividend 0019  
                                                             ___aldiv@dividend 0019  
                                                            __end_of_localtime 625C  
                                                                   ??_date_set 006D  
                                                                mktime@timeptr 007F  
                                                                      _isspace 52FC  
                                                         __end_of_read_command 7D22  
                                                                      _moninit 7D99  
                                                                      _set_max 4F56  
                                                                      _set_min 4F68  
                                                                    _LCD_Clear 4C5A  
                                                                 ??_Check_VL_N 002B  
                                                                      _rx_flag 00FA  
                                                                   _set_PID_Kd 4D28  
                                                                   _set_PID_Ki 4D3A  
                                                                   _set_PID_Kp 5138  
                                                          __size_of_RestartI2C 001A  
                                                            __end_of_set_PID_T 4D5E  
                                                                      _tx_flag 00F9  
                                                                   ??_get_date 0023  
                                                                      _sprintf 5E20  
                                                                  set_list@val 00DC  
                                                                  set_list@var 00D8  
                                                                      ctime@tp 0073  
                                                                   ??_get_list 00DA  
                                                                      _strcspn 599C  
                                                                   ??_get_time 0023  
                                                         end_of_initialization 579A  
                                                                   ??_intTObcd 002F  
                                                            __end_of_reset_PID 5438  
                                                                      dylen@yr 001E  
                                                                __Lmediumconst 7D22  
                                                            __end_of_reset_var 613A  
                                                     __size_of_check_V1_status 0044  
                                                     __size_of_check_V2_status 003C  
                                                                      put2d@cl 002A  
                                                                      put2d@cp 0027  
                                                     __size_of_check_V3_status 003C  
                                                                      put2d@ct 002B  
                                                       __end_of_get_PID_output 4F56  
                                                              ___lldiv@divisor 001D  
                                                     __end_of_check_start_flag 563C  
                                                              set_Deadband@val 0019  
                                                              ___lldiv@counter 0025  
                                                                   ??_set_date 0024  
                                                                   _set_max_VL 4E00  
                                                                   _set_min_VL 4E12  
                                                                   ??_set_list 002F  
                                                                 _Control_Loop 6966  
                                                                   ??_set_time 0024  
                                                                  ?_get_PID_Kp 0019  
                                                                  ?_get_PID_Td 0019  
                                                                  ?_get_PID_Ti 0019  
                                                                    _RCSTAbits 000FAB  
                                                                   ??_time_set 006D  
                                                                      printf@f 00C0  
                                                             ___aldiv@quotient 0023  
                                                                      postdec2 000FDD  
                                                                      postinc0 000FEE  
                                                                      postinc2 000FDE  
                                                             ??_Manual_Control 0019  
                                                        check_V3_status@status 0019  
                                                               __tdiv_to_l_@f1 0019  
                                                               __tdiv_to_l_@f2 001C  
                                                           __end_of_Check_VL_N 5942  
                                                                      strcmp@r 001E  
                                                                      strlen@s 0019  
                                                                ??__tdiv_to_l_ 001F  
                                                                      strtod@s 008A  
                                                                      strspn@i 0022  
                                                                  time_set@tim 006B  
                                                                  time_set@ptr 0075  
                                                        __size_of_LCD_WriteStr 0086  
                                                             _Get_Voltage_Data 16E6  
                                                                WriteIO5R@data 0019  
                                                                WriteIO5R@bits 0021  
                                                                WriteIO5R@temp 001D  
                                                           _get_LP_RC_Constant 4E24  
                                                               _months_to_days 54F0  
                                                                   asctime@buf 0176  
                                                                  ?_get_max_VL 0019  
                                                                  ?_get_min_VL 0019  
                                                                   asctime@tim 006C  
                                                            ??_Get_Voltage_VL1 001C  
                                                            ??_Get_Voltage_VL2 001C  
                                                            ??_Get_Voltage_VL3 001C  
                                                                    _TRISBbits 000F93  
                                                                    _TRISCbits 000F94  
                                                            ??_Get_Voltage_Vin 001C  
                                                                   ?_LCD_Clear 0001  
                                                            __size_of_I2C_Send 0036  
                                                                intTObcd@total 0067  
                                                          ?_get_LP_RC_Constant 0019  
                                                                   _start_flag 0044  
                                                         __end_of_rd_string_EE 5390  
                                                                   _rx_pointer 0046  
                                                                  ___ftdiv@exp 0088  
                                                                   _wr_byte_EE 52CE  
                                                                    _TXSTAbits 000FAC  
                                                                ??_lcd_display 002F  
                                                               __end_of_AckI2C 5026  
                                                         __end_of_set_VL1_span 4D82  
                                                         __end_of_set_VL2_span 4DA6  
                                                         __end_of_set_VL1_zero 4D94  
                                                         __end_of_set_VL3_span 4DCA  
                                                         __end_of_set_VL2_zero 4DB8  
                                                         __end_of_set_VL3_zero 4DDC  
                                                              ?_get_PID_output 0019  
                                                          __size_of__div_to_l_ 0108  
                                                           Get_Voltage_Data@v1 008B  
                                                          __size_of_cal_analog 0282  
                                                                   _tx_pointer 0045  
                                                                  ___ftmul@exp 0075  
                                                                 _LCD_WriteStr 5FA4  
                                                        __end_of_years_to_days 6B0C  
                                                         __end_of_set_Deadband 4D28  
                                                         ??_get_LP_RC_Constant 001C  
                                                               __end_of___ftge 6390  
                                                               __end_of___lmul 5AAE  
                                                               __end_of___wmul 524A  
                                                                 ?_ReadStr_I2C 001B  
                                                               __end_of_gmtime 3DA4  
                                                                  ?_rd_byte_EE 0001  
                                                             _get_PID_deadband 4CAA  
                                                               __end_of_fround 36A6  
                                                               __end_of_isleap 5B76  
                                                       __end_of_months_to_days 5530  
                                                               __end_of_mktime 31A2  
                                                              ymd_to_scalar@mo 0071  
                                                               __end_of_printf 57F6  
                                                              ymd_to_scalar@yr 006F  
                                                       __size_of_Get_Variables 0130  
                                                               __end_of_strchr 56CC  
                                                               __end_of_strcmp 58EC  
                                                               __end_of_strlen 5714  
                                                               __end_of_strtod 2502  
                                                               __end_of_strtok 68A2  
                                                               __end_of_strspn 5A50  
                                                          start_initialization 575E  
                                                                 ??_Not_AckI2C 0019  
                                                          __end_of__tdiv_to_l_ 72AA  
                                                              get_list@systime 00DC  
                                                                  ?_set_PID_Kd 0019  
                                                                  ?_set_PID_Ki 0019  
                                                                  ?_set_PID_Kp 0019  
                                                          __size_of_get_PID_Kp 0012  
                                                          __size_of_get_PID_Td 0012  
                                                          __size_of_get_PID_Ti 0012  
                                                             WriteI2C@data_out 0019  
                                                            __size_of_CloseI2C 0008  
                                                            Open_Timer0@config 001C  
                                                                    _OpenUSART 5B76  
                                                                     ??_AckI2C 0019  
                                                              ___llmod@divisor 002A  
                                                         __end_of_set_Vin_span 4DEE  
                                                         __end_of_set_Vin_zero 4E00  
                                                              ___llmod@counter 002E  
                                                                 ?_LowPass_VL1 007B  
                                                                 ?_LowPass_VL2 007B  
                                                                 ?_LowPass_VL3 007B  
                                                                  ?_set_max_VL 0019  
                                                            __size_of_OpenIO5R 0032  
                                                                  ?_set_min_VL 0019  
                                                                 ?_LowPass_Vin 007B  
                                                                 ??_RestartI2C 0019  
                                                             _get_PID_setpoint 4E7E  
                                                             _LowPass_VL1$3548 007E  
                                                             _LowPass_VL2$3549 007E  
                                                             _LowPass_VL3$3550 007E  
                                                          __size_of_get_max_VL 0012  
                                                      ?_LCD_SetCursor_Position 001B  
                                                          __size_of_get_min_VL 0012  
                                                                     ??___ftge 0025  
                                                                     ??___lmul 0021  
                                                            ?_set_PID_setpoint 0019  
                                                                     ??___wmul 002B  
                                                            ??_check_V1_status 0019  
                                                            ??_check_V2_status 0019  
                                                           __end_of_Not_AckI2C 5042  
                                                                  __doprnt@len 00A8  
                                                          __end_of_lcd_display 5E20  
                                                                  __doprnt@exp 00B0  
                                                                  __doprnt@val 00B2  
                                                            ??_check_V3_status 0019  
                                                                  __pdataBANK0 00FE  
                                                            __size_of_TimerInt 01AA  
                                                  __size_of_Set_LP_RC_constant 0012  
                                                                     ??_gmtime 0029  
                                                           ??_set_PID_setpoint 001C  
                                                                     ??_fround 002D  
                                                                     ??_isleap 0020  
                                                                     ??_mktime 0083  
                                                            __size_of_StartI2C 001A  
                                                        __size_of_read_command 01A8  
                                                                     ??_printf 002F  
                                                                     ??_strchr 001D  
                                                           _Get_Analog_Channel 54B0  
                                                                     ??_strcmp 001D  
                                                                     ??_strlen 001B  
                                                                     ??_strtod 002D  
                                                                     ??_strtok 0028  
                                                                     ??_strspn 0021  
                                                              ?_months_to_days 002D  
                                                                   localtime@t 0068  
                                                            __size_of___altoft 0080  
                                                            __size_of_bcdTOint 005A  
                                                                   fround@prec 0084  
                                                              LCD_WriteStr@Str 001B  
                                                            __size_of_WriteI2C 002C  
                                                            __size_of___ftpack 00C4  
                                                            __size_of___lbtoft 0028  
                                                                 ?_Open_Timer0 0019  
                                                            __size_of___lltoft 0064  
                                                                  __pbssCOMRAM 002F  
                                                         WriteStr_I2C@Mod_Addr 0020  
                                                            __size_of___lwtoft 0028  
                                                                __pcstackBANK0 0060  
                                                                __pcstackBANK1 01B7  
                                                                    _WriteIO5R 3F7C  
                                                         WriteStr_I2C@Reg_Addr 001B  
                                                          _PID_Controller$3552 008D  
                                                          _PID_Controller$3553 0090  
                                                          _PID_Controller$3554 0093  
                                                                ?_WriteStr_I2C 001B  
                                                                 set_PID_T@val 0019  
                                                                  ??_LCD_Clear 001C  
                                                          ?_Get_Analog_Channel 0019  
                                                                 _isdigit$2880 001A  
                                                            __size_of_date_set 0178  
                                                           __end_of_RestartI2C 500A  
                                                              Open_Timer0@data 001D  
                                                      __size_of_Save_Variables 0132  
                                                                     ?_IdleI2C 0001  
                                                            __size_of_get_date 001C  
                                                    Get_Analog_Channel@channel 001C  
                                                                 ?_Wait_AckI2C 0001  
                                                                   ?_OpenUSART 0019  
                                                            __size_of_get_list 0600  
                                                            __size_of_get_time 001C  
                                                                    __doprnt@c 00BF  
                                                                    __doprnt@f 009B  
                                                           Save_Variables@data 0060  
                                                                  ?_wr_byte_EE 0019  
                                                                     ?_ReadI2C 0001  
                                                            __size_of_intTObcd 00A2  
                                                                _Get_Variables 73CA  
                                                          __size_of_rd_byte_EE 0014  
                                                     Rd_Digital_Inputs@Temp_RD 001A  
                                                         WriteStr_I2C@Str_Size 001E  
                                                          ReadStr_I2C@Mod_Addr 001F  
                                                     Rd_Digital_Inputs@Port_RD 0019  
                                                                     ?_OpenI2C 0019  
                                                                     ?_OpenADC 0001  
                                                          ReadStr_I2C@Reg_Addr 001B  
                                               __end_of_LCD_SetCursor_Position 575E  
                                                             _LowPass_Vin$3551 007E  
                                                             ___lwdiv@dividend 0060  
                                                                 _read_command 7B7A  
                                                                    _get_PID_T 4E48  
                                                         ??_Get_Analog_Channel 001B  
                                                 LCD_SetCursor_Position@column 001B  
                                                                    __pintcode 0008  
                                                                     ?_StopI2C 0001  
                                                     __size_of_LCD_SetContrast 0040  
                                                                __pmediumconst 7D22  
                                                                     ?___aldiv 0019  
                                                                     ?___almod 0019  
                                                                     ?___awdiv 001F  
                                                                    __ptext100 4DEE  
                                                                    __ptext101 4DDC  
                                                                     ?___lbdiv 0019  
                                                                    __ptext110 5138  
                                                                    __ptext102 4DCA  
                                                                    __ptext111 4D3A  
                                                                    __ptext103 4DB8  
                                                                    __ptext120 2502  
                                                                    __ptext112 4D28  
                                                                    __ptext104 4DA6  
                                                                    __ptext121 4CF2  
                                                                    __ptext113 4D16  
                                                                    __ptext105 4D94  
                                                                    __ptext130 5CBA  
                                                                    __ptext122 5114  
                                                                    __ptext114 535C  
                                                                    __ptext106 4D82  
                                                                    __ptext131 613A  
                                                                    __ptext123 3424  
                                                                    __ptext115 4F8E  
                                                                    __ptext107 4D70  
                                                                    __ptext140 4FBC  
                                                                    __ptext132 762C  
                                                                    __ptext124 5220  
                                                                    __ptext116 4D04  
                                                                    __ptext108 4D5E  
                                                                    __ptext141 4FA2  
                                                                    __ptext133 5846  
                                                                    __ptext125 5F20  
                                                                    __ptext117 3914  
                                                                    __ptext109 4D4C  
                                                                     ?___ftadd 0060  
                                                                    __ptext150 51F6  
                                                                    __ptext142 50CE  
                                                                    __ptext134 4CE0  
                                                                    __ptext126 625C  
                                                                    __ptext118 5E20  
                                                                    __ptext151 78A6  
                                                                    __ptext143 50F0  
                                                                    __ptext135 4CCE  
                                                                    __ptext127 7198  
                                                                    __ptext119 01B6  
                                                                    __ptext152 72AA  
                                                                    __ptext144 4C52  
                                                                    __ptext136 5FA4  
                                                                    __ptext128 7090  
                                                                    __ptext153 51A6  
                                                                    __ptext145 4CBC  
                                                                    __ptext137 5714  
                                                                    __ptext129 5AAE  
                                                                    __ptext154 7760  
                                                                    __ptext146 6966  
                                                                    __ptext138 5274  
                                                                    __ptext155 2C8A  
                                                                    __ptext147 4CAA  
                                                                    __ptext139 4F7A  
                                                                    __ptext156 68A2  
                                                                    __ptext148 62F4  
                                                                    __ptext157 4C98  
                                                                    __ptext149 3DA4  
                                                                    __ptext158 4C86  
                                                                    __ptext159 4C74  
                                                                     ?___awmod 0019  
                                                                     ?___ftdiv 007B  
                                                                     ?___ftneg 001C  
                                                            __size_of_set_date 001C  
                                                                     ?___lldiv 0019  
                                                          __size_of_set_PID_Kd 0012  
                                                                     ?___ftmul 006C  
                                                          __size_of_set_PID_Ki 0012  
                                                          __size_of_set_PID_Kp 0024  
                                                                     ?___llmod 0026  
                                                                     ?___ftsub 006C  
                                                                    __npowers_ 7D72  
                                                                     ?___fttol 008A  
                                                                     ?___lwdiv 0060  
                                                            __size_of_set_list 0326  
                                                                     ?___lwmod 0019  
                                                                WriteStr_I2C@i 001F  
                                                            __size_of_set_time 001C  
                                                            __size_of_time_set 00F4  
                                                                     ?__doprnt 0099  
                                                           LCD_SetContrast@val 001B  
                                                             ___almod@dividend 0019  
                                                                  __tdiv_to_l_ 7198  
                                                                     ?_asctime 006C  
                                                                     ?_get_max 0019  
                                                                     ?_get_min 0019  
                                                          ReadStr_I2C@Str_Size 001E  
                                                                ?_wr_string_EE 001B  
                                                                 ??__div_to_l_ 001F  
                                                                 ??_cal_analog 002F  
                                                                     ?_isdigit 0001  
                                                                     _I2C_Send 5390  
                                                     Get_Control_Voltage@count 008D  
                                                               ??_WriteStr_I2C 001F  
                                                                     ?_isspace 0001  
                                                                   ?_WriteIO5R 0019  
                                                                     ?_set_max 001C  
                                                                     ?_set_min 001C  
                                                              LowPass_VL1@Vout 0081  
                                                              LowPass_VL2@Vout 0081  
                                                              LowPass_VL3@Vout 0081  
                                                        __size_of_rd_string_EE 0034  
                                                          __size_of_set_max_VL 0012  
                                                          __size_of_set_min_VL 0012  
                                                  __end_of_Get_Control_Voltage 73CA  
                                                             ___lwdiv@quotient 0065  
                                                                     _DDRCbits 000F94  
                                                               __size_of_ctime 0026  
                                                                     ?_sprintf 00C0  
                                                               __size_of_dylen 006C  
                                                              WriteStr_I2C@Str 001C  
                                                               __size_of_scale 0462  
                                                                     ?_strcspn 001D  
                                                               __size_of_put2d 0076  
                                                                    _localtime 61CA  
                                                               __size_of_putch 0012  
                                                            get_time@Time_Data 0021  
                                                        __size_of_set_VL1_span 0012  
                                                            set_time@Time_Data 0022  
                                                        __size_of_set_VL2_span 0012  
                                                        __size_of_set_VL1_zero 0012  
                                                        __size_of_set_VL3_span 0012  
                                                        __size_of_set_VL2_zero 0012  
                                                        __end_of_ymd_to_scalar 6DAA  
                                                        __size_of_set_VL3_zero 0012  
                                                                   set_max@val 001C  
                                                                   set_min@val 001C  
                                                                    date_set@i 0087  
                                                              ___aldiv@divisor 001D  
                                                              ___aldiv@counter 0021  
                                                                    _set_PID_T 4D4C  
                                                               ___wmul@product 002B  
                                                     __end_of_Get_Voltage_Data 1BB0  
                                                               ?_Get_Variables 001F  
                                                                     _LATCbits 000F8B  
                                                                set_max_VL@val 0019  
                                                        __size_of_set_Deadband 0012  
                                                                     _PIE1bits 000F9D  
                                                                  _lcd_display 5DA4  
                                                                    _reset_PID 53FC  
                                                      __size_of_PID_Controller 01D8  
                                                                 date_set@data 007B  
                                                                 date_set@date 0083  
                                                                     _PIR1bits 000F9E  
                                                           __end_of__div_to_l_ 7198  
                                                                     _PIR2bits 000FA1  
                                                            ?_check_start_flag 0001  
                                                                    _reset_var 60B0  
                                                           __end_of_cal_analog 3424  
                                                                   ?_get_PID_T 0019  
                                                                 ??_get_PID_Kp 001C  
                                                                 ??_get_PID_Td 001C  
                                                                 ??_get_PID_Ti 001C  
                                                                set_min_VL@val 0019  
                                                                 time@DateTime 0096  
                                                           ??_check_start_flag 0019  
                                                                    _time_zone 014C  
                                                              WriteI2C@IE_stat 001A  
                                                                  strtod@flags 008F  
                                                              _Get_Voltage_VL1 4C74  
                                                              _Get_Voltage_VL2 4C86  
                                                              _Get_Voltage_VL3 4C98  
                                                               StopI2C@IE_stat 0019  
                                                                     _VL1_last 0149  
                                                                     _VL2_last 0146  
                                                                  strtod@expon 0090  
                                                              _Get_Voltage_Vin 4CBC  
                                                                     _VL3_last 0143  
                                                                     _VL1_span 0134  
                                                                     _VL2_span 0131  
                                                                     _VL1_zero 00F2  
                                                                     _VL3_span 012E  
                                                                     _VL2_zero 013D  
                                                                     _VL3_zero 013A  
                                                              read_command@ptr 01BB  
                                                                    asctime@cp 0071  
                                                              time_set@sep_tok 007B  
                                                                    _rx_buffer 0191  
                                                                 _rd_string_EE 535C  
                                                               ??_wr_string_EE 001E  
                                                                   _ADCON0bits 000FC2  
                                                           rd_string_EE@buffer 001B  
                                                            ___wmul@multiplier 0027  
                                                           wr_string_EE@buffer 001C  
                                                           rd_string_EE@lenght 001A  
                                                           wr_string_EE@lenght 001B  
                                                         __size_of_ReadStr_I2C 00F6  
                                                                    get_list@t 00E0  
                                                                    _tx_buffer 014E  
                                                          __size_of_wr_byte_EE 002E  
                                                                    main@p_len 01D0  
                                                                 _set_VL1_span 4D70  
                                                                 _set_VL2_span 4D94  
                                                                 _set_VL1_zero 4D82  
                                                                 ??_get_max_VL 001C  
                                                                 _set_VL3_span 4DB8  
                                                                 _set_VL2_zero 4DA6  
                                                              LowPass_Vin@Vout 0081  
                                                                 _set_VL3_zero 4DCA  
                                                                 ??_get_min_VL 001C  
                                                                 _isspace$2883 001A  
                                                                     _CloseI2C 4C52  
                                                                 _set_Deadband 4D16  
                                                            ___lmul@multiplier 0019  
                                                        __size_of_set_Vin_span 0012  
                                                                   ?_localtime 002C  
                                                        __size_of_set_Vin_zero 0012  
                                                           __end_of_get_PID_Kp 4E48  
                                                           __end_of_get_PID_Td 4E6C  
                                                           __end_of_get_PID_Ti 4E7E  
                                                             ??_get_PID_output 001C  
                                                                    intTObcd@v 0065  
                                                             OpenI2C@sync_mode 001A  
                                                                     _Int_Flag 00FB  
                                                                  ??_OpenUSART 001B  
                                                                   ?_set_PID_T 0019  
                                                             __size_of_IdleI2C 0024  
                                                     __end_of_get_PID_deadband 4CBC  
                                                              OpenUSART@config 001B  
                                                                     _OpenIO5R 532A  
                                                                   _EECON1bits 000FA6  
                                                             __size_of_ReadI2C 001C  
                                                                   ?_reset_PID 0001  
                                                                     _T_sample 00EF  
                                                                     __Hrparam 0000  
                                                                    gmtime@tim 01A5  
                                                             __size_of_OpenI2C 0022  
                                                             __size_of_OpenADC 000E  
                                                                   ?_reset_var 00D8  
                                                        Set_LP_RC_constant@val 0019  
                                                                     __Lrparam 0000  
                                                                     _TimerInt 0008  
                                                                     _Vin_Span 012B  
                                                                 TimerInt@stat 0018  
                                                           __end_of_get_max_VL 4F32  
                                                                     _StartI2C 4FA2  
                                                           __end_of_get_min_VL 4F44  
                                                                     _Vin_last 0140  
                                                         __size_of_LowPass_VL1 00BC  
                                                         __size_of_LowPass_VL2 00BC  
                                                         __size_of_LowPass_VL3 00BC  
                                                             __size_of_StopI2C 001A  
                                                                     _Vin_zero 0137  
                                                         __size_of_LowPass_Vin 00BC  
                                                             __size_of___aldiv 00E0  
                                                             __size_of___almod 00C0  
                                                             __size_of___awdiv 0098  
                                                             __size_of___lbdiv 0048  
                                                             __size_of___ftadd 0290  
                                                             __size_of___awmod 0084  
                                                             __size_of___ftdiv 0146  
                                                             __size_of___ftneg 002A  
                                                             __size_of___lldiv 0090  
                                                                     ___altoft 5EA0  
                                                             __size_of___ftmul 015C  
                                                             __size_of___llmod 0074  
                                                             __size_of___ftsub 0052  
                                                             __size_of___fttol 0134  
                                                                     _bcdTOint 5942  
                                                             __size_of___lwdiv 0086  
                                                             __size_of___lwmod 0050  
                                                                     _WriteI2C 5274  
                                                                     ___ftpack 68A2  
                                                                     ___lbtoft 51A6  
                                                                  _last_output 0110  
                                                             __size_of__doprnt 0F30  
                                                                  _fround$3555 0081  
                                                                  _fround$3556 007E  
                                                                     ___lltoft 5AAE  
                                                                 ??_rd_byte_EE 0019  
                                                              I2C_Send@command 001B  
                                                            ??_LCD_SetContrast 001B  
                                                                     ___lwtoft 51CE  
                                                          Control_Loop@voltage 0096  
                                                                  _isleap$2946 0022  
                                                                     _deadband 0104  
                                                             __size_of_asctime 026E  
                                                                 _set_Vin_span 4DDC  
                                                             __size_of_get_max 0012  
                                                             __size_of_get_min 0012  
                                                                 _set_Vin_zero 4DEE  
                                                            RestartI2C@IE_stat 0019  
                                                                     _date_set 7A02  
                                                                  ??_WriteIO5R 001D  
                                                             __size_of_isdigit 0024  
                                                              ___lwdiv@divisor 0062  
                                                     __end_of_get_PID_setpoint 4E90  
                                                             __size_of_isspace 002E  
                                                              ___lwdiv@counter 0064  
                                                                 ??_set_PID_Kd 001C  
                                                                 ??_set_PID_Ki 001C  
                                                                 ??_set_PID_Kp 001C  
                                                         __size_of_Open_Timer0 002E  
                                                                     __ptext10 5684  
                                                                     __ptext11 5096  
                                                                     __ptext20 5530  
                                                                     __ptext12 5C4A  
                                                                     __ptext21 10E6  
                                                                     __ptext13 6390  
                                                                     __ptext30 505E  
                                                                     __ptext22 6B0C  
                                                                     __ptext14 60B0  
                                                                     __ptext31 6E9E  
                                                                     __ptext23 2F1A  
                                                                     __ptext15 4F68  
                                                                     __ptext40 524A  
                                                                     __ptext32 4FF0  
                                                                     __ptext24 6CC8  
                                                                     __ptext16 4F56  
                                                                     __ptext41 2070  
                                                                     __ptext33 5042  
                                                                     __ptext25 6A38  
                                                                     __ptext17 5DA4  
                                                                     __ptext50 4EFC  
                                                                     __ptext42 52FC  
                                                                     __ptext34 5026  
                                                                     __ptext26 54F0  
                                                                     __ptext18 6F94  
                                                                     __ptext51 4EEA  
                                                                     __ptext43 5EA0  
                                                                     __ptext35 500A  
                                                                     __ptext27 602A  
                                                                     __ptext19 5570  
                                                                     __ptext60 4E48  
                                                                     __ptext52 4ED8  
                                                                     __ptext44 74FA  
                                                                     __ptext36 5942  
                                                                     __ptext28 5B12  
                                                                     __ptext61 4E36  
                                                                     __ptext53 4EC6  
                                                                     __ptext45 53C6  
                                                                     __ptext37 4F44  
                                                                     __ptext29 507A  
                                                                     __ptext70 6BE8  
                                                                     __ptext62 4E24  
                                                                     __ptext54 4EB4  
                                                                     __ptext46 52CE  
                                                                     __ptext38 31A2  
                                                                     __ptext71 5A50  
                                                                     __ptext63 57A8  
                                                                     __ptext55 4EA2  
                                                                     __ptext47 4F32  
                                                                     __ptext39 5898  
                                                                     __ptext80 52A0  
                                                                     __ptext72 36A6  
                                                                     __ptext64 5180  
                                                                     __ptext56 4E90  
                                                                     __ptext48 4F20  
                                                                     __ptext81 5B76  
                                                                     __ptext73 5D2E  
                                                                     __ptext65 61CA  
                                                                     __ptext57 4E7E  
                                                                     __ptext49 4F0E  
                                                                     __ptext90 51CE  
                                                                     __ptext82 532A  
                                                                     __ptext74 563C  
                                                                     __ptext66 3B6A  
                                                                     __ptext58 4E6C  
                                                                     __ptext91 6666  
                                                                     __ptext83 3F7C  
                                                                     __ptext75 55F4  
                                                                     __ptext67 5BDE  
                                                                     __ptext59 4E5A  
                                                                     __ptext92 65AA  
                                                                     __ptext84 4C66  
                                                                     __ptext76 5474  
                                                                     __ptext68 57F6  
                                                                     __ptext93 64EE  
                                                                     __ptext85 4FD6  
                                                                     __ptext77 5438  
                                                                     __ptext69 6722  
                                                                     __ptext94 6432  
                                                                     __ptext86 53FC  
                                                                     __ptext78 55B0  
                                                                     __ptext95 54B0  
                                                                     __ptext87 4C5A  
                                                                     __ptext79 515C  
                                                                     __ptext96 58EC  
                                                                     __ptext88 5390  
                                                                     __ptext97 73CA  
                                                                     __ptext89 16E6  
                                                                     __ptext98 4E12  
                                                                     __ptext99 4E00  
                                                             __size_of_set_max 0012  
                                                             __size_of_set_min 0012  
                                                                     __powers_ 7D4B  
                                                                     _get_date 505E  
                                                                     _get_list 10E6  
                                                                     _get_time 507A  
                                                              ___almod@divisor 001D  
                                                               _Save_Variables 74FA  
                                                             __size_of_sprintf 0080  
                                                              ___almod@counter 0021  
                                                              ??_Get_Variables 0021  
                                                             __size_of_strcspn 005A  
                                                                     _intTObcd 6390  
                                                      Get_Control_Voltage@volt 008E  
                                                              _check_V1_status 55B0  
                                                               LowPass_VL1@val 007B  
                                                               LowPass_VL2@val 007B  
                                                               LowPass_VL3@val 007B  
                                                              _check_V2_status 5438  
                                                                __size_of_atof 002A  
                                                                __size_of_atoi 00FC  
                                                                __size_of_main 04C0  
                                                              _check_V3_status 5474  
                                                                __size_of_time 00DC  
                                                                     _integral 0113  
                                                         __size_of_Wait_AckI2C 0014  
                                                      __end_of_Get_Voltage_VL1 4C86  
                                                      __end_of_Get_Voltage_VL2 4C98  
                                                      __end_of_Get_Voltage_VL3 4CAA  
                                                                 reset_var@var 00D8  
                                                           __end_of_rd_byte_EE 4FA2  
                                                      __end_of_Get_Voltage_Vin 4CCE  
                                                              date_set@sep_tok 0079  
                                                                 ??_set_max_VL 001C  
                                                                  date_set@dat 006B  
                                                                 ??_set_min_VL 001C  
                                                                     _set_date 5096  
                                                         __end_of_WriteStr_I2C 5CBA  
                                                                  date_set@ptr 006F  
                                                                     _set_list 2964  
                                                                  ??_get_PID_T 001C  
                                                                     _set_time 50B2  
                                                                     _time_set 6DAA  
                                                                    time_set@i 0080  
                                                                   strtod@eexp 008E  
                                                                     _setpoint 0107  
                                                                     _timezone 0100  
                                                                     int$flags 0047  
                                                             ??_months_to_days 002F  
                                                                Check_VL_N@val 0028  
                                                                     asctime@s 006F  
                                                                     atoi@sign 0062  
                                                 ?_LCD_SetBackLight_Brightness 0001  
                                                           __end_of_set_PID_Kd 4D3A  
                                                           __end_of_set_PID_Ki 4D4C  
                                                           __end_of_set_PID_Kp 515C  
                                                  __size_of_get_LP_RC_Constant 0012  
                                                                 set_list@data 00DA  
                                                                     main@code 01CE  
                                                               __doprnt@tmpval 00B6  
                                                               LowPass_Vin@val 007B  
                                                                ?_get_VL1_span 0019  
                                                                ?_get_VL2_span 0019  
                                                                ?_get_VL1_zero 0019  
                                                                ?_get_VL3_span 0019  
                                                                ?_get_VL2_zero 0019  
                                                                ?_get_VL3_zero 0019  
                                                           _ymd_to_scalar$2959 0079  
                                                                    putch@byte 0019  
                                                                   _INTCONbits 000FF2  
                                                               OpenUSART@spbrg 0019  
                                                                     gmtime@tc 0060  
                                                                wr_string_EE@i 001F  
                                                                     gmtime@tp 0027  
                                                          set_PID_setpoint@val 0019  
                                                      __size_of_Manual_Control 001A  
                                                    __size_of_set_PID_setpoint 0012  
                                                       __end_of_Save_Variables 762C  
                                                                     isdigit@c 001B  
                                                                     scale@scl 0081  
                                                               cal_analog@data 00DA  
                                                       __size_of_years_to_days 00D4  
                                                           __end_of_set_max_VL 4E12  
                                                                     isleap@yr 001E  
                                                           __end_of_set_min_VL 4E24  
                                                                  ??_localtime 0064  
                                                                     intlevel2 4C50  
                                                                    sprintf@ap 00D2  
                                                                    sprintf@pb 00D4  
                                                             __tdiv_to_l_@exp1 0027  
                                                             __tdiv_to_l_@cntr 0026  
                                                                    sprintf@wh 00C0  
                                                             __tdiv_to_l_@quot 0022  
                                                                    strchr@chr 001B  
                                                                  ??_set_PID_T 001C  
                                                             ___lwmod@dividend 0019  
                                                                    strchr@ptr 0019  
                                                                     isspace@c 001B  
                                                             ___lldiv@dividend 0019  
                                                                     mktime@tt 0089  
                                                                 ??_wr_byte_EE 001A  
                                                         __end_of_wr_string_EE 53FC  
                                                                     time@date 0092  
                                                                    strcspn@s1 001D  
                                                                    strcspn@s2 001F  
                                                               _PID_Controller 3DA4  
                                                                     time@time 008F  
                                                          ymd_to_scalar@scalar 007B  
                                                                  ??_reset_PID 0019  
                                                                  ??_reset_var 002F  
                                                                ?_Display_Data 0001  
                                                        check_V1_status@status 0019  
                                                   __end_of_Set_LP_RC_constant 4D16  
                                                                    strtod@res 008C  
                                                                read_command@i 01B9  
                                                                     printf@ap 00C4  
                                                                     printf@pb 00C6  
                                                                ?_get_Vin_span 0019  
                                                               ??_get_VL1_span 001C  
                                                                 ?__tdiv_to_l_ 0019  
                                                               ??_get_VL2_span 001C  
                                                                ?_get_Vin_zero 0019  
                                                               ??_get_VL1_zero 001C  
                                                               ??_get_VL3_span 001C  
                                                               ??_get_VL2_zero 001C  
                                                ??_LCD_SetBackLight_Brightness 001B  
                                                               ??_get_VL3_zero 001C  
                                                                cal_analog@val 00DC  
                                                                cal_analog@var 00D8  
                                                                     sprintf@f 00C2  
                                                          read_command@sep_tok 01B7  
                                                                     strcmp@s1 0019  
                                                                     strcmp@s2 001B  
                                                             ___lldiv@quotient 0021  
                                                              ___lwmod@divisor 001B  
                                                          read_command@rx_buff 00E2  
                                                                     strlen@cp 001D  
                                                              ___lwmod@counter 001D  
                                                           __end_of_wr_byte_EE 52FC  
                                                                     strcspn@i 0022  
                                                          read_command@tx_buff 00E4  
                                                                 ___aldiv@sign 0022  
                                                                 time_set@data 006F  
                                                      __end_of_check_V1_status 55F4  
                                                                     strtod@_u 0091  
                                                                     strtok@s1 0024  
                                                                     strtok@s2 0026  
                                                                 time_set@hour 007D  
                                                                     strspn@s1 001D  
                                                                     strspn@s2 001F  
                                                                  _SSPCON1bits 000FC6  
                                                                     strtok@sp 0041  
                                                      __end_of_check_V2_status 5474  
                                                                  _SSPCON2bits 000FC5  
                                                              ?_Save_Variables 0001  
                                                      __end_of_check_V3_status 54B0  
                                                            _Rd_Digital_Inputs 515C  
                                                         LCD_WriteStr@Str_Size 001D  
                                                               rd_byte_EE@addr 0019  
                                                                main@BackLight 01CD  
                                                                 ___almod@sign 0022  
                                                           ?_Rd_Digital_Inputs 0001  
                                                       __end_of_PID_Controller 3F7C  
                                                            ?_Get_Voltage_Data 0001  
                                                                 ?_lcd_display 0065  
                                                             ?_Get_Voltage_VL1 0019  
                                                             ?_Get_Voltage_VL2 0019  
                                                             ?_Get_Voltage_VL3 0019  
                                                             ?_Get_Voltage_Vin 0019  
                                                               ??_Display_Data 002F  
                                                           ??_Get_Voltage_Data 002D  
                                                           main@voltage_status 01D4  
                                                                ?_Control_Loop 0001  
                                                          ??_Rd_Digital_Inputs 0019  
