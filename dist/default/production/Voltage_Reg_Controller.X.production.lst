

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 15 16:53:37 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F258
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	text103,global,reloc=2,class=CODE,delta=1
   119                           	psect	text104,global,reloc=2,class=CODE,delta=1
   120                           	psect	text105,global,reloc=2,class=CODE,delta=1
   121                           	psect	text106,global,reloc=2,class=CODE,delta=1
   122                           	psect	text107,global,reloc=2,class=CODE,delta=1
   123                           	psect	text108,global,reloc=2,class=CODE,delta=1
   124                           	psect	text109,global,reloc=2,class=CODE,delta=1
   125                           	psect	text110,global,reloc=2,class=CODE,delta=1
   126                           	psect	text111,global,reloc=2,class=CODE,delta=1
   127                           	psect	text112,global,reloc=2,class=CODE,delta=1
   128                           	psect	text113,global,reloc=2,class=CODE,delta=1
   129                           	psect	text114,global,reloc=2,class=CODE,delta=1
   130                           	psect	text115,global,reloc=2,class=CODE,delta=1
   131                           	psect	text116,global,reloc=2,class=CODE,delta=1
   132                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text118,global,reloc=2,class=CODE,delta=1
   134                           	psect	text119,global,reloc=2,class=CODE,delta=1
   135                           	psect	text120,global,reloc=2,class=CODE,delta=1
   136                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text122,global,reloc=2,class=CODE,delta=1
   138                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text133,global,reloc=2,class=CODE,delta=1
   149                           	psect	text134,global,reloc=2,class=CODE,delta=1
   150                           	psect	text135,global,reloc=2,class=CODE,delta=1
   151                           	psect	text136,global,reloc=2,class=CODE,delta=1
   152                           	psect	text137,global,reloc=2,class=CODE,delta=1
   153                           	psect	text138,global,reloc=2,class=CODE,delta=1
   154                           	psect	text139,global,reloc=2,class=CODE,delta=1
   155                           	psect	text140,global,reloc=2,class=CODE,delta=1
   156                           	psect	text141,global,reloc=2,class=CODE,delta=1
   157                           	psect	text142,global,reloc=2,class=CODE,delta=1
   158                           	psect	text143,global,reloc=2,class=CODE,delta=1
   159                           	psect	text144,global,reloc=2,class=CODE,delta=1
   160                           	psect	text145,global,reloc=2,class=CODE,delta=1
   161                           	psect	text146,global,reloc=2,class=CODE,delta=1
   162                           	psect	text147,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text148,global,reloc=2,class=CODE,delta=1
   164                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text150,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text151,global,reloc=2,class=CODE,delta=1
   167                           	psect	text152,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text153,global,reloc=2,class=CODE,delta=1,group=1
   169                           	psect	text154,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text155,global,reloc=2,class=CODE,delta=1,group=1
   171                           	psect	text156,global,reloc=2,class=CODE,delta=1
   172                           	psect	text157,global,reloc=2,class=CODE,delta=1
   173                           	psect	text158,global,reloc=2,class=CODE,delta=1
   174                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   175                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   176                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   177                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   178  0000                     
   179                           ; Version 1.43
   180                           ; Generated 25/07/2017 GMT
   181                           ; 
   182                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   183                           ; All rights reserved.
   184                           ; 
   185                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   186                           ; 
   187                           ; Redistribution and use in source and binary forms, with or without modification, are
   188                           ; permitted provided that the following conditions are met:
   189                           ; 
   190                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   191                           ;        conditions and the following disclaimer.
   192                           ; 
   193                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   194                           ;        of conditions and the following disclaimer in the documentation and/or other
   195                           ;        materials provided with the distribution.
   196                           ; 
   197                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   198                           ;        software without specific prior written permission.
   199                           ; 
   200                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   201                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   202                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   203                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   204                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   205                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   206                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   207                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   208                           ; 
   209                           ; 
   210                           ; Code-generator required, PIC18F258 Definitions
   211                           ; 
   212                           ; SFR Addresses
   213  0000                     
   214                           	psect	idataBANK0
   215  000006                     __pidataBANK0:
   216                           	opt stack 0
   217                           
   218                           ;initializer for _value
   219  000006  F0BE               	dw	61630
   220                           
   221                           	psect	mediumconst
   222  007D22                     __pmediumconst:
   223                           	opt stack 0
   224  007D22  00                 	db	0
   225  007D23                     _dpowers:
   226                           	opt stack 0
   227  007D23  0001               	dw	1
   228  007D25  0000               	dw	0
   229  007D27  000A               	dw	10
   230  007D29  0000               	dw	0
   231  007D2B  0064               	dw	100
   232  007D2D  0000               	dw	0
   233  007D2F  03E8               	dw	1000
   234  007D31  0000               	dw	0
   235  007D33  2710               	dw	10000
   236  007D35  0000               	dw	0
   237  007D37  86A0               	dw	34464
   238  007D39  0001               	dw	1
   239  007D3B  4240               	dw	16960
   240  007D3D  000F               	dw	15
   241  007D3F  9680               	dw	38528
   242  007D41  0098               	dw	152
   243  007D43  E100               	dw	57600
   244  007D45  05F5               	dw	1525
   245  007D47  CA00               	dw	51712
   246  007D49  3B9A               	dw	15258
   247  007D4B                     __end_of_dpowers:
   248                           	opt stack 0
   249  007D4B                     __powers_:
   250                           	opt stack 0
   251  007D4B  00                 	db	0
   252  007D4C  80                 	db	128
   253  007D4D  3F                 	db	63
   254  007D4E  00                 	db	0
   255  007D4F  20                 	db	32
   256  007D50  41                 	db	65
   257  007D51  00                 	db	0
   258  007D52  C8                 	db	200
   259  007D53  42                 	db	66
   260  007D54  00                 	db	0
   261  007D55  7A                 	db	122
   262  007D56  44                 	db	68
   263  007D57  40                 	db	64
   264  007D58  1C                 	db	28
   265  007D59  46                 	db	70
   266  007D5A  50                 	db	80
   267  007D5B  C3                 	db	195
   268  007D5C  47                 	db	71
   269  007D5D  24                 	db	36
   270  007D5E  74                 	db	116
   271  007D5F  49                 	db	73
   272  007D60  97                 	db	151
   273  007D61  18                 	db	24
   274  007D62  4B                 	db	75
   275  007D63  BC                 	db	188
   276  007D64  BE                 	db	190
   277  007D65  4C                 	db	76
   278  007D66  6B                 	db	107
   279  007D67  6E                 	db	110
   280  007D68  4E                 	db	78
   281  007D69  03                 	db	3
   282  007D6A  15                 	db	21
   283  007D6B  50                 	db	80
   284  007D6C  79                 	db	121
   285  007D6D  AD                 	db	173
   286  007D6E  60                 	db	96
   287  007D6F  F3                 	db	243
   288  007D70  49                 	db	73
   289  007D71  71                 	db	113
   290  007D72                     __end_of__powers_:
   291                           	opt stack 0
   292  007D72                     __npowers_:
   293                           	opt stack 0
   294  007D72  00                 	db	0
   295  007D73  80                 	db	128
   296  007D74  3F                 	db	63
   297  007D75  CD                 	db	205
   298  007D76  CC                 	db	204
   299  007D77  3D                 	db	61
   300  007D78  D7                 	db	215
   301  007D79  23                 	db	35
   302  007D7A  3C                 	db	60
   303  007D7B  12                 	db	18
   304  007D7C  83                 	db	131
   305  007D7D  3A                 	db	58
   306  007D7E  B7                 	db	183
   307  007D7F  D1                 	db	209
   308  007D80  38                 	db	56
   309  007D81  C6                 	db	198
   310  007D82  27                 	db	39
   311  007D83  37                 	db	55
   312  007D84  38                 	db	56
   313  007D85  86                 	db	134
   314  007D86  35                 	db	53
   315  007D87  C0                 	db	192
   316  007D88  D6                 	db	214
   317  007D89  33                 	db	51
   318  007D8A  CC                 	db	204
   319  007D8B  2B                 	db	43
   320  007D8C  32                 	db	50
   321  007D8D  70                 	db	112
   322  007D8E  89                 	db	137
   323  007D8F  30                 	db	48
   324  007D90  E7                 	db	231
   325  007D91  DB                 	db	219
   326  007D92  2E                 	db	46
   327  007D93  E5                 	db	229
   328  007D94  3C                 	db	60
   329  007D95  1E                 	db	30
   330  007D96  42                 	db	66
   331  007D97  A2                 	db	162
   332  007D98  0D                 	db	13
   333  007D99                     __end_of__npowers_:
   334                           	opt stack 0
   335  007D99                     _moninit:
   336                           	opt stack 0
   337  007D99  1F                 	db	31
   338  007D9A  1C                 	db	28
   339  007D9B  1F                 	db	31
   340  007D9C  1E                 	db	30
   341  007D9D  1F                 	db	31
   342  007D9E  1E                 	db	30
   343  007D9F  1F                 	db	31
   344  007DA0  1F                 	db	31
   345  007DA1  1E                 	db	30
   346  007DA2  1F                 	db	31
   347  007DA3  1E                 	db	30
   348  007DA4  1F                 	db	31
   349  007DA5                     __end_of_moninit:
   350                           	opt stack 0
   351  0000                     _SPBRG	set	4015
   352  0000                     _PIE1bits	set	3997
   353  0000                     _TXSTAbits	set	4012
   354  0000                     _TXSTA	set	4012
   355  0000                     _T0CON	set	4053
   356  0000                     _RCSTAbits	set	4011
   357  0000                     _RCREG	set	4014
   358  0000                     _RCSTA	set	4011
   359  0000                     _TXREG	set	4013
   360  0000                     _TMR0L	set	4054
   361  0000                     _TMR0H	set	4055
   362  0000                     _TRISC	set	3988
   363  0000                     _TRISB	set	3987
   364  0000                     _TRISA	set	3986
   365  0000                     _ADRESH	set	4036
   366  0000                     _ADRESL	set	4035
   367  0000                     _ADCON0bits	set	4034
   368  0000                     _ADCON1	set	4033
   369  0000                     _ADCON0	set	4034
   370  0000                     _PORTB	set	3969
   371  0000                     _LATCbits	set	3979
   372  0000                     _TRISBbits	set	3987
   373  0000                     _TRISCbits	set	3988
   374  0000                     _SSPADD	set	4040
   375  0000                     _SSPCON1bits	set	4038
   376  0000                     _SSPBUF	set	4041
   377  0000                     _PIR1bits	set	3998
   378  0000                     _SSPCON2bits	set	4037
   379  0000                     _INTCON	set	4082
   380  0000                     _SSPSTATbits	set	4039
   381  0000                     _DDRCbits	set	3988
   382  0000                     _SSPCON2	set	4037
   383  0000                     _SSPCON1	set	4038
   384  0000                     _SSPSTAT	set	4039
   385  0000                     _PIR2bits	set	4001
   386  0000                     _EECON2	set	4007
   387  0000                     _INTCONbits	set	4082
   388  0000                     _EEDATA	set	4008
   389  0000                     _EECON1bits	set	4006
   390  0000                     _EEADR	set	4009
   391  0000                     _RCIF	set	31989
   392  0000                     _TXIF	set	31988
   393  0000                     _TMR0IF	set	32658
   394  0000                     _TMR0IE	set	32661
   395  0000                     _RCIE	set	31981
   396  0000                     _TXIE	set	31980
   397  007DA5                     STR_71:
   398  007DA5  20                 	db	32
   399  007DA6  20                 	db	32
   400  007DA7  20                 	db	32
   401  007DA8  20                 	db	32
   402  007DA9  20                 	db	32
   403  007DAA  20                 	db	32
   404  007DAB  52                 	db	82	;'R'
   405  007DAC  44                 	db	68	;'D'
   406  007DAD  33                 	db	51	;'3'
   407  007DAE  20                 	db	32
   408  007DAF  43                 	db	67	;'C'
   409  007DB0  41                 	db	65	;'A'
   410  007DB1  0A                 	db	10
   411  007DB2  56                 	db	86	;'V'
   412  007DB3  52                 	db	82	;'R'
   413  007DB4  20                 	db	32
   414  007DB5  76                 	db	118	;'v'
   415  007DB6  65                 	db	101	;'e'
   416  007DB7  72                 	db	114	;'r'
   417  007DB8  73                 	db	115	;'s'
   418  007DB9  69                 	db	105	;'i'
   419  007DBA  6F                 	db	111	;'o'
   420  007DBB  6E                 	db	110	;'n'
   421  007DBC  20                 	db	32
   422  007DBD  31                 	db	49	;'1'
   423  007DBE  2E                 	db	46
   424  007DBF  31                 	db	49	;'1'
   425  007DC0  20                 	db	32
   426  007DC1  32                 	db	50	;'2'
   427  007DC2  30                 	db	48	;'0'
   428  007DC3  31                 	db	49	;'1'
   429  007DC4  37                 	db	55	;'7'
   430  007DC5  0A                 	db	10
   431  007DC6  0A                 	db	10
   432  007DC7  20                 	db	32
   433  007DC8  49                 	db	73	;'I'
   434  007DC9  6E                 	db	110	;'n'
   435  007DCA  69                 	db	105	;'i'
   436  007DCB  63                 	db	99	;'c'
   437  007DCC  69                 	db	105	;'i'
   438  007DCD  61                 	db	97	;'a'
   439  007DCE  6E                 	db	110	;'n'
   440  007DCF  64                 	db	100	;'d'
   441  007DD0  6F                 	db	111	;'o'
   442  007DD1  20                 	db	32
   443  007DD2  53                 	db	83	;'S'
   444  007DD3  69                 	db	105	;'i'
   445  007DD4  73                 	db	115	;'s'
   446  007DD5  74                 	db	116	;'t'
   447  007DD6  65                 	db	101	;'e'
   448  007DD7  6D                 	db	109	;'m'
   449  007DD8  61                 	db	97	;'a'
   450  007DD9  0A                 	db	10
   451  007DDA  00                 	db	0
   452  007DDB                     STR_74:
   453  007DDB  49                 	db	73	;'I'
   454  007DDC  6E                 	db	110	;'n'
   455  007DDD  69                 	db	105	;'i'
   456  007DDE  63                 	db	99	;'c'
   457  007DDF  69                 	db	105	;'i'
   458  007DE0  61                 	db	97	;'a'
   459  007DE1  6C                 	db	108	;'l'
   460  007DE2  69                 	db	105	;'i'
   461  007DE3  7A                 	db	122	;'z'
   462  007DE4  61                 	db	97	;'a'
   463  007DE5  6E                 	db	110	;'n'
   464  007DE6  64                 	db	100	;'d'
   465  007DE7  6F                 	db	111	;'o'
   466  007DE8  20                 	db	32
   467  007DE9  66                 	db	102	;'f'
   468  007DEA  65                 	db	101	;'e'
   469  007DEB  63                 	db	99	;'c'
   470  007DEC  68                 	db	104	;'h'
   471  007DED  61                 	db	97	;'a'
   472  007DEE  20                 	db	32
   473  007DEF  79                 	db	121	;'y'
   474  007DF0  20                 	db	32
   475  007DF1  68                 	db	104	;'h'
   476  007DF2  6F                 	db	111	;'o'
   477  007DF3  72                 	db	114	;'r'
   478  007DF4  61                 	db	97	;'a'
   479  007DF5  20                 	db	32
   480  007DF6  64                 	db	100	;'d'
   481  007DF7  65                 	db	101	;'e'
   482  007DF8  6C                 	db	108	;'l'
   483  007DF9  20                 	db	32
   484  007DFA  73                 	db	115	;'s'
   485  007DFB  69                 	db	105	;'i'
   486  007DFC  73                 	db	115	;'s'
   487  007DFD  74                 	db	116	;'t'
   488  007DFE  65                 	db	101	;'e'
   489  007DFF  6D                 	db	109	;'m'
   490  007E00  61                 	db	97	;'a'
   491  007E01  2E                 	db	46
   492  007E02  0A                 	db	10
   493  007E03  00                 	db	0
   494  007E04                     STR_89:
   495  007E04  4A                 	db	74	;'J'
   496  007E05  61                 	db	97	;'a'
   497  007E06  6E                 	db	110	;'n'
   498  007E07  46                 	db	70	;'F'
   499  007E08  65                 	db	101	;'e'
   500  007E09  62                 	db	98	;'b'
   501  007E0A  4D                 	db	77	;'M'
   502  007E0B  61                 	db	97	;'a'
   503  007E0C  72                 	db	114	;'r'
   504  007E0D  41                 	db	65	;'A'
   505  007E0E  70                 	db	112	;'p'
   506  007E0F  72                 	db	114	;'r'
   507  007E10  4D                 	db	77	;'M'
   508  007E11  61                 	db	97	;'a'
   509  007E12  79                 	db	121	;'y'
   510  007E13  4A                 	db	74	;'J'
   511  007E14  75                 	db	117	;'u'
   512  007E15  6E                 	db	110	;'n'
   513  007E16  4A                 	db	74	;'J'
   514  007E17  75                 	db	117	;'u'
   515  007E18  6C                 	db	108	;'l'
   516  007E19  41                 	db	65	;'A'
   517  007E1A  75                 	db	117	;'u'
   518  007E1B  67                 	db	103	;'g'
   519  007E1C  53                 	db	83	;'S'
   520  007E1D  65                 	db	101	;'e'
   521  007E1E  70                 	db	112	;'p'
   522  007E1F  4F                 	db	79	;'O'
   523  007E20  63                 	db	99	;'c'
   524  007E21  74                 	db	116	;'t'
   525  007E22  4E                 	db	78	;'N'
   526  007E23  6F                 	db	111	;'o'
   527  007E24  76                 	db	118	;'v'
   528  007E25  44                 	db	68	;'D'
   529  007E26  65                 	db	101	;'e'
   530  007E27  63                 	db	99	;'c'
   531  007E28  00                 	db	0
   532  007E29                     STR_75:
   533  007E29  49                 	db	73	;'I'
   534  007E2A  6E                 	db	110	;'n'
   535  007E2B  69                 	db	105	;'i'
   536  007E2C  63                 	db	99	;'c'
   537  007E2D  69                 	db	105	;'i'
   538  007E2E  61                 	db	97	;'a'
   539  007E2F  6C                 	db	108	;'l'
   540  007E30  69                 	db	105	;'i'
   541  007E31  7A                 	db	122	;'z'
   542  007E32  61                 	db	97	;'a'
   543  007E33  6E                 	db	110	;'n'
   544  007E34  64                 	db	100	;'d'
   545  007E35  6F                 	db	111	;'o'
   546  007E36  20                 	db	32
   547  007E37  6D                 	db	109	;'m'
   548  007E38  6F                 	db	111	;'o'
   549  007E39  64                 	db	100	;'d'
   550  007E3A  75                 	db	117	;'u'
   551  007E3B  6C                 	db	108	;'l'
   552  007E3C  6F                 	db	111	;'o'
   553  007E3D  20                 	db	32
   554  007E3E  49                 	db	73	;'I'
   555  007E3F  4F                 	db	79	;'O'
   556  007E40  52                 	db	82	;'R'
   557  007E41  35                 	db	53	;'5'
   558  007E42  2E                 	db	46
   559  007E43  2E                 	db	46
   560  007E44  2E                 	db	46
   561  007E45  00                 	db	0
   562  007E46                     STR_64:
   563  007E46  25                 	db	37
   564  007E47  2E                 	db	46
   565  007E48  31                 	db	49	;'1'
   566  007E49  66                 	db	102	;'f'
   567  007E4A  20                 	db	32
   568  007E4B  25                 	db	37
   569  007E4C  2E                 	db	46
   570  007E4D  31                 	db	49	;'1'
   571  007E4E  66                 	db	102	;'f'
   572  007E4F  20                 	db	32
   573  007E50  25                 	db	37
   574  007E51  2E                 	db	46
   575  007E52  31                 	db	49	;'1'
   576  007E53  66                 	db	102	;'f'
   577  007E54  20                 	db	32
   578  007E55  25                 	db	37
   579  007E56  2E                 	db	46
   580  007E57  31                 	db	49	;'1'
   581  007E58  66                 	db	102	;'f'
   582  007E59  20                 	db	32
   583  007E5A  4D                 	db	77	;'M'
   584  007E5B  41                 	db	65	;'A'
   585  007E5C  4E                 	db	78	;'N'
   586  007E5D  55                 	db	85	;'U'
   587  007E5E  41                 	db	65	;'A'
   588  007E5F  4C                 	db	76	;'L'
   589  007E60  0A                 	db	10
   590  007E61  00                 	db	0
   591  007E62                     STR_65:
   592  007E62  25                 	db	37
   593  007E63  2E                 	db	46
   594  007E64  31                 	db	49	;'1'
   595  007E65  66                 	db	102	;'f'
   596  007E66  20                 	db	32
   597  007E67  25                 	db	37
   598  007E68  2E                 	db	46
   599  007E69  31                 	db	49	;'1'
   600  007E6A  66                 	db	102	;'f'
   601  007E6B  20                 	db	32
   602  007E6C  25                 	db	37
   603  007E6D  2E                 	db	46
   604  007E6E  31                 	db	49	;'1'
   605  007E6F  66                 	db	102	;'f'
   606  007E70  20                 	db	32
   607  007E71  25                 	db	37
   608  007E72  2E                 	db	46
   609  007E73  31                 	db	49	;'1'
   610  007E74  66                 	db	102	;'f'
   611  007E75  20                 	db	32
   612  007E76  41                 	db	65	;'A'
   613  007E77  55                 	db	85	;'U'
   614  007E78  54                 	db	84	;'T'
   615  007E79  4F                 	db	79	;'O'
   616  007E7A  0A                 	db	10
   617  007E7B  00                 	db	0
   618  007E7C                     STR_72:
   619  007E7C  49                 	db	73	;'I'
   620  007E7D  6E                 	db	110	;'n'
   621  007E7E  69                 	db	105	;'i'
   622  007E7F  63                 	db	99	;'c'
   623  007E80  69                 	db	105	;'i'
   624  007E81  61                 	db	97	;'a'
   625  007E82  6C                 	db	108	;'l'
   626  007E83  69                 	db	105	;'i'
   627  007E84  7A                 	db	122	;'z'
   628  007E85  61                 	db	97	;'a'
   629  007E86  6E                 	db	110	;'n'
   630  007E87  64                 	db	100	;'d'
   631  007E88  6F                 	db	111	;'o'
   632  007E89  20                 	db	32
   633  007E8A  42                 	db	66	;'B'
   634  007E8B  75                 	db	117	;'u'
   635  007E8C  73                 	db	115	;'s'
   636  007E8D  20                 	db	32
   637  007E8E  49                 	db	73	;'I'
   638  007E8F  32                 	db	50	;'2'
   639  007E90  43                 	db	67	;'C'
   640  007E91  2E                 	db	46
   641  007E92  2E                 	db	46
   642  007E93  2E                 	db	46
   643  007E94  00                 	db	0
   644  007E95                     STR_77:
   645  007E95  41                 	db	65	;'A'
   646  007E96  44                 	db	68	;'D'
   647  007E97  43                 	db	67	;'C'
   648  007E98  20                 	db	32
   649  007E99  73                 	db	115	;'s'
   650  007E9A  69                 	db	105	;'i'
   651  007E9B  73                 	db	115	;'s'
   652  007E9C  74                 	db	116	;'t'
   653  007E9D  65                 	db	101	;'e'
   654  007E9E  6D                 	db	109	;'m'
   655  007E9F  61                 	db	97	;'a'
   656  007EA0  2E                 	db	46
   657  007EA1  2E                 	db	46
   658  007EA2  2E                 	db	46
   659  007EA3  20                 	db	32
   660  007EA4  4C                 	db	76	;'L'
   661  007EA5  69                 	db	105	;'i'
   662  007EA6  73                 	db	115	;'s'
   663  007EA7  74                 	db	116	;'t'
   664  007EA8  6F                 	db	111	;'o'
   665  007EA9  2E                 	db	46
   666  007EAA  0A                 	db	10
   667  007EAB  00                 	db	0
   668  007EAC                     STR_88:
   669  007EAC  53                 	db	83	;'S'
   670  007EAD  75                 	db	117	;'u'
   671  007EAE  6E                 	db	110	;'n'
   672  007EAF  4D                 	db	77	;'M'
   673  007EB0  6F                 	db	111	;'o'
   674  007EB1  6E                 	db	110	;'n'
   675  007EB2  54                 	db	84	;'T'
   676  007EB3  75                 	db	117	;'u'
   677  007EB4  65                 	db	101	;'e'
   678  007EB5  57                 	db	87	;'W'
   679  007EB6  65                 	db	101	;'e'
   680  007EB7  64                 	db	100	;'d'
   681  007EB8  54                 	db	84	;'T'
   682  007EB9  68                 	db	104	;'h'
   683  007EBA  75                 	db	117	;'u'
   684  007EBB  46                 	db	70	;'F'
   685  007EBC  72                 	db	114	;'r'
   686  007EBD  69                 	db	105	;'i'
   687  007EBE  53                 	db	83	;'S'
   688  007EBF  61                 	db	97	;'a'
   689  007EC0  74                 	db	116	;'t'
   690  007EC1  00                 	db	0
   691  007EC2                     STR_79:
   692  007EC2  56                 	db	86	;'V'
   693  007EC3  5F                 	db	95	;'_'
   694  007EC4  4F                 	db	79	;'O'
   695  007EC5  75                 	db	117	;'u'
   696  007EC6  74                 	db	116	;'t'
   697  007EC7  20                 	db	32
   698  007EC8  28                 	db	40
   699  007EC9  4C                 	db	76	;'L'
   700  007ECA  4E                 	db	78	;'N'
   701  007ECB  31                 	db	49	;'1'
   702  007ECC  2D                 	db	45
   703  007ECD  4C                 	db	76	;'L'
   704  007ECE  4E                 	db	78	;'N'
   705  007ECF  32                 	db	50	;'2'
   706  007ED0  2D                 	db	45
   707  007ED1  4C                 	db	76	;'L'
   708  007ED2  4E                 	db	78	;'N'
   709  007ED3  33                 	db	51	;'3'
   710  007ED4  29                 	db	41
   711  007ED5  00                 	db	0
   712  007ED6                     STR_83:
   713  007ED6  56                 	db	86	;'V'
   714  007ED7  5F                 	db	95	;'_'
   715  007ED8  49                 	db	73	;'I'
   716  007ED9  6E                 	db	110	;'n'
   717  007EDA  20                 	db	32
   718  007EDB  28                 	db	40
   719  007EDC  4D                 	db	77	;'M'
   720  007EDD  69                 	db	105	;'i'
   721  007EDE  6E                 	db	110	;'n'
   722  007EDF  20                 	db	32
   723  007EE0  41                 	db	65	;'A'
   724  007EE1  63                 	db	99	;'c'
   725  007EE2  74                 	db	116	;'t'
   726  007EE3  20                 	db	32
   727  007EE4  4D                 	db	77	;'M'
   728  007EE5  61                 	db	97	;'a'
   729  007EE6  78                 	db	120	;'x'
   730  007EE7  29                 	db	41
   731  007EE8  00                 	db	0
   732  007EE9                     STR_7:
   733  007EE9  43                 	db	67	;'C'
   734  007EEA  6F                 	db	111	;'o'
   735  007EEB  6D                 	db	109	;'m'
   736  007EEC  61                 	db	97	;'a'
   737  007EED  6E                 	db	110	;'n'
   738  007EEE  64                 	db	100	;'d'
   739  007EEF  6F                 	db	111	;'o'
   740  007EF0  20                 	db	32
   741  007EF1  69                 	db	105	;'i'
   742  007EF2  6E                 	db	110	;'n'
   743  007EF3  76                 	db	118	;'v'
   744  007EF4  61                 	db	97	;'a'
   745  007EF5  6C                 	db	108	;'l'
   746  007EF6  69                 	db	105	;'i'
   747  007EF7  64                 	db	100	;'d'
   748  007EF8  6F                 	db	111	;'o'
   749  007EF9  0A                 	db	10
   750  007EFA  00                 	db	0
   751  007EFB                     STR_21:
   752  007EFB  50                 	db	80	;'P'
   753  007EFC  61                 	db	97	;'a'
   754  007EFD  72                 	db	114	;'r'
   755  007EFE  61                 	db	97	;'a'
   756  007EFF  6D                 	db	109	;'m'
   757  007F00  65                 	db	101	;'e'
   758  007F01  74                 	db	116	;'t'
   759  007F02  72                 	db	114	;'r'
   760  007F03  6F                 	db	111	;'o'
   761  007F04  20                 	db	32
   762  007F05  65                 	db	101	;'e'
   763  007F06  72                 	db	114	;'r'
   764  007F07  72                 	db	114	;'r'
   765  007F08  61                 	db	97	;'a'
   766  007F09  64                 	db	100	;'d'
   767  007F0A  6F                 	db	111	;'o'
   768  007F0B  00                 	db	0
   769  007F0C                     STR_25:
   770  007F0C  73                 	db	115	;'s'
   771  007F0D  61                 	db	97	;'a'
   772  007F0E  6D                 	db	109	;'m'
   773  007F0F  70                 	db	112	;'p'
   774  007F10  6C                 	db	108	;'l'
   775  007F11  65                 	db	101	;'e'
   776  007F12  5F                 	db	95	;'_'
   777  007F13  74                 	db	116	;'t'
   778  007F14  69                 	db	105	;'i'
   779  007F15  6D                 	db	109	;'m'
   780  007F16  65                 	db	101	;'e'
   781  007F17  00                 	db	0
   782  007F18                     STR_60:
   783  007F18  25                 	db	37
   784  007F19  64                 	db	100	;'d'
   785  007F1A  2F                 	db	47
   786  007F1B  25                 	db	37
   787  007F1C  64                 	db	100	;'d'
   788  007F1D  2F                 	db	47
   789  007F1E  25                 	db	37
   790  007F1F  64                 	db	100	;'d'
   791  007F20  0A                 	db	10
   792  007F21  00                 	db	0
   793  007F22                     STR_62:
   794  007F22  25                 	db	37
   795  007F23  64                 	db	100	;'d'
   796  007F24  3A                 	db	58	;':'
   797  007F25  25                 	db	37
   798  007F26  64                 	db	100	;'d'
   799  007F27  3A                 	db	58	;':'
   800  007F28  25                 	db	37
   801  007F29  64                 	db	100	;'d'
   802  007F2A  0A                 	db	10
   803  007F2B  00                 	db	0
   804  007F2C                     STR_9:
   805  007F2C  62                 	db	98	;'b'
   806  007F2D  61                 	db	97	;'a'
   807  007F2E  63                 	db	99	;'c'
   808  007F2F  6B                 	db	107	;'k'
   809  007F30  6C                 	db	108	;'l'
   810  007F31  69                 	db	105	;'i'
   811  007F32  67                 	db	103	;'g'
   812  007F33  68                 	db	104	;'h'
   813  007F34  74                 	db	116	;'t'
   814  007F35  00                 	db	0
   815  007F36                     STR_27:
   816  007F36  64                 	db	100	;'d'
   817  007F37  65                 	db	101	;'e'
   818  007F38  61                 	db	97	;'a'
   819  007F39  64                 	db	100	;'d'
   820  007F3A  62                 	db	98	;'b'
   821  007F3B  61                 	db	97	;'a'
   822  007F3C  6E                 	db	110	;'n'
   823  007F3D  64                 	db	100	;'d'
   824  007F3E  00                 	db	0
   825  007F3F                     STR_40:
   826  007F3F  73                 	db	115	;'s'
   827  007F40  61                 	db	97	;'a'
   828  007F41  6D                 	db	109	;'m'
   829  007F42  70                 	db	112	;'p'
   830  007F43  6C                 	db	108	;'l'
   831  007F44  65                 	db	101	;'e'
   832  007F45  5F                 	db	95	;'_'
   833  007F46  74                 	db	116	;'t'
   834  007F47  00                 	db	0
   835  007F48                     STR_26:
   836  007F48  73                 	db	115	;'s'
   837  007F49  65                 	db	101	;'e'
   838  007F4A  74                 	db	116	;'t'
   839  007F4B  70                 	db	112	;'p'
   840  007F4C  6F                 	db	111	;'o'
   841  007F4D  69                 	db	105	;'i'
   842  007F4E  6E                 	db	110	;'n'
   843  007F4F  74                 	db	116	;'t'
   844  007F50  00                 	db	0
   845  007F51                     STR_8:
   846  007F51  63                 	db	99	;'c'
   847  007F52  6F                 	db	111	;'o'
   848  007F53  6E                 	db	110	;'n'
   849  007F54  74                 	db	116	;'t'
   850  007F55  72                 	db	114	;'r'
   851  007F56  61                 	db	97	;'a'
   852  007F57  73                 	db	115	;'s'
   853  007F58  74                 	db	116	;'t'
   854  007F59  00                 	db	0
   855  007F5A                     STR_53:
   856  007F5A  6D                 	db	109	;'m'
   857  007F5B  61                 	db	97	;'a'
   858  007F5C  6E                 	db	110	;'n'
   859  007F5D  75                 	db	117	;'u'
   860  007F5E  61                 	db	97	;'a'
   861  007F5F  6C                 	db	108	;'l'
   862  007F60  0A                 	db	10
   863  007F61  00                 	db	0
   864  007F62                     STR_87:
   865  007F62  28                 	db	40
   866  007F63  6E                 	db	110	;'n'
   867  007F64  75                 	db	117	;'u'
   868  007F65  6C                 	db	108	;'l'
   869  007F66  6C                 	db	108	;'l'
   870  007F67  29                 	db	41
   871  007F68  00                 	db	0
   872  007F69                     STR_12:
   873  007F69  45                 	db	69	;'E'
   874  007F6A  72                 	db	114	;'r'
   875  007F6B  72                 	db	114	;'r'
   876  007F6C  6F                 	db	111	;'o'
   877  007F6D  72                 	db	114	;'r'
   878  007F6E  0A                 	db	10
   879  007F6F  00                 	db	0
   880  007F70                     STR_66:
   881  007F70  70                 	db	112	;'p'
   882  007F71  69                 	db	105	;'i'
   883  007F72  64                 	db	100	;'d'
   884  007F73  6F                 	db	111	;'o'
   885  007F74  75                 	db	117	;'u'
   886  007F75  74                 	db	116	;'t'
   887  007F76  00                 	db	0
   888  007F77                     STR_35:
   889  007F77  25                 	db	37
   890  007F78  2E                 	db	46
   891  007F79  31                 	db	49	;'1'
   892  007F7A  66                 	db	102	;'f'
   893  007F7B  0A                 	db	10
   894  007F7C  00                 	db	0
   895  007F7D                     STR_47:
   896  007F7D  25                 	db	37
   897  007F7E  2E                 	db	46
   898  007F7F  32                 	db	50	;'2'
   899  007F80  66                 	db	102	;'f'
   900  007F81  0A                 	db	10
   901  007F82  00                 	db	0
   902  007F83                     STR_54:
   903  007F83  41                 	db	65	;'A'
   904  007F84  75                 	db	117	;'u'
   905  007F85  74                 	db	116	;'t'
   906  007F86  6F                 	db	111	;'o'
   907  007F87  0A                 	db	10
   908  007F88  00                 	db	0
   909  007F89                     STR_19:
   910  007F89  76                 	db	118	;'v'
   911  007F8A  69                 	db	105	;'i'
   912  007F8B  6E                 	db	110	;'n'
   913  007F8C  5F                 	db	95	;'_'
   914  007F8D  73                 	db	115	;'s'
   915  007F8E  00                 	db	0
   916  007F8F                     STR_2:
   917  007F8F  72                 	db	114	;'r'
   918  007F90  65                 	db	101	;'e'
   919  007F91  73                 	db	115	;'s'
   920  007F92  65                 	db	101	;'e'
   921  007F93  74                 	db	116	;'t'
   922  007F94  00                 	db	0
   923  007F95                     STR_20:
   924  007F95  76                 	db	118	;'v'
   925  007F96  69                 	db	105	;'i'
   926  007F97  6E                 	db	110	;'n'
   927  007F98  5F                 	db	95	;'_'
   928  007F99  7A                 	db	122	;'z'
   929  007F9A  00                 	db	0
   930  007F9B                     STR_80:
   931  007F9B  25                 	db	37
   932  007F9C  2E                 	db	46
   933  007F9D  31                 	db	49	;'1'
   934  007F9E  66                 	db	102	;'f'
   935  007F9F  00                 	db	0
   936  007FA0                     STR_63:
   937  007FA0  64                 	db	100	;'d'
   938  007FA1  61                 	db	97	;'a'
   939  007FA2  74                 	db	116	;'t'
   940  007FA3  61                 	db	97	;'a'
   941  007FA4  00                 	db	0
   942  007FA5                     STR_32:
   943  007FA5  64                 	db	100	;'d'
   944  007FA6  61                 	db	97	;'a'
   945  007FA7  74                 	db	116	;'t'
   946  007FA8  65                 	db	101	;'e'
   947  007FA9  00                 	db	0
   948  007FAA                     STR_52:
   949  007FAA  6D                 	db	109	;'m'
   950  007FAB  6F                 	db	111	;'o'
   951  007FAC  64                 	db	100	;'d'
   952  007FAD  6F                 	db	111	;'o'
   953  007FAE  00                 	db	0
   954  007FAF                     STR_16:
   955  007FAF  76                 	db	118	;'v'
   956  007FB0  31                 	db	49	;'1'
   957  007FB1  5F                 	db	95	;'_'
   958  007FB2  73                 	db	115	;'s'
   959  007FB3  00                 	db	0
   960  007FB4                     STR_17:
   961  007FB4  76                 	db	118	;'v'
   962  007FB5  32                 	db	50	;'2'
   963  007FB6  5F                 	db	95	;'_'
   964  007FB7  73                 	db	115	;'s'
   965  007FB8  00                 	db	0
   966  007FB9                     STR_18:
   967  007FB9  76                 	db	118	;'v'
   968  007FBA  33                 	db	51	;'3'
   969  007FBB  5F                 	db	95	;'_'
   970  007FBC  73                 	db	115	;'s'
   971  007FBD  00                 	db	0
   972  007FBE                     STR_13:
   973  007FBE  76                 	db	118	;'v'
   974  007FBF  31                 	db	49	;'1'
   975  007FC0  5F                 	db	95	;'_'
   976  007FC1  7A                 	db	122	;'z'
   977  007FC2  00                 	db	0
   978  007FC3                     STR_14:
   979  007FC3  76                 	db	118	;'v'
   980  007FC4  32                 	db	50	;'2'
   981  007FC5  5F                 	db	95	;'_'
   982  007FC6  7A                 	db	122	;'z'
   983  007FC7  00                 	db	0
   984  007FC8                     STR_15:
   985  007FC8  76                 	db	118	;'v'
   986  007FC9  33                 	db	51	;'3'
   987  007FCA  5F                 	db	95	;'_'
   988  007FCB  7A                 	db	122	;'z'
   989  007FCC  00                 	db	0
   990  007FCD                     STR_78:
   991  007FCD  25                 	db	37
   992  007FCE  73                 	db	115	;'s'
   993  007FCF  0A                 	db	10
   994  007FD0  00                 	db	0
   995  007FD1                     STR_6:
   996  007FD1  6C                 	db	108	;'l'
   997  007FD2  63                 	db	99	;'c'
   998  007FD3  64                 	db	100	;'d'
   999  007FD4  00                 	db	0
  1000  007FD5                     STR_5:
  1001  007FD5  63                 	db	99	;'c'
  1002  007FD6  61                 	db	97	;'a'
  1003  007FD7  6C                 	db	108	;'l'
  1004  007FD8  00                 	db	0
  1005  007FD9                     STR_11:
  1006  007FD9  6D                 	db	109	;'m'
  1007  007FDA  69                 	db	105	;'i'
  1008  007FDB  6E                 	db	110	;'n'
  1009  007FDC  00                 	db	0
  1010  007FDD                     STR_57:
  1011  007FDD  76                 	db	118	;'v'
  1012  007FDE  69                 	db	105	;'i'
  1013  007FDF  6E                 	db	110	;'n'
  1014  007FE0  00                 	db	0
  1015  007FE1                     STR_4:
  1016  007FE1  67                 	db	103	;'g'
  1017  007FE2  65                 	db	101	;'e'
  1018  007FE3  74                 	db	116	;'t'
  1019  007FE4  00                 	db	0
  1020  007FE5                     STR_10:
  1021  007FE5  6D                 	db	109	;'m'
  1022  007FE6  61                 	db	97	;'a'
  1023  007FE7  78                 	db	120	;'x'
  1024  007FE8  00                 	db	0
  1025  007FE9                     STR_28:
  1026  007FE9  72                 	db	114	;'r'
  1027  007FEA  63                 	db	99	;'c'
  1028  007FEB  00                 	db	0
  1029  007FEC                     STR_55:
  1030  007FEC  76                 	db	118	;'v'
  1031  007FED  63                 	db	99	;'c'
  1032  007FEE  00                 	db	0
  1033  007FEF                     STR_24:
  1034  007FEF  74                 	db	116	;'t'
  1035  007FF0  64                 	db	100	;'d'
  1036  007FF1  00                 	db	0
  1037  007FF2                     STR_23:
  1038  007FF2  74                 	db	116	;'t'
  1039  007FF3  69                 	db	105	;'i'
  1040  007FF4  00                 	db	0
  1041  007FF5                     STR_22:
  1042  007FF5  6B                 	db	107	;'k'
  1043  007FF6  70                 	db	112	;'p'
  1044  007FF7  00                 	db	0
  1045  007FF8                     STR_1:
  1046  007FF8  20                 	db	32
  1047  007FF9  00                 	db	0
  1048  007FFA                     STR_69:
  1049  007FFA  2F                 	db	47
  1050  007FFB  00                 	db	0
  1051  007FFC                     STR_70:
  1052  007FFC  3A                 	db	58	;':'
  1053  007FFD  00                 	db	0
  1054  0000                     
  1055                           ; #config settings
  1056  007FFE  00                 	db	0	; dummy byte at the end
  1057  0000                     
  1058                           	psect	cinit
  1059  0057DE                     __pcinit:
  1060                           	opt stack 0
  1061  0057DE                     start_initialization:
  1062                           	opt stack 0
  1063  0057DE                     __initialization:
  1064                           	opt stack 0
  1065                           
  1066                           ; Initialize objects allocated to BANK0 (2 bytes)
  1067                           ; load TBLPTR registers with __pidataBANK0
  1068  0057DE  0E06               	movlw	low __pidataBANK0
  1069  0057E0  6EF6               	movwf	tblptrl,c
  1070  0057E2  0E00               	movlw	high __pidataBANK0
  1071  0057E4  6EF7               	movwf	tblptrh,c
  1072  0057E6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1073  0057E8  6EF8               	movwf	tblptru,c
  1074  0057EA  0009               	tblrd		*+	;fetch initializer
  1075  0057EC  CFF5 F0FC          	movff	tablat,__pdataBANK0
  1076  0057F0  0009               	tblrd		*+	;fetch initializer
  1077  0057F2  CFF5 F0FD          	movff	tablat,__pdataBANK0+1
  1078                           
  1079                           ; Clear objects allocated to BANK1 (187 bytes)
  1080  0057F6  EE01  F000         	lfsr	0,__pbssBANK1
  1081  0057FA  0EBB               	movlw	187
  1082  0057FC                     clear_0:
  1083  0057FC  6AEE               	clrf	postinc0,c
  1084  0057FE  06E8               	decf	wreg,f,c
  1085  005800  E1FD               	bnz	clear_0
  1086                           
  1087                           ; Clear objects allocated to BANK0 (15 bytes)
  1088  005802  EE00  F0ED         	lfsr	0,__pbssBANK0
  1089  005806  0E0F               	movlw	15
  1090  005808                     clear_1:
  1091  005808  6AEE               	clrf	postinc0,c
  1092  00580A  06E8               	decf	wreg,f,c
  1093  00580C  E1FD               	bnz	clear_1
  1094                           
  1095                           ; Clear objects allocated to COMRAM (23 bytes)
  1096  00580E  EE00  F030         	lfsr	0,__pbssCOMRAM
  1097  005812  0E17               	movlw	23
  1098  005814                     clear_2:
  1099  005814  6AEE               	clrf	postinc0,c
  1100  005816  06E8               	decf	wreg,f,c
  1101  005818  E1FD               	bnz	clear_2
  1102  00581A                     end_of_initialization:
  1103                           	opt stack 0
  1104  00581A                     __end_of__initialization:
  1105                           	opt stack 0
  1106  00581A  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1107  00581C  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1108  00581E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1109  005820  6EF8               	movwf	tblptru,c
  1110  005822  0100               	movlb	0
  1111  005824  EF4C  F012         	goto	_main	;jump to C main() function
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           
  1119                           	psect	bssCOMRAM
  1120  000030                     __pbssCOMRAM:
  1121                           	opt stack 0
  1122  000030                     _ti:
  1123                           	opt stack 0
  1124  000030                     	ds	3
  1125  000033                     _Vin:
  1126                           	opt stack 0
  1127  000033                     	ds	3
  1128  000036                     _VL3:
  1129                           	opt stack 0
  1130  000036                     	ds	3
  1131  000039                     _VL2:
  1132                           	opt stack 0
  1133  000039                     	ds	3
  1134  00003C                     _VL1:
  1135                           	opt stack 0
  1136  00003C                     	ds	3
  1137  00003F                     _k1:
  1138                           	opt stack 0
  1139  00003F                     	ds	3
  1140  000042                     strtok@sp:
  1141                           	opt stack 0
  1142  000042                     	ds	2
  1143  000044                     _tx_pointer:
  1144                           	opt stack 0
  1145  000044                     	ds	1
  1146  000045                     _status:
  1147                           	opt stack 0
  1148  000045                     	ds	1
  1149  000046                     _rx_pointer:
  1150                           	opt stack 0
  1151  000046                     	ds	1
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           
  1159                           	psect	bssBANK0
  1160  0000ED                     __pbssBANK0:
  1161                           	opt stack 0
  1162  0000ED                     _Outputs:
  1163                           	opt stack 0
  1164  0000ED                     	ds	4
  1165  0000F1                     _error:
  1166                           	opt stack 0
  1167  0000F1                     	ds	3
  1168  0000F4                     _time_zone:
  1169                           	opt stack 0
  1170  0000F4                     	ds	2
  1171  0000F6                     _buffer:
  1172                           	opt stack 0
  1173  0000F6                     	ds	2
  1174  0000F8                     _tx_flag:
  1175                           	opt stack 0
  1176  0000F8                     	ds	1
  1177  0000F9                     _rx_flag:
  1178                           	opt stack 0
  1179  0000F9                     	ds	1
  1180  0000FA                     _Int_Flag:
  1181                           	opt stack 0
  1182  0000FA                     	ds	1
  1183  0000FB                     _Inputs:
  1184                           	opt stack 0
  1185  0000FB                     	ds	1
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           postinc0	equ	0xFEE
  1191                           wreg	equ	0xFE8
  1192                           
  1193                           	psect	dataBANK0
  1194  0000FC                     __pdataBANK0:
  1195                           	opt stack 0
  1196  0000FC                     _value:
  1197                           	opt stack 0
  1198  0000FC                     	ds	2
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           
  1206                           	psect	bssBANK1
  1207  000100                     __pbssBANK1:
  1208                           	opt stack 0
  1209  000100                     _timezone:
  1210                           	opt stack 0
  1211  000100                     	ds	4
  1212  000104                     _deadband:
  1213                           	opt stack 0
  1214  000104                     	ds	3
  1215  000107                     _setpoint:
  1216                           	opt stack 0
  1217  000107                     	ds	3
  1218  00010A                     _last_integral:
  1219                           	opt stack 0
  1220  00010A                     	ds	3
  1221  00010D                     _last_error:
  1222                           	opt stack 0
  1223  00010D                     	ds	3
  1224  000110                     _last_output:
  1225                           	opt stack 0
  1226  000110                     	ds	3
  1227  000113                     _integral:
  1228                           	opt stack 0
  1229  000113                     	ds	3
  1230  000116                     _output:
  1231                           	opt stack 0
  1232  000116                     	ds	3
  1233  000119                     _T_sample:
  1234                           	opt stack 0
  1235  000119                     	ds	3
  1236  00011C                     _td:
  1237                           	opt stack 0
  1238  00011C                     	ds	3
  1239  00011F                     _Kp:
  1240                           	opt stack 0
  1241  00011F                     	ds	3
  1242  000122                     _max:
  1243                           	opt stack 0
  1244  000122                     	ds	3
  1245  000125                     _min:
  1246                           	opt stack 0
  1247  000125                     	ds	3
  1248  000128                     _VL_min:
  1249                           	opt stack 0
  1250  000128                     	ds	3
  1251  00012B                     _VL_max:
  1252                           	opt stack 0
  1253  00012B                     	ds	3
  1254  00012E                     _Vin_Span:
  1255                           	opt stack 0
  1256  00012E                     	ds	3
  1257  000131                     _VL3_span:
  1258                           	opt stack 0
  1259  000131                     	ds	3
  1260  000134                     _VL2_span:
  1261                           	opt stack 0
  1262  000134                     	ds	3
  1263  000137                     _VL1_span:
  1264                           	opt stack 0
  1265  000137                     	ds	3
  1266  00013A                     _Vin_zero:
  1267                           	opt stack 0
  1268  00013A                     	ds	3
  1269  00013D                     _VL3_zero:
  1270                           	opt stack 0
  1271  00013D                     	ds	3
  1272  000140                     _VL2_zero:
  1273                           	opt stack 0
  1274  000140                     	ds	3
  1275  000143                     _VL1_zero:
  1276                           	opt stack 0
  1277  000143                     	ds	3
  1278  000146                     _Vin_last:
  1279                           	opt stack 0
  1280  000146                     	ds	3
  1281  000149                     _VL3_last:
  1282                           	opt stack 0
  1283  000149                     	ds	3
  1284  00014C                     _VL2_last:
  1285                           	opt stack 0
  1286  00014C                     	ds	3
  1287  00014F                     _VL1_last:
  1288                           	opt stack 0
  1289  00014F                     	ds	3
  1290  000152                     _tx_buffer:
  1291                           	opt stack 0
  1292  000152                     	ds	40
  1293  00017A                     asctime@buf:
  1294                           	opt stack 0
  1295  00017A                     	ds	27
  1296  000195                     _rx_buffer:
  1297                           	opt stack 0
  1298  000195                     	ds	20
  1299  0001A9                     gmtime@tim:
  1300                           	opt stack 0
  1301  0001A9                     	ds	18
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           
  1309                           	psect	cstackBANK1
  1310  0001BB                     __pcstackBANK1:
  1311                           	opt stack 0
  1312  0001BB                     read_command@sep_tok:
  1313                           	opt stack 0
  1314  0001BB                     Display_Data@buffer:
  1315                           	opt stack 0
  1316                           
  1317                           ; 20 bytes @ 0x0
  1318  0001BB                     	ds	2
  1319  0001BD                     read_command@i:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x2
  1323  0001BD                     	ds	2
  1324  0001BF                     read_command@ptr:
  1325                           	opt stack 0
  1326                           
  1327                           ; 6 bytes @ 0x4
  1328  0001BF                     	ds	16
  1329  0001CF                     Display_Data@buff_len:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x14
  1333  0001CF                     	ds	1
  1334  0001D0                     main@BackLight:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x15
  1338  0001D0                     	ds	1
  1339  0001D1                     main@code:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x16
  1343  0001D1                     	ds	2
  1344  0001D3                     main@p_len:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x18
  1348  0001D3                     	ds	2
  1349  0001D5                     main@p:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x1A
  1353  0001D5                     	ds	2
  1354  0001D7                     main@voltage_status:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x1C
  1358  0001D7                     	ds	1
  1359  0001D8                     main@sys_time:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x1D
  1363  0001D8                     	ds	4
  1364  0001DC                     main@i:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x21
  1368  0001DC                     	ds	2
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           
  1376                           	psect	cstackBANK0
  1377  000060                     __pcstackBANK0:
  1378                           	opt stack 0
  1379  000060                     ??_atoi:
  1380  000060                     ??_bcdTOint:
  1381  000060                     ?_localtime:
  1382                           	opt stack 0
  1383  000060                     ?___lwdiv:
  1384                           	opt stack 0
  1385  000060                     ?___ftadd:
  1386                           	opt stack 0
  1387  000060                     localtime@tp:
  1388                           	opt stack 0
  1389  000060                     ___lwdiv@dividend:
  1390                           	opt stack 0
  1391  000060                     ___ftadd@f1:
  1392                           	opt stack 0
  1393  000060                     Get_Variables@data:
  1394                           	opt stack 0
  1395  000060                     Save_Variables@data:
  1396                           	opt stack 0
  1397                           
  1398                           ; 53 bytes @ 0x0
  1399  000060                     	ds	2
  1400  000062                     ??_localtime:
  1401  000062                     atoi@sign:
  1402                           	opt stack 0
  1403  000062                     ___lwdiv@divisor:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x2
  1407  000062                     	ds	1
  1408  000063                     atoi@a:
  1409                           	opt stack 0
  1410  000063                     ___ftadd@f2:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x3
  1414  000063                     	ds	1
  1415  000064                     ?_months_to_days:
  1416                           	opt stack 0
  1417  000064                     ?_years_to_days:
  1418                           	opt stack 0
  1419  000064                     months_to_days@month:
  1420                           	opt stack 0
  1421  000064                     years_to_days@yr:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x4
  1425  000064                     	ds	1
  1426  000065                     ?_intTObcd:
  1427                           	opt stack 0
  1428  000065                     lcd_display@var:
  1429                           	opt stack 0
  1430  000065                     intTObcd@v:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x5
  1434  000065                     	ds	1
  1435  000066                     ___ftadd@sign:
  1436                           	opt stack 0
  1437  000066                     localtime@t:
  1438                           	opt stack 0
  1439                           
  1440                           ; 4 bytes @ 0x6
  1441  000066                     	ds	1
  1442  000067                     ___ftadd@exp2:
  1443                           	opt stack 0
  1444  000067                     lcd_display@data:
  1445                           	opt stack 0
  1446  000067                     intTObcd@total:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x7
  1450  000067                     	ds	1
  1451  000068                     ??_years_to_days:
  1452  000068                     ___ftadd@exp1:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x8
  1456  000068                     	ds	1
  1457  000069                     ?___ftdiv:
  1458                           	opt stack 0
  1459  000069                     ?___ftsub:
  1460                           	opt stack 0
  1461  000069                     lcd_display@val:
  1462                           	opt stack 0
  1463  000069                     intTObcd@resultbase:
  1464                           	opt stack 0
  1465  000069                     ___ftdiv@f1:
  1466                           	opt stack 0
  1467  000069                     ___ftsub@f1:
  1468                           	opt stack 0
  1469                           
  1470                           ; 3 bytes @ 0x9
  1471  000069                     	ds	1
  1472  00006A                     ?_asctime:
  1473                           	opt stack 0
  1474  00006A                     asctime@tim:
  1475                           	opt stack 0
  1476  00006A                     years_to_days@ret:
  1477                           	opt stack 0
  1478                           
  1479                           ; 4 bytes @ 0xA
  1480  00006A                     	ds	1
  1481  00006B                     date_set@dat:
  1482                           	opt stack 0
  1483  00006B                     time_set@tim:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0xB
  1487  00006B                     	ds	1
  1488  00006C                     _asctime$3550:
  1489                           	opt stack 0
  1490  00006C                     ___ftdiv@f2:
  1491                           	opt stack 0
  1492  00006C                     ___ftsub@f2:
  1493                           	opt stack 0
  1494                           
  1495                           ; 3 bytes @ 0xC
  1496  00006C                     	ds	1
  1497  00006D                     asctime@s:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0xD
  1501  00006D                     	ds	1
  1502  00006E                     ?_ymd_to_scalar:
  1503                           	opt stack 0
  1504  00006E                     ymd_to_scalar@yr:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0xE
  1508  00006E                     	ds	1
  1509  00006F                     ??___ftdiv:
  1510  00006F                     asctime@cp:
  1511                           	opt stack 0
  1512  00006F                     time_set@data:
  1513                           	opt stack 0
  1514  00006F                     date_set@ptr:
  1515                           	opt stack 0
  1516                           
  1517                           ; 10 bytes @ 0xF
  1518  00006F                     	ds	1
  1519  000070                     ymd_to_scalar@mo:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x10
  1523  000070                     	ds	1
  1524  000071                     ?_ctime:
  1525                           	opt stack 0
  1526  000071                     ctime@tp:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x11
  1530  000071                     	ds	1
  1531  000072                     ___ftdiv@cntr:
  1532                           	opt stack 0
  1533  000072                     ymd_to_scalar@day:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x12
  1537  000072                     	ds	1
  1538  000073                     ___ftdiv@f3:
  1539                           	opt stack 0
  1540                           
  1541                           ; 3 bytes @ 0x13
  1542  000073                     	ds	1
  1543  000074                     ??_ymd_to_scalar:
  1544                           
  1545                           ; 1 bytes @ 0x14
  1546  000074                     	ds	1
  1547  000075                     time_set@ptr:
  1548                           	opt stack 0
  1549                           
  1550                           ; 6 bytes @ 0x15
  1551  000075                     	ds	1
  1552  000076                     ___ftdiv@exp:
  1553                           	opt stack 0
  1554                           
  1555                           ; 1 bytes @ 0x16
  1556  000076                     	ds	1
  1557  000077                     ___ftdiv@sign:
  1558                           	opt stack 0
  1559                           
  1560                           ; 1 bytes @ 0x17
  1561  000077                     	ds	1
  1562  000078                     ?_Get_Control_Voltage:
  1563                           	opt stack 0
  1564  000078                     ?___ftmul:
  1565                           	opt stack 0
  1566  000078                     _ymd_to_scalar$2950:
  1567                           	opt stack 0
  1568  000078                     ___ftmul@f1:
  1569                           	opt stack 0
  1570                           
  1571                           ; 3 bytes @ 0x18
  1572  000078                     	ds	1
  1573  000079                     date_set@sep_tok:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x19
  1577  000079                     	ds	1
  1578  00007A                     ymd_to_scalar@scalar:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x1A
  1582  00007A                     	ds	1
  1583  00007B                     ??_Get_Control_Voltage:
  1584  00007B                     time_set@sep_tok:
  1585                           	opt stack 0
  1586  00007B                     ___ftmul@f2:
  1587                           	opt stack 0
  1588  00007B                     date_set@data:
  1589                           	opt stack 0
  1590                           
  1591                           ; 8 bytes @ 0x1B
  1592  00007B                     	ds	1
  1593  00007C                     Get_Control_Voltage@count:
  1594                           	opt stack 0
  1595                           
  1596                           ; 1 bytes @ 0x1C
  1597  00007C                     	ds	1
  1598  00007D                     time_set@hour:
  1599                           	opt stack 0
  1600  00007D                     Get_Control_Voltage@volt:
  1601                           	opt stack 0
  1602                           
  1603                           ; 3 bytes @ 0x1D
  1604  00007D                     	ds	1
  1605  00007E                     ??___ftmul:
  1606  00007E                     ?_mktime:
  1607                           	opt stack 0
  1608  00007E                     mktime@timeptr:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x1E
  1612  00007E                     	ds	2
  1613  000080                     time_set@i:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x20
  1617  000080                     	ds	1
  1618  000081                     ___ftmul@exp:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x21
  1622  000081                     	ds	1
  1623  000082                     ??_mktime:
  1624  000082                     ___ftmul@f3_as_product:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0x22
  1628  000082                     	ds	1
  1629  000083                     date_set@date:
  1630                           	opt stack 0
  1631                           
  1632                           ; 4 bytes @ 0x23
  1633  000083                     	ds	2
  1634  000085                     ___ftmul@cntr:
  1635                           	opt stack 0
  1636                           
  1637                           ; 1 bytes @ 0x25
  1638  000085                     	ds	1
  1639  000086                     ___ftmul@sign:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0x26
  1643  000086                     	ds	1
  1644  000087                     ?_PID_Controller:
  1645                           	opt stack 0
  1646  000087                     ?_LowPass_VL1:
  1647                           	opt stack 0
  1648  000087                     ?_LowPass_VL2:
  1649                           	opt stack 0
  1650  000087                     ?_LowPass_VL3:
  1651                           	opt stack 0
  1652  000087                     ?_LowPass_Vin:
  1653                           	opt stack 0
  1654  000087                     ?_fround:
  1655                           	opt stack 0
  1656  000087                     ?_scale:
  1657                           	opt stack 0
  1658  000087                     ?_strtod:
  1659                           	opt stack 0
  1660  000087                     date_set@i:
  1661                           	opt stack 0
  1662  000087                     strtod@s:
  1663                           	opt stack 0
  1664  000087                     LowPass_VL1@val:
  1665                           	opt stack 0
  1666  000087                     LowPass_VL2@val:
  1667                           	opt stack 0
  1668  000087                     LowPass_VL3@val:
  1669                           	opt stack 0
  1670  000087                     LowPass_Vin@val:
  1671                           	opt stack 0
  1672  000087                     PID_Controller@val:
  1673                           	opt stack 0
  1674                           
  1675                           ; 3 bytes @ 0x27
  1676  000087                     	ds	1
  1677  000088                     mktime@tt:
  1678                           	opt stack 0
  1679                           
  1680                           ; 4 bytes @ 0x28
  1681  000088                     	ds	1
  1682  000089                     strtod@res:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x29
  1686  000089                     	ds	1
  1687  00008A                     _LowPass_VL1$3539:
  1688                           	opt stack 0
  1689  00008A                     _LowPass_VL2$3540:
  1690                           	opt stack 0
  1691  00008A                     _LowPass_VL3$3541:
  1692                           	opt stack 0
  1693  00008A                     _LowPass_Vin$3542:
  1694                           	opt stack 0
  1695  00008A                     _PID_Controller$3543:
  1696                           	opt stack 0
  1697  00008A                     _fround$3547:
  1698                           	opt stack 0
  1699  00008A                     _scale$3548:
  1700                           	opt stack 0
  1701                           
  1702                           ; 3 bytes @ 0x2A
  1703  00008A                     	ds	1
  1704  00008B                     ??_strtod:
  1705                           
  1706                           ; 1 bytes @ 0x2B
  1707  00008B                     	ds	1
  1708  00008C                     strtod@eexp:
  1709                           	opt stack 0
  1710  00008C                     time@t:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x2C
  1714  00008C                     	ds	1
  1715  00008D                     scale@scl:
  1716                           	opt stack 0
  1717  00008D                     strtod@flags:
  1718                           	opt stack 0
  1719  00008D                     LowPass_VL1@Vout:
  1720                           	opt stack 0
  1721  00008D                     LowPass_VL2@Vout:
  1722                           	opt stack 0
  1723  00008D                     LowPass_VL3@Vout:
  1724                           	opt stack 0
  1725  00008D                     LowPass_Vin@Vout:
  1726                           	opt stack 0
  1727  00008D                     _PID_Controller$3544:
  1728                           	opt stack 0
  1729  00008D                     _fround$3546:
  1730                           	opt stack 0
  1731                           
  1732                           ; 3 bytes @ 0x2D
  1733  00008D                     	ds	1
  1734  00008E                     ?___fttol:
  1735                           	opt stack 0
  1736  00008E                     strtod@expon:
  1737                           	opt stack 0
  1738  00008E                     time@time:
  1739                           	opt stack 0
  1740  00008E                     ___fttol@f1:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x2E
  1744  00008E                     	ds	1
  1745  00008F                     strtod@_u:
  1746                           	opt stack 0
  1747                           
  1748                           ; 4 bytes @ 0x2F
  1749  00008F                     	ds	1
  1750  000090                     Get_Voltage_Data@check:
  1751                           	opt stack 0
  1752  000090                     fround@prec:
  1753                           	opt stack 0
  1754  000090                     _PID_Controller$3545:
  1755                           	opt stack 0
  1756                           
  1757                           ; 3 bytes @ 0x30
  1758  000090                     	ds	1
  1759  000091                     Get_Voltage_Data@v1:
  1760                           	opt stack 0
  1761  000091                     time@date:
  1762                           	opt stack 0
  1763                           
  1764                           ; 4 bytes @ 0x31
  1765  000091                     	ds	1
  1766  000092                     ??___fttol:
  1767                           
  1768                           ; 1 bytes @ 0x32
  1769  000092                     	ds	1
  1770  000093                     ?_atof:
  1771                           	opt stack 0
  1772  000093                     atof@s:
  1773                           	opt stack 0
  1774  000093                     Control_Loop@voltage:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x33
  1778  000093                     	ds	2
  1779  000095                     time@DateTime:
  1780                           	opt stack 0
  1781                           
  1782                           ; 18 bytes @ 0x35
  1783  000095                     	ds	1
  1784  000096                     Control_Loop@Control_Out:
  1785                           	opt stack 0
  1786                           
  1787                           ; 3 bytes @ 0x36
  1788  000096                     	ds	1
  1789  000097                     ___fttol@sign1:
  1790                           	opt stack 0
  1791                           
  1792                           ; 1 bytes @ 0x37
  1793  000097                     	ds	1
  1794  000098                     ___fttol@lval:
  1795                           	opt stack 0
  1796                           
  1797                           ; 4 bytes @ 0x38
  1798  000098                     	ds	4
  1799  00009C                     ___fttol@exp1:
  1800                           	opt stack 0
  1801                           
  1802                           ; 1 bytes @ 0x3C
  1803  00009C                     	ds	1
  1804  00009D                     ?__doprnt:
  1805                           	opt stack 0
  1806  00009D                     __doprnt@pb:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x3D
  1810  00009D                     	ds	2
  1811  00009F                     __doprnt@f:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x3F
  1815  00009F                     	ds	2
  1816  0000A1                     __doprnt@ap:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x41
  1820  0000A1                     	ds	2
  1821  0000A3                     ??__doprnt:
  1822                           
  1823                           ; 1 bytes @ 0x43
  1824  0000A3                     	ds	6
  1825  0000A9                     __doprnt$3549:
  1826                           	opt stack 0
  1827                           
  1828                           ; 3 bytes @ 0x49
  1829  0000A9                     	ds	3
  1830  0000AC                     __doprnt@len:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x4C
  1834  0000AC                     	ds	2
  1835  0000AE                     __doprnt@cp:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x4E
  1839  0000AE                     	ds	2
  1840  0000B0                     __doprnt@flag:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x50
  1844  0000B0                     	ds	2
  1845  0000B2                     __doprnt@ccnt:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x52
  1849  0000B2                     	ds	2
  1850  0000B4                     __doprnt@exp:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x54
  1854  0000B4                     	ds	2
  1855  0000B6                     __doprnt@val:
  1856                           	opt stack 0
  1857                           
  1858                           ; 4 bytes @ 0x56
  1859  0000B6                     	ds	4
  1860  0000BA                     __doprnt@tmpval:
  1861                           	opt stack 0
  1862                           
  1863                           ; 4 bytes @ 0x5A
  1864  0000BA                     	ds	4
  1865  0000BE                     __doprnt@fval:
  1866                           	opt stack 0
  1867                           
  1868                           ; 3 bytes @ 0x5E
  1869  0000BE                     	ds	3
  1870  0000C1                     __doprnt@prec:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x61
  1874  0000C1                     	ds	2
  1875  0000C3                     __doprnt@c:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x63
  1879  0000C3                     	ds	1
  1880  0000C4                     ?_sprintf:
  1881                           	opt stack 0
  1882  0000C4                     ?_printf:
  1883                           	opt stack 0
  1884  0000C4                     printf@f:
  1885                           	opt stack 0
  1886  0000C4                     sprintf@wh:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x64
  1890  0000C4                     	ds	2
  1891  0000C6                     sprintf@f:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x66
  1895  0000C6                     	ds	2
  1896  0000C8                     printf@ap:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x68
  1900  0000C8                     	ds	2
  1901  0000CA                     printf@pb:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x6A
  1905  0000CA                     	ds	10
  1906  0000D4                     ??_sprintf:
  1907                           
  1908                           ; 1 bytes @ 0x74
  1909  0000D4                     	ds	2
  1910  0000D6                     sprintf@ap:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x76
  1914  0000D6                     	ds	2
  1915  0000D8                     sprintf@pb:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x78
  1919  0000D8                     	ds	4
  1920  0000DC                     reset_var@var:
  1921                           	opt stack 0
  1922  0000DC                     cal_analog@var:
  1923                           	opt stack 0
  1924  0000DC                     set_list@var:
  1925                           	opt stack 0
  1926  0000DC                     get_list@var:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x7C
  1930  0000DC                     	ds	2
  1931  0000DE                     ??_get_list:
  1932  0000DE                     cal_analog@data:
  1933                           	opt stack 0
  1934  0000DE                     set_list@data:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x7E
  1938  0000DE                     	ds	2
  1939  0000E0                     cal_analog@val:
  1940                           	opt stack 0
  1941  0000E0                     set_list@val:
  1942                           	opt stack 0
  1943  0000E0                     get_list@systime:
  1944                           	opt stack 0
  1945                           
  1946                           ; 4 bytes @ 0x80
  1947  0000E0                     	ds	4
  1948  0000E4                     get_list@t:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x84
  1952  0000E4                     	ds	2
  1953  0000E6                     read_command@rx_buff:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0x86
  1957  0000E6                     	ds	2
  1958  0000E8                     read_command@tx_buff:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x88
  1962  0000E8                     	ds	2
  1963  0000EA                     
  1964                           ; 1 bytes @ 0x8A
  1965  0000EA                     	ds	2
  1966  0000EC                     ??_main:
  1967                           
  1968                           ; 1 bytes @ 0x8C
  1969  0000EC                     	ds	1
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           
  1977                           	psect	cstackCOMRAM
  1978  000001                     __pcstackCOMRAM:
  1979                           	opt stack 0
  1980  000001                     ??_TimerInt:
  1981  000001                     
  1982                           ; 1 bytes @ 0x0
  1983  000001                     	ds	23
  1984  000018                     TimerInt@stat:
  1985                           	opt stack 0
  1986                           
  1987                           ; 1 bytes @ 0x17
  1988  000018                     	ds	1
  1989  000019                     ??_isdigit:
  1990  000019                     ??_isspace:
  1991  000019                     ??_IdleI2C:
  1992  000019                     ?_strcmp:
  1993                           	opt stack 0
  1994  000019                     ?_Get_Analog_Channel:
  1995                           	opt stack 0
  1996  000019                     ?_strlen:
  1997                           	opt stack 0
  1998  000019                     ?_strchr:
  1999                           	opt stack 0
  2000  000019                     ?___awmod:
  2001                           	opt stack 0
  2002  000019                     ?___lwmod:
  2003                           	opt stack 0
  2004  000019                     ?_Get_Voltage_Vin:
  2005                           	opt stack 0
  2006  000019                     ?_get_PID_Kp:
  2007                           	opt stack 0
  2008  000019                     ?_get_PID_Ti:
  2009                           	opt stack 0
  2010  000019                     ?_get_PID_Td:
  2011                           	opt stack 0
  2012  000019                     ?_get_PID_T:
  2013                           	opt stack 0
  2014  000019                     ?_get_PID_setpoint:
  2015                           	opt stack 0
  2016  000019                     ?_get_PID_deadband:
  2017                           	opt stack 0
  2018  000019                     ?_get_LP_RC_Constant:
  2019                           	opt stack 0
  2020  000019                     ?_get_max_VL:
  2021                           	opt stack 0
  2022  000019                     ?_get_min_VL:
  2023                           	opt stack 0
  2024  000019                     ?_get_PID_output:
  2025                           	opt stack 0
  2026  000019                     ?___ftpack:
  2027                           	opt stack 0
  2028  000019                     ?_get_VL1_zero:
  2029                           	opt stack 0
  2030  000019                     ?_get_VL2_zero:
  2031                           	opt stack 0
  2032  000019                     ?_get_VL3_zero:
  2033                           	opt stack 0
  2034  000019                     ?_get_VL1_span:
  2035                           	opt stack 0
  2036  000019                     ?_get_VL2_span:
  2037                           	opt stack 0
  2038  000019                     ?_get_VL3_span:
  2039                           	opt stack 0
  2040  000019                     ?_get_Vin_span:
  2041                           	opt stack 0
  2042  000019                     ?_get_Vin_zero:
  2043                           	opt stack 0
  2044  000019                     ?_get_max:
  2045                           	opt stack 0
  2046  000019                     ?_get_min:
  2047                           	opt stack 0
  2048  000019                     ?_Get_Voltage_VL1:
  2049                           	opt stack 0
  2050  000019                     ?_Get_Voltage_VL2:
  2051                           	opt stack 0
  2052  000019                     ?_Get_Voltage_VL3:
  2053                           	opt stack 0
  2054  000019                     ?__tdiv_to_l_:
  2055                           	opt stack 0
  2056  000019                     ?__div_to_l_:
  2057                           	opt stack 0
  2058  000019                     ?___lmul:
  2059                           	opt stack 0
  2060  000019                     ?___aldiv:
  2061                           	opt stack 0
  2062  000019                     ?___almod:
  2063                           	opt stack 0
  2064  000019                     ?___lldiv:
  2065                           	opt stack 0
  2066  000019                     rd_byte_EE@addr:
  2067                           	opt stack 0
  2068  000019                     wr_byte_EE@data:
  2069                           	opt stack 0
  2070  000019                     OpenI2C@slew:
  2071                           	opt stack 0
  2072  000019                     StartI2C@IE_stat:
  2073                           	opt stack 0
  2074  000019                     WriteI2C@data_out:
  2075                           	opt stack 0
  2076  000019                     RestartI2C@IE_stat:
  2077                           	opt stack 0
  2078  000019                     ReadI2C@IE_stat:
  2079                           	opt stack 0
  2080  000019                     AckI2C@IE_stat:
  2081                           	opt stack 0
  2082  000019                     StopI2C@IE_stat:
  2083                           	opt stack 0
  2084  000019                     Not_AckI2C@IE_stat:
  2085                           	opt stack 0
  2086  000019                     Rd_Digital_Inputs@Port_RD:
  2087                           	opt stack 0
  2088  000019                     check_V1_status@status:
  2089                           	opt stack 0
  2090  000019                     check_V2_status@status:
  2091                           	opt stack 0
  2092  000019                     check_V3_status@status:
  2093                           	opt stack 0
  2094  000019                     Open_Timer0@IE:
  2095                           	opt stack 0
  2096  000019                     putch@byte:
  2097                           	opt stack 0
  2098  000019                     ___lbdiv@divisor:
  2099                           	opt stack 0
  2100  000019                     OpenUSART@spbrg:
  2101                           	opt stack 0
  2102  000019                     ___awmod@dividend:
  2103                           	opt stack 0
  2104  000019                     ___lwmod@dividend:
  2105                           	opt stack 0
  2106  000019                     strcmp@s1:
  2107                           	opt stack 0
  2108  000019                     strlen@s:
  2109                           	opt stack 0
  2110  000019                     strchr@ptr:
  2111                           	opt stack 0
  2112  000019                     Set_LP_RC_constant@val:
  2113                           	opt stack 0
  2114  000019                     set_VL1_zero@val:
  2115                           	opt stack 0
  2116  000019                     set_VL2_zero@val:
  2117                           	opt stack 0
  2118  000019                     set_VL3_zero@val:
  2119                           	opt stack 0
  2120  000019                     set_Vin_zero@val:
  2121                           	opt stack 0
  2122  000019                     set_VL1_span@val:
  2123                           	opt stack 0
  2124  000019                     set_VL2_span@val:
  2125                           	opt stack 0
  2126  000019                     set_VL3_span@val:
  2127                           	opt stack 0
  2128  000019                     set_Vin_span@val:
  2129                           	opt stack 0
  2130  000019                     set_max_VL@val:
  2131                           	opt stack 0
  2132  000019                     set_min_VL@val:
  2133                           	opt stack 0
  2134  000019                     set_Deadband@val:
  2135                           	opt stack 0
  2136  000019                     set_PID_Kp@val:
  2137                           	opt stack 0
  2138  000019                     set_PID_Ki@val:
  2139                           	opt stack 0
  2140  000019                     set_PID_Kd@val:
  2141                           	opt stack 0
  2142  000019                     set_PID_T@val:
  2143                           	opt stack 0
  2144  000019                     set_PID_setpoint@val:
  2145                           	opt stack 0
  2146  000019                     __div_to_l_@f1:
  2147                           	opt stack 0
  2148  000019                     ___ftpack@arg:
  2149                           	opt stack 0
  2150  000019                     __tdiv_to_l_@f1:
  2151                           	opt stack 0
  2152  000019                     WriteIO5R@data:
  2153                           	opt stack 0
  2154  000019                     ___lmul@multiplier:
  2155                           	opt stack 0
  2156  000019                     ___aldiv@dividend:
  2157                           	opt stack 0
  2158  000019                     ___almod@dividend:
  2159                           	opt stack 0
  2160  000019                     ___lldiv@dividend:
  2161                           	opt stack 0
  2162                           
  2163                           ; 4 bytes @ 0x18
  2164  000019                     	ds	1
  2165  00001A                     rd_string_EE@lenght:
  2166                           	opt stack 0
  2167  00001A                     wr_byte_EE@addr:
  2168                           	opt stack 0
  2169  00001A                     OpenI2C@sync_mode:
  2170                           	opt stack 0
  2171  00001A                     WriteI2C@IE_stat:
  2172                           	opt stack 0
  2173  00001A                     Rd_Digital_Inputs@Temp_RD:
  2174                           	opt stack 0
  2175  00001A                     _isdigit$2871:
  2176                           	opt stack 0
  2177  00001A                     _isspace$2874:
  2178                           	opt stack 0
  2179  00001A                     ___lbdiv@dividend:
  2180                           	opt stack 0
  2181  00001A                     Open_Timer0@value:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x19
  2185  00001A                     	ds	1
  2186  00001B                     ??_Get_Analog_Channel:
  2187  00001B                     ??_strlen:
  2188  00001B                     wr_string_EE@lenght:
  2189                           	opt stack 0
  2190  00001B                     WriteStr_I2C@Reg_Addr:
  2191                           	opt stack 0
  2192  00001B                     ReadStr_I2C@Reg_Addr:
  2193                           	opt stack 0
  2194  00001B                     I2C_Send@command:
  2195                           	opt stack 0
  2196  00001B                     LCD_SetBackLight_Brightness@brightness:
  2197                           	opt stack 0
  2198  00001B                     LCD_SetContrast@val:
  2199                           	opt stack 0
  2200  00001B                     LCD_SetCursor_Position@column:
  2201                           	opt stack 0
  2202  00001B                     OpenUSART@config:
  2203                           	opt stack 0
  2204  00001B                     isdigit@c:
  2205                           	opt stack 0
  2206  00001B                     isspace@c:
  2207                           	opt stack 0
  2208  00001B                     ___lbdiv@counter:
  2209                           	opt stack 0
  2210  00001B                     rd_string_EE@buffer:
  2211                           	opt stack 0
  2212  00001B                     LCD_WriteStr@Str:
  2213                           	opt stack 0
  2214  00001B                     ___awmod@divisor:
  2215                           	opt stack 0
  2216  00001B                     ___lwmod@divisor:
  2217                           	opt stack 0
  2218  00001B                     strcmp@s2:
  2219                           	opt stack 0
  2220  00001B                     strchr@chr:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x1A
  2224  00001B                     	ds	1
  2225  00001C                     ?___ftneg:
  2226                           	opt stack 0
  2227  00001C                     Get_Analog_Channel@channel:
  2228                           	opt stack 0
  2229  00001C                     LCD_SetCursor_Position@row:
  2230                           	opt stack 0
  2231  00001C                     Open_Timer0@config:
  2232                           	opt stack 0
  2233  00001C                     ___ftpack@exp:
  2234                           	opt stack 0
  2235  00001C                     ___lbdiv@quotient:
  2236                           	opt stack 0
  2237  00001C                     wr_string_EE@buffer:
  2238                           	opt stack 0
  2239  00001C                     WriteStr_I2C@Str:
  2240                           	opt stack 0
  2241  00001C                     ReadStr_I2C@Str:
  2242                           	opt stack 0
  2243  00001C                     set_max@val:
  2244                           	opt stack 0
  2245  00001C                     set_min@val:
  2246                           	opt stack 0
  2247  00001C                     __div_to_l_@f2:
  2248                           	opt stack 0
  2249  00001C                     __tdiv_to_l_@f2:
  2250                           	opt stack 0
  2251  00001C                     ___ftneg@f1:
  2252                           	opt stack 0
  2253                           
  2254                           ; 3 bytes @ 0x1B
  2255  00001C                     	ds	1
  2256  00001D                     ??_strcmp:
  2257  00001D                     ?_strspn:
  2258                           	opt stack 0
  2259  00001D                     ?_strcspn:
  2260                           	opt stack 0
  2261  00001D                     rd_string_EE@addr:
  2262                           	opt stack 0
  2263  00001D                     LCD_WriteStr@Str_Size:
  2264                           	opt stack 0
  2265  00001D                     ___awmod@counter:
  2266                           	opt stack 0
  2267  00001D                     ___ftpack@sign:
  2268                           	opt stack 0
  2269  00001D                     ___lwmod@counter:
  2270                           	opt stack 0
  2271  00001D                     Get_Analog_Channel@ADC_data:
  2272                           	opt stack 0
  2273  00001D                     Open_Timer0@data:
  2274                           	opt stack 0
  2275  00001D                     strlen@cp:
  2276                           	opt stack 0
  2277  00001D                     strcspn@s1:
  2278                           	opt stack 0
  2279  00001D                     strspn@s1:
  2280                           	opt stack 0
  2281  00001D                     WriteIO5R@temp:
  2282                           	opt stack 0
  2283  00001D                     ___lmul@multiplicand:
  2284                           	opt stack 0
  2285  00001D                     ___aldiv@divisor:
  2286                           	opt stack 0
  2287  00001D                     ___almod@divisor:
  2288                           	opt stack 0
  2289  00001D                     ___lldiv@divisor:
  2290                           	opt stack 0
  2291                           
  2292                           ; 4 bytes @ 0x1C
  2293  00001D                     	ds	1
  2294  00001E                     ??___ftpack:
  2295  00001E                     ?_dylen:
  2296                           	opt stack 0
  2297  00001E                     ?_isleap:
  2298                           	opt stack 0
  2299  00001E                     wr_string_EE@addr:
  2300                           	opt stack 0
  2301  00001E                     rd_string_EE@i:
  2302                           	opt stack 0
  2303  00001E                     WriteStr_I2C@Str_Size:
  2304                           	opt stack 0
  2305  00001E                     ReadStr_I2C@Str_Size:
  2306                           	opt stack 0
  2307  00001E                     LCD_WriteStr@i:
  2308                           	opt stack 0
  2309  00001E                     ___awmod@sign:
  2310                           	opt stack 0
  2311  00001E                     strcmp@r:
  2312                           	opt stack 0
  2313  00001E                     dylen@yr:
  2314                           	opt stack 0
  2315  00001E                     isleap@yr:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x1D
  2319  00001E                     	ds	1
  2320  00001F                     ??__tdiv_to_l_:
  2321  00001F                     ?_Get_Variables:
  2322                           	opt stack 0
  2323  00001F                     ?___awdiv:
  2324                           	opt stack 0
  2325  00001F                     wr_string_EE@i:
  2326                           	opt stack 0
  2327  00001F                     WriteStr_I2C@i:
  2328                           	opt stack 0
  2329  00001F                     ReadStr_I2C@Mod_Addr:
  2330                           	opt stack 0
  2331  00001F                     LCD_WriteStr@stat:
  2332                           	opt stack 0
  2333  00001F                     ___awdiv@dividend:
  2334                           	opt stack 0
  2335  00001F                     strcspn@s2:
  2336                           	opt stack 0
  2337  00001F                     strspn@s2:
  2338                           	opt stack 0
  2339  00001F                     ___ftge@ff1:
  2340                           	opt stack 0
  2341  00001F                     __div_to_l_@quot:
  2342                           	opt stack 0
  2343                           
  2344                           ; 4 bytes @ 0x1E
  2345  00001F                     	ds	1
  2346  000020                     ??_dylen:
  2347  000020                     ??_isleap:
  2348  000020                     WriteStr_I2C@Mod_Addr:
  2349                           	opt stack 0
  2350  000020                     ReadStr_I2C@stat:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x1F
  2354  000020                     	ds	1
  2355  000021                     ??_strspn:
  2356  000021                     ??_strcspn:
  2357  000021                     ?___altoft:
  2358                           	opt stack 0
  2359  000021                     ?___lbtoft:
  2360                           	opt stack 0
  2361  000021                     ?___lltoft:
  2362                           	opt stack 0
  2363  000021                     ?___lwtoft:
  2364                           	opt stack 0
  2365  000021                     WriteStr_I2C@stat:
  2366                           	opt stack 0
  2367  000021                     WriteIO5R@bits:
  2368                           	opt stack 0
  2369  000021                     ___aldiv@counter:
  2370                           	opt stack 0
  2371  000021                     ___almod@counter:
  2372                           	opt stack 0
  2373  000021                     get_time@Time_Data:
  2374                           	opt stack 0
  2375  000021                     get_date@Date_Data:
  2376                           	opt stack 0
  2377  000021                     ___awdiv@divisor:
  2378                           	opt stack 0
  2379  000021                     ___lwtoft@c:
  2380                           	opt stack 0
  2381  000021                     ___lmul@product:
  2382                           	opt stack 0
  2383  000021                     ___altoft@c:
  2384                           	opt stack 0
  2385  000021                     ___lldiv@quotient:
  2386                           	opt stack 0
  2387  000021                     ___lltoft@c:
  2388                           	opt stack 0
  2389                           
  2390                           ; 4 bytes @ 0x20
  2391  000021                     	ds	1
  2392  000022                     ___aldiv@sign:
  2393                           	opt stack 0
  2394  000022                     ___almod@sign:
  2395                           	opt stack 0
  2396  000022                     _isleap$2937:
  2397                           	opt stack 0
  2398  000022                     set_time@Time_Data:
  2399                           	opt stack 0
  2400  000022                     set_date@Date_Data:
  2401                           	opt stack 0
  2402  000022                     strcspn@i:
  2403                           	opt stack 0
  2404  000022                     strspn@i:
  2405                           	opt stack 0
  2406  000022                     ___ftge@ff2:
  2407                           	opt stack 0
  2408  000022                     __tdiv_to_l_@quot:
  2409                           	opt stack 0
  2410                           
  2411                           ; 4 bytes @ 0x21
  2412  000022                     	ds	1
  2413  000023                     ___awdiv@counter:
  2414                           	opt stack 0
  2415  000023                     __div_to_l_@cntr:
  2416                           	opt stack 0
  2417  000023                     ___aldiv@quotient:
  2418                           	opt stack 0
  2419                           
  2420                           ; 4 bytes @ 0x22
  2421  000023                     	ds	1
  2422  000024                     ?_strtok:
  2423                           	opt stack 0
  2424  000024                     ___awdiv@sign:
  2425                           	opt stack 0
  2426  000024                     __div_to_l_@exp1:
  2427                           	opt stack 0
  2428  000024                     ___lbtoft@c:
  2429                           	opt stack 0
  2430  000024                     strtok@s1:
  2431                           	opt stack 0
  2432                           
  2433                           ; 2 bytes @ 0x23
  2434  000024                     	ds	1
  2435  000025                     ??___altoft:
  2436  000025                     ??___ftge:
  2437  000025                     ??___lltoft:
  2438  000025                     ___lldiv@counter:
  2439                           	opt stack 0
  2440  000025                     ___awdiv@quotient:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x24
  2444  000025                     	ds	1
  2445  000026                     ?___llmod:
  2446                           	opt stack 0
  2447  000026                     __tdiv_to_l_@cntr:
  2448                           	opt stack 0
  2449  000026                     strtok@s2:
  2450                           	opt stack 0
  2451  000026                     ___llmod@dividend:
  2452                           	opt stack 0
  2453                           
  2454                           ; 4 bytes @ 0x25
  2455  000026                     	ds	1
  2456  000027                     ?_gmtime:
  2457                           	opt stack 0
  2458  000027                     ?___wmul:
  2459                           	opt stack 0
  2460  000027                     __tdiv_to_l_@exp1:
  2461                           	opt stack 0
  2462  000027                     ___wmul@multiplier:
  2463                           	opt stack 0
  2464  000027                     gmtime@tp:
  2465                           	opt stack 0
  2466  000027                     put2d@cp:
  2467                           	opt stack 0
  2468                           
  2469                           ; 2 bytes @ 0x26
  2470  000027                     	ds	1
  2471  000028                     Check_VL_N@val:
  2472                           	opt stack 0
  2473                           
  2474                           ; 3 bytes @ 0x27
  2475  000028                     	ds	1
  2476  000029                     ??_gmtime:
  2477  000029                     ___altoft@exp:
  2478                           	opt stack 0
  2479  000029                     ___lltoft@exp:
  2480                           	opt stack 0
  2481  000029                     put2d@i:
  2482                           	opt stack 0
  2483  000029                     ___wmul@multiplicand:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x28
  2487  000029                     	ds	1
  2488  00002A                     ___altoft@sign:
  2489                           	opt stack 0
  2490  00002A                     put2d@cl:
  2491                           	opt stack 0
  2492  00002A                     ___llmod@divisor:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x29
  2496  00002A                     	ds	1
  2497  00002B                     put2d@ct:
  2498                           	opt stack 0
  2499  00002B                     ___wmul@product:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x2A
  2503  00002B                     	ds	1
  2504  00002C                     gmtime@tc:
  2505                           	opt stack 0
  2506                           
  2507                           ; 4 bytes @ 0x2B
  2508  00002C                     	ds	1
  2509  00002D                     ??___ftadd:
  2510  00002D                     ?_atoi:
  2511                           	opt stack 0
  2512  00002D                     ?_bcdTOint:
  2513                           	opt stack 0
  2514  00002D                     ___lwdiv@counter:
  2515                           	opt stack 0
  2516  00002D                     bcdTOint@bcdByte:
  2517                           	opt stack 0
  2518  00002D                     atoi@s:
  2519                           	opt stack 0
  2520                           
  2521                           ; 2 bytes @ 0x2C
  2522  00002D                     	ds	1
  2523  00002E                     ___llmod@counter:
  2524                           	opt stack 0
  2525  00002E                     ___lwdiv@quotient:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x2D
  2529  00002E                     	ds	1
  2530  00002F                     
  2531                           ; 1 bytes @ 0x2E
  2532  00002F                     	ds	1
  2533  000030                     tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           postinc0	equ	0xFEE
  2538                           wreg	equ	0xFE8
  2539                           
  2540                           ; 1 bytes @ 0x2F
  2541 ;;
  2542 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2543 ;;
  2544 ;; *************** function _main *****************
  2545 ;; Defined at:
  2546 ;;		line 49 in file "main.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  buffer         20    0        unsigned char [20]
  2551 ;;  sys_time        4   29[BANK1 ] long 
  2552 ;;  Control_Out     3    0        float 
  2553 ;;  voltage         3    0        float 
  2554 ;;  t               3    0        PTR struct tm
  2555 ;;  i               2   33[BANK1 ] int 
  2556 ;;  p               2   26[BANK1 ] PTR unsigned char 
  2557 ;;		 -> STR_71(54), 
  2558 ;;  p_len           2   24[BANK1 ] int 
  2559 ;;  code            2   22[BANK1 ] int 
  2560 ;;  voltage_stat    1   28[BANK1 ] struct data_check
  2561 ;;  BackLight       1   21[BANK1 ] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2571 ;;      Params:         0       0       0       0       0       0       0
  2572 ;;      Locals:         0       0      14       0       0       0       0
  2573 ;;      Temps:          0       1       0       0       0       0       0
  2574 ;;      Totals:         0       1      14       0       0       0       0
  2575 ;;Total ram usage:       15 bytes
  2576 ;; Hardware stack levels required when called:    8
  2577 ;; This function calls:
  2578 ;;		_Control_Loop
  2579 ;;		_Display_Data
  2580 ;;		_Get_Variables
  2581 ;;		_Get_Voltage_Data
  2582 ;;		_Get_Voltage_Vin
  2583 ;;		_LCD_Clear
  2584 ;;		_LCD_WriteStr
  2585 ;;		_Manual_Control
  2586 ;;		_OpenADC
  2587 ;;		_OpenI2C
  2588 ;;		_OpenIO5R
  2589 ;;		_OpenUSART
  2590 ;;		_Open_Timer0
  2591 ;;		_Rd_Digital_Inputs
  2592 ;;		_Save_Variables
  2593 ;;		_Set_LP_RC_constant
  2594 ;;		_WriteIO5R
  2595 ;;		_check_V1_status
  2596 ;;		_check_V2_status
  2597 ;;		_check_V3_status
  2598 ;;		_ctime
  2599 ;;		_printf
  2600 ;;		_read_command
  2601 ;;		_set_Deadband
  2602 ;;		_set_PID_Kd
  2603 ;;		_set_PID_Ki
  2604 ;;		_set_PID_Kp
  2605 ;;		_set_PID_T
  2606 ;;		_set_PID_setpoint
  2607 ;;		_set_VL1_span
  2608 ;;		_set_VL1_zero
  2609 ;;		_set_VL2_span
  2610 ;;		_set_VL2_zero
  2611 ;;		_set_VL3_span
  2612 ;;		_set_VL3_zero
  2613 ;;		_set_Vin_span
  2614 ;;		_set_Vin_zero
  2615 ;;		_set_max
  2616 ;;		_set_max_VL
  2617 ;;		_set_min
  2618 ;;		_set_min_VL
  2619 ;;		_strlen
  2620 ;;		_time
  2621 ;; This function is called by:
  2622 ;;		Startup code after reset
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text0
  2627  002498                     __ptext0:
  2628                           	opt stack 0
  2629  002498                     _main:
  2630                           	opt stack 0
  2631  002498  FFFF               	dw	65535	; assembler added errata NOP
  2632                           
  2633                           ;main.c: 52: time_t sys_time;
  2634                           ;main.c: 53: struct tm *t;
  2635                           ;main.c: 54: int i,code;
  2636                           ;main.c: 55: union data_check voltage_status;
  2637                           ;main.c: 56: float voltage, Control_Out;
  2638                           ;main.c: 60: char *p = "      RD3 CA\nVR version 1.1 2017\n\n Iniciando Sistema\n";
  2639                           
  2640                           ;incstack = 0
  2641  00249A  0EA5               	movlw	low STR_71
  2642  00249C  0101               	movlb	1	; () banked
  2643  00249E  6FD5               	movwf	main@p& (0+255),b
  2644  0024A0  0E7D               	movlw	high STR_71
  2645  0024A2  0101               	movlb	1	; () banked
  2646  0024A4  6FD6               	movwf	(main@p+1)& (0+255),b
  2647                           
  2648                           ; BSR set to: 1
  2649                           ;main.c: 61: int p_len;
  2650                           ;main.c: 62: char buffer[20];
  2651                           ;main.c: 63: char BackLight=0;
  2652  0024A6  0E00               	movlw	0
  2653  0024A8  0101               	movlb	1	; () banked
  2654  0024AA  6FD0               	movwf	main@BackLight& (0+255),b
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;main.c: 65: TRISA=0xff;
  2658  0024AC  6892               	setf	3986,c	;volatile
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;main.c: 66: TRISB=0xff;
  2662  0024AE  6893               	setf	3987,c	;volatile
  2663                           
  2664                           ; BSR set to: 1
  2665                           ;main.c: 67: TRISC=0xff;
  2666  0024B0  6894               	setf	3988,c	;volatile
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;main.c: 70: OpenUSART(0b01111111&0b11111111&0b11111111&0b11111111&0b11111101&0b11111110
      +                          ,64);
  2670  0024B2  0E00               	movlw	0
  2671  0024B4  6E1A               	movwf	OpenUSART@spbrg+1,c
  2672  0024B6  0E40               	movlw	64
  2673  0024B8  6E19               	movwf	OpenUSART@spbrg,c
  2674  0024BA  0E7C               	movlw	124
  2675  0024BC  ECFB  F02D         	call	_OpenUSART
  2676                           
  2677                           ;main.c: 71: rx_flag=0;
  2678  0024C0  0E00               	movlw	0
  2679  0024C2  0100               	movlb	0	; () banked
  2680  0024C4  6FF9               	movwf	_rx_flag& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 72: rx_pointer=0;
  2684  0024C6  0E00               	movlw	0
  2685  0024C8  6E46               	movwf	_rx_pointer,c
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;main.c: 73: tx_flag=0;
  2689  0024CA  0E00               	movlw	0
  2690  0024CC  0100               	movlb	0	; () banked
  2691  0024CE  6FF8               	movwf	_tx_flag& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;main.c: 74: tx_pointer=0;
  2695  0024D0  0E00               	movlw	0
  2696  0024D2  6E44               	movwf	_tx_pointer,c
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 75: for(i=0;i<10000;i++);
  2700  0024D4  0E00               	movlw	0
  2701  0024D6  0101               	movlb	1	; () banked
  2702  0024D8  6FDD               	movwf	(main@i+1)& (0+255),b
  2703  0024DA  0E00               	movlw	0
  2704  0024DC  6FDC               	movwf	main@i& (0+255),b
  2705  0024DE                     l11434:
  2706  0024DE  FFFF               	dw	65535	; assembler added errata NOP
  2707                           
  2708                           ; BSR set to: 1
  2709  0024E0  0101               	movlb	1	; () banked
  2710  0024E2  BFDD               	btfsc	(main@i+1)& (0+255),7,b
  2711  0024E4  D008               	goto	l978
  2712  0024E6  0E10               	movlw	16
  2713  0024E8  0101               	movlb	1	; () banked
  2714  0024EA  5DDC               	subwf	main@i& (0+255),w,b
  2715  0024EC  0E27               	movlw	39
  2716  0024EE  0101               	movlb	1	; () banked
  2717  0024F0  59DD               	subwfb	(main@i+1)& (0+255),w,b
  2718  0024F2  B0D8               	btfsc	status,0,c
  2719  0024F4  D005               	goto	u11430
  2720  0024F6                     l978:
  2721  0024F6  FFFF               	dw	65535	; assembler added errata NOP
  2722                           
  2723                           ; BSR set to: 1
  2724                           
  2725                           ; BSR set to: 1
  2726  0024F8  0101               	movlb	1	; () banked
  2727  0024FA  4BDC               	infsnz	main@i& (0+255),f,b
  2728  0024FC  2BDD               	incf	(main@i+1)& (0+255),f,b
  2729  0024FE  D7EF               	goto	l11434
  2730  002500                     u11430:
  2731  002500  FFFF               	dw	65535	; assembler added errata NOP
  2732                           
  2733                           ; BSR set to: 1
  2734                           ;main.c: 78: printf("Inicializando Bus I2C...");
  2735                           
  2736                           ; BSR set to: 1
  2737  002502  0E7C               	movlw	low STR_72
  2738  002504  0100               	movlb	0	; () banked
  2739  002506  6FC4               	movwf	printf@f& (0+255),b
  2740  002508  0E7E               	movlw	high STR_72
  2741  00250A  0100               	movlb	0	; () banked
  2742  00250C  6FC5               	movwf	(printf@f+1)& (0+255),b
  2743  00250E  EC14  F02C         	call	_printf	;wreg free
  2744                           
  2745                           ;main.c: 79: OpenI2C(8,0xC0);
  2746  002512  0EC0               	movlw	192
  2747  002514  6E19               	movwf	OpenI2C@slew,c
  2748  002516  0E08               	movlw	8
  2749  002518  ECCB  F028         	call	_OpenI2C
  2750                           
  2751                           ;main.c: 80: printf("Listo.\n");
  2752  00251C  0EA4               	movlw	low (STR_77+15)
  2753  00251E  0100               	movlb	0	; () banked
  2754  002520  6FC4               	movwf	printf@f& (0+255),b
  2755  002522  0E7E               	movlw	high (STR_77+15)
  2756  002524  0100               	movlb	0	; () banked
  2757  002526  6FC5               	movwf	(printf@f+1)& (0+255),b
  2758  002528  EC14  F02C         	call	_printf	;wreg free
  2759                           
  2760                           ;main.c: 83: time(&sys_time);
  2761  00252C  0ED8               	movlw	low main@sys_time
  2762  00252E  0100               	movlb	0	; () banked
  2763  002530  6F8C               	movwf	time@t& (0+255),b
  2764  002532  0E01               	movlw	high main@sys_time
  2765  002534  0100               	movlb	0	; () banked
  2766  002536  6F8D               	movwf	(time@t+1)& (0+255),b
  2767  002538  EC98  F035         	call	_time	;wreg free
  2768                           
  2769                           ;main.c: 84: printf("Inicializando fecha y hora del sistema.\n");
  2770  00253C  0EDB               	movlw	low STR_74
  2771  00253E  0100               	movlb	0	; () banked
  2772  002540  6FC4               	movwf	printf@f& (0+255),b
  2773  002542  0E7D               	movlw	high STR_74
  2774  002544  0100               	movlb	0	; () banked
  2775  002546  6FC5               	movwf	(printf@f+1)& (0+255),b
  2776  002548  EC14  F02C         	call	_printf	;wreg free
  2777                           
  2778                           ;main.c: 87: OpenIO5R();
  2779  00254C  ECF9  F029         	call	_OpenIO5R	;wreg free
  2780                           
  2781                           ;main.c: 88: printf("Inicializando modulo IOR5...");
  2782  002550  0E29               	movlw	low STR_75
  2783  002552  0100               	movlb	0	; () banked
  2784  002554  6FC4               	movwf	printf@f& (0+255),b
  2785  002556  0E7E               	movlw	high STR_75
  2786  002558  0100               	movlb	0	; () banked
  2787  00255A  6FC5               	movwf	(printf@f+1)& (0+255),b
  2788  00255C  EC14  F02C         	call	_printf	;wreg free
  2789                           
  2790                           ;main.c: 89: printf("Listo.\n");
  2791  002560  0EA4               	movlw	low (STR_77+15)
  2792  002562  0100               	movlb	0	; () banked
  2793  002564  6FC4               	movwf	printf@f& (0+255),b
  2794  002566  0E7E               	movlw	high (STR_77+15)
  2795  002568  0100               	movlb	0	; () banked
  2796  00256A  6FC5               	movwf	(printf@f+1)& (0+255),b
  2797  00256C  EC14  F02C         	call	_printf	;wreg free
  2798                           
  2799                           ;main.c: 90: OpenADC();
  2800  002570  EC97  F026         	call	_OpenADC	;wreg free
  2801                           
  2802                           ;main.c: 91: printf("ADC sistema... Listo.\n");
  2803  002574  0E95               	movlw	low STR_77
  2804  002576  0100               	movlb	0	; () banked
  2805  002578  6FC4               	movwf	printf@f& (0+255),b
  2806  00257A  0E7E               	movlw	high STR_77
  2807  00257C  0100               	movlb	0	; () banked
  2808  00257E  6FC5               	movwf	(printf@f+1)& (0+255),b
  2809  002580  EC14  F02C         	call	_printf	;wreg free
  2810                           
  2811                           ;main.c: 92: Outputs.Output=0;
  2812  002584  0E00               	movlw	0
  2813  002586  0100               	movlb	0	; () banked
  2814  002588  6FED               	movwf	_Outputs& (0+255),b
  2815  00258A  0E00               	movlw	0
  2816  00258C  6FEE               	movwf	(_Outputs+1)& (0+255),b
  2817  00258E  0E00               	movlw	0
  2818  002590  6FEF               	movwf	(_Outputs+2)& (0+255),b
  2819  002592  0E00               	movlw	0
  2820  002594  6FF0               	movwf	(_Outputs+3)& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 93: WriteIO5R(Outputs.Output);
  2824  002596  C0ED  F019         	movff	_Outputs,WriteIO5R@data
  2825  00259A  C0EE  F01A         	movff	_Outputs+1,WriteIO5R@data+1
  2826  00259E  C0EF  F01B         	movff	_Outputs+2,WriteIO5R@data+2
  2827  0025A2  C0F0  F01C         	movff	_Outputs+3,WriteIO5R@data+3
  2828  0025A6  EC4F  F030         	call	_WriteIO5R	;wreg free
  2829                           
  2830                           ;main.c: 95: set_max(0.0);
  2831  0025AA  0E00               	movlw	0
  2832  0025AC  6E1C               	movwf	set_max@val,c
  2833  0025AE  0E00               	movlw	0
  2834  0025B0  6E1D               	movwf	set_max@val+1,c
  2835  0025B2  0E00               	movlw	0
  2836  0025B4  6E1E               	movwf	set_max@val+2,c
  2837  0025B6  EC0F  F028         	call	_set_max	;wreg free
  2838                           
  2839                           ;main.c: 96: set_min(200.0);
  2840  0025BA  0E00               	movlw	0
  2841  0025BC  6E1C               	movwf	set_min@val,c
  2842  0025BE  0E48               	movlw	72
  2843  0025C0  6E1D               	movwf	set_min@val+1,c
  2844  0025C2  0E43               	movlw	67
  2845  0025C4  6E1E               	movwf	set_min@val+2,c
  2846  0025C6  EC18  F028         	call	_set_min	;wreg free
  2847                           
  2848                           ;main.c: 98: time(&sys_time);
  2849  0025CA  0ED8               	movlw	low main@sys_time
  2850  0025CC  0100               	movlb	0	; () banked
  2851  0025CE  6F8C               	movwf	time@t& (0+255),b
  2852  0025D0  0E01               	movlw	high main@sys_time
  2853  0025D2  0100               	movlb	0	; () banked
  2854  0025D4  6F8D               	movwf	(time@t+1)& (0+255),b
  2855  0025D6  EC98  F035         	call	_time	;wreg free
  2856                           
  2857                           ;main.c: 100: printf("%s\n",ctime(&sys_time));
  2858  0025DA  0ECD               	movlw	low STR_78
  2859  0025DC  0100               	movlb	0	; () banked
  2860  0025DE  6FC4               	movwf	printf@f& (0+255),b
  2861  0025E0  0E7F               	movlw	high STR_78
  2862  0025E2  0100               	movlb	0	; () banked
  2863  0025E4  6FC5               	movwf	(printf@f+1)& (0+255),b
  2864  0025E6  0ED8               	movlw	low main@sys_time
  2865  0025E8  0100               	movlb	0	; () banked
  2866  0025EA  6F71               	movwf	ctime@tp& (0+255),b
  2867  0025EC  0E01               	movlw	high main@sys_time
  2868  0025EE  0100               	movlb	0	; () banked
  2869  0025F0  6F72               	movwf	(ctime@tp+1)& (0+255),b
  2870  0025F2  EC24  F029         	call	_ctime	;wreg free
  2871  0025F6  C071  F0C6         	movff	?_ctime,?_printf+2
  2872  0025FA  C072  F0C7         	movff	?_ctime+1,?_printf+3
  2873  0025FE  EC14  F02C         	call	_printf	;wreg free
  2874                           
  2875                           ;main.c: 103: LCD_Clear();
  2876  002602  ECFA  F01F         	call	_LCD_Clear	;wreg free
  2877                           
  2878                           ;main.c: 104: p_len=strlen(p);
  2879  002606  C1D5  F019         	movff	main@p,strlen@s
  2880  00260A  C1D6  F01A         	movff	main@p+1,strlen@s+1
  2881  00260E  ECA6  F02B         	call	_strlen	;wreg free
  2882  002612  C019  F1D3         	movff	?_strlen,main@p_len
  2883  002616  C01A  F1D4         	movff	?_strlen+1,main@p_len+1
  2884                           
  2885                           ;main.c: 105: LCD_WriteStr(p,p_len);
  2886  00261A  C1D5  F01B         	movff	main@p,LCD_WriteStr@Str
  2887  00261E  C1D6  F01C         	movff	main@p+1,LCD_WriteStr@Str+1
  2888  002622  C1D3  F01D         	movff	main@p_len,LCD_WriteStr@Str_Size
  2889  002626  EC91  F030         	call	_LCD_WriteStr	;wreg free
  2890                           
  2891                           ;main.c: 106: for(i=0;i<500;i++){
  2892  00262A  0E00               	movlw	0
  2893  00262C  0101               	movlb	1	; () banked
  2894  00262E  6FDD               	movwf	(main@i+1)& (0+255),b
  2895  002630  0E00               	movlw	0
  2896  002632  6FDC               	movwf	main@i& (0+255),b
  2897  002634                     l11482:
  2898  002634  FFFF               	dw	65535	; assembler added errata NOP
  2899                           
  2900                           ; BSR set to: 1
  2901  002636  0101               	movlb	1	; () banked
  2902  002638  BFDD               	btfsc	(main@i+1)& (0+255),7,b
  2903  00263A  D008               	goto	l980
  2904  00263C  0EF4               	movlw	244
  2905  00263E  0101               	movlb	1	; () banked
  2906  002640  5DDC               	subwf	main@i& (0+255),w,b
  2907  002642  0E01               	movlw	1
  2908  002644  0101               	movlb	1	; () banked
  2909  002646  59DD               	subwfb	(main@i+1)& (0+255),w,b
  2910  002648  B0D8               	btfsc	status,0,c
  2911  00264A  D010               	goto	u11450
  2912  00264C                     l980:
  2913  00264C  FFFF               	dw	65535	; assembler added errata NOP
  2914                           
  2915                           ; BSR set to: 1
  2916                           ;main.c: 107: _delay((unsigned long)((10)*(10000000/4000.0)));
  2917                           
  2918                           ; BSR set to: 1
  2919  00264E  0E19               	movlw	25
  2920  002650  0100               	movlb	0	; () banked
  2921  002652  6FEC               	movwf	??_main& (0+255),b
  2922  002654  0E5C               	movlw	92
  2923  002656                     u11557:
  2924  002656  FFFF               	dw	65535	; errata NOP
  2925  002658  2EE8               	decfsz	wreg,f,c
  2926  00265A  D7FD               	bra	u11557
  2927  00265C  2FEC               	decfsz	??_main& (0+255),f,b
  2928  00265E  D7FB               	bra	u11557
  2929  002660  D000               	nop2	
  2930  002662  F000               	nop	
  2931  002664  0101               	movlb	1	; () banked
  2932  002666  4BDC               	infsnz	main@i& (0+255),f,b
  2933  002668  2BDD               	incf	(main@i+1)& (0+255),f,b
  2934  00266A  D7E4               	goto	l11482
  2935  00266C                     u11450:
  2936  00266C  FFFF               	dw	65535	; assembler added errata NOP
  2937                           
  2938                           ; BSR set to: 1
  2939                           ;main.c: 108: }
  2940                           ;main.c: 109: LCD_Clear();
  2941                           
  2942                           ; BSR set to: 1
  2943  00266E  ECFA  F01F         	call	_LCD_Clear	;wreg free
  2944                           
  2945                           ;main.c: 111: value.tim_value=46004;
  2946  002672  0EB3               	movlw	179
  2947  002674  0100               	movlb	0	; () banked
  2948  002676  6FFD               	movwf	(_value+1)& (0+255),b
  2949  002678  0EB4               	movlw	180
  2950  00267A  6FFC               	movwf	_value& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 112: Open_Timer0(0b11111111&0b10111111&0b11011111&0b11111111&0b11110111&0b11111
      +                          101 ,1,value.tim_value);
  2954  00267C  0E01               	movlw	1
  2955  00267E  6E19               	movwf	Open_Timer0@IE,c
  2956  002680  C0FC  F01A         	movff	_value,Open_Timer0@value
  2957  002684  C0FD  F01B         	movff	_value+1,Open_Timer0@value+1
  2958  002688  0E95               	movlw	149
  2959  00268A  ECB4  F029         	call	_Open_Timer0
  2960                           
  2961                           ;main.c: 115: code=Get_Variables();
  2962  00268E  ECE5  F039         	call	_Get_Variables	;wreg free
  2963  002692  C01F  F1D1         	movff	?_Get_Variables,main@code
  2964  002696  C020  F1D2         	movff	?_Get_Variables+1,main@code+1
  2965                           
  2966                           ;main.c: 117: if (code != 1234) {
  2967  00269A  0ED2               	movlw	210
  2968  00269C  0101               	movlb	1	; () banked
  2969  00269E  19D1               	xorwf	main@code& (0+255),w,b
  2970  0026A0  E105               	bnz	u11460
  2971  0026A2  0E04               	movlw	4
  2972  0026A4  0101               	movlb	1	; () banked
  2973  0026A6  19D2               	xorwf	(main@code+1)& (0+255),w,b
  2974  0026A8  B4D8               	btfsc	status,2,c
  2975  0026AA  D08A               	goto	l982
  2976  0026AC                     u11460:
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;main.c: 118: set_PID_Kp(1.0);
  2980  0026AC  0E00               	movlw	0
  2981  0026AE  6E19               	movwf	set_PID_Kp@val,c
  2982  0026B0  0E80               	movlw	128
  2983  0026B2  6E1A               	movwf	set_PID_Kp@val+1,c
  2984  0026B4  0E3F               	movlw	63
  2985  0026B6  6E1B               	movwf	set_PID_Kp@val+2,c
  2986  0026B8  EC00  F029         	call	_set_PID_Kp	;wreg free
  2987                           
  2988                           ;main.c: 119: set_PID_Ki(0.0);
  2989  0026BC  0E00               	movlw	0
  2990  0026BE  6E19               	movwf	set_PID_Ki@val,c
  2991  0026C0  0E00               	movlw	0
  2992  0026C2  6E1A               	movwf	set_PID_Ki@val+1,c
  2993  0026C4  0E00               	movlw	0
  2994  0026C6  6E1B               	movwf	set_PID_Ki@val+2,c
  2995  0026C8  EC01  F027         	call	_set_PID_Ki	;wreg free
  2996                           
  2997                           ;main.c: 120: set_PID_Kd(0.0);
  2998  0026CC  0E00               	movlw	0
  2999  0026CE  6E19               	movwf	set_PID_Kd@val,c
  3000  0026D0  0E00               	movlw	0
  3001  0026D2  6E1A               	movwf	set_PID_Kd@val+1,c
  3002  0026D4  0E00               	movlw	0
  3003  0026D6  6E1B               	movwf	set_PID_Kd@val+2,c
  3004  0026D8  ECF8  F026         	call	_set_PID_Kd	;wreg free
  3005                           
  3006                           ;main.c: 121: set_PID_T(0.5);
  3007  0026DC  0E00               	movlw	0
  3008  0026DE  6E19               	movwf	set_PID_T@val,c
  3009  0026E0  0E00               	movlw	0
  3010  0026E2  6E1A               	movwf	set_PID_T@val+1,c
  3011  0026E4  0E3F               	movlw	63
  3012  0026E6  6E1B               	movwf	set_PID_T@val+2,c
  3013  0026E8  EC0A  F027         	call	_set_PID_T	;wreg free
  3014                           
  3015                           ;main.c: 122: set_PID_setpoint(118.0);
  3016  0026EC  0E00               	movlw	0
  3017  0026EE  6E19               	movwf	set_PID_setpoint@val,c
  3018  0026F0  0EEC               	movlw	236
  3019  0026F2  6E1A               	movwf	set_PID_setpoint@val+1,c
  3020  0026F4  0E42               	movlw	66
  3021  0026F6  6E1B               	movwf	set_PID_setpoint@val+2,c
  3022  0026F8  EC13  F027         	call	_set_PID_setpoint	;wreg free
  3023                           
  3024                           ;main.c: 123: set_Deadband(5.0);
  3025  0026FC  0E00               	movlw	0
  3026  0026FE  6E19               	movwf	set_Deadband@val,c
  3027  002700  0EA0               	movlw	160
  3028  002702  6E1A               	movwf	set_Deadband@val+1,c
  3029  002704  0E40               	movlw	64
  3030  002706  6E1B               	movwf	set_Deadband@val+2,c
  3031  002708  ECEF  F026         	call	_set_Deadband	;wreg free
  3032                           
  3033                           ;main.c: 124: Set_LP_RC_constant(0.25);
  3034  00270C  0E00               	movlw	0
  3035  00270E  6E19               	movwf	Set_LP_RC_constant@val,c
  3036  002710  0E80               	movlw	128
  3037  002712  6E1A               	movwf	Set_LP_RC_constant@val+1,c
  3038  002714  0E3E               	movlw	62
  3039  002716  6E1B               	movwf	Set_LP_RC_constant@val+2,c
  3040  002718  ECE6  F026         	call	_Set_LP_RC_constant	;wreg free
  3041                           
  3042                           ;main.c: 125: set_max_VL(130.0);
  3043  00271C  0E00               	movlw	0
  3044  00271E  6E19               	movwf	set_max_VL@val,c
  3045  002720  0E02               	movlw	2
  3046  002722  6E1A               	movwf	set_max_VL@val+1,c
  3047  002724  0E43               	movlw	67
  3048  002726  6E1B               	movwf	set_max_VL@val+2,c
  3049  002728  EC64  F027         	call	_set_max_VL	;wreg free
  3050                           
  3051                           ;main.c: 126: set_min_VL(105.0);
  3052  00272C  0E00               	movlw	0
  3053  00272E  6E19               	movwf	set_min_VL@val,c
  3054  002730  0ED2               	movlw	210
  3055  002732  6E1A               	movwf	set_min_VL@val+1,c
  3056  002734  0E42               	movlw	66
  3057  002736  6E1B               	movwf	set_min_VL@val+2,c
  3058  002738  EC6D  F027         	call	_set_min_VL	;wreg free
  3059                           
  3060                           ;main.c: 127: set_VL1_zero(0.0);
  3061  00273C  0E00               	movlw	0
  3062  00273E  6E19               	movwf	set_VL1_zero@val,c
  3063  002740  0E00               	movlw	0
  3064  002742  6E1A               	movwf	set_VL1_zero@val+1,c
  3065  002744  0E00               	movlw	0
  3066  002746  6E1B               	movwf	set_VL1_zero@val+2,c
  3067  002748  EC25  F027         	call	_set_VL1_zero	;wreg free
  3068                           
  3069                           ;main.c: 128: set_VL2_zero(0.0);
  3070  00274C  0E00               	movlw	0
  3071  00274E  6E19               	movwf	set_VL2_zero@val,c
  3072  002750  0E00               	movlw	0
  3073  002752  6E1A               	movwf	set_VL2_zero@val+1,c
  3074  002754  0E00               	movlw	0
  3075  002756  6E1B               	movwf	set_VL2_zero@val+2,c
  3076  002758  EC37  F027         	call	_set_VL2_zero	;wreg free
  3077                           
  3078                           ;main.c: 129: set_VL3_zero(0.0);
  3079  00275C  0E00               	movlw	0
  3080  00275E  6E19               	movwf	set_VL3_zero@val,c
  3081  002760  0E00               	movlw	0
  3082  002762  6E1A               	movwf	set_VL3_zero@val+1,c
  3083  002764  0E00               	movlw	0
  3084  002766  6E1B               	movwf	set_VL3_zero@val+2,c
  3085  002768  EC49  F027         	call	_set_VL3_zero	;wreg free
  3086                           
  3087                           ;main.c: 130: set_VL1_span(1.0);
  3088  00276C  0E00               	movlw	0
  3089  00276E  6E19               	movwf	set_VL1_span@val,c
  3090  002770  0E80               	movlw	128
  3091  002772  6E1A               	movwf	set_VL1_span@val+1,c
  3092  002774  0E3F               	movlw	63
  3093  002776  6E1B               	movwf	set_VL1_span@val+2,c
  3094  002778  EC1C  F027         	call	_set_VL1_span	;wreg free
  3095                           
  3096                           ;main.c: 131: set_VL2_span(1.0);
  3097  00277C  0E00               	movlw	0
  3098  00277E  6E19               	movwf	set_VL2_span@val,c
  3099  002780  0E80               	movlw	128
  3100  002782  6E1A               	movwf	set_VL2_span@val+1,c
  3101  002784  0E3F               	movlw	63
  3102  002786  6E1B               	movwf	set_VL2_span@val+2,c
  3103  002788  EC2E  F027         	call	_set_VL2_span	;wreg free
  3104                           
  3105                           ;main.c: 132: set_VL3_span(1.0);
  3106  00278C  0E00               	movlw	0
  3107  00278E  6E19               	movwf	set_VL3_span@val,c
  3108  002790  0E80               	movlw	128
  3109  002792  6E1A               	movwf	set_VL3_span@val+1,c
  3110  002794  0E3F               	movlw	63
  3111  002796  6E1B               	movwf	set_VL3_span@val+2,c
  3112  002798  EC40  F027         	call	_set_VL3_span	;wreg free
  3113                           
  3114                           ;main.c: 133: set_Vin_zero(0.0);
  3115  00279C  0E00               	movlw	0
  3116  00279E  6E19               	movwf	set_Vin_zero@val,c
  3117  0027A0  0E00               	movlw	0
  3118  0027A2  6E1A               	movwf	set_Vin_zero@val+1,c
  3119  0027A4  0E00               	movlw	0
  3120  0027A6  6E1B               	movwf	set_Vin_zero@val+2,c
  3121  0027A8  EC5B  F027         	call	_set_Vin_zero	;wreg free
  3122                           
  3123                           ;main.c: 134: set_Vin_span(1.0);
  3124  0027AC  0E00               	movlw	0
  3125  0027AE  6E19               	movwf	set_Vin_span@val,c
  3126  0027B0  0E80               	movlw	128
  3127  0027B2  6E1A               	movwf	set_Vin_span@val+1,c
  3128  0027B4  0E3F               	movlw	63
  3129  0027B6  6E1B               	movwf	set_Vin_span@val+2,c
  3130  0027B8  EC52  F027         	call	_set_Vin_span	;wreg free
  3131                           
  3132                           ;main.c: 135: Save_Variables();
  3133  0027BC  EC7D  F03A         	call	_Save_Variables	;wreg free
  3134  0027C0                     l982:
  3135  0027C0  FFFF               	dw	65535	; assembler added errata NOP
  3136                           
  3137                           ;main.c: 136: }
  3138                           ;main.c: 139: INTCONbits.PEIE=1;
  3139  0027C2  8CF2               	bsf	intcon,6,c	;volatile
  3140                           
  3141                           ;main.c: 140: INTCONbits.GIE=1;
  3142  0027C4  8EF2               	bsf	intcon,7,c	;volatile
  3143  0027C6  FFFF               	dw	65535	; assembler added errata NOP
  3144                           
  3145                           ;main.c: 146: if(RCIE==0){
  3146  0027C8  BA9D               	btfsc	3997,5,c	;volatile
  3147  0027CA  D023               	goto	l989
  3148                           
  3149                           ;main.c: 147: if (rx_flag == 1) {
  3150  0027CC  0100               	movlb	0	; () banked
  3151  0027CE  05F9               	decf	_rx_flag& (0+255),w,b
  3152  0027D0  A4D8               	btfss	status,2,c
  3153  0027D2  D017               	goto	l985
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 148: rx_flag = 3;
  3157  0027D4  0E03               	movlw	3
  3158  0027D6  0100               	movlb	0	; () banked
  3159  0027D8  6FF9               	movwf	_rx_flag& (0+255),b
  3160                           
  3161                           ;main.c: 149: rx_pointer = 0;
  3162  0027DA  0E00               	movlw	0
  3163  0027DC  6E46               	movwf	_rx_pointer,c
  3164  0027DE  FFFF               	dw	65535	; assembler added errata NOP
  3165                           
  3166                           ; BSR set to: 0
  3167  0027E0  B89D               	btfsc	3997,4,c	;volatile
  3168  0027E2  D7FD               	goto	l987
  3169                           
  3170                           ;main.c: 151: read_command(rx_buffer, tx_buffer);
  3171  0027E4  0E95               	movlw	low _rx_buffer
  3172  0027E6  0100               	movlb	0	; () banked
  3173  0027E8  6FE6               	movwf	read_command@rx_buff& (0+255),b
  3174  0027EA  0E01               	movlw	high _rx_buffer
  3175  0027EC  0100               	movlb	0	; () banked
  3176  0027EE  6FE7               	movwf	(read_command@rx_buff+1)& (0+255),b
  3177  0027F0  0E52               	movlw	low _tx_buffer
  3178  0027F2  0100               	movlb	0	; () banked
  3179  0027F4  6FE8               	movwf	read_command@tx_buff& (0+255),b
  3180  0027F6  0E01               	movlw	high _tx_buffer
  3181  0027F8  0100               	movlb	0	; () banked
  3182  0027FA  6FE9               	movwf	(read_command@tx_buff+1)& (0+255),b
  3183  0027FC  ECBD  F03D         	call	_read_command	;wreg free
  3184  002800  D006               	goto	l11520
  3185  002802                     l985:
  3186  002802  FFFF               	dw	65535	; assembler added errata NOP
  3187                           
  3188                           ;main.c: 154: else{
  3189                           ;main.c: 155: rx_flag = 3;
  3190  002804  0E03               	movlw	3
  3191  002806  0100               	movlb	0	; () banked
  3192  002808  6FF9               	movwf	_rx_flag& (0+255),b
  3193                           
  3194                           ;main.c: 156: rx_pointer = 0;
  3195  00280A  0E00               	movlw	0
  3196  00280C  6E46               	movwf	_rx_pointer,c
  3197  00280E                     l11520:
  3198  00280E  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 157: RCIE = 1;
  3202  002810  8A9D               	bsf	3997,5,c	;volatile
  3203  002812                     l989:
  3204  002812  FFFF               	dw	65535	; assembler added errata NOP
  3205                           
  3206                           ;main.c: 158: }
  3207                           ;main.c: 160: }
  3208                           ;main.c: 162: if (Int_Flag == 1) {
  3209                           
  3210                           ; BSR set to: 0
  3211                           
  3212                           ; BSR set to: 0
  3213  002814  0100               	movlb	0	; () banked
  3214  002816  05FA               	decf	_Int_Flag& (0+255),w,b
  3215  002818  A4D8               	btfss	status,2,c
  3216  00281A  D7D5               	goto	l983
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 163: Int_Flag = 0;
  3220  00281C  0E00               	movlw	0
  3221  00281E  0100               	movlb	0	; () banked
  3222  002820  6FFA               	movwf	_Int_Flag& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;main.c: 165: time(&sys_time);
  3226  002822  0ED8               	movlw	low main@sys_time
  3227  002824  0100               	movlb	0	; () banked
  3228  002826  6F8C               	movwf	time@t& (0+255),b
  3229  002828  0E01               	movlw	high main@sys_time
  3230  00282A  0100               	movlb	0	; () banked
  3231  00282C  6F8D               	movwf	(time@t+1)& (0+255),b
  3232  00282E  EC98  F035         	call	_time	;wreg free
  3233                           
  3234                           ;main.c: 168: voltage_status.data=Get_Voltage_Data();
  3235  002832  EC77  F00B         	call	_Get_Voltage_Data	;wreg free
  3236  002836  0101               	movlb	1	; () banked
  3237  002838  6FD7               	movwf	main@voltage_status& (0+255),b
  3238                           
  3239                           ; BSR set to: 1
  3240                           ;main.c: 171: check_V1_status(voltage_status);
  3241  00283A  0101               	movlb	1	; () banked
  3242  00283C  51D7               	movf	main@voltage_status& (0+255),w,b
  3243  00283E  EC3C  F02B         	call	_check_V1_status
  3244                           
  3245                           ;main.c: 172: check_V2_status(voltage_status);
  3246  002842  0101               	movlb	1	; () banked
  3247  002844  51D7               	movf	main@voltage_status& (0+255),w,b
  3248  002846  EC80  F02A         	call	_check_V2_status
  3249                           
  3250                           ;main.c: 173: check_V3_status(voltage_status);
  3251  00284A  0101               	movlb	1	; () banked
  3252  00284C  51D7               	movf	main@voltage_status& (0+255),w,b
  3253  00284E  EC9E  F02A         	call	_check_V3_status
  3254                           
  3255                           ;main.c: 176: Inputs.byte=Rd_Digital_Inputs();
  3256  002852  EC12  F029         	call	_Rd_Digital_Inputs	;wreg free
  3257  002856  0100               	movlb	0	; () banked
  3258  002858  6FFB               	movwf	_Inputs& (0+255),b
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 177: if(!Inputs.B0){
  3262  00285A  0100               	movlb	0	; () banked
  3263  00285C  B1FB               	btfsc	_Inputs& (0+255),0,b
  3264  00285E  D005               	goto	l991
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;main.c: 178: Control_Loop();
  3268  002860  EC2F  F035         	call	_Control_Loop	;wreg free
  3269                           
  3270                           ;main.c: 179: Outputs.led8=1;
  3271  002864  0100               	movlb	0	; () banked
  3272  002866  8FF0               	bsf	(_Outputs+3)& (0+255),7,b
  3273                           
  3274                           ;main.c: 180: } else {
  3275  002868  D005               	goto	l992
  3276  00286A                     l991:
  3277  00286A  FFFF               	dw	65535	; assembler added errata NOP
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 181: Manual_Control();
  3281                           
  3282                           ; BSR set to: 0
  3283  00286C  EC4F  F028         	call	_Manual_Control	;wreg free
  3284                           
  3285                           ;main.c: 182: Outputs.led8=0;
  3286  002870  0100               	movlb	0	; () banked
  3287  002872  9FF0               	bcf	(_Outputs+3)& (0+255),7,b
  3288  002874                     l992:
  3289  002874  FFFF               	dw	65535	; assembler added errata NOP
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;main.c: 183: }
  3293                           ;main.c: 185: if(Inputs.B1){
  3294                           
  3295                           ; BSR set to: 0
  3296  002876  0100               	movlb	0	; () banked
  3297  002878  A3FB               	btfss	_Inputs& (0+255),1,b
  3298  00287A  D014               	goto	l993
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;main.c: 186: set_min(Get_Voltage_Vin());
  3302  00287C  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  3303  002880  C019  F01C         	movff	?_Get_Voltage_Vin,set_min@val
  3304  002884  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_min@val+1
  3305  002888  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_min@val+2
  3306  00288C  EC18  F028         	call	_set_min	;wreg free
  3307                           
  3308                           ;main.c: 187: set_max(Get_Voltage_Vin());
  3309  002890  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  3310  002894  C019  F01C         	movff	?_Get_Voltage_Vin,set_max@val
  3311  002898  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_max@val+1
  3312  00289C  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_max@val+2
  3313  0028A0  EC0F  F028         	call	_set_max	;wreg free
  3314  0028A4                     l993:
  3315  0028A4  FFFF               	dw	65535	; assembler added errata NOP
  3316                           
  3317                           ;main.c: 188: }
  3318                           ;main.c: 189: Display_Data();
  3319  0028A6  EC43  F01C         	call	_Display_Data	;wreg free
  3320                           
  3321                           ;main.c: 190: Outputs.led7 = ~Outputs.led7;
  3322  0028AA  0100               	movlb	0	; () banked
  3323  0028AC  ADF0               	btfss	(_Outputs+3)& (0+255),6,b
  3324  0028AE  D002               	goto	u11530
  3325  0028B0  0E01               	movlw	1
  3326  0028B2  D002               	goto	u11536
  3327  0028B4                     u11530:
  3328  0028B4  FFFF               	dw	65535	; assembler added errata NOP
  3329  0028B6  0E00               	movlw	0
  3330  0028B8                     u11536:
  3331  0028B8  FFFF               	dw	65535	; assembler added errata NOP
  3332  0028BA  0AFF               	xorlw	255
  3333  0028BC  0100               	movlb	0	; () banked
  3334  0028BE  6FEC               	movwf	??_main& (0+255),b
  3335  0028C0  0100               	movlb	0	; () banked
  3336  0028C2  3BEC               	swapf	??_main& (0+255),f,b
  3337  0028C4  47EC               	rlncf	??_main& (0+255),f,b
  3338  0028C6  47EC               	rlncf	??_main& (0+255),f,b
  3339  0028C8  0100               	movlb	0	; () banked
  3340  0028CA  51F0               	movf	(_Outputs+3)& (0+255),w,b
  3341  0028CC  0100               	movlb	0	; () banked
  3342  0028CE  19EC               	xorwf	??_main& (0+255),w,b
  3343  0028D0  0BBF               	andlw	-65
  3344  0028D2  19EC               	xorwf	??_main& (0+255),w,b
  3345  0028D4  0100               	movlb	0	; () banked
  3346  0028D6  6FF0               	movwf	(_Outputs+3)& (0+255),b
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 191: WriteIO5R(Outputs.Output);
  3350  0028D8  C0ED  F019         	movff	_Outputs,WriteIO5R@data
  3351  0028DC  C0EE  F01A         	movff	_Outputs+1,WriteIO5R@data+1
  3352  0028E0  C0EF  F01B         	movff	_Outputs+2,WriteIO5R@data+2
  3353  0028E4  C0F0  F01C         	movff	_Outputs+3,WriteIO5R@data+3
  3354  0028E8  EC4F  F030         	call	_WriteIO5R	;wreg free
  3355  0028EC  D76C               	goto	l983
  3356  0028EE                     __end_of_main:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           intcon	equ	0xFF2
  3363                           postinc0	equ	0xFEE
  3364                           wreg	equ	0xFE8
  3365                           status	equ	0xFD8
  3366                           
  3367 ;; *************** function _strlen *****************
  3368 ;; Defined at:
  3369 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strlen.c"
  3370 ;; Parameters:    Size  Location     Type
  3371 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3372 ;;		 -> STR_71(54), 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;  cp              2   28[COMRAM] PTR const unsigned char 
  3375 ;;		 -> STR_71(54), 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  2   24[COMRAM] unsigned int 
  3378 ;; Registers used:
  3379 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3385 ;;      Params:         2       0       0       0       0       0       0
  3386 ;;      Locals:         2       0       0       0       0       0       0
  3387 ;;      Temps:          2       0       0       0       0       0       0
  3388 ;;      Totals:         6       0       0       0       0       0       0
  3389 ;;Total ram usage:        6 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    1
  3392 ;; This function calls:
  3393 ;;		Nothing
  3394 ;; This function is called by:
  3395 ;;		_main
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text1
  3400  00574C                     __ptext1:
  3401                           	opt stack 0
  3402  00574C                     _strlen:
  3403                           	opt stack 0
  3404  00574C  FFFF               	dw	65535	; assembler added errata NOP
  3405                           
  3406                           ;incstack = 0
  3407  00574E  C019  F01D         	movff	strlen@s,strlen@cp
  3408  005752  C01A  F01E         	movff	strlen@s+1,strlen@cp+1
  3409  005756  D003               	goto	l2064
  3410  005758  FFFF               	dw	65535	; assembler added errata NOP
  3411  00575A  4A1D               	infsnz	strlen@cp,f,c
  3412  00575C  2A1E               	incf	strlen@cp+1,f,c
  3413  00575E                     l2064:
  3414  00575E  FFFF               	dw	65535	; assembler added errata NOP
  3415  005760  C01D  FFF6         	movff	strlen@cp,tblptrl
  3416  005764  C01E  FFF7         	movff	strlen@cp+1,tblptrh
  3417  005768                     	if	0	;tblptru may be non-zero
  3418  005768                     	endif
  3419  005768                     	if	0	;tblptru may be non-zero
  3420  005768                     	endif
  3421  005768  0008               	tblrd		*
  3422  00576A  FFFF               	dw	65535	; errata NOP
  3423  00576C  50F5               	movf	tablat,w,c
  3424  00576E  0900               	iorlw	0
  3425  005770  A4D8               	btfss	status,2,c
  3426  005772  D7F2               	goto	l2065
  3427  005774  C019  F01B         	movff	strlen@s,??_strlen
  3428  005778  C01A  F01C         	movff	strlen@s+1,??_strlen+1
  3429  00577C  1E1B               	comf	??_strlen,f,c
  3430  00577E  1E1C               	comf	??_strlen+1,f,c
  3431  005780  4A1B               	infsnz	??_strlen,f,c
  3432  005782  2A1C               	incf	??_strlen+1,f,c
  3433  005784  501D               	movf	strlen@cp,w,c
  3434  005786  241B               	addwf	??_strlen,w,c
  3435  005788  6E19               	movwf	?_strlen,c
  3436  00578A  501E               	movf	strlen@cp+1,w,c
  3437  00578C  201C               	addwfc	??_strlen+1,w,c
  3438  00578E  6E1A               	movwf	?_strlen+1,c
  3439  005790  0012               	return		;funcret
  3440  005792  FFFF               	dw	65535	; errata NOP
  3441  005794                     __end_of_strlen:
  3442                           	opt stack 0
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           intcon	equ	0xFF2
  3448                           postinc0	equ	0xFEE
  3449                           wreg	equ	0xFE8
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _read_command *****************
  3453 ;; Defined at:
  3454 ;;		line 34 in file "Commands.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  rx_buff         2  134[BANK0 ] PTR unsigned char 
  3457 ;;		 -> rx_buffer(20), 
  3458 ;;  tx_buff         2  136[BANK0 ] PTR unsigned char 
  3459 ;;		 -> tx_buffer(40), 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  ptr             6    4[BANK1 ] PTR unsigned char [3]
  3462 ;;		 -> rx_buffer(20), NULL(0), 
  3463 ;;  i               2    2[BANK1 ] int 
  3464 ;;  sep_tok         2    0[BANK1 ] PTR unsigned char 
  3465 ;;		 -> STR_1(2), 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3475 ;;      Params:         0       4       0       0       0       0       0
  3476 ;;      Locals:         0       0      10       0       0       0       0
  3477 ;;      Temps:          0       2       0       0       0       0       0
  3478 ;;      Totals:         0       6      10       0       0       0       0
  3479 ;;Total ram usage:       16 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    7
  3482 ;; This function calls:
  3483 ;;		_cal_analog
  3484 ;;		_get_list
  3485 ;;		_lcd_display
  3486 ;;		_reset_var
  3487 ;;		_set_list
  3488 ;;		_sprintf
  3489 ;;		_strcmp
  3490 ;;		_strtok
  3491 ;; This function is called by:
  3492 ;;		_main
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text2
  3497  007B7A                     __ptext2:
  3498                           	opt stack 0
  3499  007B7A                     _read_command:
  3500                           	opt stack 0
  3501  007B7A  FFFF               	dw	65535	; assembler added errata NOP
  3502                           
  3503                           ;Commands.c: 36: char * ptr[3];
  3504                           ;Commands.c: 37: char * sep_tok = " ";
  3505                           
  3506                           ;incstack = 0
  3507  007B7C  0EF8               	movlw	low STR_1
  3508  007B7E  0101               	movlb	1	; () banked
  3509  007B80  6FBB               	movwf	read_command@sep_tok& (0+255),b
  3510  007B82  0E7F               	movlw	high STR_1
  3511  007B84  0101               	movlb	1	; () banked
  3512  007B86  6FBC               	movwf	(read_command@sep_tok+1)& (0+255),b
  3513                           
  3514                           ; BSR set to: 1
  3515                           ;Commands.c: 38: int i=0;
  3516  007B88  0E00               	movlw	0
  3517  007B8A  0101               	movlb	1	; () banked
  3518  007B8C  6FBE               	movwf	(read_command@i+1)& (0+255),b
  3519  007B8E  0E00               	movlw	0
  3520  007B90  6FBD               	movwf	read_command@i& (0+255),b
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;Commands.c: 40: buffer=tx_buff;
  3524  007B92  C0E8  F0F6         	movff	read_command@tx_buff,_buffer
  3525  007B96  C0E9  F0F7         	movff	read_command@tx_buff+1,_buffer+1
  3526                           
  3527                           ; BSR set to: 1
  3528                           ;Commands.c: 41: ptr[i] = strtok(rx_buff, sep_tok);
  3529  007B9A  C0E6  F024         	movff	read_command@rx_buff,strtok@s1
  3530  007B9E  C0E7  F025         	movff	read_command@rx_buff+1,strtok@s1+1
  3531  007BA2  C1BB  F026         	movff	read_command@sep_tok,strtok@s2
  3532  007BA6  C1BC  F027         	movff	read_command@sep_tok+1,strtok@s2+1
  3533  007BAA  EC6D  F034         	call	_strtok	;wreg free
  3534  007BAE  D00E               	goto	L1
  3535  007BB0  FFFF               	dw	65535	; assembler added errata NOP
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;Commands.c: 45: ptr[++i] = strtok((0), sep_tok);
  3539                           
  3540                           ; BSR set to: 1
  3541  007BB2  0E00               	movlw	0
  3542  007BB4  6E24               	movwf	strtok@s1,c
  3543  007BB6  0E00               	movlw	0
  3544  007BB8  6E25               	movwf	strtok@s1+1,c
  3545  007BBA  C1BB  F026         	movff	read_command@sep_tok,strtok@s2
  3546  007BBE  C1BC  F027         	movff	read_command@sep_tok+1,strtok@s2+1
  3547  007BC2  EC6D  F034         	call	_strtok	;wreg free
  3548  007BC6  0101               	movlb	1	; () banked
  3549  007BC8  4BBD               	infsnz	read_command@i& (0+255),f,b
  3550  007BCA  2BBE               	incf	(read_command@i+1)& (0+255),f,b
  3551  007BCC                     L1:
  3552  007BCC  FFFF               	dw	65535	; assembler added errata NOP
  3553  007BCE  90D8               	bcf	status,0,c
  3554  007BD0  0101               	movlb	1	; () banked
  3555  007BD2  35BD               	rlcf	read_command@i& (0+255),w,b
  3556  007BD4  6ED9               	movwf	fsr2l,c
  3557  007BD6  0101               	movlb	1	; () banked
  3558  007BD8  35BE               	rlcf	(read_command@i+1)& (0+255),w,b
  3559  007BDA  6EDA               	movwf	fsr2h,c
  3560  007BDC  0EBF               	movlw	low read_command@ptr
  3561  007BDE  26D9               	addwf	fsr2l,f,c
  3562  007BE0  0E01               	movlw	high read_command@ptr
  3563  007BE2  22DA               	addwfc	fsr2h,f,c
  3564  007BE4  C024  FFDE         	movff	?_strtok,postinc2
  3565  007BE8  C025  FFDD         	movff	?_strtok+1,postdec2
  3566                           
  3567                           ; BSR set to: 1
  3568                           
  3569                           ; BSR set to: 1
  3570  007BEC  90D8               	bcf	status,0,c
  3571  007BEE  0101               	movlb	1	; () banked
  3572  007BF0  35BD               	rlcf	read_command@i& (0+255),w,b
  3573  007BF2  6ED9               	movwf	fsr2l,c
  3574  007BF4  0101               	movlb	1	; () banked
  3575  007BF6  35BE               	rlcf	(read_command@i+1)& (0+255),w,b
  3576  007BF8  6EDA               	movwf	fsr2h,c
  3577  007BFA  0EBF               	movlw	low read_command@ptr
  3578  007BFC  26D9               	addwf	fsr2l,f,c
  3579  007BFE  0E01               	movlw	high read_command@ptr
  3580  007C00  22DA               	addwfc	fsr2h,f,c
  3581  007C02  50DE               	movf	postinc2,w,c
  3582  007C04  10DE               	iorwf	postinc2,w,c
  3583  007C06  A4D8               	btfss	status,2,c
  3584  007C08  D7D3               	goto	l114
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;Commands.c: 46: }
  3588                           ;Commands.c: 48: if(strcmp(ptr[0],"reset")==0){
  3589                           
  3590                           ; BSR set to: 1
  3591  007C0A  C1BF  F019         	movff	read_command@ptr,strcmp@s1
  3592  007C0E  C1C0  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3593  007C12  0E8F               	movlw	low STR_2
  3594  007C14  6E1B               	movwf	strcmp@s2,c
  3595  007C16  0E7F               	movlw	high STR_2
  3596  007C18  6E1C               	movwf	strcmp@s2+1,c
  3597  007C1A  EC8C  F02C         	call	_strcmp	;wreg free
  3598  007C1E  5019               	movf	?_strcmp,w,c
  3599  007C20  101A               	iorwf	?_strcmp+1,w,c
  3600  007C22  A4D8               	btfss	status,2,c
  3601  007C24  D007               	goto	l116
  3602                           
  3603                           ;Commands.c: 49: reset_var(ptr[1]);
  3604  007C26  C1C1  F0DC         	movff	read_command@ptr+2,reset_var@var
  3605  007C2A  C1C2  F0DD         	movff	read_command@ptr+3,reset_var@var+1
  3606  007C2E  ECD4  F030         	call	_reset_var	;wreg free
  3607                           
  3608                           ;Commands.c: 50: } else if(strcmp(ptr[0],"set")==0){
  3609  007C32  D074               	goto	l125
  3610  007C34                     l116:
  3611  007C34  FFFF               	dw	65535	; assembler added errata NOP
  3612  007C36  C1BF  F019         	movff	read_command@ptr,strcmp@s1
  3613  007C3A  C1C0  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3614  007C3E  0E91               	movlw	low (STR_2+2)
  3615  007C40  6E1B               	movwf	strcmp@s2,c
  3616  007C42  0E7F               	movlw	high (STR_2+2)
  3617  007C44  6E1C               	movwf	strcmp@s2+1,c
  3618  007C46  EC8C  F02C         	call	_strcmp	;wreg free
  3619  007C4A  5019               	movf	?_strcmp,w,c
  3620  007C4C  101A               	iorwf	?_strcmp+1,w,c
  3621  007C4E  A4D8               	btfss	status,2,c
  3622  007C50  D00B               	goto	l118
  3623                           
  3624                           ;Commands.c: 51: set_list(ptr[1], ptr[2]);
  3625  007C52  C1C1  F0DC         	movff	read_command@ptr+2,set_list@var
  3626  007C56  C1C2  F0DD         	movff	read_command@ptr+3,set_list@var+1
  3627  007C5A  C1C3  F0DE         	movff	read_command@ptr+4,set_list@data
  3628  007C5E  C1C4  F0DF         	movff	read_command@ptr+5,set_list@data+1
  3629  007C62  EC77  F014         	call	_set_list	;wreg free
  3630                           
  3631                           ;Commands.c: 53: } else if(strcmp(ptr[0],"get")==0){
  3632  007C66  D05A               	goto	l125
  3633  007C68                     l118:
  3634  007C68  FFFF               	dw	65535	; assembler added errata NOP
  3635  007C6A  C1BF  F019         	movff	read_command@ptr,strcmp@s1
  3636  007C6E  C1C0  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3637  007C72  0EE1               	movlw	low STR_4
  3638  007C74  6E1B               	movwf	strcmp@s2,c
  3639  007C76  0E7F               	movlw	high STR_4
  3640  007C78  6E1C               	movwf	strcmp@s2+1,c
  3641  007C7A  EC8C  F02C         	call	_strcmp	;wreg free
  3642  007C7E  5019               	movf	?_strcmp,w,c
  3643  007C80  101A               	iorwf	?_strcmp+1,w,c
  3644  007C82  A4D8               	btfss	status,2,c
  3645  007C84  D007               	goto	l120
  3646                           
  3647                           ;Commands.c: 54: get_list(ptr[1]);
  3648  007C86  C1C1  F0DC         	movff	read_command@ptr+2,get_list@var
  3649  007C8A  C1C2  F0DD         	movff	read_command@ptr+3,get_list@var+1
  3650  007C8E  EC73  F008         	call	_get_list	;wreg free
  3651                           
  3652                           ;Commands.c: 56: }
  3653  007C92  D044               	goto	l125
  3654  007C94                     l120:
  3655  007C94  FFFF               	dw	65535	; assembler added errata NOP
  3656                           
  3657                           ;Commands.c: 57: else if(strcmp(ptr[0],"cal")==0){
  3658  007C96  C1BF  F019         	movff	read_command@ptr,strcmp@s1
  3659  007C9A  C1C0  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3660  007C9E  0ED5               	movlw	low STR_5
  3661  007CA0  6E1B               	movwf	strcmp@s2,c
  3662  007CA2  0E7F               	movlw	high STR_5
  3663  007CA4  6E1C               	movwf	strcmp@s2+1,c
  3664  007CA6  EC8C  F02C         	call	_strcmp	;wreg free
  3665  007CAA  5019               	movf	?_strcmp,w,c
  3666  007CAC  101A               	iorwf	?_strcmp+1,w,c
  3667  007CAE  A4D8               	btfss	status,2,c
  3668  007CB0  D00B               	goto	l122
  3669                           
  3670                           ;Commands.c: 58: cal_analog(ptr[1],ptr[2]);
  3671  007CB2  C1C1  F0DC         	movff	read_command@ptr+2,cal_analog@var
  3672  007CB6  C1C2  F0DD         	movff	read_command@ptr+3,cal_analog@var+1
  3673  007CBA  C1C3  F0DE         	movff	read_command@ptr+4,cal_analog@data
  3674  007CBE  C1C4  F0DF         	movff	read_command@ptr+5,cal_analog@data+1
  3675  007CC2  EC4E  F017         	call	_cal_analog	;wreg free
  3676                           
  3677                           ;Commands.c: 59: }
  3678  007CC6  D02A               	goto	l125
  3679  007CC8                     l122:
  3680  007CC8  FFFF               	dw	65535	; assembler added errata NOP
  3681                           
  3682                           ;Commands.c: 60: else if(strcmp(ptr[0],"lcd")==0){
  3683  007CCA  C1BF  F019         	movff	read_command@ptr,strcmp@s1
  3684  007CCE  C1C0  F01A         	movff	read_command@ptr+1,strcmp@s1+1
  3685  007CD2  0ED1               	movlw	low STR_6
  3686  007CD4  6E1B               	movwf	strcmp@s2,c
  3687  007CD6  0E7F               	movlw	high STR_6
  3688  007CD8  6E1C               	movwf	strcmp@s2+1,c
  3689  007CDA  EC8C  F02C         	call	_strcmp	;wreg free
  3690  007CDE  5019               	movf	?_strcmp,w,c
  3691  007CE0  101A               	iorwf	?_strcmp+1,w,c
  3692  007CE2  A4D8               	btfss	status,2,c
  3693  007CE4  D00B               	goto	l124
  3694                           
  3695                           ;Commands.c: 61: lcd_display(ptr[1],ptr[2]);
  3696  007CE6  C1C1  F065         	movff	read_command@ptr+2,lcd_display@var
  3697  007CEA  C1C2  F066         	movff	read_command@ptr+3,lcd_display@var+1
  3698  007CEE  C1C3  F067         	movff	read_command@ptr+4,lcd_display@data
  3699  007CF2  C1C4  F068         	movff	read_command@ptr+5,lcd_display@data+1
  3700  007CF6  EC4F  F02F         	call	_lcd_display	;wreg free
  3701                           
  3702                           ;Commands.c: 62: }
  3703  007CFA  D010               	goto	l125
  3704  007CFC                     l124:
  3705  007CFC  FFFF               	dw	65535	; assembler added errata NOP
  3706                           
  3707                           ;Commands.c: 63: else {
  3708                           ;Commands.c: 64: sprintf(buffer,"Comando invalido\n");
  3709  007CFE  C0F6  F0C4         	movff	_buffer,sprintf@wh
  3710  007D02  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  3711  007D06  0EE9               	movlw	low STR_7
  3712  007D08  0100               	movlb	0	; () banked
  3713  007D0A  6FC6               	movwf	sprintf@f& (0+255),b
  3714  007D0C  0E7E               	movlw	high STR_7
  3715  007D0E  0100               	movlb	0	; () banked
  3716  007D10  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  3717  007D12  EC8D  F02F         	call	_sprintf	;wreg free
  3718                           
  3719                           ;Commands.c: 65: rx_pointer=0;
  3720  007D16  0E00               	movlw	0
  3721  007D18  6E46               	movwf	_rx_pointer,c
  3722                           
  3723                           ;Commands.c: 66: TXIE=1;
  3724  007D1A  889D               	bsf	3997,4,c	;volatile
  3725  007D1C                     l125:
  3726  007D1C  FFFF               	dw	65535	; assembler added errata NOP
  3727  007D1E  0012               	return		;funcret
  3728  007D20  FFFF               	dw	65535	; errata NOP
  3729  007D22                     __end_of_read_command:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _set_list *****************
  3745 ;; Defined at:
  3746 ;;		line 143 in file "Commands.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  var             2  124[BANK0 ] PTR unsigned char 
  3749 ;;		 -> rx_buffer(20), NULL(0), 
  3750 ;;  data            2  126[BANK0 ] PTR unsigned char 
  3751 ;;		 -> rx_buffer(20), NULL(0), 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  val             3  128[BANK0 ] PTR unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3763 ;;      Params:         0       4       0       0       0       0       0
  3764 ;;      Locals:         0       3       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0
  3766 ;;      Totals:         0       7       0       0       0       0       0
  3767 ;;Total ram usage:        7 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    6
  3770 ;; This function calls:
  3771 ;;		_Save_Variables
  3772 ;;		_Set_LP_RC_constant
  3773 ;;		_atof
  3774 ;;		_date_set
  3775 ;;		_set_Deadband
  3776 ;;		_set_PID_Kd
  3777 ;;		_set_PID_Ki
  3778 ;;		_set_PID_Kp
  3779 ;;		_set_PID_T
  3780 ;;		_set_PID_setpoint
  3781 ;;		_set_max_VL
  3782 ;;		_set_min_VL
  3783 ;;		_sprintf
  3784 ;;		_strcmp
  3785 ;;		_time_set
  3786 ;; This function is called by:
  3787 ;;		_read_command
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text3
  3792  0028EE                     __ptext3:
  3793                           	opt stack 0
  3794  0028EE                     _set_list:
  3795                           	opt stack 0
  3796  0028EE  FFFF               	dw	65535	; assembler added errata NOP
  3797                           
  3798                           ;Commands.c: 145: double val;
  3799                           ;Commands.c: 147: if(strcmp(var,"kp")==0){
  3800                           
  3801                           ;incstack = 0
  3802  0028F0  C0DC  F019         	movff	set_list@var,strcmp@s1
  3803  0028F4  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3804  0028F8  0EF5               	movlw	low STR_22
  3805  0028FA  6E1B               	movwf	strcmp@s2,c
  3806  0028FC  0E7F               	movlw	high STR_22
  3807  0028FE  6E1C               	movwf	strcmp@s2+1,c
  3808  002900  EC8C  F02C         	call	_strcmp	;wreg free
  3809  002904  5019               	movf	?_strcmp,w,c
  3810  002906  101A               	iorwf	?_strcmp+1,w,c
  3811  002908  A4D8               	btfss	status,2,c
  3812  00290A  D017               	goto	l161
  3813                           
  3814                           ;Commands.c: 148: val=atof(data);
  3815  00290C  C0DE  F093         	movff	set_list@data,atof@s
  3816  002910  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3817  002914  EC89  F029         	call	_atof	;wreg free
  3818  002918  C093  F0E0         	movff	?_atof,set_list@val
  3819  00291C  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3820  002920  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3821                           
  3822                           ;Commands.c: 149: set_PID_Kp((float)val);
  3823  002924  C0E0  F019         	movff	set_list@val,set_PID_Kp@val
  3824  002928  C0E1  F01A         	movff	set_list@val+1,set_PID_Kp@val+1
  3825  00292C  C0E2  F01B         	movff	set_list@val+2,set_PID_Kp@val+2
  3826  002930  EC00  F029         	call	_set_PID_Kp	;wreg free
  3827                           
  3828                           ;Commands.c: 150: Save_Variables();
  3829  002934  EC7D  F03A         	call	_Save_Variables	;wreg free
  3830                           
  3831                           ;Commands.c: 151: }
  3832  002938  D16A               	goto	l182
  3833  00293A                     l161:
  3834  00293A  FFFF               	dw	65535	; assembler added errata NOP
  3835                           
  3836                           ;Commands.c: 152: else if(strcmp(var,"ti")==0){
  3837  00293C  C0DC  F019         	movff	set_list@var,strcmp@s1
  3838  002940  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3839  002944  0EF2               	movlw	low STR_23
  3840  002946  6E1B               	movwf	strcmp@s2,c
  3841  002948  0E7F               	movlw	high STR_23
  3842  00294A  6E1C               	movwf	strcmp@s2+1,c
  3843  00294C  EC8C  F02C         	call	_strcmp	;wreg free
  3844  002950  5019               	movf	?_strcmp,w,c
  3845  002952  101A               	iorwf	?_strcmp+1,w,c
  3846  002954  A4D8               	btfss	status,2,c
  3847  002956  D017               	goto	l163
  3848                           
  3849                           ;Commands.c: 153: val=atof(data);
  3850  002958  C0DE  F093         	movff	set_list@data,atof@s
  3851  00295C  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3852  002960  EC89  F029         	call	_atof	;wreg free
  3853  002964  C093  F0E0         	movff	?_atof,set_list@val
  3854  002968  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3855  00296C  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3856                           
  3857                           ;Commands.c: 154: set_PID_Ki(val);
  3858  002970  C0E0  F019         	movff	set_list@val,set_PID_Ki@val
  3859  002974  C0E1  F01A         	movff	set_list@val+1,set_PID_Ki@val+1
  3860  002978  C0E2  F01B         	movff	set_list@val+2,set_PID_Ki@val+2
  3861  00297C  EC01  F027         	call	_set_PID_Ki	;wreg free
  3862                           
  3863                           ;Commands.c: 155: Save_Variables();
  3864  002980  EC7D  F03A         	call	_Save_Variables	;wreg free
  3865                           
  3866                           ;Commands.c: 156: }
  3867  002984  D144               	goto	l182
  3868  002986                     l163:
  3869  002986  FFFF               	dw	65535	; assembler added errata NOP
  3870                           
  3871                           ;Commands.c: 157: else if(strcmp(var,"td")==0){
  3872  002988  C0DC  F019         	movff	set_list@var,strcmp@s1
  3873  00298C  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3874  002990  0EEF               	movlw	low STR_24
  3875  002992  6E1B               	movwf	strcmp@s2,c
  3876  002994  0E7F               	movlw	high STR_24
  3877  002996  6E1C               	movwf	strcmp@s2+1,c
  3878  002998  EC8C  F02C         	call	_strcmp	;wreg free
  3879  00299C  5019               	movf	?_strcmp,w,c
  3880  00299E  101A               	iorwf	?_strcmp+1,w,c
  3881  0029A0  A4D8               	btfss	status,2,c
  3882  0029A2  D017               	goto	l165
  3883                           
  3884                           ;Commands.c: 158: val=atof(data);
  3885  0029A4  C0DE  F093         	movff	set_list@data,atof@s
  3886  0029A8  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3887  0029AC  EC89  F029         	call	_atof	;wreg free
  3888  0029B0  C093  F0E0         	movff	?_atof,set_list@val
  3889  0029B4  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3890  0029B8  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3891                           
  3892                           ;Commands.c: 159: set_PID_Kd(val);
  3893  0029BC  C0E0  F019         	movff	set_list@val,set_PID_Kd@val
  3894  0029C0  C0E1  F01A         	movff	set_list@val+1,set_PID_Kd@val+1
  3895  0029C4  C0E2  F01B         	movff	set_list@val+2,set_PID_Kd@val+2
  3896  0029C8  ECF8  F026         	call	_set_PID_Kd	;wreg free
  3897                           
  3898                           ;Commands.c: 160: Save_Variables();
  3899  0029CC  EC7D  F03A         	call	_Save_Variables	;wreg free
  3900                           
  3901                           ;Commands.c: 161: }
  3902  0029D0  D11E               	goto	l182
  3903  0029D2                     l165:
  3904  0029D2  FFFF               	dw	65535	; assembler added errata NOP
  3905                           
  3906                           ;Commands.c: 162: else if(strcmp(var,"sample_time")==0){
  3907  0029D4  C0DC  F019         	movff	set_list@var,strcmp@s1
  3908  0029D8  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3909  0029DC  0E0C               	movlw	low STR_25
  3910  0029DE  6E1B               	movwf	strcmp@s2,c
  3911  0029E0  0E7F               	movlw	high STR_25
  3912  0029E2  6E1C               	movwf	strcmp@s2+1,c
  3913  0029E4  EC8C  F02C         	call	_strcmp	;wreg free
  3914  0029E8  5019               	movf	?_strcmp,w,c
  3915  0029EA  101A               	iorwf	?_strcmp+1,w,c
  3916  0029EC  A4D8               	btfss	status,2,c
  3917  0029EE  D017               	goto	l167
  3918                           
  3919                           ;Commands.c: 163: val=atof(data);
  3920  0029F0  C0DE  F093         	movff	set_list@data,atof@s
  3921  0029F4  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3922  0029F8  EC89  F029         	call	_atof	;wreg free
  3923  0029FC  C093  F0E0         	movff	?_atof,set_list@val
  3924  002A00  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3925  002A04  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3926                           
  3927                           ;Commands.c: 164: set_PID_T(val);
  3928  002A08  C0E0  F019         	movff	set_list@val,set_PID_T@val
  3929  002A0C  C0E1  F01A         	movff	set_list@val+1,set_PID_T@val+1
  3930  002A10  C0E2  F01B         	movff	set_list@val+2,set_PID_T@val+2
  3931  002A14  EC0A  F027         	call	_set_PID_T	;wreg free
  3932                           
  3933                           ;Commands.c: 165: Save_Variables();
  3934  002A18  EC7D  F03A         	call	_Save_Variables	;wreg free
  3935                           
  3936                           ;Commands.c: 166: }
  3937  002A1C  D0F8               	goto	l182
  3938  002A1E                     l167:
  3939  002A1E  FFFF               	dw	65535	; assembler added errata NOP
  3940                           
  3941                           ;Commands.c: 167: else if(strcmp(var,"setpoint")==0){
  3942  002A20  C0DC  F019         	movff	set_list@var,strcmp@s1
  3943  002A24  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3944  002A28  0E48               	movlw	low STR_26
  3945  002A2A  6E1B               	movwf	strcmp@s2,c
  3946  002A2C  0E7F               	movlw	high STR_26
  3947  002A2E  6E1C               	movwf	strcmp@s2+1,c
  3948  002A30  EC8C  F02C         	call	_strcmp	;wreg free
  3949  002A34  5019               	movf	?_strcmp,w,c
  3950  002A36  101A               	iorwf	?_strcmp+1,w,c
  3951  002A38  A4D8               	btfss	status,2,c
  3952  002A3A  D017               	goto	l169
  3953                           
  3954                           ;Commands.c: 168: val=atof(data);
  3955  002A3C  C0DE  F093         	movff	set_list@data,atof@s
  3956  002A40  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3957  002A44  EC89  F029         	call	_atof	;wreg free
  3958  002A48  C093  F0E0         	movff	?_atof,set_list@val
  3959  002A4C  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3960  002A50  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3961                           
  3962                           ;Commands.c: 169: set_PID_setpoint(val);
  3963  002A54  C0E0  F019         	movff	set_list@val,set_PID_setpoint@val
  3964  002A58  C0E1  F01A         	movff	set_list@val+1,set_PID_setpoint@val+1
  3965  002A5C  C0E2  F01B         	movff	set_list@val+2,set_PID_setpoint@val+2
  3966  002A60  EC13  F027         	call	_set_PID_setpoint	;wreg free
  3967                           
  3968                           ;Commands.c: 170: Save_Variables();
  3969  002A64  EC7D  F03A         	call	_Save_Variables	;wreg free
  3970                           
  3971                           ;Commands.c: 171: }
  3972  002A68  D0D2               	goto	l182
  3973  002A6A                     l169:
  3974  002A6A  FFFF               	dw	65535	; assembler added errata NOP
  3975                           
  3976                           ;Commands.c: 172: else if(strcmp(var,"deadband")==0){
  3977  002A6C  C0DC  F019         	movff	set_list@var,strcmp@s1
  3978  002A70  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  3979  002A74  0E36               	movlw	low STR_27
  3980  002A76  6E1B               	movwf	strcmp@s2,c
  3981  002A78  0E7F               	movlw	high STR_27
  3982  002A7A  6E1C               	movwf	strcmp@s2+1,c
  3983  002A7C  EC8C  F02C         	call	_strcmp	;wreg free
  3984  002A80  5019               	movf	?_strcmp,w,c
  3985  002A82  101A               	iorwf	?_strcmp+1,w,c
  3986  002A84  A4D8               	btfss	status,2,c
  3987  002A86  D017               	goto	l171
  3988                           
  3989                           ;Commands.c: 173: val=atof(data);
  3990  002A88  C0DE  F093         	movff	set_list@data,atof@s
  3991  002A8C  C0DF  F094         	movff	set_list@data+1,atof@s+1
  3992  002A90  EC89  F029         	call	_atof	;wreg free
  3993  002A94  C093  F0E0         	movff	?_atof,set_list@val
  3994  002A98  C094  F0E1         	movff	?_atof+1,set_list@val+1
  3995  002A9C  C095  F0E2         	movff	?_atof+2,set_list@val+2
  3996                           
  3997                           ;Commands.c: 174: set_Deadband(val);
  3998  002AA0  C0E0  F019         	movff	set_list@val,set_Deadband@val
  3999  002AA4  C0E1  F01A         	movff	set_list@val+1,set_Deadband@val+1
  4000  002AA8  C0E2  F01B         	movff	set_list@val+2,set_Deadband@val+2
  4001  002AAC  ECEF  F026         	call	_set_Deadband	;wreg free
  4002                           
  4003                           ;Commands.c: 175: Save_Variables();
  4004  002AB0  EC7D  F03A         	call	_Save_Variables	;wreg free
  4005                           
  4006                           ;Commands.c: 176: }
  4007  002AB4  D0AC               	goto	l182
  4008  002AB6                     l171:
  4009  002AB6  FFFF               	dw	65535	; assembler added errata NOP
  4010                           
  4011                           ;Commands.c: 177: else if(strcmp(var,"rc")==0){
  4012  002AB8  C0DC  F019         	movff	set_list@var,strcmp@s1
  4013  002ABC  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  4014  002AC0  0EE9               	movlw	low STR_28
  4015  002AC2  6E1B               	movwf	strcmp@s2,c
  4016  002AC4  0E7F               	movlw	high STR_28
  4017  002AC6  6E1C               	movwf	strcmp@s2+1,c
  4018  002AC8  EC8C  F02C         	call	_strcmp	;wreg free
  4019  002ACC  5019               	movf	?_strcmp,w,c
  4020  002ACE  101A               	iorwf	?_strcmp+1,w,c
  4021  002AD0  A4D8               	btfss	status,2,c
  4022  002AD2  D017               	goto	l173
  4023                           
  4024                           ;Commands.c: 178: val=atof(data);
  4025  002AD4  C0DE  F093         	movff	set_list@data,atof@s
  4026  002AD8  C0DF  F094         	movff	set_list@data+1,atof@s+1
  4027  002ADC  EC89  F029         	call	_atof	;wreg free
  4028  002AE0  C093  F0E0         	movff	?_atof,set_list@val
  4029  002AE4  C094  F0E1         	movff	?_atof+1,set_list@val+1
  4030  002AE8  C095  F0E2         	movff	?_atof+2,set_list@val+2
  4031                           
  4032                           ;Commands.c: 179: Set_LP_RC_constant(val);
  4033  002AEC  C0E0  F019         	movff	set_list@val,Set_LP_RC_constant@val
  4034  002AF0  C0E1  F01A         	movff	set_list@val+1,Set_LP_RC_constant@val+1
  4035  002AF4  C0E2  F01B         	movff	set_list@val+2,Set_LP_RC_constant@val+2
  4036  002AF8  ECE6  F026         	call	_Set_LP_RC_constant	;wreg free
  4037                           
  4038                           ;Commands.c: 180: Save_Variables();
  4039  002AFC  EC7D  F03A         	call	_Save_Variables	;wreg free
  4040                           
  4041                           ;Commands.c: 181: }
  4042  002B00  D086               	goto	l182
  4043  002B02                     l173:
  4044  002B02  FFFF               	dw	65535	; assembler added errata NOP
  4045                           
  4046                           ;Commands.c: 182: else if(strcmp(var,"max")==0){
  4047  002B04  C0DC  F019         	movff	set_list@var,strcmp@s1
  4048  002B08  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  4049  002B0C  0EE5               	movlw	low STR_10
  4050  002B0E  6E1B               	movwf	strcmp@s2,c
  4051  002B10  0E7F               	movlw	high STR_10
  4052  002B12  6E1C               	movwf	strcmp@s2+1,c
  4053  002B14  EC8C  F02C         	call	_strcmp	;wreg free
  4054  002B18  5019               	movf	?_strcmp,w,c
  4055  002B1A  101A               	iorwf	?_strcmp+1,w,c
  4056  002B1C  A4D8               	btfss	status,2,c
  4057  002B1E  D017               	goto	l175
  4058                           
  4059                           ;Commands.c: 183: val=atof(data);
  4060  002B20  C0DE  F093         	movff	set_list@data,atof@s
  4061  002B24  C0DF  F094         	movff	set_list@data+1,atof@s+1
  4062  002B28  EC89  F029         	call	_atof	;wreg free
  4063  002B2C  C093  F0E0         	movff	?_atof,set_list@val
  4064  002B30  C094  F0E1         	movff	?_atof+1,set_list@val+1
  4065  002B34  C095  F0E2         	movff	?_atof+2,set_list@val+2
  4066                           
  4067                           ;Commands.c: 184: set_max_VL(val);
  4068  002B38  C0E0  F019         	movff	set_list@val,set_max_VL@val
  4069  002B3C  C0E1  F01A         	movff	set_list@val+1,set_max_VL@val+1
  4070  002B40  C0E2  F01B         	movff	set_list@val+2,set_max_VL@val+2
  4071  002B44  EC64  F027         	call	_set_max_VL	;wreg free
  4072                           
  4073                           ;Commands.c: 185: Save_Variables();
  4074  002B48  EC7D  F03A         	call	_Save_Variables	;wreg free
  4075                           
  4076                           ;Commands.c: 186: }
  4077  002B4C  D060               	goto	l182
  4078  002B4E                     l175:
  4079  002B4E  FFFF               	dw	65535	; assembler added errata NOP
  4080                           
  4081                           ;Commands.c: 187: else if(strcmp(var,"min")==0){
  4082  002B50  C0DC  F019         	movff	set_list@var,strcmp@s1
  4083  002B54  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  4084  002B58  0ED9               	movlw	low STR_11
  4085  002B5A  6E1B               	movwf	strcmp@s2,c
  4086  002B5C  0E7F               	movlw	high STR_11
  4087  002B5E  6E1C               	movwf	strcmp@s2+1,c
  4088  002B60  EC8C  F02C         	call	_strcmp	;wreg free
  4089  002B64  5019               	movf	?_strcmp,w,c
  4090  002B66  101A               	iorwf	?_strcmp+1,w,c
  4091  002B68  A4D8               	btfss	status,2,c
  4092  002B6A  D017               	goto	l177
  4093                           
  4094                           ;Commands.c: 188: val=atof(data);
  4095  002B6C  C0DE  F093         	movff	set_list@data,atof@s
  4096  002B70  C0DF  F094         	movff	set_list@data+1,atof@s+1
  4097  002B74  EC89  F029         	call	_atof	;wreg free
  4098  002B78  C093  F0E0         	movff	?_atof,set_list@val
  4099  002B7C  C094  F0E1         	movff	?_atof+1,set_list@val+1
  4100  002B80  C095  F0E2         	movff	?_atof+2,set_list@val+2
  4101                           
  4102                           ;Commands.c: 189: set_min_VL(val);
  4103  002B84  C0E0  F019         	movff	set_list@val,set_min_VL@val
  4104  002B88  C0E1  F01A         	movff	set_list@val+1,set_min_VL@val+1
  4105  002B8C  C0E2  F01B         	movff	set_list@val+2,set_min_VL@val+2
  4106  002B90  EC6D  F027         	call	_set_min_VL	;wreg free
  4107                           
  4108                           ;Commands.c: 190: Save_Variables();
  4109  002B94  EC7D  F03A         	call	_Save_Variables	;wreg free
  4110                           
  4111                           ;Commands.c: 191: }
  4112  002B98  D03A               	goto	l182
  4113  002B9A                     l177:
  4114  002B9A  FFFF               	dw	65535	; assembler added errata NOP
  4115                           
  4116                           ;Commands.c: 192: else if(strcmp(var,"time")==0){
  4117  002B9C  C0DC  F019         	movff	set_list@var,strcmp@s1
  4118  002BA0  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  4119  002BA4  0E13               	movlw	low (STR_25+7)
  4120  002BA6  6E1B               	movwf	strcmp@s2,c
  4121  002BA8  0E7F               	movlw	high (STR_25+7)
  4122  002BAA  6E1C               	movwf	strcmp@s2+1,c
  4123  002BAC  EC8C  F02C         	call	_strcmp	;wreg free
  4124  002BB0  5019               	movf	?_strcmp,w,c
  4125  002BB2  101A               	iorwf	?_strcmp+1,w,c
  4126  002BB4  A4D8               	btfss	status,2,c
  4127  002BB6  D007               	goto	l179
  4128                           
  4129                           ;Commands.c: 193: time_set(data);
  4130  002BB8  C0DE  F06B         	movff	set_list@data,time_set@tim
  4131  002BBC  C0DF  F06C         	movff	set_list@data+1,time_set@tim+1
  4132  002BC0  EC5B  F037         	call	_time_set	;wreg free
  4133                           
  4134                           ;Commands.c: 194: }
  4135  002BC4  D024               	goto	l182
  4136  002BC6                     l179:
  4137  002BC6  FFFF               	dw	65535	; assembler added errata NOP
  4138                           
  4139                           ;Commands.c: 195: else if(strcmp(var,"date")==0){
  4140  002BC8  C0DC  F019         	movff	set_list@var,strcmp@s1
  4141  002BCC  C0DD  F01A         	movff	set_list@var+1,strcmp@s1+1
  4142  002BD0  0EA5               	movlw	low STR_32
  4143  002BD2  6E1B               	movwf	strcmp@s2,c
  4144  002BD4  0E7F               	movlw	high STR_32
  4145  002BD6  6E1C               	movwf	strcmp@s2+1,c
  4146  002BD8  EC8C  F02C         	call	_strcmp	;wreg free
  4147  002BDC  5019               	movf	?_strcmp,w,c
  4148  002BDE  101A               	iorwf	?_strcmp+1,w,c
  4149  002BE0  A4D8               	btfss	status,2,c
  4150  002BE2  D007               	goto	l181
  4151                           
  4152                           ;Commands.c: 196: date_set(data);
  4153  002BE4  C0DE  F06B         	movff	set_list@data,date_set@dat
  4154  002BE8  C0DF  F06C         	movff	set_list@data+1,date_set@dat+1
  4155  002BEC  EC01  F03D         	call	_date_set	;wreg free
  4156                           
  4157                           ;Commands.c: 197: }
  4158  002BF0  D00E               	goto	l182
  4159  002BF2                     l181:
  4160  002BF2  FFFF               	dw	65535	; assembler added errata NOP
  4161                           
  4162                           ;Commands.c: 199: else{
  4163                           ;Commands.c: 200: sprintf(buffer,"Parametro errado");
  4164  002BF4  C0F6  F0C4         	movff	_buffer,sprintf@wh
  4165  002BF8  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  4166  002BFC  0EFB               	movlw	low STR_21
  4167  002BFE  0100               	movlb	0	; () banked
  4168  002C00  6FC6               	movwf	sprintf@f& (0+255),b
  4169  002C02  0E7E               	movlw	high STR_21
  4170  002C04  0100               	movlb	0	; () banked
  4171  002C06  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  4172  002C08  EC8D  F02F         	call	_sprintf	;wreg free
  4173                           
  4174                           ;Commands.c: 201: TXIE=1;
  4175  002C0C  889D               	bsf	3997,4,c	;volatile
  4176  002C0E                     l182:
  4177  002C0E  FFFF               	dw	65535	; assembler added errata NOP
  4178  002C10  0012               	return		;funcret
  4179  002C12  FFFF               	dw	65535	; errata NOP
  4180  002C14                     __end_of_set_list:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           intcon	equ	0xFF2
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function _time_set *****************
  4196 ;; Defined at:
  4197 ;;		line 328 in file "Commands.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  tim             2   11[BANK0 ] PTR unsigned char 
  4200 ;;		 -> rx_buffer(20), NULL(0), 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  ptr             6   21[BANK0 ] PTR unsigned char [3]
  4203 ;;		 -> rx_buffer(20), NULL(0), 
  4204 ;;  data            6   15[BANK0 ] int [3]
  4205 ;;  hour            3   29[BANK0 ] struct Time_Data
  4206 ;;  i               2   32[BANK0 ] int 
  4207 ;;  sep_tok         2   27[BANK0 ] PTR unsigned char 
  4208 ;;		 -> STR_70(2), 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4218 ;;      Params:         0       2       0       0       0       0       0
  4219 ;;      Locals:         0      19       0       0       0       0       0
  4220 ;;      Temps:          0       2       0       0       0       0       0
  4221 ;;      Totals:         0      23       0       0       0       0       0
  4222 ;;Total ram usage:       23 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    4
  4225 ;; This function calls:
  4226 ;;		_atoi
  4227 ;;		_intTObcd
  4228 ;;		_set_time
  4229 ;;		_strtok
  4230 ;; This function is called by:
  4231 ;;		_set_list
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text4
  4236  006EB6                     __ptext4:
  4237                           	opt stack 0
  4238  006EB6                     _time_set:
  4239                           	opt stack 0
  4240  006EB6  FFFF               	dw	65535	; assembler added errata NOP
  4241                           
  4242                           ;Commands.c: 329: char * ptr[3];
  4243                           ;Commands.c: 330: char * sep_tok = ":";
  4244                           
  4245                           ;incstack = 0
  4246  006EB8  0EFC               	movlw	low STR_70
  4247  006EBA  0100               	movlb	0	; () banked
  4248  006EBC  6F7B               	movwf	time_set@sep_tok& (0+255),b
  4249  006EBE  0E7F               	movlw	high STR_70
  4250  006EC0  0100               	movlb	0	; () banked
  4251  006EC2  6F7C               	movwf	(time_set@sep_tok+1)& (0+255),b
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;Commands.c: 331: int i=0;
  4255  006EC4  0E00               	movlw	0
  4256  006EC6  0100               	movlb	0	; () banked
  4257  006EC8  6F81               	movwf	(time_set@i+1)& (0+255),b
  4258  006ECA  0E00               	movlw	0
  4259  006ECC  6F80               	movwf	time_set@i& (0+255),b
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;Commands.c: 332: int data[3];
  4263                           ;Commands.c: 333: struct Time_Data hour;
  4264                           ;Commands.c: 335: ptr[i] = strtok(tim, sep_tok);
  4265  006ECE  C06B  F024         	movff	time_set@tim,strtok@s1
  4266  006ED2  C06C  F025         	movff	time_set@tim+1,strtok@s1+1
  4267  006ED6  C07B  F026         	movff	time_set@sep_tok,strtok@s2
  4268  006EDA  C07C  F027         	movff	time_set@sep_tok+1,strtok@s2+1
  4269  006EDE  EC6D  F034         	call	_strtok	;wreg free
  4270  006EE2  D036               	goto	L2
  4271  006EE4  FFFF               	dw	65535	; assembler added errata NOP
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;Commands.c: 338: data[i]=intTObcd((int)atoi(ptr[i]));
  4275                           
  4276                           ; BSR set to: 0
  4277  006EE6  90D8               	bcf	status,0,c
  4278  006EE8  0100               	movlb	0	; () banked
  4279  006EEA  3580               	rlcf	time_set@i& (0+255),w,b
  4280  006EEC  6ED9               	movwf	fsr2l,c
  4281  006EEE  0100               	movlb	0	; () banked
  4282  006EF0  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4283  006EF2  6EDA               	movwf	fsr2h,c
  4284  006EF4  0E75               	movlw	low time_set@ptr
  4285  006EF6  26D9               	addwf	fsr2l,f,c
  4286  006EF8  0E00               	movlw	high time_set@ptr
  4287  006EFA  22DA               	addwfc	fsr2h,f,c
  4288  006EFC  CFDE F02D          	movff	postinc2,atoi@s
  4289  006F00  CFDD F02E          	movff	postdec2,atoi@s+1
  4290  006F04  EC50  F038         	call	_atoi	;wreg free
  4291  006F08  C02D  F065         	movff	?_atoi,intTObcd@v
  4292  006F0C  C02E  F066         	movff	?_atoi+1,intTObcd@v+1
  4293  006F10  EC44  F032         	call	_intTObcd	;wreg free
  4294  006F14  90D8               	bcf	status,0,c
  4295  006F16  0100               	movlb	0	; () banked
  4296  006F18  3580               	rlcf	time_set@i& (0+255),w,b
  4297  006F1A  6ED9               	movwf	fsr2l,c
  4298  006F1C  0100               	movlb	0	; () banked
  4299  006F1E  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4300  006F20  6EDA               	movwf	fsr2h,c
  4301  006F22  0E6F               	movlw	low time_set@data
  4302  006F24  26D9               	addwf	fsr2l,f,c
  4303  006F26  0E00               	movlw	high time_set@data
  4304  006F28  22DA               	addwfc	fsr2h,f,c
  4305  006F2A  0100               	movlb	0	; () banked
  4306  006F2C  C065  FFDE         	movff	?_intTObcd,postinc2
  4307  006F30  0100               	movlb	0	; () banked
  4308  006F32  C066  FFDD         	movff	?_intTObcd+1,postdec2
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;Commands.c: 340: ptr[++i] = strtok((0), sep_tok);
  4312  006F36  0E00               	movlw	0
  4313  006F38  6E24               	movwf	strtok@s1,c
  4314  006F3A  0E00               	movlw	0
  4315  006F3C  6E25               	movwf	strtok@s1+1,c
  4316  006F3E  C07B  F026         	movff	time_set@sep_tok,strtok@s2
  4317  006F42  C07C  F027         	movff	time_set@sep_tok+1,strtok@s2+1
  4318  006F46  EC6D  F034         	call	_strtok	;wreg free
  4319  006F4A  0100               	movlb	0	; () banked
  4320  006F4C  4B80               	infsnz	time_set@i& (0+255),f,b
  4321  006F4E  2B81               	incf	(time_set@i+1)& (0+255),f,b
  4322  006F50                     L2:
  4323  006F50  FFFF               	dw	65535	; assembler added errata NOP
  4324  006F52  90D8               	bcf	status,0,c
  4325  006F54  0100               	movlb	0	; () banked
  4326  006F56  3580               	rlcf	time_set@i& (0+255),w,b
  4327  006F58  6ED9               	movwf	fsr2l,c
  4328  006F5A  0100               	movlb	0	; () banked
  4329  006F5C  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4330  006F5E  6EDA               	movwf	fsr2h,c
  4331  006F60  0E75               	movlw	low time_set@ptr
  4332  006F62  26D9               	addwf	fsr2l,f,c
  4333  006F64  0E00               	movlw	high time_set@ptr
  4334  006F66  22DA               	addwfc	fsr2h,f,c
  4335  006F68  C024  FFDE         	movff	?_strtok,postinc2
  4336  006F6C  C025  FFDD         	movff	?_strtok+1,postdec2
  4337                           
  4338                           ; BSR set to: 0
  4339                           
  4340                           ; BSR set to: 0
  4341  006F70  90D8               	bcf	status,0,c
  4342  006F72  0100               	movlb	0	; () banked
  4343  006F74  3580               	rlcf	time_set@i& (0+255),w,b
  4344  006F76  6ED9               	movwf	fsr2l,c
  4345  006F78  0100               	movlb	0	; () banked
  4346  006F7A  3581               	rlcf	(time_set@i+1)& (0+255),w,b
  4347  006F7C  6EDA               	movwf	fsr2h,c
  4348  006F7E  0E75               	movlw	low time_set@ptr
  4349  006F80  26D9               	addwf	fsr2l,f,c
  4350  006F82  0E00               	movlw	high time_set@ptr
  4351  006F84  22DA               	addwfc	fsr2h,f,c
  4352  006F86  50DE               	movf	postinc2,w,c
  4353  006F88  10DE               	iorwf	postinc2,w,c
  4354  006F8A  A4D8               	btfss	status,2,c
  4355  006F8C  D7AB               	goto	l234
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;Commands.c: 341: }
  4359                           ;Commands.c: 342: hour.hours=data[0];
  4360  006F8E  C06F  F07F         	movff	time_set@data,time_set@hour+2
  4361                           
  4362                           ;Commands.c: 343: hour.minutes=data[1];
  4363  006F92  C071  F07E         	movff	time_set@data+2,time_set@hour+1
  4364                           
  4365                           ;Commands.c: 344: hour.seconds=data[2];
  4366  006F96  C073  F07D         	movff	time_set@data+4,time_set@hour
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;Commands.c: 347: set_time(&hour);
  4370  006F9A  0E7D               	movlw	low time_set@hour
  4371  006F9C  6E22               	movwf	set_time@Time_Data,c
  4372  006F9E  0E00               	movlw	high time_set@hour
  4373  006FA0  6E23               	movwf	set_time@Time_Data+1,c
  4374  006FA2  ECBD  F028         	call	_set_time	;wreg free
  4375  006FA6  0012               	return		;funcret
  4376  006FA8  FFFF               	dw	65535	; errata NOP
  4377  006FAA                     __end_of_time_set:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           intcon	equ	0xFF2
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postinc2	equ	0xFDE
  4387                           postdec2	equ	0xFDD
  4388                           fsr2h	equ	0xFDA
  4389                           fsr2l	equ	0xFD9
  4390                           status	equ	0xFD8
  4391                           
  4392 ;; *************** function _set_time *****************
  4393 ;; Defined at:
  4394 ;;		line 25 in file "DS1307.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;  Time_Data       2   33[COMRAM] PTR unsigned char 
  4397 ;;		 -> time_set@hour(3), 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      unsigned char 
  4402 ;; Registers used:
  4403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4409 ;;      Params:         2       0       0       0       0       0       0
  4410 ;;      Locals:         0       0       0       0       0       0       0
  4411 ;;      Temps:          0       0       0       0       0       0       0
  4412 ;;      Totals:         2       0       0       0       0       0       0
  4413 ;;Total ram usage:        2 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    3
  4416 ;; This function calls:
  4417 ;;		_WriteStr_I2C
  4418 ;; This function is called by:
  4419 ;;		_time_set
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text5
  4424  00517A                     __ptext5:
  4425                           	opt stack 0
  4426  00517A                     _set_time:
  4427                           	opt stack 0
  4428  00517A  FFFF               	dw	65535	; assembler added errata NOP
  4429                           
  4430                           ;DS1307.c: 27: WriteStr_I2C(0xd0,0x00,Time_Data,3);
  4431                           
  4432                           ;incstack = 0
  4433  00517C  0E00               	movlw	0
  4434  00517E  6E1B               	movwf	WriteStr_I2C@Reg_Addr,c
  4435  005180  C022  F01C         	movff	set_time@Time_Data,WriteStr_I2C@Str
  4436  005184  C023  F01D         	movff	set_time@Time_Data+1,WriteStr_I2C@Str+1
  4437  005188  0E03               	movlw	3
  4438  00518A  6E1E               	movwf	WriteStr_I2C@Str_Size,c
  4439  00518C  0ED0               	movlw	208
  4440  00518E  EC65  F02E         	call	_WriteStr_I2C
  4441                           
  4442                           ;DS1307.c: 28: return(0);
  4443                           ;	Return value of _set_time is never used
  4444  005192  0012               	return		;funcret
  4445  005194  FFFF               	dw	65535	; errata NOP
  4446  005196                     __end_of_set_time:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           intcon	equ	0xFF2
  4453                           postinc0	equ	0xFEE
  4454                           wreg	equ	0xFE8
  4455                           postinc2	equ	0xFDE
  4456                           postdec2	equ	0xFDD
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _date_set *****************
  4462 ;; Defined at:
  4463 ;;		line 300 in file "Commands.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  dat             2   11[BANK0 ] PTR unsigned char 
  4466 ;;		 -> rx_buffer(20), NULL(0), 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  ptr            10   15[BANK0 ] PTR unsigned char [5]
  4469 ;;		 -> rx_buffer(20), NULL(0), 
  4470 ;;  data            8   27[BANK0 ] int [4]
  4471 ;;  date            4   35[BANK0 ] struct Date_Data
  4472 ;;  i               2   39[BANK0 ] int 
  4473 ;;  sep_tok         2   25[BANK0 ] PTR unsigned char 
  4474 ;;		 -> STR_69(2), 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4484 ;;      Params:         0       2       0       0       0       0       0
  4485 ;;      Locals:         0      26       0       0       0       0       0
  4486 ;;      Temps:          0       2       0       0       0       0       0
  4487 ;;      Totals:         0      30       0       0       0       0       0
  4488 ;;Total ram usage:       30 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    4
  4491 ;; This function calls:
  4492 ;;		_atoi
  4493 ;;		_intTObcd
  4494 ;;		_set_date
  4495 ;;		_strtok
  4496 ;; This function is called by:
  4497 ;;		_set_list
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text6
  4502  007A02                     __ptext6:
  4503                           	opt stack 0
  4504  007A02                     _date_set:
  4505                           	opt stack 0
  4506  007A02  FFFF               	dw	65535	; assembler added errata NOP
  4507                           
  4508                           ;Commands.c: 302: char * ptr[5];
  4509                           ;Commands.c: 303: char * sep_tok = "/";
  4510                           
  4511                           ;incstack = 0
  4512  007A04  0EFA               	movlw	low STR_69
  4513  007A06  0100               	movlb	0	; () banked
  4514  007A08  6F79               	movwf	date_set@sep_tok& (0+255),b
  4515  007A0A  0E7F               	movlw	high STR_69
  4516  007A0C  0100               	movlb	0	; () banked
  4517  007A0E  6F7A               	movwf	(date_set@sep_tok+1)& (0+255),b
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;Commands.c: 304: int i=0;
  4521  007A10  0E00               	movlw	0
  4522  007A12  0100               	movlb	0	; () banked
  4523  007A14  6F88               	movwf	(date_set@i+1)& (0+255),b
  4524  007A16  0E00               	movlw	0
  4525  007A18  6F87               	movwf	date_set@i& (0+255),b
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;Commands.c: 305: int data[4];
  4529                           ;Commands.c: 306: struct Date_Data date;
  4530                           ;Commands.c: 308: ptr[i] = strtok(dat, sep_tok);
  4531  007A1A  C06B  F024         	movff	date_set@dat,strtok@s1
  4532  007A1E  C06C  F025         	movff	date_set@dat+1,strtok@s1+1
  4533  007A22  C079  F026         	movff	date_set@sep_tok,strtok@s2
  4534  007A26  C07A  F027         	movff	date_set@sep_tok+1,strtok@s2+1
  4535  007A2A  EC6D  F034         	call	_strtok	;wreg free
  4536  007A2E  D02E               	goto	L3
  4537  007A30  FFFF               	dw	65535	; assembler added errata NOP
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;Commands.c: 311: data[i]=atoi(ptr[i]);
  4541                           
  4542                           ; BSR set to: 0
  4543  007A32  90D8               	bcf	status,0,c
  4544  007A34  0100               	movlb	0	; () banked
  4545  007A36  3587               	rlcf	date_set@i& (0+255),w,b
  4546  007A38  6ED9               	movwf	fsr2l,c
  4547  007A3A  0100               	movlb	0	; () banked
  4548  007A3C  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4549  007A3E  6EDA               	movwf	fsr2h,c
  4550  007A40  0E6F               	movlw	low date_set@ptr
  4551  007A42  26D9               	addwf	fsr2l,f,c
  4552  007A44  0E00               	movlw	high date_set@ptr
  4553  007A46  22DA               	addwfc	fsr2h,f,c
  4554  007A48  CFDE F02D          	movff	postinc2,atoi@s
  4555  007A4C  CFDD F02E          	movff	postdec2,atoi@s+1
  4556  007A50  EC50  F038         	call	_atoi	;wreg free
  4557  007A54  90D8               	bcf	status,0,c
  4558  007A56  0100               	movlb	0	; () banked
  4559  007A58  3587               	rlcf	date_set@i& (0+255),w,b
  4560  007A5A  6ED9               	movwf	fsr2l,c
  4561  007A5C  0100               	movlb	0	; () banked
  4562  007A5E  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4563  007A60  6EDA               	movwf	fsr2h,c
  4564  007A62  0E7B               	movlw	low date_set@data
  4565  007A64  26D9               	addwf	fsr2l,f,c
  4566  007A66  0E00               	movlw	high date_set@data
  4567  007A68  22DA               	addwfc	fsr2h,f,c
  4568  007A6A  C02D  FFDE         	movff	?_atoi,postinc2
  4569  007A6E  C02E  FFDD         	movff	?_atoi+1,postdec2
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;Commands.c: 313: ptr[++i] = strtok((0), sep_tok);
  4573  007A72  0E00               	movlw	0
  4574  007A74  6E24               	movwf	strtok@s1,c
  4575  007A76  0E00               	movlw	0
  4576  007A78  6E25               	movwf	strtok@s1+1,c
  4577  007A7A  C079  F026         	movff	date_set@sep_tok,strtok@s2
  4578  007A7E  C07A  F027         	movff	date_set@sep_tok+1,strtok@s2+1
  4579  007A82  EC6D  F034         	call	_strtok	;wreg free
  4580  007A86  0100               	movlb	0	; () banked
  4581  007A88  4B87               	infsnz	date_set@i& (0+255),f,b
  4582  007A8A  2B88               	incf	(date_set@i+1)& (0+255),f,b
  4583  007A8C                     L3:
  4584  007A8C  FFFF               	dw	65535	; assembler added errata NOP
  4585  007A8E  90D8               	bcf	status,0,c
  4586  007A90  0100               	movlb	0	; () banked
  4587  007A92  3587               	rlcf	date_set@i& (0+255),w,b
  4588  007A94  6ED9               	movwf	fsr2l,c
  4589  007A96  0100               	movlb	0	; () banked
  4590  007A98  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4591  007A9A  6EDA               	movwf	fsr2h,c
  4592  007A9C  0E6F               	movlw	low date_set@ptr
  4593  007A9E  26D9               	addwf	fsr2l,f,c
  4594  007AA0  0E00               	movlw	high date_set@ptr
  4595  007AA2  22DA               	addwfc	fsr2h,f,c
  4596  007AA4  C024  FFDE         	movff	?_strtok,postinc2
  4597  007AA8  C025  FFDD         	movff	?_strtok+1,postdec2
  4598                           
  4599                           ; BSR set to: 0
  4600                           
  4601                           ; BSR set to: 0
  4602  007AAC  90D8               	bcf	status,0,c
  4603  007AAE  0100               	movlb	0	; () banked
  4604  007AB0  3587               	rlcf	date_set@i& (0+255),w,b
  4605  007AB2  6ED9               	movwf	fsr2l,c
  4606  007AB4  0100               	movlb	0	; () banked
  4607  007AB6  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4608  007AB8  6EDA               	movwf	fsr2h,c
  4609  007ABA  0E6F               	movlw	low date_set@ptr
  4610  007ABC  26D9               	addwf	fsr2l,f,c
  4611  007ABE  0E00               	movlw	high date_set@ptr
  4612  007AC0  22DA               	addwfc	fsr2h,f,c
  4613  007AC2  50DE               	movf	postinc2,w,c
  4614  007AC4  10DE               	iorwf	postinc2,w,c
  4615  007AC6  A4D8               	btfss	status,2,c
  4616  007AC8  D7B3               	goto	l226
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;Commands.c: 314: }
  4620                           ;Commands.c: 315: data[2]=data[2]-2000;
  4621                           
  4622                           ; BSR set to: 0
  4623  007ACA  0E30               	movlw	48
  4624  007ACC  0100               	movlb	0	; () banked
  4625  007ACE  257F               	addwf	(date_set@data+4)& (0+255),w,b
  4626  007AD0  0100               	movlb	0	; () banked
  4627  007AD2  6F7F               	movwf	(date_set@data+4)& (0+255),b
  4628  007AD4  0EF8               	movlw	248
  4629  007AD6  0100               	movlb	0	; () banked
  4630  007AD8  2180               	addwfc	(date_set@data+5)& (0+255),w,b
  4631  007ADA  0100               	movlb	0	; () banked
  4632  007ADC  6F80               	movwf	(date_set@data+5)& (0+255),b
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;Commands.c: 316: for(i=0;i<4;i++){
  4636  007ADE  0E00               	movlw	0
  4637  007AE0  0100               	movlb	0	; () banked
  4638  007AE2  6F88               	movwf	(date_set@i+1)& (0+255),b
  4639  007AE4  0E00               	movlw	0
  4640  007AE6  6F87               	movwf	date_set@i& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643  007AE8  0100               	movlb	0	; () banked
  4644  007AEA  BF88               	btfsc	(date_set@i+1)& (0+255),7,b
  4645  007AEC  D004               	goto	l228
  4646  007AEE  0100               	movlb	0	; () banked
  4647  007AF0  5188               	movf	(date_set@i+1)& (0+255),w,b
  4648  007AF2  E133               	bnz	l229
  4649  007AF4  D02C               	goto	L4
  4650  007AF6                     l228:
  4651  007AF6  FFFF               	dw	65535	; assembler added errata NOP
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;Commands.c: 317: data[i]=intTObcd(data[i]);
  4655                           
  4656                           ; BSR set to: 0
  4657  007AF8  90D8               	bcf	status,0,c
  4658  007AFA  0100               	movlb	0	; () banked
  4659  007AFC  3587               	rlcf	date_set@i& (0+255),w,b
  4660  007AFE  6ED9               	movwf	fsr2l,c
  4661  007B00  0100               	movlb	0	; () banked
  4662  007B02  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4663  007B04  6EDA               	movwf	fsr2h,c
  4664  007B06  0E7B               	movlw	low date_set@data
  4665  007B08  26D9               	addwf	fsr2l,f,c
  4666  007B0A  0E00               	movlw	high date_set@data
  4667  007B0C  22DA               	addwfc	fsr2h,f,c
  4668  007B0E  CFDE F065          	movff	postinc2,intTObcd@v
  4669  007B12  CFDD F066          	movff	postdec2,intTObcd@v+1
  4670  007B16  EC44  F032         	call	_intTObcd	;wreg free
  4671  007B1A  90D8               	bcf	status,0,c
  4672  007B1C  0100               	movlb	0	; () banked
  4673  007B1E  3587               	rlcf	date_set@i& (0+255),w,b
  4674  007B20  6ED9               	movwf	fsr2l,c
  4675  007B22  0100               	movlb	0	; () banked
  4676  007B24  3588               	rlcf	(date_set@i+1)& (0+255),w,b
  4677  007B26  6EDA               	movwf	fsr2h,c
  4678  007B28  0E7B               	movlw	low date_set@data
  4679  007B2A  26D9               	addwf	fsr2l,f,c
  4680  007B2C  0E00               	movlw	high date_set@data
  4681  007B2E  22DA               	addwfc	fsr2h,f,c
  4682  007B30  0100               	movlb	0	; () banked
  4683  007B32  C065  FFDE         	movff	?_intTObcd,postinc2
  4684  007B36  0100               	movlb	0	; () banked
  4685  007B38  C066  FFDD         	movff	?_intTObcd+1,postdec2
  4686                           
  4687                           ; BSR set to: 0
  4688  007B3C  0100               	movlb	0	; () banked
  4689  007B3E  4B87               	infsnz	date_set@i& (0+255),f,b
  4690  007B40  2B88               	incf	(date_set@i+1)& (0+255),f,b
  4691                           
  4692                           ; BSR set to: 0
  4693  007B42  0100               	movlb	0	; () banked
  4694  007B44  BF88               	btfsc	(date_set@i+1)& (0+255),7,b
  4695  007B46  D7D7               	goto	l228
  4696  007B48  0100               	movlb	0	; () banked
  4697  007B4A  5188               	movf	(date_set@i+1)& (0+255),w,b
  4698  007B4C  E106               	bnz	u10600
  4699  007B4E                     L4:
  4700  007B4E  FFFF               	dw	65535	; assembler added errata NOP
  4701  007B50  0E04               	movlw	4
  4702  007B52  0100               	movlb	0	; () banked
  4703  007B54  5D87               	subwf	date_set@i& (0+255),w,b
  4704  007B56  A0D8               	btfss	status,0,c
  4705  007B58  D7CE               	goto	l228
  4706  007B5A                     u10600:
  4707  007B5A                     l229:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;Commands.c: 318: }
  4711                           ;Commands.c: 319: date.date=data[0];
  4712  007B5A  C07B  F084         	movff	date_set@data,date_set@date+1
  4713                           
  4714                           ;Commands.c: 320: date.month=data[1];
  4715  007B5E  C07D  F085         	movff	date_set@data+2,date_set@date+2
  4716                           
  4717                           ;Commands.c: 321: date.year=data[2];
  4718  007B62  C07F  F086         	movff	date_set@data+4,date_set@date+3
  4719                           
  4720                           ;Commands.c: 322: date.day_w=data[3];
  4721  007B66  C081  F083         	movff	date_set@data+6,date_set@date
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;Commands.c: 325: set_date(&date);
  4725  007B6A  0E83               	movlw	low date_set@date
  4726  007B6C  6E22               	movwf	set_date@Date_Data,c
  4727  007B6E  0E00               	movlw	high date_set@date
  4728  007B70  6E23               	movwf	set_date@Date_Data+1,c
  4729  007B72  ECAF  F028         	call	_set_date	;wreg free
  4730  007B76  0012               	return		;funcret
  4731  007B78  FFFF               	dw	65535	; errata NOP
  4732  007B7A                     __end_of_date_set:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           intcon	equ	0xFF2
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           postinc2	equ	0xFDE
  4742                           postdec2	equ	0xFDD
  4743                           fsr2h	equ	0xFDA
  4744                           fsr2l	equ	0xFD9
  4745                           status	equ	0xFD8
  4746                           
  4747 ;; *************** function _strtok *****************
  4748 ;; Defined at:
  4749 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strtok.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  s1              2   35[COMRAM] PTR unsigned char 
  4752 ;;		 -> rx_buffer(20), NULL(0), 
  4753 ;;  s2              2   37[COMRAM] PTR const unsigned char 
  4754 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  2   35[COMRAM] PTR unsigned char 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4766 ;;      Params:         4       0       0       0       0       0       0
  4767 ;;      Locals:         0       0       0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0
  4769 ;;      Totals:         4       0       0       0       0       0       0
  4770 ;;Total ram usage:        4 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    3
  4773 ;; This function calls:
  4774 ;;		_strcspn
  4775 ;;		_strspn
  4776 ;; This function is called by:
  4777 ;;		_read_command
  4778 ;;		_date_set
  4779 ;;		_time_set
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text7
  4784  0068DA                     __ptext7:
  4785                           	opt stack 0
  4786  0068DA                     _strtok:
  4787                           	opt stack 0
  4788  0068DA  FFFF               	dw	65535	; assembler added errata NOP
  4789                           
  4790                           ;incstack = 0
  4791  0068DC  5024               	movf	strtok@s1,w,c
  4792  0068DE  1025               	iorwf	strtok@s1+1,w,c
  4793  0068E0  A4D8               	btfss	status,2,c
  4794  0068E2  D004               	goto	l2076
  4795  0068E4  C042  F024         	movff	strtok@sp,strtok@s1
  4796  0068E8  C043  F025         	movff	strtok@sp+1,strtok@s1+1
  4797  0068EC                     l2076:
  4798  0068EC  FFFF               	dw	65535	; assembler added errata NOP
  4799  0068EE  5024               	movf	strtok@s1,w,c
  4800  0068F0  1025               	iorwf	strtok@s1+1,w,c
  4801  0068F2  A4D8               	btfss	status,2,c
  4802  0068F4  D005               	goto	l2077
  4803  0068F6  0E00               	movlw	0
  4804  0068F8  6E24               	movwf	?_strtok,c
  4805  0068FA  0E00               	movlw	0
  4806  0068FC  6E25               	movwf	?_strtok+1,c
  4807  0068FE  D04A               	goto	l9588
  4808  006900                     l2077:
  4809  006900  FFFF               	dw	65535	; assembler added errata NOP
  4810  006902  C024  F01D         	movff	strtok@s1,strspn@s1
  4811  006906  C025  F01E         	movff	strtok@s1+1,strspn@s1+1
  4812  00690A  C026  F01F         	movff	strtok@s2,strspn@s2
  4813  00690E  C027  F020         	movff	strtok@s2+1,strspn@s2+1
  4814  006912  EC3B  F02D         	call	_strspn	;wreg free
  4815  006916  501D               	movf	?_strspn,w,c
  4816  006918  2624               	addwf	strtok@s1,f,c
  4817  00691A  501E               	movf	?_strspn+1,w,c
  4818  00691C  2225               	addwfc	strtok@s1+1,f,c
  4819  00691E  C024  FFD9         	movff	strtok@s1,fsr2l
  4820  006922  C025  FFDA         	movff	strtok@s1+1,fsr2h
  4821  006926  50DF               	movf	indf2,w,c
  4822  006928  A4D8               	btfss	status,2,c
  4823  00692A  D009               	goto	l2079
  4824  00692C  0E00               	movlw	0
  4825  00692E  6E42               	movwf	strtok@sp,c
  4826  006930  0E00               	movlw	0
  4827  006932  6E43               	movwf	strtok@sp+1,c
  4828  006934  C042  F024         	movff	strtok@sp,?_strtok
  4829  006938  C043  F025         	movff	strtok@sp+1,?_strtok+1
  4830  00693C  D02B               	goto	l9588
  4831  00693E                     l2079:
  4832  00693E  FFFF               	dw	65535	; assembler added errata NOP
  4833  006940  C024  F01D         	movff	strtok@s1,strcspn@s1
  4834  006944  C025  F01E         	movff	strtok@s1+1,strcspn@s1+1
  4835  006948  C026  F01F         	movff	strtok@s2,strcspn@s2
  4836  00694C  C027  F020         	movff	strtok@s2+1,strcspn@s2+1
  4837  006950  EC0E  F02D         	call	_strcspn	;wreg free
  4838  006954  501D               	movf	?_strcspn,w,c
  4839  006956  2424               	addwf	strtok@s1,w,c
  4840  006958  6E42               	movwf	strtok@sp,c
  4841  00695A  501E               	movf	?_strcspn+1,w,c
  4842  00695C  2025               	addwfc	strtok@s1+1,w,c
  4843  00695E  6E43               	movwf	strtok@sp+1,c
  4844  006960  C042  FFD9         	movff	strtok@sp,fsr2l
  4845  006964  C043  FFDA         	movff	strtok@sp+1,fsr2h
  4846  006968  50DF               	movf	indf2,w,c
  4847  00696A  B4D8               	btfsc	status,2,c
  4848  00696C  D009               	goto	l2080
  4849  00696E  C042  FFD9         	movff	strtok@sp,fsr2l
  4850  006972  C043  FFDA         	movff	strtok@sp+1,fsr2h
  4851  006976  0E00               	movlw	0
  4852  006978  6EDF               	movwf	indf2,c
  4853  00697A  4A42               	infsnz	strtok@sp,f,c
  4854  00697C  2A43               	incf	strtok@sp+1,f,c
  4855  00697E  D005               	goto	l2081
  4856  006980                     l2080:
  4857  006980  FFFF               	dw	65535	; assembler added errata NOP
  4858  006982  0E00               	movlw	0
  4859  006984  6E42               	movwf	strtok@sp,c
  4860  006986  0E00               	movlw	0
  4861  006988  6E43               	movwf	strtok@sp+1,c
  4862  00698A                     l2081:
  4863  00698A  FFFF               	dw	65535	; assembler added errata NOP
  4864  00698C  C024  F024         	movff	strtok@s1,?_strtok
  4865  006990  C025  F025         	movff	strtok@s1+1,?_strtok+1
  4866  006994                     l9588:
  4867  006994  FFFF               	dw	65535	; assembler added errata NOP
  4868  006996  0012               	return		;funcret
  4869  006998  FFFF               	dw	65535	; errata NOP
  4870  00699A                     __end_of_strtok:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           intcon	equ	0xFF2
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function _strspn *****************
  4887 ;; Defined at:
  4888 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strspn.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  4891 ;;		 -> rx_buffer(20), NULL(0), 
  4892 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  4893 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  i               2   33[COMRAM] unsigned int 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  2   28[COMRAM] unsigned int 
  4898 ;; Registers used:
  4899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4905 ;;      Params:         4       0       0       0       0       0       0
  4906 ;;      Locals:         2       0       0       0       0       0       0
  4907 ;;      Temps:          1       0       0       0       0       0       0
  4908 ;;      Totals:         7       0       0       0       0       0       0
  4909 ;;Total ram usage:        7 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    2
  4912 ;; This function calls:
  4913 ;;		_strchr
  4914 ;; This function is called by:
  4915 ;;		_strtok
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text8
  4920  005A76                     __ptext8:
  4921                           	opt stack 0
  4922  005A76                     _strspn:
  4923                           	opt stack 0
  4924  005A76  FFFF               	dw	65535	; assembler added errata NOP
  4925                           
  4926                           ;incstack = 0
  4927  005A78  0E00               	movlw	0
  4928  005A7A  6E23               	movwf	strspn@i+1,c
  4929  005A7C  0E00               	movlw	0
  4930  005A7E  6E22               	movwf	strspn@i,c
  4931  005A80  D005               	goto	l2129
  4932  005A82  FFFF               	dw	65535	; assembler added errata NOP
  4933  005A84  4A1D               	infsnz	strspn@s1,f,c
  4934  005A86  2A1E               	incf	strspn@s1+1,f,c
  4935  005A88  4A22               	infsnz	strspn@i,f,c
  4936  005A8A  2A23               	incf	strspn@i+1,f,c
  4937  005A8C                     l2129:
  4938  005A8C  FFFF               	dw	65535	; assembler added errata NOP
  4939  005A8E  C01D  FFD9         	movff	strspn@s1,fsr2l
  4940  005A92  C01E  FFDA         	movff	strspn@s1+1,fsr2h
  4941  005A96  50DF               	movf	indf2,w,c
  4942  005A98  B4D8               	btfsc	status,2,c
  4943  005A9A  D013               	goto	u9330
  4944  005A9C  C01F  F019         	movff	strspn@s2,strchr@ptr
  4945  005AA0  C020  F01A         	movff	strspn@s2+1,strchr@ptr+1
  4946  005AA4  C01D  FFD9         	movff	strspn@s1,fsr2l
  4947  005AA8  C01E  FFDA         	movff	strspn@s1+1,fsr2h
  4948  005AAC  50DF               	movf	indf2,w,c
  4949  005AAE  6E21               	movwf	??_strspn& (0+255),c
  4950  005AB0  5021               	movf	??_strspn,w,c
  4951  005AB2  6E1B               	movwf	strchr@chr,c
  4952  005AB4  6A1C               	clrf	strchr@chr+1,c
  4953  005AB6  EC82  F02B         	call	_strchr	;wreg free
  4954  005ABA  5019               	movf	?_strchr,w,c
  4955  005ABC  101A               	iorwf	?_strchr+1,w,c
  4956  005ABE  A4D8               	btfss	status,2,c
  4957  005AC0  D7E0               	goto	l2130
  4958  005AC2                     u9330:
  4959  005AC2  FFFF               	dw	65535	; assembler added errata NOP
  4960  005AC4  C022  F01D         	movff	strspn@i,?_strspn
  4961  005AC8  C023  F01E         	movff	strspn@i+1,?_strspn+1
  4962  005ACC  0012               	return		;funcret
  4963  005ACE  FFFF               	dw	65535	; errata NOP
  4964  005AD0                     __end_of_strspn:
  4965                           	opt stack 0
  4966                           tblptru	equ	0xFF8
  4967                           tblptrh	equ	0xFF7
  4968                           tblptrl	equ	0xFF6
  4969                           tablat	equ	0xFF5
  4970                           intcon	equ	0xFF2
  4971                           postinc0	equ	0xFEE
  4972                           wreg	equ	0xFE8
  4973                           indf2	equ	0xFDF
  4974                           postinc2	equ	0xFDE
  4975                           postdec2	equ	0xFDD
  4976                           fsr2h	equ	0xFDA
  4977                           fsr2l	equ	0xFD9
  4978                           status	equ	0xFD8
  4979                           
  4980 ;; *************** function _strcspn *****************
  4981 ;; Defined at:
  4982 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcspn.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  4985 ;;		 -> rx_buffer(20), NULL(0), 
  4986 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  4987 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  i               2   33[COMRAM] unsigned int 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  2   28[COMRAM] unsigned int 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4999 ;;      Params:         4       0       0       0       0       0       0
  5000 ;;      Locals:         2       0       0       0       0       0       0
  5001 ;;      Temps:          1       0       0       0       0       0       0
  5002 ;;      Totals:         7       0       0       0       0       0       0
  5003 ;;Total ram usage:        7 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    2
  5006 ;; This function calls:
  5007 ;;		_strchr
  5008 ;; This function is called by:
  5009 ;;		_strtok
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text9
  5014  005A1C                     __ptext9:
  5015                           	opt stack 0
  5016  005A1C                     _strcspn:
  5017                           	opt stack 0
  5018  005A1C  FFFF               	dw	65535	; assembler added errata NOP
  5019                           
  5020                           ;incstack = 0
  5021  005A1E  0E00               	movlw	0
  5022  005A20  6E23               	movwf	strcspn@i+1,c
  5023  005A22  0E00               	movlw	0
  5024  005A24  6E22               	movwf	strcspn@i,c
  5025  005A26  D005               	goto	l2119
  5026  005A28  FFFF               	dw	65535	; assembler added errata NOP
  5027  005A2A  4A1D               	infsnz	strcspn@s1,f,c
  5028  005A2C  2A1E               	incf	strcspn@s1+1,f,c
  5029  005A2E  4A22               	infsnz	strcspn@i,f,c
  5030  005A30  2A23               	incf	strcspn@i+1,f,c
  5031  005A32                     l2119:
  5032  005A32  FFFF               	dw	65535	; assembler added errata NOP
  5033  005A34  C01D  FFD9         	movff	strcspn@s1,fsr2l
  5034  005A38  C01E  FFDA         	movff	strcspn@s1+1,fsr2h
  5035  005A3C  50DF               	movf	indf2,w,c
  5036  005A3E  B4D8               	btfsc	status,2,c
  5037  005A40  D013               	goto	u9350
  5038  005A42  C01F  F019         	movff	strcspn@s2,strchr@ptr
  5039  005A46  C020  F01A         	movff	strcspn@s2+1,strchr@ptr+1
  5040  005A4A  C01D  FFD9         	movff	strcspn@s1,fsr2l
  5041  005A4E  C01E  FFDA         	movff	strcspn@s1+1,fsr2h
  5042  005A52  50DF               	movf	indf2,w,c
  5043  005A54  6E21               	movwf	??_strcspn& (0+255),c
  5044  005A56  5021               	movf	??_strcspn,w,c
  5045  005A58  6E1B               	movwf	strchr@chr,c
  5046  005A5A  6A1C               	clrf	strchr@chr+1,c
  5047  005A5C  EC82  F02B         	call	_strchr	;wreg free
  5048  005A60  5019               	movf	?_strchr,w,c
  5049  005A62  101A               	iorwf	?_strchr+1,w,c
  5050  005A64  B4D8               	btfsc	status,2,c
  5051  005A66  D7E0               	goto	l2120
  5052  005A68                     u9350:
  5053  005A68  FFFF               	dw	65535	; assembler added errata NOP
  5054  005A6A  C022  F01D         	movff	strcspn@i,?_strcspn
  5055  005A6E  C023  F01E         	movff	strcspn@i+1,?_strcspn+1
  5056  005A72  0012               	return		;funcret
  5057  005A74  FFFF               	dw	65535	; errata NOP
  5058  005A76                     __end_of_strcspn:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           intcon	equ	0xFF2
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _strchr *****************
  5075 ;; Defined at:
  5076 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strchr.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;  ptr             2   24[COMRAM] PTR const unsigned char 
  5079 ;;		 -> STR_70(2), STR_69(2), STR_1(2), 
  5080 ;;  chr             2   26[COMRAM] int 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  2   24[COMRAM] PTR unsigned char 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5092 ;;      Params:         4       0       0       0       0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0
  5095 ;;      Totals:         4       0       0       0       0       0       0
  5096 ;;Total ram usage:        4 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    1
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_strcspn
  5103 ;;		_strspn
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text10
  5108  005704                     __ptext10:
  5109                           	opt stack 0
  5110  005704                     _strchr:
  5111                           	opt stack 0
  5112  005704  FFFF               	dw	65535	; assembler added errata NOP
  5113                           
  5114                           ;incstack = 0
  5115  005706  C019  FFF6         	movff	strchr@ptr,tblptrl
  5116  00570A  C01A  FFF7         	movff	strchr@ptr+1,tblptrh
  5117  00570E                     	if	0	;tblptru may be non-zero
  5118  00570E                     	endif
  5119  00570E                     	if	0	;tblptru may be non-zero
  5120  00570E                     	endif
  5121  00570E  0008               	tblrd		*
  5122  005710  FFFF               	dw	65535	; errata NOP
  5123  005712  50F5               	movf	tablat,w,c
  5124  005714  181B               	xorwf	strchr@chr,w,c
  5125  005716  A4D8               	btfss	status,2,c
  5126  005718  D005               	goto	l2138
  5127  00571A  C019  F019         	movff	strchr@ptr,?_strchr
  5128  00571E  C01A  F01A         	movff	strchr@ptr+1,?_strchr+1
  5129  005722  D011               	goto	l8896
  5130  005724                     l2138:
  5131  005724  FFFF               	dw	65535	; assembler added errata NOP
  5132  005726  C019  FFF6         	movff	strchr@ptr,tblptrl
  5133  00572A  C01A  FFF7         	movff	strchr@ptr+1,tblptrh
  5134  00572E  4A19               	infsnz	strchr@ptr,f,c
  5135  005730  2A1A               	incf	strchr@ptr+1,f,c
  5136  005732                     	if	0	;tblptru may be non-zero
  5137  005732                     	endif
  5138  005732                     	if	0	;tblptru may be non-zero
  5139  005732                     	endif
  5140  005732  0008               	tblrd		*
  5141  005734  FFFF               	dw	65535	; errata NOP
  5142  005736  50F5               	movf	tablat,w,c
  5143  005738  0900               	iorlw	0
  5144  00573A  A4D8               	btfss	status,2,c
  5145  00573C  D7E3               	goto	_strchr
  5146  00573E  0E00               	movlw	0
  5147  005740  6E19               	movwf	?_strchr,c
  5148  005742  0E00               	movlw	0
  5149  005744  6E1A               	movwf	?_strchr+1,c
  5150  005746                     l8896:
  5151  005746  FFFF               	dw	65535	; assembler added errata NOP
  5152  005748  0012               	return		;funcret
  5153  00574A  FFFF               	dw	65535	; errata NOP
  5154  00574C                     __end_of_strchr:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           intcon	equ	0xFF2
  5161                           postinc0	equ	0xFEE
  5162                           wreg	equ	0xFE8
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _set_date *****************
  5171 ;; Defined at:
  5172 ;;		line 31 in file "DS1307.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  Date_Data       2   33[COMRAM] PTR unsigned char 
  5175 ;;		 -> date_set@date(4), 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      unsigned char 
  5180 ;; Registers used:
  5181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5187 ;;      Params:         2       0       0       0       0       0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0
  5190 ;;      Totals:         2       0       0       0       0       0       0
  5191 ;;Total ram usage:        2 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		_WriteStr_I2C
  5196 ;; This function is called by:
  5197 ;;		_date_set
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           	psect	text11
  5202  00515E                     __ptext11:
  5203                           	opt stack 0
  5204  00515E                     _set_date:
  5205                           	opt stack 0
  5206  00515E  FFFF               	dw	65535	; assembler added errata NOP
  5207                           
  5208                           ;DS1307.c: 33: WriteStr_I2C(0xd0,0x03,Date_Data,4);
  5209                           
  5210                           ;incstack = 0
  5211  005160  0E03               	movlw	3
  5212  005162  6E1B               	movwf	WriteStr_I2C@Reg_Addr,c
  5213  005164  C022  F01C         	movff	set_date@Date_Data,WriteStr_I2C@Str
  5214  005168  C023  F01D         	movff	set_date@Date_Data+1,WriteStr_I2C@Str+1
  5215  00516C  0E04               	movlw	4
  5216  00516E  6E1E               	movwf	WriteStr_I2C@Str_Size,c
  5217  005170  0ED0               	movlw	208
  5218  005172  EC65  F02E         	call	_WriteStr_I2C
  5219                           
  5220                           ;DS1307.c: 34: return(0);
  5221                           ;	Return value of _set_date is never used
  5222  005176  0012               	return		;funcret
  5223  005178  FFFF               	dw	65535	; errata NOP
  5224  00517A                     __end_of_set_date:
  5225                           	opt stack 0
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           intcon	equ	0xFF2
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           fsr2h	equ	0xFDA
  5237                           fsr2l	equ	0xFD9
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function _WriteStr_I2C *****************
  5241 ;; Defined at:
  5242 ;;		line 211 in file "i2c_FRM.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  Mod_Addr        1    wreg     unsigned char 
  5245 ;;  Reg_Addr        1   26[COMRAM] unsigned char 
  5246 ;;  Str             2   27[COMRAM] PTR unsigned char 
  5247 ;;		 -> time_set@hour(3), date_set@date(4), 
  5248 ;;  Str_Size        1   29[COMRAM] unsigned char 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  Mod_Addr        1   31[COMRAM] unsigned char 
  5251 ;;  stat            1   32[COMRAM] unsigned char 
  5252 ;;  i               1   30[COMRAM] unsigned char 
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  1    wreg      unsigned char 
  5255 ;; Registers used:
  5256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5262 ;;      Params:         4       0       0       0       0       0       0
  5263 ;;      Locals:         3       0       0       0       0       0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0
  5265 ;;      Totals:         7       0       0       0       0       0       0
  5266 ;;Total ram usage:        7 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    2
  5269 ;; This function calls:
  5270 ;;		_CloseI2C
  5271 ;;		_IdleI2C
  5272 ;;		_OpenI2C
  5273 ;;		_StartI2C
  5274 ;;		_StopI2C
  5275 ;;		_Wait_AckI2C
  5276 ;;		_WriteI2C
  5277 ;; This function is called by:
  5278 ;;		_set_time
  5279 ;;		_set_date
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text12
  5284  005CCA                     __ptext12:
  5285                           	opt stack 0
  5286  005CCA                     _WriteStr_I2C:
  5287                           	opt stack 0
  5288  005CCA  FFFF               	dw	65535	; assembler added errata NOP
  5289                           
  5290                           ;incstack = 0
  5291                           ;WriteStr_I2C@Mod_Addr stored from wreg
  5292  005CCC  6E20               	movwf	WriteStr_I2C@Mod_Addr,c
  5293                           
  5294                           ;i2c_FRM.c: 213: char stat=0,i=0;
  5295  005CCE  0E00               	movlw	0
  5296  005CD0  6E21               	movwf	WriteStr_I2C@stat,c
  5297  005CD2  0E00               	movlw	0
  5298  005CD4  6E1F               	movwf	WriteStr_I2C@i,c
  5299                           
  5300                           ;i2c_FRM.c: 217: OpenI2C(8, 0xC0);
  5301  005CD6  0EC0               	movlw	192
  5302  005CD8  6E19               	movwf	OpenI2C@slew,c
  5303  005CDA  0E08               	movlw	8
  5304  005CDC  ECCB  F028         	call	_OpenI2C
  5305                           
  5306                           ;i2c_FRM.c: 218: SSPADD=0x18;
  5307  005CE0  0E18               	movlw	24
  5308  005CE2  6EC8               	movwf	4040,c	;volatile
  5309                           
  5310                           ;i2c_FRM.c: 219: IdleI2C();
  5311  005CE4  ECDC  F028         	call	_IdleI2C	;wreg free
  5312                           
  5313                           ;i2c_FRM.c: 222: StartI2C();
  5314  005CE8  EC35  F028         	call	_StartI2C	;wreg free
  5315                           
  5316                           ;i2c_FRM.c: 223: stat=WriteI2C(Mod_Addr);
  5317  005CEC  5020               	movf	WriteStr_I2C@Mod_Addr,w,c
  5318  005CEE  EC9E  F029         	call	_WriteI2C
  5319  005CF2  6E21               	movwf	WriteStr_I2C@stat,c
  5320                           
  5321                           ;i2c_FRM.c: 224: stat+=Wait_AckI2C();
  5322  005CF4  EC21  F028         	call	_Wait_AckI2C	;wreg free
  5323  005CF8  2621               	addwf	WriteStr_I2C@stat,f,c
  5324                           
  5325                           ;i2c_FRM.c: 227: stat+=WriteI2C(Reg_Addr);
  5326  005CFA  501B               	movf	WriteStr_I2C@Reg_Addr,w,c
  5327  005CFC  EC9E  F029         	call	_WriteI2C
  5328  005D00  2621               	addwf	WriteStr_I2C@stat,f,c
  5329                           
  5330                           ;i2c_FRM.c: 228: stat+=Wait_AckI2C();
  5331  005D02  EC21  F028         	call	_Wait_AckI2C	;wreg free
  5332  005D06  D00D               	goto	L5
  5333  005D08  FFFF               	dw	65535	; assembler added errata NOP
  5334                           
  5335                           ;i2c_FRM.c: 232: stat+=WriteI2C(*Str++);
  5336  005D0A  C01C  FFD9         	movff	WriteStr_I2C@Str,fsr2l
  5337  005D0E  C01D  FFDA         	movff	WriteStr_I2C@Str+1,fsr2h
  5338  005D12  50DF               	movf	indf2,w,c
  5339  005D14  EC9E  F029         	call	_WriteI2C
  5340  005D18  2621               	addwf	WriteStr_I2C@stat,f,c
  5341  005D1A  4A1C               	infsnz	WriteStr_I2C@Str,f,c
  5342  005D1C  2A1D               	incf	WriteStr_I2C@Str+1,f,c
  5343                           
  5344                           ;i2c_FRM.c: 233: stat+=Wait_AckI2C();
  5345  005D1E  EC21  F028         	call	_Wait_AckI2C	;wreg free
  5346  005D22                     L5:
  5347  005D22  FFFF               	dw	65535	; assembler added errata NOP
  5348  005D24  2621               	addwf	WriteStr_I2C@stat,f,c
  5349  005D26  061E               	decf	WriteStr_I2C@Str_Size,f,c
  5350  005D28  281E               	incf	WriteStr_I2C@Str_Size,w,c
  5351  005D2A  A4D8               	btfss	status,2,c
  5352  005D2C  D7ED               	goto	l586
  5353                           
  5354                           ;i2c_FRM.c: 234: }
  5355                           ;i2c_FRM.c: 235: StopI2C();
  5356  005D2E  EC42  F028         	call	_StopI2C	;wreg free
  5357                           
  5358                           ;i2c_FRM.c: 236: CloseI2C();
  5359  005D32  EC93  F026         	call	_CloseI2C	;wreg free
  5360                           
  5361                           ;i2c_FRM.c: 237: return (stat);
  5362                           ;	Return value of _WriteStr_I2C is never used
  5363  005D36  0012               	return		;funcret
  5364  005D38  FFFF               	dw	65535	; errata NOP
  5365  005D3A                     __end_of_WriteStr_I2C:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           intcon	equ	0xFF2
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           indf2	equ	0xFDF
  5375                           postinc2	equ	0xFDE
  5376                           postdec2	equ	0xFDD
  5377                           fsr2h	equ	0xFDA
  5378                           fsr2l	equ	0xFD9
  5379                           status	equ	0xFD8
  5380                           
  5381 ;; *************** function _intTObcd *****************
  5382 ;; Defined at:
  5383 ;;		line 65 in file "DS1307.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  v               2    5[BANK0 ] int 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  resultbase      2    9[BANK0 ] int 
  5388 ;;  total           2    7[BANK0 ] int 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  2    5[BANK0 ] int 
  5391 ;; Registers used:
  5392 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5398 ;;      Params:         0       2       0       0       0       0       0
  5399 ;;      Locals:         0       4       0       0       0       0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0
  5401 ;;      Totals:         0       6       0       0       0       0       0
  5402 ;;Total ram usage:        6 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    2
  5405 ;; This function calls:
  5406 ;;		___awdiv
  5407 ;;		___awmod
  5408 ;;		___wmul
  5409 ;; This function is called by:
  5410 ;;		_date_set
  5411 ;;		_time_set
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text13
  5416  006488                     __ptext13:
  5417                           	opt stack 0
  5418  006488                     _intTObcd:
  5419                           	opt stack 0
  5420  006488  FFFF               	dw	65535	; assembler added errata NOP
  5421                           
  5422                           ;DS1307.c: 66: int total = 0;
  5423                           
  5424                           ;incstack = 0
  5425  00648A  0E00               	movlw	0
  5426  00648C  0100               	movlb	0	; () banked
  5427  00648E  6F68               	movwf	(intTObcd@total+1)& (0+255),b
  5428  006490  0E00               	movlw	0
  5429  006492  6F67               	movwf	intTObcd@total& (0+255),b
  5430                           
  5431                           ;DS1307.c: 67: int resultbase = 1;
  5432  006494  0E00               	movlw	0
  5433  006496  0100               	movlb	0	; () banked
  5434  006498  6F6A               	movwf	(intTObcd@resultbase+1)& (0+255),b
  5435  00649A  0E01               	movlw	1
  5436  00649C  6F69               	movwf	intTObcd@resultbase& (0+255),b
  5437                           
  5438                           ;DS1307.c: 68: while(v > 0 ){
  5439  00649E  D033               	goto	l265
  5440  0064A0  FFFF               	dw	65535	; assembler added errata NOP
  5441  0064A2                     l9638:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;DS1307.c: 69: total += resultbase * (v % 10);
  5445  0064A2  0E00               	movlw	0
  5446  0064A4  6E1C               	movwf	___awmod@divisor+1,c
  5447  0064A6  0E0A               	movlw	10
  5448  0064A8  6E1B               	movwf	___awmod@divisor,c
  5449  0064AA  C065  F019         	movff	intTObcd@v,___awmod@dividend
  5450  0064AE  C066  F01A         	movff	intTObcd@v+1,___awmod@dividend+1
  5451  0064B2  EC0D  F030         	call	___awmod	;wreg free
  5452  0064B6  C019  F027         	movff	?___awmod,___wmul@multiplier
  5453  0064BA  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
  5454  0064BE  C069  F029         	movff	intTObcd@resultbase,___wmul@multiplicand
  5455  0064C2  C06A  F02A         	movff	intTObcd@resultbase+1,___wmul@multiplicand+1
  5456  0064C6  EC74  F029         	call	___wmul	;wreg free
  5457  0064CA  5027               	movf	?___wmul,w,c
  5458  0064CC  0100               	movlb	0	; () banked
  5459  0064CE  2767               	addwf	intTObcd@total& (0+255),f,b
  5460  0064D0  5028               	movf	?___wmul+1,w,c
  5461  0064D2  0100               	movlb	0	; () banked
  5462  0064D4  2368               	addwfc	(intTObcd@total+1)& (0+255),f,b
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;DS1307.c: 70: resultbase *= 16;
  5466  0064D6  0100               	movlb	0	; () banked
  5467  0064D8  3B69               	swapf	intTObcd@resultbase& (0+255),f,b
  5468  0064DA  3B6A               	swapf	(intTObcd@resultbase+1)& (0+255),f,b
  5469  0064DC  0EF0               	movlw	240
  5470  0064DE  176A               	andwf	(intTObcd@resultbase+1)& (0+255),f,b
  5471  0064E0  5169               	movf	intTObcd@resultbase& (0+255),w,b
  5472  0064E2  0B0F               	andlw	15
  5473  0064E4  136A               	iorwf	(intTObcd@resultbase+1)& (0+255),f,b
  5474  0064E6  0EF0               	movlw	240
  5475  0064E8  1769               	andwf	intTObcd@resultbase& (0+255),f,b
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;DS1307.c: 71: v /= 10;
  5479  0064EA  C065  F01F         	movff	intTObcd@v,___awdiv@dividend
  5480  0064EE  C066  F020         	movff	intTObcd@v+1,___awdiv@dividend+1
  5481  0064F2  0E00               	movlw	0
  5482  0064F4  6E22               	movwf	___awdiv@divisor+1,c
  5483  0064F6  0E0A               	movlw	10
  5484  0064F8  6E21               	movwf	___awdiv@divisor,c
  5485  0064FA  ECAA  F031         	call	___awdiv	;wreg free
  5486  0064FE  C01F  F065         	movff	?___awdiv,intTObcd@v
  5487  006502  C020  F066         	movff	?___awdiv+1,intTObcd@v+1
  5488  006506                     l265:
  5489  006506  FFFF               	dw	65535	; assembler added errata NOP
  5490  006508  0100               	movlb	0	; () banked
  5491  00650A  BF66               	btfsc	(intTObcd@v+1)& (0+255),7,b
  5492  00650C  D007               	goto	u9460
  5493  00650E  0100               	movlb	0	; () banked
  5494  006510  5166               	movf	(intTObcd@v+1)& (0+255),w,b
  5495  006512  E1C7               	bnz	l9638
  5496  006514  0100               	movlb	0	; () banked
  5497  006516  0565               	decf	intTObcd@v& (0+255),w,b
  5498  006518  B0D8               	btfsc	status,0,c
  5499  00651A  D7C2               	goto	l266
  5500  00651C                     u9460:
  5501  00651C  FFFF               	dw	65535	; assembler added errata NOP
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;DS1307.c: 72: }
  5505                           ;DS1307.c: 74: return total;
  5506  00651E  C067  F065         	movff	intTObcd@total,?_intTObcd
  5507  006522  C068  F066         	movff	intTObcd@total+1,?_intTObcd+1
  5508                           
  5509                           ; BSR set to: 0
  5510  006526  0012               	return		;funcret
  5511  006528  FFFF               	dw	65535	; errata NOP
  5512  00652A                     __end_of_intTObcd:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           intcon	equ	0xFF2
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _reset_var *****************
  5529 ;; Defined at:
  5530 ;;		line 83 in file "Commands.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  var             2  124[BANK0 ] PTR unsigned char 
  5533 ;;		 -> rx_buffer(20), NULL(0), 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5545 ;;      Params:         0       2       0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0
  5548 ;;      Totals:         0       2       0       0       0       0       0
  5549 ;;Total ram usage:        2 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    6
  5552 ;; This function calls:
  5553 ;;		_Get_Voltage_Vin
  5554 ;;		_set_max
  5555 ;;		_set_min
  5556 ;;		_sprintf
  5557 ;;		_strcmp
  5558 ;; This function is called by:
  5559 ;;		_read_command
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text14
  5564  0061A8                     __ptext14:
  5565                           	opt stack 0
  5566  0061A8                     _reset_var:
  5567                           	opt stack 0
  5568  0061A8  FFFF               	dw	65535	; assembler added errata NOP
  5569                           
  5570                           ;Commands.c: 85: if(strcmp(var,"max")==0){
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;incstack = 0
  5574  0061AA  C0DC  F019         	movff	reset_var@var,strcmp@s1
  5575  0061AE  C0DD  F01A         	movff	reset_var@var+1,strcmp@s1+1
  5576  0061B2  0EE5               	movlw	low STR_10
  5577  0061B4  6E1B               	movwf	strcmp@s2,c
  5578  0061B6  0E7F               	movlw	high STR_10
  5579  0061B8  6E1C               	movwf	strcmp@s2+1,c
  5580  0061BA  EC8C  F02C         	call	_strcmp	;wreg free
  5581  0061BE  5019               	movf	?_strcmp,w,c
  5582  0061C0  101A               	iorwf	?_strcmp+1,w,c
  5583  0061C2  A4D8               	btfss	status,2,c
  5584  0061C4  D00B               	goto	l135
  5585                           
  5586                           ;Commands.c: 86: set_max(Get_Voltage_Vin());
  5587  0061C6  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  5588  0061CA  C019  F01C         	movff	?_Get_Voltage_Vin,set_max@val
  5589  0061CE  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_max@val+1
  5590  0061D2  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_max@val+2
  5591  0061D6  EC0F  F028         	call	_set_max	;wreg free
  5592                           
  5593                           ;Commands.c: 87: }else if (strcmp(var,"min")==0){
  5594  0061DA  D028               	goto	l138
  5595  0061DC                     l135:
  5596  0061DC  FFFF               	dw	65535	; assembler added errata NOP
  5597  0061DE  C0DC  F019         	movff	reset_var@var,strcmp@s1
  5598  0061E2  C0DD  F01A         	movff	reset_var@var+1,strcmp@s1+1
  5599  0061E6  0ED9               	movlw	low STR_11
  5600  0061E8  6E1B               	movwf	strcmp@s2,c
  5601  0061EA  0E7F               	movlw	high STR_11
  5602  0061EC  6E1C               	movwf	strcmp@s2+1,c
  5603  0061EE  EC8C  F02C         	call	_strcmp	;wreg free
  5604  0061F2  5019               	movf	?_strcmp,w,c
  5605  0061F4  101A               	iorwf	?_strcmp+1,w,c
  5606  0061F6  A4D8               	btfss	status,2,c
  5607  0061F8  D00B               	goto	l137
  5608                           
  5609                           ;Commands.c: 88: set_min(Get_Voltage_Vin());
  5610  0061FA  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  5611  0061FE  C019  F01C         	movff	?_Get_Voltage_Vin,set_min@val
  5612  006202  C01A  F01D         	movff	?_Get_Voltage_Vin+1,set_min@val+1
  5613  006206  C01B  F01E         	movff	?_Get_Voltage_Vin+2,set_min@val+2
  5614  00620A  EC18  F028         	call	_set_min	;wreg free
  5615                           
  5616                           ;Commands.c: 89: }else{
  5617  00620E  D00E               	goto	l138
  5618  006210                     l137:
  5619  006210  FFFF               	dw	65535	; assembler added errata NOP
  5620                           
  5621                           ;Commands.c: 90: sprintf(buffer,"Error\n");
  5622  006212  C0F6  F0C4         	movff	_buffer,sprintf@wh
  5623  006216  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  5624  00621A  0E69               	movlw	low STR_12
  5625  00621C  0100               	movlb	0	; () banked
  5626  00621E  6FC6               	movwf	sprintf@f& (0+255),b
  5627  006220  0E7F               	movlw	high STR_12
  5628  006222  0100               	movlb	0	; () banked
  5629  006224  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  5630  006226  EC8D  F02F         	call	_sprintf	;wreg free
  5631                           
  5632                           ;Commands.c: 91: TXIE=1;
  5633  00622A  889D               	bsf	3997,4,c	;volatile
  5634  00622C                     l138:
  5635  00622C  FFFF               	dw	65535	; assembler added errata NOP
  5636  00622E  0012               	return		;funcret
  5637  006230  FFFF               	dw	65535	; errata NOP
  5638  006232                     __end_of_reset_var:
  5639                           	opt stack 0
  5640                           tblptru	equ	0xFF8
  5641                           tblptrh	equ	0xFF7
  5642                           tblptrl	equ	0xFF6
  5643                           tablat	equ	0xFF5
  5644                           intcon	equ	0xFF2
  5645                           postinc0	equ	0xFEE
  5646                           wreg	equ	0xFE8
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function _set_min *****************
  5655 ;; Defined at:
  5656 ;;		line 102 in file "Get_Voltages.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  val             3   27[COMRAM] float 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  1    wreg      void 
  5663 ;; Registers used:
  5664 ;;		None
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5670 ;;      Params:         3       0       0       0       0       0       0
  5671 ;;      Locals:         0       0       0       0       0       0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0
  5673 ;;      Totals:         3       0       0       0       0       0       0
  5674 ;;Total ram usage:        3 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    1
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_reset_var
  5681 ;;		_main
  5682 ;;		_reset_max_min
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text15
  5687  005030                     __ptext15:
  5688                           	opt stack 0
  5689  005030                     _set_min:
  5690                           	opt stack 0
  5691  005030  FFFF               	dw	65535	; assembler added errata NOP
  5692                           
  5693                           ;Get_Voltages.c: 103: min=val;
  5694                           
  5695                           ;incstack = 0
  5696  005032  C01C  F125         	movff	set_min@val,_min
  5697  005036  C01D  F126         	movff	set_min@val+1,_min+1
  5698  00503A  C01E  F127         	movff	set_min@val+2,_min+2
  5699  00503E  0012               	return		;funcret
  5700  005040  FFFF               	dw	65535	; errata NOP
  5701  005042                     __end_of_set_min:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           intcon	equ	0xFF2
  5708                           postinc0	equ	0xFEE
  5709                           wreg	equ	0xFE8
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           postdec2	equ	0xFDD
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _set_max *****************
  5718 ;; Defined at:
  5719 ;;		line 98 in file "Get_Voltages.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  val             3   27[COMRAM] float 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;		None
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		None
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5733 ;;      Params:         3       0       0       0       0       0       0
  5734 ;;      Locals:         0       0       0       0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0
  5736 ;;      Totals:         3       0       0       0       0       0       0
  5737 ;;Total ram usage:        3 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_reset_var
  5744 ;;		_main
  5745 ;;		_reset_max_min
  5746 ;; This function uses a non-reentrant model
  5747 ;;
  5748                           
  5749                           	psect	text16
  5750  00501E                     __ptext16:
  5751                           	opt stack 0
  5752  00501E                     _set_max:
  5753                           	opt stack 0
  5754  00501E  FFFF               	dw	65535	; assembler added errata NOP
  5755                           
  5756                           ;Get_Voltages.c: 99: max=val;
  5757                           
  5758                           ;incstack = 0
  5759  005020  C01C  F122         	movff	set_max@val,_max
  5760  005024  C01D  F123         	movff	set_max@val+1,_max+1
  5761  005028  C01E  F124         	movff	set_max@val+2,_max+2
  5762  00502C  0012               	return		;funcret
  5763  00502E  FFFF               	dw	65535	; errata NOP
  5764  005030                     __end_of_set_max:
  5765                           	opt stack 0
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           intcon	equ	0xFF2
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _lcd_display *****************
  5781 ;; Defined at:
  5782 ;;		line 70 in file "Commands.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  var             2    5[BANK0 ] PTR unsigned char 
  5785 ;;		 -> rx_buffer(20), NULL(0), 
  5786 ;;  data            2    7[BANK0 ] PTR unsigned char 
  5787 ;;		 -> rx_buffer(20), NULL(0), 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  val             2    9[BANK0 ] int 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5799 ;;      Params:         0       4       0       0       0       0       0
  5800 ;;      Locals:         0       2       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0
  5802 ;;      Totals:         0       6       0       0       0       0       0
  5803 ;;Total ram usage:        6 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    3
  5806 ;; This function calls:
  5807 ;;		_LCD_SetBackLight_Brightness
  5808 ;;		_LCD_SetContrast
  5809 ;;		_atoi
  5810 ;;		_strcmp
  5811 ;; This function is called by:
  5812 ;;		_read_command
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text17
  5817  005E9E                     __ptext17:
  5818                           	opt stack 0
  5819  005E9E                     _lcd_display:
  5820                           	opt stack 0
  5821  005E9E  FFFF               	dw	65535	; assembler added errata NOP
  5822                           
  5823                           ;Commands.c: 72: int val;
  5824                           ;Commands.c: 74: if(strcmp(var,"contrast")==0){
  5825                           
  5826                           ;incstack = 0
  5827  005EA0  C065  F019         	movff	lcd_display@var,strcmp@s1
  5828  005EA4  C066  F01A         	movff	lcd_display@var+1,strcmp@s1+1
  5829  005EA8  0E51               	movlw	low STR_8
  5830  005EAA  6E1B               	movwf	strcmp@s2,c
  5831  005EAC  0E7F               	movlw	high STR_8
  5832  005EAE  6E1C               	movwf	strcmp@s2+1,c
  5833  005EB0  EC8C  F02C         	call	_strcmp	;wreg free
  5834  005EB4  5019               	movf	?_strcmp,w,c
  5835  005EB6  101A               	iorwf	?_strcmp+1,w,c
  5836  005EB8  A4D8               	btfss	status,2,c
  5837  005EBA  D00F               	goto	l129
  5838                           
  5839                           ;Commands.c: 75: val=atoi(data);
  5840  005EBC  C067  F02D         	movff	lcd_display@data,atoi@s
  5841  005EC0  C068  F02E         	movff	lcd_display@data+1,atoi@s+1
  5842  005EC4  EC50  F038         	call	_atoi	;wreg free
  5843  005EC8  C02D  F069         	movff	?_atoi,lcd_display@val
  5844  005ECC  C02E  F06A         	movff	?_atoi+1,lcd_display@val+1
  5845                           
  5846                           ;Commands.c: 76: LCD_SetContrast((char)val);
  5847  005ED0  0100               	movlb	0	; () banked
  5848  005ED2  5169               	movf	lcd_display@val& (0+255),w,b
  5849  005ED4  EC1C  F02B         	call	_LCD_SetContrast
  5850                           
  5851                           ;Commands.c: 77: }
  5852  005ED8  D01D               	goto	l131
  5853  005EDA                     l129:
  5854  005EDA  FFFF               	dw	65535	; assembler added errata NOP
  5855                           
  5856                           ;Commands.c: 78: else if(strcmp(var,"backlight")==0){
  5857  005EDC  C065  F019         	movff	lcd_display@var,strcmp@s1
  5858  005EE0  C066  F01A         	movff	lcd_display@var+1,strcmp@s1+1
  5859  005EE4  0E2C               	movlw	low STR_9
  5860  005EE6  6E1B               	movwf	strcmp@s2,c
  5861  005EE8  0E7F               	movlw	high STR_9
  5862  005EEA  6E1C               	movwf	strcmp@s2+1,c
  5863  005EEC  EC8C  F02C         	call	_strcmp	;wreg free
  5864  005EF0  5019               	movf	?_strcmp,w,c
  5865  005EF2  101A               	iorwf	?_strcmp+1,w,c
  5866  005EF4  A4D8               	btfss	status,2,c
  5867  005EF6  D00E               	goto	l131
  5868                           
  5869                           ;Commands.c: 79: val=atoi(data);
  5870  005EF8  C067  F02D         	movff	lcd_display@data,atoi@s
  5871  005EFC  C068  F02E         	movff	lcd_display@data+1,atoi@s+1
  5872  005F00  EC50  F038         	call	_atoi	;wreg free
  5873  005F04  C02D  F069         	movff	?_atoi,lcd_display@val
  5874  005F08  C02E  F06A         	movff	?_atoi+1,lcd_display@val+1
  5875                           
  5876                           ;Commands.c: 80: LCD_SetBackLight_Brightness((char)val);
  5877  005F0C  0100               	movlb	0	; () banked
  5878  005F0E  5169               	movf	lcd_display@val& (0+255),w,b
  5879  005F10  ECFC  F02A         	call	_LCD_SetBackLight_Brightness
  5880  005F14                     l131:
  5881  005F14  FFFF               	dw	65535	; assembler added errata NOP
  5882  005F16  0012               	return		;funcret
  5883  005F18  FFFF               	dw	65535	; errata NOP
  5884  005F1A                     __end_of_lcd_display:
  5885                           	opt stack 0
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           intcon	equ	0xFF2
  5891                           postinc0	equ	0xFEE
  5892                           wreg	equ	0xFE8
  5893                           indf2	equ	0xFDF
  5894                           postinc2	equ	0xFDE
  5895                           postdec2	equ	0xFDD
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _atoi *****************
  5901 ;; Defined at:
  5902 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atoi.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  s               2   44[COMRAM] PTR const unsigned char 
  5905 ;;		 -> rx_buffer(20), NULL(0), 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  a               2    3[BANK0 ] int 
  5908 ;;  sign            1    2[BANK0 ] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  2   44[COMRAM] int 
  5911 ;; Registers used:
  5912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5918 ;;      Params:         2       0       0       0       0       0       0
  5919 ;;      Locals:         0       3       0       0       0       0       0
  5920 ;;      Temps:          0       2       0       0       0       0       0
  5921 ;;      Totals:         2       5       0       0       0       0       0
  5922 ;;Total ram usage:        7 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    2
  5925 ;; This function calls:
  5926 ;;		___wmul
  5927 ;;		_isdigit
  5928 ;; This function is called by:
  5929 ;;		_lcd_display
  5930 ;;		_date_set
  5931 ;;		_time_set
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text18
  5936  0070A0                     __ptext18:
  5937                           	opt stack 0
  5938  0070A0                     _atoi:
  5939                           	opt stack 0
  5940  0070A0  FFFF               	dw	65535	; assembler added errata NOP
  5941                           
  5942                           ;incstack = 0
  5943  0070A2  D003               	goto	l1536
  5944  0070A4  FFFF               	dw	65535	; assembler added errata NOP
  5945  0070A6  4A2D               	infsnz	atoi@s,f,c
  5946  0070A8  2A2E               	incf	atoi@s+1,f,c
  5947  0070AA                     l1536:
  5948  0070AA  FFFF               	dw	65535	; assembler added errata NOP
  5949  0070AC  C02D  FFD9         	movff	atoi@s,fsr2l
  5950  0070B0  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5951  0070B4  0E20               	movlw	32
  5952  0070B6  18DE               	xorwf	postinc2,w,c
  5953  0070B8  B4D8               	btfsc	status,2,c
  5954  0070BA  D7F4               	goto	l1537
  5955  0070BC  C02D  FFD9         	movff	atoi@s,fsr2l
  5956  0070C0  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5957  0070C4  0E09               	movlw	9
  5958  0070C6  18DE               	xorwf	postinc2,w,c
  5959  0070C8  B4D8               	btfsc	status,2,c
  5960  0070CA  D7EC               	goto	l1537
  5961  0070CC  0E00               	movlw	0
  5962  0070CE  0100               	movlb	0	; () banked
  5963  0070D0  6F64               	movwf	(atoi@a+1)& (0+255),b
  5964  0070D2  0E00               	movlw	0
  5965  0070D4  6F63               	movwf	atoi@a& (0+255),b
  5966  0070D6  0E00               	movlw	0
  5967  0070D8  0100               	movlb	0	; () banked
  5968  0070DA  6F62               	movwf	atoi@sign& (0+255),b
  5969                           
  5970                           ; BSR set to: 0
  5971  0070DC  C02D  FFD9         	movff	atoi@s,fsr2l
  5972  0070E0  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5973  0070E4  0E2D               	movlw	45
  5974  0070E6  18DE               	xorwf	postinc2,w,c
  5975  0070E8  A4D8               	btfss	status,2,c
  5976  0070EA  D003               	goto	l1539
  5977                           
  5978                           ; BSR set to: 0
  5979  0070EC  0100               	movlb	0	; () banked
  5980  0070EE  2B62               	incf	atoi@sign& (0+255),f,b
  5981  0070F0  D02D               	goto	l9610
  5982  0070F2                     l1539:
  5983  0070F2  FFFF               	dw	65535	; assembler added errata NOP
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988  0070F4  C02D  FFD9         	movff	atoi@s,fsr2l
  5989  0070F8  C02E  FFDA         	movff	atoi@s+1,fsr2h
  5990  0070FC  0E2B               	movlw	43
  5991  0070FE  18DE               	xorwf	postinc2,w,c
  5992  007100  A4D8               	btfss	status,2,c
  5993  007102  D027               	goto	l1542
  5994  007104  D023               	goto	l9610
  5995  007106  FFFF               	dw	65535	; assembler added errata NOP
  5996                           
  5997                           ; BSR set to: 0
  5998  007108  C063  F027         	movff	atoi@a,___wmul@multiplier
  5999  00710C  C064  F028         	movff	atoi@a+1,___wmul@multiplier+1
  6000  007110  0E00               	movlw	0
  6001  007112  6E2A               	movwf	___wmul@multiplicand+1,c
  6002  007114  0E0A               	movlw	10
  6003  007116  6E29               	movwf	___wmul@multiplicand,c
  6004  007118  EC74  F029         	call	___wmul	;wreg free
  6005  00711C  C02D  FFD9         	movff	atoi@s,fsr2l
  6006  007120  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6007  007124  50DF               	movf	indf2,w,c
  6008  007126  0100               	movlb	0	; () banked
  6009  007128  6F60               	movwf	??_atoi& (0+255),b
  6010  00712A  6B61               	clrf	(??_atoi+1)& (0+255),b
  6011  00712C  5027               	movf	?___wmul,w,c
  6012  00712E  0100               	movlb	0	; () banked
  6013  007130  2760               	addwf	??_atoi& (0+255),f,b
  6014  007132  5028               	movf	?___wmul+1,w,c
  6015  007134  0100               	movlb	0	; () banked
  6016  007136  2361               	addwfc	(??_atoi+1)& (0+255),f,b
  6017  007138  0ED0               	movlw	208
  6018  00713A  0100               	movlb	0	; () banked
  6019  00713C  2560               	addwf	??_atoi& (0+255),w,b
  6020  00713E  0100               	movlb	0	; () banked
  6021  007140  6F63               	movwf	atoi@a& (0+255),b
  6022  007142  0EFF               	movlw	255
  6023  007144  0100               	movlb	0	; () banked
  6024  007146  2161               	addwfc	(??_atoi+1)& (0+255),w,b
  6025  007148  0100               	movlb	0	; () banked
  6026  00714A  6F64               	movwf	(atoi@a+1)& (0+255),b
  6027  00714C                     l9610:
  6028  00714C  FFFF               	dw	65535	; assembler added errata NOP
  6029                           
  6030                           ; BSR set to: 0
  6031  00714E  4A2D               	infsnz	atoi@s,f,c
  6032  007150  2A2E               	incf	atoi@s+1,f,c
  6033  007152                     l1542:
  6034  007152  FFFF               	dw	65535	; assembler added errata NOP
  6035                           
  6036                           ; BSR set to: 0
  6037                           
  6038                           ; BSR set to: 0
  6039  007154  C02D  FFD9         	movff	atoi@s,fsr2l
  6040  007158  C02E  FFDA         	movff	atoi@s+1,fsr2h
  6041  00715C  50DF               	movf	indf2,w,c
  6042  00715E  ECEE  F028         	call	_isdigit
  6043  007162  B0D8               	btfsc	status,0,c
  6044  007164  D7D0               	goto	l1543
  6045  007166  0100               	movlb	0	; () banked
  6046  007168  5162               	movf	atoi@sign& (0+255),w,b
  6047  00716A  0100               	movlb	0	; () banked
  6048  00716C  B4D8               	btfsc	status,2,c
  6049  00716E  D00E               	goto	l1545
  6050                           
  6051                           ; BSR set to: 0
  6052  007170  C063  F060         	movff	atoi@a,??_atoi
  6053  007174  C064  F061         	movff	atoi@a+1,??_atoi+1
  6054  007178  0100               	movlb	0	; () banked
  6055  00717A  1F60               	comf	??_atoi& (0+255),f,b
  6056  00717C  1F61               	comf	(??_atoi+1)& (0+255),f,b
  6057  00717E  4B60               	infsnz	??_atoi& (0+255),f,b
  6058  007180  2B61               	incf	(??_atoi+1)& (0+255),f,b
  6059  007182  C060  F02D         	movff	??_atoi,?_atoi
  6060  007186  C061  F02E         	movff	??_atoi+1,?_atoi+1
  6061  00718A  D005               	goto	l1546
  6062  00718C                     l1545:
  6063  00718C  FFFF               	dw	65535	; assembler added errata NOP
  6064                           
  6065                           ; BSR set to: 0
  6066  00718E  C063  F02D         	movff	atoi@a,?_atoi
  6067  007192  C064  F02E         	movff	atoi@a+1,?_atoi+1
  6068  007196                     l1546:
  6069  007196  FFFF               	dw	65535	; assembler added errata NOP
  6070                           
  6071                           ; BSR set to: 0
  6072  007198  0012               	return		;funcret
  6073  00719A  FFFF               	dw	65535	; errata NOP
  6074  00719C                     __end_of_atoi:
  6075                           	opt stack 0
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           intcon	equ	0xFF2
  6081                           postinc0	equ	0xFEE
  6082                           wreg	equ	0xFE8
  6083                           indf2	equ	0xFDF
  6084                           postinc2	equ	0xFDE
  6085                           postdec2	equ	0xFDD
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _LCD_SetContrast *****************
  6091 ;; Defined at:
  6092 ;;		line 132 in file "LCD2S.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;  val             1    wreg     unsigned char 
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;  val             1   26[COMRAM] unsigned char 
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6106 ;;      Params:         0       0       0       0       0       0       0
  6107 ;;      Locals:         1       0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0
  6109 ;;      Totals:         1       0       0       0       0       0       0
  6110 ;;Total ram usage:        1 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    2
  6113 ;; This function calls:
  6114 ;;		_CloseI2C
  6115 ;;		_IdleI2C
  6116 ;;		_OpenI2C
  6117 ;;		_StartI2C
  6118 ;;		_StopI2C
  6119 ;;		_Wait_AckI2C
  6120 ;;		_WriteI2C
  6121 ;; This function is called by:
  6122 ;;		_lcd_display
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text19
  6127  005638                     __ptext19:
  6128                           	opt stack 0
  6129  005638                     _LCD_SetContrast:
  6130                           	opt stack 0
  6131  005638  FFFF               	dw	65535	; assembler added errata NOP
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;incstack = 0
  6135                           ;LCD_SetContrast@val stored from wreg
  6136  00563A  6E1B               	movwf	LCD_SetContrast@val,c
  6137                           
  6138                           ;LCD2S.c: 134: OpenI2C(8, 0xC0);
  6139  00563C  0EC0               	movlw	192
  6140  00563E  6E19               	movwf	OpenI2C@slew,c
  6141  005640  0E08               	movlw	8
  6142  005642  ECCB  F028         	call	_OpenI2C
  6143                           
  6144                           ;LCD2S.c: 135: IdleI2C();
  6145  005646  ECDC  F028         	call	_IdleI2C	;wreg free
  6146                           
  6147                           ;LCD2S.c: 136: StartI2C();
  6148  00564A  EC35  F028         	call	_StartI2C	;wreg free
  6149                           
  6150                           ;LCD2S.c: 137: WriteI2C(0x50);
  6151  00564E  0E50               	movlw	80
  6152  005650  EC9E  F029         	call	_WriteI2C
  6153                           
  6154                           ;LCD2S.c: 138: Wait_AckI2C();
  6155  005654  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6156                           
  6157                           ;LCD2S.c: 139: WriteI2C(0x82);
  6158  005658  0E82               	movlw	130
  6159  00565A  EC9E  F029         	call	_WriteI2C
  6160                           
  6161                           ;LCD2S.c: 140: Wait_AckI2C();
  6162  00565E  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6163                           
  6164                           ;LCD2S.c: 141: WriteI2C(val);
  6165  005662  501B               	movf	LCD_SetContrast@val,w,c
  6166  005664  EC9E  F029         	call	_WriteI2C
  6167                           
  6168                           ;LCD2S.c: 142: Wait_AckI2C();
  6169  005668  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6170                           
  6171                           ;LCD2S.c: 143: StopI2C();
  6172  00566C  EC42  F028         	call	_StopI2C	;wreg free
  6173                           
  6174                           ;LCD2S.c: 144: CloseI2C();
  6175  005670  EC93  F026         	call	_CloseI2C	;wreg free
  6176  005674  0012               	return		;funcret
  6177  005676  FFFF               	dw	65535	; errata NOP
  6178  005678                     __end_of_LCD_SetContrast:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           intcon	equ	0xFF2
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _LCD_SetBackLight_Brightness *****************
  6195 ;; Defined at:
  6196 ;;		line 71 in file "LCD2S.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  brightness      1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  brightness      1   26[COMRAM] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6210 ;;      Params:         0       0       0       0       0       0       0
  6211 ;;      Locals:         1       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0
  6213 ;;      Totals:         1       0       0       0       0       0       0
  6214 ;;Total ram usage:        1 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    2
  6217 ;; This function calls:
  6218 ;;		_CloseI2C
  6219 ;;		_IdleI2C
  6220 ;;		_OpenI2C
  6221 ;;		_StartI2C
  6222 ;;		_StopI2C
  6223 ;;		_Wait_AckI2C
  6224 ;;		_WriteI2C
  6225 ;; This function is called by:
  6226 ;;		_lcd_display
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text20
  6231  0055F8                     __ptext20:
  6232                           	opt stack 0
  6233  0055F8                     _LCD_SetBackLight_Brightness:
  6234                           	opt stack 0
  6235  0055F8  FFFF               	dw	65535	; assembler added errata NOP
  6236                           
  6237                           ;incstack = 0
  6238                           ;LCD_SetBackLight_Brightness@brightness stored from wreg
  6239  0055FA  6E1B               	movwf	LCD_SetBackLight_Brightness@brightness,c
  6240                           
  6241                           ;LCD2S.c: 73: OpenI2C(8, 0xC0);
  6242  0055FC  0EC0               	movlw	192
  6243  0055FE  6E19               	movwf	OpenI2C@slew,c
  6244  005600  0E08               	movlw	8
  6245  005602  ECCB  F028         	call	_OpenI2C
  6246                           
  6247                           ;LCD2S.c: 74: IdleI2C();
  6248  005606  ECDC  F028         	call	_IdleI2C	;wreg free
  6249                           
  6250                           ;LCD2S.c: 75: StartI2C();
  6251  00560A  EC35  F028         	call	_StartI2C	;wreg free
  6252                           
  6253                           ;LCD2S.c: 76: WriteI2C(0x50);
  6254  00560E  0E50               	movlw	80
  6255  005610  EC9E  F029         	call	_WriteI2C
  6256                           
  6257                           ;LCD2S.c: 77: Wait_AckI2C();
  6258  005614  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6259                           
  6260                           ;LCD2S.c: 78: WriteI2C(0x81);
  6261  005618  0E81               	movlw	129
  6262  00561A  EC9E  F029         	call	_WriteI2C
  6263                           
  6264                           ;LCD2S.c: 79: Wait_AckI2C();
  6265  00561E  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6266                           
  6267                           ;LCD2S.c: 80: WriteI2C(brightness);
  6268  005622  501B               	movf	LCD_SetBackLight_Brightness@brightness,w,c
  6269  005624  EC9E  F029         	call	_WriteI2C
  6270                           
  6271                           ;LCD2S.c: 81: Wait_AckI2C();
  6272  005628  EC21  F028         	call	_Wait_AckI2C	;wreg free
  6273                           
  6274                           ;LCD2S.c: 82: StopI2C();
  6275  00562C  EC42  F028         	call	_StopI2C	;wreg free
  6276                           
  6277                           ;LCD2S.c: 83: CloseI2C();
  6278  005630  EC93  F026         	call	_CloseI2C	;wreg free
  6279  005634  0012               	return		;funcret
  6280  005636  FFFF               	dw	65535	; errata NOP
  6281  005638                     __end_of_LCD_SetBackLight_Brightness:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           intcon	equ	0xFF2
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _get_list *****************
  6298 ;; Defined at:
  6299 ;;		line 206 in file "Commands.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  var             2  124[BANK0 ] PTR unsigned char 
  6302 ;;		 -> rx_buffer(20), NULL(0), 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  systime         4  128[BANK0 ] long 
  6305 ;;  t               2  132[BANK0 ] PTR struct tm
  6306 ;;		 -> gmtime@tim(18), 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  1    wreg      void 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6316 ;;      Params:         0       2       0       0       0       0       0
  6317 ;;      Locals:         0       6       0       0       0       0       0
  6318 ;;      Temps:          0       2       0       0       0       0       0
  6319 ;;      Totals:         0      10       0       0       0       0       0
  6320 ;;Total ram usage:       10 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    6
  6323 ;; This function calls:
  6324 ;;		_Get_Control_Voltage
  6325 ;;		_Get_Voltage_Vin
  6326 ;;		_get_LP_RC_Constant
  6327 ;;		_get_PID_Kp
  6328 ;;		_get_PID_T
  6329 ;;		_get_PID_Td
  6330 ;;		_get_PID_Ti
  6331 ;;		_get_PID_deadband
  6332 ;;		_get_PID_output
  6333 ;;		_get_PID_setpoint
  6334 ;;		_get_max_VL
  6335 ;;		_get_min_VL
  6336 ;;		_localtime
  6337 ;;		_sprintf
  6338 ;;		_strcmp
  6339 ;;		_time
  6340 ;; This function is called by:
  6341 ;;		_read_command
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text21
  6346  0010E6                     __ptext21:
  6347                           	opt stack 0
  6348  0010E6                     _get_list:
  6349                           	opt stack 0
  6350  0010E6  FFFF               	dw	65535	; assembler added errata NOP
  6351                           
  6352                           ;Commands.c: 208: time_t systime;
  6353                           ;Commands.c: 209: struct tm *t;
  6354                           ;Commands.c: 211: if(strcmp(var,"kp")==0){
  6355                           
  6356                           ;incstack = 0
  6357  0010E8  C0DC  F019         	movff	get_list@var,strcmp@s1
  6358  0010EC  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6359  0010F0  0EF5               	movlw	low STR_22
  6360  0010F2  6E1B               	movwf	strcmp@s2,c
  6361  0010F4  0E7F               	movlw	high STR_22
  6362  0010F6  6E1C               	movwf	strcmp@s2+1,c
  6363  0010F8  EC8C  F02C         	call	_strcmp	;wreg free
  6364  0010FC  5019               	movf	?_strcmp,w,c
  6365  0010FE  101A               	iorwf	?_strcmp+1,w,c
  6366  001100  A4D8               	btfss	status,2,c
  6367  001102  D015               	goto	l186
  6368                           
  6369                           ;Commands.c: 212: sprintf(buffer,"%.1f\n",get_PID_Kp());
  6370  001104  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6371  001108  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6372  00110C  0E77               	movlw	low STR_35
  6373  00110E  0100               	movlb	0	; () banked
  6374  001110  6FC6               	movwf	sprintf@f& (0+255),b
  6375  001112  0E7F               	movlw	high STR_35
  6376  001114  0100               	movlb	0	; () banked
  6377  001116  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6378  001118  EC7F  F027         	call	_get_PID_Kp	;wreg free
  6379  00111C  C019  F0C8         	movff	?_get_PID_Kp,?_sprintf+4
  6380  001120  C01A  F0C9         	movff	?_get_PID_Kp+1,?_sprintf+5
  6381  001124  C01B  F0CA         	movff	?_get_PID_Kp+2,?_sprintf+6
  6382  001128  EC8D  F02F         	call	_sprintf	;wreg free
  6383  00112C  D2DC               	goto	l10768
  6384  00112E                     l186:
  6385  00112E  FFFF               	dw	65535	; assembler added errata NOP
  6386                           
  6387                           ;Commands.c: 215: else if(strcmp(var,"ti")==0){
  6388  001130  C0DC  F019         	movff	get_list@var,strcmp@s1
  6389  001134  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6390  001138  0EF2               	movlw	low STR_23
  6391  00113A  6E1B               	movwf	strcmp@s2,c
  6392  00113C  0E7F               	movlw	high STR_23
  6393  00113E  6E1C               	movwf	strcmp@s2+1,c
  6394  001140  EC8C  F02C         	call	_strcmp	;wreg free
  6395  001144  5019               	movf	?_strcmp,w,c
  6396  001146  101A               	iorwf	?_strcmp+1,w,c
  6397  001148  A4D8               	btfss	status,2,c
  6398  00114A  D015               	goto	l188
  6399                           
  6400                           ;Commands.c: 216: sprintf(buffer,"%.1f\n",get_PID_Ti());
  6401  00114C  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6402  001150  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6403  001154  0E77               	movlw	low STR_35
  6404  001156  0100               	movlb	0	; () banked
  6405  001158  6FC6               	movwf	sprintf@f& (0+255),b
  6406  00115A  0E7F               	movlw	high STR_35
  6407  00115C  0100               	movlb	0	; () banked
  6408  00115E  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6409  001160  EC9A  F027         	call	_get_PID_Ti	;wreg free
  6410  001164  C019  F0C8         	movff	?_get_PID_Ti,?_sprintf+4
  6411  001168  C01A  F0C9         	movff	?_get_PID_Ti+1,?_sprintf+5
  6412  00116C  C01B  F0CA         	movff	?_get_PID_Ti+2,?_sprintf+6
  6413  001170  EC8D  F02F         	call	_sprintf	;wreg free
  6414  001174  D2B8               	goto	l10768
  6415  001176                     l188:
  6416  001176  FFFF               	dw	65535	; assembler added errata NOP
  6417                           
  6418                           ;Commands.c: 219: else if(strcmp(var,"td")==0){
  6419  001178  C0DC  F019         	movff	get_list@var,strcmp@s1
  6420  00117C  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6421  001180  0EEF               	movlw	low STR_24
  6422  001182  6E1B               	movwf	strcmp@s2,c
  6423  001184  0E7F               	movlw	high STR_24
  6424  001186  6E1C               	movwf	strcmp@s2+1,c
  6425  001188  EC8C  F02C         	call	_strcmp	;wreg free
  6426  00118C  5019               	movf	?_strcmp,w,c
  6427  00118E  101A               	iorwf	?_strcmp+1,w,c
  6428  001190  A4D8               	btfss	status,2,c
  6429  001192  D015               	goto	l190
  6430                           
  6431                           ;Commands.c: 220: sprintf(buffer,"%.1f\n",get_PID_Td());
  6432  001194  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6433  001198  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6434  00119C  0E77               	movlw	low STR_35
  6435  00119E  0100               	movlb	0	; () banked
  6436  0011A0  6FC6               	movwf	sprintf@f& (0+255),b
  6437  0011A2  0E7F               	movlw	high STR_35
  6438  0011A4  0100               	movlb	0	; () banked
  6439  0011A6  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6440  0011A8  EC91  F027         	call	_get_PID_Td	;wreg free
  6441  0011AC  C019  F0C8         	movff	?_get_PID_Td,?_sprintf+4
  6442  0011B0  C01A  F0C9         	movff	?_get_PID_Td+1,?_sprintf+5
  6443  0011B4  C01B  F0CA         	movff	?_get_PID_Td+2,?_sprintf+6
  6444  0011B8  EC8D  F02F         	call	_sprintf	;wreg free
  6445  0011BC  D294               	goto	l10768
  6446  0011BE                     l190:
  6447  0011BE  FFFF               	dw	65535	; assembler added errata NOP
  6448                           
  6449                           ;Commands.c: 223: else if(strcmp(var,"sample_t")==0){
  6450  0011C0  C0DC  F019         	movff	get_list@var,strcmp@s1
  6451  0011C4  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6452  0011C8  0E3F               	movlw	low STR_40
  6453  0011CA  6E1B               	movwf	strcmp@s2,c
  6454  0011CC  0E7F               	movlw	high STR_40
  6455  0011CE  6E1C               	movwf	strcmp@s2+1,c
  6456  0011D0  EC8C  F02C         	call	_strcmp	;wreg free
  6457  0011D4  5019               	movf	?_strcmp,w,c
  6458  0011D6  101A               	iorwf	?_strcmp+1,w,c
  6459  0011D8  A4D8               	btfss	status,2,c
  6460  0011DA  D015               	goto	l192
  6461                           
  6462                           ;Commands.c: 224: sprintf(buffer,"%.1f\n",get_PID_T());
  6463  0011DC  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6464  0011E0  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6465  0011E4  0E77               	movlw	low STR_35
  6466  0011E6  0100               	movlb	0	; () banked
  6467  0011E8  6FC6               	movwf	sprintf@f& (0+255),b
  6468  0011EA  0E7F               	movlw	high STR_35
  6469  0011EC  0100               	movlb	0	; () banked
  6470  0011EE  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6471  0011F0  EC88  F027         	call	_get_PID_T	;wreg free
  6472  0011F4  C019  F0C8         	movff	?_get_PID_T,?_sprintf+4
  6473  0011F8  C01A  F0C9         	movff	?_get_PID_T+1,?_sprintf+5
  6474  0011FC  C01B  F0CA         	movff	?_get_PID_T+2,?_sprintf+6
  6475  001200  EC8D  F02F         	call	_sprintf	;wreg free
  6476  001204  D270               	goto	l10768
  6477  001206                     l192:
  6478  001206  FFFF               	dw	65535	; assembler added errata NOP
  6479                           
  6480                           ;Commands.c: 227: else if(strcmp(var,"setpoint")==0){
  6481  001208  C0DC  F019         	movff	get_list@var,strcmp@s1
  6482  00120C  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6483  001210  0E48               	movlw	low STR_26
  6484  001212  6E1B               	movwf	strcmp@s2,c
  6485  001214  0E7F               	movlw	high STR_26
  6486  001216  6E1C               	movwf	strcmp@s2+1,c
  6487  001218  EC8C  F02C         	call	_strcmp	;wreg free
  6488  00121C  5019               	movf	?_strcmp,w,c
  6489  00121E  101A               	iorwf	?_strcmp+1,w,c
  6490  001220  A4D8               	btfss	status,2,c
  6491  001222  D015               	goto	l194
  6492                           
  6493                           ;Commands.c: 228: sprintf(buffer,"%.1f\n",get_PID_setpoint());
  6494  001224  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6495  001228  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6496  00122C  0E77               	movlw	low STR_35
  6497  00122E  0100               	movlb	0	; () banked
  6498  001230  6FC6               	movwf	sprintf@f& (0+255),b
  6499  001232  0E7F               	movlw	high STR_35
  6500  001234  0100               	movlb	0	; () banked
  6501  001236  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6502  001238  ECA3  F027         	call	_get_PID_setpoint	;wreg free
  6503  00123C  C019  F0C8         	movff	?_get_PID_setpoint,?_sprintf+4
  6504  001240  C01A  F0C9         	movff	?_get_PID_setpoint+1,?_sprintf+5
  6505  001244  C01B  F0CA         	movff	?_get_PID_setpoint+2,?_sprintf+6
  6506  001248  EC8D  F02F         	call	_sprintf	;wreg free
  6507  00124C  D24C               	goto	l10768
  6508  00124E                     l194:
  6509  00124E  FFFF               	dw	65535	; assembler added errata NOP
  6510                           
  6511                           ;Commands.c: 231: else if(strcmp(var,"deadband")==0){
  6512  001250  C0DC  F019         	movff	get_list@var,strcmp@s1
  6513  001254  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6514  001258  0E36               	movlw	low STR_27
  6515  00125A  6E1B               	movwf	strcmp@s2,c
  6516  00125C  0E7F               	movlw	high STR_27
  6517  00125E  6E1C               	movwf	strcmp@s2+1,c
  6518  001260  EC8C  F02C         	call	_strcmp	;wreg free
  6519  001264  5019               	movf	?_strcmp,w,c
  6520  001266  101A               	iorwf	?_strcmp+1,w,c
  6521  001268  A4D8               	btfss	status,2,c
  6522  00126A  D015               	goto	l196
  6523                           
  6524                           ;Commands.c: 232: sprintf(buffer,"%.1f\n",get_PID_deadband());
  6525  00126C  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6526  001270  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6527  001274  0E77               	movlw	low STR_35
  6528  001276  0100               	movlb	0	; () banked
  6529  001278  6FC6               	movwf	sprintf@f& (0+255),b
  6530  00127A  0E7F               	movlw	high STR_35
  6531  00127C  0100               	movlb	0	; () banked
  6532  00127E  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6533  001280  ECB9  F026         	call	_get_PID_deadband	;wreg free
  6534  001284  C019  F0C8         	movff	?_get_PID_deadband,?_sprintf+4
  6535  001288  C01A  F0C9         	movff	?_get_PID_deadband+1,?_sprintf+5
  6536  00128C  C01B  F0CA         	movff	?_get_PID_deadband+2,?_sprintf+6
  6537  001290  EC8D  F02F         	call	_sprintf	;wreg free
  6538  001294  D228               	goto	l10768
  6539  001296                     l196:
  6540  001296  FFFF               	dw	65535	; assembler added errata NOP
  6541                           
  6542                           ;Commands.c: 235: else if(strcmp(var,"rc")==0){
  6543  001298  C0DC  F019         	movff	get_list@var,strcmp@s1
  6544  00129C  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6545  0012A0  0EE9               	movlw	low STR_28
  6546  0012A2  6E1B               	movwf	strcmp@s2,c
  6547  0012A4  0E7F               	movlw	high STR_28
  6548  0012A6  6E1C               	movwf	strcmp@s2+1,c
  6549  0012A8  EC8C  F02C         	call	_strcmp	;wreg free
  6550  0012AC  5019               	movf	?_strcmp,w,c
  6551  0012AE  101A               	iorwf	?_strcmp+1,w,c
  6552  0012B0  A4D8               	btfss	status,2,c
  6553  0012B2  D015               	goto	l198
  6554                           
  6555                           ;Commands.c: 236: sprintf(buffer,"%.2f\n",get_LP_RC_Constant());
  6556  0012B4  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6557  0012B8  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6558  0012BC  0E7D               	movlw	low STR_47
  6559  0012BE  0100               	movlb	0	; () banked
  6560  0012C0  6FC6               	movwf	sprintf@f& (0+255),b
  6561  0012C2  0E7F               	movlw	high STR_47
  6562  0012C4  0100               	movlb	0	; () banked
  6563  0012C6  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6564  0012C8  EC76  F027         	call	_get_LP_RC_Constant	;wreg free
  6565  0012CC  C019  F0C8         	movff	?_get_LP_RC_Constant,?_sprintf+4
  6566  0012D0  C01A  F0C9         	movff	?_get_LP_RC_Constant+1,?_sprintf+5
  6567  0012D4  C01B  F0CA         	movff	?_get_LP_RC_Constant+2,?_sprintf+6
  6568  0012D8  EC8D  F02F         	call	_sprintf	;wreg free
  6569  0012DC  D204               	goto	l10768
  6570  0012DE                     l198:
  6571  0012DE  FFFF               	dw	65535	; assembler added errata NOP
  6572                           
  6573                           ;Commands.c: 239: else if(strcmp(var,"max")==0){
  6574  0012E0  C0DC  F019         	movff	get_list@var,strcmp@s1
  6575  0012E4  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6576  0012E8  0EE5               	movlw	low STR_10
  6577  0012EA  6E1B               	movwf	strcmp@s2,c
  6578  0012EC  0E7F               	movlw	high STR_10
  6579  0012EE  6E1C               	movwf	strcmp@s2+1,c
  6580  0012F0  EC8C  F02C         	call	_strcmp	;wreg free
  6581  0012F4  5019               	movf	?_strcmp,w,c
  6582  0012F6  101A               	iorwf	?_strcmp+1,w,c
  6583  0012F8  A4D8               	btfss	status,2,c
  6584  0012FA  D015               	goto	l200
  6585                           
  6586                           ;Commands.c: 240: sprintf(buffer,"%.1f\n",get_max_VL());
  6587  0012FC  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6588  001300  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6589  001304  0E77               	movlw	low STR_35
  6590  001306  0100               	movlb	0	; () banked
  6591  001308  6FC6               	movwf	sprintf@f& (0+255),b
  6592  00130A  0E7F               	movlw	high STR_35
  6593  00130C  0100               	movlb	0	; () banked
  6594  00130E  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6595  001310  ECF4  F027         	call	_get_max_VL	;wreg free
  6596  001314  C019  F0C8         	movff	?_get_max_VL,?_sprintf+4
  6597  001318  C01A  F0C9         	movff	?_get_max_VL+1,?_sprintf+5
  6598  00131C  C01B  F0CA         	movff	?_get_max_VL+2,?_sprintf+6
  6599  001320  EC8D  F02F         	call	_sprintf	;wreg free
  6600  001324  D1E0               	goto	l10768
  6601  001326                     l200:
  6602  001326  FFFF               	dw	65535	; assembler added errata NOP
  6603                           
  6604                           ;Commands.c: 243: else if(strcmp(var,"min")==0){
  6605  001328  C0DC  F019         	movff	get_list@var,strcmp@s1
  6606  00132C  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6607  001330  0ED9               	movlw	low STR_11
  6608  001332  6E1B               	movwf	strcmp@s2,c
  6609  001334  0E7F               	movlw	high STR_11
  6610  001336  6E1C               	movwf	strcmp@s2+1,c
  6611  001338  EC8C  F02C         	call	_strcmp	;wreg free
  6612  00133C  5019               	movf	?_strcmp,w,c
  6613  00133E  101A               	iorwf	?_strcmp+1,w,c
  6614  001340  A4D8               	btfss	status,2,c
  6615  001342  D015               	goto	l202
  6616                           
  6617                           ;Commands.c: 244: sprintf(buffer,"%.1f\n",get_min_VL());
  6618  001344  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6619  001348  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6620  00134C  0E77               	movlw	low STR_35
  6621  00134E  0100               	movlb	0	; () banked
  6622  001350  6FC6               	movwf	sprintf@f& (0+255),b
  6623  001352  0E7F               	movlw	high STR_35
  6624  001354  0100               	movlb	0	; () banked
  6625  001356  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6626  001358  ECFD  F027         	call	_get_min_VL	;wreg free
  6627  00135C  C019  F0C8         	movff	?_get_min_VL,?_sprintf+4
  6628  001360  C01A  F0C9         	movff	?_get_min_VL+1,?_sprintf+5
  6629  001364  C01B  F0CA         	movff	?_get_min_VL+2,?_sprintf+6
  6630  001368  EC8D  F02F         	call	_sprintf	;wreg free
  6631  00136C  D1BC               	goto	l10768
  6632  00136E                     l202:
  6633  00136E  FFFF               	dw	65535	; assembler added errata NOP
  6634                           
  6635                           ;Commands.c: 247: else if(strcmp(var,"modo")==0){
  6636  001370  C0DC  F019         	movff	get_list@var,strcmp@s1
  6637  001374  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6638  001378  0EAA               	movlw	low STR_52
  6639  00137A  6E1B               	movwf	strcmp@s2,c
  6640  00137C  0E7F               	movlw	high STR_52
  6641  00137E  6E1C               	movwf	strcmp@s2+1,c
  6642  001380  EC8C  F02C         	call	_strcmp	;wreg free
  6643  001384  5019               	movf	?_strcmp,w,c
  6644  001386  101A               	iorwf	?_strcmp+1,w,c
  6645  001388  A4D8               	btfss	status,2,c
  6646  00138A  D01E               	goto	l204
  6647                           
  6648                           ;Commands.c: 248: if(Inputs.B0==1){
  6649  00138C  0100               	movlb	0	; () banked
  6650  00138E  A1FB               	btfss	_Inputs& (0+255),0,b
  6651  001390  D00D               	goto	l205
  6652                           
  6653                           ; BSR set to: 0
  6654                           ;Commands.c: 249: sprintf(buffer,"manual\n");
  6655  001392  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6656  001396  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6657  00139A  0E5A               	movlw	low STR_53
  6658  00139C  0100               	movlb	0	; () banked
  6659  00139E  6FC6               	movwf	sprintf@f& (0+255),b
  6660  0013A0  0E7F               	movlw	high STR_53
  6661  0013A2  0100               	movlb	0	; () banked
  6662  0013A4  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6663  0013A6  EC8D  F02F         	call	_sprintf	;wreg free
  6664  0013AA  D19D               	goto	l10768
  6665  0013AC                     l205:
  6666  0013AC  FFFF               	dw	65535	; assembler added errata NOP
  6667                           
  6668                           ;Commands.c: 252: else{
  6669                           ;Commands.c: 253: sprintf(buffer,"Auto\n");
  6670  0013AE  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6671  0013B2  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6672  0013B6  0E83               	movlw	low STR_54
  6673  0013B8  0100               	movlb	0	; () banked
  6674  0013BA  6FC6               	movwf	sprintf@f& (0+255),b
  6675  0013BC  0E7F               	movlw	high STR_54
  6676  0013BE  0100               	movlb	0	; () banked
  6677  0013C0  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6678  0013C2  EC8D  F02F         	call	_sprintf	;wreg free
  6679  0013C6  D18F               	goto	l10768
  6680  0013C8                     l204:
  6681  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  6682                           
  6683                           ;Commands.c: 257: else if(strcmp(var,"vc")==0){
  6684  0013CA  C0DC  F019         	movff	get_list@var,strcmp@s1
  6685  0013CE  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6686  0013D2  0EEC               	movlw	low STR_55
  6687  0013D4  6E1B               	movwf	strcmp@s2,c
  6688  0013D6  0E7F               	movlw	high STR_55
  6689  0013D8  6E1C               	movwf	strcmp@s2+1,c
  6690  0013DA  EC8C  F02C         	call	_strcmp	;wreg free
  6691  0013DE  5019               	movf	?_strcmp,w,c
  6692  0013E0  101A               	iorwf	?_strcmp+1,w,c
  6693  0013E2  A4D8               	btfss	status,2,c
  6694  0013E4  D015               	goto	l208
  6695                           
  6696                           ;Commands.c: 258: sprintf(buffer,"%.1f\n",Get_Control_Voltage());
  6697  0013E6  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6698  0013EA  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6699  0013EE  0E77               	movlw	low STR_35
  6700  0013F0  0100               	movlb	0	; () banked
  6701  0013F2  6FC6               	movwf	sprintf@f& (0+255),b
  6702  0013F4  0E7F               	movlw	high STR_35
  6703  0013F6  0100               	movlb	0	; () banked
  6704  0013F8  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6705  0013FA  EC52  F039         	call	_Get_Control_Voltage	;wreg free
  6706  0013FE  C078  F0C8         	movff	?_Get_Control_Voltage,?_sprintf+4
  6707  001402  C079  F0C9         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6708  001406  C07A  F0CA         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6709  00140A  EC8D  F02F         	call	_sprintf	;wreg free
  6710  00140E  D16B               	goto	l10768
  6711  001410                     l208:
  6712  001410  FFFF               	dw	65535	; assembler added errata NOP
  6713                           
  6714                           ;Commands.c: 261: else if(strcmp(var,"vin")==0){
  6715  001412  C0DC  F019         	movff	get_list@var,strcmp@s1
  6716  001416  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6717  00141A  0EDD               	movlw	low STR_57
  6718  00141C  6E1B               	movwf	strcmp@s2,c
  6719  00141E  0E7F               	movlw	high STR_57
  6720  001420  6E1C               	movwf	strcmp@s2+1,c
  6721  001422  EC8C  F02C         	call	_strcmp	;wreg free
  6722  001426  5019               	movf	?_strcmp,w,c
  6723  001428  101A               	iorwf	?_strcmp+1,w,c
  6724  00142A  A4D8               	btfss	status,2,c
  6725  00142C  D015               	goto	l210
  6726                           
  6727                           ;Commands.c: 262: sprintf(buffer,"%.1f\n",Get_Voltage_Vin());
  6728  00142E  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6729  001432  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6730  001436  0E77               	movlw	low STR_35
  6731  001438  0100               	movlb	0	; () banked
  6732  00143A  6FC6               	movwf	sprintf@f& (0+255),b
  6733  00143C  0E7F               	movlw	high STR_35
  6734  00143E  0100               	movlb	0	; () banked
  6735  001440  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6736  001442  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  6737  001446  C019  F0C8         	movff	?_Get_Voltage_Vin,?_sprintf+4
  6738  00144A  C01A  F0C9         	movff	?_Get_Voltage_Vin+1,?_sprintf+5
  6739  00144E  C01B  F0CA         	movff	?_Get_Voltage_Vin+2,?_sprintf+6
  6740  001452  EC8D  F02F         	call	_sprintf	;wreg free
  6741  001456  D147               	goto	l10768
  6742  001458                     l210:
  6743  001458  FFFF               	dw	65535	; assembler added errata NOP
  6744                           
  6745                           ;Commands.c: 265: else if(strcmp(var,"date")==0){
  6746  00145A  C0DC  F019         	movff	get_list@var,strcmp@s1
  6747  00145E  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6748  001462  0EA5               	movlw	low STR_32
  6749  001464  6E1B               	movwf	strcmp@s2,c
  6750  001466  0E7F               	movlw	high STR_32
  6751  001468  6E1C               	movwf	strcmp@s2+1,c
  6752  00146A  EC8C  F02C         	call	_strcmp	;wreg free
  6753  00146E  5019               	movf	?_strcmp,w,c
  6754  001470  101A               	iorwf	?_strcmp+1,w,c
  6755  001472  A4D8               	btfss	status,2,c
  6756  001474  D04C               	goto	l212
  6757                           
  6758                           ;Commands.c: 266: time(&systime);
  6759  001476  0EE0               	movlw	low get_list@systime
  6760  001478  0100               	movlb	0	; () banked
  6761  00147A  6F8C               	movwf	time@t& (0+255),b
  6762  00147C  0E00               	movlw	high get_list@systime
  6763  00147E  0100               	movlb	0	; () banked
  6764  001480  6F8D               	movwf	(time@t+1)& (0+255),b
  6765  001482  EC98  F035         	call	_time	;wreg free
  6766                           
  6767                           ;Commands.c: 267: t=localtime(&systime);
  6768  001486  0EE0               	movlw	low get_list@systime
  6769  001488  0100               	movlb	0	; () banked
  6770  00148A  6F60               	movwf	localtime@tp& (0+255),b
  6771  00148C  0E00               	movlw	high get_list@systime
  6772  00148E  0100               	movlb	0	; () banked
  6773  001490  6F61               	movwf	(localtime@tp+1)& (0+255),b
  6774  001492  EC61  F031         	call	_localtime	;wreg free
  6775  001496  C060  F0E4         	movff	?_localtime,get_list@t
  6776  00149A  C061  F0E5         	movff	?_localtime+1,get_list@t+1
  6777                           
  6778                           ;Commands.c: 268: sprintf(buffer,"%d/%d/%d\n",t->tm_mday,t->tm_mon,t->tm_year+1900);
  6779  00149E  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6780  0014A2  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6781  0014A6  0E18               	movlw	low STR_60
  6782  0014A8  0100               	movlb	0	; () banked
  6783  0014AA  6FC6               	movwf	sprintf@f& (0+255),b
  6784  0014AC  0E7F               	movlw	high STR_60
  6785  0014AE  0100               	movlb	0	; () banked
  6786  0014B0  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6787  0014B2  0100               	movlb	0	; () banked
  6788  0014B4  EE20 F006          	lfsr	2,6
  6789  0014B8  51E4               	movf	get_list@t& (0+255),w,b
  6790  0014BA  26D9               	addwf	fsr2l,f,c
  6791  0014BC  51E5               	movf	(get_list@t+1)& (0+255),w,b
  6792  0014BE  22DA               	addwfc	fsr2h,f,c
  6793  0014C0  CFDE F0C8          	movff	postinc2,?_sprintf+4
  6794  0014C4  CFDD F0C9          	movff	postdec2,?_sprintf+5
  6795  0014C8  0100               	movlb	0	; () banked
  6796  0014CA  EE20 F008          	lfsr	2,8
  6797  0014CE  51E4               	movf	get_list@t& (0+255),w,b
  6798  0014D0  26D9               	addwf	fsr2l,f,c
  6799  0014D2  51E5               	movf	(get_list@t+1)& (0+255),w,b
  6800  0014D4  22DA               	addwfc	fsr2h,f,c
  6801  0014D6  CFDE F0CA          	movff	postinc2,?_sprintf+6
  6802  0014DA  CFDD F0CB          	movff	postdec2,?_sprintf+7
  6803  0014DE  0100               	movlb	0	; () banked
  6804  0014E0  EE20 F00A          	lfsr	2,10
  6805  0014E4  51E4               	movf	get_list@t& (0+255),w,b
  6806  0014E6  26D9               	addwf	fsr2l,f,c
  6807  0014E8  51E5               	movf	(get_list@t+1)& (0+255),w,b
  6808  0014EA  22DA               	addwfc	fsr2h,f,c
  6809  0014EC  CFDE F0DE          	movff	postinc2,??_get_list
  6810  0014F0  CFDD F0DF          	movff	postdec2,??_get_list+1
  6811  0014F4  0E6C               	movlw	108
  6812  0014F6  0100               	movlb	0	; () banked
  6813  0014F8  25DE               	addwf	??_get_list& (0+255),w,b
  6814  0014FA  0100               	movlb	0	; () banked
  6815  0014FC  6FCC               	movwf	(?_sprintf+8)& (0+255),b
  6816  0014FE  0E07               	movlw	7
  6817  001500  0100               	movlb	0	; () banked
  6818  001502  21DF               	addwfc	(??_get_list+1)& (0+255),w,b
  6819  001504  0100               	movlb	0	; () banked
  6820  001506  6FCD               	movwf	(?_sprintf+9)& (0+255),b
  6821  001508  EC8D  F02F         	call	_sprintf	;wreg free
  6822  00150C  D0EC               	goto	l10768
  6823  00150E                     l212:
  6824  00150E  FFFF               	dw	65535	; assembler added errata NOP
  6825                           
  6826                           ;Commands.c: 271: else if(strcmp(var,"time")==0){
  6827  001510  C0DC  F019         	movff	get_list@var,strcmp@s1
  6828  001514  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6829  001518  0E13               	movlw	low (STR_25+7)
  6830  00151A  6E1B               	movwf	strcmp@s2,c
  6831  00151C  0E7F               	movlw	high (STR_25+7)
  6832  00151E  6E1C               	movwf	strcmp@s2+1,c
  6833  001520  EC8C  F02C         	call	_strcmp	;wreg free
  6834  001524  5019               	movf	?_strcmp,w,c
  6835  001526  101A               	iorwf	?_strcmp+1,w,c
  6836  001528  A4D8               	btfss	status,2,c
  6837  00152A  D03F               	goto	l214
  6838                           
  6839                           ;Commands.c: 272: time(&systime);
  6840  00152C  0EE0               	movlw	low get_list@systime
  6841  00152E  0100               	movlb	0	; () banked
  6842  001530  6F8C               	movwf	time@t& (0+255),b
  6843  001532  0E00               	movlw	high get_list@systime
  6844  001534  0100               	movlb	0	; () banked
  6845  001536  6F8D               	movwf	(time@t+1)& (0+255),b
  6846  001538  EC98  F035         	call	_time	;wreg free
  6847                           
  6848                           ;Commands.c: 273: t=localtime(&systime);
  6849  00153C  0EE0               	movlw	low get_list@systime
  6850  00153E  0100               	movlb	0	; () banked
  6851  001540  6F60               	movwf	localtime@tp& (0+255),b
  6852  001542  0E00               	movlw	high get_list@systime
  6853  001544  0100               	movlb	0	; () banked
  6854  001546  6F61               	movwf	(localtime@tp+1)& (0+255),b
  6855  001548  EC61  F031         	call	_localtime	;wreg free
  6856  00154C  C060  F0E4         	movff	?_localtime,get_list@t
  6857  001550  C061  F0E5         	movff	?_localtime+1,get_list@t+1
  6858                           
  6859                           ;Commands.c: 274: sprintf(buffer,"%d:%d:%d\n",t->tm_hour,t->tm_min,t->tm_sec);
  6860  001554  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6861  001558  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6862  00155C  0E22               	movlw	low STR_62
  6863  00155E  0100               	movlb	0	; () banked
  6864  001560  6FC6               	movwf	sprintf@f& (0+255),b
  6865  001562  0E7F               	movlw	high STR_62
  6866  001564  0100               	movlb	0	; () banked
  6867  001566  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6868  001568  0100               	movlb	0	; () banked
  6869  00156A  EE20 F004          	lfsr	2,4
  6870  00156E  51E4               	movf	get_list@t& (0+255),w,b
  6871  001570  26D9               	addwf	fsr2l,f,c
  6872  001572  51E5               	movf	(get_list@t+1)& (0+255),w,b
  6873  001574  22DA               	addwfc	fsr2h,f,c
  6874  001576  CFDE F0C8          	movff	postinc2,?_sprintf+4
  6875  00157A  CFDD F0C9          	movff	postdec2,?_sprintf+5
  6876  00157E  0100               	movlb	0	; () banked
  6877  001580  EE20 F002          	lfsr	2,2
  6878  001584  51E4               	movf	get_list@t& (0+255),w,b
  6879  001586  26D9               	addwf	fsr2l,f,c
  6880  001588  51E5               	movf	(get_list@t+1)& (0+255),w,b
  6881  00158A  22DA               	addwfc	fsr2h,f,c
  6882  00158C  CFDE F0CA          	movff	postinc2,?_sprintf+6
  6883  001590  CFDD F0CB          	movff	postdec2,?_sprintf+7
  6884  001594  C0E4  FFD9         	movff	get_list@t,fsr2l
  6885  001598  C0E5  FFDA         	movff	get_list@t+1,fsr2h
  6886  00159C  CFDE F0CC          	movff	postinc2,?_sprintf+8
  6887  0015A0  CFDD F0CD          	movff	postdec2,?_sprintf+9
  6888  0015A4  EC8D  F02F         	call	_sprintf	;wreg free
  6889  0015A8  D09E               	goto	l10768
  6890  0015AA                     l214:
  6891  0015AA  FFFF               	dw	65535	; assembler added errata NOP
  6892                           
  6893                           ;Commands.c: 277: else if(strcmp(var,"data")==0){
  6894  0015AC  C0DC  F019         	movff	get_list@var,strcmp@s1
  6895  0015B0  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6896  0015B4  0EA0               	movlw	low STR_63
  6897  0015B6  6E1B               	movwf	strcmp@s2,c
  6898  0015B8  0E7F               	movlw	high STR_63
  6899  0015BA  6E1C               	movwf	strcmp@s2+1,c
  6900  0015BC  EC8C  F02C         	call	_strcmp	;wreg free
  6901  0015C0  5019               	movf	?_strcmp,w,c
  6902  0015C2  101A               	iorwf	?_strcmp+1,w,c
  6903  0015C4  A4D8               	btfss	status,2,c
  6904  0015C6  D05E               	goto	l216
  6905                           
  6906                           ;Commands.c: 278: if (Inputs.B0 == 1) {
  6907  0015C8  0100               	movlb	0	; () banked
  6908  0015CA  A1FB               	btfss	_Inputs& (0+255),0,b
  6909  0015CC  D02D               	goto	l217
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;Commands.c: 279: sprintf(buffer, "%.1f %.1f %.1f %.1f MANUAL\n", Get_Control_Voltage(),
      +                           Get_Voltage_Vin(), get_PID_setpoint(), get_PID_output());
  6913  0015CE  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6914  0015D2  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6915  0015D6  0E46               	movlw	low STR_64
  6916  0015D8  0100               	movlb	0	; () banked
  6917  0015DA  6FC6               	movwf	sprintf@f& (0+255),b
  6918  0015DC  0E7E               	movlw	high STR_64
  6919  0015DE  0100               	movlb	0	; () banked
  6920  0015E0  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6921  0015E2  EC52  F039         	call	_Get_Control_Voltage	;wreg free
  6922  0015E6  C078  F0C8         	movff	?_Get_Control_Voltage,?_sprintf+4
  6923  0015EA  C079  F0C9         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6924  0015EE  C07A  F0CA         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6925  0015F2  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  6926  0015F6  C019  F0CB         	movff	?_Get_Voltage_Vin,?_sprintf+7
  6927  0015FA  C01A  F0CC         	movff	?_Get_Voltage_Vin+1,?_sprintf+8
  6928  0015FE  C01B  F0CD         	movff	?_Get_Voltage_Vin+2,?_sprintf+9
  6929  001602  ECA3  F027         	call	_get_PID_setpoint	;wreg free
  6930  001606  C019  F0CE         	movff	?_get_PID_setpoint,?_sprintf+10
  6931  00160A  C01A  F0CF         	movff	?_get_PID_setpoint+1,?_sprintf+11
  6932  00160E  C01B  F0D0         	movff	?_get_PID_setpoint+2,?_sprintf+12
  6933  001612  EC06  F028         	call	_get_PID_output	;wreg free
  6934  001616  C019  F0D1         	movff	?_get_PID_output,?_sprintf+13
  6935  00161A  C01A  F0D2         	movff	?_get_PID_output+1,?_sprintf+14
  6936  00161E  C01B  F0D3         	movff	?_get_PID_output+2,?_sprintf+15
  6937  001622  EC8D  F02F         	call	_sprintf	;wreg free
  6938  001626  D05F               	goto	l10768
  6939  001628                     l217:
  6940  001628  FFFF               	dw	65535	; assembler added errata NOP
  6941                           
  6942                           ;Commands.c: 282: else {
  6943                           ;Commands.c: 283: sprintf(buffer, "%.1f %.1f %.1f %.1f AUTO\n", Get_Control_Voltage(), G
      +                          et_Voltage_Vin(), get_PID_setpoint(), get_PID_output());
  6944  00162A  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6945  00162E  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6946  001632  0E62               	movlw	low STR_65
  6947  001634  0100               	movlb	0	; () banked
  6948  001636  6FC6               	movwf	sprintf@f& (0+255),b
  6949  001638  0E7E               	movlw	high STR_65
  6950  00163A  0100               	movlb	0	; () banked
  6951  00163C  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6952  00163E  EC52  F039         	call	_Get_Control_Voltage	;wreg free
  6953  001642  C078  F0C8         	movff	?_Get_Control_Voltage,?_sprintf+4
  6954  001646  C079  F0C9         	movff	?_Get_Control_Voltage+1,?_sprintf+5
  6955  00164A  C07A  F0CA         	movff	?_Get_Control_Voltage+2,?_sprintf+6
  6956  00164E  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
  6957  001652  C019  F0CB         	movff	?_Get_Voltage_Vin,?_sprintf+7
  6958  001656  C01A  F0CC         	movff	?_Get_Voltage_Vin+1,?_sprintf+8
  6959  00165A  C01B  F0CD         	movff	?_Get_Voltage_Vin+2,?_sprintf+9
  6960  00165E  ECA3  F027         	call	_get_PID_setpoint	;wreg free
  6961  001662  C019  F0CE         	movff	?_get_PID_setpoint,?_sprintf+10
  6962  001666  C01A  F0CF         	movff	?_get_PID_setpoint+1,?_sprintf+11
  6963  00166A  C01B  F0D0         	movff	?_get_PID_setpoint+2,?_sprintf+12
  6964  00166E  EC06  F028         	call	_get_PID_output	;wreg free
  6965  001672  C019  F0D1         	movff	?_get_PID_output,?_sprintf+13
  6966  001676  C01A  F0D2         	movff	?_get_PID_output+1,?_sprintf+14
  6967  00167A  C01B  F0D3         	movff	?_get_PID_output+2,?_sprintf+15
  6968  00167E  EC8D  F02F         	call	_sprintf	;wreg free
  6969  001682  D031               	goto	l10768
  6970  001684                     l216:
  6971  001684  FFFF               	dw	65535	; assembler added errata NOP
  6972                           
  6973                           ;Commands.c: 289: else if(strcmp(var,"pidout")==0){
  6974  001686  C0DC  F019         	movff	get_list@var,strcmp@s1
  6975  00168A  C0DD  F01A         	movff	get_list@var+1,strcmp@s1+1
  6976  00168E  0E70               	movlw	low STR_66
  6977  001690  6E1B               	movwf	strcmp@s2,c
  6978  001692  0E7F               	movlw	high STR_66
  6979  001694  6E1C               	movwf	strcmp@s2+1,c
  6980  001696  EC8C  F02C         	call	_strcmp	;wreg free
  6981  00169A  5019               	movf	?_strcmp,w,c
  6982  00169C  101A               	iorwf	?_strcmp+1,w,c
  6983  00169E  A4D8               	btfss	status,2,c
  6984  0016A0  D015               	goto	l220
  6985                           
  6986                           ;Commands.c: 290: sprintf(buffer,"%.1f\n",get_PID_output());
  6987  0016A2  C0F6  F0C4         	movff	_buffer,sprintf@wh
  6988  0016A6  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  6989  0016AA  0E77               	movlw	low STR_35
  6990  0016AC  0100               	movlb	0	; () banked
  6991  0016AE  6FC6               	movwf	sprintf@f& (0+255),b
  6992  0016B0  0E7F               	movlw	high STR_35
  6993  0016B2  0100               	movlb	0	; () banked
  6994  0016B4  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  6995  0016B6  EC06  F028         	call	_get_PID_output	;wreg free
  6996  0016BA  C019  F0C8         	movff	?_get_PID_output,?_sprintf+4
  6997  0016BE  C01A  F0C9         	movff	?_get_PID_output+1,?_sprintf+5
  6998  0016C2  C01B  F0CA         	movff	?_get_PID_output+2,?_sprintf+6
  6999  0016C6  EC8D  F02F         	call	_sprintf	;wreg free
  7000  0016CA  D00D               	goto	l10768
  7001  0016CC                     l220:
  7002  0016CC  FFFF               	dw	65535	; assembler added errata NOP
  7003                           
  7004                           ;Commands.c: 294: else {
  7005                           ;Commands.c: 295: sprintf(buffer,"Error\n");
  7006  0016CE  C0F6  F0C4         	movff	_buffer,sprintf@wh
  7007  0016D2  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  7008  0016D6  0E69               	movlw	low STR_12
  7009  0016D8  0100               	movlb	0	; () banked
  7010  0016DA  6FC6               	movwf	sprintf@f& (0+255),b
  7011  0016DC  0E7F               	movlw	high STR_12
  7012  0016DE  0100               	movlb	0	; () banked
  7013  0016E0  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  7014  0016E2  EC8D  F02F         	call	_sprintf	;wreg free
  7015  0016E6                     l10768:
  7016  0016E6  FFFF               	dw	65535	; assembler added errata NOP
  7017                           
  7018                           ;Commands.c: 296: TXIE=1;
  7019  0016E8  889D               	bsf	3997,4,c	;volatile
  7020  0016EA  0012               	return		;funcret
  7021  0016EC  FFFF               	dw	65535	; errata NOP
  7022  0016EE                     __end_of_get_list:
  7023                           	opt stack 0
  7024                           tblptru	equ	0xFF8
  7025                           tblptrh	equ	0xFF7
  7026                           tblptrl	equ	0xFF6
  7027                           tablat	equ	0xFF5
  7028                           intcon	equ	0xFF2
  7029                           postinc0	equ	0xFEE
  7030                           wreg	equ	0xFE8
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           postdec2	equ	0xFDD
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8
  7037                           
  7038 ;; *************** function _time *****************
  7039 ;; Defined at:
  7040 ;;		line 37 in file "DS1307.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  t               2   44[BANK0 ] PTR long 
  7043 ;;		 -> reset_max_min@system_time(4), main@sys_time(4), get_list@systime(4), 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  DateTime       18   53[BANK0 ] struct tm
  7046 ;;  date            4   49[BANK0 ] struct Date_Data
  7047 ;;  time            3   46[BANK0 ] struct Time_Data
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  4   44[BANK0 ] long 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7057 ;;      Params:         0       2       0       0       0       0       0
  7058 ;;      Locals:         0      25       0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0
  7060 ;;      Totals:         0      27       0       0       0       0       0
  7061 ;;Total ram usage:       27 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    5
  7064 ;; This function calls:
  7065 ;;		_bcdTOint
  7066 ;;		_get_date
  7067 ;;		_get_time
  7068 ;;		_mktime
  7069 ;; This function is called by:
  7070 ;;		_get_list
  7071 ;;		_main
  7072 ;;		_reset_max_min
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text22
  7077  006B30                     __ptext22:
  7078                           	opt stack 0
  7079  006B30                     _time:
  7080                           	opt stack 0
  7081  006B30  FFFF               	dw	65535	; assembler added errata NOP
  7082                           
  7083                           ;DS1307.c: 39: struct tm DateTime;
  7084                           ;DS1307.c: 40: struct Time_Data time;
  7085                           ;DS1307.c: 41: struct Date_Data date;
  7086                           ;DS1307.c: 43: get_date(&date);
  7087                           
  7088                           ;incstack = 0
  7089  006B32  0E91               	movlw	low time@date
  7090  006B34  6E21               	movwf	get_date@Date_Data,c
  7091  006B36  0E00               	movlw	high time@date
  7092  006B38  6E22               	movwf	get_date@Date_Data+1,c
  7093  006B3A  EC93  F028         	call	_get_date	;wreg free
  7094                           
  7095                           ;DS1307.c: 44: get_time(&time);
  7096  006B3E  0E8E               	movlw	low time@time
  7097  006B40  6E21               	movwf	get_time@Time_Data,c
  7098  006B42  0E00               	movlw	high time@time
  7099  006B44  6E22               	movwf	get_time@Time_Data+1,c
  7100  006B46  ECA1  F028         	call	_get_time	;wreg free
  7101                           
  7102                           ;DS1307.c: 46: DateTime.tm_year=bcdTOint(date.year)+100;
  7103  006B4A  C094  F02D         	movff	time@date+3,bcdTOint@bcdByte
  7104  006B4E  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7105  006B50  ECE1  F02C         	call	_bcdTOint	;wreg free
  7106  006B54  0E64               	movlw	100
  7107  006B56  242D               	addwf	?_bcdTOint,w,c
  7108  006B58  0100               	movlb	0	; () banked
  7109  006B5A  6F9F               	movwf	(time@DateTime+10)& (0+255),b
  7110  006B5C  0E00               	movlw	0
  7111  006B5E  202E               	addwfc	?_bcdTOint+1,w,c
  7112  006B60  0100               	movlb	0	; () banked
  7113  006B62  6FA0               	movwf	(time@DateTime+11)& (0+255),b
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;DS1307.c: 47: DateTime.tm_mon=bcdTOint(date.month)-1;
  7117  006B64  C093  F02D         	movff	time@date+2,bcdTOint@bcdByte
  7118  006B68  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7119  006B6A  ECE1  F02C         	call	_bcdTOint	;wreg free
  7120  006B6E  0EFF               	movlw	255
  7121  006B70  242D               	addwf	?_bcdTOint,w,c
  7122  006B72  0100               	movlb	0	; () banked
  7123  006B74  6F9D               	movwf	(time@DateTime+8)& (0+255),b
  7124  006B76  0EFF               	movlw	255
  7125  006B78  202E               	addwfc	?_bcdTOint+1,w,c
  7126  006B7A  0100               	movlb	0	; () banked
  7127  006B7C  6F9E               	movwf	(time@DateTime+9)& (0+255),b
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;DS1307.c: 48: DateTime.tm_mday=bcdTOint(date.date);
  7131  006B7E  C092  F02D         	movff	time@date+1,bcdTOint@bcdByte
  7132  006B82  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7133  006B84  ECE1  F02C         	call	_bcdTOint	;wreg free
  7134  006B88  C02D  F09B         	movff	?_bcdTOint,time@DateTime+6
  7135  006B8C  C02E  F09C         	movff	?_bcdTOint+1,time@DateTime+7
  7136                           
  7137                           ;DS1307.c: 49: DateTime.tm_wday=bcdTOint(date.day_w);
  7138  006B90  C091  F02D         	movff	time@date,bcdTOint@bcdByte
  7139  006B94  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7140  006B96  ECE1  F02C         	call	_bcdTOint	;wreg free
  7141  006B9A  C02D  F0A1         	movff	?_bcdTOint,time@DateTime+12
  7142  006B9E  C02E  F0A2         	movff	?_bcdTOint+1,time@DateTime+13
  7143                           
  7144                           ;DS1307.c: 50: DateTime.tm_hour=bcdTOint(time.hours);
  7145  006BA2  C090  F02D         	movff	time@time+2,bcdTOint@bcdByte
  7146  006BA6  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7147  006BA8  ECE1  F02C         	call	_bcdTOint	;wreg free
  7148  006BAC  C02D  F099         	movff	?_bcdTOint,time@DateTime+4
  7149  006BB0  C02E  F09A         	movff	?_bcdTOint+1,time@DateTime+5
  7150                           
  7151                           ;DS1307.c: 51: DateTime.tm_min=bcdTOint(time.minutes);
  7152  006BB4  C08F  F02D         	movff	time@time+1,bcdTOint@bcdByte
  7153  006BB8  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7154  006BBA  ECE1  F02C         	call	_bcdTOint	;wreg free
  7155  006BBE  C02D  F097         	movff	?_bcdTOint,time@DateTime+2
  7156  006BC2  C02E  F098         	movff	?_bcdTOint+1,time@DateTime+3
  7157                           
  7158                           ;DS1307.c: 52: DateTime.tm_sec=bcdTOint(time.seconds);
  7159  006BC6  C08E  F02D         	movff	time@time,bcdTOint@bcdByte
  7160  006BCA  6A2E               	clrf	bcdTOint@bcdByte+1,c
  7161  006BCC  ECE1  F02C         	call	_bcdTOint	;wreg free
  7162  006BD0  C02D  F095         	movff	?_bcdTOint,time@DateTime
  7163  006BD4  C02E  F096         	movff	?_bcdTOint+1,time@DateTime+1
  7164                           
  7165                           ;DS1307.c: 54: *t=mktime(&DateTime);
  7166  006BD8  0E95               	movlw	low time@DateTime
  7167  006BDA  0100               	movlb	0	; () banked
  7168  006BDC  6F7E               	movwf	mktime@timeptr& (0+255),b
  7169  006BDE  0E00               	movlw	high time@DateTime
  7170  006BE0  0100               	movlb	0	; () banked
  7171  006BE2  6F7F               	movwf	(mktime@timeptr+1)& (0+255),b
  7172  006BE4  EC0A  F016         	call	_mktime	;wreg free
  7173  006BE8  C08C  FFD9         	movff	time@t,fsr2l
  7174  006BEC  C08D  FFDA         	movff	time@t+1,fsr2h
  7175  006BF0  0100               	movlb	0	; () banked
  7176  006BF2  C07E  FFDE         	movff	?_mktime,postinc2
  7177  006BF6  0100               	movlb	0	; () banked
  7178  006BF8  C07F  FFDE         	movff	?_mktime+1,postinc2
  7179  006BFC  0100               	movlb	0	; () banked
  7180  006BFE  C080  FFDE         	movff	?_mktime+2,postinc2
  7181  006C02  0100               	movlb	0	; () banked
  7182  006C04  C081  FFDE         	movff	?_mktime+3,postinc2
  7183                           
  7184                           ; BSR set to: 0
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;DS1307.c: 56: return(*t);
  7188                           ;	Return value of _time is never used
  7189  006C08  0012               	return		;funcret
  7190  006C0A  FFFF               	dw	65535	; errata NOP
  7191  006C0C                     __end_of_time:
  7192                           	opt stack 0
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           intcon	equ	0xFF2
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           postdec2	equ	0xFDD
  7203                           fsr2h	equ	0xFDA
  7204                           fsr2l	equ	0xFD9
  7205                           status	equ	0xFD8
  7206                           
  7207 ;; *************** function _mktime *****************
  7208 ;; Defined at:
  7209 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  timeptr         2   30[BANK0 ] PTR struct tm
  7212 ;;		 -> time@DateTime(18), 
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;  tt              4   40[BANK0 ] long 
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  4   30[BANK0 ] long 
  7217 ;; Registers used:
  7218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7224 ;;      Params:         0       4       0       0       0       0       0
  7225 ;;      Locals:         0       4       0       0       0       0       0
  7226 ;;      Temps:          0       6       0       0       0       0       0
  7227 ;;      Totals:         0      14       0       0       0       0       0
  7228 ;;Total ram usage:       14 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    4
  7231 ;; This function calls:
  7232 ;;		___lmul
  7233 ;;		_ymd_to_scalar
  7234 ;; This function is called by:
  7235 ;;		_time
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text23
  7240  002C14                     __ptext23:
  7241                           	opt stack 0
  7242  002C14                     _mktime:
  7243                           	opt stack 0
  7244  002C14  FFFF               	dw	65535	; assembler added errata NOP
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;incstack = 0
  7248  002C16  0100               	movlb	0	; () banked
  7249  002C18  EE20 F00A          	lfsr	2,10
  7250  002C1C  517E               	movf	mktime@timeptr& (0+255),w,b
  7251  002C1E  26D9               	addwf	fsr2l,f,c
  7252  002C20  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7253  002C22  22DA               	addwfc	fsr2h,f,c
  7254  002C24  0E01               	movlw	1
  7255  002C26  BEDB               	btfsc	plusw2,7,c
  7256  002C28  D018               	goto	u9490
  7257  002C2A  0E01               	movlw	1
  7258  002C2C  50DB               	movf	plusw2,w,c
  7259  002C2E  E104               	bnz	u9480
  7260  002C30  0E46               	movlw	70
  7261  002C32  5CDE               	subwf	postinc2,w,c
  7262  002C34  A0D8               	btfss	status,0,c
  7263  002C36  D011               	goto	u9490
  7264  002C38                     u9480:
  7265                           
  7266                           ; BSR set to: 0
  7267  002C38  0100               	movlb	0	; () banked
  7268  002C3A  EE20 F00A          	lfsr	2,10
  7269  002C3E  517E               	movf	mktime@timeptr& (0+255),w,b
  7270  002C40  26D9               	addwf	fsr2l,f,c
  7271  002C42  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7272  002C44  22DA               	addwfc	fsr2h,f,c
  7273  002C46  0E01               	movlw	1
  7274  002C48  BEDB               	btfsc	plusw2,7,c
  7275  002C4A  D00E               	goto	l1909
  7276  002C4C  0E01               	movlw	1
  7277  002C4E  50DB               	movf	plusw2,w,c
  7278  002C50  E104               	bnz	u9490
  7279  002C52  0E8B               	movlw	139
  7280  002C54  5CDE               	subwf	postinc2,w,c
  7281  002C56  A0D8               	btfss	status,0,c
  7282  002C58  D007               	goto	l1909
  7283  002C5A                     u9490:
  7284  002C5A  FFFF               	dw	65535	; assembler added errata NOP
  7285                           
  7286                           ; BSR set to: 0
  7287  002C5C  0100               	movlb	0	; () banked
  7288  002C5E  6988               	setf	mktime@tt& (0+255),b
  7289  002C60  6989               	setf	(mktime@tt+1)& (0+255),b
  7290  002C62  698A               	setf	(mktime@tt+2)& (0+255),b
  7291  002C64  698B               	setf	(mktime@tt+3)& (0+255),b
  7292  002C66  D10F               	goto	l1912
  7293  002C68                     l1909:
  7294  002C68  FFFF               	dw	65535	; assembler added errata NOP
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299  002C6A  0100               	movlb	0	; () banked
  7300  002C6C  EE20 F00A          	lfsr	2,10
  7301  002C70  517E               	movf	mktime@timeptr& (0+255),w,b
  7302  002C72  26D9               	addwf	fsr2l,f,c
  7303  002C74  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7304  002C76  22DA               	addwfc	fsr2h,f,c
  7305  002C78  CFDE F082          	movff	postinc2,??_mktime
  7306  002C7C  CFDD F083          	movff	postdec2,??_mktime+1
  7307  002C80  0E6C               	movlw	108
  7308  002C82  0100               	movlb	0	; () banked
  7309  002C84  2582               	addwf	??_mktime& (0+255),w,b
  7310  002C86  0100               	movlb	0	; () banked
  7311  002C88  6F6E               	movwf	ymd_to_scalar@yr& (0+255),b
  7312  002C8A  0E07               	movlw	7
  7313  002C8C  0100               	movlb	0	; () banked
  7314  002C8E  2183               	addwfc	(??_mktime+1)& (0+255),w,b
  7315  002C90  0100               	movlb	0	; () banked
  7316  002C92  6F6F               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
  7317  002C94  0100               	movlb	0	; () banked
  7318  002C96  EE20 F008          	lfsr	2,8
  7319  002C9A  517E               	movf	mktime@timeptr& (0+255),w,b
  7320  002C9C  26D9               	addwf	fsr2l,f,c
  7321  002C9E  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7322  002CA0  22DA               	addwfc	fsr2h,f,c
  7323  002CA2  CFDE F084          	movff	postinc2,??_mktime+2
  7324  002CA6  CFDD F085          	movff	postdec2,??_mktime+3
  7325  002CAA  0E01               	movlw	1
  7326  002CAC  0100               	movlb	0	; () banked
  7327  002CAE  2584               	addwf	(??_mktime+2)& (0+255),w,b
  7328  002CB0  0100               	movlb	0	; () banked
  7329  002CB2  6F70               	movwf	ymd_to_scalar@mo& (0+255),b
  7330  002CB4  0E00               	movlw	0
  7331  002CB6  0100               	movlb	0	; () banked
  7332  002CB8  2185               	addwfc	(??_mktime+3)& (0+255),w,b
  7333  002CBA  0100               	movlb	0	; () banked
  7334  002CBC  6F71               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
  7335  002CBE  0100               	movlb	0	; () banked
  7336  002CC0  EE20 F006          	lfsr	2,6
  7337  002CC4  517E               	movf	mktime@timeptr& (0+255),w,b
  7338  002CC6  26D9               	addwf	fsr2l,f,c
  7339  002CC8  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7340  002CCA  22DA               	addwfc	fsr2h,f,c
  7341  002CCC  CFDE F072          	movff	postinc2,ymd_to_scalar@day
  7342  002CD0  CFDD F073          	movff	postdec2,ymd_to_scalar@day+1
  7343  002CD4  ECE6  F036         	call	_ymd_to_scalar	;wreg free
  7344  002CD8  C06E  F088         	movff	?_ymd_to_scalar,mktime@tt
  7345  002CDC  C06F  F089         	movff	?_ymd_to_scalar+1,mktime@tt+1
  7346  002CE0  C070  F08A         	movff	?_ymd_to_scalar+2,mktime@tt+2
  7347  002CE4  C071  F08B         	movff	?_ymd_to_scalar+3,mktime@tt+3
  7348  002CE8  0E07               	movlw	7
  7349  002CEA  0100               	movlb	0	; () banked
  7350  002CEC  6F6F               	movwf	(ymd_to_scalar@yr+1)& (0+255),b
  7351  002CEE  0EB2               	movlw	178
  7352  002CF0  6F6E               	movwf	ymd_to_scalar@yr& (0+255),b
  7353  002CF2  0E00               	movlw	0
  7354  002CF4  0100               	movlb	0	; () banked
  7355  002CF6  6F71               	movwf	(ymd_to_scalar@mo+1)& (0+255),b
  7356  002CF8  0E01               	movlw	1
  7357  002CFA  6F70               	movwf	ymd_to_scalar@mo& (0+255),b
  7358  002CFC  0E00               	movlw	0
  7359  002CFE  0100               	movlb	0	; () banked
  7360  002D00  6F73               	movwf	(ymd_to_scalar@day+1)& (0+255),b
  7361  002D02  0E01               	movlw	1
  7362  002D04  6F72               	movwf	ymd_to_scalar@day& (0+255),b
  7363  002D06  ECE6  F036         	call	_ymd_to_scalar	;wreg free
  7364  002D0A  0100               	movlb	0	; () banked
  7365  002D0C  516E               	movf	?_ymd_to_scalar& (0+255),w,b
  7366  002D0E  0100               	movlb	0	; () banked
  7367  002D10  5F88               	subwf	mktime@tt& (0+255),f,b
  7368  002D12  0100               	movlb	0	; () banked
  7369  002D14  516F               	movf	(?_ymd_to_scalar+1)& (0+255),w,b
  7370  002D16  0100               	movlb	0	; () banked
  7371  002D18  5B89               	subwfb	(mktime@tt+1)& (0+255),f,b
  7372  002D1A  0100               	movlb	0	; () banked
  7373  002D1C  5170               	movf	(?_ymd_to_scalar+2)& (0+255),w,b
  7374  002D1E  0100               	movlb	0	; () banked
  7375  002D20  5B8A               	subwfb	(mktime@tt+2)& (0+255),f,b
  7376  002D22  0100               	movlb	0	; () banked
  7377  002D24  5171               	movf	(?_ymd_to_scalar+3)& (0+255),w,b
  7378  002D26  0100               	movlb	0	; () banked
  7379  002D28  5B8B               	subwfb	(mktime@tt+3)& (0+255),f,b
  7380                           
  7381                           ; BSR set to: 0
  7382  002D2A  0100               	movlb	0	; () banked
  7383  002D2C  EE20 F004          	lfsr	2,4
  7384  002D30  517E               	movf	mktime@timeptr& (0+255),w,b
  7385  002D32  26D9               	addwf	fsr2l,f,c
  7386  002D34  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7387  002D36  22DA               	addwfc	fsr2h,f,c
  7388  002D38  CFDE F082          	movff	postinc2,??_mktime
  7389  002D3C  CFDD F083          	movff	postdec2,??_mktime+1
  7390  002D40  C082  F084         	movff	??_mktime,??_mktime+2
  7391  002D44  C083  F085         	movff	??_mktime+1,??_mktime+3
  7392  002D48  0E00               	movlw	0
  7393  002D4A  0100               	movlb	0	; () banked
  7394  002D4C  BF85               	btfsc	(??_mktime+3)& (0+255),7,b
  7395  002D4E  0EFF               	movlw	255
  7396  002D50  6F86               	movwf	(??_mktime+4)& (0+255),b
  7397  002D52  6F87               	movwf	(??_mktime+5)& (0+255),b
  7398  002D54  C088  F019         	movff	mktime@tt,___lmul@multiplier
  7399  002D58  C089  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7400  002D5C  C08A  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7401  002D60  C08B  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7402  002D64  0E18               	movlw	24
  7403  002D66  6E1D               	movwf	___lmul@multiplicand,c
  7404  002D68  0E00               	movlw	0
  7405  002D6A  6E1E               	movwf	___lmul@multiplicand+1,c
  7406  002D6C  0E00               	movlw	0
  7407  002D6E  6E1F               	movwf	___lmul@multiplicand+2,c
  7408  002D70  0E00               	movlw	0
  7409  002D72  6E20               	movwf	___lmul@multiplicand+3,c
  7410  002D74  EC68  F02D         	call	___lmul	;wreg free
  7411  002D78  0100               	movlb	0	; () banked
  7412  002D7A  5184               	movf	(??_mktime+2)& (0+255),w,b
  7413  002D7C  2419               	addwf	?___lmul,w,c
  7414  002D7E  0100               	movlb	0	; () banked
  7415  002D80  6F88               	movwf	mktime@tt& (0+255),b
  7416  002D82  0100               	movlb	0	; () banked
  7417  002D84  5185               	movf	(??_mktime+3)& (0+255),w,b
  7418  002D86  201A               	addwfc	?___lmul+1,w,c
  7419  002D88  0100               	movlb	0	; () banked
  7420  002D8A  6F89               	movwf	(mktime@tt+1)& (0+255),b
  7421  002D8C  0100               	movlb	0	; () banked
  7422  002D8E  5186               	movf	(??_mktime+4)& (0+255),w,b
  7423  002D90  201B               	addwfc	?___lmul+2,w,c
  7424  002D92  0100               	movlb	0	; () banked
  7425  002D94  6F8A               	movwf	(mktime@tt+2)& (0+255),b
  7426  002D96  0100               	movlb	0	; () banked
  7427  002D98  5187               	movf	(??_mktime+5)& (0+255),w,b
  7428  002D9A  201C               	addwfc	?___lmul+3,w,c
  7429  002D9C  0100               	movlb	0	; () banked
  7430  002D9E  6F8B               	movwf	(mktime@tt+3)& (0+255),b
  7431                           
  7432                           ; BSR set to: 0
  7433  002DA0  0100               	movlb	0	; () banked
  7434  002DA2  EE20 F002          	lfsr	2,2
  7435  002DA6  517E               	movf	mktime@timeptr& (0+255),w,b
  7436  002DA8  26D9               	addwf	fsr2l,f,c
  7437  002DAA  517F               	movf	(mktime@timeptr+1)& (0+255),w,b
  7438  002DAC  22DA               	addwfc	fsr2h,f,c
  7439  002DAE  CFDE F082          	movff	postinc2,??_mktime
  7440  002DB2  CFDD F083          	movff	postdec2,??_mktime+1
  7441  002DB6  C082  F084         	movff	??_mktime,??_mktime+2
  7442  002DBA  C083  F085         	movff	??_mktime+1,??_mktime+3
  7443  002DBE  0E00               	movlw	0
  7444  002DC0  0100               	movlb	0	; () banked
  7445  002DC2  BF85               	btfsc	(??_mktime+3)& (0+255),7,b
  7446  002DC4  0EFF               	movlw	255
  7447  002DC6  6F86               	movwf	(??_mktime+4)& (0+255),b
  7448  002DC8  6F87               	movwf	(??_mktime+5)& (0+255),b
  7449  002DCA  C088  F019         	movff	mktime@tt,___lmul@multiplier
  7450  002DCE  C089  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7451  002DD2  C08A  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7452  002DD6  C08B  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7453  002DDA  0E3C               	movlw	60
  7454  002DDC  6E1D               	movwf	___lmul@multiplicand,c
  7455  002DDE  0E00               	movlw	0
  7456  002DE0  6E1E               	movwf	___lmul@multiplicand+1,c
  7457  002DE2  0E00               	movlw	0
  7458  002DE4  6E1F               	movwf	___lmul@multiplicand+2,c
  7459  002DE6  0E00               	movlw	0
  7460  002DE8  6E20               	movwf	___lmul@multiplicand+3,c
  7461  002DEA  EC68  F02D         	call	___lmul	;wreg free
  7462  002DEE  0100               	movlb	0	; () banked
  7463  002DF0  5184               	movf	(??_mktime+2)& (0+255),w,b
  7464  002DF2  2419               	addwf	?___lmul,w,c
  7465  002DF4  0100               	movlb	0	; () banked
  7466  002DF6  6F88               	movwf	mktime@tt& (0+255),b
  7467  002DF8  0100               	movlb	0	; () banked
  7468  002DFA  5185               	movf	(??_mktime+3)& (0+255),w,b
  7469  002DFC  201A               	addwfc	?___lmul+1,w,c
  7470  002DFE  0100               	movlb	0	; () banked
  7471  002E00  6F89               	movwf	(mktime@tt+1)& (0+255),b
  7472  002E02  0100               	movlb	0	; () banked
  7473  002E04  5186               	movf	(??_mktime+4)& (0+255),w,b
  7474  002E06  201B               	addwfc	?___lmul+2,w,c
  7475  002E08  0100               	movlb	0	; () banked
  7476  002E0A  6F8A               	movwf	(mktime@tt+2)& (0+255),b
  7477  002E0C  0100               	movlb	0	; () banked
  7478  002E0E  5187               	movf	(??_mktime+5)& (0+255),w,b
  7479  002E10  201C               	addwfc	?___lmul+3,w,c
  7480  002E12  0100               	movlb	0	; () banked
  7481  002E14  6F8B               	movwf	(mktime@tt+3)& (0+255),b
  7482                           
  7483                           ; BSR set to: 0
  7484  002E16  C07E  FFD9         	movff	mktime@timeptr,fsr2l
  7485  002E1A  C07F  FFDA         	movff	mktime@timeptr+1,fsr2h
  7486  002E1E  CFDE F082          	movff	postinc2,??_mktime
  7487  002E22  CFDD F083          	movff	postdec2,??_mktime+1
  7488  002E26  C082  F084         	movff	??_mktime,??_mktime+2
  7489  002E2A  C083  F085         	movff	??_mktime+1,??_mktime+3
  7490  002E2E  0E00               	movlw	0
  7491  002E30  0100               	movlb	0	; () banked
  7492  002E32  BF85               	btfsc	(??_mktime+3)& (0+255),7,b
  7493  002E34  0EFF               	movlw	255
  7494  002E36  6F86               	movwf	(??_mktime+4)& (0+255),b
  7495  002E38  6F87               	movwf	(??_mktime+5)& (0+255),b
  7496  002E3A  C088  F019         	movff	mktime@tt,___lmul@multiplier
  7497  002E3E  C089  F01A         	movff	mktime@tt+1,___lmul@multiplier+1
  7498  002E42  C08A  F01B         	movff	mktime@tt+2,___lmul@multiplier+2
  7499  002E46  C08B  F01C         	movff	mktime@tt+3,___lmul@multiplier+3
  7500  002E4A  0E3C               	movlw	60
  7501  002E4C  6E1D               	movwf	___lmul@multiplicand,c
  7502  002E4E  0E00               	movlw	0
  7503  002E50  6E1E               	movwf	___lmul@multiplicand+1,c
  7504  002E52  0E00               	movlw	0
  7505  002E54  6E1F               	movwf	___lmul@multiplicand+2,c
  7506  002E56  0E00               	movlw	0
  7507  002E58  6E20               	movwf	___lmul@multiplicand+3,c
  7508  002E5A  EC68  F02D         	call	___lmul	;wreg free
  7509  002E5E  0100               	movlb	0	; () banked
  7510  002E60  5184               	movf	(??_mktime+2)& (0+255),w,b
  7511  002E62  2419               	addwf	?___lmul,w,c
  7512  002E64  0100               	movlb	0	; () banked
  7513  002E66  6F88               	movwf	mktime@tt& (0+255),b
  7514  002E68  0100               	movlb	0	; () banked
  7515  002E6A  5185               	movf	(??_mktime+3)& (0+255),w,b
  7516  002E6C  201A               	addwfc	?___lmul+1,w,c
  7517  002E6E  0100               	movlb	0	; () banked
  7518  002E70  6F89               	movwf	(mktime@tt+1)& (0+255),b
  7519  002E72  0100               	movlb	0	; () banked
  7520  002E74  5186               	movf	(??_mktime+4)& (0+255),w,b
  7521  002E76  201B               	addwfc	?___lmul+2,w,c
  7522  002E78  0100               	movlb	0	; () banked
  7523  002E7A  6F8A               	movwf	(mktime@tt+2)& (0+255),b
  7524  002E7C  0100               	movlb	0	; () banked
  7525  002E7E  5187               	movf	(??_mktime+5)& (0+255),w,b
  7526  002E80  201C               	addwfc	?___lmul+3,w,c
  7527  002E82  0100               	movlb	0	; () banked
  7528  002E84  6F8B               	movwf	(mktime@tt+3)& (0+255),b
  7529  002E86                     l1912:
  7530  002E86  FFFF               	dw	65535	; assembler added errata NOP
  7531                           
  7532                           ; BSR set to: 0
  7533                           
  7534                           ; BSR set to: 0
  7535  002E88  C088  F07E         	movff	mktime@tt,?_mktime
  7536  002E8C  C089  F07F         	movff	mktime@tt+1,?_mktime+1
  7537  002E90  C08A  F080         	movff	mktime@tt+2,?_mktime+2
  7538  002E94  C08B  F081         	movff	mktime@tt+3,?_mktime+3
  7539                           
  7540                           ; BSR set to: 0
  7541                           
  7542                           ; BSR set to: 0
  7543  002E98  0012               	return		;funcret
  7544  002E9A  FFFF               	dw	65535	; errata NOP
  7545  002E9C                     __end_of_mktime:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           intcon	equ	0xFF2
  7552                           postinc0	equ	0xFEE
  7553                           wreg	equ	0xFE8
  7554                           indf2	equ	0xFDF
  7555                           postinc2	equ	0xFDE
  7556                           postdec2	equ	0xFDD
  7557                           plusw2	equ	0xFDB
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8
  7561                           
  7562 ;; *************** function _ymd_to_scalar *****************
  7563 ;; Defined at:
  7564 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  yr              2   14[BANK0 ] unsigned int 
  7567 ;;  mo              2   16[BANK0 ] unsigned int 
  7568 ;;  day             2   18[BANK0 ] unsigned int 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;  scalar          4   26[BANK0 ] long 
  7571 ;; Return value:  Size  Location     Type
  7572 ;;                  4   14[BANK0 ] long 
  7573 ;; Registers used:
  7574 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7580 ;;      Params:         0       6       0       0       0       0       0
  7581 ;;      Locals:         0       6       0       0       0       0       0
  7582 ;;      Temps:          0       4       0       0       0       0       0
  7583 ;;      Totals:         0      16       0       0       0       0       0
  7584 ;;Total ram usage:       16 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    3
  7587 ;; This function calls:
  7588 ;;		_isleap
  7589 ;;		_months_to_days
  7590 ;;		_years_to_days
  7591 ;; This function is called by:
  7592 ;;		_mktime
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text24
  7597  006DCC                     __ptext24:
  7598                           	opt stack 0
  7599  006DCC                     _ymd_to_scalar:
  7600                           	opt stack 0
  7601  006DCC  FFFF               	dw	65535	; assembler added errata NOP
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;incstack = 0
  7605  006DCE  C070  F064         	movff	ymd_to_scalar@mo,months_to_days@month
  7606  006DD2  C071  F065         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  7607  006DD6  ECDC  F02A         	call	_months_to_days	;wreg free
  7608  006DDA  0100               	movlb	0	; () banked
  7609  006DDC  5172               	movf	ymd_to_scalar@day& (0+255),w,b
  7610  006DDE  0100               	movlb	0	; () banked
  7611  006DE0  2764               	addwf	?_months_to_days& (0+255),f,b
  7612  006DE2  0100               	movlb	0	; () banked
  7613  006DE4  5173               	movf	(ymd_to_scalar@day+1)& (0+255),w,b
  7614  006DE6  0100               	movlb	0	; () banked
  7615  006DE8  2365               	addwfc	(?_months_to_days+1)& (0+255),f,b
  7616  006DEA  0100               	movlb	0	; () banked
  7617  006DEC  C064  F07A         	movff	?_months_to_days,ymd_to_scalar@scalar
  7618  006DF0  0100               	movlb	0	; () banked
  7619  006DF2  C065  F07B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  7620  006DF6  0100               	movlb	0	; () banked
  7621  006DF8  6B7C               	clrf	(ymd_to_scalar@scalar+2)& (0+255),b
  7622  006DFA  6B7D               	clrf	(ymd_to_scalar@scalar+3)& (0+255),b
  7623                           
  7624                           ; BSR set to: 0
  7625  006DFC  0100               	movlb	0	; () banked
  7626  006DFE  5171               	movf	(ymd_to_scalar@mo+1)& (0+255),w,b
  7627  006E00  E105               	bnz	u9300
  7628  006E02  0E03               	movlw	3
  7629  006E04  0100               	movlb	0	; () banked
  7630  006E06  5D70               	subwf	ymd_to_scalar@mo& (0+255),w,b
  7631  006E08  A0D8               	btfss	status,0,c
  7632  006E0A  D030               	goto	l1901
  7633  006E0C                     u9300:
  7634                           
  7635                           ; BSR set to: 0
  7636  006E0C  C06E  F01E         	movff	ymd_to_scalar@yr,isleap@yr
  7637  006E10  C06F  F01F         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  7638  006E14  ECC9  F02D         	call	_isleap	;wreg free
  7639  006E18  501E               	movf	?_isleap,w,c
  7640  006E1A  101F               	iorwf	?_isleap+1,w,c
  7641  006E1C  A4D8               	btfss	status,2,c
  7642  006E1E  D005               	goto	l1903
  7643  006E20  0E00               	movlw	0
  7644  006E22  0100               	movlb	0	; () banked
  7645  006E24  6F79               	movwf	(_ymd_to_scalar$2950+1)& (0+255),b
  7646  006E26  0E02               	movlw	2
  7647  006E28  D005               	goto	L6
  7648  006E2A                     l1903:
  7649  006E2A  FFFF               	dw	65535	; assembler added errata NOP
  7650                           
  7651                           ; BSR set to: 0
  7652  006E2C  0E00               	movlw	0
  7653  006E2E  0100               	movlb	0	; () banked
  7654  006E30  6F79               	movwf	(_ymd_to_scalar$2950+1)& (0+255),b
  7655  006E32  0E01               	movlw	1
  7656  006E34                     L6:
  7657  006E34  FFFF               	dw	65535	; assembler added errata NOP
  7658  006E36  6F78               	movwf	_ymd_to_scalar$2950& (0+255),b
  7659                           
  7660                           ; BSR set to: 0
  7661                           
  7662                           ; BSR set to: 0
  7663  006E38  C078  F074         	movff	_ymd_to_scalar$2950,??_ymd_to_scalar
  7664  006E3C  C079  F075         	movff	_ymd_to_scalar$2950+1,??_ymd_to_scalar+1
  7665  006E40  0E00               	movlw	0
  7666  006E42  0100               	movlb	0	; () banked
  7667  006E44  BF75               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,b
  7668  006E46  0EFF               	movlw	255
  7669  006E48  6F76               	movwf	(??_ymd_to_scalar+2)& (0+255),b
  7670  006E4A  6F77               	movwf	(??_ymd_to_scalar+3)& (0+255),b
  7671  006E4C  0100               	movlb	0	; () banked
  7672  006E4E  5174               	movf	??_ymd_to_scalar& (0+255),w,b
  7673  006E50  0100               	movlb	0	; () banked
  7674  006E52  5F7A               	subwf	ymd_to_scalar@scalar& (0+255),f,b
  7675  006E54  0100               	movlb	0	; () banked
  7676  006E56  5175               	movf	(??_ymd_to_scalar+1)& (0+255),w,b
  7677  006E58  0100               	movlb	0	; () banked
  7678  006E5A  5B7B               	subwfb	(ymd_to_scalar@scalar+1)& (0+255),f,b
  7679  006E5C  0100               	movlb	0	; () banked
  7680  006E5E  5176               	movf	(??_ymd_to_scalar+2)& (0+255),w,b
  7681  006E60  0100               	movlb	0	; () banked
  7682  006E62  5B7C               	subwfb	(ymd_to_scalar@scalar+2)& (0+255),f,b
  7683  006E64  0100               	movlb	0	; () banked
  7684  006E66  5177               	movf	(??_ymd_to_scalar+3)& (0+255),w,b
  7685  006E68  0100               	movlb	0	; () banked
  7686  006E6A  5B7D               	subwfb	(ymd_to_scalar@scalar+3)& (0+255),f,b
  7687  006E6C                     l1901:
  7688  006E6C  FFFF               	dw	65535	; assembler added errata NOP
  7689                           
  7690                           ; BSR set to: 0
  7691                           
  7692                           ; BSR set to: 0
  7693  006E6E  0100               	movlb	0	; () banked
  7694  006E70  076E               	decf	ymd_to_scalar@yr& (0+255),f,b
  7695  006E72  A0D8               	btfss	status,0,c
  7696  006E74  076F               	decf	(ymd_to_scalar@yr+1)& (0+255),f,b
  7697                           
  7698                           ; BSR set to: 0
  7699  006E76  C06E  F064         	movff	ymd_to_scalar@yr,years_to_days@yr
  7700  006E7A  C06F  F065         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  7701  006E7E  EC76  F036         	call	_years_to_days	;wreg free
  7702  006E82  0100               	movlb	0	; () banked
  7703  006E84  5164               	movf	?_years_to_days& (0+255),w,b
  7704  006E86  0100               	movlb	0	; () banked
  7705  006E88  277A               	addwf	ymd_to_scalar@scalar& (0+255),f,b
  7706  006E8A  0100               	movlb	0	; () banked
  7707  006E8C  5165               	movf	(?_years_to_days+1)& (0+255),w,b
  7708  006E8E  0100               	movlb	0	; () banked
  7709  006E90  237B               	addwfc	(ymd_to_scalar@scalar+1)& (0+255),f,b
  7710  006E92  0100               	movlb	0	; () banked
  7711  006E94  5166               	movf	(?_years_to_days+2)& (0+255),w,b
  7712  006E96  0100               	movlb	0	; () banked
  7713  006E98  237C               	addwfc	(ymd_to_scalar@scalar+2)& (0+255),f,b
  7714  006E9A  0100               	movlb	0	; () banked
  7715  006E9C  5167               	movf	(?_years_to_days+3)& (0+255),w,b
  7716  006E9E  0100               	movlb	0	; () banked
  7717  006EA0  237D               	addwfc	(ymd_to_scalar@scalar+3)& (0+255),f,b
  7718                           
  7719                           ; BSR set to: 0
  7720  006EA2  C07A  F06E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  7721  006EA6  C07B  F06F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  7722  006EAA  C07C  F070         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  7723  006EAE  C07D  F071         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  7724                           
  7725                           ; BSR set to: 0
  7726                           
  7727                           ; BSR set to: 0
  7728  006EB2  0012               	return		;funcret
  7729  006EB4  FFFF               	dw	65535	; errata NOP
  7730  006EB6                     __end_of_ymd_to_scalar:
  7731                           	opt stack 0
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           intcon	equ	0xFF2
  7737                           postinc0	equ	0xFEE
  7738                           wreg	equ	0xFE8
  7739                           indf2	equ	0xFDF
  7740                           postinc2	equ	0xFDE
  7741                           postdec2	equ	0xFDD
  7742                           plusw2	equ	0xFDB
  7743                           fsr2h	equ	0xFDA
  7744                           fsr2l	equ	0xFD9
  7745                           status	equ	0xFD8
  7746                           
  7747 ;; *************** function _years_to_days *****************
  7748 ;; Defined at:
  7749 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  yr              2    4[BANK0 ] unsigned int 
  7752 ;; Auto vars:     Size  Location     Type
  7753 ;;  ret             4   10[BANK0 ] long 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  4    4[BANK0 ] long 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7763 ;;      Params:         0       4       0       0       0       0       0
  7764 ;;      Locals:         0       4       0       0       0       0       0
  7765 ;;      Temps:          0       2       0       0       0       0       0
  7766 ;;      Totals:         0      10       0       0       0       0       0
  7767 ;;Total ram usage:       10 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    2
  7770 ;; This function calls:
  7771 ;;		___lmul
  7772 ;;		___lwdiv
  7773 ;; This function is called by:
  7774 ;;		_ymd_to_scalar
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text25
  7779  006CEC                     __ptext25:
  7780                           	opt stack 0
  7781  006CEC                     _years_to_days:
  7782                           	opt stack 0
  7783  006CEC  FFFF               	dw	65535	; assembler added errata NOP
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;incstack = 0
  7787  006CEE  C064  F019         	movff	years_to_days@yr,___lmul@multiplier
  7788  006CF2  C065  F01A         	movff	years_to_days@yr+1,___lmul@multiplier+1
  7789  006CF6  6A1B               	clrf	___lmul@multiplier+2,c
  7790  006CF8  6A1C               	clrf	___lmul@multiplier+3,c
  7791  006CFA  0E6D               	movlw	109
  7792  006CFC  6E1D               	movwf	___lmul@multiplicand,c
  7793  006CFE  0E01               	movlw	1
  7794  006D00  6E1E               	movwf	___lmul@multiplicand+1,c
  7795  006D02  0E00               	movlw	0
  7796  006D04  6E1F               	movwf	___lmul@multiplicand+2,c
  7797  006D06  0E00               	movlw	0
  7798  006D08  6E20               	movwf	___lmul@multiplicand+3,c
  7799  006D0A  EC68  F02D         	call	___lmul	;wreg free
  7800  006D0E  C019  F06A         	movff	?___lmul,years_to_days@ret
  7801  006D12  C01A  F06B         	movff	?___lmul+1,years_to_days@ret+1
  7802  006D16  C01B  F06C         	movff	?___lmul+2,years_to_days@ret+2
  7803  006D1A  C01C  F06D         	movff	?___lmul+3,years_to_days@ret+3
  7804  006D1E  C064  F060         	movff	years_to_days@yr,___lwdiv@dividend
  7805  006D22  C065  F061         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  7806  006D26  0E00               	movlw	0
  7807  006D28  0100               	movlb	0	; () banked
  7808  006D2A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7809  006D2C  0E64               	movlw	100
  7810  006D2E  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7811  006D30  EC12  F02F         	call	___lwdiv	;wreg free
  7812  006D34  0100               	movlb	0	; () banked
  7813  006D36  1F60               	comf	?___lwdiv& (0+255),f,b
  7814  006D38  0100               	movlb	0	; () banked
  7815  006D3A  1F61               	comf	(?___lwdiv+1)& (0+255),f,b
  7816  006D3C  0100               	movlb	0	; () banked
  7817  006D3E  4B60               	infsnz	?___lwdiv& (0+255),f,b
  7818  006D40  2B61               	incf	(?___lwdiv+1)& (0+255),f,b
  7819  006D42  C064  F068         	movff	years_to_days@yr,??_years_to_days
  7820  006D46  C065  F069         	movff	years_to_days@yr+1,??_years_to_days+1
  7821  006D4A  0100               	movlb	0	; () banked
  7822  006D4C  90D8               	bcf	status,0,c
  7823  006D4E  3369               	rrcf	(??_years_to_days+1)& (0+255),f,b
  7824  006D50  3368               	rrcf	??_years_to_days& (0+255),f,b
  7825  006D52  0100               	movlb	0	; () banked
  7826  006D54  90D8               	bcf	status,0,c
  7827  006D56  3369               	rrcf	(??_years_to_days+1)& (0+255),f,b
  7828  006D58  3368               	rrcf	??_years_to_days& (0+255),f,b
  7829  006D5A  0100               	movlb	0	; () banked
  7830  006D5C  5160               	movf	?___lwdiv& (0+255),w,b
  7831  006D5E  0100               	movlb	0	; () banked
  7832  006D60  2768               	addwf	??_years_to_days& (0+255),f,b
  7833  006D62  0100               	movlb	0	; () banked
  7834  006D64  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  7835  006D66  0100               	movlb	0	; () banked
  7836  006D68  2369               	addwfc	(??_years_to_days+1)& (0+255),f,b
  7837  006D6A  0100               	movlb	0	; () banked
  7838  006D6C  5168               	movf	??_years_to_days& (0+255),w,b
  7839  006D6E  0100               	movlb	0	; () banked
  7840  006D70  276A               	addwf	years_to_days@ret& (0+255),f,b
  7841  006D72  0100               	movlb	0	; () banked
  7842  006D74  5169               	movf	(??_years_to_days+1)& (0+255),w,b
  7843  006D76  0100               	movlb	0	; () banked
  7844  006D78  236B               	addwfc	(years_to_days@ret+1)& (0+255),f,b
  7845  006D7A  0E00               	movlw	0
  7846  006D7C  0100               	movlb	0	; () banked
  7847  006D7E  236C               	addwfc	(years_to_days@ret+2)& (0+255),f,b
  7848  006D80  0E00               	movlw	0
  7849  006D82  0100               	movlb	0	; () banked
  7850  006D84  236D               	addwfc	(years_to_days@ret+3)& (0+255),f,b
  7851  006D86  C064  F060         	movff	years_to_days@yr,___lwdiv@dividend
  7852  006D8A  C065  F061         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  7853  006D8E  0E01               	movlw	1
  7854  006D90  0100               	movlb	0	; () banked
  7855  006D92  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7856  006D94  0E90               	movlw	144
  7857  006D96  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7858  006D98  EC12  F02F         	call	___lwdiv	;wreg free
  7859  006D9C  0100               	movlb	0	; () banked
  7860  006D9E  5160               	movf	?___lwdiv& (0+255),w,b
  7861  006DA0  0100               	movlb	0	; () banked
  7862  006DA2  276A               	addwf	years_to_days@ret& (0+255),f,b
  7863  006DA4  0100               	movlb	0	; () banked
  7864  006DA6  5161               	movf	(?___lwdiv+1)& (0+255),w,b
  7865  006DA8  0100               	movlb	0	; () banked
  7866  006DAA  236B               	addwfc	(years_to_days@ret+1)& (0+255),f,b
  7867  006DAC  0E00               	movlw	0
  7868  006DAE  0100               	movlb	0	; () banked
  7869  006DB0  236C               	addwfc	(years_to_days@ret+2)& (0+255),f,b
  7870  006DB2  0E00               	movlw	0
  7871  006DB4  0100               	movlb	0	; () banked
  7872  006DB6  236D               	addwfc	(years_to_days@ret+3)& (0+255),f,b
  7873                           
  7874                           ; BSR set to: 0
  7875  006DB8  C06A  F064         	movff	years_to_days@ret,?_years_to_days
  7876  006DBC  C06B  F065         	movff	years_to_days@ret+1,?_years_to_days+1
  7877  006DC0  C06C  F066         	movff	years_to_days@ret+2,?_years_to_days+2
  7878  006DC4  C06D  F067         	movff	years_to_days@ret+3,?_years_to_days+3
  7879                           
  7880                           ; BSR set to: 0
  7881                           
  7882                           ; BSR set to: 0
  7883  006DC8  0012               	return		;funcret
  7884  006DCA  FFFF               	dw	65535	; errata NOP
  7885  006DCC                     __end_of_years_to_days:
  7886                           	opt stack 0
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           intcon	equ	0xFF2
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           plusw2	equ	0xFDB
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8
  7901                           
  7902 ;; *************** function _months_to_days *****************
  7903 ;; Defined at:
  7904 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  month           2    4[BANK0 ] unsigned int 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  2    4[BANK0 ] unsigned int 
  7911 ;; Registers used:
  7912 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7918 ;;      Params:         0       2       0       0       0       0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0
  7921 ;;      Totals:         0       2       0       0       0       0       0
  7922 ;;Total ram usage:        2 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    2
  7925 ;; This function calls:
  7926 ;;		___lwdiv
  7927 ;;		___wmul
  7928 ;; This function is called by:
  7929 ;;		_ymd_to_scalar
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           	psect	text26
  7934  0055B8                     __ptext26:
  7935                           	opt stack 0
  7936  0055B8                     _months_to_days:
  7937                           	opt stack 0
  7938  0055B8  FFFF               	dw	65535	; assembler added errata NOP
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;incstack = 0
  7942  0055BA  C064  F027         	movff	months_to_days@month,___wmul@multiplier
  7943  0055BE  C065  F028         	movff	months_to_days@month+1,___wmul@multiplier+1
  7944  0055C2  0E0B               	movlw	11
  7945  0055C4  6E2A               	movwf	___wmul@multiplicand+1,c
  7946  0055C6  0EF1               	movlw	241
  7947  0055C8  6E29               	movwf	___wmul@multiplicand,c
  7948  0055CA  EC74  F029         	call	___wmul	;wreg free
  7949  0055CE  0E41               	movlw	65
  7950  0055D0  2427               	addwf	?___wmul,w,c
  7951  0055D2  0100               	movlb	0	; () banked
  7952  0055D4  6F60               	movwf	___lwdiv@dividend& (0+255),b
  7953  0055D6  0EF4               	movlw	244
  7954  0055D8  2028               	addwfc	?___wmul+1,w,c
  7955  0055DA  0100               	movlb	0	; () banked
  7956  0055DC  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
  7957  0055DE  0E00               	movlw	0
  7958  0055E0  0100               	movlb	0	; () banked
  7959  0055E2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7960  0055E4  0E64               	movlw	100
  7961  0055E6  6F62               	movwf	___lwdiv@divisor& (0+255),b
  7962  0055E8  EC12  F02F         	call	___lwdiv	;wreg free
  7963  0055EC  C060  F064         	movff	?___lwdiv,?_months_to_days
  7964  0055F0  C061  F065         	movff	?___lwdiv+1,?_months_to_days+1
  7965  0055F4  0012               	return		;funcret
  7966  0055F6  FFFF               	dw	65535	; errata NOP
  7967  0055F8                     __end_of_months_to_days:
  7968                           	opt stack 0
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           intcon	equ	0xFF2
  7974                           postinc0	equ	0xFEE
  7975                           wreg	equ	0xFE8
  7976                           indf2	equ	0xFDF
  7977                           postinc2	equ	0xFDE
  7978                           postdec2	equ	0xFDD
  7979                           plusw2	equ	0xFDB
  7980                           fsr2h	equ	0xFDA
  7981                           fsr2l	equ	0xFD9
  7982                           status	equ	0xFD8
  7983                           
  7984 ;; *************** function ___lwdiv *****************
  7985 ;; Defined at:
  7986 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  dividend        2    0[BANK0 ] unsigned int 
  7989 ;;  divisor         2    2[BANK0 ] unsigned int 
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;  quotient        2   45[COMRAM] unsigned int 
  7992 ;;  counter         1   44[COMRAM] unsigned char 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  2    0[BANK0 ] unsigned int 
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, status,0
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8002 ;;      Params:         0       4       0       0       0       0       0
  8003 ;;      Locals:         3       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0
  8005 ;;      Totals:         3       4       0       0       0       0       0
  8006 ;;Total ram usage:        7 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    1
  8009 ;; This function calls:
  8010 ;;		Nothing
  8011 ;; This function is called by:
  8012 ;;		_months_to_days
  8013 ;;		_years_to_days
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text27
  8018  005E24                     __ptext27:
  8019                           	opt stack 0
  8020  005E24                     ___lwdiv:
  8021                           	opt stack 0
  8022  005E24  FFFF               	dw	65535	; assembler added errata NOP
  8023                           
  8024                           ;incstack = 0
  8025  005E26  0E00               	movlw	0
  8026  005E28  6E2F               	movwf	___lwdiv@quotient+1,c
  8027  005E2A  0E00               	movlw	0
  8028  005E2C  6E2E               	movwf	___lwdiv@quotient,c
  8029  005E2E  0100               	movlb	0	; () banked
  8030  005E30  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8031  005E32  0100               	movlb	0	; () banked
  8032  005E34  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8033  005E36  B4D8               	btfsc	status,2,c
  8034  005E38  D02B               	goto	l1871
  8035                           
  8036                           ; BSR set to: 0
  8037  005E3A  0E01               	movlw	1
  8038  005E3C  6E2D               	movwf	___lwdiv@counter,c
  8039  005E3E  D006               	goto	l1866
  8040  005E40  FFFF               	dw	65535	; assembler added errata NOP
  8041                           
  8042                           ; BSR set to: 0
  8043                           
  8044                           ; BSR set to: 0
  8045  005E42  0100               	movlb	0	; () banked
  8046  005E44  90D8               	bcf	status,0,c
  8047  005E46  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  8048  005E48  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8049  005E4A  2A2D               	incf	___lwdiv@counter,f,c
  8050  005E4C                     l1866:
  8051  005E4C  FFFF               	dw	65535	; assembler added errata NOP
  8052                           
  8053                           ; BSR set to: 0
  8054                           
  8055                           ; BSR set to: 0
  8056  005E4E  0100               	movlb	0	; () banked
  8057  005E50  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8058  005E52  D7F6               	goto	l1867
  8059  005E54                     u7890:
  8060  005E54  FFFF               	dw	65535	; assembler added errata NOP
  8061                           
  8062                           ; BSR set to: 0
  8063                           
  8064                           ; BSR set to: 0
  8065                           
  8066                           ; BSR set to: 0
  8067  005E56  90D8               	bcf	status,0,c
  8068  005E58  362E               	rlcf	___lwdiv@quotient,f,c
  8069  005E5A  362F               	rlcf	___lwdiv@quotient+1,f,c
  8070                           
  8071                           ; BSR set to: 0
  8072  005E5C  0100               	movlb	0	; () banked
  8073  005E5E  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8074  005E60  0100               	movlb	0	; () banked
  8075  005E62  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  8076  005E64  0100               	movlb	0	; () banked
  8077  005E66  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8078  005E68  0100               	movlb	0	; () banked
  8079  005E6A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8080  005E6C  A0D8               	btfss	status,0,c
  8081  005E6E  D009               	goto	l1870
  8082                           
  8083                           ; BSR set to: 0
  8084  005E70  0100               	movlb	0	; () banked
  8085  005E72  5162               	movf	___lwdiv@divisor& (0+255),w,b
  8086  005E74  0100               	movlb	0	; () banked
  8087  005E76  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  8088  005E78  0100               	movlb	0	; () banked
  8089  005E7A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8090  005E7C  0100               	movlb	0	; () banked
  8091  005E7E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8092                           
  8093                           ; BSR set to: 0
  8094  005E80  802E               	bsf	___lwdiv@quotient,0,c
  8095  005E82                     l1870:
  8096  005E82  FFFF               	dw	65535	; assembler added errata NOP
  8097                           
  8098                           ; BSR set to: 0
  8099                           
  8100                           ; BSR set to: 0
  8101  005E84  0100               	movlb	0	; () banked
  8102  005E86  90D8               	bcf	status,0,c
  8103  005E88  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8104  005E8A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  8105                           
  8106                           ; BSR set to: 0
  8107  005E8C  2E2D               	decfsz	___lwdiv@counter,f,c
  8108  005E8E  D7E2               	goto	u7890
  8109  005E90                     l1871:
  8110  005E90  FFFF               	dw	65535	; assembler added errata NOP
  8111                           
  8112                           ; BSR set to: 0
  8113                           
  8114                           ; BSR set to: 0
  8115  005E92  C02E  F060         	movff	___lwdiv@quotient,?___lwdiv
  8116  005E96  C02F  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8117                           
  8118                           ; BSR set to: 0
  8119  005E9A  0012               	return		;funcret
  8120  005E9C  FFFF               	dw	65535	; errata NOP
  8121  005E9E                     __end_of___lwdiv:
  8122                           	opt stack 0
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           intcon	equ	0xFF2
  8128                           postinc0	equ	0xFEE
  8129                           wreg	equ	0xFE8
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           plusw2	equ	0xFDB
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function _isleap *****************
  8139 ;; Defined at:
  8140 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\mktime.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  yr              2   29[COMRAM] unsigned int 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  2   29[COMRAM] int 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0, cstack
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8154 ;;      Params:         2       0       0       0       0       0       0
  8155 ;;      Locals:         1       0       0       0       0       0       0
  8156 ;;      Temps:          2       0       0       0       0       0       0
  8157 ;;      Totals:         5       0       0       0       0       0       0
  8158 ;;Total ram usage:        5 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    2
  8161 ;; This function calls:
  8162 ;;		___lwmod
  8163 ;; This function is called by:
  8164 ;;		_ymd_to_scalar
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text28
  8169  005B92                     __ptext28:
  8170                           	opt stack 0
  8171  005B92                     _isleap:
  8172                           	opt stack 0
  8173  005B92  FFFF               	dw	65535	; assembler added errata NOP
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;incstack = 0
  8177  005B94  0E01               	movlw	1
  8178  005B96  6E22               	movwf	_isleap$2937,c
  8179  005B98  C01E  F019         	movff	isleap@yr,___lwmod@dividend
  8180  005B9C  C01F  F01A         	movff	isleap@yr+1,___lwmod@dividend+1
  8181  005BA0  0E01               	movlw	1
  8182  005BA2  6E1C               	movwf	___lwmod@divisor+1,c
  8183  005BA4  0E90               	movlw	144
  8184  005BA6  6E1B               	movwf	___lwmod@divisor,c
  8185  005BA8  EC3B  F02C         	call	___lwmod	;wreg free
  8186  005BAC  5019               	movf	?___lwmod,w,c
  8187  005BAE  101A               	iorwf	?___lwmod+1,w,c
  8188  005BB0  B4D8               	btfsc	status,2,c
  8189  005BB2  D01B               	goto	l1891
  8190  005BB4  0E03               	movlw	3
  8191  005BB6  141E               	andwf	isleap@yr,w,c
  8192  005BB8  6E20               	movwf	??_isleap& (0+255),c
  8193  005BBA  0E00               	movlw	0
  8194  005BBC  141F               	andwf	isleap@yr+1,w,c
  8195  005BBE  6E21               	movwf	(??_isleap+1)& (0+255),c
  8196  005BC0  5020               	movf	??_isleap,w,c
  8197  005BC2  1021               	iorwf	??_isleap+1,w,c
  8198  005BC4  A4D8               	btfss	status,2,c
  8199  005BC6  D00E               	goto	u8460
  8200  005BC8  C01E  F019         	movff	isleap@yr,___lwmod@dividend
  8201  005BCC  C01F  F01A         	movff	isleap@yr+1,___lwmod@dividend+1
  8202  005BD0  0E00               	movlw	0
  8203  005BD2  6E1C               	movwf	___lwmod@divisor+1,c
  8204  005BD4  0E64               	movlw	100
  8205  005BD6  6E1B               	movwf	___lwmod@divisor,c
  8206  005BD8  EC3B  F02C         	call	___lwmod	;wreg free
  8207  005BDC  5019               	movf	?___lwmod,w,c
  8208  005BDE  101A               	iorwf	?___lwmod+1,w,c
  8209  005BE0  A4D8               	btfss	status,2,c
  8210  005BE2  D003               	goto	l1891
  8211  005BE4                     u8460:
  8212  005BE4  FFFF               	dw	65535	; assembler added errata NOP
  8213  005BE6  0E00               	movlw	0
  8214  005BE8  6E22               	movwf	_isleap$2937,c
  8215  005BEA                     l1891:
  8216  005BEA  FFFF               	dw	65535	; assembler added errata NOP
  8217  005BEC  C022  F01E         	movff	_isleap$2937,?_isleap
  8218  005BF0  6A1F               	clrf	?_isleap+1,c
  8219  005BF2  0012               	return		;funcret
  8220  005BF4  FFFF               	dw	65535	; errata NOP
  8221  005BF6                     __end_of_isleap:
  8222                           	opt stack 0
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           intcon	equ	0xFF2
  8228                           postinc0	equ	0xFEE
  8229                           wreg	equ	0xFE8
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           plusw2	equ	0xFDB
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _get_time *****************
  8239 ;; Defined at:
  8240 ;;		line 12 in file "DS1307.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;  Time_Data       2   32[COMRAM] PTR unsigned char 
  8243 ;;		 -> time@time(3), 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;		None
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  1    wreg      unsigned char 
  8248 ;; Registers used:
  8249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8255 ;;      Params:         2       0       0       0       0       0       0
  8256 ;;      Locals:         0       0       0       0       0       0       0
  8257 ;;      Temps:          0       0       0       0       0       0       0
  8258 ;;      Totals:         2       0       0       0       0       0       0
  8259 ;;Total ram usage:        2 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    3
  8262 ;; This function calls:
  8263 ;;		_ReadStr_I2C
  8264 ;; This function is called by:
  8265 ;;		_time
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           	psect	text29
  8270  005142                     __ptext29:
  8271                           	opt stack 0
  8272  005142                     _get_time:
  8273                           	opt stack 0
  8274  005142  FFFF               	dw	65535	; assembler added errata NOP
  8275                           
  8276                           ;DS1307.c: 14: ReadStr_I2C(0xd0,0x00,Time_Data,3);
  8277                           
  8278                           ;incstack = 0
  8279  005144  0E00               	movlw	0
  8280  005146  6E1B               	movwf	ReadStr_I2C@Reg_Addr,c
  8281  005148  C021  F01C         	movff	get_time@Time_Data,ReadStr_I2C@Str
  8282  00514C  C022  F01D         	movff	get_time@Time_Data+1,ReadStr_I2C@Str+1
  8283  005150  0E03               	movlw	3
  8284  005152  6E1E               	movwf	ReadStr_I2C@Str_Size,c
  8285  005154  0ED0               	movlw	208
  8286  005156  ECD5  F037         	call	_ReadStr_I2C
  8287                           
  8288                           ;DS1307.c: 15: return(0);
  8289                           ;	Return value of _get_time is never used
  8290  00515A  0012               	return		;funcret
  8291  00515C  FFFF               	dw	65535	; errata NOP
  8292  00515E                     __end_of_get_time:
  8293                           	opt stack 0
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           intcon	equ	0xFF2
  8299                           postinc0	equ	0xFEE
  8300                           wreg	equ	0xFE8
  8301                           indf2	equ	0xFDF
  8302                           postinc2	equ	0xFDE
  8303                           postdec2	equ	0xFDD
  8304                           plusw2	equ	0xFDB
  8305                           fsr2h	equ	0xFDA
  8306                           fsr2l	equ	0xFD9
  8307                           status	equ	0xFD8
  8308                           
  8309 ;; *************** function _get_date *****************
  8310 ;; Defined at:
  8311 ;;		line 19 in file "DS1307.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  Date_Data       2   32[COMRAM] PTR unsigned char 
  8314 ;;		 -> time@date(4), 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;                  1    wreg      unsigned char 
  8319 ;; Registers used:
  8320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8326 ;;      Params:         2       0       0       0       0       0       0
  8327 ;;      Locals:         0       0       0       0       0       0       0
  8328 ;;      Temps:          0       0       0       0       0       0       0
  8329 ;;      Totals:         2       0       0       0       0       0       0
  8330 ;;Total ram usage:        2 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    3
  8333 ;; This function calls:
  8334 ;;		_ReadStr_I2C
  8335 ;; This function is called by:
  8336 ;;		_time
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text30
  8341  005126                     __ptext30:
  8342                           	opt stack 0
  8343  005126                     _get_date:
  8344                           	opt stack 0
  8345  005126  FFFF               	dw	65535	; assembler added errata NOP
  8346                           
  8347                           ;DS1307.c: 21: ReadStr_I2C(0xd0,0x03,Date_Data,4);
  8348                           
  8349                           ;incstack = 0
  8350  005128  0E03               	movlw	3
  8351  00512A  6E1B               	movwf	ReadStr_I2C@Reg_Addr,c
  8352  00512C  C021  F01C         	movff	get_date@Date_Data,ReadStr_I2C@Str
  8353  005130  C022  F01D         	movff	get_date@Date_Data+1,ReadStr_I2C@Str+1
  8354  005134  0E04               	movlw	4
  8355  005136  6E1E               	movwf	ReadStr_I2C@Str_Size,c
  8356  005138  0ED0               	movlw	208
  8357  00513A  ECD5  F037         	call	_ReadStr_I2C
  8358                           
  8359                           ;DS1307.c: 22: return(0);
  8360                           ;	Return value of _get_date is never used
  8361  00513E  0012               	return		;funcret
  8362  005140  FFFF               	dw	65535	; errata NOP
  8363  005142                     __end_of_get_date:
  8364                           	opt stack 0
  8365                           tblptru	equ	0xFF8
  8366                           tblptrh	equ	0xFF7
  8367                           tblptrl	equ	0xFF6
  8368                           tablat	equ	0xFF5
  8369                           intcon	equ	0xFF2
  8370                           postinc0	equ	0xFEE
  8371                           wreg	equ	0xFE8
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           plusw2	equ	0xFDB
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _ReadStr_I2C *****************
  8381 ;; Defined at:
  8382 ;;		line 248 in file "i2c_FRM.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  Mod_Addr        1    wreg     unsigned char 
  8385 ;;  Reg_Addr        1   26[COMRAM] unsigned char 
  8386 ;;  Str             2   27[COMRAM] PTR unsigned char 
  8387 ;;		 -> time@time(3), time@date(4), 
  8388 ;;  Str_Size        1   29[COMRAM] unsigned char 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  Mod_Addr        1   30[COMRAM] unsigned char 
  8391 ;;  stat            1   31[COMRAM] unsigned char 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      unsigned char 
  8394 ;; Registers used:
  8395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8401 ;;      Params:         4       0       0       0       0       0       0
  8402 ;;      Locals:         2       0       0       0       0       0       0
  8403 ;;      Temps:          0       0       0       0       0       0       0
  8404 ;;      Totals:         6       0       0       0       0       0       0
  8405 ;;Total ram usage:        6 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; Hardware stack levels required when called:    2
  8408 ;; This function calls:
  8409 ;;		_AckI2C
  8410 ;;		_CloseI2C
  8411 ;;		_IdleI2C
  8412 ;;		_Not_AckI2C
  8413 ;;		_OpenI2C
  8414 ;;		_ReadI2C
  8415 ;;		_RestartI2C
  8416 ;;		_StartI2C
  8417 ;;		_StopI2C
  8418 ;;		_Wait_AckI2C
  8419 ;;		_WriteI2C
  8420 ;; This function is called by:
  8421 ;;		_get_time
  8422 ;;		_get_date
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text31
  8427  006FAA                     __ptext31:
  8428                           	opt stack 0
  8429  006FAA                     _ReadStr_I2C:
  8430                           	opt stack 0
  8431  006FAA  FFFF               	dw	65535	; assembler added errata NOP
  8432                           
  8433                           ;incstack = 0
  8434                           ;ReadStr_I2C@Mod_Addr stored from wreg
  8435  006FAC  6E1F               	movwf	ReadStr_I2C@Mod_Addr,c
  8436                           
  8437                           ;i2c_FRM.c: 250: char stat=0;
  8438  006FAE  0E00               	movlw	0
  8439  006FB0  6E20               	movwf	ReadStr_I2C@stat,c
  8440                           
  8441                           ;i2c_FRM.c: 253: OpenI2C(8, 0xC0);
  8442  006FB2  0EC0               	movlw	192
  8443  006FB4  6E19               	movwf	OpenI2C@slew,c
  8444  006FB6  0E08               	movlw	8
  8445  006FB8  ECCB  F028         	call	_OpenI2C
  8446                           
  8447                           ;i2c_FRM.c: 254: SSPADD=0x18;
  8448  006FBC  0E18               	movlw	24
  8449  006FBE  6EC8               	movwf	4040,c	;volatile
  8450                           
  8451                           ;i2c_FRM.c: 255: IdleI2C();
  8452  006FC0  ECDC  F028         	call	_IdleI2C	;wreg free
  8453                           
  8454                           ;i2c_FRM.c: 258: StartI2C();
  8455  006FC4  EC35  F028         	call	_StartI2C	;wreg free
  8456                           
  8457                           ;i2c_FRM.c: 259: stat=WriteI2C(Mod_Addr);
  8458  006FC8  501F               	movf	ReadStr_I2C@Mod_Addr,w,c
  8459  006FCA  EC9E  F029         	call	_WriteI2C
  8460  006FCE  6E20               	movwf	ReadStr_I2C@stat,c
  8461                           
  8462                           ;i2c_FRM.c: 260: if(stat!=0){
  8463  006FD0  5020               	movf	ReadStr_I2C@stat,w,c
  8464  006FD2  B4D8               	btfsc	status,2,c
  8465  006FD4  D005               	goto	l591
  8466                           
  8467                           ;i2c_FRM.c: 261: StopI2C();
  8468  006FD6  EC42  F028         	call	_StopI2C	;wreg free
  8469                           
  8470                           ;i2c_FRM.c: 262: CloseI2C();
  8471  006FDA  EC93  F026         	call	_CloseI2C	;wreg free
  8472                           
  8473                           ;i2c_FRM.c: 263: return(0xff);
  8474                           ;	Return value of _ReadStr_I2C is never used
  8475  006FDE  D05D               	goto	l8986
  8476  006FE0                     l591:
  8477  006FE0  FFFF               	dw	65535	; assembler added errata NOP
  8478                           
  8479                           ;i2c_FRM.c: 264: }
  8480                           ;i2c_FRM.c: 266: stat=Wait_AckI2C();
  8481  006FE2  EC21  F028         	call	_Wait_AckI2C	;wreg free
  8482  006FE6  6E20               	movwf	ReadStr_I2C@stat,c
  8483                           
  8484                           ;i2c_FRM.c: 267: if(stat!=0){
  8485  006FE8  5020               	movf	ReadStr_I2C@stat,w,c
  8486  006FEA  B4D8               	btfsc	status,2,c
  8487  006FEC  D005               	goto	l593
  8488                           
  8489                           ;i2c_FRM.c: 268: StopI2C();
  8490  006FEE  EC42  F028         	call	_StopI2C	;wreg free
  8491                           
  8492                           ;i2c_FRM.c: 269: CloseI2C();
  8493  006FF2  EC93  F026         	call	_CloseI2C	;wreg free
  8494                           
  8495                           ;i2c_FRM.c: 270: return(0xff);
  8496                           ;	Return value of _ReadStr_I2C is never used
  8497  006FF6  D051               	goto	l8986
  8498  006FF8                     l593:
  8499  006FF8  FFFF               	dw	65535	; assembler added errata NOP
  8500                           
  8501                           ;i2c_FRM.c: 271: }
  8502                           ;i2c_FRM.c: 274: stat=WriteI2C(Reg_Addr);
  8503  006FFA  501B               	movf	ReadStr_I2C@Reg_Addr,w,c
  8504  006FFC  EC9E  F029         	call	_WriteI2C
  8505  007000  6E20               	movwf	ReadStr_I2C@stat,c
  8506                           
  8507                           ;i2c_FRM.c: 275: if(stat!=0){
  8508  007002  5020               	movf	ReadStr_I2C@stat,w,c
  8509  007004  B4D8               	btfsc	status,2,c
  8510  007006  D005               	goto	l594
  8511                           
  8512                           ;i2c_FRM.c: 276: StopI2C();
  8513  007008  EC42  F028         	call	_StopI2C	;wreg free
  8514                           
  8515                           ;i2c_FRM.c: 277: CloseI2C();
  8516  00700C  EC93  F026         	call	_CloseI2C	;wreg free
  8517                           
  8518                           ;i2c_FRM.c: 278: return(0xff);
  8519                           ;	Return value of _ReadStr_I2C is never used
  8520  007010  D044               	goto	l8986
  8521  007012                     l594:
  8522  007012  FFFF               	dw	65535	; assembler added errata NOP
  8523                           
  8524                           ;i2c_FRM.c: 279: }
  8525                           ;i2c_FRM.c: 280: stat=Wait_AckI2C();
  8526  007014  EC21  F028         	call	_Wait_AckI2C	;wreg free
  8527  007018  6E20               	movwf	ReadStr_I2C@stat,c
  8528                           
  8529                           ;i2c_FRM.c: 281: if(stat!=0){
  8530  00701A  5020               	movf	ReadStr_I2C@stat,w,c
  8531  00701C  B4D8               	btfsc	status,2,c
  8532  00701E  D005               	goto	l595
  8533                           
  8534                           ;i2c_FRM.c: 282: StopI2C();
  8535  007020  EC42  F028         	call	_StopI2C	;wreg free
  8536                           
  8537                           ;i2c_FRM.c: 283: CloseI2C();
  8538  007024  EC93  F026         	call	_CloseI2C	;wreg free
  8539                           
  8540                           ;i2c_FRM.c: 284: return(0xff);
  8541                           ;	Return value of _ReadStr_I2C is never used
  8542  007028  D038               	goto	l8986
  8543  00702A                     l595:
  8544  00702A  FFFF               	dw	65535	; assembler added errata NOP
  8545                           
  8546                           ;i2c_FRM.c: 285: }
  8547                           ;i2c_FRM.c: 287: RestartI2C();
  8548  00702C  EC5C  F028         	call	_RestartI2C	;wreg free
  8549                           
  8550                           ;i2c_FRM.c: 290: stat=WriteI2C(Mod_Addr|0x01);
  8551  007030  501F               	movf	ReadStr_I2C@Mod_Addr,w,c
  8552  007032  0901               	iorlw	1
  8553  007034  EC9E  F029         	call	_WriteI2C
  8554  007038  6E20               	movwf	ReadStr_I2C@stat,c
  8555                           
  8556                           ;i2c_FRM.c: 291: if(stat!=0){
  8557  00703A  5020               	movf	ReadStr_I2C@stat,w,c
  8558  00703C  B4D8               	btfsc	status,2,c
  8559  00703E  D005               	goto	l596
  8560                           
  8561                           ;i2c_FRM.c: 292: StopI2C();
  8562  007040  EC42  F028         	call	_StopI2C	;wreg free
  8563                           
  8564                           ;i2c_FRM.c: 293: CloseI2C();
  8565  007044  EC93  F026         	call	_CloseI2C	;wreg free
  8566                           
  8567                           ;i2c_FRM.c: 294: return(0xff);
  8568                           ;	Return value of _ReadStr_I2C is never used
  8569  007048  D028               	goto	l8986
  8570  00704A                     l596:
  8571  00704A  FFFF               	dw	65535	; assembler added errata NOP
  8572                           
  8573                           ;i2c_FRM.c: 295: }
  8574                           ;i2c_FRM.c: 296: stat=Wait_AckI2C();
  8575  00704C  EC21  F028         	call	_Wait_AckI2C	;wreg free
  8576  007050  6E20               	movwf	ReadStr_I2C@stat,c
  8577                           
  8578                           ;i2c_FRM.c: 297: if(stat!=0){
  8579  007052  5020               	movf	ReadStr_I2C@stat,w,c
  8580  007054  B4D8               	btfsc	status,2,c
  8581  007056  D018               	goto	l601
  8582                           
  8583                           ;i2c_FRM.c: 298: StopI2C();
  8584  007058  EC42  F028         	call	_StopI2C	;wreg free
  8585                           
  8586                           ;i2c_FRM.c: 299: CloseI2C();
  8587  00705C  EC93  F026         	call	_CloseI2C	;wreg free
  8588                           
  8589                           ;i2c_FRM.c: 300: return(0xff);
  8590                           ;	Return value of _ReadStr_I2C is never used
  8591  007060  D01C               	goto	l8986
  8592  007062  FFFF               	dw	65535	; assembler added errata NOP
  8593                           
  8594                           ;i2c_FRM.c: 304: *Str++=ReadI2C();
  8595  007064  EC85  F028         	call	_ReadI2C	;wreg free
  8596  007068  C01C  FFD9         	movff	ReadStr_I2C@Str,fsr2l
  8597  00706C  C01D  FFDA         	movff	ReadStr_I2C@Str+1,fsr2h
  8598  007070  6EDF               	movwf	indf2,c
  8599  007072  4A1C               	infsnz	ReadStr_I2C@Str,f,c
  8600  007074  2A1D               	incf	ReadStr_I2C@Str+1,f,c
  8601                           
  8602                           ;i2c_FRM.c: 305: if(Str_Size!=0)
  8603  007076  501E               	movf	ReadStr_I2C@Str_Size,w,c
  8604  007078  B4D8               	btfsc	status,2,c
  8605  00707A  D003               	goto	l600
  8606                           
  8607                           ;i2c_FRM.c: 306: AckI2C();
  8608  00707C  EC69  F028         	call	_AckI2C	;wreg free
  8609  007080  D003               	goto	l601
  8610  007082                     l600:
  8611  007082  FFFF               	dw	65535	; assembler added errata NOP
  8612                           
  8613                           ;i2c_FRM.c: 307: else
  8614                           ;i2c_FRM.c: 308: Not_AckI2C();
  8615  007084  EC77  F028         	call	_Not_AckI2C	;wreg free
  8616  007088                     l601:
  8617  007088  FFFF               	dw	65535	; assembler added errata NOP
  8618  00708A  061E               	decf	ReadStr_I2C@Str_Size,f,c
  8619  00708C  281E               	incf	ReadStr_I2C@Str_Size,w,c
  8620  00708E  A4D8               	btfss	status,2,c
  8621  007090  D7E8               	goto	l599
  8622                           
  8623                           ;i2c_FRM.c: 309: }
  8624                           ;i2c_FRM.c: 311: StopI2C();
  8625  007092  EC42  F028         	call	_StopI2C	;wreg free
  8626                           
  8627                           ;i2c_FRM.c: 312: CloseI2C();
  8628  007096  EC93  F026         	call	_CloseI2C	;wreg free
  8629  00709A                     l8986:
  8630  00709A  FFFF               	dw	65535	; assembler added errata NOP
  8631                           
  8632                           ;i2c_FRM.c: 313: return (0x00);
  8633                           ;	Return value of _ReadStr_I2C is never used
  8634  00709C  0012               	return		;funcret
  8635  00709E  FFFF               	dw	65535	; errata NOP
  8636  0070A0                     __end_of_ReadStr_I2C:
  8637                           	opt stack 0
  8638                           tblptru	equ	0xFF8
  8639                           tblptrh	equ	0xFF7
  8640                           tblptrl	equ	0xFF6
  8641                           tablat	equ	0xFF5
  8642                           intcon	equ	0xFF2
  8643                           postinc0	equ	0xFEE
  8644                           wreg	equ	0xFE8
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           plusw2	equ	0xFDB
  8649                           fsr2h	equ	0xFDA
  8650                           fsr2l	equ	0xFD9
  8651                           status	equ	0xFD8
  8652                           
  8653 ;; *************** function _RestartI2C *****************
  8654 ;; Defined at:
  8655 ;;		line 103 in file "i2c_FRM.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;		None
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  1    wreg      void 
  8662 ;; Registers used:
  8663 ;;		None
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8669 ;;      Params:         0       0       0       0       0       0       0
  8670 ;;      Locals:         1       0       0       0       0       0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0
  8672 ;;      Totals:         1       0       0       0       0       0       0
  8673 ;;Total ram usage:        1 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    1
  8676 ;; This function calls:
  8677 ;;		Nothing
  8678 ;; This function is called by:
  8679 ;;		_ReadStr_I2C
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text32
  8684  0050B8                     __ptext32:
  8685                           	opt stack 0
  8686  0050B8                     _RestartI2C:
  8687                           	opt stack 0
  8688  0050B8  FFFF               	dw	65535	; assembler added errata NOP
  8689                           
  8690                           ;i2c_FRM.c: 104: char IE_stat;
  8691                           ;i2c_FRM.c: 105: IE_stat = INTCON;
  8692                           
  8693                           ;incstack = 0
  8694  0050BA  CFF2 F019          	movff	intcon,RestartI2C@IE_stat	;volatile
  8695                           
  8696                           ;i2c_FRM.c: 106: INTCONbits.GIE = 0;
  8697  0050BE  9EF2               	bcf	intcon,7,c	;volatile
  8698                           
  8699                           ;i2c_FRM.c: 107: SSPCON2bits.RSEN = 1;
  8700  0050C0  82C5               	bsf	4037,1,c	;volatile
  8701                           
  8702                           ;i2c_FRM.c: 108: PIR1bits.SSPIF = 0;
  8703  0050C2  969E               	bcf	3998,3,c	;volatile
  8704  0050C4  FFFF               	dw	65535	; assembler added errata NOP
  8705  0050C6  A69E               	btfss	3998,3,c	;volatile
  8706  0050C8  D7FD               	goto	l553
  8707                           
  8708                           ;i2c_FRM.c: 110: INTCON = IE_stat;
  8709  0050CA  C019  FFF2         	movff	RestartI2C@IE_stat,intcon	;volatile
  8710  0050CE  0012               	return		;funcret
  8711  0050D0  FFFF               	dw	65535	; errata NOP
  8712  0050D2                     __end_of_RestartI2C:
  8713                           	opt stack 0
  8714                           tblptru	equ	0xFF8
  8715                           tblptrh	equ	0xFF7
  8716                           tblptrl	equ	0xFF6
  8717                           tablat	equ	0xFF5
  8718                           intcon	equ	0xFF2
  8719                           postinc0	equ	0xFEE
  8720                           wreg	equ	0xFE8
  8721                           indf2	equ	0xFDF
  8722                           postinc2	equ	0xFDE
  8723                           postdec2	equ	0xFDD
  8724                           plusw2	equ	0xFDB
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _ReadI2C *****************
  8730 ;; Defined at:
  8731 ;;		line 119 in file "i2c_FRM.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      unsigned char 
  8738 ;; Registers used:
  8739 ;;		wreg, status,2
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8745 ;;      Params:         0       0       0       0       0       0       0
  8746 ;;      Locals:         1       0       0       0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0
  8748 ;;      Totals:         1       0       0       0       0       0       0
  8749 ;;Total ram usage:        1 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    1
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_ReadStr_I2C
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           	psect	text33
  8760  00510A                     __ptext33:
  8761                           	opt stack 0
  8762  00510A                     _ReadI2C:
  8763                           	opt stack 0
  8764  00510A  FFFF               	dw	65535	; assembler added errata NOP
  8765                           
  8766                           ;i2c_FRM.c: 120: char IE_stat;
  8767                           ;i2c_FRM.c: 122: IE_stat = INTCON;
  8768                           
  8769                           ;incstack = 0
  8770  00510C  CFF2 F019          	movff	intcon,ReadI2C@IE_stat	;volatile
  8771                           
  8772                           ;i2c_FRM.c: 123: INTCONbits.GIE = 0;
  8773  005110  9EF2               	bcf	intcon,7,c	;volatile
  8774                           
  8775                           ;i2c_FRM.c: 124: SSPCON2bits.RCEN = 1;
  8776  005112  86C5               	bsf	4037,3,c	;volatile
  8777                           
  8778                           ;i2c_FRM.c: 125: PIR1bits.SSPIF = 0;
  8779  005114  969E               	bcf	3998,3,c	;volatile
  8780  005116  FFFF               	dw	65535	; assembler added errata NOP
  8781  005118  A69E               	btfss	3998,3,c	;volatile
  8782  00511A  D7FD               	goto	l559
  8783                           
  8784                           ;i2c_FRM.c: 127: INTCON = IE_stat;
  8785  00511C  C019  FFF2         	movff	ReadI2C@IE_stat,intcon	;volatile
  8786                           
  8787                           ;i2c_FRM.c: 128: return ( SSPBUF);
  8788  005120  50C9               	movf	4041,w,c	;volatile
  8789  005122  0012               	return		;funcret
  8790  005124  FFFF               	dw	65535	; errata NOP
  8791  005126                     __end_of_ReadI2C:
  8792                           	opt stack 0
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           intcon	equ	0xFF2
  8798                           postinc0	equ	0xFEE
  8799                           wreg	equ	0xFE8
  8800                           indf2	equ	0xFDF
  8801                           postinc2	equ	0xFDE
  8802                           postdec2	equ	0xFDD
  8803                           plusw2	equ	0xFDB
  8804                           fsr2h	equ	0xFDA
  8805                           fsr2l	equ	0xFD9
  8806                           status	equ	0xFD8
  8807                           
  8808 ;; *************** function _Not_AckI2C *****************
  8809 ;; Defined at:
  8810 ;;		line 192 in file "i2c_FRM.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;		None
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  1    wreg      void 
  8817 ;; Registers used:
  8818 ;;		None
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8824 ;;      Params:         0       0       0       0       0       0       0
  8825 ;;      Locals:         1       0       0       0       0       0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0
  8827 ;;      Totals:         1       0       0       0       0       0       0
  8828 ;;Total ram usage:        1 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    1
  8831 ;; This function calls:
  8832 ;;		Nothing
  8833 ;; This function is called by:
  8834 ;;		_ReadStr_I2C
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	text34
  8839  0050EE                     __ptext34:
  8840                           	opt stack 0
  8841  0050EE                     _Not_AckI2C:
  8842                           	opt stack 0
  8843  0050EE  FFFF               	dw	65535	; assembler added errata NOP
  8844                           
  8845                           ;i2c_FRM.c: 193: char IE_stat;
  8846                           ;i2c_FRM.c: 195: IE_stat = INTCON;
  8847                           
  8848                           ;incstack = 0
  8849  0050F0  CFF2 F019          	movff	intcon,Not_AckI2C@IE_stat	;volatile
  8850                           
  8851                           ;i2c_FRM.c: 196: INTCONbits.GIE = 0;
  8852  0050F4  9EF2               	bcf	intcon,7,c	;volatile
  8853                           
  8854                           ;i2c_FRM.c: 197: SSPCON2bits.ACKDT = 1;
  8855  0050F6  8AC5               	bsf	4037,5,c	;volatile
  8856                           
  8857                           ;i2c_FRM.c: 198: SSPCON2bits.ACKEN = 1;
  8858  0050F8  88C5               	bsf	4037,4,c	;volatile
  8859                           
  8860                           ;i2c_FRM.c: 199: PIR1bits.SSPIF = 0;
  8861  0050FA  969E               	bcf	3998,3,c	;volatile
  8862  0050FC  FFFF               	dw	65535	; assembler added errata NOP
  8863  0050FE  A69E               	btfss	3998,3,c	;volatile
  8864  005100  D7FD               	goto	l580
  8865                           
  8866                           ;i2c_FRM.c: 201: INTCON = IE_stat;
  8867  005102  C019  FFF2         	movff	Not_AckI2C@IE_stat,intcon	;volatile
  8868  005106  0012               	return		;funcret
  8869  005108  FFFF               	dw	65535	; errata NOP
  8870  00510A                     __end_of_Not_AckI2C:
  8871                           	opt stack 0
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           intcon	equ	0xFF2
  8877                           postinc0	equ	0xFEE
  8878                           wreg	equ	0xFE8
  8879                           indf2	equ	0xFDF
  8880                           postinc2	equ	0xFDE
  8881                           postdec2	equ	0xFDD
  8882                           plusw2	equ	0xFDB
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function _AckI2C *****************
  8888 ;; Defined at:
  8889 ;;		line 139 in file "i2c_FRM.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;		None
  8892 ;; Auto vars:     Size  Location     Type
  8893 ;;  IE_stat         1   24[COMRAM] unsigned char 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		None
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8903 ;;      Params:         0       0       0       0       0       0       0
  8904 ;;      Locals:         1       0       0       0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0
  8906 ;;      Totals:         1       0       0       0       0       0       0
  8907 ;;Total ram usage:        1 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:    1
  8910 ;; This function calls:
  8911 ;;		Nothing
  8912 ;; This function is called by:
  8913 ;;		_ReadStr_I2C
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           	psect	text35
  8918  0050D2                     __ptext35:
  8919                           	opt stack 0
  8920  0050D2                     _AckI2C:
  8921                           	opt stack 0
  8922  0050D2  FFFF               	dw	65535	; assembler added errata NOP
  8923                           
  8924                           ;i2c_FRM.c: 140: char IE_stat;
  8925                           ;i2c_FRM.c: 142: IE_stat = INTCON;
  8926                           
  8927                           ;incstack = 0
  8928  0050D4  CFF2 F019          	movff	intcon,AckI2C@IE_stat	;volatile
  8929                           
  8930                           ;i2c_FRM.c: 143: INTCONbits.GIE = 0;
  8931  0050D8  9EF2               	bcf	intcon,7,c	;volatile
  8932                           
  8933                           ;i2c_FRM.c: 144: SSPCON2bits.ACKDT = 0;
  8934  0050DA  9AC5               	bcf	4037,5,c	;volatile
  8935                           
  8936                           ;i2c_FRM.c: 145: SSPCON2bits.ACKEN = 1;
  8937  0050DC  88C5               	bsf	4037,4,c	;volatile
  8938                           
  8939                           ;i2c_FRM.c: 146: PIR1bits.SSPIF = 0;
  8940  0050DE  969E               	bcf	3998,3,c	;volatile
  8941  0050E0  FFFF               	dw	65535	; assembler added errata NOP
  8942  0050E2  A69E               	btfss	3998,3,c	;volatile
  8943  0050E4  D7FD               	goto	l565
  8944                           
  8945                           ;i2c_FRM.c: 148: INTCON = IE_stat;
  8946  0050E6  C019  FFF2         	movff	AckI2C@IE_stat,intcon	;volatile
  8947  0050EA  0012               	return		;funcret
  8948  0050EC  FFFF               	dw	65535	; errata NOP
  8949  0050EE                     __end_of_AckI2C:
  8950                           	opt stack 0
  8951                           tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           intcon	equ	0xFF2
  8956                           postinc0	equ	0xFEE
  8957                           wreg	equ	0xFE8
  8958                           indf2	equ	0xFDF
  8959                           postinc2	equ	0xFDE
  8960                           postdec2	equ	0xFDD
  8961                           plusw2	equ	0xFDB
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _bcdTOint *****************
  8967 ;; Defined at:
  8968 ;;		line 60 in file "DS1307.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  bcdByte         2   44[COMRAM] int 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  2   44[COMRAM] int 
  8975 ;; Registers used:
  8976 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8982 ;;      Params:         2       0       0       0       0       0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0
  8984 ;;      Temps:          0       5       0       0       0       0       0
  8985 ;;      Totals:         2       5       0       0       0       0       0
  8986 ;;Total ram usage:        7 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    2
  8989 ;; This function calls:
  8990 ;;		___wmul
  8991 ;; This function is called by:
  8992 ;;		_time
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           	psect	text36
  8997  0059C2                     __ptext36:
  8998                           	opt stack 0
  8999  0059C2                     _bcdTOint:
  9000                           	opt stack 0
  9001  0059C2  FFFF               	dw	65535	; assembler added errata NOP
  9002                           
  9003                           ;DS1307.c: 62: return (((bcdByte & 0xF0) >> 4) * 10) + (bcdByte & 0x0F);
  9004                           
  9005                           ;incstack = 0
  9006  0059C4  0E0F               	movlw	15
  9007  0059C6  142D               	andwf	bcdTOint@bcdByte,w,c
  9008  0059C8  0100               	movlb	0	; () banked
  9009  0059CA  6F60               	movwf	??_bcdTOint& (0+255),b
  9010  0059CC  0E00               	movlw	0
  9011  0059CE  142E               	andwf	bcdTOint@bcdByte+1,w,c
  9012  0059D0  0100               	movlb	0	; () banked
  9013  0059D2  6F61               	movwf	(??_bcdTOint+1)& (0+255),b
  9014  0059D4  C02D  F062         	movff	bcdTOint@bcdByte,??_bcdTOint+2
  9015  0059D8  C02E  F063         	movff	bcdTOint@bcdByte+1,??_bcdTOint+3
  9016  0059DC  0E04               	movlw	4
  9017  0059DE  0100               	movlb	0	; () banked
  9018  0059E0  6F64               	movwf	(??_bcdTOint+4)& (0+255),b
  9019  0059E2                     u9475:
  9020  0059E2  FFFF               	dw	65535	; assembler added errata NOP
  9021  0059E4  0100               	movlb	0	; () banked
  9022  0059E6  3563               	rlcf	(??_bcdTOint+3)& (0+255),w,b
  9023  0059E8  3363               	rrcf	(??_bcdTOint+3)& (0+255),f,b
  9024  0059EA  3362               	rrcf	(??_bcdTOint+2)& (0+255),f,b
  9025  0059EC  0100               	movlb	0	; () banked
  9026  0059EE  2F64               	decfsz	(??_bcdTOint+4)& (0+255),f,b
  9027  0059F0  D7F8               	goto	u9475
  9028  0059F2  0E0F               	movlw	15
  9029  0059F4  0100               	movlb	0	; () banked
  9030  0059F6  1562               	andwf	(??_bcdTOint+2)& (0+255),w,b
  9031  0059F8  6E27               	movwf	___wmul@multiplier,c
  9032  0059FA  6A28               	clrf	___wmul@multiplier+1,c
  9033  0059FC  0E00               	movlw	0
  9034  0059FE  6E2A               	movwf	___wmul@multiplicand+1,c
  9035  005A00  0E0A               	movlw	10
  9036  005A02  6E29               	movwf	___wmul@multiplicand,c
  9037  005A04  EC74  F029         	call	___wmul	;wreg free
  9038  005A08  0100               	movlb	0	; () banked
  9039  005A0A  5160               	movf	??_bcdTOint& (0+255),w,b
  9040  005A0C  2427               	addwf	?___wmul,w,c
  9041  005A0E  6E2D               	movwf	?_bcdTOint,c
  9042  005A10  0100               	movlb	0	; () banked
  9043  005A12  5161               	movf	(??_bcdTOint+1)& (0+255),w,b
  9044  005A14  2028               	addwfc	?___wmul+1,w,c
  9045  005A16  6E2E               	movwf	?_bcdTOint+1,c
  9046                           
  9047                           ; BSR set to: 0
  9048                           
  9049                           ; BSR set to: 0
  9050  005A18  0012               	return		;funcret
  9051  005A1A  FFFF               	dw	65535	; errata NOP
  9052  005A1C                     __end_of_bcdTOint:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           intcon	equ	0xFF2
  9059                           postinc0	equ	0xFEE
  9060                           wreg	equ	0xFE8
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           plusw2	equ	0xFDB
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function _get_PID_output *****************
  9070 ;; Defined at:
  9071 ;;		line 26 in file "PID_Controller.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  3   24[COMRAM] float 
  9078 ;; Registers used:
  9079 ;;		None
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9085 ;;      Params:         3       0       0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0
  9087 ;;      Temps:          0       0       0       0       0       0       0
  9088 ;;      Totals:         3       0       0       0       0       0       0
  9089 ;;Total ram usage:        3 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    1
  9092 ;; This function calls:
  9093 ;;		Nothing
  9094 ;; This function is called by:
  9095 ;;		_get_list
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           	psect	text37
  9100  00500C                     __ptext37:
  9101                           	opt stack 0
  9102  00500C                     _get_PID_output:
  9103                           	opt stack 0
  9104  00500C  FFFF               	dw	65535	; assembler added errata NOP
  9105                           
  9106                           ;PID_Controller.c: 27: return last_output;
  9107                           
  9108                           ; BSR set to: 0
  9109                           ;incstack = 0
  9110  00500E  C110  F019         	movff	_last_output,?_get_PID_output
  9111  005012  C111  F01A         	movff	_last_output+1,?_get_PID_output+1
  9112  005016  C112  F01B         	movff	_last_output+2,?_get_PID_output+2
  9113  00501A  0012               	return		;funcret
  9114  00501C  FFFF               	dw	65535	; errata NOP
  9115  00501E                     __end_of_get_PID_output:
  9116                           	opt stack 0
  9117                           tblptru	equ	0xFF8
  9118                           tblptrh	equ	0xFF7
  9119                           tblptrl	equ	0xFF6
  9120                           tablat	equ	0xFF5
  9121                           intcon	equ	0xFF2
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           indf2	equ	0xFDF
  9125                           postinc2	equ	0xFDE
  9126                           postdec2	equ	0xFDD
  9127                           plusw2	equ	0xFDB
  9128                           fsr2h	equ	0xFDA
  9129                           fsr2l	equ	0xFD9
  9130                           status	equ	0xFD8
  9131                           
  9132 ;; *************** function _cal_analog *****************
  9133 ;; Defined at:
  9134 ;;		line 94 in file "Commands.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;  var             2  124[BANK0 ] PTR unsigned char 
  9137 ;;		 -> rx_buffer(20), NULL(0), 
  9138 ;;  data            2  126[BANK0 ] PTR unsigned char 
  9139 ;;		 -> rx_buffer(20), NULL(0), 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  val             3  128[BANK0 ] PTR unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      void 
  9144 ;; Registers used:
  9145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/0
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9151 ;;      Params:         0       4       0       0       0       0       0
  9152 ;;      Locals:         0       3       0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0
  9154 ;;      Totals:         0       7       0       0       0       0       0
  9155 ;;Total ram usage:        7 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    6
  9158 ;; This function calls:
  9159 ;;		_Save_Variables
  9160 ;;		_atof
  9161 ;;		_set_VL1_span
  9162 ;;		_set_VL1_zero
  9163 ;;		_set_VL2_span
  9164 ;;		_set_VL2_zero
  9165 ;;		_set_VL3_span
  9166 ;;		_set_VL3_zero
  9167 ;;		_set_Vin_span
  9168 ;;		_set_Vin_zero
  9169 ;;		_sprintf
  9170 ;;		_strcmp
  9171 ;; This function is called by:
  9172 ;;		_read_command
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text38
  9177  002E9C                     __ptext38:
  9178                           	opt stack 0
  9179  002E9C                     _cal_analog:
  9180                           	opt stack 0
  9181  002E9C  FFFF               	dw	65535	; assembler added errata NOP
  9182                           
  9183                           ;Commands.c: 96: double val;
  9184                           ;Commands.c: 98: if(strcmp(var,"v1_z")==0){
  9185                           
  9186                           ;incstack = 0
  9187  002E9E  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9188  002EA2  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9189  002EA6  0EBE               	movlw	low STR_13
  9190  002EA8  6E1B               	movwf	strcmp@s2,c
  9191  002EAA  0E7F               	movlw	high STR_13
  9192  002EAC  6E1C               	movwf	strcmp@s2+1,c
  9193  002EAE  EC8C  F02C         	call	_strcmp	;wreg free
  9194  002EB2  5019               	movf	?_strcmp,w,c
  9195  002EB4  101A               	iorwf	?_strcmp+1,w,c
  9196  002EB6  A4D8               	btfss	status,2,c
  9197  002EB8  D017               	goto	l142
  9198                           
  9199                           ;Commands.c: 99: val=atof(data);
  9200  002EBA  C0DE  F093         	movff	cal_analog@data,atof@s
  9201  002EBE  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9202  002EC2  EC89  F029         	call	_atof	;wreg free
  9203  002EC6  C093  F0E0         	movff	?_atof,cal_analog@val
  9204  002ECA  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9205  002ECE  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9206                           
  9207                           ;Commands.c: 100: set_VL1_zero(val);
  9208  002ED2  C0E0  F019         	movff	cal_analog@val,set_VL1_zero@val
  9209  002ED6  C0E1  F01A         	movff	cal_analog@val+1,set_VL1_zero@val+1
  9210  002EDA  C0E2  F01B         	movff	cal_analog@val+2,set_VL1_zero@val+2
  9211  002EDE  EC25  F027         	call	_set_VL1_zero	;wreg free
  9212                           
  9213                           ;Commands.c: 101: Save_Variables();
  9214  002EE2  EC7D  F03A         	call	_Save_Variables	;wreg free
  9215                           
  9216                           ;Commands.c: 102: }
  9217  002EE6  D118               	goto	l157
  9218  002EE8                     l142:
  9219  002EE8  FFFF               	dw	65535	; assembler added errata NOP
  9220                           
  9221                           ;Commands.c: 103: else if(strcmp(var,"v2_z")==0){
  9222  002EEA  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9223  002EEE  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9224  002EF2  0EC3               	movlw	low STR_14
  9225  002EF4  6E1B               	movwf	strcmp@s2,c
  9226  002EF6  0E7F               	movlw	high STR_14
  9227  002EF8  6E1C               	movwf	strcmp@s2+1,c
  9228  002EFA  EC8C  F02C         	call	_strcmp	;wreg free
  9229  002EFE  5019               	movf	?_strcmp,w,c
  9230  002F00  101A               	iorwf	?_strcmp+1,w,c
  9231  002F02  A4D8               	btfss	status,2,c
  9232  002F04  D017               	goto	l144
  9233                           
  9234                           ;Commands.c: 104: val=atof(data);
  9235  002F06  C0DE  F093         	movff	cal_analog@data,atof@s
  9236  002F0A  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9237  002F0E  EC89  F029         	call	_atof	;wreg free
  9238  002F12  C093  F0E0         	movff	?_atof,cal_analog@val
  9239  002F16  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9240  002F1A  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9241                           
  9242                           ;Commands.c: 105: set_VL2_zero(val);
  9243  002F1E  C0E0  F019         	movff	cal_analog@val,set_VL2_zero@val
  9244  002F22  C0E1  F01A         	movff	cal_analog@val+1,set_VL2_zero@val+1
  9245  002F26  C0E2  F01B         	movff	cal_analog@val+2,set_VL2_zero@val+2
  9246  002F2A  EC37  F027         	call	_set_VL2_zero	;wreg free
  9247                           
  9248                           ;Commands.c: 106: Save_Variables();
  9249  002F2E  EC7D  F03A         	call	_Save_Variables	;wreg free
  9250                           
  9251                           ;Commands.c: 107: }
  9252  002F32  D0F2               	goto	l157
  9253  002F34                     l144:
  9254  002F34  FFFF               	dw	65535	; assembler added errata NOP
  9255                           
  9256                           ;Commands.c: 108: else if(strcmp(var,"v3_z")==0){
  9257  002F36  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9258  002F3A  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9259  002F3E  0EC8               	movlw	low STR_15
  9260  002F40  6E1B               	movwf	strcmp@s2,c
  9261  002F42  0E7F               	movlw	high STR_15
  9262  002F44  6E1C               	movwf	strcmp@s2+1,c
  9263  002F46  EC8C  F02C         	call	_strcmp	;wreg free
  9264  002F4A  5019               	movf	?_strcmp,w,c
  9265  002F4C  101A               	iorwf	?_strcmp+1,w,c
  9266  002F4E  A4D8               	btfss	status,2,c
  9267  002F50  D017               	goto	l146
  9268                           
  9269                           ;Commands.c: 109: val=atof(data);
  9270  002F52  C0DE  F093         	movff	cal_analog@data,atof@s
  9271  002F56  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9272  002F5A  EC89  F029         	call	_atof	;wreg free
  9273  002F5E  C093  F0E0         	movff	?_atof,cal_analog@val
  9274  002F62  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9275  002F66  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9276                           
  9277                           ;Commands.c: 110: set_VL3_zero(val);
  9278  002F6A  C0E0  F019         	movff	cal_analog@val,set_VL3_zero@val
  9279  002F6E  C0E1  F01A         	movff	cal_analog@val+1,set_VL3_zero@val+1
  9280  002F72  C0E2  F01B         	movff	cal_analog@val+2,set_VL3_zero@val+2
  9281  002F76  EC49  F027         	call	_set_VL3_zero	;wreg free
  9282                           
  9283                           ;Commands.c: 111: Save_Variables();
  9284  002F7A  EC7D  F03A         	call	_Save_Variables	;wreg free
  9285                           
  9286                           ;Commands.c: 112: }
  9287  002F7E  D0CC               	goto	l157
  9288  002F80                     l146:
  9289  002F80  FFFF               	dw	65535	; assembler added errata NOP
  9290                           
  9291                           ;Commands.c: 113: else if(strcmp(var,"v1_s")==0){
  9292  002F82  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9293  002F86  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9294  002F8A  0EAF               	movlw	low STR_16
  9295  002F8C  6E1B               	movwf	strcmp@s2,c
  9296  002F8E  0E7F               	movlw	high STR_16
  9297  002F90  6E1C               	movwf	strcmp@s2+1,c
  9298  002F92  EC8C  F02C         	call	_strcmp	;wreg free
  9299  002F96  5019               	movf	?_strcmp,w,c
  9300  002F98  101A               	iorwf	?_strcmp+1,w,c
  9301  002F9A  A4D8               	btfss	status,2,c
  9302  002F9C  D017               	goto	l148
  9303                           
  9304                           ;Commands.c: 114: val=atof(data);
  9305  002F9E  C0DE  F093         	movff	cal_analog@data,atof@s
  9306  002FA2  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9307  002FA6  EC89  F029         	call	_atof	;wreg free
  9308  002FAA  C093  F0E0         	movff	?_atof,cal_analog@val
  9309  002FAE  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9310  002FB2  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9311                           
  9312                           ;Commands.c: 115: set_VL1_span(val);
  9313  002FB6  C0E0  F019         	movff	cal_analog@val,set_VL1_span@val
  9314  002FBA  C0E1  F01A         	movff	cal_analog@val+1,set_VL1_span@val+1
  9315  002FBE  C0E2  F01B         	movff	cal_analog@val+2,set_VL1_span@val+2
  9316  002FC2  EC1C  F027         	call	_set_VL1_span	;wreg free
  9317                           
  9318                           ;Commands.c: 116: Save_Variables();
  9319  002FC6  EC7D  F03A         	call	_Save_Variables	;wreg free
  9320                           
  9321                           ;Commands.c: 117: }
  9322  002FCA  D0A6               	goto	l157
  9323  002FCC                     l148:
  9324  002FCC  FFFF               	dw	65535	; assembler added errata NOP
  9325                           
  9326                           ;Commands.c: 118: else if(strcmp(var,"v2_s")==0){
  9327  002FCE  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9328  002FD2  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9329  002FD6  0EB4               	movlw	low STR_17
  9330  002FD8  6E1B               	movwf	strcmp@s2,c
  9331  002FDA  0E7F               	movlw	high STR_17
  9332  002FDC  6E1C               	movwf	strcmp@s2+1,c
  9333  002FDE  EC8C  F02C         	call	_strcmp	;wreg free
  9334  002FE2  5019               	movf	?_strcmp,w,c
  9335  002FE4  101A               	iorwf	?_strcmp+1,w,c
  9336  002FE6  A4D8               	btfss	status,2,c
  9337  002FE8  D017               	goto	l150
  9338                           
  9339                           ;Commands.c: 119: val=atof(data);
  9340  002FEA  C0DE  F093         	movff	cal_analog@data,atof@s
  9341  002FEE  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9342  002FF2  EC89  F029         	call	_atof	;wreg free
  9343  002FF6  C093  F0E0         	movff	?_atof,cal_analog@val
  9344  002FFA  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9345  002FFE  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9346                           
  9347                           ;Commands.c: 120: set_VL2_span(val);
  9348  003002  C0E0  F019         	movff	cal_analog@val,set_VL2_span@val
  9349  003006  C0E1  F01A         	movff	cal_analog@val+1,set_VL2_span@val+1
  9350  00300A  C0E2  F01B         	movff	cal_analog@val+2,set_VL2_span@val+2
  9351  00300E  EC2E  F027         	call	_set_VL2_span	;wreg free
  9352                           
  9353                           ;Commands.c: 121: Save_Variables();
  9354  003012  EC7D  F03A         	call	_Save_Variables	;wreg free
  9355                           
  9356                           ;Commands.c: 122: }
  9357  003016  D080               	goto	l157
  9358  003018                     l150:
  9359  003018  FFFF               	dw	65535	; assembler added errata NOP
  9360                           
  9361                           ;Commands.c: 123: else if(strcmp(var,"v3_s")==0){
  9362  00301A  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9363  00301E  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9364  003022  0EB9               	movlw	low STR_18
  9365  003024  6E1B               	movwf	strcmp@s2,c
  9366  003026  0E7F               	movlw	high STR_18
  9367  003028  6E1C               	movwf	strcmp@s2+1,c
  9368  00302A  EC8C  F02C         	call	_strcmp	;wreg free
  9369  00302E  5019               	movf	?_strcmp,w,c
  9370  003030  101A               	iorwf	?_strcmp+1,w,c
  9371  003032  A4D8               	btfss	status,2,c
  9372  003034  D017               	goto	l152
  9373                           
  9374                           ;Commands.c: 124: val=atof(data);
  9375  003036  C0DE  F093         	movff	cal_analog@data,atof@s
  9376  00303A  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9377  00303E  EC89  F029         	call	_atof	;wreg free
  9378  003042  C093  F0E0         	movff	?_atof,cal_analog@val
  9379  003046  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9380  00304A  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9381                           
  9382                           ;Commands.c: 125: set_VL3_span(val);
  9383  00304E  C0E0  F019         	movff	cal_analog@val,set_VL3_span@val
  9384  003052  C0E1  F01A         	movff	cal_analog@val+1,set_VL3_span@val+1
  9385  003056  C0E2  F01B         	movff	cal_analog@val+2,set_VL3_span@val+2
  9386  00305A  EC40  F027         	call	_set_VL3_span	;wreg free
  9387                           
  9388                           ;Commands.c: 126: Save_Variables();
  9389  00305E  EC7D  F03A         	call	_Save_Variables	;wreg free
  9390                           
  9391                           ;Commands.c: 127: }
  9392  003062  D05A               	goto	l157
  9393  003064                     l152:
  9394  003064  FFFF               	dw	65535	; assembler added errata NOP
  9395                           
  9396                           ;Commands.c: 128: else if(strcmp(var,"vin_s")==0){
  9397  003066  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9398  00306A  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9399  00306E  0E89               	movlw	low STR_19
  9400  003070  6E1B               	movwf	strcmp@s2,c
  9401  003072  0E7F               	movlw	high STR_19
  9402  003074  6E1C               	movwf	strcmp@s2+1,c
  9403  003076  EC8C  F02C         	call	_strcmp	;wreg free
  9404  00307A  5019               	movf	?_strcmp,w,c
  9405  00307C  101A               	iorwf	?_strcmp+1,w,c
  9406  00307E  A4D8               	btfss	status,2,c
  9407  003080  D017               	goto	l154
  9408                           
  9409                           ;Commands.c: 129: val=atof(data);
  9410  003082  C0DE  F093         	movff	cal_analog@data,atof@s
  9411  003086  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9412  00308A  EC89  F029         	call	_atof	;wreg free
  9413  00308E  C093  F0E0         	movff	?_atof,cal_analog@val
  9414  003092  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9415  003096  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9416                           
  9417                           ;Commands.c: 130: set_Vin_span(val);
  9418  00309A  C0E0  F019         	movff	cal_analog@val,set_Vin_span@val
  9419  00309E  C0E1  F01A         	movff	cal_analog@val+1,set_Vin_span@val+1
  9420  0030A2  C0E2  F01B         	movff	cal_analog@val+2,set_Vin_span@val+2
  9421  0030A6  EC52  F027         	call	_set_Vin_span	;wreg free
  9422                           
  9423                           ;Commands.c: 131: Save_Variables();
  9424  0030AA  EC7D  F03A         	call	_Save_Variables	;wreg free
  9425                           
  9426                           ;Commands.c: 132: }
  9427  0030AE  D034               	goto	l157
  9428  0030B0                     l154:
  9429  0030B0  FFFF               	dw	65535	; assembler added errata NOP
  9430                           
  9431                           ;Commands.c: 133: else if(strcmp(var,"vin_z")==0){
  9432  0030B2  C0DC  F019         	movff	cal_analog@var,strcmp@s1
  9433  0030B6  C0DD  F01A         	movff	cal_analog@var+1,strcmp@s1+1
  9434  0030BA  0E95               	movlw	low STR_20
  9435  0030BC  6E1B               	movwf	strcmp@s2,c
  9436  0030BE  0E7F               	movlw	high STR_20
  9437  0030C0  6E1C               	movwf	strcmp@s2+1,c
  9438  0030C2  EC8C  F02C         	call	_strcmp	;wreg free
  9439  0030C6  5019               	movf	?_strcmp,w,c
  9440  0030C8  101A               	iorwf	?_strcmp+1,w,c
  9441  0030CA  A4D8               	btfss	status,2,c
  9442  0030CC  D017               	goto	l156
  9443                           
  9444                           ;Commands.c: 134: val=atof(data);
  9445  0030CE  C0DE  F093         	movff	cal_analog@data,atof@s
  9446  0030D2  C0DF  F094         	movff	cal_analog@data+1,atof@s+1
  9447  0030D6  EC89  F029         	call	_atof	;wreg free
  9448  0030DA  C093  F0E0         	movff	?_atof,cal_analog@val
  9449  0030DE  C094  F0E1         	movff	?_atof+1,cal_analog@val+1
  9450  0030E2  C095  F0E2         	movff	?_atof+2,cal_analog@val+2
  9451                           
  9452                           ;Commands.c: 135: set_Vin_zero(val);
  9453  0030E6  C0E0  F019         	movff	cal_analog@val,set_Vin_zero@val
  9454  0030EA  C0E1  F01A         	movff	cal_analog@val+1,set_Vin_zero@val+1
  9455  0030EE  C0E2  F01B         	movff	cal_analog@val+2,set_Vin_zero@val+2
  9456  0030F2  EC5B  F027         	call	_set_Vin_zero	;wreg free
  9457                           
  9458                           ;Commands.c: 136: Save_Variables();
  9459  0030F6  EC7D  F03A         	call	_Save_Variables	;wreg free
  9460                           
  9461                           ;Commands.c: 137: }
  9462  0030FA  D00E               	goto	l157
  9463  0030FC                     l156:
  9464  0030FC  FFFF               	dw	65535	; assembler added errata NOP
  9465                           
  9466                           ;Commands.c: 138: else{
  9467                           ;Commands.c: 139: sprintf(buffer,"Parametro errado");
  9468  0030FE  C0F6  F0C4         	movff	_buffer,sprintf@wh
  9469  003102  C0F7  F0C5         	movff	_buffer+1,sprintf@wh+1
  9470  003106  0EFB               	movlw	low STR_21
  9471  003108  0100               	movlb	0	; () banked
  9472  00310A  6FC6               	movwf	sprintf@f& (0+255),b
  9473  00310C  0E7E               	movlw	high STR_21
  9474  00310E  0100               	movlb	0	; () banked
  9475  003110  6FC7               	movwf	(sprintf@f+1)& (0+255),b
  9476  003112  EC8D  F02F         	call	_sprintf	;wreg free
  9477                           
  9478                           ;Commands.c: 140: TXIE=1;
  9479  003116  889D               	bsf	3997,4,c	;volatile
  9480  003118                     l157:
  9481  003118  FFFF               	dw	65535	; assembler added errata NOP
  9482  00311A  0012               	return		;funcret
  9483  00311C  FFFF               	dw	65535	; errata NOP
  9484  00311E                     __end_of_cal_analog:
  9485                           	opt stack 0
  9486                           tblptru	equ	0xFF8
  9487                           tblptrh	equ	0xFF7
  9488                           tblptrl	equ	0xFF6
  9489                           tablat	equ	0xFF5
  9490                           intcon	equ	0xFF2
  9491                           postinc0	equ	0xFEE
  9492                           wreg	equ	0xFE8
  9493                           indf2	equ	0xFDF
  9494                           postinc2	equ	0xFDE
  9495                           postdec2	equ	0xFDD
  9496                           plusw2	equ	0xFDB
  9497                           fsr2h	equ	0xFDA
  9498                           fsr2l	equ	0xFD9
  9499                           status	equ	0xFD8
  9500                           
  9501 ;; *************** function _strcmp *****************
  9502 ;; Defined at:
  9503 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\strcmp.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;  s1              2   24[COMRAM] PTR const unsigned char 
  9506 ;;		 -> rx_buffer(20), NULL(0), 
  9507 ;;  s2              2   26[COMRAM] PTR const unsigned char 
  9508 ;;		 -> STR_66(7), STR_63(5), STR_61(5), STR_59(5), 
  9509 ;;		 -> STR_57(4), STR_55(3), STR_52(5), STR_50(4), 
  9510 ;;		 -> STR_48(4), STR_46(3), STR_44(9), STR_42(9), 
  9511 ;;		 -> STR_40(9), STR_38(3), STR_36(3), STR_34(3), 
  9512 ;;		 -> STR_32(5), STR_31(5), STR_30(4), STR_29(4), 
  9513 ;;		 -> STR_28(3), STR_27(9), STR_26(9), STR_25(12), 
  9514 ;;		 -> STR_24(3), STR_23(3), STR_22(3), STR_20(6), 
  9515 ;;		 -> STR_19(6), STR_18(5), STR_17(5), STR_16(5), 
  9516 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_11(4), 
  9517 ;;		 -> STR_10(4), STR_9(10), STR_8(9), STR_6(4), 
  9518 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(6), 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;  r               1   29[COMRAM] char 
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  2   24[COMRAM] int 
  9523 ;; Registers used:
  9524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9530 ;;      Params:         4       0       0       0       0       0       0
  9531 ;;      Locals:         1       0       0       0       0       0       0
  9532 ;;      Temps:          1       0       0       0       0       0       0
  9533 ;;      Totals:         6       0       0       0       0       0       0
  9534 ;;Total ram usage:        6 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    1
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_read_command
  9541 ;;		_lcd_display
  9542 ;;		_reset_var
  9543 ;;		_cal_analog
  9544 ;;		_set_list
  9545 ;;		_get_list
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text39
  9550  005918                     __ptext39:
  9551                           	opt stack 0
  9552  005918                     _strcmp:
  9553                           	opt stack 0
  9554  005918  FFFF               	dw	65535	; assembler added errata NOP
  9555                           
  9556                           ;incstack = 0
  9557  00591A  D005               	goto	l2056
  9558  00591C  FFFF               	dw	65535	; assembler added errata NOP
  9559  00591E  4A19               	infsnz	strcmp@s1,f,c
  9560  005920  2A1A               	incf	strcmp@s1+1,f,c
  9561  005922  4A1B               	infsnz	strcmp@s2,f,c
  9562  005924  2A1C               	incf	strcmp@s2+1,f,c
  9563  005926                     l2056:
  9564  005926  FFFF               	dw	65535	; assembler added errata NOP
  9565  005928  C019  FFD9         	movff	strcmp@s1,fsr2l
  9566  00592C  C01A  FFDA         	movff	strcmp@s1+1,fsr2h
  9567  005930  50DF               	movf	indf2,w,c
  9568  005932  6E1D               	movwf	??_strcmp& (0+255),c
  9569  005934  C01B  FFF6         	movff	strcmp@s2,tblptrl
  9570  005938  C01C  FFF7         	movff	strcmp@s2+1,tblptrh
  9571  00593C                     	if	0	;tblptru may be non-zero
  9572  00593C                     	endif
  9573  00593C                     	if	0	;tblptru may be non-zero
  9574  00593C                     	endif
  9575  00593C  0008               	tblrd		*
  9576  00593E  FFFF               	dw	65535	; errata NOP
  9577  005940  50F5               	movf	tablat,w,c
  9578  005942  0800               	sublw	0
  9579  005944  241D               	addwf	??_strcmp,w,c
  9580  005946  6E1E               	movwf	strcmp@r,c
  9581  005948  501E               	movf	strcmp@r,w,c
  9582  00594A  A4D8               	btfss	status,2,c
  9583  00594C  D007               	goto	u10560
  9584  00594E  C019  FFD9         	movff	strcmp@s1,fsr2l
  9585  005952  C01A  FFDA         	movff	strcmp@s1+1,fsr2h
  9586  005956  50DF               	movf	indf2,w,c
  9587  005958  A4D8               	btfss	status,2,c
  9588  00595A  D7E0               	goto	l2057
  9589  00595C                     u10560:
  9590  00595C  FFFF               	dw	65535	; assembler added errata NOP
  9591  00595E  501E               	movf	strcmp@r,w,c
  9592  005960  6E19               	movwf	?_strcmp,c
  9593  005962  6A1A               	clrf	?_strcmp+1,c
  9594  005964  BE19               	btfsc	?_strcmp,7,c
  9595  005966  061A               	decf	?_strcmp+1,f,c
  9596  005968  0012               	return		;funcret
  9597  00596A  FFFF               	dw	65535	; errata NOP
  9598  00596C                     __end_of_strcmp:
  9599                           	opt stack 0
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           intcon	equ	0xFF2
  9605                           postinc0	equ	0xFEE
  9606                           wreg	equ	0xFE8
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           plusw2	equ	0xFDB
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _atof *****************
  9616 ;; Defined at:
  9617 ;;		line 200 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atof.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  s               2   51[BANK0 ] PTR const unsigned char 
  9620 ;;		 -> rx_buffer(20), NULL(0), 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;                  3   51[BANK0 ] PTR const unsigned char 
  9625 ;; Registers used:
  9626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9632 ;;      Params:         0       3       0       0       0       0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0
  9635 ;;      Totals:         0       3       0       0       0       0       0
  9636 ;;Total ram usage:        3 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    4
  9639 ;; This function calls:
  9640 ;;		_strtod
  9641 ;; This function is called by:
  9642 ;;		_cal_analog
  9643 ;;		_set_list
  9644 ;; This function uses a non-reentrant model
  9645 ;;
  9646                           
  9647                           	psect	text40
  9648  005312                     __ptext40:
  9649                           	opt stack 0
  9650  005312                     _atof:
  9651                           	opt stack 0
  9652  005312  FFFF               	dw	65535	; assembler added errata NOP
  9653                           
  9654                           ;incstack = 0
  9655  005314  C093  F087         	movff	atof@s,strtod@s
  9656  005318  C094  F088         	movff	atof@s+1,strtod@s+1
  9657  00531C  0E00               	movlw	0
  9658  00531E  0100               	movlb	0	; () banked
  9659  005320  6F89               	movwf	strtod@res& (0+255),b
  9660  005322  0E00               	movlw	0
  9661  005324  0100               	movlb	0	; () banked
  9662  005326  6F8A               	movwf	(strtod@res+1)& (0+255),b
  9663  005328  ECCB  F00D         	call	_strtod	;wreg free
  9664  00532C  C087  F093         	movff	?_strtod,?_atof
  9665  005330  C088  F094         	movff	?_strtod+1,?_atof+1
  9666  005334  C089  F095         	movff	?_strtod+2,?_atof+2
  9667  005338  0012               	return		;funcret
  9668  00533A  FFFF               	dw	65535	; errata NOP
  9669  00533C                     __end_of_atof:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           intcon	equ	0xFF2
  9676                           postinc0	equ	0xFEE
  9677                           wreg	equ	0xFE8
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           plusw2	equ	0xFDB
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function _strtod *****************
  9687 ;; Defined at:
  9688 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\atof.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  s               2   39[BANK0 ] PTR const unsigned char 
  9691 ;;		 -> rx_buffer(20), NULL(0), 
  9692 ;;  res             2   41[BANK0 ] PTR PTR const unsigned c
  9693 ;;		 -> NULL(0), 
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;  _u              4   47[BANK0 ] struct .
  9696 ;;  expon           1   46[BANK0 ] char 
  9697 ;;  flags           1   45[BANK0 ] unsigned char 
  9698 ;;  eexp            1   44[BANK0 ] char 
  9699 ;; Return value:  Size  Location     Type
  9700 ;;                  3   39[BANK0 ] char 
  9701 ;; Registers used:
  9702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9703 ;; Tracked objects:
  9704 ;;		On entry : 0/0
  9705 ;;		On exit  : 0/0
  9706 ;;		Unchanged: 0/0
  9707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9708 ;;      Params:         0       4       0       0       0       0       0
  9709 ;;      Locals:         0       7       0       0       0       0       0
  9710 ;;      Temps:          0       1       0       0       0       0       0
  9711 ;;      Totals:         0      12       0       0       0       0       0
  9712 ;;Total ram usage:       12 bytes
  9713 ;; Hardware stack levels used:    1
  9714 ;; Hardware stack levels required when called:    3
  9715 ;; This function calls:
  9716 ;;		___altoft
  9717 ;;		___ftdiv
  9718 ;;		___ftge
  9719 ;;		___ftmul
  9720 ;;		___ftneg
  9721 ;;		___lmul
  9722 ;;		_isdigit
  9723 ;;		_isspace
  9724 ;; This function is called by:
  9725 ;;		_atof
  9726 ;; This function uses a non-reentrant model
  9727 ;;
  9728                           
  9729                           	psect	text41
  9730  001B96                     __ptext41:
  9731                           	opt stack 0
  9732  001B96                     _strtod:
  9733                           	opt stack 0
  9734  001B96  FFFF               	dw	65535	; assembler added errata NOP
  9735                           
  9736                           ;incstack = 0
  9737  001B98  0100               	movlb	0	; () banked
  9738  001B9A  5189               	movf	strtod@res& (0+255),w,b
  9739  001B9C  0100               	movlb	0	; () banked
  9740  001B9E  118A               	iorwf	(strtod@res+1)& (0+255),w,b
  9741  001BA0  B4D8               	btfsc	status,2,c
  9742  001BA2  D00D               	goto	l1478
  9743                           
  9744                           ; BSR set to: 0
  9745  001BA4  C089  FFD9         	movff	strtod@res,fsr2l
  9746  001BA8  C08A  FFDA         	movff	strtod@res+1,fsr2h
  9747  001BAC  C087  FFDE         	movff	strtod@s,postinc2
  9748  001BB0  C088  FFDD         	movff	strtod@s+1,postdec2
  9749                           
  9750                           ; BSR set to: 0
  9751  001BB4  D004               	goto	l1478
  9752  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  9753                           
  9754                           ; BSR set to: 0
  9755  001BB8  0100               	movlb	0	; () banked
  9756  001BBA  4B87               	infsnz	strtod@s& (0+255),f,b
  9757  001BBC  2B88               	incf	(strtod@s+1)& (0+255),f,b
  9758  001BBE                     l1478:
  9759  001BBE  FFFF               	dw	65535	; assembler added errata NOP
  9760                           
  9761                           ; BSR set to: 0
  9762                           
  9763                           ; BSR set to: 0
  9764  001BC0  C087  FFD9         	movff	strtod@s,fsr2l
  9765  001BC4  C088  FFDA         	movff	strtod@s+1,fsr2h
  9766  001BC8  50DF               	movf	indf2,w,c
  9767  001BCA  0100               	movlb	0	; () banked
  9768  001BCC  6F8C               	movwf	strtod@eexp& (0+255),b
  9769  001BCE  0100               	movlb	0	; () banked
  9770  001BD0  518C               	movf	strtod@eexp& (0+255),w,b
  9771  001BD2  ECE2  F029         	call	_isspace
  9772  001BD6  B0D8               	btfsc	status,0,c
  9773  001BD8  D7EE               	goto	l1479
  9774  001BDA  0E00               	movlw	0
  9775  001BDC  0100               	movlb	0	; () banked
  9776  001BDE  6F8D               	movwf	strtod@flags& (0+255),b
  9777                           
  9778                           ; BSR set to: 0
  9779  001BE0  0E2D               	movlw	45
  9780  001BE2  0100               	movlb	0	; () banked
  9781  001BE4  198C               	xorwf	strtod@eexp& (0+255),w,b
  9782  001BE6  A4D8               	btfss	status,2,c
  9783  001BE8  D004               	goto	l1481
  9784                           
  9785                           ; BSR set to: 0
  9786  001BEA  0E01               	movlw	1
  9787  001BEC  0100               	movlb	0	; () banked
  9788  001BEE  6F8D               	movwf	strtod@flags& (0+255),b
  9789  001BF0  D006               	goto	u10200
  9790  001BF2                     l1481:
  9791  001BF2  FFFF               	dw	65535	; assembler added errata NOP
  9792                           
  9793                           ; BSR set to: 0
  9794                           
  9795                           ; BSR set to: 0
  9796  001BF4  0E2B               	movlw	43
  9797  001BF6  0100               	movlb	0	; () banked
  9798  001BF8  198C               	xorwf	strtod@eexp& (0+255),w,b
  9799  001BFA  A4D8               	btfss	status,2,c
  9800  001BFC  D004               	goto	l1483
  9801  001BFE                     u10200:
  9802  001BFE  FFFF               	dw	65535	; assembler added errata NOP
  9803                           
  9804                           ; BSR set to: 0
  9805  001C00  0100               	movlb	0	; () banked
  9806  001C02  4B87               	infsnz	strtod@s& (0+255),f,b
  9807  001C04  2B88               	incf	(strtod@s+1)& (0+255),f,b
  9808  001C06                     l1483:
  9809  001C06  FFFF               	dw	65535	; assembler added errata NOP
  9810                           
  9811                           ; BSR set to: 0
  9812                           
  9813                           ; BSR set to: 0
  9814                           
  9815                           ; BSR set to: 0
  9816  001C08  0E00               	movlw	0
  9817  001C0A  0100               	movlb	0	; () banked
  9818  001C0C  6F8C               	movwf	strtod@eexp& (0+255),b
  9819                           
  9820                           ; BSR set to: 0
  9821  001C0E  0E00               	movlw	0
  9822  001C10  0100               	movlb	0	; () banked
  9823  001C12  6F8F               	movwf	strtod@_u& (0+255),b
  9824  001C14  0E00               	movlw	0
  9825  001C16  6F90               	movwf	(strtod@_u+1)& (0+255),b
  9826  001C18  0E00               	movlw	0
  9827  001C1A  6F91               	movwf	(strtod@_u+2)& (0+255),b
  9828  001C1C  0E00               	movlw	0
  9829  001C1E  6F92               	movwf	(strtod@_u+3)& (0+255),b
  9830                           
  9831                           ; BSR set to: 0
  9832  001C20  0E00               	movlw	0
  9833  001C22  0100               	movlb	0	; () banked
  9834  001C24  6F8E               	movwf	strtod@expon& (0+255),b
  9835  001C26  FFFF               	dw	65535	; assembler added errata NOP
  9836                           
  9837                           ; BSR set to: 0
  9838                           
  9839                           ; BSR set to: 0
  9840  001C28  0100               	movlb	0	; () banked
  9841  001C2A  B98D               	btfsc	strtod@flags& (0+255),4,b
  9842  001C2C  D00B               	goto	l1485
  9843                           
  9844                           ; BSR set to: 0
  9845  001C2E  C087  FFD9         	movff	strtod@s,fsr2l
  9846  001C32  C088  FFDA         	movff	strtod@s+1,fsr2h
  9847  001C36  0E2E               	movlw	46
  9848  001C38  18DE               	xorwf	postinc2,w,c
  9849  001C3A  A4D8               	btfss	status,2,c
  9850  001C3C  D003               	goto	l1485
  9851                           
  9852                           ; BSR set to: 0
  9853  001C3E  0100               	movlb	0	; () banked
  9854  001C40  898D               	bsf	strtod@flags& (0+255),4,b
  9855  001C42  D04C               	goto	l1492
  9856  001C44                     l1485:
  9857  001C44  FFFF               	dw	65535	; assembler added errata NOP
  9858                           
  9859                           ; BSR set to: 0
  9860                           
  9861                           ; BSR set to: 0
  9862  001C46  C087  FFD9         	movff	strtod@s,fsr2l
  9863  001C4A  C088  FFDA         	movff	strtod@s+1,fsr2h
  9864  001C4E  50DF               	movf	indf2,w,c
  9865  001C50  ECEE  F028         	call	_isdigit
  9866  001C54  A0D8               	btfss	status,0,c
  9867  001C56  D047               	goto	l1488
  9868  001C58  0100               	movlb	0	; () banked
  9869  001C5A  838D               	bsf	strtod@flags& (0+255),1,b
  9870                           
  9871                           ; BSR set to: 0
  9872  001C5C  0E08               	movlw	8
  9873  001C5E  0100               	movlb	0	; () banked
  9874  001C60  198C               	xorwf	strtod@eexp& (0+255),w,b
  9875  001C62  B4D8               	btfsc	status,2,c
  9876  001C64  D035               	goto	l1489
  9877                           
  9878                           ; BSR set to: 0
  9879  001C66  0100               	movlb	0	; () banked
  9880  001C68  A98D               	btfss	strtod@flags& (0+255),4,b
  9881  001C6A  D002               	goto	l1490
  9882                           
  9883                           ; BSR set to: 0
  9884  001C6C  0100               	movlb	0	; () banked
  9885  001C6E  078E               	decf	strtod@expon& (0+255),f,b
  9886  001C70                     l1490:
  9887  001C70  FFFF               	dw	65535	; assembler added errata NOP
  9888                           
  9889                           ; BSR set to: 0
  9890  001C72  0100               	movlb	0	; () banked
  9891  001C74  2B8C               	incf	strtod@eexp& (0+255),f,b
  9892                           
  9893                           ; BSR set to: 0
  9894  001C76  C08F  F019         	movff	strtod@_u,___lmul@multiplier
  9895  001C7A  C090  F01A         	movff	strtod@_u+1,___lmul@multiplier+1
  9896  001C7E  C091  F01B         	movff	strtod@_u+2,___lmul@multiplier+2
  9897  001C82  C092  F01C         	movff	strtod@_u+3,___lmul@multiplier+3
  9898  001C86  0E0A               	movlw	10
  9899  001C88  6E1D               	movwf	___lmul@multiplicand,c
  9900  001C8A  0E00               	movlw	0
  9901  001C8C  6E1E               	movwf	___lmul@multiplicand+1,c
  9902  001C8E  0E00               	movlw	0
  9903  001C90  6E1F               	movwf	___lmul@multiplicand+2,c
  9904  001C92  0E00               	movlw	0
  9905  001C94  6E20               	movwf	___lmul@multiplicand+3,c
  9906  001C96  EC68  F02D         	call	___lmul	;wreg free
  9907  001C9A  C019  F08F         	movff	?___lmul,strtod@_u
  9908  001C9E  C01A  F090         	movff	?___lmul+1,strtod@_u+1
  9909  001CA2  C01B  F091         	movff	?___lmul+2,strtod@_u+2
  9910  001CA6  C01C  F092         	movff	?___lmul+3,strtod@_u+3
  9911  001CAA  C087  FFD9         	movff	strtod@s,fsr2l
  9912  001CAE  C088  FFDA         	movff	strtod@s+1,fsr2h
  9913  001CB2  50DF               	movf	indf2,w,c
  9914  001CB4  0100               	movlb	0	; () banked
  9915  001CB6  6F8B               	movwf	??_strtod& (0+255),b
  9916  001CB8  0ED0               	movlw	208
  9917  001CBA  0100               	movlb	0	; () banked
  9918  001CBC  278B               	addwf	??_strtod& (0+255),f,b
  9919  001CBE  0100               	movlb	0	; () banked
  9920  001CC0  518B               	movf	??_strtod& (0+255),w,b
  9921  001CC2  0100               	movlb	0	; () banked
  9922  001CC4  278F               	addwf	strtod@_u& (0+255),f,b
  9923  001CC6  0E00               	movlw	0
  9924  001CC8  2390               	addwfc	(strtod@_u+1)& (0+255),f,b
  9925  001CCA  2391               	addwfc	(strtod@_u+2)& (0+255),f,b
  9926  001CCC  2392               	addwfc	(strtod@_u+3)& (0+255),f,b
  9927  001CCE  D006               	goto	l1492
  9928  001CD0                     l1489:
  9929  001CD0  FFFF               	dw	65535	; assembler added errata NOP
  9930                           
  9931                           ; BSR set to: 0
  9932  001CD2  0100               	movlb	0	; () banked
  9933  001CD4  B98D               	btfsc	strtod@flags& (0+255),4,b
  9934  001CD6  D002               	goto	l1492
  9935                           
  9936                           ; BSR set to: 0
  9937  001CD8  0100               	movlb	0	; () banked
  9938  001CDA  2B8E               	incf	strtod@expon& (0+255),f,b
  9939  001CDC                     l1492:
  9940  001CDC  FFFF               	dw	65535	; assembler added errata NOP
  9941                           
  9942                           ; BSR set to: 0
  9943                           
  9944                           ; BSR set to: 0
  9945  001CDE  0100               	movlb	0	; () banked
  9946  001CE0  4B87               	infsnz	strtod@s& (0+255),f,b
  9947  001CE2  2B88               	incf	(strtod@s+1)& (0+255),f,b
  9948                           
  9949                           ; BSR set to: 0
  9950  001CE4  D7A0               	goto	l1484
  9951  001CE6                     l1488:
  9952  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  9953                           
  9954                           ; BSR set to: 0
  9955  001CE8  0E00               	movlw	0
  9956  001CEA  0100               	movlb	0	; () banked
  9957  001CEC  6F8C               	movwf	strtod@eexp& (0+255),b
  9958                           
  9959                           ; BSR set to: 0
  9960  001CEE  C087  FFD9         	movff	strtod@s,fsr2l
  9961  001CF2  C088  FFDA         	movff	strtod@s+1,fsr2h
  9962  001CF6  0E65               	movlw	101
  9963  001CF8  18DE               	xorwf	postinc2,w,c
  9964  001CFA  B4D8               	btfsc	status,2,c
  9965  001CFC  D008               	goto	u10280
  9966                           
  9967                           ; BSR set to: 0
  9968  001CFE  C087  FFD9         	movff	strtod@s,fsr2l
  9969  001D02  C088  FFDA         	movff	strtod@s+1,fsr2h
  9970  001D06  0E45               	movlw	69
  9971  001D08  18DE               	xorwf	postinc2,w,c
  9972  001D0A  A4D8               	btfss	status,2,c
  9973  001D0C  D074               	goto	l1505
  9974  001D0E                     u10280:
  9975  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  9976                           
  9977                           ; BSR set to: 0
  9978                           
  9979                           ; BSR set to: 0
  9980  001D10  0100               	movlb	0	; () banked
  9981  001D12  4B87               	infsnz	strtod@s& (0+255),f,b
  9982  001D14  2B88               	incf	(strtod@s+1)& (0+255),f,b
  9983  001D16  C087  FFD9         	movff	strtod@s,fsr2l
  9984  001D1A  C088  FFDA         	movff	strtod@s+1,fsr2h
  9985  001D1E  0E2D               	movlw	45
  9986  001D20  18DE               	xorwf	postinc2,w,c
  9987  001D22  A4D8               	btfss	status,2,c
  9988  001D24  D003               	goto	l1496
  9989                           
  9990                           ; BSR set to: 0
  9991  001D26  0100               	movlb	0	; () banked
  9992  001D28  878D               	bsf	strtod@flags& (0+255),3,b
  9993  001D2A  D009               	goto	u10300
  9994  001D2C                     l1496:
  9995  001D2C  FFFF               	dw	65535	; assembler added errata NOP
  9996                           
  9997                           ; BSR set to: 0
  9998                           
  9999                           ; BSR set to: 0
 10000  001D2E  C087  FFD9         	movff	strtod@s,fsr2l
 10001  001D32  C088  FFDA         	movff	strtod@s+1,fsr2h
 10002  001D36  0E2B               	movlw	43
 10003  001D38  18DE               	xorwf	postinc2,w,c
 10004  001D3A  A4D8               	btfss	status,2,c
 10005  001D3C  D004               	goto	l1499
 10006  001D3E                     u10300:
 10007  001D3E  FFFF               	dw	65535	; assembler added errata NOP
 10008                           
 10009                           ; BSR set to: 0
 10010                           
 10011                           ; BSR set to: 0
 10012                           
 10013                           ; BSR set to: 0
 10014                           
 10015                           ; BSR set to: 0
 10016                           
 10017                           ; BSR set to: 0
 10018  001D40  0100               	movlb	0	; () banked
 10019  001D42  4B87               	infsnz	strtod@s& (0+255),f,b
 10020  001D44  2B88               	incf	(strtod@s+1)& (0+255),f,b
 10021  001D46                     l1499:
 10022  001D46  FFFF               	dw	65535	; assembler added errata NOP
 10023                           
 10024                           ; BSR set to: 0
 10025                           
 10026                           ; BSR set to: 0
 10027  001D48  C087  FFD9         	movff	strtod@s,fsr2l
 10028  001D4C  C088  FFDA         	movff	strtod@s+1,fsr2h
 10029  001D50  0E30               	movlw	48
 10030  001D52  18DE               	xorwf	postinc2,w,c
 10031  001D54  B4D8               	btfsc	status,2,c
 10032  001D56  D7F3               	goto	u10300
 10033                           
 10034                           ; BSR set to: 0
 10035                           
 10036                           ; BSR set to: 0
 10037  001D58  C087  FFD9         	movff	strtod@s,fsr2l
 10038  001D5C  C088  FFDA         	movff	strtod@s+1,fsr2h
 10039  001D60  50DF               	movf	indf2,w,c
 10040  001D62  ECEE  F028         	call	_isdigit
 10041  001D66  A0D8               	btfss	status,0,c
 10042  001D68  D040               	goto	l1504
 10043  001D6A  C087  FFD9         	movff	strtod@s,fsr2l
 10044  001D6E  C088  FFDA         	movff	strtod@s+1,fsr2h
 10045  001D72  50DF               	movf	indf2,w,c
 10046  001D74  0FD0               	addlw	208
 10047  001D76  0100               	movlb	0	; () banked
 10048  001D78  6F8C               	movwf	strtod@eexp& (0+255),b
 10049                           
 10050                           ; BSR set to: 0
 10051  001D7A  0100               	movlb	0	; () banked
 10052  001D7C  4B87               	infsnz	strtod@s& (0+255),f,b
 10053  001D7E  2B88               	incf	(strtod@s+1)& (0+255),f,b
 10054                           
 10055                           ; BSR set to: 0
 10056  001D80  C087  FFD9         	movff	strtod@s,fsr2l
 10057  001D84  C088  FFDA         	movff	strtod@s+1,fsr2h
 10058  001D88  50DF               	movf	indf2,w,c
 10059  001D8A  ECEE  F028         	call	_isdigit
 10060  001D8E  A0D8               	btfss	status,0,c
 10061  001D90  D02C               	goto	l1504
 10062  001D92  C087  FFD9         	movff	strtod@s,fsr2l
 10063  001D96  C088  FFDA         	movff	strtod@s+1,fsr2h
 10064  001D9A  50DF               	movf	indf2,w,c
 10065  001D9C  0100               	movlb	0	; () banked
 10066  001D9E  6F8B               	movwf	??_strtod& (0+255),b
 10067  001DA0  0100               	movlb	0	; () banked
 10068  001DA2  518C               	movf	strtod@eexp& (0+255),w,b
 10069  001DA4  0D0A               	mullw	10
 10070  001DA6  50F3               	movf	prodl,w,c
 10071  001DA8  0100               	movlb	0	; () banked
 10072  001DAA  258B               	addwf	??_strtod& (0+255),w,b
 10073  001DAC  0FD0               	addlw	208
 10074  001DAE  0100               	movlb	0	; () banked
 10075  001DB0  6F8C               	movwf	strtod@eexp& (0+255),b
 10076                           
 10077                           ; BSR set to: 0
 10078  001DB2  0100               	movlb	0	; () banked
 10079  001DB4  4B87               	infsnz	strtod@s& (0+255),f,b
 10080  001DB6  2B88               	incf	(strtod@s+1)& (0+255),f,b
 10081                           
 10082                           ; BSR set to: 0
 10083  001DB8  C087  FFD9         	movff	strtod@s,fsr2l
 10084  001DBC  C088  FFDA         	movff	strtod@s+1,fsr2h
 10085  001DC0  50DF               	movf	indf2,w,c
 10086  001DC2  ECEE  F028         	call	_isdigit
 10087  001DC6  A0D8               	btfss	status,0,c
 10088  001DC8  D010               	goto	l1504
 10089  001DCA  C087  FFD9         	movff	strtod@s,fsr2l
 10090  001DCE  C088  FFDA         	movff	strtod@s+1,fsr2h
 10091  001DD2  50DF               	movf	indf2,w,c
 10092  001DD4  0100               	movlb	0	; () banked
 10093  001DD6  6F8B               	movwf	??_strtod& (0+255),b
 10094  001DD8  0100               	movlb	0	; () banked
 10095  001DDA  518C               	movf	strtod@eexp& (0+255),w,b
 10096  001DDC  0D0A               	mullw	10
 10097  001DDE  50F3               	movf	prodl,w,c
 10098  001DE0  0100               	movlb	0	; () banked
 10099  001DE2  258B               	addwf	??_strtod& (0+255),w,b
 10100  001DE4  0FD0               	addlw	208
 10101  001DE6  0100               	movlb	0	; () banked
 10102  001DE8  6F8C               	movwf	strtod@eexp& (0+255),b
 10103  001DEA                     l1504:
 10104  001DEA  FFFF               	dw	65535	; assembler added errata NOP
 10105                           
 10106                           ; BSR set to: 0
 10107                           
 10108                           ; BSR set to: 0
 10109                           
 10110                           ; BSR set to: 0
 10111  001DEC  0100               	movlb	0	; () banked
 10112  001DEE  A78D               	btfss	strtod@flags& (0+255),3,b
 10113  001DF0  D002               	goto	l1505
 10114                           
 10115                           ; BSR set to: 0
 10116  001DF2  0100               	movlb	0	; () banked
 10117  001DF4  6D8C               	negf	strtod@eexp& (0+255),b
 10118  001DF6                     l1505:
 10119  001DF6  FFFF               	dw	65535	; assembler added errata NOP
 10120                           
 10121                           ; BSR set to: 0
 10122                           
 10123                           ; BSR set to: 0
 10124                           
 10125                           ; BSR set to: 0
 10126  001DF8  0100               	movlb	0	; () banked
 10127  001DFA  518C               	movf	strtod@eexp& (0+255),w,b
 10128  001DFC  0100               	movlb	0	; () banked
 10129  001DFE  278E               	addwf	strtod@expon& (0+255),f,b
 10130                           
 10131                           ; BSR set to: 0
 10132  001E00  0100               	movlb	0	; () banked
 10133  001E02  5189               	movf	strtod@res& (0+255),w,b
 10134  001E04  0100               	movlb	0	; () banked
 10135  001E06  118A               	iorwf	(strtod@res+1)& (0+255),w,b
 10136  001E08  B4D8               	btfsc	status,2,c
 10137  001E0A  D00B               	goto	l1506
 10138                           
 10139                           ; BSR set to: 0
 10140  001E0C  0100               	movlb	0	; () banked
 10141  001E0E  A38D               	btfss	strtod@flags& (0+255),1,b
 10142  001E10  D008               	goto	l1506
 10143                           
 10144                           ; BSR set to: 0
 10145  001E12  C089  FFD9         	movff	strtod@res,fsr2l
 10146  001E16  C08A  FFDA         	movff	strtod@res+1,fsr2h
 10147  001E1A  C087  FFDE         	movff	strtod@s,postinc2
 10148  001E1E  C088  FFDD         	movff	strtod@s+1,postdec2
 10149  001E22                     l1506:
 10150  001E22  FFFF               	dw	65535	; assembler added errata NOP
 10151                           
 10152                           ; BSR set to: 0
 10153                           
 10154                           ; BSR set to: 0
 10155  001E24  C08F  F021         	movff	strtod@_u,___altoft@c
 10156  001E28  C090  F022         	movff	strtod@_u+1,___altoft@c+1
 10157  001E2C  C091  F023         	movff	strtod@_u+2,___altoft@c+2
 10158  001E30  C092  F024         	movff	strtod@_u+3,___altoft@c+3
 10159  001E34  ECCD  F02F         	call	___altoft	;wreg free
 10160  001E38  C021  F08F         	movff	?___altoft,strtod@_u
 10161  001E3C  C022  F090         	movff	?___altoft+1,strtod@_u+1
 10162  001E40  C023  F091         	movff	?___altoft+2,strtod@_u+2
 10163  001E44  0100               	movlb	0	; () banked
 10164  001E46  518F               	movf	strtod@_u& (0+255),w,b
 10165  001E48  0100               	movlb	0	; () banked
 10166  001E4A  1190               	iorwf	(strtod@_u+1)& (0+255),w,b
 10167  001E4C  0100               	movlb	0	; () banked
 10168  001E4E  1191               	iorwf	(strtod@_u+2)& (0+255),w,b
 10169  001E50  A4D8               	btfss	status,2,c
 10170  001E52  D005               	goto	l1507
 10171                           
 10172                           ; BSR set to: 0
 10173  001E54  0E00               	movlw	0
 10174  001E56  0100               	movlb	0	; () banked
 10175  001E58  6F87               	movwf	?_strtod& (0+255),b
 10176  001E5A  0E00               	movlw	0
 10177  001E5C  D0C8               	goto	L29
 10178  001E5E                     l1507:
 10179  001E5E  FFFF               	dw	65535	; assembler added errata NOP
 10180                           
 10181                           ; BSR set to: 0
 10182                           
 10183                           ; BSR set to: 0
 10184  001E60  0100               	movlb	0	; () banked
 10185  001E62  AF8E               	btfss	strtod@expon& (0+255),7,b
 10186  001E64  D05A               	goto	l1509
 10187                           
 10188                           ; BSR set to: 0
 10189  001E66  0100               	movlb	0	; () banked
 10190  001E68  6D8E               	negf	strtod@expon& (0+255),b
 10191  001E6A  D01B               	goto	l1510
 10192  001E6C  FFFF               	dw	65535	; assembler added errata NOP
 10193                           
 10194                           ; BSR set to: 0
 10195                           
 10196                           ; BSR set to: 0
 10197  001E6E  C08F  F069         	movff	strtod@_u,___ftdiv@f1
 10198  001E72  C090  F06A         	movff	strtod@_u+1,___ftdiv@f1+1
 10199  001E76  C091  F06B         	movff	strtod@_u+2,___ftdiv@f1+2
 10200  001E7A  0E03               	movlw	3
 10201  001E7C  0100               	movlb	0	; () banked
 10202  001E7E  6F6C               	movwf	___ftdiv@f2& (0+255),b
 10203  001E80  0E15               	movlw	21
 10204  001E82  0100               	movlb	0	; () banked
 10205  001E84  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 10206  001E86  0E50               	movlw	80
 10207  001E88  0100               	movlb	0	; () banked
 10208  001E8A  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 10209  001E8C  ECB0  F03B         	call	___ftdiv	;wreg free
 10210  001E90  C069  F08F         	movff	?___ftdiv,strtod@_u
 10211  001E94  C06A  F090         	movff	?___ftdiv+1,strtod@_u+1
 10212  001E98  C06B  F091         	movff	?___ftdiv+2,strtod@_u+2
 10213  001E9C  0EF6               	movlw	246
 10214  001E9E  0100               	movlb	0	; () banked
 10215  001EA0  278E               	addwf	strtod@expon& (0+255),f,b
 10216  001EA2                     l1510:
 10217  001EA2  FFFF               	dw	65535	; assembler added errata NOP
 10218                           
 10219                           ; BSR set to: 0
 10220                           
 10221                           ; BSR set to: 0
 10222  001EA4  0100               	movlb	0	; () banked
 10223  001EA6  518E               	movf	strtod@expon& (0+255),w,b
 10224  001EA8  0A80               	xorlw	128
 10225  001EAA  0F76               	addlw	-138
 10226  001EAC  A0D8               	btfss	status,0,c
 10227  001EAE  D01B               	goto	l1513
 10228  001EB0  D7DD               	goto	l1511
 10229  001EB2  FFFF               	dw	65535	; assembler added errata NOP
 10230                           
 10231                           ; BSR set to: 0
 10232                           
 10233                           ; BSR set to: 0
 10234  001EB4  C08F  F069         	movff	strtod@_u,___ftdiv@f1
 10235  001EB8  C090  F06A         	movff	strtod@_u+1,___ftdiv@f1+1
 10236  001EBC  C091  F06B         	movff	strtod@_u+2,___ftdiv@f1+2
 10237  001EC0  0E00               	movlw	0
 10238  001EC2  0100               	movlb	0	; () banked
 10239  001EC4  6F6C               	movwf	___ftdiv@f2& (0+255),b
 10240  001EC6  0E20               	movlw	32
 10241  001EC8  0100               	movlb	0	; () banked
 10242  001ECA  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 10243  001ECC  0E41               	movlw	65
 10244  001ECE  0100               	movlb	0	; () banked
 10245  001ED0  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 10246  001ED2  ECB0  F03B         	call	___ftdiv	;wreg free
 10247  001ED6  C069  F08F         	movff	?___ftdiv,strtod@_u
 10248  001EDA  C06A  F090         	movff	?___ftdiv+1,strtod@_u+1
 10249  001EDE  C06B  F091         	movff	?___ftdiv+2,strtod@_u+2
 10250  001EE2  0100               	movlb	0	; () banked
 10251  001EE4  078E               	decf	strtod@expon& (0+255),f,b
 10252  001EE6                     l1513:
 10253  001EE6  FFFF               	dw	65535	; assembler added errata NOP
 10254                           
 10255                           ; BSR set to: 0
 10256                           
 10257                           ; BSR set to: 0
 10258  001EE8  0100               	movlb	0	; () banked
 10259  001EEA  518E               	movf	strtod@expon& (0+255),w,b
 10260  001EEC  0100               	movlb	0	; () banked
 10261  001EEE  A4D8               	btfss	status,2,c
 10262  001EF0  D7E0               	goto	l1514
 10263                           
 10264                           ; BSR set to: 0
 10265                           
 10266                           ; BSR set to: 0
 10267  001EF2  C08F  F01F         	movff	strtod@_u,___ftge@ff1
 10268  001EF6  C090  F020         	movff	strtod@_u+1,___ftge@ff1+1
 10269  001EFA  C091  F021         	movff	strtod@_u+2,___ftge@ff1+2
 10270  001EFE  0E00               	movlw	0
 10271  001F00  6E22               	movwf	___ftge@ff2,c
 10272  001F02  0E80               	movlw	128
 10273  001F04  6E23               	movwf	___ftge@ff2+1,c
 10274  001F06  0E00               	movlw	0
 10275  001F08  6E24               	movwf	___ftge@ff2+2,c
 10276  001F0A  ECF6  F031         	call	___ftge	;wreg free
 10277  001F0E  B0D8               	btfsc	status,0,c
 10278  001F10  D076               	goto	l1526
 10279  001F12  0100               	movlb	0	; () banked
 10280  001F14  B18D               	btfsc	strtod@flags& (0+255),0,b
 10281  001F16  D05D               	goto	u10480
 10282  001F18  D065               	goto	l1527
 10283  001F1A                     l1509:
 10284  001F1A  FFFF               	dw	65535	; assembler added errata NOP
 10285                           
 10286                           ; BSR set to: 0
 10287                           
 10288                           ; BSR set to: 0
 10289  001F1C  0100               	movlb	0	; () banked
 10290  001F1E  518E               	movf	strtod@expon& (0+255),w,b
 10291  001F20  0A80               	xorlw	128
 10292  001F22  0F7F               	addlw	-129
 10293  001F24  B0D8               	btfsc	status,0,c
 10294  001F26  D01C               	goto	l1520
 10295  001F28  D06A               	goto	l1526
 10296  001F2A  FFFF               	dw	65535	; assembler added errata NOP
 10297                           
 10298                           ; BSR set to: 0
 10299                           
 10300                           ; BSR set to: 0
 10301  001F2C  C08F  F078         	movff	strtod@_u,___ftmul@f1
 10302  001F30  C090  F079         	movff	strtod@_u+1,___ftmul@f1+1
 10303  001F34  C091  F07A         	movff	strtod@_u+2,___ftmul@f1+2
 10304  001F38  0E03               	movlw	3
 10305  001F3A  0100               	movlb	0	; () banked
 10306  001F3C  6F7B               	movwf	___ftmul@f2& (0+255),b
 10307  001F3E  0E15               	movlw	21
 10308  001F40  0100               	movlb	0	; () banked
 10309  001F42  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 10310  001F44  0E50               	movlw	80
 10311  001F46  0100               	movlb	0	; () banked
 10312  001F48  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 10313  001F4A  EC53  F03C         	call	___ftmul	;wreg free
 10314  001F4E  C078  F08F         	movff	?___ftmul,strtod@_u
 10315  001F52  C079  F090         	movff	?___ftmul+1,strtod@_u+1
 10316  001F56  C07A  F091         	movff	?___ftmul+2,strtod@_u+2
 10317  001F5A  0EF6               	movlw	246
 10318  001F5C  0100               	movlb	0	; () banked
 10319  001F5E  278E               	addwf	strtod@expon& (0+255),f,b
 10320  001F60                     l1520:
 10321  001F60  FFFF               	dw	65535	; assembler added errata NOP
 10322                           
 10323                           ; BSR set to: 0
 10324                           
 10325                           ; BSR set to: 0
 10326  001F62  0E0A               	movlw	10
 10327  001F64  0100               	movlb	0	; () banked
 10328  001F66  618E               	cpfslt	strtod@expon& (0+255),b
 10329  001F68  D7E0               	goto	l1521
 10330  001F6A  D01A               	goto	l1523
 10331  001F6C  FFFF               	dw	65535	; assembler added errata NOP
 10332                           
 10333                           ; BSR set to: 0
 10334                           
 10335                           ; BSR set to: 0
 10336  001F6E  C08F  F078         	movff	strtod@_u,___ftmul@f1
 10337  001F72  C090  F079         	movff	strtod@_u+1,___ftmul@f1+1
 10338  001F76  C091  F07A         	movff	strtod@_u+2,___ftmul@f1+2
 10339  001F7A  0E00               	movlw	0
 10340  001F7C  0100               	movlb	0	; () banked
 10341  001F7E  6F7B               	movwf	___ftmul@f2& (0+255),b
 10342  001F80  0E20               	movlw	32
 10343  001F82  0100               	movlb	0	; () banked
 10344  001F84  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 10345  001F86  0E41               	movlw	65
 10346  001F88  0100               	movlb	0	; () banked
 10347  001F8A  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 10348  001F8C  EC53  F03C         	call	___ftmul	;wreg free
 10349  001F90  C078  F08F         	movff	?___ftmul,strtod@_u
 10350  001F94  C079  F090         	movff	?___ftmul+1,strtod@_u+1
 10351  001F98  C07A  F091         	movff	?___ftmul+2,strtod@_u+2
 10352  001F9C  0100               	movlb	0	; () banked
 10353  001F9E  078E               	decf	strtod@expon& (0+255),f,b
 10354  001FA0                     l1523:
 10355  001FA0  FFFF               	dw	65535	; assembler added errata NOP
 10356                           
 10357                           ; BSR set to: 0
 10358                           
 10359                           ; BSR set to: 0
 10360  001FA2  0100               	movlb	0	; () banked
 10361  001FA4  518E               	movf	strtod@expon& (0+255),w,b
 10362  001FA6  0100               	movlb	0	; () banked
 10363  001FA8  A4D8               	btfss	status,2,c
 10364  001FAA  D7E0               	goto	l1524
 10365                           
 10366                           ; BSR set to: 0
 10367                           
 10368                           ; BSR set to: 0
 10369  001FAC  0EFF               	movlw	255
 10370  001FAE  6E1F               	movwf	___ftge@ff1,c
 10371  001FB0  0E7F               	movlw	127
 10372  001FB2  6E20               	movwf	___ftge@ff1+1,c
 10373  001FB4  0E7F               	movlw	127
 10374  001FB6  6E21               	movwf	___ftge@ff1+2,c
 10375  001FB8  C08F  F022         	movff	strtod@_u,___ftge@ff2
 10376  001FBC  C090  F023         	movff	strtod@_u+1,___ftge@ff2+1
 10377  001FC0  C091  F024         	movff	strtod@_u+2,___ftge@ff2+2
 10378  001FC4  ECF6  F031         	call	___ftge	;wreg free
 10379  001FC8  B0D8               	btfsc	status,0,c
 10380  001FCA  D019               	goto	l1526
 10381  001FCC  0100               	movlb	0	; () banked
 10382  001FCE  A18D               	btfss	strtod@flags& (0+255),0,b
 10383  001FD0  D009               	goto	l1527
 10384  001FD2                     u10480:
 10385  001FD2  FFFF               	dw	65535	; assembler added errata NOP
 10386                           
 10387                           ; BSR set to: 0
 10388  001FD4  0E00               	movlw	0
 10389  001FD6  0100               	movlb	0	; () banked
 10390  001FD8  6F87               	movwf	?_strtod& (0+255),b
 10391  001FDA  0E80               	movlw	128
 10392  001FDC  0100               	movlb	0	; () banked
 10393  001FDE  6F88               	movwf	(?_strtod+1)& (0+255),b
 10394  001FE0  0E80               	movlw	128
 10395  001FE2  D009               	goto	L10
 10396  001FE4                     l1527:
 10397  001FE4  FFFF               	dw	65535	; assembler added errata NOP
 10398                           
 10399                           ; BSR set to: 0
 10400                           
 10401                           ; BSR set to: 0
 10402  001FE6  0E00               	movlw	0
 10403  001FE8  0100               	movlb	0	; () banked
 10404  001FEA  6F87               	movwf	?_strtod& (0+255),b
 10405  001FEC  0E80               	movlw	128
 10406  001FEE                     L29:
 10407  001FEE  FFFF               	dw	65535	; assembler added errata NOP
 10408  001FF0  0100               	movlb	0	; () banked
 10409  001FF2  6F88               	movwf	(?_strtod+1)& (0+255),b
 10410  001FF4  0E00               	movlw	0
 10411  001FF6                     L10:
 10412  001FF6  FFFF               	dw	65535	; assembler added errata NOP
 10413  001FF8  0100               	movlb	0	; () banked
 10414  001FFA  6F89               	movwf	(?_strtod+2)& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417  001FFC  D019               	goto	l10216
 10418  001FFE                     l1526:
 10419  001FFE  FFFF               	dw	65535	; assembler added errata NOP
 10420                           
 10421                           ; BSR set to: 0
 10422                           
 10423                           ; BSR set to: 0
 10424  002000  0100               	movlb	0	; () banked
 10425  002002  A18D               	btfss	strtod@flags& (0+255),0,b
 10426  002004  D00E               	goto	l1528
 10427                           
 10428                           ; BSR set to: 0
 10429  002006  C08F  F01C         	movff	strtod@_u,___ftneg@f1
 10430  00200A  C090  F01D         	movff	strtod@_u+1,___ftneg@f1+1
 10431  00200E  C091  F01E         	movff	strtod@_u+2,___ftneg@f1+2
 10432  002012  EC5F  F029         	call	___ftneg	;wreg free
 10433  002016  C01C  F08F         	movff	?___ftneg,strtod@_u
 10434  00201A  C01D  F090         	movff	?___ftneg+1,strtod@_u+1
 10435  00201E  C01E  F091         	movff	?___ftneg+2,strtod@_u+2
 10436  002022                     l1528:
 10437  002022  FFFF               	dw	65535	; assembler added errata NOP
 10438  002024  C08F  F087         	movff	strtod@_u,?_strtod
 10439  002028  C090  F088         	movff	strtod@_u+1,?_strtod+1
 10440  00202C  C091  F089         	movff	strtod@_u+2,?_strtod+2
 10441  002030                     l10216:
 10442  002030  FFFF               	dw	65535	; assembler added errata NOP
 10443  002032  0012               	return		;funcret
 10444  002034  FFFF               	dw	65535	; errata NOP
 10445  002036                     __end_of_strtod:
 10446                           	opt stack 0
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodl	equ	0xFF3
 10452                           intcon	equ	0xFF2
 10453                           postinc0	equ	0xFEE
 10454                           wreg	equ	0xFE8
 10455                           indf2	equ	0xFDF
 10456                           postinc2	equ	0xFDE
 10457                           postdec2	equ	0xFDD
 10458                           plusw2	equ	0xFDB
 10459                           fsr2h	equ	0xFDA
 10460                           fsr2l	equ	0xFD9
 10461                           status	equ	0xFD8
 10462                           
 10463 ;; *************** function _isspace *****************
 10464 ;; Defined at:
 10465 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isspace.c"
 10466 ;; Parameters:    Size  Location     Type
 10467 ;;  c               1    wreg     unsigned char 
 10468 ;; Auto vars:     Size  Location     Type
 10469 ;;  c               1   26[COMRAM] unsigned char 
 10470 ;; Return value:  Size  Location     Type
 10471 ;;		None               void
 10472 ;; Registers used:
 10473 ;;		wreg, status,2, status,0
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10479 ;;      Params:         0       0       0       0       0       0       0
 10480 ;;      Locals:         2       0       0       0       0       0       0
 10481 ;;      Temps:          1       0       0       0       0       0       0
 10482 ;;      Totals:         3       0       0       0       0       0       0
 10483 ;;Total ram usage:        3 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    1
 10486 ;; This function calls:
 10487 ;;		Nothing
 10488 ;; This function is called by:
 10489 ;;		_strtod
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           	psect	text42
 10494  0053C4                     __ptext42:
 10495                           	opt stack 0
 10496  0053C4                     _isspace:
 10497                           	opt stack 0
 10498  0053C4  FFFF               	dw	65535	; assembler added errata NOP
 10499                           
 10500                           ;incstack = 0
 10501                           ;isspace@c stored from wreg
 10502  0053C6  6E1B               	movwf	isspace@c,c
 10503  0053C8  0E01               	movlw	1
 10504  0053CA  6E1A               	movwf	_isspace$2874,c
 10505  0053CC  0E20               	movlw	32
 10506  0053CE  181B               	xorwf	isspace@c,w,c
 10507  0053D0  B4D8               	btfsc	status,2,c
 10508  0053D2  D009               	goto	l1787
 10509  0053D4  0E0E               	movlw	14
 10510  0053D6  601B               	cpfslt	isspace@c,c
 10511  0053D8  D003               	goto	u9070
 10512  0053DA  0E09               	movlw	9
 10513  0053DC  601B               	cpfslt	isspace@c,c
 10514  0053DE  D003               	goto	l1787
 10515  0053E0                     u9070:
 10516  0053E0  FFFF               	dw	65535	; assembler added errata NOP
 10517  0053E2  0E00               	movlw	0
 10518  0053E4  6E1A               	movwf	_isspace$2874,c
 10519  0053E6                     l1787:
 10520  0053E6  FFFF               	dw	65535	; assembler added errata NOP
 10521  0053E8  C01A  F019         	movff	_isspace$2874,??_isspace
 10522  0053EC  3019               	rrcf	??_isspace,w,c
 10523  0053EE  0012               	return		;funcret
 10524  0053F0  FFFF               	dw	65535	; errata NOP
 10525  0053F2                     __end_of_isspace:
 10526                           	opt stack 0
 10527                           tblptru	equ	0xFF8
 10528                           tblptrh	equ	0xFF7
 10529                           tblptrl	equ	0xFF6
 10530                           tablat	equ	0xFF5
 10531                           prodl	equ	0xFF3
 10532                           intcon	equ	0xFF2
 10533                           postinc0	equ	0xFEE
 10534                           wreg	equ	0xFE8
 10535                           indf2	equ	0xFDF
 10536                           postinc2	equ	0xFDE
 10537                           postdec2	equ	0xFDD
 10538                           plusw2	equ	0xFDB
 10539                           fsr2h	equ	0xFDA
 10540                           fsr2l	equ	0xFD9
 10541                           status	equ	0xFD8
 10542                           
 10543 ;; *************** function ___altoft *****************
 10544 ;; Defined at:
 10545 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\altoft.c"
 10546 ;; Parameters:    Size  Location     Type
 10547 ;;  c               4   32[COMRAM] long 
 10548 ;; Auto vars:     Size  Location     Type
 10549 ;;  sign            1   41[COMRAM] unsigned char 
 10550 ;;  exp             1   40[COMRAM] unsigned char 
 10551 ;; Return value:  Size  Location     Type
 10552 ;;                  3   32[COMRAM] float 
 10553 ;; Registers used:
 10554 ;;		wreg, status,2, status,0, cstack
 10555 ;; Tracked objects:
 10556 ;;		On entry : 0/0
 10557 ;;		On exit  : 0/0
 10558 ;;		Unchanged: 0/0
 10559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10560 ;;      Params:         4       0       0       0       0       0       0
 10561 ;;      Locals:         2       0       0       0       0       0       0
 10562 ;;      Temps:          4       0       0       0       0       0       0
 10563 ;;      Totals:        10       0       0       0       0       0       0
 10564 ;;Total ram usage:       10 bytes
 10565 ;; Hardware stack levels used:    1
 10566 ;; Hardware stack levels required when called:    2
 10567 ;; This function calls:
 10568 ;;		___ftpack
 10569 ;; This function is called by:
 10570 ;;		_strtod
 10571 ;; This function uses a non-reentrant model
 10572 ;;
 10573                           
 10574                           	psect	text43
 10575  005F9A                     __ptext43:
 10576                           	opt stack 0
 10577  005F9A                     ___altoft:
 10578                           	opt stack 0
 10579  005F9A  FFFF               	dw	65535	; assembler added errata NOP
 10580                           
 10581                           ;incstack = 0
 10582  005F9C  0E00               	movlw	0
 10583  005F9E  6E2A               	movwf	___altoft@sign,c
 10584  005FA0  0E8E               	movlw	142
 10585  005FA2  6E29               	movwf	___altoft@exp,c
 10586  005FA4  AE24               	btfss	___altoft@c+3,7,c
 10587  005FA6  D012               	goto	l1396
 10588  005FA8  1E24               	comf	___altoft@c+3,f,c
 10589  005FAA  1E23               	comf	___altoft@c+2,f,c
 10590  005FAC  1E22               	comf	___altoft@c+1,f,c
 10591  005FAE  6C21               	negf	___altoft@c,c
 10592  005FB0  0E00               	movlw	0
 10593  005FB2  2222               	addwfc	___altoft@c+1,f,c
 10594  005FB4  2223               	addwfc	___altoft@c+2,f,c
 10595  005FB6  2224               	addwfc	___altoft@c+3,f,c
 10596  005FB8  0E01               	movlw	1
 10597  005FBA  6E2A               	movwf	___altoft@sign,c
 10598  005FBC  D007               	goto	l1396
 10599  005FBE  FFFF               	dw	65535	; assembler added errata NOP
 10600  005FC0  90D8               	bcf	status,0,c
 10601  005FC2  3224               	rrcf	___altoft@c+3,f,c
 10602  005FC4  3223               	rrcf	___altoft@c+2,f,c
 10603  005FC6  3222               	rrcf	___altoft@c+1,f,c
 10604  005FC8  3221               	rrcf	___altoft@c,f,c
 10605  005FCA  2A29               	incf	___altoft@exp,f,c
 10606  005FCC                     l1396:
 10607  005FCC  FFFF               	dw	65535	; assembler added errata NOP
 10608  005FCE  0E00               	movlw	0
 10609  005FD0  1421               	andwf	___altoft@c,w,c
 10610  005FD2  6E25               	movwf	??___altoft& (0+255),c
 10611  005FD4  0E00               	movlw	0
 10612  005FD6  1422               	andwf	___altoft@c+1,w,c
 10613  005FD8  6E26               	movwf	(??___altoft+1)& (0+255),c
 10614  005FDA  0E00               	movlw	0
 10615  005FDC  1423               	andwf	___altoft@c+2,w,c
 10616  005FDE  6E27               	movwf	(??___altoft+2)& (0+255),c
 10617  005FE0  0EFF               	movlw	255
 10618  005FE2  1424               	andwf	___altoft@c+3,w,c
 10619  005FE4  6E28               	movwf	(??___altoft+3)& (0+255),c
 10620  005FE6  5025               	movf	??___altoft,w,c
 10621  005FE8  1026               	iorwf	??___altoft+1,w,c
 10622  005FEA  1027               	iorwf	??___altoft+2,w,c
 10623  005FEC  1028               	iorwf	??___altoft+3,w,c
 10624  005FEE  A4D8               	btfss	status,2,c
 10625  005FF0  D7E6               	goto	l1397
 10626  005FF2  C021  F019         	movff	___altoft@c,___ftpack@arg
 10627  005FF6  C022  F01A         	movff	___altoft@c+1,___ftpack@arg+1
 10628  005FFA  C023  F01B         	movff	___altoft@c+2,___ftpack@arg+2
 10629  005FFE  C029  F01C         	movff	___altoft@exp,___ftpack@exp
 10630  006002  C02A  F01D         	movff	___altoft@sign,___ftpack@sign
 10631  006006  ECCD  F034         	call	___ftpack	;wreg free
 10632  00600A  C019  F021         	movff	?___ftpack,?___altoft
 10633  00600E  C01A  F022         	movff	?___ftpack+1,?___altoft+1
 10634  006012  C01B  F023         	movff	?___ftpack+2,?___altoft+2
 10635  006016  0012               	return		;funcret
 10636  006018  FFFF               	dw	65535	; errata NOP
 10637  00601A                     __end_of___altoft:
 10638                           	opt stack 0
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodl	equ	0xFF3
 10644                           intcon	equ	0xFF2
 10645                           postinc0	equ	0xFEE
 10646                           wreg	equ	0xFE8
 10647                           indf2	equ	0xFDF
 10648                           postinc2	equ	0xFDE
 10649                           postdec2	equ	0xFDD
 10650                           plusw2	equ	0xFDB
 10651                           fsr2h	equ	0xFDA
 10652                           fsr2l	equ	0xFD9
 10653                           status	equ	0xFD8
 10654                           
 10655 ;; *************** function _Save_Variables *****************
 10656 ;; Defined at:
 10657 ;;		line 41 in file "InitVariables.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;		None
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;  data           53    0[BANK0 ] struct data_var
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      void 
 10664 ;; Registers used:
 10665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10671 ;;      Params:         0       0       0       0       0       0       0
 10672 ;;      Locals:         0      53       0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0
 10674 ;;      Totals:         0      53       0       0       0       0       0
 10675 ;;Total ram usage:       53 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    3
 10678 ;; This function calls:
 10679 ;;		_get_LP_RC_Constant
 10680 ;;		_get_PID_Kp
 10681 ;;		_get_PID_T
 10682 ;;		_get_PID_Td
 10683 ;;		_get_PID_Ti
 10684 ;;		_get_PID_deadband
 10685 ;;		_get_PID_setpoint
 10686 ;;		_get_VL1_span
 10687 ;;		_get_VL1_zero
 10688 ;;		_get_VL2_span
 10689 ;;		_get_VL2_zero
 10690 ;;		_get_VL3_span
 10691 ;;		_get_VL3_zero
 10692 ;;		_get_Vin_span
 10693 ;;		_get_Vin_zero
 10694 ;;		_get_max_VL
 10695 ;;		_get_min_VL
 10696 ;;		_wr_string_EE
 10697 ;; This function is called by:
 10698 ;;		_cal_analog
 10699 ;;		_set_list
 10700 ;;		_main
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text44
 10705  0074FA                     __ptext44:
 10706                           	opt stack 0
 10707  0074FA                     _Save_Variables:
 10708                           	opt stack 0
 10709  0074FA  FFFF               	dw	65535	; assembler added errata NOP
 10710                           
 10711                           ;InitVariables.c: 43: union data_var data;
 10712                           ;InitVariables.c: 45: data.code=1234;
 10713                           
 10714                           ;incstack = 0
 10715  0074FC  0E04               	movlw	4
 10716  0074FE  0100               	movlb	0	; () banked
 10717  007500  6F61               	movwf	(Save_Variables@data+1)& (0+255),b
 10718  007502  0ED2               	movlw	210
 10719  007504  6F60               	movwf	Save_Variables@data& (0+255),b
 10720                           
 10721                           ; BSR set to: 0
 10722                           ;InitVariables.c: 46: data.kp=get_PID_Kp();
 10723  007506  EC7F  F027         	call	_get_PID_Kp	;wreg free
 10724  00750A  C019  F062         	movff	?_get_PID_Kp,Save_Variables@data+2
 10725  00750E  C01A  F063         	movff	?_get_PID_Kp+1,Save_Variables@data+3
 10726  007512  C01B  F064         	movff	?_get_PID_Kp+2,Save_Variables@data+4
 10727                           
 10728                           ;InitVariables.c: 47: data.ti=get_PID_Ti();
 10729  007516  EC9A  F027         	call	_get_PID_Ti	;wreg free
 10730  00751A  C019  F065         	movff	?_get_PID_Ti,Save_Variables@data+5
 10731  00751E  C01A  F066         	movff	?_get_PID_Ti+1,Save_Variables@data+6
 10732  007522  C01B  F067         	movff	?_get_PID_Ti+2,Save_Variables@data+7
 10733                           
 10734                           ;InitVariables.c: 48: data.td=get_PID_Td();
 10735  007526  EC91  F027         	call	_get_PID_Td	;wreg free
 10736  00752A  C019  F068         	movff	?_get_PID_Td,Save_Variables@data+8
 10737  00752E  C01A  F069         	movff	?_get_PID_Td+1,Save_Variables@data+9
 10738  007532  C01B  F06A         	movff	?_get_PID_Td+2,Save_Variables@data+10
 10739                           
 10740                           ;InitVariables.c: 49: data.T_sample=get_PID_T();
 10741  007536  EC88  F027         	call	_get_PID_T	;wreg free
 10742  00753A  C019  F06B         	movff	?_get_PID_T,Save_Variables@data+11
 10743  00753E  C01A  F06C         	movff	?_get_PID_T+1,Save_Variables@data+12
 10744  007542  C01B  F06D         	movff	?_get_PID_T+2,Save_Variables@data+13
 10745                           
 10746                           ;InitVariables.c: 50: data.set_point=get_PID_setpoint();
 10747  007546  ECA3  F027         	call	_get_PID_setpoint	;wreg free
 10748  00754A  C019  F06E         	movff	?_get_PID_setpoint,Save_Variables@data+14
 10749  00754E  C01A  F06F         	movff	?_get_PID_setpoint+1,Save_Variables@data+15
 10750  007552  C01B  F070         	movff	?_get_PID_setpoint+2,Save_Variables@data+16
 10751                           
 10752                           ;InitVariables.c: 51: data.deadband=get_PID_deadband();
 10753  007556  ECB9  F026         	call	_get_PID_deadband	;wreg free
 10754  00755A  C019  F071         	movff	?_get_PID_deadband,Save_Variables@data+17
 10755  00755E  C01A  F072         	movff	?_get_PID_deadband+1,Save_Variables@data+18
 10756  007562  C01B  F073         	movff	?_get_PID_deadband+2,Save_Variables@data+19
 10757                           
 10758                           ;InitVariables.c: 52: data.RC_Constant=get_LP_RC_Constant();
 10759  007566  EC76  F027         	call	_get_LP_RC_Constant	;wreg free
 10760  00756A  C019  F074         	movff	?_get_LP_RC_Constant,Save_Variables@data+20
 10761  00756E  C01A  F075         	movff	?_get_LP_RC_Constant+1,Save_Variables@data+21
 10762  007572  C01B  F076         	movff	?_get_LP_RC_Constant+2,Save_Variables@data+22
 10763                           
 10764                           ;InitVariables.c: 53: data.max_VL=get_max_VL();
 10765  007576  ECF4  F027         	call	_get_max_VL	;wreg free
 10766  00757A  C019  F077         	movff	?_get_max_VL,Save_Variables@data+23
 10767  00757E  C01A  F078         	movff	?_get_max_VL+1,Save_Variables@data+24
 10768  007582  C01B  F079         	movff	?_get_max_VL+2,Save_Variables@data+25
 10769                           
 10770                           ;InitVariables.c: 54: data.min_VL=get_min_VL();
 10771  007586  ECFD  F027         	call	_get_min_VL	;wreg free
 10772  00758A  C019  F07A         	movff	?_get_min_VL,Save_Variables@data+26
 10773  00758E  C01A  F07B         	movff	?_get_min_VL+1,Save_Variables@data+27
 10774  007592  C01B  F07C         	movff	?_get_min_VL+2,Save_Variables@data+28
 10775                           
 10776                           ;InitVariables.c: 55: data.V1_zero=get_VL1_zero();
 10777  007596  ECB5  F027         	call	_get_VL1_zero	;wreg free
 10778  00759A  C019  F07D         	movff	?_get_VL1_zero,Save_Variables@data+29
 10779  00759E  C01A  F07E         	movff	?_get_VL1_zero+1,Save_Variables@data+30
 10780  0075A2  C01B  F07F         	movff	?_get_VL1_zero+2,Save_Variables@data+31
 10781                           
 10782                           ;InitVariables.c: 56: data.V2_zero=get_VL2_zero();
 10783  0075A6  ECC7  F027         	call	_get_VL2_zero	;wreg free
 10784  0075AA  C019  F080         	movff	?_get_VL2_zero,Save_Variables@data+32
 10785  0075AE  C01A  F081         	movff	?_get_VL2_zero+1,Save_Variables@data+33
 10786  0075B2  C01B  F082         	movff	?_get_VL2_zero+2,Save_Variables@data+34
 10787                           
 10788                           ;InitVariables.c: 57: data.V3_zero=get_VL3_zero();
 10789  0075B6  ECD9  F027         	call	_get_VL3_zero	;wreg free
 10790  0075BA  C019  F083         	movff	?_get_VL3_zero,Save_Variables@data+35
 10791  0075BE  C01A  F084         	movff	?_get_VL3_zero+1,Save_Variables@data+36
 10792  0075C2  C01B  F085         	movff	?_get_VL3_zero+2,Save_Variables@data+37
 10793                           
 10794                           ;InitVariables.c: 58: data.V1_span=get_VL1_span();
 10795  0075C6  ECAC  F027         	call	_get_VL1_span	;wreg free
 10796  0075CA  C019  F086         	movff	?_get_VL1_span,Save_Variables@data+38
 10797  0075CE  C01A  F087         	movff	?_get_VL1_span+1,Save_Variables@data+39
 10798  0075D2  C01B  F088         	movff	?_get_VL1_span+2,Save_Variables@data+40
 10799                           
 10800                           ;InitVariables.c: 59: data.V2_span=get_VL2_span();
 10801  0075D6  ECBE  F027         	call	_get_VL2_span	;wreg free
 10802  0075DA  C019  F089         	movff	?_get_VL2_span,Save_Variables@data+41
 10803  0075DE  C01A  F08A         	movff	?_get_VL2_span+1,Save_Variables@data+42
 10804  0075E2  C01B  F08B         	movff	?_get_VL2_span+2,Save_Variables@data+43
 10805                           
 10806                           ;InitVariables.c: 60: data.V3_span=get_VL3_span();
 10807  0075E6  ECD0  F027         	call	_get_VL3_span	;wreg free
 10808  0075EA  C019  F08C         	movff	?_get_VL3_span,Save_Variables@data+44
 10809  0075EE  C01A  F08D         	movff	?_get_VL3_span+1,Save_Variables@data+45
 10810  0075F2  C01B  F08E         	movff	?_get_VL3_span+2,Save_Variables@data+46
 10811                           
 10812                           ;InitVariables.c: 61: data.Vin_zero=get_Vin_zero();
 10813  0075F6  ECEB  F027         	call	_get_Vin_zero	;wreg free
 10814  0075FA  C019  F08F         	movff	?_get_Vin_zero,Save_Variables@data+47
 10815  0075FE  C01A  F090         	movff	?_get_Vin_zero+1,Save_Variables@data+48
 10816  007602  C01B  F091         	movff	?_get_Vin_zero+2,Save_Variables@data+49
 10817                           
 10818                           ;InitVariables.c: 62: data.Vin_span=get_Vin_span();
 10819  007606  ECE2  F027         	call	_get_Vin_span	;wreg free
 10820  00760A  C019  F092         	movff	?_get_Vin_span,Save_Variables@data+50
 10821  00760E  C01A  F093         	movff	?_get_Vin_span+1,Save_Variables@data+51
 10822  007612  C01B  F094         	movff	?_get_Vin_span+2,Save_Variables@data+52
 10823                           
 10824                           ;InitVariables.c: 63: wr_string_EE(0, 53, &data);
 10825  007616  0E35               	movlw	53
 10826  007618  6E1B               	movwf	wr_string_EE@lenght,c
 10827  00761A  0E60               	movlw	low Save_Variables@data
 10828  00761C  6E1C               	movwf	wr_string_EE@buffer,c
 10829  00761E  0E00               	movlw	high Save_Variables@data
 10830  007620  6E1D               	movwf	wr_string_EE@buffer+1,c
 10831  007622  0E00               	movlw	0
 10832  007624  EC47  F02A         	call	_wr_string_EE
 10833  007628  0012               	return		;funcret
 10834  00762A  FFFF               	dw	65535	; errata NOP
 10835  00762C                     __end_of_Save_Variables:
 10836                           	opt stack 0
 10837                           tblptru	equ	0xFF8
 10838                           tblptrh	equ	0xFF7
 10839                           tblptrl	equ	0xFF6
 10840                           tablat	equ	0xFF5
 10841                           prodl	equ	0xFF3
 10842                           intcon	equ	0xFF2
 10843                           postinc0	equ	0xFEE
 10844                           wreg	equ	0xFE8
 10845                           indf2	equ	0xFDF
 10846                           postinc2	equ	0xFDE
 10847                           postdec2	equ	0xFDD
 10848                           plusw2	equ	0xFDB
 10849                           fsr2h	equ	0xFDA
 10850                           fsr2l	equ	0xFD9
 10851                           status	equ	0xFD8
 10852                           
 10853 ;; *************** function _wr_string_EE *****************
 10854 ;; Defined at:
 10855 ;;		line 13 in file "EEprom.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;  addr            1    wreg     unsigned char 
 10858 ;;  lenght          1   26[COMRAM] unsigned char 
 10859 ;;  buffer          2   27[COMRAM] PTR unsigned char 
 10860 ;;		 -> Save_Variables@data(53), 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  addr            1   29[COMRAM] unsigned char 
 10863 ;;  i               1   30[COMRAM] unsigned char 
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  1    wreg      void 
 10866 ;; Registers used:
 10867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10873 ;;      Params:         3       0       0       0       0       0       0
 10874 ;;      Locals:         2       0       0       0       0       0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0
 10876 ;;      Totals:         5       0       0       0       0       0       0
 10877 ;;Total ram usage:        5 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    2
 10880 ;; This function calls:
 10881 ;;		_wr_byte_EE
 10882 ;; This function is called by:
 10883 ;;		_Save_Variables
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           	psect	text45
 10888  00548E                     __ptext45:
 10889                           	opt stack 0
 10890  00548E                     _wr_string_EE:
 10891                           	opt stack 0
 10892  00548E  FFFF               	dw	65535	; assembler added errata NOP
 10893                           
 10894                           ;incstack = 0
 10895                           ;wr_string_EE@addr stored from wreg
 10896  005490  6E1E               	movwf	wr_string_EE@addr,c
 10897                           
 10898                           ;EEprom.c: 15: char i;
 10899                           ;EEprom.c: 17: for(i=0;i<lenght;i++)
 10900  005492  0E00               	movlw	0
 10901  005494  6E1F               	movwf	wr_string_EE@i,c
 10902  005496  D00E               	goto	l287
 10903  005498  FFFF               	dw	65535	; assembler added errata NOP
 10904                           
 10905                           ;EEprom.c: 18: wr_byte_EE(addr++,*buffer++);
 10906  00549A  C01C  FFD9         	movff	wr_string_EE@buffer,fsr2l
 10907  00549E  C01D  FFDA         	movff	wr_string_EE@buffer+1,fsr2h
 10908  0054A2  50DF               	movf	indf2,w,c
 10909  0054A4  6E19               	movwf	wr_byte_EE@data,c
 10910  0054A6  501E               	movf	wr_string_EE@addr,w,c
 10911  0054A8  ECCB  F029         	call	_wr_byte_EE
 10912  0054AC  4A1C               	infsnz	wr_string_EE@buffer,f,c
 10913  0054AE  2A1D               	incf	wr_string_EE@buffer+1,f,c
 10914  0054B0  2A1E               	incf	wr_string_EE@addr,f,c
 10915  0054B2  2A1F               	incf	wr_string_EE@i,f,c
 10916  0054B4                     l287:
 10917  0054B4  FFFF               	dw	65535	; assembler added errata NOP
 10918  0054B6  501B               	movf	wr_string_EE@lenght,w,c
 10919  0054B8  5C1F               	subwf	wr_string_EE@i,w,c
 10920  0054BA  B0D8               	btfsc	status,0,c
 10921  0054BC  0012               	return		;funcret
 10922  0054BE  FFFF               	dw	65535	; assembler added errata NOP
 10923  0054C0  D7EB               	goto	l288
 10924  0054C2  FFFF               	dw	65535	; errata NOP
 10925  0054C4                     __end_of_wr_string_EE:
 10926                           	opt stack 0
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodl	equ	0xFF3
 10932                           intcon	equ	0xFF2
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           indf2	equ	0xFDF
 10936                           postinc2	equ	0xFDE
 10937                           postdec2	equ	0xFDD
 10938                           plusw2	equ	0xFDB
 10939                           fsr2h	equ	0xFDA
 10940                           fsr2l	equ	0xFD9
 10941                           status	equ	0xFD8
 10942                           
 10943 ;; *************** function _wr_byte_EE *****************
 10944 ;; Defined at:
 10945 ;;		line 45 in file "EEprom.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;  addr            1    wreg     unsigned char 
 10948 ;;  data            1   24[COMRAM] unsigned char 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;  addr            1   25[COMRAM] unsigned char 
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  1    wreg      void 
 10953 ;; Registers used:
 10954 ;;		wreg, status,2
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10960 ;;      Params:         1       0       0       0       0       0       0
 10961 ;;      Locals:         1       0       0       0       0       0       0
 10962 ;;      Temps:          0       0       0       0       0       0       0
 10963 ;;      Totals:         2       0       0       0       0       0       0
 10964 ;;Total ram usage:        2 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    1
 10967 ;; This function calls:
 10968 ;;		Nothing
 10969 ;; This function is called by:
 10970 ;;		_wr_string_EE
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text46
 10975  005396                     __ptext46:
 10976                           	opt stack 0
 10977  005396                     _wr_byte_EE:
 10978                           	opt stack 0
 10979  005396  FFFF               	dw	65535	; assembler added errata NOP
 10980                           
 10981                           ;incstack = 0
 10982                           ;wr_byte_EE@addr stored from wreg
 10983  005398  6E1A               	movwf	wr_byte_EE@addr,c
 10984                           
 10985                           ;EEprom.c: 47: EEADR = addr;
 10986  00539A  C01A  FFA9         	movff	wr_byte_EE@addr,4009	;volatile
 10987                           
 10988                           ;EEprom.c: 48: EEDATA = data;
 10989  00539E  C019  FFA8         	movff	wr_byte_EE@data,4008	;volatile
 10990                           
 10991                           ;EEprom.c: 49: EECON1bits.EEPGD = 0;
 10992  0053A2  9EA6               	bcf	4006,7,c	;volatile
 10993                           
 10994                           ;EEprom.c: 50: EECON1bits.CFGS=0;
 10995  0053A4  9CA6               	bcf	4006,6,c	;volatile
 10996                           
 10997                           ;EEprom.c: 51: EECON1bits.WREN = 1;
 10998  0053A6  84A6               	bsf	4006,2,c	;volatile
 10999                           
 11000                           ;EEprom.c: 54: INTCONbits.GIE=0;
 11001  0053A8  9EF2               	bcf	intcon,7,c	;volatile
 11002                           
 11003                           ;EEprom.c: 56: EECON2 = 0x55;
 11004  0053AA  0E55               	movlw	85
 11005  0053AC  6EA7               	movwf	4007,c	;volatile
 11006                           
 11007                           ;EEprom.c: 57: EECON2 = 0xaa;
 11008  0053AE  0EAA               	movlw	170
 11009  0053B0  6EA7               	movwf	4007,c	;volatile
 11010                           
 11011                           ;EEprom.c: 59: EECON1bits.WR = 1;
 11012  0053B2  82A6               	bsf	4006,1,c	;volatile
 11013                           
 11014                           ;EEprom.c: 60: INTCONbits.GIE=1;
 11015  0053B4  8EF2               	bsf	intcon,7,c	;volatile
 11016  0053B6  FFFF               	dw	65535	; assembler added errata NOP
 11017                           
 11018                           ;EEprom.c: 63: ;
 11019  0053B8  A8A1               	btfss	4001,4,c	;volatile
 11020  0053BA  D7FD               	goto	l303
 11021                           
 11022                           ;EEprom.c: 64: EECON1bits.WREN=0;
 11023  0053BC  94A6               	bcf	4006,2,c	;volatile
 11024                           
 11025                           ;EEprom.c: 66: PIR2bits.EEIF = 0;
 11026  0053BE  98A1               	bcf	4001,4,c	;volatile
 11027  0053C0  0012               	return		;funcret
 11028  0053C2  FFFF               	dw	65535	; errata NOP
 11029  0053C4                     __end_of_wr_byte_EE:
 11030                           	opt stack 0
 11031                           tblptru	equ	0xFF8
 11032                           tblptrh	equ	0xFF7
 11033                           tblptrl	equ	0xFF6
 11034                           tablat	equ	0xFF5
 11035                           prodl	equ	0xFF3
 11036                           intcon	equ	0xFF2
 11037                           postinc0	equ	0xFEE
 11038                           wreg	equ	0xFE8
 11039                           indf2	equ	0xFDF
 11040                           postinc2	equ	0xFDE
 11041                           postdec2	equ	0xFDD
 11042                           plusw2	equ	0xFDB
 11043                           fsr2h	equ	0xFDA
 11044                           fsr2l	equ	0xFD9
 11045                           status	equ	0xFD8
 11046                           
 11047 ;; *************** function _get_min_VL *****************
 11048 ;; Defined at:
 11049 ;;		line 117 in file "Get_Voltages.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;		None
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;		None
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  3   24[COMRAM] float 
 11056 ;; Registers used:
 11057 ;;		None
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11063 ;;      Params:         3       0       0       0       0       0       0
 11064 ;;      Locals:         0       0       0       0       0       0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0
 11066 ;;      Totals:         3       0       0       0       0       0       0
 11067 ;;Total ram usage:        3 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    1
 11070 ;; This function calls:
 11071 ;;		Nothing
 11072 ;; This function is called by:
 11073 ;;		_get_list
 11074 ;;		_Save_Variables
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           	psect	text47
 11079  004FFA                     __ptext47:
 11080                           	opt stack 0
 11081  004FFA                     _get_min_VL:
 11082                           	opt stack 0
 11083  004FFA  FFFF               	dw	65535	; assembler added errata NOP
 11084                           
 11085                           ;Get_Voltages.c: 118: return VL_min;
 11086                           
 11087                           ;incstack = 0
 11088  004FFC  C128  F019         	movff	_VL_min,?_get_min_VL
 11089  005000  C129  F01A         	movff	_VL_min+1,?_get_min_VL+1
 11090  005004  C12A  F01B         	movff	_VL_min+2,?_get_min_VL+2
 11091  005008  0012               	return		;funcret
 11092  00500A  FFFF               	dw	65535	; errata NOP
 11093  00500C                     __end_of_get_min_VL:
 11094                           	opt stack 0
 11095                           tblptru	equ	0xFF8
 11096                           tblptrh	equ	0xFF7
 11097                           tblptrl	equ	0xFF6
 11098                           tablat	equ	0xFF5
 11099                           prodl	equ	0xFF3
 11100                           intcon	equ	0xFF2
 11101                           postinc0	equ	0xFEE
 11102                           wreg	equ	0xFE8
 11103                           indf2	equ	0xFDF
 11104                           postinc2	equ	0xFDE
 11105                           postdec2	equ	0xFDD
 11106                           plusw2	equ	0xFDB
 11107                           fsr2h	equ	0xFDA
 11108                           fsr2l	equ	0xFD9
 11109                           status	equ	0xFD8
 11110                           
 11111 ;; *************** function _get_max_VL *****************
 11112 ;; Defined at:
 11113 ;;		line 113 in file "Get_Voltages.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  3   24[COMRAM] float 
 11120 ;; Registers used:
 11121 ;;		None
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11127 ;;      Params:         3       0       0       0       0       0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0
 11130 ;;      Totals:         3       0       0       0       0       0       0
 11131 ;;Total ram usage:        3 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    1
 11134 ;; This function calls:
 11135 ;;		Nothing
 11136 ;; This function is called by:
 11137 ;;		_get_list
 11138 ;;		_Save_Variables
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           	psect	text48
 11143  004FE8                     __ptext48:
 11144                           	opt stack 0
 11145  004FE8                     _get_max_VL:
 11146                           	opt stack 0
 11147  004FE8  FFFF               	dw	65535	; assembler added errata NOP
 11148                           
 11149                           ;Get_Voltages.c: 114: return VL_max;
 11150                           
 11151                           ;incstack = 0
 11152  004FEA  C12B  F019         	movff	_VL_max,?_get_max_VL
 11153  004FEE  C12C  F01A         	movff	_VL_max+1,?_get_max_VL+1
 11154  004FF2  C12D  F01B         	movff	_VL_max+2,?_get_max_VL+2
 11155  004FF6  0012               	return		;funcret
 11156  004FF8  FFFF               	dw	65535	; errata NOP
 11157  004FFA                     __end_of_get_max_VL:
 11158                           	opt stack 0
 11159                           tblptru	equ	0xFF8
 11160                           tblptrh	equ	0xFF7
 11161                           tblptrl	equ	0xFF6
 11162                           tablat	equ	0xFF5
 11163                           prodl	equ	0xFF3
 11164                           intcon	equ	0xFF2
 11165                           postinc0	equ	0xFEE
 11166                           wreg	equ	0xFE8
 11167                           indf2	equ	0xFDF
 11168                           postinc2	equ	0xFDE
 11169                           postdec2	equ	0xFDD
 11170                           plusw2	equ	0xFDB
 11171                           fsr2h	equ	0xFDA
 11172                           fsr2l	equ	0xFD9
 11173                           status	equ	0xFD8
 11174                           
 11175 ;; *************** function _get_Vin_zero *****************
 11176 ;; Defined at:
 11177 ;;		line 58 in file "Get_Voltages.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;		None
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;		None
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  3   24[COMRAM] float 
 11184 ;; Registers used:
 11185 ;;		None
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11191 ;;      Params:         3       0       0       0       0       0       0
 11192 ;;      Locals:         0       0       0       0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0
 11194 ;;      Totals:         3       0       0       0       0       0       0
 11195 ;;Total ram usage:        3 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    1
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_Save_Variables
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           	psect	text49
 11206  004FD6                     __ptext49:
 11207                           	opt stack 0
 11208  004FD6                     _get_Vin_zero:
 11209                           	opt stack 0
 11210  004FD6  FFFF               	dw	65535	; assembler added errata NOP
 11211                           
 11212                           ;Get_Voltages.c: 59: return Vin_zero;
 11213                           
 11214                           ;incstack = 0
 11215  004FD8  C13A  F019         	movff	_Vin_zero,?_get_Vin_zero
 11216  004FDC  C13B  F01A         	movff	_Vin_zero+1,?_get_Vin_zero+1
 11217  004FE0  C13C  F01B         	movff	_Vin_zero+2,?_get_Vin_zero+2
 11218  004FE4  0012               	return		;funcret
 11219  004FE6  FFFF               	dw	65535	; errata NOP
 11220  004FE8                     __end_of_get_Vin_zero:
 11221                           	opt stack 0
 11222                           tblptru	equ	0xFF8
 11223                           tblptrh	equ	0xFF7
 11224                           tblptrl	equ	0xFF6
 11225                           tablat	equ	0xFF5
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           postinc0	equ	0xFEE
 11229                           wreg	equ	0xFE8
 11230                           indf2	equ	0xFDF
 11231                           postinc2	equ	0xFDE
 11232                           postdec2	equ	0xFDD
 11233                           plusw2	equ	0xFDB
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function _get_Vin_span *****************
 11239 ;; Defined at:
 11240 ;;		line 55 in file "Get_Voltages.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;		None
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;		None
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  3   24[COMRAM] float 
 11247 ;; Registers used:
 11248 ;;		None
 11249 ;; Tracked objects:
 11250 ;;		On entry : 0/0
 11251 ;;		On exit  : 0/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11254 ;;      Params:         3       0       0       0       0       0       0
 11255 ;;      Locals:         0       0       0       0       0       0       0
 11256 ;;      Temps:          0       0       0       0       0       0       0
 11257 ;;      Totals:         3       0       0       0       0       0       0
 11258 ;;Total ram usage:        3 bytes
 11259 ;; Hardware stack levels used:    1
 11260 ;; Hardware stack levels required when called:    1
 11261 ;; This function calls:
 11262 ;;		Nothing
 11263 ;; This function is called by:
 11264 ;;		_Save_Variables
 11265 ;; This function uses a non-reentrant model
 11266 ;;
 11267                           
 11268                           	psect	text50
 11269  004FC4                     __ptext50:
 11270                           	opt stack 0
 11271  004FC4                     _get_Vin_span:
 11272                           	opt stack 0
 11273  004FC4  FFFF               	dw	65535	; assembler added errata NOP
 11274                           
 11275                           ;Get_Voltages.c: 56: return Vin_Span;
 11276                           
 11277                           ;incstack = 0
 11278  004FC6  C12E  F019         	movff	_Vin_Span,?_get_Vin_span
 11279  004FCA  C12F  F01A         	movff	_Vin_Span+1,?_get_Vin_span+1
 11280  004FCE  C130  F01B         	movff	_Vin_Span+2,?_get_Vin_span+2
 11281  004FD2  0012               	return		;funcret
 11282  004FD4  FFFF               	dw	65535	; errata NOP
 11283  004FD6                     __end_of_get_Vin_span:
 11284                           	opt stack 0
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodl	equ	0xFF3
 11290                           intcon	equ	0xFF2
 11291                           postinc0	equ	0xFEE
 11292                           wreg	equ	0xFE8
 11293                           indf2	equ	0xFDF
 11294                           postinc2	equ	0xFDE
 11295                           postdec2	equ	0xFDD
 11296                           plusw2	equ	0xFDB
 11297                           fsr2h	equ	0xFDA
 11298                           fsr2l	equ	0xFD9
 11299                           status	equ	0xFD8
 11300                           
 11301 ;; *************** function _get_VL3_zero *****************
 11302 ;; Defined at:
 11303 ;;		line 40 in file "Get_Voltages.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;		None
 11306 ;; Auto vars:     Size  Location     Type
 11307 ;;		None
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  3   24[COMRAM] float 
 11310 ;; Registers used:
 11311 ;;		None
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11317 ;;      Params:         3       0       0       0       0       0       0
 11318 ;;      Locals:         0       0       0       0       0       0       0
 11319 ;;      Temps:          0       0       0       0       0       0       0
 11320 ;;      Totals:         3       0       0       0       0       0       0
 11321 ;;Total ram usage:        3 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    1
 11324 ;; This function calls:
 11325 ;;		Nothing
 11326 ;; This function is called by:
 11327 ;;		_Save_Variables
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           	psect	text51
 11332  004FB2                     __ptext51:
 11333                           	opt stack 0
 11334  004FB2                     _get_VL3_zero:
 11335                           	opt stack 0
 11336  004FB2  FFFF               	dw	65535	; assembler added errata NOP
 11337                           
 11338                           ;Get_Voltages.c: 41: return VL3_zero;
 11339                           
 11340                           ;incstack = 0
 11341  004FB4  C13D  F019         	movff	_VL3_zero,?_get_VL3_zero
 11342  004FB8  C13E  F01A         	movff	_VL3_zero+1,?_get_VL3_zero+1
 11343  004FBC  C13F  F01B         	movff	_VL3_zero+2,?_get_VL3_zero+2
 11344  004FC0  0012               	return		;funcret
 11345  004FC2  FFFF               	dw	65535	; errata NOP
 11346  004FC4                     __end_of_get_VL3_zero:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodl	equ	0xFF3
 11353                           intcon	equ	0xFF2
 11354                           postinc0	equ	0xFEE
 11355                           wreg	equ	0xFE8
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           plusw2	equ	0xFDB
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _get_VL3_span *****************
 11365 ;; Defined at:
 11366 ;;		line 52 in file "Get_Voltages.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;		None
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  3   24[COMRAM] float 
 11373 ;; Registers used:
 11374 ;;		None
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11380 ;;      Params:         3       0       0       0       0       0       0
 11381 ;;      Locals:         0       0       0       0       0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0
 11383 ;;      Totals:         3       0       0       0       0       0       0
 11384 ;;Total ram usage:        3 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    1
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_Save_Variables
 11391 ;; This function uses a non-reentrant model
 11392 ;;
 11393                           
 11394                           	psect	text52
 11395  004FA0                     __ptext52:
 11396                           	opt stack 0
 11397  004FA0                     _get_VL3_span:
 11398                           	opt stack 0
 11399  004FA0  FFFF               	dw	65535	; assembler added errata NOP
 11400                           
 11401                           ;Get_Voltages.c: 53: return VL3_span;
 11402                           
 11403                           ;incstack = 0
 11404  004FA2  C131  F019         	movff	_VL3_span,?_get_VL3_span
 11405  004FA6  C132  F01A         	movff	_VL3_span+1,?_get_VL3_span+1
 11406  004FAA  C133  F01B         	movff	_VL3_span+2,?_get_VL3_span+2
 11407  004FAE  0012               	return		;funcret
 11408  004FB0  FFFF               	dw	65535	; errata NOP
 11409  004FB2                     __end_of_get_VL3_span:
 11410                           	opt stack 0
 11411                           tblptru	equ	0xFF8
 11412                           tblptrh	equ	0xFF7
 11413                           tblptrl	equ	0xFF6
 11414                           tablat	equ	0xFF5
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           plusw2	equ	0xFDB
 11423                           fsr2h	equ	0xFDA
 11424                           fsr2l	equ	0xFD9
 11425                           status	equ	0xFD8
 11426                           
 11427 ;; *************** function _get_VL2_zero *****************
 11428 ;; Defined at:
 11429 ;;		line 36 in file "Get_Voltages.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  3   24[COMRAM] float 
 11436 ;; Registers used:
 11437 ;;		None
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11443 ;;      Params:         3       0       0       0       0       0       0
 11444 ;;      Locals:         0       0       0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0
 11446 ;;      Totals:         3       0       0       0       0       0       0
 11447 ;;Total ram usage:        3 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    1
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_Save_Variables
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text53
 11458  004F8E                     __ptext53:
 11459                           	opt stack 0
 11460  004F8E                     _get_VL2_zero:
 11461                           	opt stack 0
 11462  004F8E  FFFF               	dw	65535	; assembler added errata NOP
 11463                           
 11464                           ;Get_Voltages.c: 37: return VL2_zero;
 11465                           
 11466                           ;incstack = 0
 11467  004F90  C140  F019         	movff	_VL2_zero,?_get_VL2_zero
 11468  004F94  C141  F01A         	movff	_VL2_zero+1,?_get_VL2_zero+1
 11469  004F98  C142  F01B         	movff	_VL2_zero+2,?_get_VL2_zero+2
 11470  004F9C  0012               	return		;funcret
 11471  004F9E  FFFF               	dw	65535	; errata NOP
 11472  004FA0                     __end_of_get_VL2_zero:
 11473                           	opt stack 0
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           postinc0	equ	0xFEE
 11481                           wreg	equ	0xFE8
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           plusw2	equ	0xFDB
 11486                           fsr2h	equ	0xFDA
 11487                           fsr2l	equ	0xFD9
 11488                           status	equ	0xFD8
 11489                           
 11490 ;; *************** function _get_VL2_span *****************
 11491 ;; Defined at:
 11492 ;;		line 48 in file "Get_Voltages.c"
 11493 ;; Parameters:    Size  Location     Type
 11494 ;;		None
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;		None
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  3   24[COMRAM] float 
 11499 ;; Registers used:
 11500 ;;		None
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11506 ;;      Params:         3       0       0       0       0       0       0
 11507 ;;      Locals:         0       0       0       0       0       0       0
 11508 ;;      Temps:          0       0       0       0       0       0       0
 11509 ;;      Totals:         3       0       0       0       0       0       0
 11510 ;;Total ram usage:        3 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    1
 11513 ;; This function calls:
 11514 ;;		Nothing
 11515 ;; This function is called by:
 11516 ;;		_Save_Variables
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text54
 11521  004F7C                     __ptext54:
 11522                           	opt stack 0
 11523  004F7C                     _get_VL2_span:
 11524                           	opt stack 0
 11525  004F7C  FFFF               	dw	65535	; assembler added errata NOP
 11526                           
 11527                           ;Get_Voltages.c: 49: return VL2_span;
 11528                           
 11529                           ;incstack = 0
 11530  004F7E  C134  F019         	movff	_VL2_span,?_get_VL2_span
 11531  004F82  C135  F01A         	movff	_VL2_span+1,?_get_VL2_span+1
 11532  004F86  C136  F01B         	movff	_VL2_span+2,?_get_VL2_span+2
 11533  004F8A  0012               	return		;funcret
 11534  004F8C  FFFF               	dw	65535	; errata NOP
 11535  004F8E                     __end_of_get_VL2_span:
 11536                           	opt stack 0
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodl	equ	0xFF3
 11542                           intcon	equ	0xFF2
 11543                           postinc0	equ	0xFEE
 11544                           wreg	equ	0xFE8
 11545                           indf2	equ	0xFDF
 11546                           postinc2	equ	0xFDE
 11547                           postdec2	equ	0xFDD
 11548                           plusw2	equ	0xFDB
 11549                           fsr2h	equ	0xFDA
 11550                           fsr2l	equ	0xFD9
 11551                           status	equ	0xFD8
 11552                           
 11553 ;; *************** function _get_VL1_zero *****************
 11554 ;; Defined at:
 11555 ;;		line 32 in file "Get_Voltages.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;                  3   24[COMRAM] float 
 11562 ;; Registers used:
 11563 ;;		None
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11569 ;;      Params:         3       0       0       0       0       0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0
 11572 ;;      Totals:         3       0       0       0       0       0       0
 11573 ;;Total ram usage:        3 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    1
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_Save_Variables
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text55
 11584  004F6A                     __ptext55:
 11585                           	opt stack 0
 11586  004F6A                     _get_VL1_zero:
 11587                           	opt stack 0
 11588  004F6A  FFFF               	dw	65535	; assembler added errata NOP
 11589                           
 11590                           ;Get_Voltages.c: 33: return VL1_zero;
 11591                           
 11592                           ;incstack = 0
 11593  004F6C  C143  F019         	movff	_VL1_zero,?_get_VL1_zero
 11594  004F70  C144  F01A         	movff	_VL1_zero+1,?_get_VL1_zero+1
 11595  004F74  C145  F01B         	movff	_VL1_zero+2,?_get_VL1_zero+2
 11596  004F78  0012               	return		;funcret
 11597  004F7A  FFFF               	dw	65535	; errata NOP
 11598  004F7C                     __end_of_get_VL1_zero:
 11599                           	opt stack 0
 11600                           tblptru	equ	0xFF8
 11601                           tblptrh	equ	0xFF7
 11602                           tblptrl	equ	0xFF6
 11603                           tablat	equ	0xFF5
 11604                           prodl	equ	0xFF3
 11605                           intcon	equ	0xFF2
 11606                           postinc0	equ	0xFEE
 11607                           wreg	equ	0xFE8
 11608                           indf2	equ	0xFDF
 11609                           postinc2	equ	0xFDE
 11610                           postdec2	equ	0xFDD
 11611                           plusw2	equ	0xFDB
 11612                           fsr2h	equ	0xFDA
 11613                           fsr2l	equ	0xFD9
 11614                           status	equ	0xFD8
 11615                           
 11616 ;; *************** function _get_VL1_span *****************
 11617 ;; Defined at:
 11618 ;;		line 44 in file "Get_Voltages.c"
 11619 ;; Parameters:    Size  Location     Type
 11620 ;;		None
 11621 ;; Auto vars:     Size  Location     Type
 11622 ;;		None
 11623 ;; Return value:  Size  Location     Type
 11624 ;;                  3   24[COMRAM] float 
 11625 ;; Registers used:
 11626 ;;		None
 11627 ;; Tracked objects:
 11628 ;;		On entry : 0/0
 11629 ;;		On exit  : 0/0
 11630 ;;		Unchanged: 0/0
 11631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11632 ;;      Params:         3       0       0       0       0       0       0
 11633 ;;      Locals:         0       0       0       0       0       0       0
 11634 ;;      Temps:          0       0       0       0       0       0       0
 11635 ;;      Totals:         3       0       0       0       0       0       0
 11636 ;;Total ram usage:        3 bytes
 11637 ;; Hardware stack levels used:    1
 11638 ;; Hardware stack levels required when called:    1
 11639 ;; This function calls:
 11640 ;;		Nothing
 11641 ;; This function is called by:
 11642 ;;		_Save_Variables
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text56
 11647  004F58                     __ptext56:
 11648                           	opt stack 0
 11649  004F58                     _get_VL1_span:
 11650                           	opt stack 0
 11651  004F58  FFFF               	dw	65535	; assembler added errata NOP
 11652                           
 11653                           ;Get_Voltages.c: 45: return VL1_span;
 11654                           
 11655                           ;incstack = 0
 11656  004F5A  C137  F019         	movff	_VL1_span,?_get_VL1_span
 11657  004F5E  C138  F01A         	movff	_VL1_span+1,?_get_VL1_span+1
 11658  004F62  C139  F01B         	movff	_VL1_span+2,?_get_VL1_span+2
 11659  004F66  0012               	return		;funcret
 11660  004F68  FFFF               	dw	65535	; errata NOP
 11661  004F6A                     __end_of_get_VL1_span:
 11662                           	opt stack 0
 11663                           tblptru	equ	0xFF8
 11664                           tblptrh	equ	0xFF7
 11665                           tblptrl	equ	0xFF6
 11666                           tablat	equ	0xFF5
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           postinc0	equ	0xFEE
 11670                           wreg	equ	0xFE8
 11671                           indf2	equ	0xFDF
 11672                           postinc2	equ	0xFDE
 11673                           postdec2	equ	0xFDD
 11674                           plusw2	equ	0xFDB
 11675                           fsr2h	equ	0xFDA
 11676                           fsr2l	equ	0xFD9
 11677                           status	equ	0xFD8
 11678                           
 11679 ;; *************** function _get_PID_setpoint *****************
 11680 ;; Defined at:
 11681 ;;		line 46 in file "PID_Controller.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;		None
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  3   24[COMRAM] float 
 11688 ;; Registers used:
 11689 ;;		None
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11695 ;;      Params:         3       0       0       0       0       0       0
 11696 ;;      Locals:         0       0       0       0       0       0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0
 11698 ;;      Totals:         3       0       0       0       0       0       0
 11699 ;;Total ram usage:        3 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    1
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		_get_list
 11706 ;;		_Save_Variables
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text57
 11711  004F46                     __ptext57:
 11712                           	opt stack 0
 11713  004F46                     _get_PID_setpoint:
 11714                           	opt stack 0
 11715  004F46  FFFF               	dw	65535	; assembler added errata NOP
 11716                           
 11717                           ;PID_Controller.c: 47: return setpoint;
 11718                           
 11719                           ;incstack = 0
 11720  004F48  C107  F019         	movff	_setpoint,?_get_PID_setpoint
 11721  004F4C  C108  F01A         	movff	_setpoint+1,?_get_PID_setpoint+1
 11722  004F50  C109  F01B         	movff	_setpoint+2,?_get_PID_setpoint+2
 11723  004F54  0012               	return		;funcret
 11724  004F56  FFFF               	dw	65535	; errata NOP
 11725  004F58                     __end_of_get_PID_setpoint:
 11726                           	opt stack 0
 11727                           tblptru	equ	0xFF8
 11728                           tblptrh	equ	0xFF7
 11729                           tblptrl	equ	0xFF6
 11730                           tablat	equ	0xFF5
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf2	equ	0xFDF
 11736                           postinc2	equ	0xFDE
 11737                           postdec2	equ	0xFDD
 11738                           plusw2	equ	0xFDB
 11739                           fsr2h	equ	0xFDA
 11740                           fsr2l	equ	0xFD9
 11741                           status	equ	0xFD8
 11742                           
 11743 ;; *************** function _get_PID_Ti *****************
 11744 ;; Defined at:
 11745 ;;		line 34 in file "PID_Controller.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  3   24[COMRAM] float 
 11752 ;; Registers used:
 11753 ;;		None
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11759 ;;      Params:         3       0       0       0       0       0       0
 11760 ;;      Locals:         0       0       0       0       0       0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0
 11762 ;;      Totals:         3       0       0       0       0       0       0
 11763 ;;Total ram usage:        3 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    1
 11766 ;; This function calls:
 11767 ;;		Nothing
 11768 ;; This function is called by:
 11769 ;;		_get_list
 11770 ;;		_Save_Variables
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           	psect	text58
 11775  004F34                     __ptext58:
 11776                           	opt stack 0
 11777  004F34                     _get_PID_Ti:
 11778                           	opt stack 0
 11779  004F34  FFFF               	dw	65535	; assembler added errata NOP
 11780                           
 11781                           ;PID_Controller.c: 35: return ti;
 11782                           
 11783                           ;incstack = 0
 11784  004F36  C030  F019         	movff	_ti,?_get_PID_Ti
 11785  004F3A  C031  F01A         	movff	_ti+1,?_get_PID_Ti+1
 11786  004F3E  C032  F01B         	movff	_ti+2,?_get_PID_Ti+2
 11787  004F42  0012               	return		;funcret
 11788  004F44  FFFF               	dw	65535	; errata NOP
 11789  004F46                     __end_of_get_PID_Ti:
 11790                           	opt stack 0
 11791                           tblptru	equ	0xFF8
 11792                           tblptrh	equ	0xFF7
 11793                           tblptrl	equ	0xFF6
 11794                           tablat	equ	0xFF5
 11795                           prodl	equ	0xFF3
 11796                           intcon	equ	0xFF2
 11797                           postinc0	equ	0xFEE
 11798                           wreg	equ	0xFE8
 11799                           indf2	equ	0xFDF
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           plusw2	equ	0xFDB
 11803                           fsr2h	equ	0xFDA
 11804                           fsr2l	equ	0xFD9
 11805                           status	equ	0xFD8
 11806                           
 11807 ;; *************** function _get_PID_Td *****************
 11808 ;; Defined at:
 11809 ;;		line 38 in file "PID_Controller.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;		None
 11812 ;; Auto vars:     Size  Location     Type
 11813 ;;		None
 11814 ;; Return value:  Size  Location     Type
 11815 ;;                  3   24[COMRAM] float 
 11816 ;; Registers used:
 11817 ;;		None
 11818 ;; Tracked objects:
 11819 ;;		On entry : 0/0
 11820 ;;		On exit  : 0/0
 11821 ;;		Unchanged: 0/0
 11822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11823 ;;      Params:         3       0       0       0       0       0       0
 11824 ;;      Locals:         0       0       0       0       0       0       0
 11825 ;;      Temps:          0       0       0       0       0       0       0
 11826 ;;      Totals:         3       0       0       0       0       0       0
 11827 ;;Total ram usage:        3 bytes
 11828 ;; Hardware stack levels used:    1
 11829 ;; Hardware stack levels required when called:    1
 11830 ;; This function calls:
 11831 ;;		Nothing
 11832 ;; This function is called by:
 11833 ;;		_get_list
 11834 ;;		_Save_Variables
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text59
 11839  004F22                     __ptext59:
 11840                           	opt stack 0
 11841  004F22                     _get_PID_Td:
 11842                           	opt stack 0
 11843  004F22  FFFF               	dw	65535	; assembler added errata NOP
 11844                           
 11845                           ;PID_Controller.c: 39: return td;
 11846                           
 11847                           ;incstack = 0
 11848  004F24  C11C  F019         	movff	_td,?_get_PID_Td
 11849  004F28  C11D  F01A         	movff	_td+1,?_get_PID_Td+1
 11850  004F2C  C11E  F01B         	movff	_td+2,?_get_PID_Td+2
 11851  004F30  0012               	return		;funcret
 11852  004F32  FFFF               	dw	65535	; errata NOP
 11853  004F34                     __end_of_get_PID_Td:
 11854                           	opt stack 0
 11855                           tblptru	equ	0xFF8
 11856                           tblptrh	equ	0xFF7
 11857                           tblptrl	equ	0xFF6
 11858                           tablat	equ	0xFF5
 11859                           prodl	equ	0xFF3
 11860                           intcon	equ	0xFF2
 11861                           postinc0	equ	0xFEE
 11862                           wreg	equ	0xFE8
 11863                           indf2	equ	0xFDF
 11864                           postinc2	equ	0xFDE
 11865                           postdec2	equ	0xFDD
 11866                           plusw2	equ	0xFDB
 11867                           fsr2h	equ	0xFDA
 11868                           fsr2l	equ	0xFD9
 11869                           status	equ	0xFD8
 11870                           
 11871 ;; *************** function _get_PID_T *****************
 11872 ;; Defined at:
 11873 ;;		line 42 in file "PID_Controller.c"
 11874 ;; Parameters:    Size  Location     Type
 11875 ;;		None
 11876 ;; Auto vars:     Size  Location     Type
 11877 ;;		None
 11878 ;; Return value:  Size  Location     Type
 11879 ;;                  3   24[COMRAM] float 
 11880 ;; Registers used:
 11881 ;;		None
 11882 ;; Tracked objects:
 11883 ;;		On entry : 0/0
 11884 ;;		On exit  : 0/0
 11885 ;;		Unchanged: 0/0
 11886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11887 ;;      Params:         3       0       0       0       0       0       0
 11888 ;;      Locals:         0       0       0       0       0       0       0
 11889 ;;      Temps:          0       0       0       0       0       0       0
 11890 ;;      Totals:         3       0       0       0       0       0       0
 11891 ;;Total ram usage:        3 bytes
 11892 ;; Hardware stack levels used:    1
 11893 ;; Hardware stack levels required when called:    1
 11894 ;; This function calls:
 11895 ;;		Nothing
 11896 ;; This function is called by:
 11897 ;;		_get_list
 11898 ;;		_Save_Variables
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           	psect	text60
 11903  004F10                     __ptext60:
 11904                           	opt stack 0
 11905  004F10                     _get_PID_T:
 11906                           	opt stack 0
 11907  004F10  FFFF               	dw	65535	; assembler added errata NOP
 11908                           
 11909                           ;PID_Controller.c: 43: return T_sample;
 11910                           
 11911                           ;incstack = 0
 11912  004F12  C119  F019         	movff	_T_sample,?_get_PID_T
 11913  004F16  C11A  F01A         	movff	_T_sample+1,?_get_PID_T+1
 11914  004F1A  C11B  F01B         	movff	_T_sample+2,?_get_PID_T+2
 11915  004F1E  0012               	return		;funcret
 11916  004F20  FFFF               	dw	65535	; errata NOP
 11917  004F22                     __end_of_get_PID_T:
 11918                           	opt stack 0
 11919                           tblptru	equ	0xFF8
 11920                           tblptrh	equ	0xFF7
 11921                           tblptrl	equ	0xFF6
 11922                           tablat	equ	0xFF5
 11923                           prodl	equ	0xFF3
 11924                           intcon	equ	0xFF2
 11925                           postinc0	equ	0xFEE
 11926                           wreg	equ	0xFE8
 11927                           indf2	equ	0xFDF
 11928                           postinc2	equ	0xFDE
 11929                           postdec2	equ	0xFDD
 11930                           plusw2	equ	0xFDB
 11931                           fsr2h	equ	0xFDA
 11932                           fsr2l	equ	0xFD9
 11933                           status	equ	0xFD8
 11934                           
 11935 ;; *************** function _get_PID_Kp *****************
 11936 ;; Defined at:
 11937 ;;		line 30 in file "PID_Controller.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;		None
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;		None
 11942 ;; Return value:  Size  Location     Type
 11943 ;;                  3   24[COMRAM] float 
 11944 ;; Registers used:
 11945 ;;		None
 11946 ;; Tracked objects:
 11947 ;;		On entry : 0/0
 11948 ;;		On exit  : 0/0
 11949 ;;		Unchanged: 0/0
 11950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11951 ;;      Params:         3       0       0       0       0       0       0
 11952 ;;      Locals:         0       0       0       0       0       0       0
 11953 ;;      Temps:          0       0       0       0       0       0       0
 11954 ;;      Totals:         3       0       0       0       0       0       0
 11955 ;;Total ram usage:        3 bytes
 11956 ;; Hardware stack levels used:    1
 11957 ;; Hardware stack levels required when called:    1
 11958 ;; This function calls:
 11959 ;;		Nothing
 11960 ;; This function is called by:
 11961 ;;		_get_list
 11962 ;;		_Save_Variables
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           	psect	text61
 11967  004EFE                     __ptext61:
 11968                           	opt stack 0
 11969  004EFE                     _get_PID_Kp:
 11970                           	opt stack 0
 11971  004EFE  FFFF               	dw	65535	; assembler added errata NOP
 11972                           
 11973                           ;PID_Controller.c: 31: return Kp;
 11974                           
 11975                           ;incstack = 0
 11976  004F00  C11F  F019         	movff	_Kp,?_get_PID_Kp
 11977  004F04  C120  F01A         	movff	_Kp+1,?_get_PID_Kp+1
 11978  004F08  C121  F01B         	movff	_Kp+2,?_get_PID_Kp+2
 11979  004F0C  0012               	return		;funcret
 11980  004F0E  FFFF               	dw	65535	; errata NOP
 11981  004F10                     __end_of_get_PID_Kp:
 11982                           	opt stack 0
 11983                           tblptru	equ	0xFF8
 11984                           tblptrh	equ	0xFF7
 11985                           tblptrl	equ	0xFF6
 11986                           tablat	equ	0xFF5
 11987                           prodl	equ	0xFF3
 11988                           intcon	equ	0xFF2
 11989                           postinc0	equ	0xFEE
 11990                           wreg	equ	0xFE8
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           plusw2	equ	0xFDB
 11995                           fsr2h	equ	0xFDA
 11996                           fsr2l	equ	0xFD9
 11997                           status	equ	0xFD8
 11998                           
 11999 ;; *************** function _get_LP_RC_Constant *****************
 12000 ;; Defined at:
 12001 ;;		line 17 in file "Filters.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  3   24[COMRAM] float 
 12008 ;; Registers used:
 12009 ;;		None
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12015 ;;      Params:         3       0       0       0       0       0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0
 12018 ;;      Totals:         3       0       0       0       0       0       0
 12019 ;;Total ram usage:        3 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    1
 12022 ;; This function calls:
 12023 ;;		Nothing
 12024 ;; This function is called by:
 12025 ;;		_get_list
 12026 ;;		_Save_Variables
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           	psect	text62
 12031  004EEC                     __ptext62:
 12032                           	opt stack 0
 12033  004EEC                     _get_LP_RC_Constant:
 12034                           	opt stack 0
 12035  004EEC  FFFF               	dw	65535	; assembler added errata NOP
 12036                           
 12037                           ;Filters.c: 18: return k1;
 12038                           
 12039                           ;incstack = 0
 12040  004EEE  C03F  F019         	movff	_k1,?_get_LP_RC_Constant
 12041  004EF2  C040  F01A         	movff	_k1+1,?_get_LP_RC_Constant+1
 12042  004EF6  C041  F01B         	movff	_k1+2,?_get_LP_RC_Constant+2
 12043  004EFA  0012               	return		;funcret
 12044  004EFC  FFFF               	dw	65535	; errata NOP
 12045  004EFE                     __end_of_get_LP_RC_Constant:
 12046                           	opt stack 0
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodl	equ	0xFF3
 12052                           intcon	equ	0xFF2
 12053                           postinc0	equ	0xFEE
 12054                           wreg	equ	0xFE8
 12055                           indf2	equ	0xFDF
 12056                           postinc2	equ	0xFDE
 12057                           postdec2	equ	0xFDD
 12058                           plusw2	equ	0xFDB
 12059                           fsr2h	equ	0xFDA
 12060                           fsr2l	equ	0xFD9
 12061                           status	equ	0xFD8
 12062                           
 12063 ;; *************** function _printf *****************
 12064 ;; Defined at:
 12065 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\printf.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;  f               2  100[BANK0 ] PTR const unsigned char 
 12068 ;;		 -> STR_78(4), STR_77(23), STR_76(8), STR_75(29), 
 12069 ;;		 -> STR_74(41), STR_73(8), STR_72(25), 
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;  pb              4  106[BANK0 ] struct __prbuf
 12072 ;;  ap              2  104[BANK0 ] PTR void [1]
 12073 ;;		 -> ?_sprintf(2), ?_printf(2), 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  2  100[BANK0 ] int 
 12076 ;; Registers used:
 12077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12083 ;;      Params:         0       4       0       0       0       0       0
 12084 ;;      Locals:         0       6       0       0       0       0       0
 12085 ;;      Temps:          0       0       0       0       0       0       0
 12086 ;;      Totals:         0      10       0       0       0       0       0
 12087 ;;Total ram usage:       10 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:    5
 12090 ;; This function calls:
 12091 ;;		__doprnt
 12092 ;; This function is called by:
 12093 ;;		_main
 12094 ;; This function uses a non-reentrant model
 12095 ;;
 12096                           
 12097                           	psect	text63
 12098  005828                     __ptext63:
 12099                           	opt stack 0
 12100  005828                     _printf:
 12101                           	opt stack 0
 12102  005828  FFFF               	dw	65535	; assembler added errata NOP
 12103                           
 12104                           ;incstack = 0
 12105  00582A  0E00               	movlw	0
 12106  00582C  0100               	movlb	0	; () banked
 12107  00582E  6FCA               	movwf	printf@pb& (0+255),b
 12108  005830  0E00               	movlw	0
 12109  005832  0100               	movlb	0	; () banked
 12110  005834  6FCB               	movwf	(printf@pb+1)& (0+255),b
 12111  005836  0EBA               	movlw	low _putch
 12112  005838  0100               	movlb	0	; () banked
 12113  00583A  6FCC               	movwf	(printf@pb+2)& (0+255),b
 12114  00583C  0E4D               	movlw	high _putch
 12115  00583E  0100               	movlb	0	; () banked
 12116  005840  6FCD               	movwf	(printf@pb+3)& (0+255),b
 12117  005842  0EC6               	movlw	low (?_printf+2)
 12118  005844  0100               	movlb	0	; () banked
 12119  005846  6FC8               	movwf	printf@ap& (0+255),b
 12120  005848  0E00               	movlw	high (?_printf+2)
 12121  00584A  0100               	movlb	0	; () banked
 12122  00584C  6FC9               	movwf	(printf@ap+1)& (0+255),b
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;	Return value of _printf is never used
 12126  00584E  0ECA               	movlw	low printf@pb
 12127  005850  0100               	movlb	0	; () banked
 12128  005852  6F9D               	movwf	__doprnt@pb& (0+255),b
 12129  005854  0E00               	movlw	high printf@pb
 12130  005856  0100               	movlb	0	; () banked
 12131  005858  6F9E               	movwf	(__doprnt@pb+1)& (0+255),b
 12132  00585A  C0C4  F09F         	movff	printf@f,__doprnt@f
 12133  00585E  C0C5  F0A0         	movff	printf@f+1,__doprnt@f+1
 12134  005862  0EC8               	movlw	low printf@ap
 12135  005864  0100               	movlb	0	; () banked
 12136  005866  6FA1               	movwf	__doprnt@ap& (0+255),b
 12137  005868  0E00               	movlw	high printf@ap
 12138  00586A  0100               	movlb	0	; () banked
 12139  00586C  6FA2               	movwf	(__doprnt@ap+1)& (0+255),b
 12140  00586E  ECDB  F000         	call	__doprnt	;wreg free
 12141  005872  0012               	return		;funcret
 12142  005874  FFFF               	dw	65535	; errata NOP
 12143  005876                     __end_of_printf:
 12144                           	opt stack 0
 12145                           tblptru	equ	0xFF8
 12146                           tblptrh	equ	0xFF7
 12147                           tblptrl	equ	0xFF6
 12148                           tablat	equ	0xFF5
 12149                           prodl	equ	0xFF3
 12150                           intcon	equ	0xFF2
 12151                           postinc0	equ	0xFEE
 12152                           wreg	equ	0xFE8
 12153                           indf2	equ	0xFDF
 12154                           postinc2	equ	0xFDE
 12155                           postdec2	equ	0xFDD
 12156                           plusw2	equ	0xFDB
 12157                           fsr2h	equ	0xFDA
 12158                           fsr2l	equ	0xFD9
 12159                           status	equ	0xFD8
 12160                           
 12161 ;; *************** function _ctime *****************
 12162 ;; Defined at:
 12163 ;;		line 65 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12164 ;; Parameters:    Size  Location     Type
 12165 ;;  tp              2   17[BANK0 ] PTR const long 
 12166 ;;		 -> main@sys_time(4), 
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  2   17[BANK0 ] PTR unsigned char 
 12171 ;; Registers used:
 12172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12178 ;;      Params:         0       2       0       0       0       0       0
 12179 ;;      Locals:         0       0       0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0
 12181 ;;      Totals:         0       2       0       0       0       0       0
 12182 ;;Total ram usage:        2 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    5
 12185 ;; This function calls:
 12186 ;;		_asctime
 12187 ;;		_localtime
 12188 ;; This function is called by:
 12189 ;;		_main
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           	psect	text64
 12194  005248                     __ptext64:
 12195                           	opt stack 0
 12196  005248                     _ctime:
 12197                           	opt stack 0
 12198  005248  FFFF               	dw	65535	; assembler added errata NOP
 12199                           
 12200                           ;incstack = 0
 12201  00524A  C071  F060         	movff	ctime@tp,localtime@tp
 12202  00524E  C072  F061         	movff	ctime@tp+1,localtime@tp+1
 12203  005252  EC61  F031         	call	_localtime	;wreg free
 12204  005256  C060  F06A         	movff	?_localtime,asctime@tim
 12205  00525A  C061  F06B         	movff	?_localtime+1,asctime@tim+1
 12206  00525E  EC0C  F01B         	call	_asctime	;wreg free
 12207  005262  C06A  F071         	movff	?_asctime,?_ctime
 12208  005266  C06B  F072         	movff	?_asctime+1,?_ctime+1
 12209  00526A  0012               	return		;funcret
 12210  00526C  FFFF               	dw	65535	; errata NOP
 12211  00526E                     __end_of_ctime:
 12212                           	opt stack 0
 12213                           tblptru	equ	0xFF8
 12214                           tblptrh	equ	0xFF7
 12215                           tblptrl	equ	0xFF6
 12216                           tablat	equ	0xFF5
 12217                           prodl	equ	0xFF3
 12218                           intcon	equ	0xFF2
 12219                           postinc0	equ	0xFEE
 12220                           wreg	equ	0xFE8
 12221                           indf2	equ	0xFDF
 12222                           postinc2	equ	0xFDE
 12223                           postdec2	equ	0xFDD
 12224                           plusw2	equ	0xFDB
 12225                           fsr2h	equ	0xFDA
 12226                           fsr2l	equ	0xFD9
 12227                           status	equ	0xFD8
 12228                           
 12229 ;; *************** function _localtime *****************
 12230 ;; Defined at:
 12231 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  tp              2    0[BANK0 ] PTR const long 
 12234 ;;		 -> reset_max_min@system_time(4), main@sys_time(4), get_list@systime(4), 
 12235 ;; Auto vars:     Size  Location     Type
 12236 ;;  t               4    6[BANK0 ] long 
 12237 ;; Return value:  Size  Location     Type
 12238 ;;                  2    0[BANK0 ] PTR struct tm
 12239 ;; Registers used:
 12240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12241 ;; Tracked objects:
 12242 ;;		On entry : 0/0
 12243 ;;		On exit  : 0/0
 12244 ;;		Unchanged: 0/0
 12245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12246 ;;      Params:         0       2       0       0       0       0       0
 12247 ;;      Locals:         0       4       0       0       0       0       0
 12248 ;;      Temps:          0       4       0       0       0       0       0
 12249 ;;      Totals:         0      10       0       0       0       0       0
 12250 ;;Total ram usage:       10 bytes
 12251 ;; Hardware stack levels used:    1
 12252 ;; Hardware stack levels required when called:    4
 12253 ;; This function calls:
 12254 ;;		___lmul
 12255 ;;		_gmtime
 12256 ;; This function is called by:
 12257 ;;		_get_list
 12258 ;;		_ctime
 12259 ;;		_reset_max_min
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           	psect	text65
 12264  0062C2                     __ptext65:
 12265                           	opt stack 0
 12266  0062C2                     _localtime:
 12267                           	opt stack 0
 12268  0062C2  FFFF               	dw	65535	; assembler added errata NOP
 12269                           
 12270                           ;incstack = 0
 12271  0062C4  C060  FFD9         	movff	localtime@tp,fsr2l
 12272  0062C8  C061  FFDA         	movff	localtime@tp+1,fsr2h
 12273  0062CC  CFDE F062          	movff	postinc2,??_localtime
 12274  0062D0  CFDE F063          	movff	postinc2,??_localtime+1
 12275  0062D4  CFDE F064          	movff	postinc2,??_localtime+2
 12276  0062D8  CFDE F065          	movff	postinc2,??_localtime+3
 12277  0062DC  C0F4  F019         	movff	_time_zone,___lmul@multiplier
 12278  0062E0  C0F5  F01A         	movff	_time_zone+1,___lmul@multiplier+1
 12279  0062E4  0E00               	movlw	0
 12280  0062E6  BE1A               	btfsc	___lmul@multiplier+1,7,c
 12281  0062E8  0EFF               	movlw	-1
 12282  0062EA  6E1B               	movwf	___lmul@multiplier+2,c
 12283  0062EC  6E1C               	movwf	___lmul@multiplier+3,c
 12284  0062EE  0E3C               	movlw	60
 12285  0062F0  6E1D               	movwf	___lmul@multiplicand,c
 12286  0062F2  0E00               	movlw	0
 12287  0062F4  6E1E               	movwf	___lmul@multiplicand+1,c
 12288  0062F6  0E00               	movlw	0
 12289  0062F8  6E1F               	movwf	___lmul@multiplicand+2,c
 12290  0062FA  0E00               	movlw	0
 12291  0062FC  6E20               	movwf	___lmul@multiplicand+3,c
 12292  0062FE  EC68  F02D         	call	___lmul	;wreg free
 12293  006302  1E19               	comf	?___lmul,f,c
 12294  006304  1E1A               	comf	?___lmul+1,f,c
 12295  006306  1E1B               	comf	?___lmul+2,f,c
 12296  006308  1E1C               	comf	?___lmul+3,f,c
 12297  00630A  2A19               	incf	?___lmul,f,c
 12298  00630C  0E00               	movlw	0
 12299  00630E  221A               	addwfc	?___lmul+1,f,c
 12300  006310  221B               	addwfc	?___lmul+2,f,c
 12301  006312  221C               	addwfc	?___lmul+3,f,c
 12302  006314  0100               	movlb	0	; () banked
 12303  006316  5162               	movf	??_localtime& (0+255),w,b
 12304  006318  2419               	addwf	?___lmul,w,c
 12305  00631A  0100               	movlb	0	; () banked
 12306  00631C  6F66               	movwf	localtime@t& (0+255),b
 12307  00631E  0100               	movlb	0	; () banked
 12308  006320  5163               	movf	(??_localtime+1)& (0+255),w,b
 12309  006322  201A               	addwfc	?___lmul+1,w,c
 12310  006324  0100               	movlb	0	; () banked
 12311  006326  6F67               	movwf	(localtime@t+1)& (0+255),b
 12312  006328  0100               	movlb	0	; () banked
 12313  00632A  5164               	movf	(??_localtime+2)& (0+255),w,b
 12314  00632C  201B               	addwfc	?___lmul+2,w,c
 12315  00632E  0100               	movlb	0	; () banked
 12316  006330  6F68               	movwf	(localtime@t+2)& (0+255),b
 12317  006332  0100               	movlb	0	; () banked
 12318  006334  5165               	movf	(??_localtime+3)& (0+255),w,b
 12319  006336  201C               	addwfc	?___lmul+3,w,c
 12320  006338  0100               	movlb	0	; () banked
 12321  00633A  6F69               	movwf	(localtime@t+3)& (0+255),b
 12322                           
 12323                           ; BSR set to: 0
 12324  00633C  0E66               	movlw	low localtime@t
 12325  00633E  6E27               	movwf	gmtime@tp,c
 12326  006340  0E00               	movlw	high localtime@t
 12327  006342  6E28               	movwf	gmtime@tp+1,c
 12328  006344  EC6E  F01D         	call	_gmtime	;wreg free
 12329  006348  C027  F060         	movff	?_gmtime,?_localtime
 12330  00634C  C028  F061         	movff	?_gmtime+1,?_localtime+1
 12331  006350  0012               	return		;funcret
 12332  006352  FFFF               	dw	65535	; errata NOP
 12333  006354                     __end_of_localtime:
 12334                           	opt stack 0
 12335                           tblptru	equ	0xFF8
 12336                           tblptrh	equ	0xFF7
 12337                           tblptrl	equ	0xFF6
 12338                           tablat	equ	0xFF5
 12339                           prodl	equ	0xFF3
 12340                           intcon	equ	0xFF2
 12341                           postinc0	equ	0xFEE
 12342                           wreg	equ	0xFE8
 12343                           indf2	equ	0xFDF
 12344                           postinc2	equ	0xFDE
 12345                           postdec2	equ	0xFDD
 12346                           plusw2	equ	0xFDB
 12347                           fsr2h	equ	0xFDA
 12348                           fsr2l	equ	0xFD9
 12349                           status	equ	0xFD8
 12350                           
 12351 ;; *************** function _gmtime *****************
 12352 ;; Defined at:
 12353 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  tp              2   38[COMRAM] PTR const long 
 12356 ;;		 -> localtime@t(4), 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  tc              4   43[COMRAM] struct .
 12359 ;; Return value:  Size  Location     Type
 12360 ;;                  2   38[COMRAM] PTR struct tm
 12361 ;; Registers used:
 12362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12363 ;; Tracked objects:
 12364 ;;		On entry : 0/0
 12365 ;;		On exit  : 0/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12368 ;;      Params:         2       0       0       0       0       0       0
 12369 ;;      Locals:         4       0       0       0       0       0       0
 12370 ;;      Temps:          3       0       0       0       0       0       0
 12371 ;;      Totals:         9       0       0       0       0       0       0
 12372 ;;Total ram usage:        9 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; Hardware stack levels required when called:    3
 12375 ;; This function calls:
 12376 ;;		___aldiv
 12377 ;;		___almod
 12378 ;;		___awmod
 12379 ;;		_dylen
 12380 ;; This function is called by:
 12381 ;;		_localtime
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           	psect	text66
 12386  003ADC                     __ptext66:
 12387                           	opt stack 0
 12388  003ADC                     _gmtime:
 12389                           	opt stack 0
 12390  003ADC  FFFF               	dw	65535	; assembler added errata NOP
 12391                           
 12392                           ;incstack = 0
 12393  003ADE  C027  FFD9         	movff	gmtime@tp,fsr2l
 12394  003AE2  C028  FFDA         	movff	gmtime@tp+1,fsr2h
 12395  003AE6  CFDE F02C          	movff	postinc2,gmtime@tc
 12396  003AEA  CFDE F02D          	movff	postinc2,gmtime@tc+1
 12397  003AEE  CFDE F02E          	movff	postinc2,gmtime@tc+2
 12398  003AF2  CFDE F02F          	movff	postinc2,gmtime@tc+3
 12399  003AF6  C02C  F019         	movff	gmtime@tc,___almod@dividend
 12400  003AFA  C02D  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12401  003AFE  C02E  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12402  003B02  C02F  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12403  003B06  0E3C               	movlw	60
 12404  003B08  6E1D               	movwf	___almod@divisor,c
 12405  003B0A  0E00               	movlw	0
 12406  003B0C  6E1E               	movwf	___almod@divisor+1,c
 12407  003B0E  0E00               	movlw	0
 12408  003B10  6E1F               	movwf	___almod@divisor+2,c
 12409  003B12  0E00               	movlw	0
 12410  003B14  6E20               	movwf	___almod@divisor+3,c
 12411  003B16  EC0D  F034         	call	___almod	;wreg free
 12412  003B1A  C019  F1A9         	movff	?___almod,gmtime@tim
 12413  003B1E  C01A  F1AA         	movff	?___almod+1,gmtime@tim+1
 12414  003B22  C02C  F019         	movff	gmtime@tc,___aldiv@dividend
 12415  003B26  C02D  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12416  003B2A  C02E  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12417  003B2E  C02F  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12418  003B32  0E3C               	movlw	60
 12419  003B34  6E1D               	movwf	___aldiv@divisor,c
 12420  003B36  0E00               	movlw	0
 12421  003B38  6E1E               	movwf	___aldiv@divisor+1,c
 12422  003B3A  0E00               	movlw	0
 12423  003B3C  6E1F               	movwf	___aldiv@divisor+2,c
 12424  003B3E  0E00               	movlw	0
 12425  003B40  6E20               	movwf	___aldiv@divisor+3,c
 12426  003B42  EC06  F036         	call	___aldiv	;wreg free
 12427  003B46  C019  F02C         	movff	?___aldiv,gmtime@tc
 12428  003B4A  C01A  F02D         	movff	?___aldiv+1,gmtime@tc+1
 12429  003B4E  C01B  F02E         	movff	?___aldiv+2,gmtime@tc+2
 12430  003B52  C01C  F02F         	movff	?___aldiv+3,gmtime@tc+3
 12431  003B56  C02C  F019         	movff	gmtime@tc,___almod@dividend
 12432  003B5A  C02D  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12433  003B5E  C02E  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12434  003B62  C02F  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12435  003B66  0E3C               	movlw	60
 12436  003B68  6E1D               	movwf	___almod@divisor,c
 12437  003B6A  0E00               	movlw	0
 12438  003B6C  6E1E               	movwf	___almod@divisor+1,c
 12439  003B6E  0E00               	movlw	0
 12440  003B70  6E1F               	movwf	___almod@divisor+2,c
 12441  003B72  0E00               	movlw	0
 12442  003B74  6E20               	movwf	___almod@divisor+3,c
 12443  003B76  EC0D  F034         	call	___almod	;wreg free
 12444  003B7A  C019  F1AB         	movff	?___almod,gmtime@tim+2
 12445  003B7E  C01A  F1AC         	movff	?___almod+1,gmtime@tim+3
 12446  003B82  C02C  F019         	movff	gmtime@tc,___aldiv@dividend
 12447  003B86  C02D  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12448  003B8A  C02E  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12449  003B8E  C02F  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12450  003B92  0E3C               	movlw	60
 12451  003B94  6E1D               	movwf	___aldiv@divisor,c
 12452  003B96  0E00               	movlw	0
 12453  003B98  6E1E               	movwf	___aldiv@divisor+1,c
 12454  003B9A  0E00               	movlw	0
 12455  003B9C  6E1F               	movwf	___aldiv@divisor+2,c
 12456  003B9E  0E00               	movlw	0
 12457  003BA0  6E20               	movwf	___aldiv@divisor+3,c
 12458  003BA2  EC06  F036         	call	___aldiv	;wreg free
 12459  003BA6  C019  F02C         	movff	?___aldiv,gmtime@tc
 12460  003BAA  C01A  F02D         	movff	?___aldiv+1,gmtime@tc+1
 12461  003BAE  C01B  F02E         	movff	?___aldiv+2,gmtime@tc+2
 12462  003BB2  C01C  F02F         	movff	?___aldiv+3,gmtime@tc+3
 12463  003BB6  C02C  F019         	movff	gmtime@tc,___almod@dividend
 12464  003BBA  C02D  F01A         	movff	gmtime@tc+1,___almod@dividend+1
 12465  003BBE  C02E  F01B         	movff	gmtime@tc+2,___almod@dividend+2
 12466  003BC2  C02F  F01C         	movff	gmtime@tc+3,___almod@dividend+3
 12467  003BC6  0E18               	movlw	24
 12468  003BC8  6E1D               	movwf	___almod@divisor,c
 12469  003BCA  0E00               	movlw	0
 12470  003BCC  6E1E               	movwf	___almod@divisor+1,c
 12471  003BCE  0E00               	movlw	0
 12472  003BD0  6E1F               	movwf	___almod@divisor+2,c
 12473  003BD2  0E00               	movlw	0
 12474  003BD4  6E20               	movwf	___almod@divisor+3,c
 12475  003BD6  EC0D  F034         	call	___almod	;wreg free
 12476  003BDA  C019  F1AD         	movff	?___almod,gmtime@tim+4
 12477  003BDE  C01A  F1AE         	movff	?___almod+1,gmtime@tim+5
 12478  003BE2  C02C  F019         	movff	gmtime@tc,___aldiv@dividend
 12479  003BE6  C02D  F01A         	movff	gmtime@tc+1,___aldiv@dividend+1
 12480  003BEA  C02E  F01B         	movff	gmtime@tc+2,___aldiv@dividend+2
 12481  003BEE  C02F  F01C         	movff	gmtime@tc+3,___aldiv@dividend+3
 12482  003BF2  0E18               	movlw	24
 12483  003BF4  6E1D               	movwf	___aldiv@divisor,c
 12484  003BF6  0E00               	movlw	0
 12485  003BF8  6E1E               	movwf	___aldiv@divisor+1,c
 12486  003BFA  0E00               	movlw	0
 12487  003BFC  6E1F               	movwf	___aldiv@divisor+2,c
 12488  003BFE  0E00               	movlw	0
 12489  003C00  6E20               	movwf	___aldiv@divisor+3,c
 12490  003C02  EC06  F036         	call	___aldiv	;wreg free
 12491  003C06  C019  F1AF         	movff	?___aldiv,gmtime@tim+6
 12492  003C0A  C01A  F1B0         	movff	?___aldiv+1,gmtime@tim+7
 12493  003C0E  0E04               	movlw	4
 12494  003C10  0101               	movlb	1	; () banked
 12495  003C12  25AF               	addwf	(gmtime@tim+6)& (0+255),w,b
 12496  003C14  6E19               	movwf	___awmod@dividend,c
 12497  003C16  0E00               	movlw	0
 12498  003C18  0101               	movlb	1	; () banked
 12499  003C1A  21B0               	addwfc	(gmtime@tim+7)& (0+255),w,b
 12500  003C1C  6E1A               	movwf	___awmod@dividend+1,c
 12501  003C1E  0E00               	movlw	0
 12502  003C20  6E1C               	movwf	___awmod@divisor+1,c
 12503  003C22  0E07               	movlw	7
 12504  003C24  6E1B               	movwf	___awmod@divisor,c
 12505  003C26  EC0D  F030         	call	___awmod	;wreg free
 12506  003C2A  C019  F1B5         	movff	?___awmod,gmtime@tim+12
 12507  003C2E  C01A  F1B6         	movff	?___awmod+1,gmtime@tim+13
 12508  003C32  0E00               	movlw	0
 12509  003C34  0101               	movlb	1	; () banked
 12510  003C36  6FB4               	movwf	(gmtime@tim+11)& (0+255),b
 12511  003C38  0E46               	movlw	70
 12512  003C3A  6FB3               	movwf	(gmtime@tim+10)& (0+255),b
 12513  003C3C  D010               	goto	l1606
 12514  003C3E  FFFF               	dw	65535	; assembler added errata NOP
 12515                           
 12516                           ; BSR set to: 1
 12517                           
 12518                           ; BSR set to: 1
 12519  003C40  C1B3  F01E         	movff	gmtime@tim+10,dylen@yr
 12520  003C44  C1B4  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12521  003C48  EC2F  F02E         	call	_dylen	;wreg free
 12522  003C4C  501E               	movf	?_dylen,w,c
 12523  003C4E  0101               	movlb	1	; () banked
 12524  003C50  5FAF               	subwf	(gmtime@tim+6)& (0+255),f,b
 12525  003C52  501F               	movf	?_dylen+1,w,c
 12526  003C54  0101               	movlb	1	; () banked
 12527  003C56  5BB0               	subwfb	(gmtime@tim+7)& (0+255),f,b
 12528                           
 12529                           ; BSR set to: 1
 12530  003C58  0101               	movlb	1	; () banked
 12531  003C5A  4BB3               	infsnz	(gmtime@tim+10)& (0+255),f,b
 12532  003C5C  2BB4               	incf	(gmtime@tim+11)& (0+255),f,b
 12533  003C5E                     l1606:
 12534  003C5E  FFFF               	dw	65535	; assembler added errata NOP
 12535                           
 12536                           ; BSR set to: 1
 12537                           
 12538                           ; BSR set to: 1
 12539  003C60  C1B3  F01E         	movff	gmtime@tim+10,dylen@yr
 12540  003C64  C1B4  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12541  003C68  EC2F  F02E         	call	_dylen	;wreg free
 12542  003C6C  501E               	movf	?_dylen,w,c
 12543  003C6E  0101               	movlb	1	; () banked
 12544  003C70  5DAF               	subwf	(gmtime@tim+6)& (0+255),w,b
 12545  003C72  0101               	movlb	1	; () banked
 12546  003C74  51B0               	movf	(gmtime@tim+7)& (0+255),w,b
 12547  003C76  0A80               	xorlw	128
 12548  003C78  6E29               	movwf	??_gmtime& (0+255),c
 12549  003C7A  501F               	movf	?_dylen+1,w,c
 12550  003C7C  0A80               	xorlw	128
 12551  003C7E  5829               	subwfb	??_gmtime& (0+255),w,c
 12552  003C80  B0D8               	btfsc	status,0,c
 12553  003C82  D7DD               	goto	l1607
 12554                           
 12555                           ; BSR set to: 1
 12556                           
 12557                           ; BSR set to: 1
 12558  003C84  C1B3  F01E         	movff	gmtime@tim+10,dylen@yr
 12559  003C88  C1B4  F01F         	movff	gmtime@tim+11,dylen@yr+1
 12560  003C8C  EC2F  F02E         	call	_dylen	;wreg free
 12561  003C90  501E               	movf	?_dylen,w,c
 12562  003C92  0B02               	andlw	2
 12563  003C94  6E2C               	movwf	gmtime@tc,c
 12564  003C96  C1AF  F1B7         	movff	gmtime@tim+6,gmtime@tim+14
 12565  003C9A  C1B0  F1B8         	movff	gmtime@tim+7,gmtime@tim+15
 12566  003C9E  0E00               	movlw	0
 12567  003CA0  0101               	movlb	1	; () banked
 12568  003CA2  6FB2               	movwf	(gmtime@tim+9)& (0+255),b
 12569  003CA4  0E00               	movlw	0
 12570  003CA6  6FB1               	movwf	(gmtime@tim+8)& (0+255),b
 12571  003CA8  D00B               	goto	l1609
 12572  003CAA  FFFF               	dw	65535	; assembler added errata NOP
 12573                           
 12574                           ; BSR set to: 1
 12575                           
 12576                           ; BSR set to: 1
 12577  003CAC  502D               	movf	gmtime@tc+1,w,c
 12578  003CAE  0101               	movlb	1	; () banked
 12579  003CB0  5FAF               	subwf	(gmtime@tim+6)& (0+255),f,b
 12580  003CB2  0E00               	movlw	0
 12581  003CB4  5BB0               	subwfb	(gmtime@tim+7)& (0+255),f,b
 12582                           
 12583                           ; BSR set to: 1
 12584  003CB6  0101               	movlb	1	; () banked
 12585  003CB8  4BB1               	infsnz	(gmtime@tim+8)& (0+255),f,b
 12586  003CBA  2BB2               	incf	(gmtime@tim+9)& (0+255),f,b
 12587                           
 12588                           ; BSR set to: 1
 12589  003CBC  90D8               	bcf	status,0,c
 12590  003CBE  322C               	rrcf	gmtime@tc,f,c
 12591  003CC0                     l1609:
 12592  003CC0  FFFF               	dw	65535	; assembler added errata NOP
 12593                           
 12594                           ; BSR set to: 1
 12595                           
 12596                           ; BSR set to: 1
 12597  003CC2  0E99               	movlw	low _moninit
 12598  003CC4  0101               	movlb	1	; () banked
 12599  003CC6  25B1               	addwf	(gmtime@tim+8)& (0+255),w,b
 12600  003CC8  6EF6               	movwf	tblptrl,c
 12601  003CCA  0E7D               	movlw	high _moninit
 12602  003CCC  21B2               	addwfc	(gmtime@tim+9)& (0+255),w,b
 12603  003CCE  6EF7               	movwf	tblptrh,c
 12604  003CD0                     	if	0	;There are less than 3 active tblptr bytes
 12605  003CD0                     	endif
 12606  003CD0  0008               	tblrd		*
 12607  003CD2  FFFF               	dw	65535	; errata NOP
 12608  003CD4  50F5               	movf	tablat,w,c
 12609  003CD6  102C               	iorwf	gmtime@tc,w,c
 12610  003CD8  6E2D               	movwf	gmtime@tc+1,c
 12611  003CDA  502D               	movf	gmtime@tc+1,w,c
 12612  003CDC  6E29               	movwf	??_gmtime& (0+255),c
 12613  003CDE  6A2A               	clrf	(??_gmtime+1)& (0+255),c
 12614  003CE0  5029               	movf	??_gmtime,w,c
 12615  003CE2  0101               	movlb	1	; () banked
 12616  003CE4  5DAF               	subwf	(gmtime@tim+6)& (0+255),w,b
 12617  003CE6  0101               	movlb	1	; () banked
 12618  003CE8  51B0               	movf	(gmtime@tim+7)& (0+255),w,b
 12619  003CEA  0A80               	xorlw	128
 12620  003CEC  6E2B               	movwf	(??_gmtime+2)& (0+255),c
 12621  003CEE  502A               	movf	??_gmtime+1,w,c
 12622  003CF0  0A80               	xorlw	128
 12623  003CF2  582B               	subwfb	(??_gmtime+2)& (0+255),w,c
 12624  003CF4  B0D8               	btfsc	status,0,c
 12625  003CF6  D7D9               	goto	l1610
 12626                           
 12627                           ; BSR set to: 1
 12628                           
 12629                           ; BSR set to: 1
 12630  003CF8  0101               	movlb	1	; () banked
 12631  003CFA  4BAF               	infsnz	(gmtime@tim+6)& (0+255),f,b
 12632  003CFC  2BB0               	incf	(gmtime@tim+7)& (0+255),f,b
 12633                           
 12634                           ; BSR set to: 1
 12635  003CFE  0EA9               	movlw	low gmtime@tim
 12636  003D00  6E27               	movwf	?_gmtime,c
 12637  003D02  0E01               	movlw	high gmtime@tim
 12638  003D04  6E28               	movwf	?_gmtime+1,c
 12639                           
 12640                           ; BSR set to: 1
 12641                           
 12642                           ; BSR set to: 1
 12643  003D06  0012               	return		;funcret
 12644  003D08  FFFF               	dw	65535	; errata NOP
 12645  003D0A                     __end_of_gmtime:
 12646                           	opt stack 0
 12647                           tblptru	equ	0xFF8
 12648                           tblptrh	equ	0xFF7
 12649                           tblptrl	equ	0xFF6
 12650                           tablat	equ	0xFF5
 12651                           prodl	equ	0xFF3
 12652                           intcon	equ	0xFF2
 12653                           postinc0	equ	0xFEE
 12654                           wreg	equ	0xFE8
 12655                           indf2	equ	0xFDF
 12656                           postinc2	equ	0xFDE
 12657                           postdec2	equ	0xFDD
 12658                           plusw2	equ	0xFDB
 12659                           fsr2h	equ	0xFDA
 12660                           fsr2l	equ	0xFD9
 12661                           status	equ	0xFD8
 12662                           
 12663 ;; *************** function _dylen *****************
 12664 ;; Defined at:
 12665 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ctime.c"
 12666 ;; Parameters:    Size  Location     Type
 12667 ;;  yr              2   29[COMRAM] unsigned int 
 12668 ;; Auto vars:     Size  Location     Type
 12669 ;;		None
 12670 ;; Return value:  Size  Location     Type
 12671 ;;                  2   29[COMRAM] int 
 12672 ;; Registers used:
 12673 ;;		wreg, status,2, status,0, cstack
 12674 ;; Tracked objects:
 12675 ;;		On entry : 0/0
 12676 ;;		On exit  : 0/0
 12677 ;;		Unchanged: 0/0
 12678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12679 ;;      Params:         2       0       0       0       0       0       0
 12680 ;;      Locals:         0       0       0       0       0       0       0
 12681 ;;      Temps:          2       0       0       0       0       0       0
 12682 ;;      Totals:         4       0       0       0       0       0       0
 12683 ;;Total ram usage:        4 bytes
 12684 ;; Hardware stack levels used:    1
 12685 ;; Hardware stack levels required when called:    2
 12686 ;; This function calls:
 12687 ;;		___lwmod
 12688 ;; This function is called by:
 12689 ;;		_gmtime
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           	psect	text67
 12694  005C5E                     __ptext67:
 12695                           	opt stack 0
 12696  005C5E                     _dylen:
 12697                           	opt stack 0
 12698  005C5E  FFFF               	dw	65535	; assembler added errata NOP
 12699                           
 12700                           ; BSR set to: 1
 12701                           ;incstack = 0
 12702  005C60  0E03               	movlw	3
 12703  005C62  141E               	andwf	dylen@yr,w,c
 12704  005C64  6E20               	movwf	??_dylen& (0+255),c
 12705  005C66  0E00               	movlw	0
 12706  005C68  141F               	andwf	dylen@yr+1,w,c
 12707  005C6A  6E21               	movwf	(??_dylen+1)& (0+255),c
 12708  005C6C  5020               	movf	??_dylen,w,c
 12709  005C6E  1021               	iorwf	??_dylen+1,w,c
 12710  005C70  A4D8               	btfss	status,2,c
 12711  005C72  D01E               	goto	u9100
 12712  005C74  C01E  F019         	movff	dylen@yr,___lwmod@dividend
 12713  005C78  C01F  F01A         	movff	dylen@yr+1,___lwmod@dividend+1
 12714  005C7C  0E00               	movlw	0
 12715  005C7E  6E1C               	movwf	___lwmod@divisor+1,c
 12716  005C80  0E64               	movlw	100
 12717  005C82  6E1B               	movwf	___lwmod@divisor,c
 12718  005C84  EC3B  F02C         	call	___lwmod	;wreg free
 12719  005C88  5019               	movf	?___lwmod,w,c
 12720  005C8A  101A               	iorwf	?___lwmod+1,w,c
 12721  005C8C  A4D8               	btfss	status,2,c
 12722  005C8E  D015               	goto	l1595
 12723  005C90  0E2C               	movlw	44
 12724  005C92  241E               	addwf	dylen@yr,w,c
 12725  005C94  6E19               	movwf	___lwmod@dividend,c
 12726  005C96  0E01               	movlw	1
 12727  005C98  201F               	addwfc	dylen@yr+1,w,c
 12728  005C9A  6E1A               	movwf	___lwmod@dividend+1,c
 12729  005C9C  0E01               	movlw	1
 12730  005C9E  6E1C               	movwf	___lwmod@divisor+1,c
 12731  005CA0  0E90               	movlw	144
 12732  005CA2  6E1B               	movwf	___lwmod@divisor,c
 12733  005CA4  EC3B  F02C         	call	___lwmod	;wreg free
 12734  005CA8  5019               	movf	?___lwmod,w,c
 12735  005CAA  101A               	iorwf	?___lwmod+1,w,c
 12736  005CAC  B4D8               	btfsc	status,2,c
 12737  005CAE  D005               	goto	l1595
 12738  005CB0                     u9100:
 12739  005CB0  FFFF               	dw	65535	; assembler added errata NOP
 12740  005CB2  0E01               	movlw	1
 12741  005CB4  6E1F               	movwf	?_dylen+1,c
 12742  005CB6  0E6D               	movlw	109
 12743  005CB8  D004               	goto	L12
 12744  005CBA                     l1595:
 12745  005CBA  FFFF               	dw	65535	; assembler added errata NOP
 12746  005CBC  0E01               	movlw	1
 12747  005CBE  6E1F               	movwf	?_dylen+1,c
 12748  005CC0  0E6E               	movlw	110
 12749  005CC2                     L12:
 12750  005CC2  FFFF               	dw	65535	; assembler added errata NOP
 12751  005CC4  6E1E               	movwf	?_dylen,c
 12752  005CC6  0012               	return		;funcret
 12753  005CC8  FFFF               	dw	65535	; errata NOP
 12754  005CCA                     __end_of_dylen:
 12755                           	opt stack 0
 12756                           tblptru	equ	0xFF8
 12757                           tblptrh	equ	0xFF7
 12758                           tblptrl	equ	0xFF6
 12759                           tablat	equ	0xFF5
 12760                           prodl	equ	0xFF3
 12761                           intcon	equ	0xFF2
 12762                           postinc0	equ	0xFEE
 12763                           wreg	equ	0xFE8
 12764                           indf2	equ	0xFDF
 12765                           postinc2	equ	0xFDE
 12766                           postdec2	equ	0xFDD
 12767                           plusw2	equ	0xFDB
 12768                           fsr2h	equ	0xFDA
 12769                           fsr2l	equ	0xFD9
 12770                           status	equ	0xFD8
 12771                           
 12772 ;; *************** function ___lwmod *****************
 12773 ;; Defined at:
 12774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  dividend        2   24[COMRAM] unsigned int 
 12777 ;;  divisor         2   26[COMRAM] unsigned int 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  counter         1   28[COMRAM] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  2   24[COMRAM] unsigned int 
 12782 ;; Registers used:
 12783 ;;		wreg, status,2, status,0
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12789 ;;      Params:         4       0       0       0       0       0       0
 12790 ;;      Locals:         1       0       0       0       0       0       0
 12791 ;;      Temps:          0       0       0       0       0       0       0
 12792 ;;      Totals:         5       0       0       0       0       0       0
 12793 ;;Total ram usage:        5 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    1
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_dylen
 12800 ;;		_isleap
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           	psect	text68
 12805  005876                     __ptext68:
 12806                           	opt stack 0
 12807  005876                     ___lwmod:
 12808                           	opt stack 0
 12809  005876  FFFF               	dw	65535	; assembler added errata NOP
 12810                           
 12811                           ;incstack = 0
 12812  005878  501B               	movf	___lwmod@divisor,w,c
 12813  00587A  101C               	iorwf	___lwmod@divisor+1,w,c
 12814  00587C  B4D8               	btfsc	status,2,c
 12815  00587E  D01C               	goto	l1881
 12816  005880  0E01               	movlw	1
 12817  005882  6E1D               	movwf	___lwmod@counter,c
 12818  005884  D005               	goto	l1876
 12819  005886  FFFF               	dw	65535	; assembler added errata NOP
 12820  005888  90D8               	bcf	status,0,c
 12821  00588A  361B               	rlcf	___lwmod@divisor,f,c
 12822  00588C  361C               	rlcf	___lwmod@divisor+1,f,c
 12823  00588E  2A1D               	incf	___lwmod@counter,f,c
 12824  005890                     l1876:
 12825  005890  FFFF               	dw	65535	; assembler added errata NOP
 12826  005892  AE1C               	btfss	___lwmod@divisor+1,7,c
 12827  005894  D7F8               	goto	l1877
 12828  005896                     u7920:
 12829  005896  FFFF               	dw	65535	; assembler added errata NOP
 12830  005898  501B               	movf	___lwmod@divisor,w,c
 12831  00589A  5C19               	subwf	___lwmod@dividend,w,c
 12832  00589C  501C               	movf	___lwmod@divisor+1,w,c
 12833  00589E  581A               	subwfb	___lwmod@dividend+1,w,c
 12834  0058A0  A0D8               	btfss	status,0,c
 12835  0058A2  D004               	goto	l1880
 12836  0058A4  501B               	movf	___lwmod@divisor,w,c
 12837  0058A6  5E19               	subwf	___lwmod@dividend,f,c
 12838  0058A8  501C               	movf	___lwmod@divisor+1,w,c
 12839  0058AA  5A1A               	subwfb	___lwmod@dividend+1,f,c
 12840  0058AC                     l1880:
 12841  0058AC  FFFF               	dw	65535	; assembler added errata NOP
 12842  0058AE  90D8               	bcf	status,0,c
 12843  0058B0  321C               	rrcf	___lwmod@divisor+1,f,c
 12844  0058B2  321B               	rrcf	___lwmod@divisor,f,c
 12845  0058B4  2E1D               	decfsz	___lwmod@counter,f,c
 12846  0058B6  D7EF               	goto	u7920
 12847  0058B8                     l1881:
 12848  0058B8  FFFF               	dw	65535	; assembler added errata NOP
 12849  0058BA  C019  F019         	movff	___lwmod@dividend,?___lwmod
 12850  0058BE  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
 12851  0058C2  0012               	return		;funcret
 12852  0058C4  FFFF               	dw	65535	; errata NOP
 12853  0058C6                     __end_of___lwmod:
 12854                           	opt stack 0
 12855                           tblptru	equ	0xFF8
 12856                           tblptrh	equ	0xFF7
 12857                           tblptrl	equ	0xFF6
 12858                           tablat	equ	0xFF5
 12859                           prodl	equ	0xFF3
 12860                           intcon	equ	0xFF2
 12861                           postinc0	equ	0xFEE
 12862                           wreg	equ	0xFE8
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function ___almod *****************
 12872 ;; Defined at:
 12873 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\almod.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;  dividend        4   24[COMRAM] long 
 12876 ;;  divisor         4   28[COMRAM] long 
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;  sign            1   33[COMRAM] unsigned char 
 12879 ;;  counter         1   32[COMRAM] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  4   24[COMRAM] long 
 12882 ;; Registers used:
 12883 ;;		wreg, status,2, status,0
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12889 ;;      Params:         8       0       0       0       0       0       0
 12890 ;;      Locals:         2       0       0       0       0       0       0
 12891 ;;      Temps:          0       0       0       0       0       0       0
 12892 ;;      Totals:        10       0       0       0       0       0       0
 12893 ;;Total ram usage:       10 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    1
 12896 ;; This function calls:
 12897 ;;		Nothing
 12898 ;; This function is called by:
 12899 ;;		_gmtime
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           	psect	text69
 12904  00681A                     __ptext69:
 12905                           	opt stack 0
 12906  00681A                     ___almod:
 12907                           	opt stack 0
 12908  00681A  FFFF               	dw	65535	; assembler added errata NOP
 12909                           
 12910                           ;incstack = 0
 12911  00681C  0E00               	movlw	0
 12912  00681E  6E22               	movwf	___almod@sign,c
 12913  006820  AE1C               	btfss	___almod@dividend+3,7,c
 12914  006822  D00A               	goto	l1380
 12915  006824  1E1C               	comf	___almod@dividend+3,f,c
 12916  006826  1E1B               	comf	___almod@dividend+2,f,c
 12917  006828  1E1A               	comf	___almod@dividend+1,f,c
 12918  00682A  6C19               	negf	___almod@dividend,c
 12919  00682C  0E00               	movlw	0
 12920  00682E  221A               	addwfc	___almod@dividend+1,f,c
 12921  006830  221B               	addwfc	___almod@dividend+2,f,c
 12922  006832  221C               	addwfc	___almod@dividend+3,f,c
 12923  006834  0E01               	movlw	1
 12924  006836  6E22               	movwf	___almod@sign,c
 12925  006838                     l1380:
 12926  006838  FFFF               	dw	65535	; assembler added errata NOP
 12927  00683A  AE20               	btfss	___almod@divisor+3,7,c
 12928  00683C  D008               	goto	l1381
 12929  00683E  1E20               	comf	___almod@divisor+3,f,c
 12930  006840  1E1F               	comf	___almod@divisor+2,f,c
 12931  006842  1E1E               	comf	___almod@divisor+1,f,c
 12932  006844  6C1D               	negf	___almod@divisor,c
 12933  006846  0E00               	movlw	0
 12934  006848  221E               	addwfc	___almod@divisor+1,f,c
 12935  00684A  221F               	addwfc	___almod@divisor+2,f,c
 12936  00684C  2220               	addwfc	___almod@divisor+3,f,c
 12937  00684E                     l1381:
 12938  00684E  FFFF               	dw	65535	; assembler added errata NOP
 12939  006850  501D               	movf	___almod@divisor,w,c
 12940  006852  101E               	iorwf	___almod@divisor+1,w,c
 12941  006854  101F               	iorwf	___almod@divisor+2,w,c
 12942  006856  1020               	iorwf	___almod@divisor+3,w,c
 12943  006858  B4D8               	btfsc	status,2,c
 12944  00685A  D028               	goto	l1388
 12945  00685C  0E01               	movlw	1
 12946  00685E  6E21               	movwf	___almod@counter,c
 12947  006860  D007               	goto	l1383
 12948  006862  FFFF               	dw	65535	; assembler added errata NOP
 12949  006864  90D8               	bcf	status,0,c
 12950  006866  361D               	rlcf	___almod@divisor,f,c
 12951  006868  361E               	rlcf	___almod@divisor+1,f,c
 12952  00686A  361F               	rlcf	___almod@divisor+2,f,c
 12953  00686C  3620               	rlcf	___almod@divisor+3,f,c
 12954  00686E  2A21               	incf	___almod@counter,f,c
 12955  006870                     l1383:
 12956  006870  FFFF               	dw	65535	; assembler added errata NOP
 12957  006872  AE20               	btfss	___almod@divisor+3,7,c
 12958  006874  D7F6               	goto	l1384
 12959  006876                     u8940:
 12960  006876  FFFF               	dw	65535	; assembler added errata NOP
 12961  006878  501D               	movf	___almod@divisor,w,c
 12962  00687A  5C19               	subwf	___almod@dividend,w,c
 12963  00687C  501E               	movf	___almod@divisor+1,w,c
 12964  00687E  581A               	subwfb	___almod@dividend+1,w,c
 12965  006880  501F               	movf	___almod@divisor+2,w,c
 12966  006882  581B               	subwfb	___almod@dividend+2,w,c
 12967  006884  5020               	movf	___almod@divisor+3,w,c
 12968  006886  581C               	subwfb	___almod@dividend+3,w,c
 12969  006888  A0D8               	btfss	status,0,c
 12970  00688A  D008               	goto	l1387
 12971  00688C  501D               	movf	___almod@divisor,w,c
 12972  00688E  5E19               	subwf	___almod@dividend,f,c
 12973  006890  501E               	movf	___almod@divisor+1,w,c
 12974  006892  5A1A               	subwfb	___almod@dividend+1,f,c
 12975  006894  501F               	movf	___almod@divisor+2,w,c
 12976  006896  5A1B               	subwfb	___almod@dividend+2,f,c
 12977  006898  5020               	movf	___almod@divisor+3,w,c
 12978  00689A  5A1C               	subwfb	___almod@dividend+3,f,c
 12979  00689C                     l1387:
 12980  00689C  FFFF               	dw	65535	; assembler added errata NOP
 12981  00689E  90D8               	bcf	status,0,c
 12982  0068A0  3220               	rrcf	___almod@divisor+3,f,c
 12983  0068A2  321F               	rrcf	___almod@divisor+2,f,c
 12984  0068A4  321E               	rrcf	___almod@divisor+1,f,c
 12985  0068A6  321D               	rrcf	___almod@divisor,f,c
 12986  0068A8  2E21               	decfsz	___almod@counter,f,c
 12987  0068AA  D7E5               	goto	u8940
 12988  0068AC                     l1388:
 12989  0068AC  FFFF               	dw	65535	; assembler added errata NOP
 12990  0068AE  5022               	movf	___almod@sign,w,c
 12991  0068B0  B4D8               	btfsc	status,2,c
 12992  0068B2  D008               	goto	l1389
 12993  0068B4  1E1C               	comf	___almod@dividend+3,f,c
 12994  0068B6  1E1B               	comf	___almod@dividend+2,f,c
 12995  0068B8  1E1A               	comf	___almod@dividend+1,f,c
 12996  0068BA  6C19               	negf	___almod@dividend,c
 12997  0068BC  0E00               	movlw	0
 12998  0068BE  221A               	addwfc	___almod@dividend+1,f,c
 12999  0068C0  221B               	addwfc	___almod@dividend+2,f,c
 13000  0068C2  221C               	addwfc	___almod@dividend+3,f,c
 13001  0068C4                     l1389:
 13002  0068C4  FFFF               	dw	65535	; assembler added errata NOP
 13003  0068C6  C019  F019         	movff	___almod@dividend,?___almod
 13004  0068CA  C01A  F01A         	movff	___almod@dividend+1,?___almod+1
 13005  0068CE  C01B  F01B         	movff	___almod@dividend+2,?___almod+2
 13006  0068D2  C01C  F01C         	movff	___almod@dividend+3,?___almod+3
 13007  0068D6  0012               	return		;funcret
 13008  0068D8  FFFF               	dw	65535	; errata NOP
 13009  0068DA                     __end_of___almod:
 13010                           	opt stack 0
 13011                           tblptru	equ	0xFF8
 13012                           tblptrh	equ	0xFF7
 13013                           tblptrl	equ	0xFF6
 13014                           tablat	equ	0xFF5
 13015                           prodl	equ	0xFF3
 13016                           intcon	equ	0xFF2
 13017                           postinc0	equ	0xFEE
 13018                           wreg	equ	0xFE8
 13019                           indf2	equ	0xFDF
 13020                           postinc2	equ	0xFDE
 13021                           postdec2	equ	0xFDD
 13022                           plusw2	equ	0xFDB
 13023                           fsr2h	equ	0xFDA
 13024                           fsr2l	equ	0xFD9
 13025                           status	equ	0xFD8
 13026                           
 13027 ;; *************** function ___aldiv *****************
 13028 ;; Defined at:
 13029 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\aldiv.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;  dividend        4   24[COMRAM] long 
 13032 ;;  divisor         4   28[COMRAM] long 
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  quotient        4   34[COMRAM] long 
 13035 ;;  sign            1   33[COMRAM] unsigned char 
 13036 ;;  counter         1   32[COMRAM] unsigned char 
 13037 ;; Return value:  Size  Location     Type
 13038 ;;                  4   24[COMRAM] long 
 13039 ;; Registers used:
 13040 ;;		wreg, status,2, status,0
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13046 ;;      Params:         8       0       0       0       0       0       0
 13047 ;;      Locals:         6       0       0       0       0       0       0
 13048 ;;      Temps:          0       0       0       0       0       0       0
 13049 ;;      Totals:        14       0       0       0       0       0       0
 13050 ;;Total ram usage:       14 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:    1
 13053 ;; This function calls:
 13054 ;;		Nothing
 13055 ;; This function is called by:
 13056 ;;		_gmtime
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           	psect	text70
 13061  006C0C                     __ptext70:
 13062                           	opt stack 0
 13063  006C0C                     ___aldiv:
 13064                           	opt stack 0
 13065  006C0C  FFFF               	dw	65535	; assembler added errata NOP
 13066                           
 13067                           ;incstack = 0
 13068  006C0E  0E00               	movlw	0
 13069  006C10  6E22               	movwf	___aldiv@sign,c
 13070  006C12  AE20               	btfss	___aldiv@divisor+3,7,c
 13071  006C14  D00A               	goto	l1367
 13072  006C16  1E20               	comf	___aldiv@divisor+3,f,c
 13073  006C18  1E1F               	comf	___aldiv@divisor+2,f,c
 13074  006C1A  1E1E               	comf	___aldiv@divisor+1,f,c
 13075  006C1C  6C1D               	negf	___aldiv@divisor,c
 13076  006C1E  0E00               	movlw	0
 13077  006C20  221E               	addwfc	___aldiv@divisor+1,f,c
 13078  006C22  221F               	addwfc	___aldiv@divisor+2,f,c
 13079  006C24  2220               	addwfc	___aldiv@divisor+3,f,c
 13080  006C26  0E01               	movlw	1
 13081  006C28  6E22               	movwf	___aldiv@sign,c
 13082  006C2A                     l1367:
 13083  006C2A  FFFF               	dw	65535	; assembler added errata NOP
 13084  006C2C  AE1C               	btfss	___aldiv@dividend+3,7,c
 13085  006C2E  D00A               	goto	l1368
 13086  006C30  1E1C               	comf	___aldiv@dividend+3,f,c
 13087  006C32  1E1B               	comf	___aldiv@dividend+2,f,c
 13088  006C34  1E1A               	comf	___aldiv@dividend+1,f,c
 13089  006C36  6C19               	negf	___aldiv@dividend,c
 13090  006C38  0E00               	movlw	0
 13091  006C3A  221A               	addwfc	___aldiv@dividend+1,f,c
 13092  006C3C  221B               	addwfc	___aldiv@dividend+2,f,c
 13093  006C3E  221C               	addwfc	___aldiv@dividend+3,f,c
 13094  006C40  0E01               	movlw	1
 13095  006C42  1A22               	xorwf	___aldiv@sign,f,c
 13096  006C44                     l1368:
 13097  006C44  FFFF               	dw	65535	; assembler added errata NOP
 13098  006C46  0E00               	movlw	0
 13099  006C48  6E23               	movwf	___aldiv@quotient,c
 13100  006C4A  0E00               	movlw	0
 13101  006C4C  6E24               	movwf	___aldiv@quotient+1,c
 13102  006C4E  0E00               	movlw	0
 13103  006C50  6E25               	movwf	___aldiv@quotient+2,c
 13104  006C52  0E00               	movlw	0
 13105  006C54  6E26               	movwf	___aldiv@quotient+3,c
 13106  006C56  501D               	movf	___aldiv@divisor,w,c
 13107  006C58  101E               	iorwf	___aldiv@divisor+1,w,c
 13108  006C5A  101F               	iorwf	___aldiv@divisor+2,w,c
 13109  006C5C  1020               	iorwf	___aldiv@divisor+3,w,c
 13110  006C5E  B4D8               	btfsc	status,2,c
 13111  006C60  D02E               	goto	l1375
 13112  006C62  0E01               	movlw	1
 13113  006C64  6E21               	movwf	___aldiv@counter,c
 13114  006C66  D007               	goto	l1370
 13115  006C68  FFFF               	dw	65535	; assembler added errata NOP
 13116  006C6A  90D8               	bcf	status,0,c
 13117  006C6C  361D               	rlcf	___aldiv@divisor,f,c
 13118  006C6E  361E               	rlcf	___aldiv@divisor+1,f,c
 13119  006C70  361F               	rlcf	___aldiv@divisor+2,f,c
 13120  006C72  3620               	rlcf	___aldiv@divisor+3,f,c
 13121  006C74  2A21               	incf	___aldiv@counter,f,c
 13122  006C76                     l1370:
 13123  006C76  FFFF               	dw	65535	; assembler added errata NOP
 13124  006C78  AE20               	btfss	___aldiv@divisor+3,7,c
 13125  006C7A  D7F6               	goto	l1371
 13126  006C7C                     u8880:
 13127  006C7C  FFFF               	dw	65535	; assembler added errata NOP
 13128  006C7E  90D8               	bcf	status,0,c
 13129  006C80  3623               	rlcf	___aldiv@quotient,f,c
 13130  006C82  3624               	rlcf	___aldiv@quotient+1,f,c
 13131  006C84  3625               	rlcf	___aldiv@quotient+2,f,c
 13132  006C86  3626               	rlcf	___aldiv@quotient+3,f,c
 13133  006C88  501D               	movf	___aldiv@divisor,w,c
 13134  006C8A  5C19               	subwf	___aldiv@dividend,w,c
 13135  006C8C  501E               	movf	___aldiv@divisor+1,w,c
 13136  006C8E  581A               	subwfb	___aldiv@dividend+1,w,c
 13137  006C90  501F               	movf	___aldiv@divisor+2,w,c
 13138  006C92  581B               	subwfb	___aldiv@dividend+2,w,c
 13139  006C94  5020               	movf	___aldiv@divisor+3,w,c
 13140  006C96  581C               	subwfb	___aldiv@dividend+3,w,c
 13141  006C98  A0D8               	btfss	status,0,c
 13142  006C9A  D009               	goto	l1374
 13143  006C9C  501D               	movf	___aldiv@divisor,w,c
 13144  006C9E  5E19               	subwf	___aldiv@dividend,f,c
 13145  006CA0  501E               	movf	___aldiv@divisor+1,w,c
 13146  006CA2  5A1A               	subwfb	___aldiv@dividend+1,f,c
 13147  006CA4  501F               	movf	___aldiv@divisor+2,w,c
 13148  006CA6  5A1B               	subwfb	___aldiv@dividend+2,f,c
 13149  006CA8  5020               	movf	___aldiv@divisor+3,w,c
 13150  006CAA  5A1C               	subwfb	___aldiv@dividend+3,f,c
 13151  006CAC  8023               	bsf	___aldiv@quotient,0,c
 13152  006CAE                     l1374:
 13153  006CAE  FFFF               	dw	65535	; assembler added errata NOP
 13154  006CB0  90D8               	bcf	status,0,c
 13155  006CB2  3220               	rrcf	___aldiv@divisor+3,f,c
 13156  006CB4  321F               	rrcf	___aldiv@divisor+2,f,c
 13157  006CB6  321E               	rrcf	___aldiv@divisor+1,f,c
 13158  006CB8  321D               	rrcf	___aldiv@divisor,f,c
 13159  006CBA  2E21               	decfsz	___aldiv@counter,f,c
 13160  006CBC  D7DF               	goto	u8880
 13161  006CBE                     l1375:
 13162  006CBE  FFFF               	dw	65535	; assembler added errata NOP
 13163  006CC0  5022               	movf	___aldiv@sign,w,c
 13164  006CC2  B4D8               	btfsc	status,2,c
 13165  006CC4  D008               	goto	l1376
 13166  006CC6  1E26               	comf	___aldiv@quotient+3,f,c
 13167  006CC8  1E25               	comf	___aldiv@quotient+2,f,c
 13168  006CCA  1E24               	comf	___aldiv@quotient+1,f,c
 13169  006CCC  6C23               	negf	___aldiv@quotient,c
 13170  006CCE  0E00               	movlw	0
 13171  006CD0  2224               	addwfc	___aldiv@quotient+1,f,c
 13172  006CD2  2225               	addwfc	___aldiv@quotient+2,f,c
 13173  006CD4  2226               	addwfc	___aldiv@quotient+3,f,c
 13174  006CD6                     l1376:
 13175  006CD6  FFFF               	dw	65535	; assembler added errata NOP
 13176  006CD8  C023  F019         	movff	___aldiv@quotient,?___aldiv
 13177  006CDC  C024  F01A         	movff	___aldiv@quotient+1,?___aldiv+1
 13178  006CE0  C025  F01B         	movff	___aldiv@quotient+2,?___aldiv+2
 13179  006CE4  C026  F01C         	movff	___aldiv@quotient+3,?___aldiv+3
 13180  006CE8  0012               	return		;funcret
 13181  006CEA  FFFF               	dw	65535	; errata NOP
 13182  006CEC                     __end_of___aldiv:
 13183                           	opt stack 0
 13184                           tblptru	equ	0xFF8
 13185                           tblptrh	equ	0xFF7
 13186                           tblptrl	equ	0xFF6
 13187                           tablat	equ	0xFF5
 13188                           prodl	equ	0xFF3
 13189                           intcon	equ	0xFF2
 13190                           postinc0	equ	0xFEE
 13191                           wreg	equ	0xFE8
 13192                           indf2	equ	0xFDF
 13193                           postinc2	equ	0xFDE
 13194                           postdec2	equ	0xFDD
 13195                           plusw2	equ	0xFDB
 13196                           fsr2h	equ	0xFDA
 13197                           fsr2l	equ	0xFD9
 13198                           status	equ	0xFD8
 13199                           
 13200 ;; *************** function ___lmul *****************
 13201 ;; Defined at:
 13202 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul32.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;  multiplier      4   24[COMRAM] unsigned long 
 13205 ;;  multiplicand    4   28[COMRAM] unsigned long 
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;  product         4   32[COMRAM] unsigned long 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  4   24[COMRAM] unsigned long 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2, status,0
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13217 ;;      Params:         8       0       0       0       0       0       0
 13218 ;;      Locals:         4       0       0       0       0       0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0
 13220 ;;      Totals:        12       0       0       0       0       0       0
 13221 ;;Total ram usage:       12 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    1
 13224 ;; This function calls:
 13225 ;;		Nothing
 13226 ;; This function is called by:
 13227 ;;		_strtod
 13228 ;;		_localtime
 13229 ;;		_years_to_days
 13230 ;;		_mktime
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           	psect	text71
 13235  005AD0                     __ptext71:
 13236                           	opt stack 0
 13237  005AD0                     ___lmul:
 13238                           	opt stack 0
 13239  005AD0  FFFF               	dw	65535	; assembler added errata NOP
 13240                           
 13241                           ;incstack = 0
 13242  005AD2  0E00               	movlw	0
 13243  005AD4  6E21               	movwf	___lmul@product,c
 13244  005AD6  0E00               	movlw	0
 13245  005AD8  6E22               	movwf	___lmul@product+1,c
 13246  005ADA  0E00               	movlw	0
 13247  005ADC  6E23               	movwf	___lmul@product+2,c
 13248  005ADE  0E00               	movlw	0
 13249  005AE0  6E24               	movwf	___lmul@product+3,c
 13250  005AE2  FFFF               	dw	65535	; assembler added errata NOP
 13251  005AE4  A019               	btfss	___lmul@multiplier,0,c
 13252  005AE6  D008               	goto	l1324
 13253  005AE8  501D               	movf	___lmul@multiplicand,w,c
 13254  005AEA  2621               	addwf	___lmul@product,f,c
 13255  005AEC  501E               	movf	___lmul@multiplicand+1,w,c
 13256  005AEE  2222               	addwfc	___lmul@product+1,f,c
 13257  005AF0  501F               	movf	___lmul@multiplicand+2,w,c
 13258  005AF2  2223               	addwfc	___lmul@product+2,f,c
 13259  005AF4  5020               	movf	___lmul@multiplicand+3,w,c
 13260  005AF6  2224               	addwfc	___lmul@product+3,f,c
 13261  005AF8                     l1324:
 13262  005AF8  FFFF               	dw	65535	; assembler added errata NOP
 13263  005AFA  90D8               	bcf	status,0,c
 13264  005AFC  361D               	rlcf	___lmul@multiplicand,f,c
 13265  005AFE  361E               	rlcf	___lmul@multiplicand+1,f,c
 13266  005B00  361F               	rlcf	___lmul@multiplicand+2,f,c
 13267  005B02  3620               	rlcf	___lmul@multiplicand+3,f,c
 13268  005B04  90D8               	bcf	status,0,c
 13269  005B06  321C               	rrcf	___lmul@multiplier+3,f,c
 13270  005B08  321B               	rrcf	___lmul@multiplier+2,f,c
 13271  005B0A  321A               	rrcf	___lmul@multiplier+1,f,c
 13272  005B0C  3219               	rrcf	___lmul@multiplier,f,c
 13273  005B0E  5019               	movf	___lmul@multiplier,w,c
 13274  005B10  101A               	iorwf	___lmul@multiplier+1,w,c
 13275  005B12  101B               	iorwf	___lmul@multiplier+2,w,c
 13276  005B14  101C               	iorwf	___lmul@multiplier+3,w,c
 13277  005B16  A4D8               	btfss	status,2,c
 13278  005B18  D7E4               	goto	l1323
 13279  005B1A  C021  F019         	movff	___lmul@product,?___lmul
 13280  005B1E  C022  F01A         	movff	___lmul@product+1,?___lmul+1
 13281  005B22  C023  F01B         	movff	___lmul@product+2,?___lmul+2
 13282  005B26  C024  F01C         	movff	___lmul@product+3,?___lmul+3
 13283  005B2A  0012               	return		;funcret
 13284  005B2C  FFFF               	dw	65535	; errata NOP
 13285  005B2E                     __end_of___lmul:
 13286                           	opt stack 0
 13287                           tblptru	equ	0xFF8
 13288                           tblptrh	equ	0xFF7
 13289                           tblptrl	equ	0xFF6
 13290                           tablat	equ	0xFF5
 13291                           prodl	equ	0xFF3
 13292                           intcon	equ	0xFF2
 13293                           postinc0	equ	0xFEE
 13294                           wreg	equ	0xFE8
 13295                           indf2	equ	0xFDF
 13296                           postinc2	equ	0xFDE
 13297                           postdec2	equ	0xFDD
 13298                           plusw2	equ	0xFDB
 13299                           fsr2h	equ	0xFDA
 13300                           fsr2l	equ	0xFD9
 13301                           status	equ	0xFD8
 13302                           
 13303 ;; *************** function _asctime *****************
 13304 ;; Defined at:
 13305 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\asctime.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;  tim             2   10[BANK0 ] PTR const struct tm
 13308 ;;		 -> gmtime@tim(18), 
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  cp              2   15[BANK0 ] PTR unsigned char 
 13311 ;;		 -> asctime@buf(27), 
 13312 ;;  s               2   13[BANK0 ] PTR const unsigned char 
 13313 ;;		 -> STR_89(37), STR_88(22), 
 13314 ;; Return value:  Size  Location     Type
 13315 ;;                  2   10[BANK0 ] PTR unsigned char 
 13316 ;; Registers used:
 13317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13323 ;;      Params:         0       2       0       0       0       0       0
 13324 ;;      Locals:         0       5       0       0       0       0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0
 13326 ;;      Totals:         0       7       0       0       0       0       0
 13327 ;;Total ram usage:        7 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    3
 13330 ;; This function calls:
 13331 ;;		___awdiv
 13332 ;;		___awmod
 13333 ;;		___wmul
 13334 ;;		_put2d
 13335 ;; This function is called by:
 13336 ;;		_ctime
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           	psect	text72
 13341  003618                     __ptext72:
 13342                           	opt stack 0
 13343  003618                     _asctime:
 13344                           	opt stack 0
 13345  003618  FFFF               	dw	65535	; assembler added errata NOP
 13346                           
 13347                           ;incstack = 0
 13348  00361A  0100               	movlb	0	; () banked
 13349  00361C  EE20 F00C          	lfsr	2,12
 13350  003620  516A               	movf	asctime@tim& (0+255),w,b
 13351  003622  26D9               	addwf	fsr2l,f,c
 13352  003624  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13353  003626  22DA               	addwfc	fsr2h,f,c
 13354  003628  CFDE F027          	movff	postinc2,___wmul@multiplier
 13355  00362C  CFDD F028          	movff	postdec2,___wmul@multiplier+1
 13356  003630  0E00               	movlw	0
 13357  003632  6E2A               	movwf	___wmul@multiplicand+1,c
 13358  003634  0E03               	movlw	3
 13359  003636  6E29               	movwf	___wmul@multiplicand,c
 13360  003638  EC74  F029         	call	___wmul	;wreg free
 13361  00363C  0EAC               	movlw	low STR_88
 13362  00363E  2427               	addwf	?___wmul,w,c
 13363  003640  0100               	movlb	0	; () banked
 13364  003642  6F6D               	movwf	asctime@s& (0+255),b
 13365  003644  0E7E               	movlw	high STR_88
 13366  003646  2028               	addwfc	?___wmul+1,w,c
 13367  003648  0100               	movlb	0	; () banked
 13368  00364A  6F6E               	movwf	(asctime@s+1)& (0+255),b
 13369                           
 13370                           ; BSR set to: 0
 13371  00364C  0E7A               	movlw	low asctime@buf
 13372  00364E  0100               	movlb	0	; () banked
 13373  003650  6F6F               	movwf	asctime@cp& (0+255),b
 13374  003652  0E01               	movlw	high asctime@buf
 13375  003654  0100               	movlb	0	; () banked
 13376  003656  6F70               	movwf	(asctime@cp+1)& (0+255),b
 13377                           
 13378                           ; BSR set to: 0
 13379  003658  C06D  FFF6         	movff	asctime@s,tblptrl
 13380  00365C  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13381  003660                     	if	0	;tblptru may be non-zero
 13382  003660                     	endif
 13383  003660                     	if	0	;tblptru may be non-zero
 13384  003660                     	endif
 13385  003660  C06F  FFD9         	movff	asctime@cp,fsr2l
 13386  003664  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13387  003668  0008               	tblrd		*
 13388  00366A  FFFF               	dw	65535	; errata NOP
 13389  00366C  CFF5 FFDF          	movff	tablat,indf2
 13390                           
 13391                           ; BSR set to: 0
 13392  003670  0100               	movlb	0	; () banked
 13393  003672  4B6D               	infsnz	asctime@s& (0+255),f,b
 13394  003674  2B6E               	incf	(asctime@s+1)& (0+255),f,b
 13395                           
 13396                           ; BSR set to: 0
 13397  003676  0100               	movlb	0	; () banked
 13398  003678  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13399  00367A  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13400                           
 13401                           ; BSR set to: 0
 13402  00367C  C06D  FFF6         	movff	asctime@s,tblptrl
 13403  003680  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13404  003684                     	if	0	;tblptru may be non-zero
 13405  003684                     	endif
 13406  003684                     	if	0	;tblptru may be non-zero
 13407  003684                     	endif
 13408  003684  C06F  FFD9         	movff	asctime@cp,fsr2l
 13409  003688  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13410  00368C  0008               	tblrd		*
 13411  00368E  FFFF               	dw	65535	; errata NOP
 13412  003690  CFF5 FFDF          	movff	tablat,indf2
 13413                           
 13414                           ; BSR set to: 0
 13415  003694  0100               	movlb	0	; () banked
 13416  003696  4B6D               	infsnz	asctime@s& (0+255),f,b
 13417  003698  2B6E               	incf	(asctime@s+1)& (0+255),f,b
 13418                           
 13419                           ; BSR set to: 0
 13420  00369A  0100               	movlb	0	; () banked
 13421  00369C  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13422  00369E  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13423                           
 13424                           ; BSR set to: 0
 13425  0036A0  C06D  FFF6         	movff	asctime@s,tblptrl
 13426  0036A4  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13427  0036A8                     	if	0	;tblptru may be non-zero
 13428  0036A8                     	endif
 13429  0036A8                     	if	0	;tblptru may be non-zero
 13430  0036A8                     	endif
 13431  0036A8  C06F  FFD9         	movff	asctime@cp,fsr2l
 13432  0036AC  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13433  0036B0  0008               	tblrd		*
 13434  0036B2  FFFF               	dw	65535	; errata NOP
 13435  0036B4  CFF5 FFDF          	movff	tablat,indf2
 13436                           
 13437                           ; BSR set to: 0
 13438  0036B8  0100               	movlb	0	; () banked
 13439  0036BA  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13440  0036BC  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13441                           
 13442                           ; BSR set to: 0
 13443  0036BE  C06F  FFD9         	movff	asctime@cp,fsr2l
 13444  0036C2  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13445  0036C6  0E20               	movlw	32
 13446  0036C8  6EDF               	movwf	indf2,c
 13447                           
 13448                           ; BSR set to: 0
 13449  0036CA  0100               	movlb	0	; () banked
 13450  0036CC  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13451  0036CE  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13452                           
 13453                           ; BSR set to: 0
 13454  0036D0  0100               	movlb	0	; () banked
 13455  0036D2  EE20 F008          	lfsr	2,8
 13456  0036D6  516A               	movf	asctime@tim& (0+255),w,b
 13457  0036D8  26D9               	addwf	fsr2l,f,c
 13458  0036DA  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13459  0036DC  22DA               	addwfc	fsr2h,f,c
 13460  0036DE  CFDE F027          	movff	postinc2,___wmul@multiplier
 13461  0036E2  CFDD F028          	movff	postdec2,___wmul@multiplier+1
 13462  0036E6  0E00               	movlw	0
 13463  0036E8  6E2A               	movwf	___wmul@multiplicand+1,c
 13464  0036EA  0E03               	movlw	3
 13465  0036EC  6E29               	movwf	___wmul@multiplicand,c
 13466  0036EE  EC74  F029         	call	___wmul	;wreg free
 13467  0036F2  0E04               	movlw	low STR_89
 13468  0036F4  2427               	addwf	?___wmul,w,c
 13469  0036F6  0100               	movlb	0	; () banked
 13470  0036F8  6F6D               	movwf	asctime@s& (0+255),b
 13471  0036FA  0E7E               	movlw	high STR_89
 13472  0036FC  2028               	addwfc	?___wmul+1,w,c
 13473  0036FE  0100               	movlb	0	; () banked
 13474  003700  6F6E               	movwf	(asctime@s+1)& (0+255),b
 13475                           
 13476                           ; BSR set to: 0
 13477  003702  C06D  FFF6         	movff	asctime@s,tblptrl
 13478  003706  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13479  00370A                     	if	0	;tblptru may be non-zero
 13480  00370A                     	endif
 13481  00370A                     	if	0	;tblptru may be non-zero
 13482  00370A                     	endif
 13483  00370A  C06F  FFD9         	movff	asctime@cp,fsr2l
 13484  00370E  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13485  003712  0008               	tblrd		*
 13486  003714  FFFF               	dw	65535	; errata NOP
 13487  003716  CFF5 FFDF          	movff	tablat,indf2
 13488                           
 13489                           ; BSR set to: 0
 13490  00371A  0100               	movlb	0	; () banked
 13491  00371C  4B6D               	infsnz	asctime@s& (0+255),f,b
 13492  00371E  2B6E               	incf	(asctime@s+1)& (0+255),f,b
 13493                           
 13494                           ; BSR set to: 0
 13495  003720  0100               	movlb	0	; () banked
 13496  003722  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13497  003724  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13498                           
 13499                           ; BSR set to: 0
 13500  003726  C06D  FFF6         	movff	asctime@s,tblptrl
 13501  00372A  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13502  00372E                     	if	0	;tblptru may be non-zero
 13503  00372E                     	endif
 13504  00372E                     	if	0	;tblptru may be non-zero
 13505  00372E                     	endif
 13506  00372E  C06F  FFD9         	movff	asctime@cp,fsr2l
 13507  003732  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13508  003736  0008               	tblrd		*
 13509  003738  FFFF               	dw	65535	; errata NOP
 13510  00373A  CFF5 FFDF          	movff	tablat,indf2
 13511                           
 13512                           ; BSR set to: 0
 13513  00373E  0100               	movlb	0	; () banked
 13514  003740  4B6D               	infsnz	asctime@s& (0+255),f,b
 13515  003742  2B6E               	incf	(asctime@s+1)& (0+255),f,b
 13516                           
 13517                           ; BSR set to: 0
 13518  003744  0100               	movlb	0	; () banked
 13519  003746  4B6F               	infsnz	asctime@cp& (0+255),f,b
 13520  003748  2B70               	incf	(asctime@cp+1)& (0+255),f,b
 13521                           
 13522                           ; BSR set to: 0
 13523  00374A  C06D  FFF6         	movff	asctime@s,tblptrl
 13524  00374E  C06E  FFF7         	movff	asctime@s+1,tblptrh
 13525  003752                     	if	0	;tblptru may be non-zero
 13526  003752                     	endif
 13527  003752                     	if	0	;tblptru may be non-zero
 13528  003752                     	endif
 13529  003752  C06F  FFD9         	movff	asctime@cp,fsr2l
 13530  003756  C070  FFDA         	movff	asctime@cp+1,fsr2h
 13531  00375A  0008               	tblrd		*
 13532  00375C  FFFF               	dw	65535	; errata NOP
 13533  00375E  CFF5 FFDF          	movff	tablat,indf2
 13534                           
 13535                           ; BSR set to: 0
 13536  003762  0E20               	movlw	32
 13537  003764  0101               	movlb	1	; () banked
 13538  003766  6F81               	movwf	(asctime@buf+7)& (0+255),b
 13539                           
 13540                           ; BSR set to: 1
 13541  003768  0E84               	movlw	low (asctime@buf+10)
 13542  00376A  6E27               	movwf	put2d@cp,c
 13543  00376C  0E01               	movlw	high (asctime@buf+10)
 13544  00376E  6E28               	movwf	put2d@cp+1,c
 13545  003770  0100               	movlb	0	; () banked
 13546  003772  EE20 F006          	lfsr	2,6
 13547  003776  516A               	movf	asctime@tim& (0+255),w,b
 13548  003778  26D9               	addwf	fsr2l,f,c
 13549  00377A  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13550  00377C  22DA               	addwfc	fsr2h,f,c
 13551  00377E  50DF               	movf	indf2,w,c
 13552  003780  6E29               	movwf	put2d@i,c
 13553  003782  0E20               	movlw	32
 13554  003784  6E2A               	movwf	put2d@cl,c
 13555  003786  0E20               	movlw	32
 13556  003788  6E2B               	movwf	put2d@ct,c
 13557  00378A  ECD7  F02E         	call	_put2d	;wreg free
 13558  00378E  0E87               	movlw	low (asctime@buf+13)
 13559  003790  6E27               	movwf	put2d@cp,c
 13560  003792  0E01               	movlw	high (asctime@buf+13)
 13561  003794  6E28               	movwf	put2d@cp+1,c
 13562  003796  0100               	movlb	0	; () banked
 13563  003798  EE20 F004          	lfsr	2,4
 13564  00379C  516A               	movf	asctime@tim& (0+255),w,b
 13565  00379E  26D9               	addwf	fsr2l,f,c
 13566  0037A0  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13567  0037A2  22DA               	addwfc	fsr2h,f,c
 13568  0037A4  50DF               	movf	indf2,w,c
 13569  0037A6  6E29               	movwf	put2d@i,c
 13570  0037A8  0E30               	movlw	48
 13571  0037AA  6E2A               	movwf	put2d@cl,c
 13572  0037AC  0E3A               	movlw	58
 13573  0037AE  6E2B               	movwf	put2d@ct,c
 13574  0037B0  ECD7  F02E         	call	_put2d	;wreg free
 13575  0037B4  0E8A               	movlw	low (asctime@buf+16)
 13576  0037B6  6E27               	movwf	put2d@cp,c
 13577  0037B8  0E01               	movlw	high (asctime@buf+16)
 13578  0037BA  6E28               	movwf	put2d@cp+1,c
 13579  0037BC  0100               	movlb	0	; () banked
 13580  0037BE  EE20 F002          	lfsr	2,2
 13581  0037C2  516A               	movf	asctime@tim& (0+255),w,b
 13582  0037C4  26D9               	addwf	fsr2l,f,c
 13583  0037C6  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13584  0037C8  22DA               	addwfc	fsr2h,f,c
 13585  0037CA  50DF               	movf	indf2,w,c
 13586  0037CC  6E29               	movwf	put2d@i,c
 13587  0037CE  0E30               	movlw	48
 13588  0037D0  6E2A               	movwf	put2d@cl,c
 13589  0037D2  0E3A               	movlw	58
 13590  0037D4  6E2B               	movwf	put2d@ct,c
 13591  0037D6  ECD7  F02E         	call	_put2d	;wreg free
 13592  0037DA  0E8D               	movlw	low (asctime@buf+19)
 13593  0037DC  6E27               	movwf	put2d@cp,c
 13594  0037DE  0E01               	movlw	high (asctime@buf+19)
 13595  0037E0  6E28               	movwf	put2d@cp+1,c
 13596  0037E2  C06A  FFD9         	movff	asctime@tim,fsr2l
 13597  0037E6  C06B  FFDA         	movff	asctime@tim+1,fsr2h
 13598  0037EA  50DF               	movf	indf2,w,c
 13599  0037EC  6E29               	movwf	put2d@i,c
 13600  0037EE  0E30               	movlw	48
 13601  0037F0  6E2A               	movwf	put2d@cl,c
 13602  0037F2  0E20               	movlw	32
 13603  0037F4  6E2B               	movwf	put2d@ct,c
 13604  0037F6  ECD7  F02E         	call	_put2d	;wreg free
 13605  0037FA  0E90               	movlw	low (asctime@buf+22)
 13606  0037FC  6E27               	movwf	put2d@cp,c
 13607  0037FE  0E01               	movlw	high (asctime@buf+22)
 13608  003800  6E28               	movwf	put2d@cp+1,c
 13609  003802  0100               	movlb	0	; () banked
 13610  003804  EE20 F00A          	lfsr	2,10
 13611  003808  516A               	movf	asctime@tim& (0+255),w,b
 13612  00380A  26D9               	addwf	fsr2l,f,c
 13613  00380C  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13614  00380E  22DA               	addwfc	fsr2h,f,c
 13615  003810  CFDE F01F          	movff	postinc2,___awdiv@dividend
 13616  003814  CFDD F020          	movff	postdec2,___awdiv@dividend+1
 13617  003818  0E00               	movlw	0
 13618  00381A  6E22               	movwf	___awdiv@divisor+1,c
 13619  00381C  0E64               	movlw	100
 13620  00381E  6E21               	movwf	___awdiv@divisor,c
 13621  003820  ECAA  F031         	call	___awdiv	;wreg free
 13622  003824  501F               	movf	?___awdiv,w,c
 13623  003826  0F13               	addlw	19
 13624  003828  6E29               	movwf	put2d@i,c
 13625  00382A  0E20               	movlw	32
 13626  00382C  6E2A               	movwf	put2d@cl,c
 13627  00382E  0E00               	movlw	0
 13628  003830  6E2B               	movwf	put2d@ct,c
 13629  003832  ECD7  F02E         	call	_put2d	;wreg free
 13630  003836  0100               	movlb	0	; () banked
 13631  003838  EE20 F00A          	lfsr	2,10
 13632  00383C  516A               	movf	asctime@tim& (0+255),w,b
 13633  00383E  26D9               	addwf	fsr2l,f,c
 13634  003840  516B               	movf	(asctime@tim+1)& (0+255),w,b
 13635  003842  22DA               	addwfc	fsr2h,f,c
 13636  003844  CFDE F019          	movff	postinc2,___awmod@dividend
 13637  003848  CFDD F01A          	movff	postdec2,___awmod@dividend+1
 13638  00384C  0E00               	movlw	0
 13639  00384E  6E1C               	movwf	___awmod@divisor+1,c
 13640  003850  0E64               	movlw	100
 13641  003852  6E1B               	movwf	___awmod@divisor,c
 13642  003854  EC0D  F030         	call	___awmod	;wreg free
 13643  003858  5019               	movf	?___awmod,w,c
 13644  00385A  0100               	movlb	0	; () banked
 13645  00385C  6F6C               	movwf	_asctime$3550& (0+255),b
 13646                           
 13647                           ; BSR set to: 0
 13648  00385E  0E92               	movlw	low (asctime@buf+24)
 13649  003860  6E27               	movwf	put2d@cp,c
 13650  003862  0E01               	movlw	high (asctime@buf+24)
 13651  003864  6E28               	movwf	put2d@cp+1,c
 13652  003866  C06C  F029         	movff	_asctime$3550,put2d@i
 13653  00386A  0E30               	movlw	48
 13654  00386C  6E2A               	movwf	put2d@cl,c
 13655  00386E  0E0A               	movlw	10
 13656  003870  6E2B               	movwf	put2d@ct,c
 13657  003872  ECD7  F02E         	call	_put2d	;wreg free
 13658  003876  0E7A               	movlw	low asctime@buf
 13659  003878  0100               	movlb	0	; () banked
 13660  00387A  6F6A               	movwf	?_asctime& (0+255),b
 13661  00387C  0E01               	movlw	high asctime@buf
 13662  00387E  0100               	movlb	0	; () banked
 13663  003880  6F6B               	movwf	(?_asctime+1)& (0+255),b
 13664                           
 13665                           ; BSR set to: 0
 13666                           
 13667                           ; BSR set to: 0
 13668  003882  0012               	return		;funcret
 13669  003884  FFFF               	dw	65535	; errata NOP
 13670  003886                     __end_of_asctime:
 13671                           	opt stack 0
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodl	equ	0xFF3
 13677                           intcon	equ	0xFF2
 13678                           postinc0	equ	0xFEE
 13679                           wreg	equ	0xFE8
 13680                           indf2	equ	0xFDF
 13681                           postinc2	equ	0xFDE
 13682                           postdec2	equ	0xFDD
 13683                           plusw2	equ	0xFDB
 13684                           fsr2h	equ	0xFDA
 13685                           fsr2l	equ	0xFD9
 13686                           status	equ	0xFD8
 13687                           
 13688 ;; *************** function _put2d *****************
 13689 ;; Defined at:
 13690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\asctime.c"
 13691 ;; Parameters:    Size  Location     Type
 13692 ;;  cp              2   38[COMRAM] PTR unsigned char 
 13693 ;;		 -> asctime@buf(27), 
 13694 ;;  i               1   40[COMRAM] unsigned char 
 13695 ;;  cl              1   41[COMRAM] unsigned char 
 13696 ;;  ct              1   42[COMRAM] unsigned char 
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;		None
 13699 ;; Return value:  Size  Location     Type
 13700 ;;                  2   38[COMRAM] int 
 13701 ;; Registers used:
 13702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13703 ;; Tracked objects:
 13704 ;;		On entry : 0/0
 13705 ;;		On exit  : 0/0
 13706 ;;		Unchanged: 0/0
 13707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13708 ;;      Params:         5       0       0       0       0       0       0
 13709 ;;      Locals:         0       0       0       0       0       0       0
 13710 ;;      Temps:          0       0       0       0       0       0       0
 13711 ;;      Totals:         5       0       0       0       0       0       0
 13712 ;;Total ram usage:        5 bytes
 13713 ;; Hardware stack levels used:    1
 13714 ;; Hardware stack levels required when called:    2
 13715 ;; This function calls:
 13716 ;;		___awmod
 13717 ;;		___lbdiv
 13718 ;; This function is called by:
 13719 ;;		_asctime
 13720 ;; This function uses a non-reentrant model
 13721 ;;
 13722                           
 13723                           	psect	text73
 13724  005DAE                     __ptext73:
 13725                           	opt stack 0
 13726  005DAE                     _put2d:
 13727                           	opt stack 0
 13728  005DAE  FFFF               	dw	65535	; assembler added errata NOP
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;incstack = 0
 13732  005DB0  C027  FFD9         	movff	put2d@cp,fsr2l
 13733  005DB4  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13734  005DB8  C02B  FFDF         	movff	put2d@ct,indf2
 13735  005DBC  C029  F019         	movff	put2d@i,___awmod@dividend
 13736  005DC0  6A1A               	clrf	___awmod@dividend+1,c
 13737  005DC2  0E00               	movlw	0
 13738  005DC4  6E1C               	movwf	___awmod@divisor+1,c
 13739  005DC6  0E0A               	movlw	10
 13740  005DC8  6E1B               	movwf	___awmod@divisor,c
 13741  005DCA  EC0D  F030         	call	___awmod	;wreg free
 13742  005DCE  5019               	movf	?___awmod,w,c
 13743  005DD0  0F30               	addlw	48
 13744  005DD2  0627               	decf	put2d@cp,f,c
 13745  005DD4  A0D8               	btfss	status,0,c
 13746  005DD6  0628               	decf	put2d@cp+1,f,c
 13747  005DD8  C027  FFD9         	movff	put2d@cp,fsr2l
 13748  005DDC  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13749  005DE0  6EDF               	movwf	indf2,c
 13750  005DE2  0E0A               	movlw	10
 13751  005DE4  6E19               	movwf	___lbdiv@divisor,c
 13752  005DE6  5029               	movf	put2d@i,w,c
 13753  005DE8  EC5E  F02B         	call	___lbdiv
 13754  005DEC  6E29               	movwf	put2d@i,c
 13755  005DEE  5029               	movf	put2d@i,w,c
 13756  005DF0  B4D8               	btfsc	status,2,c
 13757  005DF2  D00B               	goto	l2107
 13758  005DF4  5029               	movf	put2d@i,w,c
 13759  005DF6  0F30               	addlw	48
 13760  005DF8  0627               	decf	put2d@cp,f,c
 13761  005DFA  A0D8               	btfss	status,0,c
 13762  005DFC  0628               	decf	put2d@cp+1,f,c
 13763  005DFE  C027  FFD9         	movff	put2d@cp,fsr2l
 13764  005E02  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13765  005E06  6EDF               	movwf	indf2,c
 13766  005E08  D00A               	goto	l2108
 13767  005E0A                     l2107:
 13768  005E0A  FFFF               	dw	65535	; assembler added errata NOP
 13769  005E0C  0627               	decf	put2d@cp,f,c
 13770  005E0E  A0D8               	btfss	status,0,c
 13771  005E10  0628               	decf	put2d@cp+1,f,c
 13772  005E12  C027  FFD9         	movff	put2d@cp,fsr2l
 13773  005E16  C028  FFDA         	movff	put2d@cp+1,fsr2h
 13774  005E1A  C02A  FFDF         	movff	put2d@cl,indf2
 13775  005E1E                     l2108:
 13776  005E1E  FFFF               	dw	65535	; assembler added errata NOP
 13777  005E20  0012               	return		;funcret
 13778  005E22  FFFF               	dw	65535	; errata NOP
 13779  005E24                     __end_of_put2d:
 13780                           	opt stack 0
 13781                           tblptru	equ	0xFF8
 13782                           tblptrh	equ	0xFF7
 13783                           tblptrl	equ	0xFF6
 13784                           tablat	equ	0xFF5
 13785                           prodl	equ	0xFF3
 13786                           intcon	equ	0xFF2
 13787                           postinc0	equ	0xFEE
 13788                           wreg	equ	0xFE8
 13789                           indf2	equ	0xFDF
 13790                           postinc2	equ	0xFDE
 13791                           postdec2	equ	0xFDD
 13792                           plusw2	equ	0xFDB
 13793                           fsr2h	equ	0xFDA
 13794                           fsr2l	equ	0xFD9
 13795                           status	equ	0xFD8
 13796                           
 13797 ;; *************** function ___lbdiv *****************
 13798 ;; Defined at:
 13799 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lbdiv.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;  dividend        1    wreg     unsigned char 
 13802 ;;  divisor         1   24[COMRAM] unsigned char 
 13803 ;; Auto vars:     Size  Location     Type
 13804 ;;  dividend        1   25[COMRAM] unsigned char 
 13805 ;;  quotient        1   27[COMRAM] unsigned char 
 13806 ;;  counter         1   26[COMRAM] unsigned char 
 13807 ;; Return value:  Size  Location     Type
 13808 ;;                  1    wreg      unsigned char 
 13809 ;; Registers used:
 13810 ;;		wreg, status,2, status,0
 13811 ;; Tracked objects:
 13812 ;;		On entry : 0/0
 13813 ;;		On exit  : 0/0
 13814 ;;		Unchanged: 0/0
 13815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13816 ;;      Params:         1       0       0       0       0       0       0
 13817 ;;      Locals:         3       0       0       0       0       0       0
 13818 ;;      Temps:          0       0       0       0       0       0       0
 13819 ;;      Totals:         4       0       0       0       0       0       0
 13820 ;;Total ram usage:        4 bytes
 13821 ;; Hardware stack levels used:    1
 13822 ;; Hardware stack levels required when called:    1
 13823 ;; This function calls:
 13824 ;;		Nothing
 13825 ;; This function is called by:
 13826 ;;		_put2d
 13827 ;; This function uses a non-reentrant model
 13828 ;;
 13829                           
 13830                           	psect	text74
 13831  0056BC                     __ptext74:
 13832                           	opt stack 0
 13833  0056BC                     ___lbdiv:
 13834                           	opt stack 0
 13835  0056BC  FFFF               	dw	65535	; assembler added errata NOP
 13836                           
 13837                           ;incstack = 0
 13838                           ;___lbdiv@dividend stored from wreg
 13839  0056BE  6E1A               	movwf	___lbdiv@dividend,c
 13840  0056C0  0E00               	movlw	0
 13841  0056C2  6E1C               	movwf	___lbdiv@quotient,c
 13842  0056C4  5019               	movf	___lbdiv@divisor,w,c
 13843  0056C6  B4D8               	btfsc	status,2,c
 13844  0056C8  D019               	goto	l1797
 13845  0056CA  0E01               	movlw	1
 13846  0056CC  6E1B               	movwf	___lbdiv@counter,c
 13847  0056CE  D004               	goto	l1792
 13848  0056D0  FFFF               	dw	65535	; assembler added errata NOP
 13849  0056D2  90D8               	bcf	status,0,c
 13850  0056D4  3619               	rlcf	___lbdiv@divisor,f,c
 13851  0056D6  2A1B               	incf	___lbdiv@counter,f,c
 13852  0056D8                     l1792:
 13853  0056D8  FFFF               	dw	65535	; assembler added errata NOP
 13854  0056DA  AE19               	btfss	___lbdiv@divisor,7,c
 13855  0056DC  D7F9               	goto	l1793
 13856  0056DE                     u10530:
 13857  0056DE  FFFF               	dw	65535	; assembler added errata NOP
 13858  0056E0  90D8               	bcf	status,0,c
 13859  0056E2  361C               	rlcf	___lbdiv@quotient,f,c
 13860  0056E4  5019               	movf	___lbdiv@divisor,w,c
 13861  0056E6  5C1A               	subwf	___lbdiv@dividend,w,c
 13862  0056E8  A0D8               	btfss	status,0,c
 13863  0056EA  D003               	goto	l1796
 13864  0056EC  5019               	movf	___lbdiv@divisor,w,c
 13865  0056EE  5E1A               	subwf	___lbdiv@dividend,f,c
 13866  0056F0  801C               	bsf	___lbdiv@quotient,0,c
 13867  0056F2                     l1796:
 13868  0056F2  FFFF               	dw	65535	; assembler added errata NOP
 13869  0056F4  90D8               	bcf	status,0,c
 13870  0056F6  3219               	rrcf	___lbdiv@divisor,f,c
 13871  0056F8  2E1B               	decfsz	___lbdiv@counter,f,c
 13872  0056FA  D7F1               	goto	u10530
 13873  0056FC                     l1797:
 13874  0056FC  FFFF               	dw	65535	; assembler added errata NOP
 13875  0056FE  501C               	movf	___lbdiv@quotient,w,c
 13876  005700  0012               	return		;funcret
 13877  005702  FFFF               	dw	65535	; errata NOP
 13878  005704                     __end_of___lbdiv:
 13879                           	opt stack 0
 13880                           tblptru	equ	0xFF8
 13881                           tblptrh	equ	0xFF7
 13882                           tblptrl	equ	0xFF6
 13883                           tablat	equ	0xFF5
 13884                           prodl	equ	0xFF3
 13885                           intcon	equ	0xFF2
 13886                           postinc0	equ	0xFEE
 13887                           wreg	equ	0xFE8
 13888                           indf2	equ	0xFDF
 13889                           postinc2	equ	0xFDE
 13890                           postdec2	equ	0xFDD
 13891                           plusw2	equ	0xFDB
 13892                           fsr2h	equ	0xFDA
 13893                           fsr2l	equ	0xFD9
 13894                           status	equ	0xFD8
 13895                           
 13896 ;; *************** function _check_V3_status *****************
 13897 ;; Defined at:
 13898 ;;		line 348 in file "main.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  status          1    wreg     struct data_check
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;  status          1   24[COMRAM] struct data_check
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  1    wreg      void 
 13905 ;; Registers used:
 13906 ;;		wreg
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13912 ;;      Params:         0       0       0       0       0       0       0
 13913 ;;      Locals:         1       0       0       0       0       0       0
 13914 ;;      Temps:          0       0       0       0       0       0       0
 13915 ;;      Totals:         1       0       0       0       0       0       0
 13916 ;;Total ram usage:        1 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    1
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_main
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           	psect	text75
 13927  00553C                     __ptext75:
 13928                           	opt stack 0
 13929  00553C                     _check_V3_status:
 13930                           	opt stack 0
 13931  00553C  FFFF               	dw	65535	; assembler added errata NOP
 13932                           
 13933                           ;incstack = 0
 13934                           ;check_V3_status@status stored from wreg
 13935  00553E  6E19               	movwf	check_V3_status@status,c
 13936                           
 13937                           ;main.c: 351: if(status.VL3_Low==1){
 13938  005540  A819               	btfss	check_V3_status@status,4,c
 13939  005542  D005               	goto	l1032
 13940                           
 13941                           ;main.c: 352: Outputs.led5=1;
 13942  005544  0100               	movlb	0	; () banked
 13943  005546  89F0               	bsf	(_Outputs+3)& (0+255),4,b
 13944                           
 13945                           ;main.c: 353: Outputs.led6=0;
 13946  005548  0100               	movlb	0	; () banked
 13947  00554A  9BF0               	bcf	(_Outputs+3)& (0+255),5,b
 13948  00554C  D007               	goto	L13
 13949  00554E                     l1032:
 13950  00554E  FFFF               	dw	65535	; assembler added errata NOP
 13951                           
 13952                           ;main.c: 357: else if(status.VL3_High==1){
 13953                           
 13954                           ; BSR set to: 0
 13955  005550  AA19               	btfss	check_V3_status@status,5,c
 13956  005552  D00A               	goto	l1034
 13957                           
 13958                           ;main.c: 358: Outputs.led5=0;
 13959  005554  0100               	movlb	0	; () banked
 13960  005556  99F0               	bcf	(_Outputs+3)& (0+255),4,b
 13961                           
 13962                           ;main.c: 359: Outputs.led6=1;
 13963  005558  0100               	movlb	0	; () banked
 13964  00555A  8BF0               	bsf	(_Outputs+3)& (0+255),5,b
 13965  00555C                     L13:
 13966  00555C  FFFF               	dw	65535	; assembler added errata NOP
 13967                           
 13968                           ;main.c: 360: Outputs.led16=1;
 13969  00555E  0100               	movlb	0	; () banked
 13970  005560  8FEF               	bsf	(_Outputs+2)& (0+255),7,b
 13971                           
 13972                           ;main.c: 361: Outputs.rly3=1;
 13973  005562  0100               	movlb	0	; () banked
 13974  005564  85EE               	bsf	(_Outputs+1)& (0+255),2,b
 13975                           
 13976                           ;main.c: 362: }
 13977  005566  D005               	goto	l1035
 13978  005568                     l1034:
 13979  005568  FFFF               	dw	65535	; assembler added errata NOP
 13980                           
 13981                           ;main.c: 363: else{
 13982                           ;main.c: 364: Outputs.led5=0;
 13983  00556A  0100               	movlb	0	; () banked
 13984  00556C  99F0               	bcf	(_Outputs+3)& (0+255),4,b
 13985                           
 13986                           ;main.c: 365: Outputs.led6=0;
 13987  00556E  0100               	movlb	0	; () banked
 13988  005570  9BF0               	bcf	(_Outputs+3)& (0+255),5,b
 13989  005572                     l1035:
 13990  005572  FFFF               	dw	65535	; assembler added errata NOP
 13991                           
 13992                           ; BSR set to: 0
 13993                           
 13994                           ; BSR set to: 0
 13995                           
 13996                           ; BSR set to: 0
 13997  005574  0012               	return		;funcret
 13998  005576  FFFF               	dw	65535	; errata NOP
 13999  005578                     __end_of_check_V3_status:
 14000                           	opt stack 0
 14001                           tblptru	equ	0xFF8
 14002                           tblptrh	equ	0xFF7
 14003                           tblptrl	equ	0xFF6
 14004                           tablat	equ	0xFF5
 14005                           prodl	equ	0xFF3
 14006                           intcon	equ	0xFF2
 14007                           postinc0	equ	0xFEE
 14008                           wreg	equ	0xFE8
 14009                           indf2	equ	0xFDF
 14010                           postinc2	equ	0xFDE
 14011                           postdec2	equ	0xFDD
 14012                           plusw2	equ	0xFDB
 14013                           fsr2h	equ	0xFDA
 14014                           fsr2l	equ	0xFD9
 14015                           status	equ	0xFD8
 14016                           
 14017 ;; *************** function _check_V2_status *****************
 14018 ;; Defined at:
 14019 ;;		line 325 in file "main.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;  status          1    wreg     struct data_check
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  status          1   24[COMRAM] struct data_check
 14024 ;; Return value:  Size  Location     Type
 14025 ;;                  1    wreg      void 
 14026 ;; Registers used:
 14027 ;;		wreg
 14028 ;; Tracked objects:
 14029 ;;		On entry : 0/0
 14030 ;;		On exit  : 0/0
 14031 ;;		Unchanged: 0/0
 14032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14033 ;;      Params:         0       0       0       0       0       0       0
 14034 ;;      Locals:         1       0       0       0       0       0       0
 14035 ;;      Temps:          0       0       0       0       0       0       0
 14036 ;;      Totals:         1       0       0       0       0       0       0
 14037 ;;Total ram usage:        1 bytes
 14038 ;; Hardware stack levels used:    1
 14039 ;; Hardware stack levels required when called:    1
 14040 ;; This function calls:
 14041 ;;		Nothing
 14042 ;; This function is called by:
 14043 ;;		_main
 14044 ;; This function uses a non-reentrant model
 14045 ;;
 14046                           
 14047                           	psect	text76
 14048  005500                     __ptext76:
 14049                           	opt stack 0
 14050  005500                     _check_V2_status:
 14051                           	opt stack 0
 14052  005500  FFFF               	dw	65535	; assembler added errata NOP
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;incstack = 0
 14056                           ;check_V2_status@status stored from wreg
 14057  005502  6E19               	movwf	check_V2_status@status,c
 14058                           
 14059                           ;main.c: 328: if(status.VL2_Low==1){
 14060  005504  A419               	btfss	check_V2_status@status,2,c
 14061  005506  D005               	goto	l1025
 14062                           
 14063                           ;main.c: 329: Outputs.led3=1;
 14064  005508  0100               	movlb	0	; () banked
 14065  00550A  85F0               	bsf	(_Outputs+3)& (0+255),2,b
 14066                           
 14067                           ;main.c: 330: Outputs.led4=0;
 14068  00550C  0100               	movlb	0	; () banked
 14069  00550E  97F0               	bcf	(_Outputs+3)& (0+255),3,b
 14070  005510  D007               	goto	L14
 14071  005512                     l1025:
 14072  005512  FFFF               	dw	65535	; assembler added errata NOP
 14073                           
 14074                           ;main.c: 334: else if(status.VL2_High==1){
 14075                           
 14076                           ; BSR set to: 0
 14077  005514  A619               	btfss	check_V2_status@status,3,c
 14078  005516  D00A               	goto	l1027
 14079                           
 14080                           ;main.c: 335: Outputs.led3=0;
 14081  005518  0100               	movlb	0	; () banked
 14082  00551A  95F0               	bcf	(_Outputs+3)& (0+255),2,b
 14083                           
 14084                           ;main.c: 336: Outputs.led4=1;
 14085  00551C  0100               	movlb	0	; () banked
 14086  00551E  87F0               	bsf	(_Outputs+3)& (0+255),3,b
 14087  005520                     L14:
 14088  005520  FFFF               	dw	65535	; assembler added errata NOP
 14089                           
 14090                           ;main.c: 337: Outputs.led16=1;
 14091  005522  0100               	movlb	0	; () banked
 14092  005524  8FEF               	bsf	(_Outputs+2)& (0+255),7,b
 14093                           
 14094                           ;main.c: 338: Outputs.rly3=1;
 14095  005526  0100               	movlb	0	; () banked
 14096  005528  85EE               	bsf	(_Outputs+1)& (0+255),2,b
 14097                           
 14098                           ;main.c: 339: }
 14099  00552A  D005               	goto	l1028
 14100  00552C                     l1027:
 14101  00552C  FFFF               	dw	65535	; assembler added errata NOP
 14102                           
 14103                           ;main.c: 340: else{
 14104                           ;main.c: 341: Outputs.led3=0;
 14105  00552E  0100               	movlb	0	; () banked
 14106  005530  95F0               	bcf	(_Outputs+3)& (0+255),2,b
 14107                           
 14108                           ;main.c: 342: Outputs.led4=0;
 14109  005532  0100               	movlb	0	; () banked
 14110  005534  97F0               	bcf	(_Outputs+3)& (0+255),3,b
 14111  005536                     l1028:
 14112  005536  FFFF               	dw	65535	; assembler added errata NOP
 14113                           
 14114                           ; BSR set to: 0
 14115                           
 14116                           ; BSR set to: 0
 14117                           
 14118                           ; BSR set to: 0
 14119  005538  0012               	return		;funcret
 14120  00553A  FFFF               	dw	65535	; errata NOP
 14121  00553C                     __end_of_check_V2_status:
 14122                           	opt stack 0
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodl	equ	0xFF3
 14128                           intcon	equ	0xFF2
 14129                           postinc0	equ	0xFEE
 14130                           wreg	equ	0xFE8
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           plusw2	equ	0xFDB
 14135                           fsr2h	equ	0xFDA
 14136                           fsr2l	equ	0xFD9
 14137                           status	equ	0xFD8
 14138                           
 14139 ;; *************** function _check_V1_status *****************
 14140 ;; Defined at:
 14141 ;;		line 298 in file "main.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;  status          1    wreg     struct data_check
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;  status          1   24[COMRAM] struct data_check
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  1    wreg      void 
 14148 ;; Registers used:
 14149 ;;		wreg
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14155 ;;      Params:         0       0       0       0       0       0       0
 14156 ;;      Locals:         1       0       0       0       0       0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0
 14158 ;;      Totals:         1       0       0       0       0       0       0
 14159 ;;Total ram usage:        1 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    1
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_main
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text77
 14170  005678                     __ptext77:
 14171                           	opt stack 0
 14172  005678                     _check_V1_status:
 14173                           	opt stack 0
 14174  005678  FFFF               	dw	65535	; assembler added errata NOP
 14175                           
 14176                           ; BSR set to: 0
 14177                           ;incstack = 0
 14178                           ;check_V1_status@status stored from wreg
 14179  00567A  6E19               	movwf	check_V1_status@status,c
 14180                           
 14181                           ;main.c: 301: if(status.VL1_Low==1){
 14182  00567C  A019               	btfss	check_V1_status@status,0,c
 14183  00567E  D005               	goto	l1018
 14184                           
 14185                           ;main.c: 302: Outputs.led1=1;
 14186  005680  0100               	movlb	0	; () banked
 14187  005682  81F0               	bsf	(_Outputs+3)& (0+255),0,b
 14188                           
 14189                           ;main.c: 303: Outputs.led2=0;
 14190  005684  0100               	movlb	0	; () banked
 14191  005686  93F0               	bcf	(_Outputs+3)& (0+255),1,b
 14192  005688  D007               	goto	L15
 14193  00568A                     l1018:
 14194  00568A  FFFF               	dw	65535	; assembler added errata NOP
 14195                           
 14196                           ;main.c: 308: else if(status.VL1_High==1){
 14197                           
 14198                           ; BSR set to: 0
 14199  00568C  A219               	btfss	check_V1_status@status,1,c
 14200  00568E  D00A               	goto	l1020
 14201                           
 14202                           ;main.c: 309: Outputs.led1=0;
 14203  005690  0100               	movlb	0	; () banked
 14204  005692  91F0               	bcf	(_Outputs+3)& (0+255),0,b
 14205                           
 14206                           ;main.c: 310: Outputs.led2=1;
 14207  005694  0100               	movlb	0	; () banked
 14208  005696  83F0               	bsf	(_Outputs+3)& (0+255),1,b
 14209  005698                     L15:
 14210  005698  FFFF               	dw	65535	; assembler added errata NOP
 14211                           
 14212                           ;main.c: 311: Outputs.led16=1;
 14213  00569A  0100               	movlb	0	; () banked
 14214  00569C  8FEF               	bsf	(_Outputs+2)& (0+255),7,b
 14215                           
 14216                           ;main.c: 312: Outputs.rly3=1;
 14217  00569E  0100               	movlb	0	; () banked
 14218  0056A0  85EE               	bsf	(_Outputs+1)& (0+255),2,b
 14219                           
 14220                           ;main.c: 314: }
 14221  0056A2  D009               	goto	l1021
 14222  0056A4                     l1020:
 14223  0056A4  FFFF               	dw	65535	; assembler added errata NOP
 14224                           
 14225                           ;main.c: 315: else{
 14226                           ;main.c: 316: Outputs.led1=0;
 14227  0056A6  0100               	movlb	0	; () banked
 14228  0056A8  91F0               	bcf	(_Outputs+3)& (0+255),0,b
 14229                           
 14230                           ;main.c: 317: Outputs.led2=0;
 14231  0056AA  0100               	movlb	0	; () banked
 14232  0056AC  93F0               	bcf	(_Outputs+3)& (0+255),1,b
 14233                           
 14234                           ;main.c: 318: Outputs.led16=0;
 14235  0056AE  0100               	movlb	0	; () banked
 14236  0056B0  9FEF               	bcf	(_Outputs+2)& (0+255),7,b
 14237                           
 14238                           ;main.c: 319: Outputs.rly3=0;
 14239  0056B2  0100               	movlb	0	; () banked
 14240  0056B4  95EE               	bcf	(_Outputs+1)& (0+255),2,b
 14241  0056B6                     l1021:
 14242  0056B6  FFFF               	dw	65535	; assembler added errata NOP
 14243                           
 14244                           ; BSR set to: 0
 14245                           
 14246                           ; BSR set to: 0
 14247                           
 14248                           ; BSR set to: 0
 14249  0056B8  0012               	return		;funcret
 14250  0056BA  FFFF               	dw	65535	; errata NOP
 14251  0056BC                     __end_of_check_V1_status:
 14252                           	opt stack 0
 14253                           tblptru	equ	0xFF8
 14254                           tblptrh	equ	0xFF7
 14255                           tblptrl	equ	0xFF6
 14256                           tablat	equ	0xFF5
 14257                           prodl	equ	0xFF3
 14258                           intcon	equ	0xFF2
 14259                           postinc0	equ	0xFEE
 14260                           wreg	equ	0xFE8
 14261                           indf2	equ	0xFDF
 14262                           postinc2	equ	0xFDE
 14263                           postdec2	equ	0xFDD
 14264                           plusw2	equ	0xFDB
 14265                           fsr2h	equ	0xFDA
 14266                           fsr2l	equ	0xFD9
 14267                           status	equ	0xFD8
 14268                           
 14269 ;; *************** function _Rd_Digital_Inputs *****************
 14270 ;; Defined at:
 14271 ;;		line 66 in file "ior5e.c"
 14272 ;; Parameters:    Size  Location     Type
 14273 ;;		None
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;  Temp_RD         1   25[COMRAM] struct Digital_Inputs
 14276 ;;  Port_RD         1   24[COMRAM] struct Digital_Inputs
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  1    wreg      unsigned char 
 14279 ;; Registers used:
 14280 ;;		wreg, status,2
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14286 ;;      Params:         0       0       0       0       0       0       0
 14287 ;;      Locals:         2       0       0       0       0       0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0
 14289 ;;      Totals:         2       0       0       0       0       0       0
 14290 ;;Total ram usage:        2 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    1
 14293 ;; This function calls:
 14294 ;;		Nothing
 14295 ;; This function is called by:
 14296 ;;		_main
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           	psect	text78
 14301  005224                     __ptext78:
 14302                           	opt stack 0
 14303  005224                     _Rd_Digital_Inputs:
 14304                           	opt stack 0
 14305  005224  FFFF               	dw	65535	; assembler added errata NOP
 14306                           
 14307                           ;ior5e.c: 68: union Digital_Inputs Port_RD, Temp_RD;
 14308                           ;ior5e.c: 70: Temp_RD.byte=PORTB;
 14309                           
 14310                           ; BSR set to: 0
 14311                           ;incstack = 0
 14312  005226  CF81 F01A          	movff	3969,Rd_Digital_Inputs@Temp_RD	;volatile
 14313                           
 14314                           ;ior5e.c: 72: Port_RD.B0=!Temp_RD.B0;
 14315  00522A  8019               	bsf	Rd_Digital_Inputs@Port_RD,0,c
 14316  00522C  B01A               	btfsc	Rd_Digital_Inputs@Temp_RD,0,c
 14317  00522E  9019               	bcf	Rd_Digital_Inputs@Port_RD,0,c
 14318                           
 14319                           ;ior5e.c: 73: Port_RD.B1=!Temp_RD.B1;
 14320  005230  8219               	bsf	Rd_Digital_Inputs@Port_RD,1,c
 14321  005232  B21A               	btfsc	Rd_Digital_Inputs@Temp_RD,1,c
 14322  005234  9219               	bcf	Rd_Digital_Inputs@Port_RD,1,c
 14323                           
 14324                           ;ior5e.c: 74: Port_RD.B2=!Temp_RD.B4;
 14325  005236  8419               	bsf	Rd_Digital_Inputs@Port_RD,2,c
 14326  005238  B81A               	btfsc	Rd_Digital_Inputs@Temp_RD,4,c
 14327  00523A  9419               	bcf	Rd_Digital_Inputs@Port_RD,2,c
 14328                           
 14329                           ;ior5e.c: 75: Port_RD.B3=!Temp_RD.B5;
 14330  00523C  8619               	bsf	Rd_Digital_Inputs@Port_RD,3,c
 14331  00523E  BA1A               	btfsc	Rd_Digital_Inputs@Temp_RD,5,c
 14332  005240  9619               	bcf	Rd_Digital_Inputs@Port_RD,3,c
 14333                           
 14334                           ;ior5e.c: 77: return(Port_RD.byte);
 14335  005242  5019               	movf	Rd_Digital_Inputs@Port_RD,w,c
 14336  005244  0012               	return		;funcret
 14337  005246  FFFF               	dw	65535	; errata NOP
 14338  005248                     __end_of_Rd_Digital_Inputs:
 14339                           	opt stack 0
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodl	equ	0xFF3
 14345                           intcon	equ	0xFF2
 14346                           postinc0	equ	0xFEE
 14347                           wreg	equ	0xFE8
 14348                           indf2	equ	0xFDF
 14349                           postinc2	equ	0xFDE
 14350                           postdec2	equ	0xFDD
 14351                           plusw2	equ	0xFDB
 14352                           fsr2h	equ	0xFDA
 14353                           fsr2l	equ	0xFD9
 14354                           status	equ	0xFD8
 14355                           
 14356 ;; *************** function _Open_Timer0 *****************
 14357 ;; Defined at:
 14358 ;;		line 12 in file "Timers.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;  config          1    wreg     unsigned char 
 14361 ;;  IE              1   24[COMRAM] unsigned char 
 14362 ;;  value           2   25[COMRAM] int 
 14363 ;; Auto vars:     Size  Location     Type
 14364 ;;  config          1   27[COMRAM] unsigned char 
 14365 ;;  data            2   28[COMRAM] struct tim
 14366 ;; Return value:  Size  Location     Type
 14367 ;;                  1    wreg      void 
 14368 ;; Registers used:
 14369 ;;		wreg, status,2, status,0
 14370 ;; Tracked objects:
 14371 ;;		On entry : 0/0
 14372 ;;		On exit  : 0/0
 14373 ;;		Unchanged: 0/0
 14374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14375 ;;      Params:         3       0       0       0       0       0       0
 14376 ;;      Locals:         3       0       0       0       0       0       0
 14377 ;;      Temps:          0       0       0       0       0       0       0
 14378 ;;      Totals:         6       0       0       0       0       0       0
 14379 ;;Total ram usage:        6 bytes
 14380 ;; Hardware stack levels used:    1
 14381 ;; Hardware stack levels required when called:    1
 14382 ;; This function calls:
 14383 ;;		Nothing
 14384 ;; This function is called by:
 14385 ;;		_main
 14386 ;; This function uses a non-reentrant model
 14387 ;;
 14388                           
 14389                           	psect	text79
 14390  005368                     __ptext79:
 14391                           	opt stack 0
 14392  005368                     _Open_Timer0:
 14393                           	opt stack 0
 14394  005368  FFFF               	dw	65535	; assembler added errata NOP
 14395                           
 14396                           ;incstack = 0
 14397                           ;Open_Timer0@config stored from wreg
 14398  00536A  6E1C               	movwf	Open_Timer0@config,c
 14399                           
 14400                           ;Timers.c: 14: SplitInt data;
 14401                           ;Timers.c: 16: data.tim_value=value;
 14402  00536C  C01A  F01D         	movff	Open_Timer0@value,Open_Timer0@data
 14403  005370  C01B  F01E         	movff	Open_Timer0@value+1,Open_Timer0@data+1
 14404                           
 14405                           ;Timers.c: 17: T0CON=config;
 14406  005374  C01C  FFD5         	movff	Open_Timer0@config,4053	;volatile
 14407                           
 14408                           ;Timers.c: 18: TMR0H=data.HSB;
 14409  005378  C01D  FFD7         	movff	Open_Timer0@data,4055	;volatile
 14410                           
 14411                           ;Timers.c: 19: TMR0L=data.LSB;
 14412  00537C  C01E  FFD6         	movff	Open_Timer0@data+1,4054	;volatile
 14413                           
 14414                           ;Timers.c: 20: INTCONbits.TMR0IF=0;
 14415  005380  94F2               	bcf	intcon,2,c	;volatile
 14416                           
 14417                           ;Timers.c: 22: if(IE==1)
 14418  005382  0419               	decf	Open_Timer0@IE,w,c
 14419  005384  A4D8               	btfss	status,2,c
 14420  005386  D002               	goto	l1134
 14421                           
 14422                           ;Timers.c: 23: INTCONbits.TMR0IE=1;
 14423  005388  8AF2               	bsf	intcon,5,c	;volatile
 14424  00538A  D002               	goto	l1135
 14425  00538C                     l1134:
 14426  00538C  FFFF               	dw	65535	; assembler added errata NOP
 14427                           
 14428                           ;Timers.c: 25: else
 14429                           ;Timers.c: 26: INTCONbits.TMR0IE=0;
 14430  00538E  9AF2               	bcf	intcon,5,c	;volatile
 14431  005390                     l1135:
 14432  005390  FFFF               	dw	65535	; assembler added errata NOP
 14433  005392  0012               	return		;funcret
 14434  005394  FFFF               	dw	65535	; errata NOP
 14435  005396                     __end_of_Open_Timer0:
 14436                           	opt stack 0
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodl	equ	0xFF3
 14442                           intcon	equ	0xFF2
 14443                           postinc0	equ	0xFEE
 14444                           wreg	equ	0xFE8
 14445                           indf2	equ	0xFDF
 14446                           postinc2	equ	0xFDE
 14447                           postdec2	equ	0xFDD
 14448                           plusw2	equ	0xFDB
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _OpenUSART *****************
 14454 ;; Defined at:
 14455 ;;		line 15 in file "USART.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;  config          1    wreg     unsigned char 
 14458 ;;  spbrg           2   24[COMRAM] unsigned int 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;  config          1   26[COMRAM] unsigned char 
 14461 ;; Return value:  Size  Location     Type
 14462 ;;                  1    wreg      void 
 14463 ;; Registers used:
 14464 ;;		wreg, status,2
 14465 ;; Tracked objects:
 14466 ;;		On entry : 0/0
 14467 ;;		On exit  : 0/0
 14468 ;;		Unchanged: 0/0
 14469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14470 ;;      Params:         2       0       0       0       0       0       0
 14471 ;;      Locals:         1       0       0       0       0       0       0
 14472 ;;      Temps:          0       0       0       0       0       0       0
 14473 ;;      Totals:         3       0       0       0       0       0       0
 14474 ;;Total ram usage:        3 bytes
 14475 ;; Hardware stack levels used:    1
 14476 ;; Hardware stack levels required when called:    1
 14477 ;; This function calls:
 14478 ;;		Nothing
 14479 ;; This function is called by:
 14480 ;;		_main
 14481 ;; This function uses a non-reentrant model
 14482 ;;
 14483                           
 14484                           	psect	text80
 14485  005BF6                     __ptext80:
 14486                           	opt stack 0
 14487  005BF6                     _OpenUSART:
 14488                           	opt stack 0
 14489  005BF6  FFFF               	dw	65535	; assembler added errata NOP
 14490                           
 14491                           ;incstack = 0
 14492                           ;OpenUSART@config stored from wreg
 14493  005BF8  6E1B               	movwf	OpenUSART@config,c
 14494                           
 14495                           ;USART.c: 16: TXSTA = 0;
 14496  005BFA  0E00               	movlw	0
 14497  005BFC  6EAC               	movwf	4012,c	;volatile
 14498                           
 14499                           ;USART.c: 17: RCSTA = 0;
 14500  005BFE  0E00               	movlw	0
 14501  005C00  6EAB               	movwf	4011,c	;volatile
 14502                           
 14503                           ;USART.c: 18: TRISCbits.RC6=0;
 14504  005C02  9C94               	bcf	3988,6,c	;volatile
 14505                           
 14506                           ;USART.c: 19: TRISCbits.RC7=1;
 14507  005C04  8E94               	bsf	3988,7,c	;volatile
 14508                           
 14509                           ;USART.c: 21: if (config & 0x01)
 14510  005C06  B01B               	btfsc	OpenUSART@config,0,c
 14511                           
 14512                           ;USART.c: 22: TXSTAbits.SYNC = 1;
 14513  005C08  88AC               	bsf	4012,4,c	;volatile
 14514                           
 14515                           ;USART.c: 24: if (config & 0x02)
 14516  005C0A  A21B               	btfss	OpenUSART@config,1,c
 14517  005C0C  D002               	goto	l1160
 14518                           
 14519                           ;USART.c: 25: {
 14520                           ;USART.c: 26: TXSTAbits.TX9 = 1;
 14521  005C0E  8CAC               	bsf	4012,6,c	;volatile
 14522                           
 14523                           ;USART.c: 27: RCSTAbits.RX9 = 1;
 14524  005C10  8CAB               	bsf	4011,6,c	;volatile
 14525  005C12                     l1160:
 14526  005C12  FFFF               	dw	65535	; assembler added errata NOP
 14527                           
 14528                           ;USART.c: 28: }
 14529                           ;USART.c: 30: if (config & 0x04)
 14530  005C14  B41B               	btfsc	OpenUSART@config,2,c
 14531                           
 14532                           ;USART.c: 31: TXSTAbits.CSRC = 1;
 14533  005C16  8EAC               	bsf	4012,7,c	;volatile
 14534                           
 14535                           ;USART.c: 33: if (config & 0x08)
 14536  005C18  A61B               	btfss	OpenUSART@config,3,c
 14537  005C1A  D002               	goto	l1162
 14538                           
 14539                           ;USART.c: 34: RCSTAbits.CREN = 1;
 14540  005C1C  88AB               	bsf	4011,4,c	;volatile
 14541  005C1E  D002               	goto	l1163
 14542  005C20                     l1162:
 14543  005C20  FFFF               	dw	65535	; assembler added errata NOP
 14544                           
 14545                           ;USART.c: 35: else
 14546                           ;USART.c: 36: RCSTAbits.SREN = 1;
 14547  005C22  8AAB               	bsf	4011,5,c	;volatile
 14548  005C24                     l1163:
 14549  005C24  FFFF               	dw	65535	; assembler added errata NOP
 14550                           
 14551                           ;USART.c: 38: if (config & 0x10)
 14552  005C26  A81B               	btfss	OpenUSART@config,4,c
 14553  005C28  D002               	goto	l1164
 14554                           
 14555                           ;USART.c: 39: TXSTAbits.BRGH = 1;
 14556  005C2A  84AC               	bsf	4012,2,c	;volatile
 14557  005C2C  D002               	goto	l1165
 14558  005C2E                     l1164:
 14559  005C2E  FFFF               	dw	65535	; assembler added errata NOP
 14560                           
 14561                           ;USART.c: 40: else
 14562                           ;USART.c: 41: TXSTAbits.BRGH = 0;
 14563  005C30  94AC               	bcf	4012,2,c	;volatile
 14564  005C32                     l1165:
 14565  005C32  FFFF               	dw	65535	; assembler added errata NOP
 14566                           
 14567                           ;USART.c: 43: PIR1bits.TXIF = 0;
 14568  005C34  989E               	bcf	3998,4,c	;volatile
 14569                           
 14570                           ;USART.c: 45: if (config & 0x40)
 14571  005C36  AC1B               	btfss	OpenUSART@config,6,c
 14572  005C38  D002               	goto	l1166
 14573                           
 14574                           ;USART.c: 46: PIE1bits.RCIE = 1;
 14575  005C3A  8A9D               	bsf	3997,5,c	;volatile
 14576  005C3C  D002               	goto	l1167
 14577  005C3E                     l1166:
 14578  005C3E  FFFF               	dw	65535	; assembler added errata NOP
 14579                           
 14580                           ;USART.c: 47: else
 14581                           ;USART.c: 48: PIE1bits.RCIE = 0;
 14582  005C40  9A9D               	bcf	3997,5,c	;volatile
 14583  005C42                     l1167:
 14584  005C42  FFFF               	dw	65535	; assembler added errata NOP
 14585                           
 14586                           ;USART.c: 52: if (config & 0x80)
 14587  005C44  AE1B               	btfss	OpenUSART@config,7,c
 14588  005C46  D002               	goto	l1168
 14589                           
 14590                           ;USART.c: 53: PIE1bits.TXIE = 1;
 14591  005C48  889D               	bsf	3997,4,c	;volatile
 14592  005C4A  D002               	goto	l1169
 14593  005C4C                     l1168:
 14594  005C4C  FFFF               	dw	65535	; assembler added errata NOP
 14595                           
 14596                           ;USART.c: 54: else
 14597                           ;USART.c: 55: PIE1bits.TXIE = 0;
 14598  005C4E  989D               	bcf	3997,4,c	;volatile
 14599  005C50                     l1169:
 14600  005C50  FFFF               	dw	65535	; assembler added errata NOP
 14601                           
 14602                           ;USART.c: 57: SPBRG = spbrg;
 14603  005C52  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 14604                           
 14605                           ;USART.c: 59: TXSTAbits.TXEN = 1;
 14606  005C56  8AAC               	bsf	4012,5,c	;volatile
 14607                           
 14608                           ;USART.c: 60: RCSTAbits.SPEN = 1;
 14609  005C58  8EAB               	bsf	4011,7,c	;volatile
 14610  005C5A  0012               	return		;funcret
 14611  005C5C  FFFF               	dw	65535	; errata NOP
 14612  005C5E                     __end_of_OpenUSART:
 14613                           	opt stack 0
 14614                           tblptru	equ	0xFF8
 14615                           tblptrh	equ	0xFF7
 14616                           tblptrl	equ	0xFF6
 14617                           tablat	equ	0xFF5
 14618                           prodl	equ	0xFF3
 14619                           intcon	equ	0xFF2
 14620                           postinc0	equ	0xFEE
 14621                           wreg	equ	0xFE8
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           plusw2	equ	0xFDB
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630 ;; *************** function _OpenIO5R *****************
 14631 ;; Defined at:
 14632 ;;		line 9 in file "ior5e.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;		None
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;		None
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  1    wreg      void 
 14639 ;; Registers used:
 14640 ;;		wreg, status,2, status,0, cstack
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14646 ;;      Params:         0       0       0       0       0       0       0
 14647 ;;      Locals:         0       0       0       0       0       0       0
 14648 ;;      Temps:          0       0       0       0       0       0       0
 14649 ;;      Totals:         0       0       0       0       0       0       0
 14650 ;;Total ram usage:        0 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    2
 14653 ;; This function calls:
 14654 ;;		_WriteIO5R
 14655 ;; This function is called by:
 14656 ;;		_main
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text81
 14661  0053F2                     __ptext81:
 14662                           	opt stack 0
 14663  0053F2                     _OpenIO5R:
 14664                           	opt stack 0
 14665  0053F2  FFFF               	dw	65535	; assembler added errata NOP
 14666                           
 14667                           ;ior5e.c: 12: TRISCbits.TRISC0=0;
 14668                           
 14669                           ;incstack = 0
 14670  0053F4  9094               	bcf	3988,0,c	;volatile
 14671                           
 14672                           ;ior5e.c: 13: TRISCbits.TRISC1=0;
 14673  0053F6  9294               	bcf	3988,1,c	;volatile
 14674                           
 14675                           ;ior5e.c: 14: TRISCbits.TRISC2=0;
 14676  0053F8  9494               	bcf	3988,2,c	;volatile
 14677                           
 14678                           ;ior5e.c: 15: TRISCbits.TRISC5=0;
 14679  0053FA  9A94               	bcf	3988,5,c	;volatile
 14680                           
 14681                           ;ior5e.c: 17: TRISBbits.TRISB0=1;
 14682  0053FC  8093               	bsf	3987,0,c	;volatile
 14683                           
 14684                           ;ior5e.c: 18: TRISBbits.TRISB1=1;
 14685  0053FE  8293               	bsf	3987,1,c	;volatile
 14686                           
 14687                           ;ior5e.c: 19: TRISBbits.TRISB4=1;
 14688  005400  8893               	bsf	3987,4,c	;volatile
 14689                           
 14690                           ;ior5e.c: 20: TRISBbits.TRISB5=1;
 14691  005402  8A93               	bsf	3987,5,c	;volatile
 14692                           
 14693                           ;ior5e.c: 22: LATCbits.LC1=1;
 14694  005404  828B               	bsf	3979,1,c	;volatile
 14695                           
 14696                           ;ior5e.c: 23: LATCbits.LC2=1;
 14697  005406  848B               	bsf	3979,2,c	;volatile
 14698                           
 14699                           ;ior5e.c: 24: LATCbits.LC5=1;
 14700  005408  8A8B               	bsf	3979,5,c	;volatile
 14701                           
 14702                           ;ior5e.c: 26: WriteIO5R(0x00000000);
 14703  00540A  0E00               	movlw	0
 14704  00540C  6E19               	movwf	WriteIO5R@data,c
 14705  00540E  0E00               	movlw	0
 14706  005410  6E1A               	movwf	WriteIO5R@data+1,c
 14707  005412  0E00               	movlw	0
 14708  005414  6E1B               	movwf	WriteIO5R@data+2,c
 14709  005416  0E00               	movlw	0
 14710  005418  6E1C               	movwf	WriteIO5R@data+3,c
 14711  00541A  EC4F  F030         	call	_WriteIO5R	;wreg free
 14712                           
 14713                           ;ior5e.c: 27: LATCbits.LC5=0;
 14714  00541E  9A8B               	bcf	3979,5,c	;volatile
 14715  005420  0012               	return		;funcret
 14716  005422  FFFF               	dw	65535	; errata NOP
 14717  005424                     __end_of_OpenIO5R:
 14718                           	opt stack 0
 14719                           tblptru	equ	0xFF8
 14720                           tblptrh	equ	0xFF7
 14721                           tblptrl	equ	0xFF6
 14722                           tablat	equ	0xFF5
 14723                           prodl	equ	0xFF3
 14724                           intcon	equ	0xFF2
 14725                           postinc0	equ	0xFEE
 14726                           wreg	equ	0xFE8
 14727                           indf2	equ	0xFDF
 14728                           postinc2	equ	0xFDE
 14729                           postdec2	equ	0xFDD
 14730                           plusw2	equ	0xFDB
 14731                           fsr2h	equ	0xFDA
 14732                           fsr2l	equ	0xFD9
 14733                           status	equ	0xFD8
 14734                           
 14735 ;; *************** function _WriteIO5R *****************
 14736 ;; Defined at:
 14737 ;;		line 33 in file "ior5e.c"
 14738 ;; Parameters:    Size  Location     Type
 14739 ;;  data            4   24[COMRAM] unsigned long 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  temp            4   28[COMRAM] unsigned long 
 14742 ;;  bits            1   32[COMRAM] unsigned char 
 14743 ;; Return value:  Size  Location     Type
 14744 ;;                  1    wreg      void 
 14745 ;; Registers used:
 14746 ;;		wreg, status,2, status,0
 14747 ;; Tracked objects:
 14748 ;;		On entry : 0/0
 14749 ;;		On exit  : 0/0
 14750 ;;		Unchanged: 0/0
 14751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14752 ;;      Params:         4       0       0       0       0       0       0
 14753 ;;      Locals:         5       0       0       0       0       0       0
 14754 ;;      Temps:          0       0       0       0       0       0       0
 14755 ;;      Totals:         9       0       0       0       0       0       0
 14756 ;;Total ram usage:        9 bytes
 14757 ;; Hardware stack levels used:    1
 14758 ;; Hardware stack levels required when called:    1
 14759 ;; This function calls:
 14760 ;;		Nothing
 14761 ;; This function is called by:
 14762 ;;		_OpenIO5R
 14763 ;;		_main
 14764 ;; This function uses a non-reentrant model
 14765 ;;
 14766                           
 14767                           	psect	text82
 14768  00609E                     __ptext82:
 14769                           	opt stack 0
 14770  00609E                     _WriteIO5R:
 14771                           	opt stack 0
 14772  00609E  FFFF               	dw	65535	; assembler added errata NOP
 14773                           
 14774                           ;ior5e.c: 35: char bits=0;
 14775                           
 14776                           ;incstack = 0
 14777  0060A0  0E00               	movlw	0
 14778  0060A2  6E21               	movwf	WriteIO5R@bits,c
 14779                           
 14780                           ;ior5e.c: 36: unsigned long int temp;
 14781                           ;ior5e.c: 38: temp=data;
 14782  0060A4  C019  F01D         	movff	WriteIO5R@data,WriteIO5R@temp
 14783  0060A8  C01A  F01E         	movff	WriteIO5R@data+1,WriteIO5R@temp+1
 14784  0060AC  C01B  F01F         	movff	WriteIO5R@data+2,WriteIO5R@temp+2
 14785  0060B0  C01C  F020         	movff	WriteIO5R@data+3,WriteIO5R@temp+3
 14786                           
 14787                           ;ior5e.c: 40: for(bits=0;bits<24;bits++)
 14788  0060B4  0E00               	movlw	0
 14789  0060B6  6E21               	movwf	WriteIO5R@bits,c
 14790  0060B8                     l10930:
 14791  0060B8  FFFF               	dw	65535	; assembler added errata NOP
 14792  0060BA  0E17               	movlw	23
 14793  0060BC  6421               	cpfsgt	WriteIO5R@bits,c
 14794  0060BE  D001               	goto	l708
 14795  0060C0  D028               	goto	u11120
 14796  0060C2                     l708:
 14797  0060C2  FFFF               	dw	65535	; assembler added errata NOP
 14798                           
 14799                           ;ior5e.c: 41: {
 14800                           ;ior5e.c: 42: temp=data & 0x80000000;
 14801  0060C4  0E00               	movlw	0
 14802  0060C6  1419               	andwf	WriteIO5R@data,w,c
 14803  0060C8  6E1D               	movwf	WriteIO5R@temp,c
 14804  0060CA  0E00               	movlw	0
 14805  0060CC  141A               	andwf	WriteIO5R@data+1,w,c
 14806  0060CE  6E1E               	movwf	WriteIO5R@temp+1,c
 14807  0060D0  0E00               	movlw	0
 14808  0060D2  141B               	andwf	WriteIO5R@data+2,w,c
 14809  0060D4  6E1F               	movwf	WriteIO5R@temp+2,c
 14810  0060D6  0E80               	movlw	128
 14811  0060D8  141C               	andwf	WriteIO5R@data+3,w,c
 14812  0060DA  6E20               	movwf	WriteIO5R@temp+3,c
 14813                           
 14814                           ;ior5e.c: 44: if(temp==0)
 14815  0060DC  501D               	movf	WriteIO5R@temp,w,c
 14816  0060DE  101E               	iorwf	WriteIO5R@temp+1,w,c
 14817  0060E0  101F               	iorwf	WriteIO5R@temp+2,w,c
 14818  0060E2  1020               	iorwf	WriteIO5R@temp+3,w,c
 14819  0060E4  A4D8               	btfss	status,2,c
 14820  0060E6  D002               	goto	l710
 14821                           
 14822                           ;ior5e.c: 45: LATCbits.LC0=0;
 14823  0060E8  908B               	bcf	3979,0,c	;volatile
 14824  0060EA  D002               	goto	l711
 14825  0060EC                     l710:
 14826  0060EC  FFFF               	dw	65535	; assembler added errata NOP
 14827                           
 14828                           ;ior5e.c: 46: else
 14829                           ;ior5e.c: 47: LATCbits.LC0=1;
 14830  0060EE  808B               	bsf	3979,0,c	;volatile
 14831  0060F0                     l711:
 14832  0060F0  FFFF               	dw	65535	; assembler added errata NOP
 14833                           
 14834                           ;ior5e.c: 51: LATCbits.LC1=0;
 14835  0060F2  928B               	bcf	3979,1,c	;volatile
 14836                           
 14837                           ;ior5e.c: 52: _delay((unsigned long)((2)*(10000000/4000000.0)));
 14838  0060F4  D000               	nop2		;2 cycle nop
 14839  0060F6  D000               	nop2		;2 cycle nop
 14840  0060F8  F000               	nop	
 14841                           
 14842                           ;ior5e.c: 53: LATCbits.LC1=1;
 14843  0060FA  828B               	bsf	3979,1,c	;volatile
 14844                           
 14845                           ;ior5e.c: 55: data=data<<1;
 14846  0060FC  90D8               	bcf	status,0,c
 14847  0060FE  3419               	rlcf	WriteIO5R@data,w,c
 14848  006100  6E19               	movwf	WriteIO5R@data,c
 14849  006102  341A               	rlcf	WriteIO5R@data+1,w,c
 14850  006104  6E1A               	movwf	WriteIO5R@data+1,c
 14851  006106  341B               	rlcf	WriteIO5R@data+2,w,c
 14852  006108  6E1B               	movwf	WriteIO5R@data+2,c
 14853  00610A  341C               	rlcf	WriteIO5R@data+3,w,c
 14854  00610C  6E1C               	movwf	WriteIO5R@data+3,c
 14855  00610E  2A21               	incf	WriteIO5R@bits,f,c
 14856  006110  D7D3               	goto	l10930
 14857  006112                     u11120:
 14858  006112  FFFF               	dw	65535	; assembler added errata NOP
 14859                           
 14860                           ;ior5e.c: 56: }
 14861                           ;ior5e.c: 59: LATCbits.LC2=0;
 14862  006114  948B               	bcf	3979,2,c	;volatile
 14863                           
 14864                           ;ior5e.c: 60: _delay((unsigned long)((2)*(10000000/4000000.0)));
 14865  006116  D000               	nop2		;2 cycle nop
 14866  006118  D000               	nop2		;2 cycle nop
 14867  00611A  F000               	nop	
 14868                           
 14869                           ;ior5e.c: 61: LATCbits.LC2=1;
 14870  00611C  848B               	bsf	3979,2,c	;volatile
 14871  00611E  0012               	return		;funcret
 14872  006120  FFFF               	dw	65535	; errata NOP
 14873  006122                     __end_of_WriteIO5R:
 14874                           	opt stack 0
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodl	equ	0xFF3
 14880                           intcon	equ	0xFF2
 14881                           postinc0	equ	0xFEE
 14882                           wreg	equ	0xFE8
 14883                           indf2	equ	0xFDF
 14884                           postinc2	equ	0xFDE
 14885                           postdec2	equ	0xFDD
 14886                           plusw2	equ	0xFDB
 14887                           fsr2h	equ	0xFDA
 14888                           fsr2l	equ	0xFD9
 14889                           status	equ	0xFD8
 14890                           
 14891 ;; *************** function _OpenADC *****************
 14892 ;; Defined at:
 14893 ;;		line 83 in file "ior5e.c"
 14894 ;; Parameters:    Size  Location     Type
 14895 ;;		None
 14896 ;; Auto vars:     Size  Location     Type
 14897 ;;		None
 14898 ;; Return value:  Size  Location     Type
 14899 ;;                  1    wreg      void 
 14900 ;; Registers used:
 14901 ;;		wreg, status,2
 14902 ;; Tracked objects:
 14903 ;;		On entry : 0/0
 14904 ;;		On exit  : 0/0
 14905 ;;		Unchanged: 0/0
 14906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14907 ;;      Params:         0       0       0       0       0       0       0
 14908 ;;      Locals:         0       0       0       0       0       0       0
 14909 ;;      Temps:          0       0       0       0       0       0       0
 14910 ;;      Totals:         0       0       0       0       0       0       0
 14911 ;;Total ram usage:        0 bytes
 14912 ;; Hardware stack levels used:    1
 14913 ;; Hardware stack levels required when called:    1
 14914 ;; This function calls:
 14915 ;;		Nothing
 14916 ;; This function is called by:
 14917 ;;		_main
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text83
 14922  004D2E                     __ptext83:
 14923                           	opt stack 0
 14924  004D2E                     _OpenADC:
 14925                           	opt stack 0
 14926  004D2E  FFFF               	dw	65535	; assembler added errata NOP
 14927                           
 14928                           ;ior5e.c: 85: ADCON0=0x81;
 14929                           
 14930                           ;incstack = 0
 14931  004D30  0E81               	movlw	129
 14932  004D32  6EC2               	movwf	4034,c	;volatile
 14933                           
 14934                           ;ior5e.c: 86: ADCON1=0xc2;
 14935  004D34  0EC2               	movlw	194
 14936  004D36  6EC1               	movwf	4033,c	;volatile
 14937  004D38  0012               	return		;funcret
 14938  004D3A  FFFF               	dw	65535	; errata NOP
 14939  004D3C                     __end_of_OpenADC:
 14940                           	opt stack 0
 14941                           tblptru	equ	0xFF8
 14942                           tblptrh	equ	0xFF7
 14943                           tblptrl	equ	0xFF6
 14944                           tablat	equ	0xFF5
 14945                           prodl	equ	0xFF3
 14946                           intcon	equ	0xFF2
 14947                           postinc0	equ	0xFEE
 14948                           wreg	equ	0xFE8
 14949                           indf2	equ	0xFDF
 14950                           postinc2	equ	0xFDE
 14951                           postdec2	equ	0xFDD
 14952                           plusw2	equ	0xFDB
 14953                           fsr2h	equ	0xFDA
 14954                           fsr2l	equ	0xFD9
 14955                           status	equ	0xFD8
 14956                           
 14957 ;; *************** function _Manual_Control *****************
 14958 ;; Defined at:
 14959 ;;		line 254 in file "main.c"
 14960 ;; Parameters:    Size  Location     Type
 14961 ;;		None
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;		None
 14964 ;; Return value:  Size  Location     Type
 14965 ;;                  1    wreg      void 
 14966 ;; Registers used:
 14967 ;;		wreg, status,2, cstack
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14973 ;;      Params:         0       0       0       0       0       0       0
 14974 ;;      Locals:         0       0       0       0       0       0       0
 14975 ;;      Temps:          0       0       0       0       0       0       0
 14976 ;;      Totals:         0       0       0       0       0       0       0
 14977 ;;Total ram usage:        0 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    2
 14980 ;; This function calls:
 14981 ;;		_reset_PID
 14982 ;; This function is called by:
 14983 ;;		_main
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           	psect	text84
 14988  00509E                     __ptext84:
 14989                           	opt stack 0
 14990  00509E                     _Manual_Control:
 14991                           	opt stack 0
 14992  00509E  FFFF               	dw	65535	; assembler added errata NOP
 14993                           
 14994                           ;main.c: 256: Outputs.led14 = 0;
 14995                           
 14996                           ;incstack = 0
 14997  0050A0  0100               	movlb	0	; () banked
 14998  0050A2  9BEF               	bcf	(_Outputs+2)& (0+255),5,b
 14999                           
 15000                           ;main.c: 257: Outputs.led13 = 0;
 15001  0050A4  0100               	movlb	0	; () banked
 15002  0050A6  99EF               	bcf	(_Outputs+2)& (0+255),4,b
 15003                           
 15004                           ;main.c: 258: Outputs.rly1 = 0;
 15005  0050A8  0100               	movlb	0	; () banked
 15006  0050AA  91EE               	bcf	(_Outputs+1)& (0+255),0,b
 15007                           
 15008                           ;main.c: 259: Outputs.rly2 = 0;
 15009  0050AC  0100               	movlb	0	; () banked
 15010  0050AE  93EE               	bcf	(_Outputs+1)& (0+255),1,b
 15011                           
 15012                           ; BSR set to: 0
 15013                           ;main.c: 260: reset_PID();
 15014  0050B0  EC62  F02A         	call	_reset_PID	;wreg free
 15015                           
 15016                           ;main.c: 261: return;
 15017  0050B4  0012               	return		;funcret
 15018  0050B6  FFFF               	dw	65535	; errata NOP
 15019  0050B8                     __end_of_Manual_Control:
 15020                           	opt stack 0
 15021                           tblptru	equ	0xFF8
 15022                           tblptrh	equ	0xFF7
 15023                           tblptrl	equ	0xFF6
 15024                           tablat	equ	0xFF5
 15025                           prodl	equ	0xFF3
 15026                           intcon	equ	0xFF2
 15027                           postinc0	equ	0xFEE
 15028                           wreg	equ	0xFE8
 15029                           indf2	equ	0xFDF
 15030                           postinc2	equ	0xFDE
 15031                           postdec2	equ	0xFDD
 15032                           plusw2	equ	0xFDB
 15033                           fsr2h	equ	0xFDA
 15034                           fsr2l	equ	0xFD9
 15035                           status	equ	0xFD8
 15036                           
 15037 ;; *************** function _reset_PID *****************
 15038 ;; Defined at:
 15039 ;;		line 74 in file "PID_Controller.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;		None
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  1    wreg      void 
 15046 ;; Registers used:
 15047 ;;		wreg, status,2
 15048 ;; Tracked objects:
 15049 ;;		On entry : 0/0
 15050 ;;		On exit  : 0/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15053 ;;      Params:         0       0       0       0       0       0       0
 15054 ;;      Locals:         0       0       0       0       0       0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0
 15056 ;;      Totals:         0       0       0       0       0       0       0
 15057 ;;Total ram usage:        0 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; Hardware stack levels required when called:    1
 15060 ;; This function calls:
 15061 ;;		Nothing
 15062 ;; This function is called by:
 15063 ;;		_Manual_Control
 15064 ;; This function uses a non-reentrant model
 15065 ;;
 15066                           
 15067                           	psect	text85
 15068  0054C4                     __ptext85:
 15069                           	opt stack 0
 15070  0054C4                     _reset_PID:
 15071                           	opt stack 0
 15072  0054C4  FFFF               	dw	65535	; assembler added errata NOP
 15073                           
 15074                           ;PID_Controller.c: 75: last_output=0.0;
 15075                           
 15076                           ;incstack = 0
 15077  0054C6  0E00               	movlw	0
 15078  0054C8  0101               	movlb	1	; () banked
 15079  0054CA  6F10               	movwf	_last_output& (0+255),b
 15080  0054CC  0E00               	movlw	0
 15081  0054CE  0101               	movlb	1	; () banked
 15082  0054D0  6F11               	movwf	(_last_output+1)& (0+255),b
 15083  0054D2  0E00               	movlw	0
 15084  0054D4  0101               	movlb	1	; () banked
 15085  0054D6  6F12               	movwf	(_last_output+2)& (0+255),b
 15086                           
 15087                           ;PID_Controller.c: 76: last_error=0.0;
 15088  0054D8  0E00               	movlw	0
 15089  0054DA  0101               	movlb	1	; () banked
 15090  0054DC  6F0D               	movwf	_last_error& (0+255),b
 15091  0054DE  0E00               	movlw	0
 15092  0054E0  0101               	movlb	1	; () banked
 15093  0054E2  6F0E               	movwf	(_last_error+1)& (0+255),b
 15094  0054E4  0E00               	movlw	0
 15095  0054E6  0101               	movlb	1	; () banked
 15096  0054E8  6F0F               	movwf	(_last_error+2)& (0+255),b
 15097                           
 15098                           ;PID_Controller.c: 77: last_integral=0.0;
 15099  0054EA  0E00               	movlw	0
 15100  0054EC  0101               	movlb	1	; () banked
 15101  0054EE  6F0A               	movwf	_last_integral& (0+255),b
 15102  0054F0  0E00               	movlw	0
 15103  0054F2  0101               	movlb	1	; () banked
 15104  0054F4  6F0B               	movwf	(_last_integral+1)& (0+255),b
 15105  0054F6  0E00               	movlw	0
 15106  0054F8  0101               	movlb	1	; () banked
 15107  0054FA  6F0C               	movwf	(_last_integral+2)& (0+255),b
 15108                           
 15109                           ; BSR set to: 1
 15110  0054FC  0012               	return		;funcret
 15111  0054FE  FFFF               	dw	65535	; errata NOP
 15112  005500                     __end_of_reset_PID:
 15113                           	opt stack 0
 15114                           tblptru	equ	0xFF8
 15115                           tblptrh	equ	0xFF7
 15116                           tblptrl	equ	0xFF6
 15117                           tablat	equ	0xFF5
 15118                           prodl	equ	0xFF3
 15119                           intcon	equ	0xFF2
 15120                           postinc0	equ	0xFEE
 15121                           wreg	equ	0xFE8
 15122                           indf2	equ	0xFDF
 15123                           postinc2	equ	0xFDE
 15124                           postdec2	equ	0xFDD
 15125                           plusw2	equ	0xFDB
 15126                           fsr2h	equ	0xFDA
 15127                           fsr2l	equ	0xFD9
 15128                           status	equ	0xFD8
 15129                           
 15130 ;; *************** function _LCD_Clear *****************
 15131 ;; Defined at:
 15132 ;;		line 50 in file "LCD2S.c"
 15133 ;; Parameters:    Size  Location     Type
 15134 ;;		None
 15135 ;; Auto vars:     Size  Location     Type
 15136 ;;		None
 15137 ;; Return value:  Size  Location     Type
 15138 ;;                  1    wreg      void 
 15139 ;; Registers used:
 15140 ;;		wreg, status,2, status,0, cstack
 15141 ;; Tracked objects:
 15142 ;;		On entry : 0/0
 15143 ;;		On exit  : 0/0
 15144 ;;		Unchanged: 0/0
 15145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15146 ;;      Params:         0       0       0       0       0       0       0
 15147 ;;      Locals:         0       0       0       0       0       0       0
 15148 ;;      Temps:          0       0       0       0       0       0       0
 15149 ;;      Totals:         0       0       0       0       0       0       0
 15150 ;;Total ram usage:        0 bytes
 15151 ;; Hardware stack levels used:    1
 15152 ;; Hardware stack levels required when called:    3
 15153 ;; This function calls:
 15154 ;;		_I2C_Send
 15155 ;; This function is called by:
 15156 ;;		_main
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           	psect	text86
 15161  003FF4                     __ptext86:
 15162                           	opt stack 0
 15163  003FF4                     _LCD_Clear:
 15164                           	opt stack 0
 15165  003FF4  FFFF               	dw	65535	; assembler added errata NOP
 15166                           
 15167                           ;LCD2S.c: 52: I2C_Send(0x8c);
 15168                           
 15169                           ; BSR set to: 1
 15170                           ;incstack = 0
 15171  003FF6  0E8C               	movlw	140
 15172  003FF8  EC2C  F02A         	call	_I2C_Send
 15173  003FFC  0012               	return		;funcret
 15174  003FFE  FFFF               	dw	65535	; errata NOP
 15175  004000                     __end_of_LCD_Clear:
 15176                           	opt stack 0
 15177                           tblptru	equ	0xFF8
 15178                           tblptrh	equ	0xFF7
 15179                           tblptrl	equ	0xFF6
 15180                           tablat	equ	0xFF5
 15181                           prodl	equ	0xFF3
 15182                           intcon	equ	0xFF2
 15183                           postinc0	equ	0xFEE
 15184                           wreg	equ	0xFE8
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           postdec2	equ	0xFDD
 15188                           plusw2	equ	0xFDB
 15189                           fsr2h	equ	0xFDA
 15190                           fsr2l	equ	0xFD9
 15191                           status	equ	0xFD8
 15192                           
 15193 ;; *************** function _I2C_Send *****************
 15194 ;; Defined at:
 15195 ;;		line 12 in file "LCD2S.c"
 15196 ;; Parameters:    Size  Location     Type
 15197 ;;  command         1    wreg     unsigned char 
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;  command         1   26[COMRAM] unsigned char 
 15200 ;; Return value:  Size  Location     Type
 15201 ;;                  1    wreg      void 
 15202 ;; Registers used:
 15203 ;;		wreg, status,2, status,0, cstack
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15209 ;;      Params:         0       0       0       0       0       0       0
 15210 ;;      Locals:         1       0       0       0       0       0       0
 15211 ;;      Temps:          0       0       0       0       0       0       0
 15212 ;;      Totals:         1       0       0       0       0       0       0
 15213 ;;Total ram usage:        1 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; Hardware stack levels required when called:    2
 15216 ;; This function calls:
 15217 ;;		_CloseI2C
 15218 ;;		_IdleI2C
 15219 ;;		_OpenI2C
 15220 ;;		_StartI2C
 15221 ;;		_StopI2C
 15222 ;;		_Wait_AckI2C
 15223 ;;		_WriteI2C
 15224 ;; This function is called by:
 15225 ;;		_LCD_Clear
 15226 ;;		_LCD_Shift_Right
 15227 ;;		_LCD_SetBackLight_On
 15228 ;;		_LCD_SetBackLight_Off
 15229 ;;		_LCD_MoveCursor_Forward
 15230 ;;		_LCD_MoveCursor_Backward
 15231 ;;		_LCD_BlinkBlockCursor_On
 15232 ;;		_LCD_BlinkBlockCursor_Off
 15233 ;;		_LCD_UnderLineCursor_On
 15234 ;;		_LCD_UnderLineCursor_Off
 15235 ;;		_LCD_Display_On
 15236 ;;		_LCD_Display_Off
 15237 ;;		_LCD_MoveCursor_Right
 15238 ;;		_LCD_MoveCursor_Left
 15239 ;;		_LCD_Shift_Left
 15240 ;;		_LCD_Shift_Up
 15241 ;;		_LCD_Shift_Down
 15242 ;; This function uses a non-reentrant model
 15243 ;;
 15244                           
 15245                           	psect	text87
 15246  005458                     __ptext87:
 15247                           	opt stack 0
 15248  005458                     _I2C_Send:
 15249                           	opt stack 0
 15250  005458  FFFF               	dw	65535	; assembler added errata NOP
 15251                           
 15252                           ;incstack = 0
 15253                           ;I2C_Send@command stored from wreg
 15254  00545A  6E1B               	movwf	I2C_Send@command,c
 15255                           
 15256                           ;LCD2S.c: 13: OpenI2C(8, 0xC0);
 15257  00545C  0EC0               	movlw	192
 15258  00545E  6E19               	movwf	OpenI2C@slew,c
 15259  005460  0E08               	movlw	8
 15260  005462  ECCB  F028         	call	_OpenI2C
 15261                           
 15262                           ;LCD2S.c: 14: IdleI2C();
 15263  005466  ECDC  F028         	call	_IdleI2C	;wreg free
 15264                           
 15265                           ;LCD2S.c: 15: StartI2C();
 15266  00546A  EC35  F028         	call	_StartI2C	;wreg free
 15267                           
 15268                           ;LCD2S.c: 16: WriteI2C(0x50);
 15269  00546E  0E50               	movlw	80
 15270  005470  EC9E  F029         	call	_WriteI2C
 15271                           
 15272                           ;LCD2S.c: 17: Wait_AckI2C();
 15273  005474  EC21  F028         	call	_Wait_AckI2C	;wreg free
 15274                           
 15275                           ;LCD2S.c: 18: WriteI2C(command);
 15276  005478  501B               	movf	I2C_Send@command,w,c
 15277  00547A  EC9E  F029         	call	_WriteI2C
 15278                           
 15279                           ;LCD2S.c: 19: Wait_AckI2C();
 15280  00547E  EC21  F028         	call	_Wait_AckI2C	;wreg free
 15281                           
 15282                           ;LCD2S.c: 20: StopI2C();
 15283  005482  EC42  F028         	call	_StopI2C	;wreg free
 15284                           
 15285                           ;LCD2S.c: 21: CloseI2C();
 15286  005486  EC93  F026         	call	_CloseI2C	;wreg free
 15287  00548A  0012               	return		;funcret
 15288  00548C  FFFF               	dw	65535	; errata NOP
 15289  00548E                     __end_of_I2C_Send:
 15290                           	opt stack 0
 15291                           tblptru	equ	0xFF8
 15292                           tblptrh	equ	0xFF7
 15293                           tblptrl	equ	0xFF6
 15294                           tablat	equ	0xFF5
 15295                           prodl	equ	0xFF3
 15296                           intcon	equ	0xFF2
 15297                           postinc0	equ	0xFEE
 15298                           wreg	equ	0xFE8
 15299                           indf2	equ	0xFDF
 15300                           postinc2	equ	0xFDE
 15301                           postdec2	equ	0xFDD
 15302                           plusw2	equ	0xFDB
 15303                           fsr2h	equ	0xFDA
 15304                           fsr2l	equ	0xFD9
 15305                           status	equ	0xFD8
 15306                           
 15307 ;; *************** function _Get_Voltage_Data *****************
 15308 ;; Defined at:
 15309 ;;		line 185 in file "Get_Voltages.c"
 15310 ;; Parameters:    Size  Location     Type
 15311 ;;		None
 15312 ;; Auto vars:     Size  Location     Type
 15313 ;;  v1              2   49[BANK0 ] unsigned int 
 15314 ;;  check           1   48[BANK0 ] unsigned char 
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      unsigned char 
 15317 ;; Registers used:
 15318 ;;		wreg, status,2, status,0, cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15324 ;;      Params:         0       0       0       0       0       0       0
 15325 ;;      Locals:         0       3       0       0       0       0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0
 15327 ;;      Totals:         0       3       0       0       0       0       0
 15328 ;;Total ram usage:        3 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:    4
 15331 ;; This function calls:
 15332 ;;		_Check_VL_N
 15333 ;;		_Get_Analog_Channel
 15334 ;;		_LowPass_VL1
 15335 ;;		_LowPass_VL2
 15336 ;;		_LowPass_VL3
 15337 ;;		_LowPass_Vin
 15338 ;;		___ftadd
 15339 ;;		___ftdiv
 15340 ;;		___ftge
 15341 ;;		___ftmul
 15342 ;;		___ftneg
 15343 ;;		___lwtoft
 15344 ;; This function is called by:
 15345 ;;		_main
 15346 ;; This function uses a non-reentrant model
 15347 ;;
 15348                           
 15349                           	psect	text88
 15350  0016EE                     __ptext88:
 15351                           	opt stack 0
 15352  0016EE                     _Get_Voltage_Data:
 15353                           	opt stack 0
 15354  0016EE  FFFF               	dw	65535	; assembler added errata NOP
 15355                           
 15356                           ;Get_Voltages.c: 188: unsigned int v1;
 15357                           ;Get_Voltages.c: 189: char check;
 15358                           ;Get_Voltages.c: 192: status.data=0;
 15359                           
 15360                           ;incstack = 0
 15361  0016F0  0E00               	movlw	0
 15362  0016F2  6E45               	movwf	_status,c
 15363                           
 15364                           ;Get_Voltages.c: 193: v1 = Get_Analog_Channel(0);
 15365  0016F4  0E00               	movlw	0
 15366  0016F6  ECBC  F02A         	call	_Get_Analog_Channel
 15367  0016FA  C019  F091         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15368  0016FE  C01A  F092         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15369                           
 15370                           ;Get_Voltages.c: 194: VL1 = (float) v1 / 1024.0 * 150.0;
 15371  001702  0E00               	movlw	0
 15372  001704  0100               	movlb	0	; () banked
 15373  001706  6F6C               	movwf	___ftdiv@f2& (0+255),b
 15374  001708  0E80               	movlw	128
 15375  00170A  0100               	movlb	0	; () banked
 15376  00170C  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 15377  00170E  0E44               	movlw	68
 15378  001710  0100               	movlb	0	; () banked
 15379  001712  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 15380  001714  C091  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15381  001718  C092  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15382  00171C  EC4B  F029         	call	___lwtoft	;wreg free
 15383  001720  C021  F069         	movff	?___lwtoft,___ftdiv@f1
 15384  001724  C022  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 15385  001728  C023  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 15386  00172C  ECB0  F03B         	call	___ftdiv	;wreg free
 15387  001730  C069  F078         	movff	?___ftdiv,___ftmul@f1
 15388  001734  C06A  F079         	movff	?___ftdiv+1,___ftmul@f1+1
 15389  001738  C06B  F07A         	movff	?___ftdiv+2,___ftmul@f1+2
 15390  00173C  0E00               	movlw	0
 15391  00173E  0100               	movlb	0	; () banked
 15392  001740  6F7B               	movwf	___ftmul@f2& (0+255),b
 15393  001742  0E16               	movlw	22
 15394  001744  0100               	movlb	0	; () banked
 15395  001746  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 15396  001748  0E43               	movlw	67
 15397  00174A  0100               	movlb	0	; () banked
 15398  00174C  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 15399  00174E  EC53  F03C         	call	___ftmul	;wreg free
 15400  001752  C078  F03C         	movff	?___ftmul,_VL1
 15401  001756  C079  F03D         	movff	?___ftmul+1,_VL1+1
 15402  00175A  C07A  F03E         	movff	?___ftmul+2,_VL1+2
 15403                           
 15404                           ;Get_Voltages.c: 195: VL1=(VL1-VL1_zero)*VL1_span;
 15405  00175E  C03C  F063         	movff	_VL1,___ftadd@f2
 15406  001762  C03D  F064         	movff	_VL1+1,___ftadd@f2+1
 15407  001766  C03E  F065         	movff	_VL1+2,___ftadd@f2+2
 15408  00176A  C143  F01C         	movff	_VL1_zero,___ftneg@f1
 15409  00176E  C144  F01D         	movff	_VL1_zero+1,___ftneg@f1+1
 15410  001772  C145  F01E         	movff	_VL1_zero+2,___ftneg@f1+2
 15411  001776  EC5F  F029         	call	___ftneg	;wreg free
 15412  00177A  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15413  00177E  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15414  001782  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15415  001786  ECD0  F019         	call	___ftadd	;wreg free
 15416  00178A  C060  F078         	movff	?___ftadd,___ftmul@f1
 15417  00178E  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 15418  001792  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 15419  001796  C137  F07B         	movff	_VL1_span,___ftmul@f2
 15420  00179A  C138  F07C         	movff	_VL1_span+1,___ftmul@f2+1
 15421  00179E  C139  F07D         	movff	_VL1_span+2,___ftmul@f2+2
 15422  0017A2  EC53  F03C         	call	___ftmul	;wreg free
 15423  0017A6  C078  F03C         	movff	?___ftmul,_VL1
 15424  0017AA  C079  F03D         	movff	?___ftmul+1,_VL1+1
 15425  0017AE  C07A  F03E         	movff	?___ftmul+2,_VL1+2
 15426                           
 15427                           ;Get_Voltages.c: 196: VL1 = LowPass_VL1(VL1);
 15428  0017B2  C03C  F087         	movff	_VL1,LowPass_VL1@val
 15429  0017B6  C03D  F088         	movff	_VL1+1,LowPass_VL1@val+1
 15430  0017BA  C03E  F089         	movff	_VL1+2,LowPass_VL1@val+2
 15431  0017BE  EC95  F032         	call	_LowPass_VL1	;wreg free
 15432  0017C2  C087  F03C         	movff	?_LowPass_VL1,_VL1
 15433  0017C6  C088  F03D         	movff	?_LowPass_VL1+1,_VL1+1
 15434  0017CA  C089  F03E         	movff	?_LowPass_VL1+2,_VL1+2
 15435                           
 15436                           ;Get_Voltages.c: 197: check=Check_VL_N(VL1);
 15437  0017CE  C03C  F028         	movff	_VL1,Check_VL_N@val
 15438  0017D2  C03D  F029         	movff	_VL1+1,Check_VL_N@val+1
 15439  0017D6  C03E  F02A         	movff	_VL1+2,Check_VL_N@val+2
 15440  0017DA  ECB6  F02C         	call	_Check_VL_N	;wreg free
 15441  0017DE  0100               	movlb	0	; () banked
 15442  0017E0  6F90               	movwf	Get_Voltage_Data@check& (0+255),b
 15443                           
 15444                           ;Get_Voltages.c: 199: switch(check){
 15445  0017E2  D00C               	goto	l480
 15446  0017E4                     l481:
 15447  0017E4  FFFF               	dw	65535	; assembler added errata NOP
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;Get_Voltages.c: 202: status.VL1_Low=1;
 15451  0017E6  8045               	bsf	_status,0,c
 15452                           
 15453                           ;Get_Voltages.c: 203: status.VL1_High=0;
 15454  0017E8  9245               	bcf	_status,1,c
 15455                           
 15456                           ;Get_Voltages.c: 204: break;
 15457  0017EA  D014               	goto	l482
 15458  0017EC                     l483:
 15459  0017EC  FFFF               	dw	65535	; assembler added errata NOP
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;Get_Voltages.c: 207: status.VL1_High=1;
 15463  0017EE  8245               	bsf	_status,1,c
 15464  0017F0  D002               	goto	L16
 15465  0017F2                     l484:
 15466  0017F2  FFFF               	dw	65535	; assembler added errata NOP
 15467                           
 15468                           ; BSR set to: 0
 15469                           ;Get_Voltages.c: 212: status.VL1_High=0;
 15470  0017F4  9245               	bcf	_status,1,c
 15471  0017F6                     L16:
 15472  0017F6  FFFF               	dw	65535	; assembler added errata NOP
 15473                           
 15474                           ;Get_Voltages.c: 213: status.VL1_Low=0;
 15475  0017F8  9045               	bcf	_status,0,c
 15476                           
 15477                           ;Get_Voltages.c: 214: }
 15478  0017FA  D00C               	goto	l482
 15479  0017FC                     l480:
 15480  0017FC  FFFF               	dw	65535	; assembler added errata NOP
 15481                           
 15482                           ; BSR set to: 0
 15483                           
 15484                           ; BSR set to: 0
 15485  0017FE  0100               	movlb	0	; () banked
 15486  001800  5190               	movf	Get_Voltage_Data@check& (0+255),w,b
 15487                           
 15488                           ; Switch size 1, requested type "space"
 15489                           ; Number of cases is 3, Range of values is 0 to 2
 15490                           ; switch strategies available:
 15491                           ; Name         Instructions Cycles
 15492                           ; simple_byte           10     6 (average)
 15493                           ;	Chosen strategy is simple_byte
 15494  001802  0A00               	xorlw	0	; case 0
 15495  001804  B4D8               	btfsc	status,2,c
 15496  001806  D7F5               	goto	l484
 15497  001808  0A01               	xorlw	1	; case 1
 15498  00180A  B4D8               	btfsc	status,2,c
 15499  00180C  D7EF               	goto	l483
 15500  00180E  0A03               	xorlw	3	; case 2
 15501  001810  B4D8               	btfsc	status,2,c
 15502  001812  D7E8               	goto	l481
 15503  001814                     l482:
 15504  001814  FFFF               	dw	65535	; assembler added errata NOP
 15505                           
 15506                           ; BSR set to: 0
 15507                           ;Get_Voltages.c: 216: v1 = Get_Analog_Channel(1);
 15508                           
 15509                           ; BSR set to: 0
 15510  001816  0E01               	movlw	1
 15511  001818  ECBC  F02A         	call	_Get_Analog_Channel
 15512  00181C  C019  F091         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15513  001820  C01A  F092         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15514                           
 15515                           ;Get_Voltages.c: 217: VL2 = (float) v1 / 1024.0 * 150.0;
 15516  001824  0E00               	movlw	0
 15517  001826  0100               	movlb	0	; () banked
 15518  001828  6F6C               	movwf	___ftdiv@f2& (0+255),b
 15519  00182A  0E80               	movlw	128
 15520  00182C  0100               	movlb	0	; () banked
 15521  00182E  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 15522  001830  0E44               	movlw	68
 15523  001832  0100               	movlb	0	; () banked
 15524  001834  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 15525  001836  C091  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15526  00183A  C092  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15527  00183E  EC4B  F029         	call	___lwtoft	;wreg free
 15528  001842  C021  F069         	movff	?___lwtoft,___ftdiv@f1
 15529  001846  C022  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 15530  00184A  C023  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 15531  00184E  ECB0  F03B         	call	___ftdiv	;wreg free
 15532  001852  C069  F078         	movff	?___ftdiv,___ftmul@f1
 15533  001856  C06A  F079         	movff	?___ftdiv+1,___ftmul@f1+1
 15534  00185A  C06B  F07A         	movff	?___ftdiv+2,___ftmul@f1+2
 15535  00185E  0E00               	movlw	0
 15536  001860  0100               	movlb	0	; () banked
 15537  001862  6F7B               	movwf	___ftmul@f2& (0+255),b
 15538  001864  0E16               	movlw	22
 15539  001866  0100               	movlb	0	; () banked
 15540  001868  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 15541  00186A  0E43               	movlw	67
 15542  00186C  0100               	movlb	0	; () banked
 15543  00186E  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 15544  001870  EC53  F03C         	call	___ftmul	;wreg free
 15545  001874  C078  F039         	movff	?___ftmul,_VL2
 15546  001878  C079  F03A         	movff	?___ftmul+1,_VL2+1
 15547  00187C  C07A  F03B         	movff	?___ftmul+2,_VL2+2
 15548                           
 15549                           ;Get_Voltages.c: 218: VL2=(VL2-VL2_zero)*VL2_span;
 15550  001880  C039  F063         	movff	_VL2,___ftadd@f2
 15551  001884  C03A  F064         	movff	_VL2+1,___ftadd@f2+1
 15552  001888  C03B  F065         	movff	_VL2+2,___ftadd@f2+2
 15553  00188C  C140  F01C         	movff	_VL2_zero,___ftneg@f1
 15554  001890  C141  F01D         	movff	_VL2_zero+1,___ftneg@f1+1
 15555  001894  C142  F01E         	movff	_VL2_zero+2,___ftneg@f1+2
 15556  001898  EC5F  F029         	call	___ftneg	;wreg free
 15557  00189C  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15558  0018A0  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15559  0018A4  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15560  0018A8  ECD0  F019         	call	___ftadd	;wreg free
 15561  0018AC  C060  F078         	movff	?___ftadd,___ftmul@f1
 15562  0018B0  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 15563  0018B4  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 15564  0018B8  C134  F07B         	movff	_VL2_span,___ftmul@f2
 15565  0018BC  C135  F07C         	movff	_VL2_span+1,___ftmul@f2+1
 15566  0018C0  C136  F07D         	movff	_VL2_span+2,___ftmul@f2+2
 15567  0018C4  EC53  F03C         	call	___ftmul	;wreg free
 15568  0018C8  C078  F039         	movff	?___ftmul,_VL2
 15569  0018CC  C079  F03A         	movff	?___ftmul+1,_VL2+1
 15570  0018D0  C07A  F03B         	movff	?___ftmul+2,_VL2+2
 15571                           
 15572                           ;Get_Voltages.c: 219: VL2 = LowPass_VL2(VL2);
 15573  0018D4  C039  F087         	movff	_VL2,LowPass_VL2@val
 15574  0018D8  C03A  F088         	movff	_VL2+1,LowPass_VL2@val+1
 15575  0018DC  C03B  F089         	movff	_VL2+2,LowPass_VL2@val+2
 15576  0018E0  ECF3  F032         	call	_LowPass_VL2	;wreg free
 15577  0018E4  C087  F039         	movff	?_LowPass_VL2,_VL2
 15578  0018E8  C088  F03A         	movff	?_LowPass_VL2+1,_VL2+1
 15579  0018EC  C089  F03B         	movff	?_LowPass_VL2+2,_VL2+2
 15580                           
 15581                           ;Get_Voltages.c: 220: check=Check_VL_N(VL2);
 15582  0018F0  C039  F028         	movff	_VL2,Check_VL_N@val
 15583  0018F4  C03A  F029         	movff	_VL2+1,Check_VL_N@val+1
 15584  0018F8  C03B  F02A         	movff	_VL2+2,Check_VL_N@val+2
 15585  0018FC  ECB6  F02C         	call	_Check_VL_N	;wreg free
 15586  001900  0100               	movlb	0	; () banked
 15587  001902  6F90               	movwf	Get_Voltage_Data@check& (0+255),b
 15588                           
 15589                           ;Get_Voltages.c: 222: switch(check){
 15590  001904  D00C               	goto	l485
 15591  001906                     l486:
 15592  001906  FFFF               	dw	65535	; assembler added errata NOP
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;Get_Voltages.c: 225: status.VL2_Low=1;
 15596  001908  8445               	bsf	_status,2,c
 15597                           
 15598                           ;Get_Voltages.c: 226: status.VL2_High=0;
 15599  00190A  9645               	bcf	_status,3,c
 15600                           
 15601                           ;Get_Voltages.c: 227: break;
 15602  00190C  D014               	goto	l487
 15603  00190E                     l488:
 15604  00190E  FFFF               	dw	65535	; assembler added errata NOP
 15605                           
 15606                           ; BSR set to: 0
 15607                           ;Get_Voltages.c: 230: status.VL2_High=1;
 15608  001910  8645               	bsf	_status,3,c
 15609  001912  D002               	goto	L17
 15610  001914                     l489:
 15611  001914  FFFF               	dw	65535	; assembler added errata NOP
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;Get_Voltages.c: 235: status.VL2_High=0;
 15615  001916  9645               	bcf	_status,3,c
 15616  001918                     L17:
 15617  001918  FFFF               	dw	65535	; assembler added errata NOP
 15618                           
 15619                           ;Get_Voltages.c: 236: status.VL2_Low=0;
 15620  00191A  9445               	bcf	_status,2,c
 15621                           
 15622                           ;Get_Voltages.c: 237: }
 15623  00191C  D00C               	goto	l487
 15624  00191E                     l485:
 15625  00191E  FFFF               	dw	65535	; assembler added errata NOP
 15626                           
 15627                           ; BSR set to: 0
 15628                           
 15629                           ; BSR set to: 0
 15630  001920  0100               	movlb	0	; () banked
 15631  001922  5190               	movf	Get_Voltage_Data@check& (0+255),w,b
 15632                           
 15633                           ; Switch size 1, requested type "space"
 15634                           ; Number of cases is 3, Range of values is 0 to 2
 15635                           ; switch strategies available:
 15636                           ; Name         Instructions Cycles
 15637                           ; simple_byte           10     6 (average)
 15638                           ;	Chosen strategy is simple_byte
 15639  001924  0A00               	xorlw	0	; case 0
 15640  001926  B4D8               	btfsc	status,2,c
 15641  001928  D7F5               	goto	l489
 15642  00192A  0A01               	xorlw	1	; case 1
 15643  00192C  B4D8               	btfsc	status,2,c
 15644  00192E  D7EF               	goto	l488
 15645  001930  0A03               	xorlw	3	; case 2
 15646  001932  B4D8               	btfsc	status,2,c
 15647  001934  D7E8               	goto	l486
 15648  001936                     l487:
 15649  001936  FFFF               	dw	65535	; assembler added errata NOP
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;Get_Voltages.c: 239: v1 = Get_Analog_Channel(2);
 15653                           
 15654                           ; BSR set to: 0
 15655  001938  0E02               	movlw	2
 15656  00193A  ECBC  F02A         	call	_Get_Analog_Channel
 15657  00193E  C019  F091         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15658  001942  C01A  F092         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15659                           
 15660                           ;Get_Voltages.c: 240: VL3 = (float) v1 / 1024.0 * 150.0;
 15661  001946  0E00               	movlw	0
 15662  001948  0100               	movlb	0	; () banked
 15663  00194A  6F6C               	movwf	___ftdiv@f2& (0+255),b
 15664  00194C  0E80               	movlw	128
 15665  00194E  0100               	movlb	0	; () banked
 15666  001950  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 15667  001952  0E44               	movlw	68
 15668  001954  0100               	movlb	0	; () banked
 15669  001956  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 15670  001958  C091  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15671  00195C  C092  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15672  001960  EC4B  F029         	call	___lwtoft	;wreg free
 15673  001964  C021  F069         	movff	?___lwtoft,___ftdiv@f1
 15674  001968  C022  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 15675  00196C  C023  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 15676  001970  ECB0  F03B         	call	___ftdiv	;wreg free
 15677  001974  C069  F078         	movff	?___ftdiv,___ftmul@f1
 15678  001978  C06A  F079         	movff	?___ftdiv+1,___ftmul@f1+1
 15679  00197C  C06B  F07A         	movff	?___ftdiv+2,___ftmul@f1+2
 15680  001980  0E00               	movlw	0
 15681  001982  0100               	movlb	0	; () banked
 15682  001984  6F7B               	movwf	___ftmul@f2& (0+255),b
 15683  001986  0E16               	movlw	22
 15684  001988  0100               	movlb	0	; () banked
 15685  00198A  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 15686  00198C  0E43               	movlw	67
 15687  00198E  0100               	movlb	0	; () banked
 15688  001990  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 15689  001992  EC53  F03C         	call	___ftmul	;wreg free
 15690  001996  C078  F036         	movff	?___ftmul,_VL3
 15691  00199A  C079  F037         	movff	?___ftmul+1,_VL3+1
 15692  00199E  C07A  F038         	movff	?___ftmul+2,_VL3+2
 15693                           
 15694                           ;Get_Voltages.c: 241: VL3=(VL3-VL3_zero)*VL3_span;
 15695  0019A2  C036  F063         	movff	_VL3,___ftadd@f2
 15696  0019A6  C037  F064         	movff	_VL3+1,___ftadd@f2+1
 15697  0019AA  C038  F065         	movff	_VL3+2,___ftadd@f2+2
 15698  0019AE  C13D  F01C         	movff	_VL3_zero,___ftneg@f1
 15699  0019B2  C13E  F01D         	movff	_VL3_zero+1,___ftneg@f1+1
 15700  0019B6  C13F  F01E         	movff	_VL3_zero+2,___ftneg@f1+2
 15701  0019BA  EC5F  F029         	call	___ftneg	;wreg free
 15702  0019BE  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15703  0019C2  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15704  0019C6  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15705  0019CA  ECD0  F019         	call	___ftadd	;wreg free
 15706  0019CE  C060  F078         	movff	?___ftadd,___ftmul@f1
 15707  0019D2  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 15708  0019D6  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 15709  0019DA  C131  F07B         	movff	_VL3_span,___ftmul@f2
 15710  0019DE  C132  F07C         	movff	_VL3_span+1,___ftmul@f2+1
 15711  0019E2  C133  F07D         	movff	_VL3_span+2,___ftmul@f2+2
 15712  0019E6  EC53  F03C         	call	___ftmul	;wreg free
 15713  0019EA  C078  F036         	movff	?___ftmul,_VL3
 15714  0019EE  C079  F037         	movff	?___ftmul+1,_VL3+1
 15715  0019F2  C07A  F038         	movff	?___ftmul+2,_VL3+2
 15716                           
 15717                           ;Get_Voltages.c: 242: VL3 = LowPass_VL3(VL3);
 15718  0019F6  C036  F087         	movff	_VL3,LowPass_VL3@val
 15719  0019FA  C037  F088         	movff	_VL3+1,LowPass_VL3@val+1
 15720  0019FE  C038  F089         	movff	_VL3+2,LowPass_VL3@val+2
 15721  001A02  EC51  F033         	call	_LowPass_VL3	;wreg free
 15722  001A06  C087  F036         	movff	?_LowPass_VL3,_VL3
 15723  001A0A  C088  F037         	movff	?_LowPass_VL3+1,_VL3+1
 15724  001A0E  C089  F038         	movff	?_LowPass_VL3+2,_VL3+2
 15725                           
 15726                           ;Get_Voltages.c: 243: check=Check_VL_N(VL3);
 15727  001A12  C036  F028         	movff	_VL3,Check_VL_N@val
 15728  001A16  C037  F029         	movff	_VL3+1,Check_VL_N@val+1
 15729  001A1A  C038  F02A         	movff	_VL3+2,Check_VL_N@val+2
 15730  001A1E  ECB6  F02C         	call	_Check_VL_N	;wreg free
 15731  001A22  0100               	movlb	0	; () banked
 15732  001A24  6F90               	movwf	Get_Voltage_Data@check& (0+255),b
 15733                           
 15734                           ;Get_Voltages.c: 245: switch(check){
 15735  001A26  D00C               	goto	l490
 15736  001A28                     l491:
 15737  001A28  FFFF               	dw	65535	; assembler added errata NOP
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;Get_Voltages.c: 248: status.VL3_Low=1;
 15741  001A2A  8845               	bsf	_status,4,c
 15742                           
 15743                           ;Get_Voltages.c: 249: status.VL3_High=0;
 15744  001A2C  9A45               	bcf	_status,5,c
 15745                           
 15746                           ;Get_Voltages.c: 250: break;
 15747  001A2E  D014               	goto	l492
 15748  001A30                     l493:
 15749  001A30  FFFF               	dw	65535	; assembler added errata NOP
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;Get_Voltages.c: 253: status.VL3_High=1;
 15753  001A32  8A45               	bsf	_status,5,c
 15754  001A34  D002               	goto	L18
 15755  001A36                     l494:
 15756  001A36  FFFF               	dw	65535	; assembler added errata NOP
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;Get_Voltages.c: 258: status.VL3_High=0;
 15760  001A38  9A45               	bcf	_status,5,c
 15761  001A3A                     L18:
 15762  001A3A  FFFF               	dw	65535	; assembler added errata NOP
 15763                           
 15764                           ;Get_Voltages.c: 259: status.VL3_Low=0;
 15765  001A3C  9845               	bcf	_status,4,c
 15766                           
 15767                           ;Get_Voltages.c: 260: }
 15768  001A3E  D00C               	goto	l492
 15769  001A40                     l490:
 15770  001A40  FFFF               	dw	65535	; assembler added errata NOP
 15771                           
 15772                           ; BSR set to: 0
 15773                           
 15774                           ; BSR set to: 0
 15775  001A42  0100               	movlb	0	; () banked
 15776  001A44  5190               	movf	Get_Voltage_Data@check& (0+255),w,b
 15777                           
 15778                           ; Switch size 1, requested type "space"
 15779                           ; Number of cases is 3, Range of values is 0 to 2
 15780                           ; switch strategies available:
 15781                           ; Name         Instructions Cycles
 15782                           ; simple_byte           10     6 (average)
 15783                           ;	Chosen strategy is simple_byte
 15784  001A46  0A00               	xorlw	0	; case 0
 15785  001A48  B4D8               	btfsc	status,2,c
 15786  001A4A  D7F5               	goto	l494
 15787  001A4C  0A01               	xorlw	1	; case 1
 15788  001A4E  B4D8               	btfsc	status,2,c
 15789  001A50  D7EF               	goto	l493
 15790  001A52  0A03               	xorlw	3	; case 2
 15791  001A54  B4D8               	btfsc	status,2,c
 15792  001A56  D7E8               	goto	l491
 15793  001A58                     l492:
 15794  001A58  FFFF               	dw	65535	; assembler added errata NOP
 15795                           
 15796                           ; BSR set to: 0
 15797                           ;Get_Voltages.c: 262: v1 = Get_Analog_Channel(3);
 15798                           
 15799                           ; BSR set to: 0
 15800  001A5A  0E03               	movlw	3
 15801  001A5C  ECBC  F02A         	call	_Get_Analog_Channel
 15802  001A60  C019  F091         	movff	?_Get_Analog_Channel,Get_Voltage_Data@v1
 15803  001A64  C01A  F092         	movff	?_Get_Analog_Channel+1,Get_Voltage_Data@v1+1
 15804                           
 15805                           ;Get_Voltages.c: 263: Vin = (float) v1 / 1024.0 * 150.0;
 15806  001A68  0E00               	movlw	0
 15807  001A6A  0100               	movlb	0	; () banked
 15808  001A6C  6F6C               	movwf	___ftdiv@f2& (0+255),b
 15809  001A6E  0E80               	movlw	128
 15810  001A70  0100               	movlb	0	; () banked
 15811  001A72  6F6D               	movwf	(___ftdiv@f2+1)& (0+255),b
 15812  001A74  0E44               	movlw	68
 15813  001A76  0100               	movlb	0	; () banked
 15814  001A78  6F6E               	movwf	(___ftdiv@f2+2)& (0+255),b
 15815  001A7A  C091  F021         	movff	Get_Voltage_Data@v1,___lwtoft@c
 15816  001A7E  C092  F022         	movff	Get_Voltage_Data@v1+1,___lwtoft@c+1
 15817  001A82  EC4B  F029         	call	___lwtoft	;wreg free
 15818  001A86  C021  F069         	movff	?___lwtoft,___ftdiv@f1
 15819  001A8A  C022  F06A         	movff	?___lwtoft+1,___ftdiv@f1+1
 15820  001A8E  C023  F06B         	movff	?___lwtoft+2,___ftdiv@f1+2
 15821  001A92  ECB0  F03B         	call	___ftdiv	;wreg free
 15822  001A96  C069  F078         	movff	?___ftdiv,___ftmul@f1
 15823  001A9A  C06A  F079         	movff	?___ftdiv+1,___ftmul@f1+1
 15824  001A9E  C06B  F07A         	movff	?___ftdiv+2,___ftmul@f1+2
 15825  001AA2  0E00               	movlw	0
 15826  001AA4  0100               	movlb	0	; () banked
 15827  001AA6  6F7B               	movwf	___ftmul@f2& (0+255),b
 15828  001AA8  0E16               	movlw	22
 15829  001AAA  0100               	movlb	0	; () banked
 15830  001AAC  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 15831  001AAE  0E43               	movlw	67
 15832  001AB0  0100               	movlb	0	; () banked
 15833  001AB2  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 15834  001AB4  EC53  F03C         	call	___ftmul	;wreg free
 15835  001AB8  C078  F033         	movff	?___ftmul,_Vin
 15836  001ABC  C079  F034         	movff	?___ftmul+1,_Vin+1
 15837  001AC0  C07A  F035         	movff	?___ftmul+2,_Vin+2
 15838                           
 15839                           ;Get_Voltages.c: 264: Vin=(Vin-Vin_zero)*Vin_Span;
 15840  001AC4  C033  F063         	movff	_Vin,___ftadd@f2
 15841  001AC8  C034  F064         	movff	_Vin+1,___ftadd@f2+1
 15842  001ACC  C035  F065         	movff	_Vin+2,___ftadd@f2+2
 15843  001AD0  C13A  F01C         	movff	_Vin_zero,___ftneg@f1
 15844  001AD4  C13B  F01D         	movff	_Vin_zero+1,___ftneg@f1+1
 15845  001AD8  C13C  F01E         	movff	_Vin_zero+2,___ftneg@f1+2
 15846  001ADC  EC5F  F029         	call	___ftneg	;wreg free
 15847  001AE0  C01C  F060         	movff	?___ftneg,___ftadd@f1
 15848  001AE4  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 15849  001AE8  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 15850  001AEC  ECD0  F019         	call	___ftadd	;wreg free
 15851  001AF0  C060  F078         	movff	?___ftadd,___ftmul@f1
 15852  001AF4  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 15853  001AF8  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 15854  001AFC  C12E  F07B         	movff	_Vin_Span,___ftmul@f2
 15855  001B00  C12F  F07C         	movff	_Vin_Span+1,___ftmul@f2+1
 15856  001B04  C130  F07D         	movff	_Vin_Span+2,___ftmul@f2+2
 15857  001B08  EC53  F03C         	call	___ftmul	;wreg free
 15858  001B0C  C078  F033         	movff	?___ftmul,_Vin
 15859  001B10  C079  F034         	movff	?___ftmul+1,_Vin+1
 15860  001B14  C07A  F035         	movff	?___ftmul+2,_Vin+2
 15861                           
 15862                           ;Get_Voltages.c: 265: Vin = LowPass_Vin(Vin);
 15863  001B18  C033  F087         	movff	_Vin,LowPass_Vin@val
 15864  001B1C  C034  F088         	movff	_Vin+1,LowPass_Vin@val+1
 15865  001B20  C035  F089         	movff	_Vin+2,LowPass_Vin@val+2
 15866  001B24  ECAF  F033         	call	_LowPass_Vin	;wreg free
 15867  001B28  C087  F033         	movff	?_LowPass_Vin,_Vin
 15868  001B2C  C088  F034         	movff	?_LowPass_Vin+1,_Vin+1
 15869  001B30  C089  F035         	movff	?_LowPass_Vin+2,_Vin+2
 15870                           
 15871                           ;Get_Voltages.c: 267: if(Vin<min)
 15872  001B34  C033  F01F         	movff	_Vin,___ftge@ff1
 15873  001B38  C034  F020         	movff	_Vin+1,___ftge@ff1+1
 15874  001B3C  C035  F021         	movff	_Vin+2,___ftge@ff1+2
 15875  001B40  C125  F022         	movff	_min,___ftge@ff2
 15876  001B44  C126  F023         	movff	_min+1,___ftge@ff2+1
 15877  001B48  C127  F024         	movff	_min+2,___ftge@ff2+2
 15878  001B4C  ECF6  F031         	call	___ftge	;wreg free
 15879  001B50  B0D8               	btfsc	status,0,c
 15880  001B52  D006               	goto	l495
 15881                           
 15882                           ;Get_Voltages.c: 268: min=Vin;
 15883  001B54  C033  F125         	movff	_Vin,_min
 15884  001B58  C034  F126         	movff	_Vin+1,_min+1
 15885  001B5C  C035  F127         	movff	_Vin+2,_min+2
 15886  001B60                     l495:
 15887  001B60  FFFF               	dw	65535	; assembler added errata NOP
 15888                           
 15889                           ;Get_Voltages.c: 270: if(Vin>max)
 15890  001B62  C122  F01F         	movff	_max,___ftge@ff1
 15891  001B66  C123  F020         	movff	_max+1,___ftge@ff1+1
 15892  001B6A  C124  F021         	movff	_max+2,___ftge@ff1+2
 15893  001B6E  C033  F022         	movff	_Vin,___ftge@ff2
 15894  001B72  C034  F023         	movff	_Vin+1,___ftge@ff2+1
 15895  001B76  C035  F024         	movff	_Vin+2,___ftge@ff2+2
 15896  001B7A  ECF6  F031         	call	___ftge	;wreg free
 15897  001B7E  B0D8               	btfsc	status,0,c
 15898  001B80  D006               	goto	l496
 15899                           
 15900                           ;Get_Voltages.c: 271: max=Vin;
 15901  001B82  C033  F122         	movff	_Vin,_max
 15902  001B86  C034  F123         	movff	_Vin+1,_max+1
 15903  001B8A  C035  F124         	movff	_Vin+2,_max+2
 15904  001B8E                     l496:
 15905  001B8E  FFFF               	dw	65535	; assembler added errata NOP
 15906                           
 15907                           ;Get_Voltages.c: 273: return status.data;
 15908  001B90  5045               	movf	_status,w,c
 15909  001B92  0012               	return		;funcret
 15910  001B94  FFFF               	dw	65535	; errata NOP
 15911  001B96                     __end_of_Get_Voltage_Data:
 15912                           	opt stack 0
 15913                           tblptru	equ	0xFF8
 15914                           tblptrh	equ	0xFF7
 15915                           tblptrl	equ	0xFF6
 15916                           tablat	equ	0xFF5
 15917                           prodl	equ	0xFF3
 15918                           intcon	equ	0xFF2
 15919                           postinc0	equ	0xFEE
 15920                           wreg	equ	0xFE8
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           plusw2	equ	0xFDB
 15925                           fsr2h	equ	0xFDA
 15926                           fsr2l	equ	0xFD9
 15927                           status	equ	0xFD8
 15928                           
 15929 ;; *************** function ___lwtoft *****************
 15930 ;; Defined at:
 15931 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  c               2   32[COMRAM] unsigned int 
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;		None
 15936 ;; Return value:  Size  Location     Type
 15937 ;;                  3   32[COMRAM] float 
 15938 ;; Registers used:
 15939 ;;		wreg, status,2, status,0, cstack
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15945 ;;      Params:         3       0       0       0       0       0       0
 15946 ;;      Locals:         0       0       0       0       0       0       0
 15947 ;;      Temps:          0       0       0       0       0       0       0
 15948 ;;      Totals:         3       0       0       0       0       0       0
 15949 ;;Total ram usage:        3 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    2
 15952 ;; This function calls:
 15953 ;;		___ftpack
 15954 ;; This function is called by:
 15955 ;;		_Get_Voltage_Data
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           	psect	text89
 15960  005296                     __ptext89:
 15961                           	opt stack 0
 15962  005296                     ___lwtoft:
 15963                           	opt stack 0
 15964  005296  FFFF               	dw	65535	; assembler added errata NOP
 15965                           
 15966                           ;incstack = 0
 15967  005298  C021  F019         	movff	___lwtoft@c,___ftpack@arg
 15968  00529C  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
 15969  0052A0  6A1B               	clrf	___ftpack@arg+2,c
 15970  0052A2  0E8E               	movlw	142
 15971  0052A4  6E1C               	movwf	___ftpack@exp,c
 15972  0052A6  0E00               	movlw	0
 15973  0052A8  6E1D               	movwf	___ftpack@sign,c
 15974  0052AA  ECCD  F034         	call	___ftpack	;wreg free
 15975  0052AE  C019  F021         	movff	?___ftpack,?___lwtoft
 15976  0052B2  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
 15977  0052B6  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
 15978  0052BA  0012               	return		;funcret
 15979  0052BC  FFFF               	dw	65535	; errata NOP
 15980  0052BE                     __end_of___lwtoft:
 15981                           	opt stack 0
 15982                           tblptru	equ	0xFF8
 15983                           tblptrh	equ	0xFF7
 15984                           tblptrl	equ	0xFF6
 15985                           tablat	equ	0xFF5
 15986                           prodl	equ	0xFF3
 15987                           intcon	equ	0xFF2
 15988                           postinc0	equ	0xFEE
 15989                           wreg	equ	0xFE8
 15990                           indf2	equ	0xFDF
 15991                           postinc2	equ	0xFDE
 15992                           postdec2	equ	0xFDD
 15993                           plusw2	equ	0xFDB
 15994                           fsr2h	equ	0xFDA
 15995                           fsr2l	equ	0xFD9
 15996                           status	equ	0xFD8
 15997                           
 15998 ;; *************** function _LowPass_Vin *****************
 15999 ;; Defined at:
 16000 ;;		line 46 in file "Filters.c"
 16001 ;; Parameters:    Size  Location     Type
 16002 ;;  val             3   39[BANK0 ] float 
 16003 ;; Auto vars:     Size  Location     Type
 16004 ;;  Vout            3   45[BANK0 ] float 
 16005 ;; Return value:  Size  Location     Type
 16006 ;;                  3   39[BANK0 ] float 
 16007 ;; Registers used:
 16008 ;;		wreg, status,2, status,0, cstack
 16009 ;; Tracked objects:
 16010 ;;		On entry : 0/0
 16011 ;;		On exit  : 0/0
 16012 ;;		Unchanged: 0/0
 16013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16014 ;;      Params:         0       3       0       0       0       0       0
 16015 ;;      Locals:         0       6       0       0       0       0       0
 16016 ;;      Temps:          0       0       0       0       0       0       0
 16017 ;;      Totals:         0       9       0       0       0       0       0
 16018 ;;Total ram usage:        9 bytes
 16019 ;; Hardware stack levels used:    1
 16020 ;; Hardware stack levels required when called:    3
 16021 ;; This function calls:
 16022 ;;		___ftadd
 16023 ;;		___ftmul
 16024 ;;		___ftneg
 16025 ;; This function is called by:
 16026 ;;		_Get_Voltage_Data
 16027 ;; This function uses a non-reentrant model
 16028 ;;
 16029                           
 16030                           	psect	text90
 16031  00675E                     __ptext90:
 16032                           	opt stack 0
 16033  00675E                     _LowPass_Vin:
 16034                           	opt stack 0
 16035  00675E  FFFF               	dw	65535	; assembler added errata NOP
 16036                           
 16037                           ;Filters.c: 48: float Vout;
 16038                           ;Filters.c: 50: Vout=k1*Vin_last+(1.0-k1)*val;
 16039                           
 16040                           ;incstack = 0
 16041  006760  C087  F07B         	movff	LowPass_Vin@val,___ftmul@f2
 16042  006764  C088  F07C         	movff	LowPass_Vin@val+1,___ftmul@f2+1
 16043  006768  C089  F07D         	movff	LowPass_Vin@val+2,___ftmul@f2+2
 16044  00676C  0E00               	movlw	0
 16045  00676E  0100               	movlb	0	; () banked
 16046  006770  6F63               	movwf	___ftadd@f2& (0+255),b
 16047  006772  0E80               	movlw	128
 16048  006774  0100               	movlb	0	; () banked
 16049  006776  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16050  006778  0E3F               	movlw	63
 16051  00677A  0100               	movlb	0	; () banked
 16052  00677C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16053  00677E  C03F  F01C         	movff	_k1,___ftneg@f1
 16054  006782  C040  F01D         	movff	_k1+1,___ftneg@f1+1
 16055  006786  C041  F01E         	movff	_k1+2,___ftneg@f1+2
 16056  00678A  EC5F  F029         	call	___ftneg	;wreg free
 16057  00678E  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16058  006792  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16059  006796  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16060  00679A  ECD0  F019         	call	___ftadd	;wreg free
 16061  00679E  C060  F078         	movff	?___ftadd,___ftmul@f1
 16062  0067A2  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 16063  0067A6  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 16064  0067AA  EC53  F03C         	call	___ftmul	;wreg free
 16065  0067AE  C078  F08A         	movff	?___ftmul,_LowPass_Vin$3542
 16066  0067B2  C079  F08B         	movff	?___ftmul+1,_LowPass_Vin$3542+1
 16067  0067B6  C07A  F08C         	movff	?___ftmul+2,_LowPass_Vin$3542+2
 16068                           
 16069                           ;Filters.c: 48: float Vout;
 16070                           ;Filters.c: 50: Vout=k1*Vin_last+(1.0-k1)*val;
 16071  0067BA  C146  F07B         	movff	_Vin_last,___ftmul@f2
 16072  0067BE  C147  F07C         	movff	_Vin_last+1,___ftmul@f2+1
 16073  0067C2  C148  F07D         	movff	_Vin_last+2,___ftmul@f2+2
 16074  0067C6  C03F  F078         	movff	_k1,___ftmul@f1
 16075  0067CA  C040  F079         	movff	_k1+1,___ftmul@f1+1
 16076  0067CE  C041  F07A         	movff	_k1+2,___ftmul@f1+2
 16077  0067D2  EC53  F03C         	call	___ftmul	;wreg free
 16078  0067D6  C078  F060         	movff	?___ftmul,___ftadd@f1
 16079  0067DA  C079  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16080  0067DE  C07A  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16081  0067E2  C08A  F063         	movff	_LowPass_Vin$3542,___ftadd@f2
 16082  0067E6  C08B  F064         	movff	_LowPass_Vin$3542+1,___ftadd@f2+1
 16083  0067EA  C08C  F065         	movff	_LowPass_Vin$3542+2,___ftadd@f2+2
 16084  0067EE  ECD0  F019         	call	___ftadd	;wreg free
 16085  0067F2  C060  F08D         	movff	?___ftadd,LowPass_Vin@Vout
 16086  0067F6  C061  F08E         	movff	?___ftadd+1,LowPass_Vin@Vout+1
 16087  0067FA  C062  F08F         	movff	?___ftadd+2,LowPass_Vin@Vout+2
 16088                           
 16089                           ;Filters.c: 51: Vin_last=Vout;
 16090  0067FE  C08D  F146         	movff	LowPass_Vin@Vout,_Vin_last
 16091  006802  C08E  F147         	movff	LowPass_Vin@Vout+1,_Vin_last+1
 16092  006806  C08F  F148         	movff	LowPass_Vin@Vout+2,_Vin_last+2
 16093                           
 16094                           ;Filters.c: 52: return Vout;
 16095  00680A  C08D  F087         	movff	LowPass_Vin@Vout,?_LowPass_Vin
 16096  00680E  C08E  F088         	movff	LowPass_Vin@Vout+1,?_LowPass_Vin+1
 16097  006812  C08F  F089         	movff	LowPass_Vin@Vout+2,?_LowPass_Vin+2
 16098  006816  0012               	return		;funcret
 16099  006818  FFFF               	dw	65535	; errata NOP
 16100  00681A                     __end_of_LowPass_Vin:
 16101                           	opt stack 0
 16102                           tblptru	equ	0xFF8
 16103                           tblptrh	equ	0xFF7
 16104                           tblptrl	equ	0xFF6
 16105                           tablat	equ	0xFF5
 16106                           prodl	equ	0xFF3
 16107                           intcon	equ	0xFF2
 16108                           postinc0	equ	0xFEE
 16109                           wreg	equ	0xFE8
 16110                           indf2	equ	0xFDF
 16111                           postinc2	equ	0xFDE
 16112                           postdec2	equ	0xFDD
 16113                           plusw2	equ	0xFDB
 16114                           fsr2h	equ	0xFDA
 16115                           fsr2l	equ	0xFD9
 16116                           status	equ	0xFD8
 16117                           
 16118 ;; *************** function _LowPass_VL3 *****************
 16119 ;; Defined at:
 16120 ;;		line 38 in file "Filters.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;  val             3   39[BANK0 ] float 
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;  Vout            3   45[BANK0 ] float 
 16125 ;; Return value:  Size  Location     Type
 16126 ;;                  3   39[BANK0 ] float 
 16127 ;; Registers used:
 16128 ;;		wreg, status,2, status,0, cstack
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16134 ;;      Params:         0       3       0       0       0       0       0
 16135 ;;      Locals:         0       6       0       0       0       0       0
 16136 ;;      Temps:          0       0       0       0       0       0       0
 16137 ;;      Totals:         0       9       0       0       0       0       0
 16138 ;;Total ram usage:        9 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:    3
 16141 ;; This function calls:
 16142 ;;		___ftadd
 16143 ;;		___ftmul
 16144 ;;		___ftneg
 16145 ;; This function is called by:
 16146 ;;		_Get_Voltage_Data
 16147 ;; This function uses a non-reentrant model
 16148 ;;
 16149                           
 16150                           	psect	text91
 16151  0066A2                     __ptext91:
 16152                           	opt stack 0
 16153  0066A2                     _LowPass_VL3:
 16154                           	opt stack 0
 16155  0066A2  FFFF               	dw	65535	; assembler added errata NOP
 16156                           
 16157                           ;Filters.c: 40: float Vout;
 16158                           ;Filters.c: 42: Vout=k1*VL3_last+(1.0-k1)*val;
 16159                           
 16160                           ;incstack = 0
 16161  0066A4  C087  F07B         	movff	LowPass_VL3@val,___ftmul@f2
 16162  0066A8  C088  F07C         	movff	LowPass_VL3@val+1,___ftmul@f2+1
 16163  0066AC  C089  F07D         	movff	LowPass_VL3@val+2,___ftmul@f2+2
 16164  0066B0  0E00               	movlw	0
 16165  0066B2  0100               	movlb	0	; () banked
 16166  0066B4  6F63               	movwf	___ftadd@f2& (0+255),b
 16167  0066B6  0E80               	movlw	128
 16168  0066B8  0100               	movlb	0	; () banked
 16169  0066BA  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16170  0066BC  0E3F               	movlw	63
 16171  0066BE  0100               	movlb	0	; () banked
 16172  0066C0  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16173  0066C2  C03F  F01C         	movff	_k1,___ftneg@f1
 16174  0066C6  C040  F01D         	movff	_k1+1,___ftneg@f1+1
 16175  0066CA  C041  F01E         	movff	_k1+2,___ftneg@f1+2
 16176  0066CE  EC5F  F029         	call	___ftneg	;wreg free
 16177  0066D2  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16178  0066D6  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16179  0066DA  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16180  0066DE  ECD0  F019         	call	___ftadd	;wreg free
 16181  0066E2  C060  F078         	movff	?___ftadd,___ftmul@f1
 16182  0066E6  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 16183  0066EA  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 16184  0066EE  EC53  F03C         	call	___ftmul	;wreg free
 16185  0066F2  C078  F08A         	movff	?___ftmul,_LowPass_VL3$3541
 16186  0066F6  C079  F08B         	movff	?___ftmul+1,_LowPass_VL3$3541+1
 16187  0066FA  C07A  F08C         	movff	?___ftmul+2,_LowPass_VL3$3541+2
 16188                           
 16189                           ;Filters.c: 40: float Vout;
 16190                           ;Filters.c: 42: Vout=k1*VL3_last+(1.0-k1)*val;
 16191  0066FE  C149  F07B         	movff	_VL3_last,___ftmul@f2
 16192  006702  C14A  F07C         	movff	_VL3_last+1,___ftmul@f2+1
 16193  006706  C14B  F07D         	movff	_VL3_last+2,___ftmul@f2+2
 16194  00670A  C03F  F078         	movff	_k1,___ftmul@f1
 16195  00670E  C040  F079         	movff	_k1+1,___ftmul@f1+1
 16196  006712  C041  F07A         	movff	_k1+2,___ftmul@f1+2
 16197  006716  EC53  F03C         	call	___ftmul	;wreg free
 16198  00671A  C078  F060         	movff	?___ftmul,___ftadd@f1
 16199  00671E  C079  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16200  006722  C07A  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16201  006726  C08A  F063         	movff	_LowPass_VL3$3541,___ftadd@f2
 16202  00672A  C08B  F064         	movff	_LowPass_VL3$3541+1,___ftadd@f2+1
 16203  00672E  C08C  F065         	movff	_LowPass_VL3$3541+2,___ftadd@f2+2
 16204  006732  ECD0  F019         	call	___ftadd	;wreg free
 16205  006736  C060  F08D         	movff	?___ftadd,LowPass_VL3@Vout
 16206  00673A  C061  F08E         	movff	?___ftadd+1,LowPass_VL3@Vout+1
 16207  00673E  C062  F08F         	movff	?___ftadd+2,LowPass_VL3@Vout+2
 16208                           
 16209                           ;Filters.c: 43: VL3_last=Vout;
 16210  006742  C08D  F149         	movff	LowPass_VL3@Vout,_VL3_last
 16211  006746  C08E  F14A         	movff	LowPass_VL3@Vout+1,_VL3_last+1
 16212  00674A  C08F  F14B         	movff	LowPass_VL3@Vout+2,_VL3_last+2
 16213                           
 16214                           ;Filters.c: 44: return Vout;
 16215  00674E  C08D  F087         	movff	LowPass_VL3@Vout,?_LowPass_VL3
 16216  006752  C08E  F088         	movff	LowPass_VL3@Vout+1,?_LowPass_VL3+1
 16217  006756  C08F  F089         	movff	LowPass_VL3@Vout+2,?_LowPass_VL3+2
 16218  00675A  0012               	return		;funcret
 16219  00675C  FFFF               	dw	65535	; errata NOP
 16220  00675E                     __end_of_LowPass_VL3:
 16221                           	opt stack 0
 16222                           tblptru	equ	0xFF8
 16223                           tblptrh	equ	0xFF7
 16224                           tblptrl	equ	0xFF6
 16225                           tablat	equ	0xFF5
 16226                           prodl	equ	0xFF3
 16227                           intcon	equ	0xFF2
 16228                           postinc0	equ	0xFEE
 16229                           wreg	equ	0xFE8
 16230                           indf2	equ	0xFDF
 16231                           postinc2	equ	0xFDE
 16232                           postdec2	equ	0xFDD
 16233                           plusw2	equ	0xFDB
 16234                           fsr2h	equ	0xFDA
 16235                           fsr2l	equ	0xFD9
 16236                           status	equ	0xFD8
 16237                           
 16238 ;; *************** function _LowPass_VL2 *****************
 16239 ;; Defined at:
 16240 ;;		line 29 in file "Filters.c"
 16241 ;; Parameters:    Size  Location     Type
 16242 ;;  val             3   39[BANK0 ] float 
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  Vout            3   45[BANK0 ] float 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  3   39[BANK0 ] float 
 16247 ;; Registers used:
 16248 ;;		wreg, status,2, status,0, cstack
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16254 ;;      Params:         0       3       0       0       0       0       0
 16255 ;;      Locals:         0       6       0       0       0       0       0
 16256 ;;      Temps:          0       0       0       0       0       0       0
 16257 ;;      Totals:         0       9       0       0       0       0       0
 16258 ;;Total ram usage:        9 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    3
 16261 ;; This function calls:
 16262 ;;		___ftadd
 16263 ;;		___ftmul
 16264 ;;		___ftneg
 16265 ;; This function is called by:
 16266 ;;		_Get_Voltage_Data
 16267 ;; This function uses a non-reentrant model
 16268 ;;
 16269                           
 16270                           	psect	text92
 16271  0065E6                     __ptext92:
 16272                           	opt stack 0
 16273  0065E6                     _LowPass_VL2:
 16274                           	opt stack 0
 16275  0065E6  FFFF               	dw	65535	; assembler added errata NOP
 16276                           
 16277                           ;Filters.c: 31: float Vout;
 16278                           ;Filters.c: 33: Vout=k1*VL2_last+(1.0-k1)*val;
 16279                           
 16280                           ;incstack = 0
 16281  0065E8  C087  F07B         	movff	LowPass_VL2@val,___ftmul@f2
 16282  0065EC  C088  F07C         	movff	LowPass_VL2@val+1,___ftmul@f2+1
 16283  0065F0  C089  F07D         	movff	LowPass_VL2@val+2,___ftmul@f2+2
 16284  0065F4  0E00               	movlw	0
 16285  0065F6  0100               	movlb	0	; () banked
 16286  0065F8  6F63               	movwf	___ftadd@f2& (0+255),b
 16287  0065FA  0E80               	movlw	128
 16288  0065FC  0100               	movlb	0	; () banked
 16289  0065FE  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16290  006600  0E3F               	movlw	63
 16291  006602  0100               	movlb	0	; () banked
 16292  006604  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16293  006606  C03F  F01C         	movff	_k1,___ftneg@f1
 16294  00660A  C040  F01D         	movff	_k1+1,___ftneg@f1+1
 16295  00660E  C041  F01E         	movff	_k1+2,___ftneg@f1+2
 16296  006612  EC5F  F029         	call	___ftneg	;wreg free
 16297  006616  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16298  00661A  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16299  00661E  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16300  006622  ECD0  F019         	call	___ftadd	;wreg free
 16301  006626  C060  F078         	movff	?___ftadd,___ftmul@f1
 16302  00662A  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 16303  00662E  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 16304  006632  EC53  F03C         	call	___ftmul	;wreg free
 16305  006636  C078  F08A         	movff	?___ftmul,_LowPass_VL2$3540
 16306  00663A  C079  F08B         	movff	?___ftmul+1,_LowPass_VL2$3540+1
 16307  00663E  C07A  F08C         	movff	?___ftmul+2,_LowPass_VL2$3540+2
 16308                           
 16309                           ;Filters.c: 31: float Vout;
 16310                           ;Filters.c: 33: Vout=k1*VL2_last+(1.0-k1)*val;
 16311  006642  C14C  F07B         	movff	_VL2_last,___ftmul@f2
 16312  006646  C14D  F07C         	movff	_VL2_last+1,___ftmul@f2+1
 16313  00664A  C14E  F07D         	movff	_VL2_last+2,___ftmul@f2+2
 16314  00664E  C03F  F078         	movff	_k1,___ftmul@f1
 16315  006652  C040  F079         	movff	_k1+1,___ftmul@f1+1
 16316  006656  C041  F07A         	movff	_k1+2,___ftmul@f1+2
 16317  00665A  EC53  F03C         	call	___ftmul	;wreg free
 16318  00665E  C078  F060         	movff	?___ftmul,___ftadd@f1
 16319  006662  C079  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16320  006666  C07A  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16321  00666A  C08A  F063         	movff	_LowPass_VL2$3540,___ftadd@f2
 16322  00666E  C08B  F064         	movff	_LowPass_VL2$3540+1,___ftadd@f2+1
 16323  006672  C08C  F065         	movff	_LowPass_VL2$3540+2,___ftadd@f2+2
 16324  006676  ECD0  F019         	call	___ftadd	;wreg free
 16325  00667A  C060  F08D         	movff	?___ftadd,LowPass_VL2@Vout
 16326  00667E  C061  F08E         	movff	?___ftadd+1,LowPass_VL2@Vout+1
 16327  006682  C062  F08F         	movff	?___ftadd+2,LowPass_VL2@Vout+2
 16328                           
 16329                           ;Filters.c: 34: VL2_last=Vout;
 16330  006686  C08D  F14C         	movff	LowPass_VL2@Vout,_VL2_last
 16331  00668A  C08E  F14D         	movff	LowPass_VL2@Vout+1,_VL2_last+1
 16332  00668E  C08F  F14E         	movff	LowPass_VL2@Vout+2,_VL2_last+2
 16333                           
 16334                           ;Filters.c: 35: return Vout;
 16335  006692  C08D  F087         	movff	LowPass_VL2@Vout,?_LowPass_VL2
 16336  006696  C08E  F088         	movff	LowPass_VL2@Vout+1,?_LowPass_VL2+1
 16337  00669A  C08F  F089         	movff	LowPass_VL2@Vout+2,?_LowPass_VL2+2
 16338  00669E  0012               	return		;funcret
 16339  0066A0  FFFF               	dw	65535	; errata NOP
 16340  0066A2                     __end_of_LowPass_VL2:
 16341                           	opt stack 0
 16342                           tblptru	equ	0xFF8
 16343                           tblptrh	equ	0xFF7
 16344                           tblptrl	equ	0xFF6
 16345                           tablat	equ	0xFF5
 16346                           prodl	equ	0xFF3
 16347                           intcon	equ	0xFF2
 16348                           postinc0	equ	0xFEE
 16349                           wreg	equ	0xFE8
 16350                           indf2	equ	0xFDF
 16351                           postinc2	equ	0xFDE
 16352                           postdec2	equ	0xFDD
 16353                           plusw2	equ	0xFDB
 16354                           fsr2h	equ	0xFDA
 16355                           fsr2l	equ	0xFD9
 16356                           status	equ	0xFD8
 16357                           
 16358 ;; *************** function _LowPass_VL1 *****************
 16359 ;; Defined at:
 16360 ;;		line 20 in file "Filters.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;  val             3   39[BANK0 ] float 
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;  Vout            3   45[BANK0 ] float 
 16365 ;; Return value:  Size  Location     Type
 16366 ;;                  3   39[BANK0 ] float 
 16367 ;; Registers used:
 16368 ;;		wreg, status,2, status,0, cstack
 16369 ;; Tracked objects:
 16370 ;;		On entry : 0/0
 16371 ;;		On exit  : 0/0
 16372 ;;		Unchanged: 0/0
 16373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16374 ;;      Params:         0       3       0       0       0       0       0
 16375 ;;      Locals:         0       6       0       0       0       0       0
 16376 ;;      Temps:          0       0       0       0       0       0       0
 16377 ;;      Totals:         0       9       0       0       0       0       0
 16378 ;;Total ram usage:        9 bytes
 16379 ;; Hardware stack levels used:    1
 16380 ;; Hardware stack levels required when called:    3
 16381 ;; This function calls:
 16382 ;;		___ftadd
 16383 ;;		___ftmul
 16384 ;;		___ftneg
 16385 ;; This function is called by:
 16386 ;;		_Get_Voltage_Data
 16387 ;; This function uses a non-reentrant model
 16388 ;;
 16389                           
 16390                           	psect	text93
 16391  00652A                     __ptext93:
 16392                           	opt stack 0
 16393  00652A                     _LowPass_VL1:
 16394                           	opt stack 0
 16395  00652A  FFFF               	dw	65535	; assembler added errata NOP
 16396                           
 16397                           ;Filters.c: 22: float Vout;
 16398                           ;Filters.c: 24: Vout=k1*VL1_last+(1.0-k1)*val;
 16399                           
 16400                           ;incstack = 0
 16401  00652C  C087  F07B         	movff	LowPass_VL1@val,___ftmul@f2
 16402  006530  C088  F07C         	movff	LowPass_VL1@val+1,___ftmul@f2+1
 16403  006534  C089  F07D         	movff	LowPass_VL1@val+2,___ftmul@f2+2
 16404  006538  0E00               	movlw	0
 16405  00653A  0100               	movlb	0	; () banked
 16406  00653C  6F63               	movwf	___ftadd@f2& (0+255),b
 16407  00653E  0E80               	movlw	128
 16408  006540  0100               	movlb	0	; () banked
 16409  006542  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
 16410  006544  0E3F               	movlw	63
 16411  006546  0100               	movlb	0	; () banked
 16412  006548  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
 16413  00654A  C03F  F01C         	movff	_k1,___ftneg@f1
 16414  00654E  C040  F01D         	movff	_k1+1,___ftneg@f1+1
 16415  006552  C041  F01E         	movff	_k1+2,___ftneg@f1+2
 16416  006556  EC5F  F029         	call	___ftneg	;wreg free
 16417  00655A  C01C  F060         	movff	?___ftneg,___ftadd@f1
 16418  00655E  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 16419  006562  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 16420  006566  ECD0  F019         	call	___ftadd	;wreg free
 16421  00656A  C060  F078         	movff	?___ftadd,___ftmul@f1
 16422  00656E  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 16423  006572  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 16424  006576  EC53  F03C         	call	___ftmul	;wreg free
 16425  00657A  C078  F08A         	movff	?___ftmul,_LowPass_VL1$3539
 16426  00657E  C079  F08B         	movff	?___ftmul+1,_LowPass_VL1$3539+1
 16427  006582  C07A  F08C         	movff	?___ftmul+2,_LowPass_VL1$3539+2
 16428                           
 16429                           ;Filters.c: 22: float Vout;
 16430                           ;Filters.c: 24: Vout=k1*VL1_last+(1.0-k1)*val;
 16431  006586  C14F  F07B         	movff	_VL1_last,___ftmul@f2
 16432  00658A  C150  F07C         	movff	_VL1_last+1,___ftmul@f2+1
 16433  00658E  C151  F07D         	movff	_VL1_last+2,___ftmul@f2+2
 16434  006592  C03F  F078         	movff	_k1,___ftmul@f1
 16435  006596  C040  F079         	movff	_k1+1,___ftmul@f1+1
 16436  00659A  C041  F07A         	movff	_k1+2,___ftmul@f1+2
 16437  00659E  EC53  F03C         	call	___ftmul	;wreg free
 16438  0065A2  C078  F060         	movff	?___ftmul,___ftadd@f1
 16439  0065A6  C079  F061         	movff	?___ftmul+1,___ftadd@f1+1
 16440  0065AA  C07A  F062         	movff	?___ftmul+2,___ftadd@f1+2
 16441  0065AE  C08A  F063         	movff	_LowPass_VL1$3539,___ftadd@f2
 16442  0065B2  C08B  F064         	movff	_LowPass_VL1$3539+1,___ftadd@f2+1
 16443  0065B6  C08C  F065         	movff	_LowPass_VL1$3539+2,___ftadd@f2+2
 16444  0065BA  ECD0  F019         	call	___ftadd	;wreg free
 16445  0065BE  C060  F08D         	movff	?___ftadd,LowPass_VL1@Vout
 16446  0065C2  C061  F08E         	movff	?___ftadd+1,LowPass_VL1@Vout+1
 16447  0065C6  C062  F08F         	movff	?___ftadd+2,LowPass_VL1@Vout+2
 16448                           
 16449                           ;Filters.c: 25: VL1_last=Vout;
 16450  0065CA  C08D  F14F         	movff	LowPass_VL1@Vout,_VL1_last
 16451  0065CE  C08E  F150         	movff	LowPass_VL1@Vout+1,_VL1_last+1
 16452  0065D2  C08F  F151         	movff	LowPass_VL1@Vout+2,_VL1_last+2
 16453                           
 16454                           ;Filters.c: 26: return Vout;
 16455  0065D6  C08D  F087         	movff	LowPass_VL1@Vout,?_LowPass_VL1
 16456  0065DA  C08E  F088         	movff	LowPass_VL1@Vout+1,?_LowPass_VL1+1
 16457  0065DE  C08F  F089         	movff	LowPass_VL1@Vout+2,?_LowPass_VL1+2
 16458  0065E2  0012               	return		;funcret
 16459  0065E4  FFFF               	dw	65535	; errata NOP
 16460  0065E6                     __end_of_LowPass_VL1:
 16461                           	opt stack 0
 16462                           tblptru	equ	0xFF8
 16463                           tblptrh	equ	0xFF7
 16464                           tblptrl	equ	0xFF6
 16465                           tablat	equ	0xFF5
 16466                           prodl	equ	0xFF3
 16467                           intcon	equ	0xFF2
 16468                           postinc0	equ	0xFEE
 16469                           wreg	equ	0xFE8
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           plusw2	equ	0xFDB
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function _Get_Analog_Channel *****************
 16479 ;; Defined at:
 16480 ;;		line 91 in file "ior5e.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  channel         1    wreg     unsigned char 
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  channel         1   27[COMRAM] unsigned char 
 16485 ;;  ADC_data        2   28[COMRAM] struct ADC
 16486 ;;  status          1    0        unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;                  2   24[COMRAM] unsigned int 
 16489 ;; Registers used:
 16490 ;;		wreg, status,2, status,0
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16496 ;;      Params:         2       0       0       0       0       0       0
 16497 ;;      Locals:         3       0       0       0       0       0       0
 16498 ;;      Temps:          1       0       0       0       0       0       0
 16499 ;;      Totals:         6       0       0       0       0       0       0
 16500 ;;Total ram usage:        6 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    1
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_Get_Voltage_Data
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text94
 16511  005578                     __ptext94:
 16512                           	opt stack 0
 16513  005578                     _Get_Analog_Channel:
 16514                           	opt stack 0
 16515  005578  FFFF               	dw	65535	; assembler added errata NOP
 16516                           
 16517                           ;incstack = 0
 16518                           ;Get_Analog_Channel@channel stored from wreg
 16519  00557A  6E1C               	movwf	Get_Analog_Channel@channel,c
 16520                           
 16521                           ;ior5e.c: 93: union ADC {
 16522                           ;ior5e.c: 94: unsigned int Result;
 16523                           ;ior5e.c: 95: struct {
 16524                           ;ior5e.c: 96: unsigned char LSB;
 16525                           ;ior5e.c: 97: unsigned char MSB;
 16526                           ;ior5e.c: 98: };
 16527                           ;ior5e.c: 99: };
 16528                           ;ior5e.c: 101: union ADC ADC_data;
 16529                           ;ior5e.c: 102: char status;
 16530                           ;ior5e.c: 104: ADCON0bits.ADON=1;
 16531  00557C  80C2               	bsf	4034,0,c	;volatile
 16532                           
 16533                           ;ior5e.c: 106: ADCON0bits.CHS=channel;
 16534  00557E  C01C  F01B         	movff	Get_Analog_Channel@channel,??_Get_Analog_Channel
 16535  005582  461B               	rlncf	??_Get_Analog_Channel,f,c
 16536  005584  461B               	rlncf	??_Get_Analog_Channel,f,c
 16537  005586  461B               	rlncf	??_Get_Analog_Channel,f,c
 16538  005588  50C2               	movf	4034,w,c	;volatile
 16539  00558A  181B               	xorwf	??_Get_Analog_Channel,w,c
 16540  00558C  0BC7               	andlw	-57
 16541  00558E  181B               	xorwf	??_Get_Analog_Channel,w,c
 16542  005590  6EC2               	movwf	4034,c	;volatile
 16543                           
 16544                           ;ior5e.c: 107: _delay((unsigned long)((15)*(10000000/4000000.0)));
 16545  005592  0E09               	movlw	9
 16546  005594                     u11567:
 16547  005594  FFFF               	dw	65535	; errata NOP
 16548  005596  2EE8               	decfsz	wreg,f,c
 16549  005598  D7FD               	bra	u11567
 16550  00559A  F000               	nop	
 16551                           
 16552                           ;ior5e.c: 108: ADCON0bits.GO=1;
 16553  00559C  84C2               	bsf	4034,2,c	;volatile
 16554  00559E  FFFF               	dw	65535	; assembler added errata NOP
 16555  0055A0  B4C2               	btfsc	4034,2,c	;volatile
 16556  0055A2  D7FD               	goto	l722
 16557                           
 16558                           ;ior5e.c: 112: ADC_data.LSB=ADRESL;
 16559  0055A4  CFC3 F01D          	movff	4035,Get_Analog_Channel@ADC_data	;volatile
 16560                           
 16561                           ;ior5e.c: 113: ADC_data.MSB=ADRESH;
 16562  0055A8  CFC4 F01E          	movff	4036,Get_Analog_Channel@ADC_data+1	;volatile
 16563                           
 16564                           ;ior5e.c: 115: return(ADC_data.Result);
 16565  0055AC  C01D  F019         	movff	Get_Analog_Channel@ADC_data,?_Get_Analog_Channel
 16566  0055B0  C01E  F01A         	movff	Get_Analog_Channel@ADC_data+1,?_Get_Analog_Channel+1
 16567  0055B4  0012               	return		;funcret
 16568  0055B6  FFFF               	dw	65535	; errata NOP
 16569  0055B8                     __end_of_Get_Analog_Channel:
 16570                           	opt stack 0
 16571                           tblptru	equ	0xFF8
 16572                           tblptrh	equ	0xFF7
 16573                           tblptrl	equ	0xFF6
 16574                           tablat	equ	0xFF5
 16575                           prodl	equ	0xFF3
 16576                           intcon	equ	0xFF2
 16577                           postinc0	equ	0xFEE
 16578                           wreg	equ	0xFE8
 16579                           indf2	equ	0xFDF
 16580                           postinc2	equ	0xFDE
 16581                           postdec2	equ	0xFDD
 16582                           plusw2	equ	0xFDB
 16583                           fsr2h	equ	0xFDA
 16584                           fsr2l	equ	0xFD9
 16585                           status	equ	0xFD8
 16586                           
 16587 ;; *************** function _Check_VL_N *****************
 16588 ;; Defined at:
 16589 ;;		line 174 in file "Get_Voltages.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  val             3   39[COMRAM] float 
 16592 ;; Auto vars:     Size  Location     Type
 16593 ;;		None
 16594 ;; Return value:  Size  Location     Type
 16595 ;;                  1    wreg      unsigned char 
 16596 ;; Registers used:
 16597 ;;		wreg, status,2, status,0, cstack
 16598 ;; Tracked objects:
 16599 ;;		On entry : 0/0
 16600 ;;		On exit  : 0/0
 16601 ;;		Unchanged: 0/0
 16602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16603 ;;      Params:         3       0       0       0       0       0       0
 16604 ;;      Locals:         0       0       0       0       0       0       0
 16605 ;;      Temps:          0       0       0       0       0       0       0
 16606 ;;      Totals:         3       0       0       0       0       0       0
 16607 ;;Total ram usage:        3 bytes
 16608 ;; Hardware stack levels used:    1
 16609 ;; Hardware stack levels required when called:    2
 16610 ;; This function calls:
 16611 ;;		___ftge
 16612 ;; This function is called by:
 16613 ;;		_Get_Voltage_Data
 16614 ;; This function uses a non-reentrant model
 16615 ;;
 16616                           
 16617                           	psect	text95
 16618  00596C                     __ptext95:
 16619                           	opt stack 0
 16620  00596C                     _Check_VL_N:
 16621                           	opt stack 0
 16622  00596C  FFFF               	dw	65535	; assembler added errata NOP
 16623                           
 16624                           ;Get_Voltages.c: 176: if(val>VL_max)
 16625                           
 16626                           ;incstack = 0
 16627  00596E  C12B  F01F         	movff	_VL_max,___ftge@ff1
 16628  005972  C12C  F020         	movff	_VL_max+1,___ftge@ff1+1
 16629  005976  C12D  F021         	movff	_VL_max+2,___ftge@ff1+2
 16630  00597A  C028  F022         	movff	Check_VL_N@val,___ftge@ff2
 16631  00597E  C029  F023         	movff	Check_VL_N@val+1,___ftge@ff2+1
 16632  005982  C02A  F024         	movff	Check_VL_N@val+2,___ftge@ff2+2
 16633  005986  ECF6  F031         	call	___ftge	;wreg free
 16634  00598A  B0D8               	btfsc	status,0,c
 16635  00598C  D002               	goto	l473
 16636                           
 16637                           ;Get_Voltages.c: 177: return 1;
 16638  00598E  0E01               	movlw	1
 16639  005990  D015               	goto	l10916
 16640  005992                     l473:
 16641  005992  FFFF               	dw	65535	; assembler added errata NOP
 16642                           
 16643                           ;Get_Voltages.c: 178: else if(val<VL_min)
 16644  005994  C028  F01F         	movff	Check_VL_N@val,___ftge@ff1
 16645  005998  C029  F020         	movff	Check_VL_N@val+1,___ftge@ff1+1
 16646  00599C  C02A  F021         	movff	Check_VL_N@val+2,___ftge@ff1+2
 16647  0059A0  C128  F022         	movff	_VL_min,___ftge@ff2
 16648  0059A4  C129  F023         	movff	_VL_min+1,___ftge@ff2+1
 16649  0059A8  C12A  F024         	movff	_VL_min+2,___ftge@ff2+2
 16650  0059AC  ECF6  F031         	call	___ftge	;wreg free
 16651  0059B0  B0D8               	btfsc	status,0,c
 16652  0059B2  D002               	goto	l476
 16653                           
 16654                           ;Get_Voltages.c: 179: return 2;
 16655  0059B4  0E02               	movlw	2
 16656  0059B6  D002               	goto	l10916
 16657  0059B8                     l476:
 16658  0059B8  FFFF               	dw	65535	; assembler added errata NOP
 16659                           
 16660                           ;Get_Voltages.c: 180: else
 16661                           ;Get_Voltages.c: 181: return 0;
 16662  0059BA  0E00               	movlw	0
 16663  0059BC                     l10916:
 16664  0059BC  FFFF               	dw	65535	; assembler added errata NOP
 16665  0059BE  0012               	return		;funcret
 16666  0059C0  FFFF               	dw	65535	; errata NOP
 16667  0059C2                     __end_of_Check_VL_N:
 16668                           	opt stack 0
 16669                           tblptru	equ	0xFF8
 16670                           tblptrh	equ	0xFF7
 16671                           tblptrl	equ	0xFF6
 16672                           tablat	equ	0xFF5
 16673                           prodl	equ	0xFF3
 16674                           intcon	equ	0xFF2
 16675                           postinc0	equ	0xFEE
 16676                           wreg	equ	0xFE8
 16677                           indf2	equ	0xFDF
 16678                           postinc2	equ	0xFDE
 16679                           postdec2	equ	0xFDD
 16680                           plusw2	equ	0xFDB
 16681                           fsr2h	equ	0xFDA
 16682                           fsr2l	equ	0xFD9
 16683                           status	equ	0xFD8
 16684                           
 16685 ;; *************** function _Get_Variables *****************
 16686 ;; Defined at:
 16687 ;;		line 15 in file "InitVariables.c"
 16688 ;; Parameters:    Size  Location     Type
 16689 ;;		None
 16690 ;; Auto vars:     Size  Location     Type
 16691 ;;  data           53    0[BANK0 ] struct data_var
 16692 ;; Return value:  Size  Location     Type
 16693 ;;                  2   30[COMRAM] int 
 16694 ;; Registers used:
 16695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16696 ;; Tracked objects:
 16697 ;;		On entry : 0/0
 16698 ;;		On exit  : 0/0
 16699 ;;		Unchanged: 0/0
 16700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16701 ;;      Params:         2       0       0       0       0       0       0
 16702 ;;      Locals:         0      53       0       0       0       0       0
 16703 ;;      Temps:          0       0       0       0       0       0       0
 16704 ;;      Totals:         2      53       0       0       0       0       0
 16705 ;;Total ram usage:       55 bytes
 16706 ;; Hardware stack levels used:    1
 16707 ;; Hardware stack levels required when called:    3
 16708 ;; This function calls:
 16709 ;;		_Set_LP_RC_constant
 16710 ;;		_rd_string_EE
 16711 ;;		_set_Deadband
 16712 ;;		_set_PID_Kd
 16713 ;;		_set_PID_Ki
 16714 ;;		_set_PID_Kp
 16715 ;;		_set_PID_T
 16716 ;;		_set_PID_setpoint
 16717 ;;		_set_VL1_span
 16718 ;;		_set_VL1_zero
 16719 ;;		_set_VL2_span
 16720 ;;		_set_VL2_zero
 16721 ;;		_set_VL3_span
 16722 ;;		_set_VL3_zero
 16723 ;;		_set_Vin_span
 16724 ;;		_set_Vin_zero
 16725 ;;		_set_max_VL
 16726 ;;		_set_min_VL
 16727 ;; This function is called by:
 16728 ;;		_main
 16729 ;; This function uses a non-reentrant model
 16730 ;;
 16731                           
 16732                           	psect	text96
 16733  0073CA                     __ptext96:
 16734                           	opt stack 0
 16735  0073CA                     _Get_Variables:
 16736                           	opt stack 0
 16737  0073CA  FFFF               	dw	65535	; assembler added errata NOP
 16738                           
 16739                           ;InitVariables.c: 17: union data_var data;
 16740                           ;InitVariables.c: 19: rd_string_EE(0, 53, &data);
 16741                           
 16742                           ;incstack = 0
 16743  0073CC  0E35               	movlw	53
 16744  0073CE  6E1A               	movwf	rd_string_EE@lenght,c
 16745  0073D0  0E60               	movlw	low Get_Variables@data
 16746  0073D2  6E1B               	movwf	rd_string_EE@buffer,c
 16747  0073D4  0E00               	movlw	high Get_Variables@data
 16748  0073D6  6E1C               	movwf	rd_string_EE@buffer+1,c
 16749  0073D8  0E00               	movlw	0
 16750  0073DA  EC12  F02A         	call	_rd_string_EE
 16751                           
 16752                           ;InitVariables.c: 20: set_PID_Kp(data.kp);
 16753  0073DE  C062  F019         	movff	Get_Variables@data+2,set_PID_Kp@val
 16754  0073E2  C063  F01A         	movff	Get_Variables@data+3,set_PID_Kp@val+1
 16755  0073E6  C064  F01B         	movff	Get_Variables@data+4,set_PID_Kp@val+2
 16756  0073EA  EC00  F029         	call	_set_PID_Kp	;wreg free
 16757                           
 16758                           ;InitVariables.c: 21: set_PID_Ki(data.ti);
 16759  0073EE  C065  F019         	movff	Get_Variables@data+5,set_PID_Ki@val
 16760  0073F2  C066  F01A         	movff	Get_Variables@data+6,set_PID_Ki@val+1
 16761  0073F6  C067  F01B         	movff	Get_Variables@data+7,set_PID_Ki@val+2
 16762  0073FA  EC01  F027         	call	_set_PID_Ki	;wreg free
 16763                           
 16764                           ;InitVariables.c: 22: set_PID_Kd(data.td);
 16765  0073FE  C068  F019         	movff	Get_Variables@data+8,set_PID_Kd@val
 16766  007402  C069  F01A         	movff	Get_Variables@data+9,set_PID_Kd@val+1
 16767  007406  C06A  F01B         	movff	Get_Variables@data+10,set_PID_Kd@val+2
 16768  00740A  ECF8  F026         	call	_set_PID_Kd	;wreg free
 16769                           
 16770                           ;InitVariables.c: 23: set_PID_T(data.T_sample);
 16771  00740E  C06B  F019         	movff	Get_Variables@data+11,set_PID_T@val
 16772  007412  C06C  F01A         	movff	Get_Variables@data+12,set_PID_T@val+1
 16773  007416  C06D  F01B         	movff	Get_Variables@data+13,set_PID_T@val+2
 16774  00741A  EC0A  F027         	call	_set_PID_T	;wreg free
 16775                           
 16776                           ;InitVariables.c: 24: set_PID_setpoint(data.set_point);
 16777  00741E  C06E  F019         	movff	Get_Variables@data+14,set_PID_setpoint@val
 16778  007422  C06F  F01A         	movff	Get_Variables@data+15,set_PID_setpoint@val+1
 16779  007426  C070  F01B         	movff	Get_Variables@data+16,set_PID_setpoint@val+2
 16780  00742A  EC13  F027         	call	_set_PID_setpoint	;wreg free
 16781                           
 16782                           ;InitVariables.c: 25: set_Deadband(data.deadband);
 16783  00742E  C071  F019         	movff	Get_Variables@data+17,set_Deadband@val
 16784  007432  C072  F01A         	movff	Get_Variables@data+18,set_Deadband@val+1
 16785  007436  C073  F01B         	movff	Get_Variables@data+19,set_Deadband@val+2
 16786  00743A  ECEF  F026         	call	_set_Deadband	;wreg free
 16787                           
 16788                           ;InitVariables.c: 26: Set_LP_RC_constant(data.RC_Constant);
 16789  00743E  C074  F019         	movff	Get_Variables@data+20,Set_LP_RC_constant@val
 16790  007442  C075  F01A         	movff	Get_Variables@data+21,Set_LP_RC_constant@val+1
 16791  007446  C076  F01B         	movff	Get_Variables@data+22,Set_LP_RC_constant@val+2
 16792  00744A  ECE6  F026         	call	_Set_LP_RC_constant	;wreg free
 16793                           
 16794                           ;InitVariables.c: 27: set_max_VL(data.max_VL);
 16795  00744E  C077  F019         	movff	Get_Variables@data+23,set_max_VL@val
 16796  007452  C078  F01A         	movff	Get_Variables@data+24,set_max_VL@val+1
 16797  007456  C079  F01B         	movff	Get_Variables@data+25,set_max_VL@val+2
 16798  00745A  EC64  F027         	call	_set_max_VL	;wreg free
 16799                           
 16800                           ;InitVariables.c: 28: set_min_VL(data.min_VL);
 16801  00745E  C07A  F019         	movff	Get_Variables@data+26,set_min_VL@val
 16802  007462  C07B  F01A         	movff	Get_Variables@data+27,set_min_VL@val+1
 16803  007466  C07C  F01B         	movff	Get_Variables@data+28,set_min_VL@val+2
 16804  00746A  EC6D  F027         	call	_set_min_VL	;wreg free
 16805                           
 16806                           ;InitVariables.c: 29: set_VL1_zero(data.V1_zero);
 16807  00746E  C07D  F019         	movff	Get_Variables@data+29,set_VL1_zero@val
 16808  007472  C07E  F01A         	movff	Get_Variables@data+30,set_VL1_zero@val+1
 16809  007476  C07F  F01B         	movff	Get_Variables@data+31,set_VL1_zero@val+2
 16810  00747A  EC25  F027         	call	_set_VL1_zero	;wreg free
 16811                           
 16812                           ;InitVariables.c: 30: set_VL2_zero(data.V2_zero);
 16813  00747E  C080  F019         	movff	Get_Variables@data+32,set_VL2_zero@val
 16814  007482  C081  F01A         	movff	Get_Variables@data+33,set_VL2_zero@val+1
 16815  007486  C082  F01B         	movff	Get_Variables@data+34,set_VL2_zero@val+2
 16816  00748A  EC37  F027         	call	_set_VL2_zero	;wreg free
 16817                           
 16818                           ;InitVariables.c: 31: set_VL3_zero(data.V3_zero);
 16819  00748E  C083  F019         	movff	Get_Variables@data+35,set_VL3_zero@val
 16820  007492  C084  F01A         	movff	Get_Variables@data+36,set_VL3_zero@val+1
 16821  007496  C085  F01B         	movff	Get_Variables@data+37,set_VL3_zero@val+2
 16822  00749A  EC49  F027         	call	_set_VL3_zero	;wreg free
 16823                           
 16824                           ;InitVariables.c: 32: set_VL1_span(data.V1_span);
 16825  00749E  C086  F019         	movff	Get_Variables@data+38,set_VL1_span@val
 16826  0074A2  C087  F01A         	movff	Get_Variables@data+39,set_VL1_span@val+1
 16827  0074A6  C088  F01B         	movff	Get_Variables@data+40,set_VL1_span@val+2
 16828  0074AA  EC1C  F027         	call	_set_VL1_span	;wreg free
 16829                           
 16830                           ;InitVariables.c: 33: set_VL2_span(data.V2_span);
 16831  0074AE  C089  F019         	movff	Get_Variables@data+41,set_VL2_span@val
 16832  0074B2  C08A  F01A         	movff	Get_Variables@data+42,set_VL2_span@val+1
 16833  0074B6  C08B  F01B         	movff	Get_Variables@data+43,set_VL2_span@val+2
 16834  0074BA  EC2E  F027         	call	_set_VL2_span	;wreg free
 16835                           
 16836                           ;InitVariables.c: 34: set_VL3_span(data.V3_span);
 16837  0074BE  C08C  F019         	movff	Get_Variables@data+44,set_VL3_span@val
 16838  0074C2  C08D  F01A         	movff	Get_Variables@data+45,set_VL3_span@val+1
 16839  0074C6  C08E  F01B         	movff	Get_Variables@data+46,set_VL3_span@val+2
 16840  0074CA  EC40  F027         	call	_set_VL3_span	;wreg free
 16841                           
 16842                           ;InitVariables.c: 35: set_Vin_zero(data.Vin_zero);
 16843  0074CE  C08F  F019         	movff	Get_Variables@data+47,set_Vin_zero@val
 16844  0074D2  C090  F01A         	movff	Get_Variables@data+48,set_Vin_zero@val+1
 16845  0074D6  C091  F01B         	movff	Get_Variables@data+49,set_Vin_zero@val+2
 16846  0074DA  EC5B  F027         	call	_set_Vin_zero	;wreg free
 16847                           
 16848                           ;InitVariables.c: 36: set_Vin_span(data.Vin_span);
 16849  0074DE  C092  F019         	movff	Get_Variables@data+50,set_Vin_span@val
 16850  0074E2  C093  F01A         	movff	Get_Variables@data+51,set_Vin_span@val+1
 16851  0074E6  C094  F01B         	movff	Get_Variables@data+52,set_Vin_span@val+2
 16852  0074EA  EC52  F027         	call	_set_Vin_span	;wreg free
 16853                           
 16854                           ;InitVariables.c: 38: return data.code;
 16855  0074EE  C060  F01F         	movff	Get_Variables@data,?_Get_Variables
 16856  0074F2  C061  F020         	movff	Get_Variables@data+1,?_Get_Variables+1
 16857  0074F6  0012               	return		;funcret
 16858  0074F8  FFFF               	dw	65535	; errata NOP
 16859  0074FA                     __end_of_Get_Variables:
 16860                           	opt stack 0
 16861                           tblptru	equ	0xFF8
 16862                           tblptrh	equ	0xFF7
 16863                           tblptrl	equ	0xFF6
 16864                           tablat	equ	0xFF5
 16865                           prodl	equ	0xFF3
 16866                           intcon	equ	0xFF2
 16867                           postinc0	equ	0xFEE
 16868                           wreg	equ	0xFE8
 16869                           indf2	equ	0xFDF
 16870                           postinc2	equ	0xFDE
 16871                           postdec2	equ	0xFDD
 16872                           plusw2	equ	0xFDB
 16873                           fsr2h	equ	0xFDA
 16874                           fsr2l	equ	0xFD9
 16875                           status	equ	0xFD8
 16876                           
 16877 ;; *************** function _set_min_VL *****************
 16878 ;; Defined at:
 16879 ;;		line 109 in file "Get_Voltages.c"
 16880 ;; Parameters:    Size  Location     Type
 16881 ;;  val             3   24[COMRAM] float 
 16882 ;; Auto vars:     Size  Location     Type
 16883 ;;		None
 16884 ;; Return value:  Size  Location     Type
 16885 ;;                  1    wreg      void 
 16886 ;; Registers used:
 16887 ;;		None
 16888 ;; Tracked objects:
 16889 ;;		On entry : 0/0
 16890 ;;		On exit  : 0/0
 16891 ;;		Unchanged: 0/0
 16892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16893 ;;      Params:         3       0       0       0       0       0       0
 16894 ;;      Locals:         0       0       0       0       0       0       0
 16895 ;;      Temps:          0       0       0       0       0       0       0
 16896 ;;      Totals:         3       0       0       0       0       0       0
 16897 ;;Total ram usage:        3 bytes
 16898 ;; Hardware stack levels used:    1
 16899 ;; Hardware stack levels required when called:    1
 16900 ;; This function calls:
 16901 ;;		Nothing
 16902 ;; This function is called by:
 16903 ;;		_set_list
 16904 ;;		_Get_Variables
 16905 ;;		_main
 16906 ;; This function uses a non-reentrant model
 16907 ;;
 16908                           
 16909                           	psect	text97
 16910  004EDA                     __ptext97:
 16911                           	opt stack 0
 16912  004EDA                     _set_min_VL:
 16913                           	opt stack 0
 16914  004EDA  FFFF               	dw	65535	; assembler added errata NOP
 16915                           
 16916                           ;Get_Voltages.c: 110: VL_min=val;
 16917                           
 16918                           ;incstack = 0
 16919  004EDC  C019  F128         	movff	set_min_VL@val,_VL_min
 16920  004EE0  C01A  F129         	movff	set_min_VL@val+1,_VL_min+1
 16921  004EE4  C01B  F12A         	movff	set_min_VL@val+2,_VL_min+2
 16922  004EE8  0012               	return		;funcret
 16923  004EEA  FFFF               	dw	65535	; errata NOP
 16924  004EEC                     __end_of_set_min_VL:
 16925                           	opt stack 0
 16926                           tblptru	equ	0xFF8
 16927                           tblptrh	equ	0xFF7
 16928                           tblptrl	equ	0xFF6
 16929                           tablat	equ	0xFF5
 16930                           prodl	equ	0xFF3
 16931                           intcon	equ	0xFF2
 16932                           postinc0	equ	0xFEE
 16933                           wreg	equ	0xFE8
 16934                           indf2	equ	0xFDF
 16935                           postinc2	equ	0xFDE
 16936                           postdec2	equ	0xFDD
 16937                           plusw2	equ	0xFDB
 16938                           fsr2h	equ	0xFDA
 16939                           fsr2l	equ	0xFD9
 16940                           status	equ	0xFD8
 16941                           
 16942 ;; *************** function _set_max_VL *****************
 16943 ;; Defined at:
 16944 ;;		line 105 in file "Get_Voltages.c"
 16945 ;; Parameters:    Size  Location     Type
 16946 ;;  val             3   24[COMRAM] float 
 16947 ;; Auto vars:     Size  Location     Type
 16948 ;;		None
 16949 ;; Return value:  Size  Location     Type
 16950 ;;                  1    wreg      void 
 16951 ;; Registers used:
 16952 ;;		None
 16953 ;; Tracked objects:
 16954 ;;		On entry : 0/0
 16955 ;;		On exit  : 0/0
 16956 ;;		Unchanged: 0/0
 16957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16958 ;;      Params:         3       0       0       0       0       0       0
 16959 ;;      Locals:         0       0       0       0       0       0       0
 16960 ;;      Temps:          0       0       0       0       0       0       0
 16961 ;;      Totals:         3       0       0       0       0       0       0
 16962 ;;Total ram usage:        3 bytes
 16963 ;; Hardware stack levels used:    1
 16964 ;; Hardware stack levels required when called:    1
 16965 ;; This function calls:
 16966 ;;		Nothing
 16967 ;; This function is called by:
 16968 ;;		_set_list
 16969 ;;		_Get_Variables
 16970 ;;		_main
 16971 ;; This function uses a non-reentrant model
 16972 ;;
 16973                           
 16974                           	psect	text98
 16975  004EC8                     __ptext98:
 16976                           	opt stack 0
 16977  004EC8                     _set_max_VL:
 16978                           	opt stack 0
 16979  004EC8  FFFF               	dw	65535	; assembler added errata NOP
 16980                           
 16981                           ;Get_Voltages.c: 106: VL_max=val;
 16982                           
 16983                           ;incstack = 0
 16984  004ECA  C019  F12B         	movff	set_max_VL@val,_VL_max
 16985  004ECE  C01A  F12C         	movff	set_max_VL@val+1,_VL_max+1
 16986  004ED2  C01B  F12D         	movff	set_max_VL@val+2,_VL_max+2
 16987  004ED6  0012               	return		;funcret
 16988  004ED8  FFFF               	dw	65535	; errata NOP
 16989  004EDA                     __end_of_set_max_VL:
 16990                           	opt stack 0
 16991                           tblptru	equ	0xFF8
 16992                           tblptrh	equ	0xFF7
 16993                           tblptrl	equ	0xFF6
 16994                           tablat	equ	0xFF5
 16995                           prodl	equ	0xFF3
 16996                           intcon	equ	0xFF2
 16997                           postinc0	equ	0xFEE
 16998                           wreg	equ	0xFE8
 16999                           indf2	equ	0xFDF
 17000                           postinc2	equ	0xFDE
 17001                           postdec2	equ	0xFDD
 17002                           plusw2	equ	0xFDB
 17003                           fsr2h	equ	0xFDA
 17004                           fsr2l	equ	0xFD9
 17005                           status	equ	0xFD8
 17006                           
 17007 ;; *************** function _set_Vin_zero *****************
 17008 ;; Defined at:
 17009 ;;		line 72 in file "Get_Voltages.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  val             3   24[COMRAM] float 
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;		None
 17014 ;; Return value:  Size  Location     Type
 17015 ;;                  1    wreg      void 
 17016 ;; Registers used:
 17017 ;;		None
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17023 ;;      Params:         3       0       0       0       0       0       0
 17024 ;;      Locals:         0       0       0       0       0       0       0
 17025 ;;      Temps:          0       0       0       0       0       0       0
 17026 ;;      Totals:         3       0       0       0       0       0       0
 17027 ;;Total ram usage:        3 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    1
 17030 ;; This function calls:
 17031 ;;		Nothing
 17032 ;; This function is called by:
 17033 ;;		_cal_analog
 17034 ;;		_Get_Variables
 17035 ;;		_main
 17036 ;; This function uses a non-reentrant model
 17037 ;;
 17038                           
 17039                           	psect	text99
 17040  004EB6                     __ptext99:
 17041                           	opt stack 0
 17042  004EB6                     _set_Vin_zero:
 17043                           	opt stack 0
 17044  004EB6  FFFF               	dw	65535	; assembler added errata NOP
 17045                           
 17046                           ;Get_Voltages.c: 73: Vin_zero=val;
 17047                           
 17048                           ;incstack = 0
 17049  004EB8  C019  F13A         	movff	set_Vin_zero@val,_Vin_zero
 17050  004EBC  C01A  F13B         	movff	set_Vin_zero@val+1,_Vin_zero+1
 17051  004EC0  C01B  F13C         	movff	set_Vin_zero@val+2,_Vin_zero+2
 17052  004EC4  0012               	return		;funcret
 17053  004EC6  FFFF               	dw	65535	; errata NOP
 17054  004EC8                     __end_of_set_Vin_zero:
 17055                           	opt stack 0
 17056                           tblptru	equ	0xFF8
 17057                           tblptrh	equ	0xFF7
 17058                           tblptrl	equ	0xFF6
 17059                           tablat	equ	0xFF5
 17060                           prodl	equ	0xFF3
 17061                           intcon	equ	0xFF2
 17062                           postinc0	equ	0xFEE
 17063                           wreg	equ	0xFE8
 17064                           indf2	equ	0xFDF
 17065                           postinc2	equ	0xFDE
 17066                           postdec2	equ	0xFDD
 17067                           plusw2	equ	0xFDB
 17068                           fsr2h	equ	0xFDA
 17069                           fsr2l	equ	0xFD9
 17070                           status	equ	0xFD8
 17071                           
 17072 ;; *************** function _set_Vin_span *****************
 17073 ;; Defined at:
 17074 ;;		line 86 in file "Get_Voltages.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  val             3   24[COMRAM] float 
 17077 ;; Auto vars:     Size  Location     Type
 17078 ;;		None
 17079 ;; Return value:  Size  Location     Type
 17080 ;;                  1    wreg      void 
 17081 ;; Registers used:
 17082 ;;		None
 17083 ;; Tracked objects:
 17084 ;;		On entry : 0/0
 17085 ;;		On exit  : 0/0
 17086 ;;		Unchanged: 0/0
 17087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17088 ;;      Params:         3       0       0       0       0       0       0
 17089 ;;      Locals:         0       0       0       0       0       0       0
 17090 ;;      Temps:          0       0       0       0       0       0       0
 17091 ;;      Totals:         3       0       0       0       0       0       0
 17092 ;;Total ram usage:        3 bytes
 17093 ;; Hardware stack levels used:    1
 17094 ;; Hardware stack levels required when called:    1
 17095 ;; This function calls:
 17096 ;;		Nothing
 17097 ;; This function is called by:
 17098 ;;		_cal_analog
 17099 ;;		_Get_Variables
 17100 ;;		_main
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           	psect	text100
 17105  004EA4                     __ptext100:
 17106                           	opt stack 0
 17107  004EA4                     _set_Vin_span:
 17108                           	opt stack 0
 17109  004EA4  FFFF               	dw	65535	; assembler added errata NOP
 17110                           
 17111                           ;Get_Voltages.c: 87: Vin_Span=val;
 17112                           
 17113                           ;incstack = 0
 17114  004EA6  C019  F12E         	movff	set_Vin_span@val,_Vin_Span
 17115  004EAA  C01A  F12F         	movff	set_Vin_span@val+1,_Vin_Span+1
 17116  004EAE  C01B  F130         	movff	set_Vin_span@val+2,_Vin_Span+2
 17117  004EB2  0012               	return		;funcret
 17118  004EB4  FFFF               	dw	65535	; errata NOP
 17119  004EB6                     __end_of_set_Vin_span:
 17120                           	opt stack 0
 17121                           tblptru	equ	0xFF8
 17122                           tblptrh	equ	0xFF7
 17123                           tblptrl	equ	0xFF6
 17124                           tablat	equ	0xFF5
 17125                           prodl	equ	0xFF3
 17126                           intcon	equ	0xFF2
 17127                           postinc0	equ	0xFEE
 17128                           wreg	equ	0xFE8
 17129                           indf2	equ	0xFDF
 17130                           postinc2	equ	0xFDE
 17131                           postdec2	equ	0xFDD
 17132                           plusw2	equ	0xFDB
 17133                           fsr2h	equ	0xFDA
 17134                           fsr2l	equ	0xFD9
 17135                           status	equ	0xFD8
 17136                           
 17137 ;; *************** function _set_VL3_zero *****************
 17138 ;; Defined at:
 17139 ;;		line 69 in file "Get_Voltages.c"
 17140 ;; Parameters:    Size  Location     Type
 17141 ;;  val             3   24[COMRAM] float 
 17142 ;; Auto vars:     Size  Location     Type
 17143 ;;		None
 17144 ;; Return value:  Size  Location     Type
 17145 ;;                  1    wreg      void 
 17146 ;; Registers used:
 17147 ;;		None
 17148 ;; Tracked objects:
 17149 ;;		On entry : 0/0
 17150 ;;		On exit  : 0/0
 17151 ;;		Unchanged: 0/0
 17152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17153 ;;      Params:         3       0       0       0       0       0       0
 17154 ;;      Locals:         0       0       0       0       0       0       0
 17155 ;;      Temps:          0       0       0       0       0       0       0
 17156 ;;      Totals:         3       0       0       0       0       0       0
 17157 ;;Total ram usage:        3 bytes
 17158 ;; Hardware stack levels used:    1
 17159 ;; Hardware stack levels required when called:    1
 17160 ;; This function calls:
 17161 ;;		Nothing
 17162 ;; This function is called by:
 17163 ;;		_cal_analog
 17164 ;;		_Get_Variables
 17165 ;;		_main
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           	psect	text101
 17170  004E92                     __ptext101:
 17171                           	opt stack 0
 17172  004E92                     _set_VL3_zero:
 17173                           	opt stack 0
 17174  004E92  FFFF               	dw	65535	; assembler added errata NOP
 17175                           
 17176                           ;Get_Voltages.c: 70: VL3_zero=val;
 17177                           
 17178                           ;incstack = 0
 17179  004E94  C019  F13D         	movff	set_VL3_zero@val,_VL3_zero
 17180  004E98  C01A  F13E         	movff	set_VL3_zero@val+1,_VL3_zero+1
 17181  004E9C  C01B  F13F         	movff	set_VL3_zero@val+2,_VL3_zero+2
 17182  004EA0  0012               	return		;funcret
 17183  004EA2  FFFF               	dw	65535	; errata NOP
 17184  004EA4                     __end_of_set_VL3_zero:
 17185                           	opt stack 0
 17186                           tblptru	equ	0xFF8
 17187                           tblptrh	equ	0xFF7
 17188                           tblptrl	equ	0xFF6
 17189                           tablat	equ	0xFF5
 17190                           prodl	equ	0xFF3
 17191                           intcon	equ	0xFF2
 17192                           postinc0	equ	0xFEE
 17193                           wreg	equ	0xFE8
 17194                           indf2	equ	0xFDF
 17195                           postinc2	equ	0xFDE
 17196                           postdec2	equ	0xFDD
 17197                           plusw2	equ	0xFDB
 17198                           fsr2h	equ	0xFDA
 17199                           fsr2l	equ	0xFD9
 17200                           status	equ	0xFD8
 17201                           
 17202 ;; *************** function _set_VL3_span *****************
 17203 ;; Defined at:
 17204 ;;		line 83 in file "Get_Voltages.c"
 17205 ;; Parameters:    Size  Location     Type
 17206 ;;  val             3   24[COMRAM] float 
 17207 ;; Auto vars:     Size  Location     Type
 17208 ;;		None
 17209 ;; Return value:  Size  Location     Type
 17210 ;;                  1    wreg      void 
 17211 ;; Registers used:
 17212 ;;		None
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17218 ;;      Params:         3       0       0       0       0       0       0
 17219 ;;      Locals:         0       0       0       0       0       0       0
 17220 ;;      Temps:          0       0       0       0       0       0       0
 17221 ;;      Totals:         3       0       0       0       0       0       0
 17222 ;;Total ram usage:        3 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    1
 17225 ;; This function calls:
 17226 ;;		Nothing
 17227 ;; This function is called by:
 17228 ;;		_cal_analog
 17229 ;;		_Get_Variables
 17230 ;;		_main
 17231 ;; This function uses a non-reentrant model
 17232 ;;
 17233                           
 17234                           	psect	text102
 17235  004E80                     __ptext102:
 17236                           	opt stack 0
 17237  004E80                     _set_VL3_span:
 17238                           	opt stack 0
 17239  004E80  FFFF               	dw	65535	; assembler added errata NOP
 17240                           
 17241                           ;Get_Voltages.c: 84: VL3_span=val;
 17242                           
 17243                           ;incstack = 0
 17244  004E82  C019  F131         	movff	set_VL3_span@val,_VL3_span
 17245  004E86  C01A  F132         	movff	set_VL3_span@val+1,_VL3_span+1
 17246  004E8A  C01B  F133         	movff	set_VL3_span@val+2,_VL3_span+2
 17247  004E8E  0012               	return		;funcret
 17248  004E90  FFFF               	dw	65535	; errata NOP
 17249  004E92                     __end_of_set_VL3_span:
 17250                           	opt stack 0
 17251                           tblptru	equ	0xFF8
 17252                           tblptrh	equ	0xFF7
 17253                           tblptrl	equ	0xFF6
 17254                           tablat	equ	0xFF5
 17255                           prodl	equ	0xFF3
 17256                           intcon	equ	0xFF2
 17257                           postinc0	equ	0xFEE
 17258                           wreg	equ	0xFE8
 17259                           indf2	equ	0xFDF
 17260                           postinc2	equ	0xFDE
 17261                           postdec2	equ	0xFDD
 17262                           plusw2	equ	0xFDB
 17263                           fsr2h	equ	0xFDA
 17264                           fsr2l	equ	0xFD9
 17265                           status	equ	0xFD8
 17266                           
 17267 ;; *************** function _set_VL2_zero *****************
 17268 ;; Defined at:
 17269 ;;		line 65 in file "Get_Voltages.c"
 17270 ;; Parameters:    Size  Location     Type
 17271 ;;  val             3   24[COMRAM] float 
 17272 ;; Auto vars:     Size  Location     Type
 17273 ;;		None
 17274 ;; Return value:  Size  Location     Type
 17275 ;;                  1    wreg      void 
 17276 ;; Registers used:
 17277 ;;		None
 17278 ;; Tracked objects:
 17279 ;;		On entry : 0/0
 17280 ;;		On exit  : 0/0
 17281 ;;		Unchanged: 0/0
 17282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17283 ;;      Params:         3       0       0       0       0       0       0
 17284 ;;      Locals:         0       0       0       0       0       0       0
 17285 ;;      Temps:          0       0       0       0       0       0       0
 17286 ;;      Totals:         3       0       0       0       0       0       0
 17287 ;;Total ram usage:        3 bytes
 17288 ;; Hardware stack levels used:    1
 17289 ;; Hardware stack levels required when called:    1
 17290 ;; This function calls:
 17291 ;;		Nothing
 17292 ;; This function is called by:
 17293 ;;		_cal_analog
 17294 ;;		_Get_Variables
 17295 ;;		_main
 17296 ;; This function uses a non-reentrant model
 17297 ;;
 17298                           
 17299                           	psect	text103
 17300  004E6E                     __ptext103:
 17301                           	opt stack 0
 17302  004E6E                     _set_VL2_zero:
 17303                           	opt stack 0
 17304  004E6E  FFFF               	dw	65535	; assembler added errata NOP
 17305                           
 17306                           ;Get_Voltages.c: 66: VL2_zero=val;
 17307                           
 17308                           ;incstack = 0
 17309  004E70  C019  F140         	movff	set_VL2_zero@val,_VL2_zero
 17310  004E74  C01A  F141         	movff	set_VL2_zero@val+1,_VL2_zero+1
 17311  004E78  C01B  F142         	movff	set_VL2_zero@val+2,_VL2_zero+2
 17312  004E7C  0012               	return		;funcret
 17313  004E7E  FFFF               	dw	65535	; errata NOP
 17314  004E80                     __end_of_set_VL2_zero:
 17315                           	opt stack 0
 17316                           tblptru	equ	0xFF8
 17317                           tblptrh	equ	0xFF7
 17318                           tblptrl	equ	0xFF6
 17319                           tablat	equ	0xFF5
 17320                           prodl	equ	0xFF3
 17321                           intcon	equ	0xFF2
 17322                           postinc0	equ	0xFEE
 17323                           wreg	equ	0xFE8
 17324                           indf2	equ	0xFDF
 17325                           postinc2	equ	0xFDE
 17326                           postdec2	equ	0xFDD
 17327                           plusw2	equ	0xFDB
 17328                           fsr2h	equ	0xFDA
 17329                           fsr2l	equ	0xFD9
 17330                           status	equ	0xFD8
 17331                           
 17332 ;; *************** function _set_VL2_span *****************
 17333 ;; Defined at:
 17334 ;;		line 79 in file "Get_Voltages.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;  val             3   24[COMRAM] float 
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;		None
 17339 ;; Return value:  Size  Location     Type
 17340 ;;                  1    wreg      void 
 17341 ;; Registers used:
 17342 ;;		None
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17348 ;;      Params:         3       0       0       0       0       0       0
 17349 ;;      Locals:         0       0       0       0       0       0       0
 17350 ;;      Temps:          0       0       0       0       0       0       0
 17351 ;;      Totals:         3       0       0       0       0       0       0
 17352 ;;Total ram usage:        3 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    1
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_cal_analog
 17359 ;;		_Get_Variables
 17360 ;;		_main
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           	psect	text104
 17365  004E5C                     __ptext104:
 17366                           	opt stack 0
 17367  004E5C                     _set_VL2_span:
 17368                           	opt stack 0
 17369  004E5C  FFFF               	dw	65535	; assembler added errata NOP
 17370                           
 17371                           ;Get_Voltages.c: 80: VL2_span=val;
 17372                           
 17373                           ;incstack = 0
 17374  004E5E  C019  F134         	movff	set_VL2_span@val,_VL2_span
 17375  004E62  C01A  F135         	movff	set_VL2_span@val+1,_VL2_span+1
 17376  004E66  C01B  F136         	movff	set_VL2_span@val+2,_VL2_span+2
 17377  004E6A  0012               	return		;funcret
 17378  004E6C  FFFF               	dw	65535	; errata NOP
 17379  004E6E                     __end_of_set_VL2_span:
 17380                           	opt stack 0
 17381                           tblptru	equ	0xFF8
 17382                           tblptrh	equ	0xFF7
 17383                           tblptrl	equ	0xFF6
 17384                           tablat	equ	0xFF5
 17385                           prodl	equ	0xFF3
 17386                           intcon	equ	0xFF2
 17387                           postinc0	equ	0xFEE
 17388                           wreg	equ	0xFE8
 17389                           indf2	equ	0xFDF
 17390                           postinc2	equ	0xFDE
 17391                           postdec2	equ	0xFDD
 17392                           plusw2	equ	0xFDB
 17393                           fsr2h	equ	0xFDA
 17394                           fsr2l	equ	0xFD9
 17395                           status	equ	0xFD8
 17396                           
 17397 ;; *************** function _set_VL1_zero *****************
 17398 ;; Defined at:
 17399 ;;		line 61 in file "Get_Voltages.c"
 17400 ;; Parameters:    Size  Location     Type
 17401 ;;  val             3   24[COMRAM] float 
 17402 ;; Auto vars:     Size  Location     Type
 17403 ;;		None
 17404 ;; Return value:  Size  Location     Type
 17405 ;;                  1    wreg      void 
 17406 ;; Registers used:
 17407 ;;		None
 17408 ;; Tracked objects:
 17409 ;;		On entry : 0/0
 17410 ;;		On exit  : 0/0
 17411 ;;		Unchanged: 0/0
 17412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17413 ;;      Params:         3       0       0       0       0       0       0
 17414 ;;      Locals:         0       0       0       0       0       0       0
 17415 ;;      Temps:          0       0       0       0       0       0       0
 17416 ;;      Totals:         3       0       0       0       0       0       0
 17417 ;;Total ram usage:        3 bytes
 17418 ;; Hardware stack levels used:    1
 17419 ;; Hardware stack levels required when called:    1
 17420 ;; This function calls:
 17421 ;;		Nothing
 17422 ;; This function is called by:
 17423 ;;		_cal_analog
 17424 ;;		_Get_Variables
 17425 ;;		_main
 17426 ;; This function uses a non-reentrant model
 17427 ;;
 17428                           
 17429                           	psect	text105
 17430  004E4A                     __ptext105:
 17431                           	opt stack 0
 17432  004E4A                     _set_VL1_zero:
 17433                           	opt stack 0
 17434  004E4A  FFFF               	dw	65535	; assembler added errata NOP
 17435                           
 17436                           ;Get_Voltages.c: 62: VL1_zero=val;
 17437                           
 17438                           ;incstack = 0
 17439  004E4C  C019  F143         	movff	set_VL1_zero@val,_VL1_zero
 17440  004E50  C01A  F144         	movff	set_VL1_zero@val+1,_VL1_zero+1
 17441  004E54  C01B  F145         	movff	set_VL1_zero@val+2,_VL1_zero+2
 17442  004E58  0012               	return		;funcret
 17443  004E5A  FFFF               	dw	65535	; errata NOP
 17444  004E5C                     __end_of_set_VL1_zero:
 17445                           	opt stack 0
 17446                           tblptru	equ	0xFF8
 17447                           tblptrh	equ	0xFF7
 17448                           tblptrl	equ	0xFF6
 17449                           tablat	equ	0xFF5
 17450                           prodl	equ	0xFF3
 17451                           intcon	equ	0xFF2
 17452                           postinc0	equ	0xFEE
 17453                           wreg	equ	0xFE8
 17454                           indf2	equ	0xFDF
 17455                           postinc2	equ	0xFDE
 17456                           postdec2	equ	0xFDD
 17457                           plusw2	equ	0xFDB
 17458                           fsr2h	equ	0xFDA
 17459                           fsr2l	equ	0xFD9
 17460                           status	equ	0xFD8
 17461                           
 17462 ;; *************** function _set_VL1_span *****************
 17463 ;; Defined at:
 17464 ;;		line 75 in file "Get_Voltages.c"
 17465 ;; Parameters:    Size  Location     Type
 17466 ;;  val             3   24[COMRAM] float 
 17467 ;; Auto vars:     Size  Location     Type
 17468 ;;		None
 17469 ;; Return value:  Size  Location     Type
 17470 ;;                  1    wreg      void 
 17471 ;; Registers used:
 17472 ;;		None
 17473 ;; Tracked objects:
 17474 ;;		On entry : 0/0
 17475 ;;		On exit  : 0/0
 17476 ;;		Unchanged: 0/0
 17477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17478 ;;      Params:         3       0       0       0       0       0       0
 17479 ;;      Locals:         0       0       0       0       0       0       0
 17480 ;;      Temps:          0       0       0       0       0       0       0
 17481 ;;      Totals:         3       0       0       0       0       0       0
 17482 ;;Total ram usage:        3 bytes
 17483 ;; Hardware stack levels used:    1
 17484 ;; Hardware stack levels required when called:    1
 17485 ;; This function calls:
 17486 ;;		Nothing
 17487 ;; This function is called by:
 17488 ;;		_cal_analog
 17489 ;;		_Get_Variables
 17490 ;;		_main
 17491 ;; This function uses a non-reentrant model
 17492 ;;
 17493                           
 17494                           	psect	text106
 17495  004E38                     __ptext106:
 17496                           	opt stack 0
 17497  004E38                     _set_VL1_span:
 17498                           	opt stack 0
 17499  004E38  FFFF               	dw	65535	; assembler added errata NOP
 17500                           
 17501                           ;Get_Voltages.c: 76: VL1_span=val;
 17502                           
 17503                           ;incstack = 0
 17504  004E3A  C019  F137         	movff	set_VL1_span@val,_VL1_span
 17505  004E3E  C01A  F138         	movff	set_VL1_span@val+1,_VL1_span+1
 17506  004E42  C01B  F139         	movff	set_VL1_span@val+2,_VL1_span+2
 17507  004E46  0012               	return		;funcret
 17508  004E48  FFFF               	dw	65535	; errata NOP
 17509  004E4A                     __end_of_set_VL1_span:
 17510                           	opt stack 0
 17511                           tblptru	equ	0xFF8
 17512                           tblptrh	equ	0xFF7
 17513                           tblptrl	equ	0xFF6
 17514                           tablat	equ	0xFF5
 17515                           prodl	equ	0xFF3
 17516                           intcon	equ	0xFF2
 17517                           postinc0	equ	0xFEE
 17518                           wreg	equ	0xFE8
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           plusw2	equ	0xFDB
 17523                           fsr2h	equ	0xFDA
 17524                           fsr2l	equ	0xFD9
 17525                           status	equ	0xFD8
 17526                           
 17527 ;; *************** function _set_PID_setpoint *****************
 17528 ;; Defined at:
 17529 ;;		line 113 in file "PID_Controller.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;  val             3   24[COMRAM] float 
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;		None
 17534 ;; Return value:  Size  Location     Type
 17535 ;;                  1    wreg      void 
 17536 ;; Registers used:
 17537 ;;		None
 17538 ;; Tracked objects:
 17539 ;;		On entry : 0/0
 17540 ;;		On exit  : 0/0
 17541 ;;		Unchanged: 0/0
 17542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17543 ;;      Params:         3       0       0       0       0       0       0
 17544 ;;      Locals:         0       0       0       0       0       0       0
 17545 ;;      Temps:          0       0       0       0       0       0       0
 17546 ;;      Totals:         3       0       0       0       0       0       0
 17547 ;;Total ram usage:        3 bytes
 17548 ;; Hardware stack levels used:    1
 17549 ;; Hardware stack levels required when called:    1
 17550 ;; This function calls:
 17551 ;;		Nothing
 17552 ;; This function is called by:
 17553 ;;		_set_list
 17554 ;;		_Get_Variables
 17555 ;;		_main
 17556 ;; This function uses a non-reentrant model
 17557 ;;
 17558                           
 17559                           	psect	text107
 17560  004E26                     __ptext107:
 17561                           	opt stack 0
 17562  004E26                     _set_PID_setpoint:
 17563                           	opt stack 0
 17564  004E26  FFFF               	dw	65535	; assembler added errata NOP
 17565                           
 17566                           ;PID_Controller.c: 114: setpoint=val;
 17567                           
 17568                           ;incstack = 0
 17569  004E28  C019  F107         	movff	set_PID_setpoint@val,_setpoint
 17570  004E2C  C01A  F108         	movff	set_PID_setpoint@val+1,_setpoint+1
 17571  004E30  C01B  F109         	movff	set_PID_setpoint@val+2,_setpoint+2
 17572                           
 17573                           ;PID_Controller.c: 115: return;
 17574  004E34  0012               	return		;funcret
 17575  004E36  FFFF               	dw	65535	; errata NOP
 17576  004E38                     __end_of_set_PID_setpoint:
 17577                           	opt stack 0
 17578                           tblptru	equ	0xFF8
 17579                           tblptrh	equ	0xFF7
 17580                           tblptrl	equ	0xFF6
 17581                           tablat	equ	0xFF5
 17582                           prodl	equ	0xFF3
 17583                           intcon	equ	0xFF2
 17584                           postinc0	equ	0xFEE
 17585                           wreg	equ	0xFE8
 17586                           indf2	equ	0xFDF
 17587                           postinc2	equ	0xFDE
 17588                           postdec2	equ	0xFDD
 17589                           plusw2	equ	0xFDB
 17590                           fsr2h	equ	0xFDA
 17591                           fsr2l	equ	0xFD9
 17592                           status	equ	0xFD8
 17593                           
 17594 ;; *************** function _set_PID_T *****************
 17595 ;; Defined at:
 17596 ;;		line 107 in file "PID_Controller.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;  val             3   24[COMRAM] float 
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;		None
 17601 ;; Return value:  Size  Location     Type
 17602 ;;                  1    wreg      void 
 17603 ;; Registers used:
 17604 ;;		None
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17610 ;;      Params:         3       0       0       0       0       0       0
 17611 ;;      Locals:         0       0       0       0       0       0       0
 17612 ;;      Temps:          0       0       0       0       0       0       0
 17613 ;;      Totals:         3       0       0       0       0       0       0
 17614 ;;Total ram usage:        3 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; Hardware stack levels required when called:    1
 17617 ;; This function calls:
 17618 ;;		Nothing
 17619 ;; This function is called by:
 17620 ;;		_set_list
 17621 ;;		_Get_Variables
 17622 ;;		_main
 17623 ;; This function uses a non-reentrant model
 17624 ;;
 17625                           
 17626                           	psect	text108
 17627  004E14                     __ptext108:
 17628                           	opt stack 0
 17629  004E14                     _set_PID_T:
 17630                           	opt stack 0
 17631  004E14  FFFF               	dw	65535	; assembler added errata NOP
 17632                           
 17633                           ;PID_Controller.c: 108: T_sample=val;
 17634                           
 17635                           ;incstack = 0
 17636  004E16  C019  F119         	movff	set_PID_T@val,_T_sample
 17637  004E1A  C01A  F11A         	movff	set_PID_T@val+1,_T_sample+1
 17638  004E1E  C01B  F11B         	movff	set_PID_T@val+2,_T_sample+2
 17639                           
 17640                           ;PID_Controller.c: 109: return;
 17641  004E22  0012               	return		;funcret
 17642  004E24  FFFF               	dw	65535	; errata NOP
 17643  004E26                     __end_of_set_PID_T:
 17644                           	opt stack 0
 17645                           tblptru	equ	0xFF8
 17646                           tblptrh	equ	0xFF7
 17647                           tblptrl	equ	0xFF6
 17648                           tablat	equ	0xFF5
 17649                           prodl	equ	0xFF3
 17650                           intcon	equ	0xFF2
 17651                           postinc0	equ	0xFEE
 17652                           wreg	equ	0xFE8
 17653                           indf2	equ	0xFDF
 17654                           postinc2	equ	0xFDE
 17655                           postdec2	equ	0xFDD
 17656                           plusw2	equ	0xFDB
 17657                           fsr2h	equ	0xFDA
 17658                           fsr2l	equ	0xFD9
 17659                           status	equ	0xFD8
 17660                           
 17661 ;; *************** function _set_PID_Kp *****************
 17662 ;; Defined at:
 17663 ;;		line 88 in file "PID_Controller.c"
 17664 ;; Parameters:    Size  Location     Type
 17665 ;;  val             3   24[COMRAM] float 
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;		None
 17668 ;; Return value:  Size  Location     Type
 17669 ;;                  1    wreg      void 
 17670 ;; Registers used:
 17671 ;;		wreg, status,2
 17672 ;; Tracked objects:
 17673 ;;		On entry : 0/0
 17674 ;;		On exit  : 0/0
 17675 ;;		Unchanged: 0/0
 17676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17677 ;;      Params:         3       0       0       0       0       0       0
 17678 ;;      Locals:         0       0       0       0       0       0       0
 17679 ;;      Temps:          0       0       0       0       0       0       0
 17680 ;;      Totals:         3       0       0       0       0       0       0
 17681 ;;Total ram usage:        3 bytes
 17682 ;; Hardware stack levels used:    1
 17683 ;; Hardware stack levels required when called:    1
 17684 ;; This function calls:
 17685 ;;		Nothing
 17686 ;; This function is called by:
 17687 ;;		_set_list
 17688 ;;		_Get_Variables
 17689 ;;		_main
 17690 ;; This function uses a non-reentrant model
 17691 ;;
 17692                           
 17693                           	psect	text109
 17694  005200                     __ptext109:
 17695                           	opt stack 0
 17696  005200                     _set_PID_Kp:
 17697                           	opt stack 0
 17698  005200  FFFF               	dw	65535	; assembler added errata NOP
 17699                           
 17700                           ;PID_Controller.c: 89: Kp=val;
 17701                           
 17702                           ;incstack = 0
 17703  005202  C019  F11F         	movff	set_PID_Kp@val,_Kp
 17704  005206  C01A  F120         	movff	set_PID_Kp@val+1,_Kp+1
 17705  00520A  C01B  F121         	movff	set_PID_Kp@val+2,_Kp+2
 17706                           
 17707                           ;PID_Controller.c: 90: last_integral=0.0;
 17708  00520E  0E00               	movlw	0
 17709  005210  0101               	movlb	1	; () banked
 17710  005212  6F0A               	movwf	_last_integral& (0+255),b
 17711  005214  0E00               	movlw	0
 17712  005216  0101               	movlb	1	; () banked
 17713  005218  6F0B               	movwf	(_last_integral+1)& (0+255),b
 17714  00521A  0E00               	movlw	0
 17715  00521C  0101               	movlb	1	; () banked
 17716  00521E  6F0C               	movwf	(_last_integral+2)& (0+255),b
 17717                           
 17718                           ; BSR set to: 1
 17719                           
 17720                           ; BSR set to: 1
 17721                           ;PID_Controller.c: 91: return;
 17722  005220  0012               	return		;funcret
 17723  005222  FFFF               	dw	65535	; errata NOP
 17724  005224                     __end_of_set_PID_Kp:
 17725                           	opt stack 0
 17726                           tblptru	equ	0xFF8
 17727                           tblptrh	equ	0xFF7
 17728                           tblptrl	equ	0xFF6
 17729                           tablat	equ	0xFF5
 17730                           prodl	equ	0xFF3
 17731                           intcon	equ	0xFF2
 17732                           postinc0	equ	0xFEE
 17733                           wreg	equ	0xFE8
 17734                           indf2	equ	0xFDF
 17735                           postinc2	equ	0xFDE
 17736                           postdec2	equ	0xFDD
 17737                           plusw2	equ	0xFDB
 17738                           fsr2h	equ	0xFDA
 17739                           fsr2l	equ	0xFD9
 17740                           status	equ	0xFD8
 17741                           
 17742 ;; *************** function _set_PID_Ki *****************
 17743 ;; Defined at:
 17744 ;;		line 95 in file "PID_Controller.c"
 17745 ;; Parameters:    Size  Location     Type
 17746 ;;  val             3   24[COMRAM] float 
 17747 ;; Auto vars:     Size  Location     Type
 17748 ;;		None
 17749 ;; Return value:  Size  Location     Type
 17750 ;;                  1    wreg      void 
 17751 ;; Registers used:
 17752 ;;		None
 17753 ;; Tracked objects:
 17754 ;;		On entry : 0/0
 17755 ;;		On exit  : 0/0
 17756 ;;		Unchanged: 0/0
 17757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17758 ;;      Params:         3       0       0       0       0       0       0
 17759 ;;      Locals:         0       0       0       0       0       0       0
 17760 ;;      Temps:          0       0       0       0       0       0       0
 17761 ;;      Totals:         3       0       0       0       0       0       0
 17762 ;;Total ram usage:        3 bytes
 17763 ;; Hardware stack levels used:    1
 17764 ;; Hardware stack levels required when called:    1
 17765 ;; This function calls:
 17766 ;;		Nothing
 17767 ;; This function is called by:
 17768 ;;		_set_list
 17769 ;;		_Get_Variables
 17770 ;;		_main
 17771 ;; This function uses a non-reentrant model
 17772 ;;
 17773                           
 17774                           	psect	text110
 17775  004E02                     __ptext110:
 17776                           	opt stack 0
 17777  004E02                     _set_PID_Ki:
 17778                           	opt stack 0
 17779  004E02  FFFF               	dw	65535	; assembler added errata NOP
 17780                           
 17781                           ;PID_Controller.c: 96: ti=val;
 17782                           
 17783                           ; BSR set to: 1
 17784                           ;incstack = 0
 17785  004E04  C019  F030         	movff	set_PID_Ki@val,_ti
 17786  004E08  C01A  F031         	movff	set_PID_Ki@val+1,_ti+1
 17787  004E0C  C01B  F032         	movff	set_PID_Ki@val+2,_ti+2
 17788                           
 17789                           ;PID_Controller.c: 97: return;
 17790  004E10  0012               	return		;funcret
 17791  004E12  FFFF               	dw	65535	; errata NOP
 17792  004E14                     __end_of_set_PID_Ki:
 17793                           	opt stack 0
 17794                           tblptru	equ	0xFF8
 17795                           tblptrh	equ	0xFF7
 17796                           tblptrl	equ	0xFF6
 17797                           tablat	equ	0xFF5
 17798                           prodl	equ	0xFF3
 17799                           intcon	equ	0xFF2
 17800                           postinc0	equ	0xFEE
 17801                           wreg	equ	0xFE8
 17802                           indf2	equ	0xFDF
 17803                           postinc2	equ	0xFDE
 17804                           postdec2	equ	0xFDD
 17805                           plusw2	equ	0xFDB
 17806                           fsr2h	equ	0xFDA
 17807                           fsr2l	equ	0xFD9
 17808                           status	equ	0xFD8
 17809                           
 17810 ;; *************** function _set_PID_Kd *****************
 17811 ;; Defined at:
 17812 ;;		line 101 in file "PID_Controller.c"
 17813 ;; Parameters:    Size  Location     Type
 17814 ;;  val             3   24[COMRAM] float 
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;		None
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  1    wreg      void 
 17819 ;; Registers used:
 17820 ;;		None
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17826 ;;      Params:         3       0       0       0       0       0       0
 17827 ;;      Locals:         0       0       0       0       0       0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0
 17829 ;;      Totals:         3       0       0       0       0       0       0
 17830 ;;Total ram usage:        3 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; Hardware stack levels required when called:    1
 17833 ;; This function calls:
 17834 ;;		Nothing
 17835 ;; This function is called by:
 17836 ;;		_set_list
 17837 ;;		_Get_Variables
 17838 ;;		_main
 17839 ;; This function uses a non-reentrant model
 17840 ;;
 17841                           
 17842                           	psect	text111
 17843  004DF0                     __ptext111:
 17844                           	opt stack 0
 17845  004DF0                     _set_PID_Kd:
 17846                           	opt stack 0
 17847  004DF0  FFFF               	dw	65535	; assembler added errata NOP
 17848                           
 17849                           ;PID_Controller.c: 102: td=val;
 17850                           
 17851                           ;incstack = 0
 17852  004DF2  C019  F11C         	movff	set_PID_Kd@val,_td
 17853  004DF6  C01A  F11D         	movff	set_PID_Kd@val+1,_td+1
 17854  004DFA  C01B  F11E         	movff	set_PID_Kd@val+2,_td+2
 17855                           
 17856                           ;PID_Controller.c: 103: return;
 17857  004DFE  0012               	return		;funcret
 17858  004E00  FFFF               	dw	65535	; errata NOP
 17859  004E02                     __end_of_set_PID_Kd:
 17860                           	opt stack 0
 17861                           tblptru	equ	0xFF8
 17862                           tblptrh	equ	0xFF7
 17863                           tblptrl	equ	0xFF6
 17864                           tablat	equ	0xFF5
 17865                           prodl	equ	0xFF3
 17866                           intcon	equ	0xFF2
 17867                           postinc0	equ	0xFEE
 17868                           wreg	equ	0xFE8
 17869                           indf2	equ	0xFDF
 17870                           postinc2	equ	0xFDE
 17871                           postdec2	equ	0xFDD
 17872                           plusw2	equ	0xFDB
 17873                           fsr2h	equ	0xFDA
 17874                           fsr2l	equ	0xFD9
 17875                           status	equ	0xFD8
 17876                           
 17877 ;; *************** function _set_Deadband *****************
 17878 ;; Defined at:
 17879 ;;		line 82 in file "PID_Controller.c"
 17880 ;; Parameters:    Size  Location     Type
 17881 ;;  val             3   24[COMRAM] float 
 17882 ;; Auto vars:     Size  Location     Type
 17883 ;;		None
 17884 ;; Return value:  Size  Location     Type
 17885 ;;                  1    wreg      void 
 17886 ;; Registers used:
 17887 ;;		None
 17888 ;; Tracked objects:
 17889 ;;		On entry : 0/0
 17890 ;;		On exit  : 0/0
 17891 ;;		Unchanged: 0/0
 17892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17893 ;;      Params:         3       0       0       0       0       0       0
 17894 ;;      Locals:         0       0       0       0       0       0       0
 17895 ;;      Temps:          0       0       0       0       0       0       0
 17896 ;;      Totals:         3       0       0       0       0       0       0
 17897 ;;Total ram usage:        3 bytes
 17898 ;; Hardware stack levels used:    1
 17899 ;; Hardware stack levels required when called:    1
 17900 ;; This function calls:
 17901 ;;		Nothing
 17902 ;; This function is called by:
 17903 ;;		_set_list
 17904 ;;		_Get_Variables
 17905 ;;		_main
 17906 ;; This function uses a non-reentrant model
 17907 ;;
 17908                           
 17909                           	psect	text112
 17910  004DDE                     __ptext112:
 17911                           	opt stack 0
 17912  004DDE                     _set_Deadband:
 17913                           	opt stack 0
 17914  004DDE  FFFF               	dw	65535	; assembler added errata NOP
 17915                           
 17916                           ;PID_Controller.c: 83: deadband=val;
 17917                           
 17918                           ;incstack = 0
 17919  004DE0  C019  F104         	movff	set_Deadband@val,_deadband
 17920  004DE4  C01A  F105         	movff	set_Deadband@val+1,_deadband+1
 17921  004DE8  C01B  F106         	movff	set_Deadband@val+2,_deadband+2
 17922  004DEC  0012               	return		;funcret
 17923  004DEE  FFFF               	dw	65535	; errata NOP
 17924  004DF0                     __end_of_set_Deadband:
 17925                           	opt stack 0
 17926                           tblptru	equ	0xFF8
 17927                           tblptrh	equ	0xFF7
 17928                           tblptrl	equ	0xFF6
 17929                           tablat	equ	0xFF5
 17930                           prodl	equ	0xFF3
 17931                           intcon	equ	0xFF2
 17932                           postinc0	equ	0xFEE
 17933                           wreg	equ	0xFE8
 17934                           indf2	equ	0xFDF
 17935                           postinc2	equ	0xFDE
 17936                           postdec2	equ	0xFDD
 17937                           plusw2	equ	0xFDB
 17938                           fsr2h	equ	0xFDA
 17939                           fsr2l	equ	0xFD9
 17940                           status	equ	0xFD8
 17941                           
 17942 ;; *************** function _rd_string_EE *****************
 17943 ;; Defined at:
 17944 ;;		line 24 in file "EEprom.c"
 17945 ;; Parameters:    Size  Location     Type
 17946 ;;  addr            1    wreg     unsigned char 
 17947 ;;  lenght          1   25[COMRAM] unsigned char 
 17948 ;;  buffer          2   26[COMRAM] PTR unsigned char 
 17949 ;;		 -> Get_Variables@data(53), 
 17950 ;; Auto vars:     Size  Location     Type
 17951 ;;  addr            1   28[COMRAM] unsigned char 
 17952 ;;  i               1   29[COMRAM] unsigned char 
 17953 ;; Return value:  Size  Location     Type
 17954 ;;                  1    wreg      void 
 17955 ;; Registers used:
 17956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17962 ;;      Params:         3       0       0       0       0       0       0
 17963 ;;      Locals:         2       0       0       0       0       0       0
 17964 ;;      Temps:          0       0       0       0       0       0       0
 17965 ;;      Totals:         5       0       0       0       0       0       0
 17966 ;;Total ram usage:        5 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; Hardware stack levels required when called:    2
 17969 ;; This function calls:
 17970 ;;		_rd_byte_EE
 17971 ;; This function is called by:
 17972 ;;		_Get_Variables
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           	psect	text113
 17977  005424                     __ptext113:
 17978                           	opt stack 0
 17979  005424                     _rd_string_EE:
 17980                           	opt stack 0
 17981  005424  FFFF               	dw	65535	; assembler added errata NOP
 17982                           
 17983                           ;incstack = 0
 17984                           ;rd_string_EE@addr stored from wreg
 17985  005426  6E1D               	movwf	rd_string_EE@addr,c
 17986                           
 17987                           ;EEprom.c: 26: char i;
 17988                           ;EEprom.c: 28: for(i=0;i<lenght;i++)
 17989  005428  0E00               	movlw	0
 17990  00542A  6E1E               	movwf	rd_string_EE@i,c
 17991  00542C  D00D               	goto	l293
 17992  00542E  FFFF               	dw	65535	; assembler added errata NOP
 17993                           
 17994                           ;EEprom.c: 29: *buffer++=rd_byte_EE(addr++);
 17995  005430  501D               	movf	rd_string_EE@addr,w,c
 17996  005432  EC2B  F028         	call	_rd_byte_EE
 17997  005436  C01B  FFD9         	movff	rd_string_EE@buffer,fsr2l
 17998  00543A  C01C  FFDA         	movff	rd_string_EE@buffer+1,fsr2h
 17999  00543E  6EDF               	movwf	indf2,c
 18000  005440  2A1D               	incf	rd_string_EE@addr,f,c
 18001  005442  4A1B               	infsnz	rd_string_EE@buffer,f,c
 18002  005444  2A1C               	incf	rd_string_EE@buffer+1,f,c
 18003  005446  2A1E               	incf	rd_string_EE@i,f,c
 18004  005448                     l293:
 18005  005448  FFFF               	dw	65535	; assembler added errata NOP
 18006  00544A  501A               	movf	rd_string_EE@lenght,w,c
 18007  00544C  5C1E               	subwf	rd_string_EE@i,w,c
 18008  00544E  B0D8               	btfsc	status,0,c
 18009  005450  0012               	return		;funcret
 18010  005452  FFFF               	dw	65535	; assembler added errata NOP
 18011  005454  D7EC               	goto	l294
 18012  005456  FFFF               	dw	65535	; errata NOP
 18013  005458                     __end_of_rd_string_EE:
 18014                           	opt stack 0
 18015                           tblptru	equ	0xFF8
 18016                           tblptrh	equ	0xFF7
 18017                           tblptrl	equ	0xFF6
 18018                           tablat	equ	0xFF5
 18019                           prodl	equ	0xFF3
 18020                           intcon	equ	0xFF2
 18021                           postinc0	equ	0xFEE
 18022                           wreg	equ	0xFE8
 18023                           indf2	equ	0xFDF
 18024                           postinc2	equ	0xFDE
 18025                           postdec2	equ	0xFDD
 18026                           plusw2	equ	0xFDB
 18027                           fsr2h	equ	0xFDA
 18028                           fsr2l	equ	0xFD9
 18029                           status	equ	0xFD8
 18030                           
 18031 ;; *************** function _rd_byte_EE *****************
 18032 ;; Defined at:
 18033 ;;		line 34 in file "EEprom.c"
 18034 ;; Parameters:    Size  Location     Type
 18035 ;;  addr            1    wreg     unsigned char 
 18036 ;; Auto vars:     Size  Location     Type
 18037 ;;  addr            1   24[COMRAM] unsigned char 
 18038 ;; Return value:  Size  Location     Type
 18039 ;;                  1    wreg      unsigned char 
 18040 ;; Registers used:
 18041 ;;		wreg, status,2
 18042 ;; Tracked objects:
 18043 ;;		On entry : 0/0
 18044 ;;		On exit  : 0/0
 18045 ;;		Unchanged: 0/0
 18046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18047 ;;      Params:         0       0       0       0       0       0       0
 18048 ;;      Locals:         1       0       0       0       0       0       0
 18049 ;;      Temps:          0       0       0       0       0       0       0
 18050 ;;      Totals:         1       0       0       0       0       0       0
 18051 ;;Total ram usage:        1 bytes
 18052 ;; Hardware stack levels used:    1
 18053 ;; Hardware stack levels required when called:    1
 18054 ;; This function calls:
 18055 ;;		Nothing
 18056 ;; This function is called by:
 18057 ;;		_rd_string_EE
 18058 ;; This function uses a non-reentrant model
 18059 ;;
 18060                           
 18061                           	psect	text114
 18062  005056                     __ptext114:
 18063                           	opt stack 0
 18064  005056                     _rd_byte_EE:
 18065                           	opt stack 0
 18066  005056  FFFF               	dw	65535	; assembler added errata NOP
 18067                           
 18068                           ;incstack = 0
 18069                           ;rd_byte_EE@addr stored from wreg
 18070  005058  6E19               	movwf	rd_byte_EE@addr,c
 18071                           
 18072                           ;EEprom.c: 36: EEADR = addr;
 18073  00505A  C019  FFA9         	movff	rd_byte_EE@addr,4009	;volatile
 18074                           
 18075                           ;EEprom.c: 37: EECON1bits.EEPGD = 0;
 18076  00505E  9EA6               	bcf	4006,7,c	;volatile
 18077                           
 18078                           ;EEprom.c: 38: EECON1bits.CFGS=0;
 18079  005060  9CA6               	bcf	4006,6,c	;volatile
 18080                           
 18081                           ;EEprom.c: 39: EECON1bits.RD = 1;
 18082  005062  80A6               	bsf	4006,0,c	;volatile
 18083                           
 18084                           ;EEprom.c: 40: return(EEDATA);
 18085  005064  50A8               	movf	4008,w,c	;volatile
 18086  005066  0012               	return		;funcret
 18087  005068  FFFF               	dw	65535	; errata NOP
 18088  00506A                     __end_of_rd_byte_EE:
 18089                           	opt stack 0
 18090                           tblptru	equ	0xFF8
 18091                           tblptrh	equ	0xFF7
 18092                           tblptrl	equ	0xFF6
 18093                           tablat	equ	0xFF5
 18094                           prodl	equ	0xFF3
 18095                           intcon	equ	0xFF2
 18096                           postinc0	equ	0xFEE
 18097                           wreg	equ	0xFE8
 18098                           indf2	equ	0xFDF
 18099                           postinc2	equ	0xFDE
 18100                           postdec2	equ	0xFDD
 18101                           plusw2	equ	0xFDB
 18102                           fsr2h	equ	0xFDA
 18103                           fsr2l	equ	0xFD9
 18104                           status	equ	0xFD8
 18105                           
 18106 ;; *************** function _Set_LP_RC_constant *****************
 18107 ;; Defined at:
 18108 ;;		line 55 in file "Filters.c"
 18109 ;; Parameters:    Size  Location     Type
 18110 ;;  val             3   24[COMRAM] float 
 18111 ;; Auto vars:     Size  Location     Type
 18112 ;;		None
 18113 ;; Return value:  Size  Location     Type
 18114 ;;                  1    wreg      void 
 18115 ;; Registers used:
 18116 ;;		None
 18117 ;; Tracked objects:
 18118 ;;		On entry : 0/0
 18119 ;;		On exit  : 0/0
 18120 ;;		Unchanged: 0/0
 18121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18122 ;;      Params:         3       0       0       0       0       0       0
 18123 ;;      Locals:         0       0       0       0       0       0       0
 18124 ;;      Temps:          0       0       0       0       0       0       0
 18125 ;;      Totals:         3       0       0       0       0       0       0
 18126 ;;Total ram usage:        3 bytes
 18127 ;; Hardware stack levels used:    1
 18128 ;; Hardware stack levels required when called:    1
 18129 ;; This function calls:
 18130 ;;		Nothing
 18131 ;; This function is called by:
 18132 ;;		_set_list
 18133 ;;		_Get_Variables
 18134 ;;		_main
 18135 ;; This function uses a non-reentrant model
 18136 ;;
 18137                           
 18138                           	psect	text115
 18139  004DCC                     __ptext115:
 18140                           	opt stack 0
 18141  004DCC                     _Set_LP_RC_constant:
 18142                           	opt stack 0
 18143  004DCC  FFFF               	dw	65535	; assembler added errata NOP
 18144                           
 18145                           ;Filters.c: 57: k1=val;
 18146                           
 18147                           ;incstack = 0
 18148  004DCE  C019  F03F         	movff	Set_LP_RC_constant@val,_k1
 18149  004DD2  C01A  F040         	movff	Set_LP_RC_constant@val+1,_k1+1
 18150  004DD6  C01B  F041         	movff	Set_LP_RC_constant@val+2,_k1+2
 18151  004DDA  0012               	return		;funcret
 18152  004DDC  FFFF               	dw	65535	; errata NOP
 18153  004DDE                     __end_of_Set_LP_RC_constant:
 18154                           	opt stack 0
 18155                           tblptru	equ	0xFF8
 18156                           tblptrh	equ	0xFF7
 18157                           tblptrl	equ	0xFF6
 18158                           tablat	equ	0xFF5
 18159                           prodl	equ	0xFF3
 18160                           intcon	equ	0xFF2
 18161                           postinc0	equ	0xFEE
 18162                           wreg	equ	0xFE8
 18163                           indf2	equ	0xFDF
 18164                           postinc2	equ	0xFDE
 18165                           postdec2	equ	0xFDD
 18166                           plusw2	equ	0xFDB
 18167                           fsr2h	equ	0xFDA
 18168                           fsr2l	equ	0xFD9
 18169                           status	equ	0xFD8
 18170                           
 18171 ;; *************** function _Display_Data *****************
 18172 ;; Defined at:
 18173 ;;		line 216 in file "main.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;		None
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  buffer         20    0[BANK1 ] unsigned char [20]
 18178 ;;  buff_len        1   20[BANK1 ] unsigned char 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      void 
 18181 ;; Registers used:
 18182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18188 ;;      Params:         0       0       0       0       0       0       0
 18189 ;;      Locals:         0       0      21       0       0       0       0
 18190 ;;      Temps:          0       0       0       0       0       0       0
 18191 ;;      Totals:         0       0      21       0       0       0       0
 18192 ;;Total ram usage:       21 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    6
 18195 ;; This function calls:
 18196 ;;		_Get_Voltage_VL1
 18197 ;;		_Get_Voltage_VL2
 18198 ;;		_Get_Voltage_VL3
 18199 ;;		_Get_Voltage_Vin
 18200 ;;		_LCD_SetCursor_Position
 18201 ;;		_LCD_WriteStr
 18202 ;;		_get_max
 18203 ;;		_get_min
 18204 ;;		_sprintf
 18205 ;; This function is called by:
 18206 ;;		_main
 18207 ;; This function uses a non-reentrant model
 18208 ;;
 18209                           
 18210                           	psect	text116
 18211  003886                     __ptext116:
 18212                           	opt stack 0
 18213  003886                     _Display_Data:
 18214                           	opt stack 0
 18215  003886  FFFF               	dw	65535	; assembler added errata NOP
 18216                           
 18217                           ;main.c: 218: char buff_len,buffer[20];
 18218                           ;main.c: 220: LCD_SetCursor_Position(1,1);
 18219                           
 18220                           ;incstack = 0
 18221  003888  0E01               	movlw	1
 18222  00388A  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18223  00388C  0E01               	movlw	1
 18224  00388E  ECCA  F02B         	call	_LCD_SetCursor_Position
 18225                           
 18226                           ;main.c: 221: buff_len=sprintf(buffer,"V_Out (LN1-LN2-LN3)");
 18227  003892  0EBB               	movlw	low Display_Data@buffer
 18228  003894  0100               	movlb	0	; () banked
 18229  003896  6FC4               	movwf	sprintf@wh& (0+255),b
 18230  003898  0E01               	movlw	high Display_Data@buffer
 18231  00389A  0100               	movlb	0	; () banked
 18232  00389C  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18233  00389E  0EC2               	movlw	low STR_79
 18234  0038A0  0100               	movlb	0	; () banked
 18235  0038A2  6FC6               	movwf	sprintf@f& (0+255),b
 18236  0038A4  0E7E               	movlw	high STR_79
 18237  0038A6  0100               	movlb	0	; () banked
 18238  0038A8  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18239  0038AA  EC8D  F02F         	call	_sprintf	;wreg free
 18240  0038AE  0100               	movlb	0	; () banked
 18241  0038B0  51C4               	movf	?_sprintf& (0+255),w,b
 18242  0038B2  0101               	movlb	1	; () banked
 18243  0038B4  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18244                           
 18245                           ; BSR set to: 1
 18246                           ;main.c: 222: LCD_WriteStr(buffer,buff_len);
 18247  0038B6  0EBB               	movlw	low Display_Data@buffer
 18248  0038B8  6E1B               	movwf	LCD_WriteStr@Str,c
 18249  0038BA  0E01               	movlw	high Display_Data@buffer
 18250  0038BC  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18251  0038BE  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18252  0038C2  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18253                           
 18254                           ;main.c: 224: LCD_SetCursor_Position(2,1);
 18255  0038C6  0E01               	movlw	1
 18256  0038C8  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18257  0038CA  0E02               	movlw	2
 18258  0038CC  ECCA  F02B         	call	_LCD_SetCursor_Position
 18259                           
 18260                           ;main.c: 225: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL1());
 18261  0038D0  0EBB               	movlw	low Display_Data@buffer
 18262  0038D2  0100               	movlb	0	; () banked
 18263  0038D4  6FC4               	movwf	sprintf@wh& (0+255),b
 18264  0038D6  0E01               	movlw	high Display_Data@buffer
 18265  0038D8  0100               	movlb	0	; () banked
 18266  0038DA  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18267  0038DC  0E9B               	movlw	low STR_80
 18268  0038DE  0100               	movlb	0	; () banked
 18269  0038E0  6FC6               	movwf	sprintf@f& (0+255),b
 18270  0038E2  0E7F               	movlw	high STR_80
 18271  0038E4  0100               	movlb	0	; () banked
 18272  0038E6  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18273  0038E8  EC9E  F026         	call	_Get_Voltage_VL1	;wreg free
 18274  0038EC  C019  F0C8         	movff	?_Get_Voltage_VL1,?_sprintf+4
 18275  0038F0  C01A  F0C9         	movff	?_Get_Voltage_VL1+1,?_sprintf+5
 18276  0038F4  C01B  F0CA         	movff	?_Get_Voltage_VL1+2,?_sprintf+6
 18277  0038F8  EC8D  F02F         	call	_sprintf	;wreg free
 18278  0038FC  0100               	movlb	0	; () banked
 18279  0038FE  51C4               	movf	?_sprintf& (0+255),w,b
 18280  003900  0101               	movlb	1	; () banked
 18281  003902  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18282                           
 18283                           ;main.c: 226: LCD_WriteStr(buffer,buff_len);
 18284  003904  0EBB               	movlw	low Display_Data@buffer
 18285  003906  6E1B               	movwf	LCD_WriteStr@Str,c
 18286  003908  0E01               	movlw	high Display_Data@buffer
 18287  00390A  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18288  00390C  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18289  003910  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18290                           
 18291                           ;main.c: 228: LCD_SetCursor_Position(2,8);
 18292  003914  0E08               	movlw	8
 18293  003916  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18294  003918  0E02               	movlw	2
 18295  00391A  ECCA  F02B         	call	_LCD_SetCursor_Position
 18296                           
 18297                           ;main.c: 229: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL2());
 18298  00391E  0EBB               	movlw	low Display_Data@buffer
 18299  003920  0100               	movlb	0	; () banked
 18300  003922  6FC4               	movwf	sprintf@wh& (0+255),b
 18301  003924  0E01               	movlw	high Display_Data@buffer
 18302  003926  0100               	movlb	0	; () banked
 18303  003928  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18304  00392A  0E9B               	movlw	low STR_80
 18305  00392C  0100               	movlb	0	; () banked
 18306  00392E  6FC6               	movwf	sprintf@f& (0+255),b
 18307  003930  0E7F               	movlw	high STR_80
 18308  003932  0100               	movlb	0	; () banked
 18309  003934  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18310  003936  ECA7  F026         	call	_Get_Voltage_VL2	;wreg free
 18311  00393A  C019  F0C8         	movff	?_Get_Voltage_VL2,?_sprintf+4
 18312  00393E  C01A  F0C9         	movff	?_Get_Voltage_VL2+1,?_sprintf+5
 18313  003942  C01B  F0CA         	movff	?_Get_Voltage_VL2+2,?_sprintf+6
 18314  003946  EC8D  F02F         	call	_sprintf	;wreg free
 18315  00394A  0100               	movlb	0	; () banked
 18316  00394C  51C4               	movf	?_sprintf& (0+255),w,b
 18317  00394E  0101               	movlb	1	; () banked
 18318  003950  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18319                           
 18320                           ; BSR set to: 1
 18321                           ;main.c: 230: LCD_WriteStr(buffer,buff_len);
 18322  003952  0EBB               	movlw	low Display_Data@buffer
 18323  003954  6E1B               	movwf	LCD_WriteStr@Str,c
 18324  003956  0E01               	movlw	high Display_Data@buffer
 18325  003958  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18326  00395A  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18327  00395E  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18328                           
 18329                           ;main.c: 232: LCD_SetCursor_Position(2,15);
 18330  003962  0E0F               	movlw	15
 18331  003964  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18332  003966  0E02               	movlw	2
 18333  003968  ECCA  F02B         	call	_LCD_SetCursor_Position
 18334                           
 18335                           ;main.c: 233: buff_len=sprintf(buffer,"%.1f",Get_Voltage_VL3());
 18336  00396C  0EBB               	movlw	low Display_Data@buffer
 18337  00396E  0100               	movlb	0	; () banked
 18338  003970  6FC4               	movwf	sprintf@wh& (0+255),b
 18339  003972  0E01               	movlw	high Display_Data@buffer
 18340  003974  0100               	movlb	0	; () banked
 18341  003976  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18342  003978  0E9B               	movlw	low STR_80
 18343  00397A  0100               	movlb	0	; () banked
 18344  00397C  6FC6               	movwf	sprintf@f& (0+255),b
 18345  00397E  0E7F               	movlw	high STR_80
 18346  003980  0100               	movlb	0	; () banked
 18347  003982  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18348  003984  ECB0  F026         	call	_Get_Voltage_VL3	;wreg free
 18349  003988  C019  F0C8         	movff	?_Get_Voltage_VL3,?_sprintf+4
 18350  00398C  C01A  F0C9         	movff	?_Get_Voltage_VL3+1,?_sprintf+5
 18351  003990  C01B  F0CA         	movff	?_Get_Voltage_VL3+2,?_sprintf+6
 18352  003994  EC8D  F02F         	call	_sprintf	;wreg free
 18353  003998  0100               	movlb	0	; () banked
 18354  00399A  51C4               	movf	?_sprintf& (0+255),w,b
 18355  00399C  0101               	movlb	1	; () banked
 18356  00399E  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18357                           
 18358                           ; BSR set to: 1
 18359                           ;main.c: 234: LCD_WriteStr(buffer,buff_len);
 18360  0039A0  0EBB               	movlw	low Display_Data@buffer
 18361  0039A2  6E1B               	movwf	LCD_WriteStr@Str,c
 18362  0039A4  0E01               	movlw	high Display_Data@buffer
 18363  0039A6  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18364  0039A8  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18365  0039AC  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18366                           
 18367                           ;main.c: 236: LCD_SetCursor_Position(3,1);
 18368  0039B0  0E01               	movlw	1
 18369  0039B2  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18370  0039B4  0E03               	movlw	3
 18371  0039B6  ECCA  F02B         	call	_LCD_SetCursor_Position
 18372                           
 18373                           ;main.c: 237: buff_len=sprintf(buffer,"V_In (Min Act Max)");
 18374  0039BA  0EBB               	movlw	low Display_Data@buffer
 18375  0039BC  0100               	movlb	0	; () banked
 18376  0039BE  6FC4               	movwf	sprintf@wh& (0+255),b
 18377  0039C0  0E01               	movlw	high Display_Data@buffer
 18378  0039C2  0100               	movlb	0	; () banked
 18379  0039C4  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18380  0039C6  0ED6               	movlw	low STR_83
 18381  0039C8  0100               	movlb	0	; () banked
 18382  0039CA  6FC6               	movwf	sprintf@f& (0+255),b
 18383  0039CC  0E7E               	movlw	high STR_83
 18384  0039CE  0100               	movlb	0	; () banked
 18385  0039D0  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18386  0039D2  EC8D  F02F         	call	_sprintf	;wreg free
 18387  0039D6  0100               	movlb	0	; () banked
 18388  0039D8  51C4               	movf	?_sprintf& (0+255),w,b
 18389  0039DA  0101               	movlb	1	; () banked
 18390  0039DC  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18391                           
 18392                           ; BSR set to: 1
 18393                           ;main.c: 238: LCD_WriteStr(buffer,buff_len);
 18394  0039DE  0EBB               	movlw	low Display_Data@buffer
 18395  0039E0  6E1B               	movwf	LCD_WriteStr@Str,c
 18396  0039E2  0E01               	movlw	high Display_Data@buffer
 18397  0039E4  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18398  0039E6  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18399  0039EA  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18400                           
 18401                           ;main.c: 240: LCD_SetCursor_Position(4,1);
 18402  0039EE  0E01               	movlw	1
 18403  0039F0  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18404  0039F2  0E04               	movlw	4
 18405  0039F4  ECCA  F02B         	call	_LCD_SetCursor_Position
 18406                           
 18407                           ;main.c: 241: buff_len=sprintf(buffer,"%.1f",get_min());
 18408  0039F8  0EBB               	movlw	low Display_Data@buffer
 18409  0039FA  0100               	movlb	0	; () banked
 18410  0039FC  6FC4               	movwf	sprintf@wh& (0+255),b
 18411  0039FE  0E01               	movlw	high Display_Data@buffer
 18412  003A00  0100               	movlb	0	; () banked
 18413  003A02  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18414  003A04  0E9B               	movlw	low STR_80
 18415  003A06  0100               	movlb	0	; () banked
 18416  003A08  6FC6               	movwf	sprintf@f& (0+255),b
 18417  003A0A  0E7F               	movlw	high STR_80
 18418  003A0C  0100               	movlb	0	; () banked
 18419  003A0E  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18420  003A10  ECD4  F026         	call	_get_min	;wreg free
 18421  003A14  C019  F0C8         	movff	?_get_min,?_sprintf+4
 18422  003A18  C01A  F0C9         	movff	?_get_min+1,?_sprintf+5
 18423  003A1C  C01B  F0CA         	movff	?_get_min+2,?_sprintf+6
 18424  003A20  EC8D  F02F         	call	_sprintf	;wreg free
 18425  003A24  0100               	movlb	0	; () banked
 18426  003A26  51C4               	movf	?_sprintf& (0+255),w,b
 18427  003A28  0101               	movlb	1	; () banked
 18428  003A2A  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18429                           
 18430                           ; BSR set to: 1
 18431                           ;main.c: 242: LCD_WriteStr(buffer,buff_len);
 18432  003A2C  0EBB               	movlw	low Display_Data@buffer
 18433  003A2E  6E1B               	movwf	LCD_WriteStr@Str,c
 18434  003A30  0E01               	movlw	high Display_Data@buffer
 18435  003A32  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18436  003A34  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18437  003A38  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18438                           
 18439                           ;main.c: 244: LCD_SetCursor_Position(4,8);
 18440  003A3C  0E08               	movlw	8
 18441  003A3E  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18442  003A40  0E04               	movlw	4
 18443  003A42  ECCA  F02B         	call	_LCD_SetCursor_Position
 18444                           
 18445                           ;main.c: 245: buff_len=sprintf(buffer,"%.1f",Get_Voltage_Vin());
 18446  003A46  0EBB               	movlw	low Display_Data@buffer
 18447  003A48  0100               	movlb	0	; () banked
 18448  003A4A  6FC4               	movwf	sprintf@wh& (0+255),b
 18449  003A4C  0E01               	movlw	high Display_Data@buffer
 18450  003A4E  0100               	movlb	0	; () banked
 18451  003A50  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18452  003A52  0E9B               	movlw	low STR_80
 18453  003A54  0100               	movlb	0	; () banked
 18454  003A56  6FC6               	movwf	sprintf@f& (0+255),b
 18455  003A58  0E7F               	movlw	high STR_80
 18456  003A5A  0100               	movlb	0	; () banked
 18457  003A5C  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18458  003A5E  ECC2  F026         	call	_Get_Voltage_Vin	;wreg free
 18459  003A62  C019  F0C8         	movff	?_Get_Voltage_Vin,?_sprintf+4
 18460  003A66  C01A  F0C9         	movff	?_Get_Voltage_Vin+1,?_sprintf+5
 18461  003A6A  C01B  F0CA         	movff	?_Get_Voltage_Vin+2,?_sprintf+6
 18462  003A6E  EC8D  F02F         	call	_sprintf	;wreg free
 18463  003A72  0100               	movlb	0	; () banked
 18464  003A74  51C4               	movf	?_sprintf& (0+255),w,b
 18465  003A76  0101               	movlb	1	; () banked
 18466  003A78  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18467                           
 18468                           ;main.c: 246: LCD_WriteStr(buffer,buff_len);
 18469  003A7A  0EBB               	movlw	low Display_Data@buffer
 18470  003A7C  6E1B               	movwf	LCD_WriteStr@Str,c
 18471  003A7E  0E01               	movlw	high Display_Data@buffer
 18472  003A80  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18473  003A82  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18474  003A86  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18475                           
 18476                           ;main.c: 248: LCD_SetCursor_Position(4,15);
 18477  003A8A  0E0F               	movlw	15
 18478  003A8C  6E1B               	movwf	LCD_SetCursor_Position@column,c
 18479  003A8E  0E04               	movlw	4
 18480  003A90  ECCA  F02B         	call	_LCD_SetCursor_Position
 18481                           
 18482                           ;main.c: 249: buff_len=sprintf(buffer,"%.1f",get_max());
 18483  003A94  0EBB               	movlw	low Display_Data@buffer
 18484  003A96  0100               	movlb	0	; () banked
 18485  003A98  6FC4               	movwf	sprintf@wh& (0+255),b
 18486  003A9A  0E01               	movlw	high Display_Data@buffer
 18487  003A9C  0100               	movlb	0	; () banked
 18488  003A9E  6FC5               	movwf	(sprintf@wh+1)& (0+255),b
 18489  003AA0  0E9B               	movlw	low STR_80
 18490  003AA2  0100               	movlb	0	; () banked
 18491  003AA4  6FC6               	movwf	sprintf@f& (0+255),b
 18492  003AA6  0E7F               	movlw	high STR_80
 18493  003AA8  0100               	movlb	0	; () banked
 18494  003AAA  6FC7               	movwf	(sprintf@f+1)& (0+255),b
 18495  003AAC  ECCB  F026         	call	_get_max	;wreg free
 18496  003AB0  C019  F0C8         	movff	?_get_max,?_sprintf+4
 18497  003AB4  C01A  F0C9         	movff	?_get_max+1,?_sprintf+5
 18498  003AB8  C01B  F0CA         	movff	?_get_max+2,?_sprintf+6
 18499  003ABC  EC8D  F02F         	call	_sprintf	;wreg free
 18500  003AC0  0100               	movlb	0	; () banked
 18501  003AC2  51C4               	movf	?_sprintf& (0+255),w,b
 18502  003AC4  0101               	movlb	1	; () banked
 18503  003AC6  6FCF               	movwf	Display_Data@buff_len& (0+255),b
 18504                           
 18505                           ; BSR set to: 1
 18506                           ;main.c: 250: LCD_WriteStr(buffer,buff_len);
 18507  003AC8  0EBB               	movlw	low Display_Data@buffer
 18508  003ACA  6E1B               	movwf	LCD_WriteStr@Str,c
 18509  003ACC  0E01               	movlw	high Display_Data@buffer
 18510  003ACE  6E1C               	movwf	LCD_WriteStr@Str+1,c
 18511  003AD0  C1CF  F01D         	movff	Display_Data@buff_len,LCD_WriteStr@Str_Size
 18512  003AD4  EC91  F030         	call	_LCD_WriteStr	;wreg free
 18513  003AD8  0012               	return		;funcret
 18514  003ADA  FFFF               	dw	65535	; errata NOP
 18515  003ADC                     __end_of_Display_Data:
 18516                           	opt stack 0
 18517                           tblptru	equ	0xFF8
 18518                           tblptrh	equ	0xFF7
 18519                           tblptrl	equ	0xFF6
 18520                           tablat	equ	0xFF5
 18521                           prodl	equ	0xFF3
 18522                           intcon	equ	0xFF2
 18523                           postinc0	equ	0xFEE
 18524                           wreg	equ	0xFE8
 18525                           indf2	equ	0xFDF
 18526                           postinc2	equ	0xFDE
 18527                           postdec2	equ	0xFDD
 18528                           plusw2	equ	0xFDB
 18529                           fsr2h	equ	0xFDA
 18530                           fsr2l	equ	0xFD9
 18531                           status	equ	0xFD8
 18532                           
 18533 ;; *************** function _sprintf *****************
 18534 ;; Defined at:
 18535 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprintf.c"
 18536 ;; Parameters:    Size  Location     Type
 18537 ;;  wh              2  100[BANK0 ] PTR unsigned char 
 18538 ;;		 -> Display_Data@buffer(20), tx_buffer(40), NULL(0), 
 18539 ;;  f               2  102[BANK0 ] PTR const unsigned char 
 18540 ;;		 -> STR_86(5), STR_85(5), STR_84(5), STR_83(19), 
 18541 ;;		 -> STR_82(5), STR_81(5), STR_80(5), STR_79(20), 
 18542 ;;		 -> STR_68(7), STR_67(6), STR_65(26), STR_64(28), 
 18543 ;;		 -> STR_62(10), STR_60(10), STR_58(6), STR_56(6), 
 18544 ;;		 -> STR_54(6), STR_53(8), STR_51(6), STR_49(6), 
 18545 ;;		 -> STR_47(6), STR_45(6), STR_43(6), STR_41(6), 
 18546 ;;		 -> STR_39(6), STR_37(6), STR_35(6), STR_33(17), 
 18547 ;;		 -> STR_21(17), STR_12(7), STR_7(18), 
 18548 ;; Auto vars:     Size  Location     Type
 18549 ;;  pb              4  120[BANK0 ] struct __prbuf
 18550 ;;  ap              2  118[BANK0 ] PTR void [1]
 18551 ;;		 -> ?_sprintf(2), ?_printf(2), 
 18552 ;; Return value:  Size  Location     Type
 18553 ;;                  2  100[BANK0 ] int 
 18554 ;; Registers used:
 18555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18556 ;; Tracked objects:
 18557 ;;		On entry : 0/0
 18558 ;;		On exit  : 0/0
 18559 ;;		Unchanged: 0/0
 18560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18561 ;;      Params:         0      16       0       0       0       0       0
 18562 ;;      Locals:         0       6       0       0       0       0       0
 18563 ;;      Temps:          0       2       0       0       0       0       0
 18564 ;;      Totals:         0      24       0       0       0       0       0
 18565 ;;Total ram usage:       24 bytes
 18566 ;; Hardware stack levels used:    1
 18567 ;; Hardware stack levels required when called:    5
 18568 ;; This function calls:
 18569 ;;		__doprnt
 18570 ;; This function is called by:
 18571 ;;		_read_command
 18572 ;;		_reset_var
 18573 ;;		_cal_analog
 18574 ;;		_set_list
 18575 ;;		_get_list
 18576 ;;		_Display_Data
 18577 ;; This function uses a non-reentrant model
 18578 ;;
 18579                           
 18580                           	psect	text117
 18581  005F1A                     __ptext117:
 18582                           	opt stack 0
 18583  005F1A                     _sprintf:
 18584                           	opt stack 0
 18585  005F1A  FFFF               	dw	65535	; assembler added errata NOP
 18586                           
 18587                           ;incstack = 0
 18588  005F1C  C0C4  F0D8         	movff	sprintf@wh,sprintf@pb
 18589  005F20  C0C5  F0D9         	movff	sprintf@wh+1,sprintf@pb+1
 18590  005F24  0E00               	movlw	0
 18591  005F26  0100               	movlb	0	; () banked
 18592  005F28  6FDA               	movwf	(sprintf@pb+2)& (0+255),b
 18593  005F2A  0E00               	movlw	0
 18594  005F2C  0100               	movlb	0	; () banked
 18595  005F2E  6FDB               	movwf	(sprintf@pb+3)& (0+255),b
 18596  005F30  0EC8               	movlw	low (?_sprintf+4)
 18597  005F32  0100               	movlb	0	; () banked
 18598  005F34  6FD6               	movwf	sprintf@ap& (0+255),b
 18599  005F36  0E00               	movlw	high (?_sprintf+4)
 18600  005F38  0100               	movlb	0	; () banked
 18601  005F3A  6FD7               	movwf	(sprintf@ap+1)& (0+255),b
 18602                           
 18603                           ; BSR set to: 0
 18604  005F3C  0ED8               	movlw	low sprintf@pb
 18605  005F3E  0100               	movlb	0	; () banked
 18606  005F40  6F9D               	movwf	__doprnt@pb& (0+255),b
 18607  005F42  0E00               	movlw	high sprintf@pb
 18608  005F44  0100               	movlb	0	; () banked
 18609  005F46  6F9E               	movwf	(__doprnt@pb+1)& (0+255),b
 18610  005F48  C0C6  F09F         	movff	sprintf@f,__doprnt@f
 18611  005F4C  C0C7  F0A0         	movff	sprintf@f+1,__doprnt@f+1
 18612  005F50  0ED6               	movlw	low sprintf@ap
 18613  005F52  0100               	movlb	0	; () banked
 18614  005F54  6FA1               	movwf	__doprnt@ap& (0+255),b
 18615  005F56  0E00               	movlw	high sprintf@ap
 18616  005F58  0100               	movlb	0	; () banked
 18617  005F5A  6FA2               	movwf	(__doprnt@ap+1)& (0+255),b
 18618  005F5C  ECDB  F000         	call	__doprnt	;wreg free
 18619  005F60  C0D8  FFD9         	movff	sprintf@pb,fsr2l
 18620  005F64  C0D9  FFDA         	movff	sprintf@pb+1,fsr2h
 18621  005F68  0E00               	movlw	0
 18622  005F6A  6EDF               	movwf	indf2,c
 18623  005F6C  C0C4  F0D4         	movff	sprintf@wh,??_sprintf
 18624  005F70  C0C5  F0D5         	movff	sprintf@wh+1,??_sprintf+1
 18625  005F74  0100               	movlb	0	; () banked
 18626  005F76  1FD4               	comf	??_sprintf& (0+255),f,b
 18627  005F78  1FD5               	comf	(??_sprintf+1)& (0+255),f,b
 18628  005F7A  4BD4               	infsnz	??_sprintf& (0+255),f,b
 18629  005F7C  2BD5               	incf	(??_sprintf+1)& (0+255),f,b
 18630  005F7E  0100               	movlb	0	; () banked
 18631  005F80  51D8               	movf	sprintf@pb& (0+255),w,b
 18632  005F82  0100               	movlb	0	; () banked
 18633  005F84  25D4               	addwf	??_sprintf& (0+255),w,b
 18634  005F86  0100               	movlb	0	; () banked
 18635  005F88  6FC4               	movwf	?_sprintf& (0+255),b
 18636  005F8A  0100               	movlb	0	; () banked
 18637  005F8C  51D9               	movf	(sprintf@pb+1)& (0+255),w,b
 18638  005F8E  0100               	movlb	0	; () banked
 18639  005F90  21D5               	addwfc	(??_sprintf+1)& (0+255),w,b
 18640  005F92  0100               	movlb	0	; () banked
 18641  005F94  6FC5               	movwf	(?_sprintf+1)& (0+255),b
 18642                           
 18643                           ; BSR set to: 0
 18644                           
 18645                           ; BSR set to: 0
 18646  005F96  0012               	return		;funcret
 18647  005F98  FFFF               	dw	65535	; errata NOP
 18648  005F9A                     __end_of_sprintf:
 18649                           	opt stack 0
 18650                           tblptru	equ	0xFF8
 18651                           tblptrh	equ	0xFF7
 18652                           tblptrl	equ	0xFF6
 18653                           tablat	equ	0xFF5
 18654                           prodl	equ	0xFF3
 18655                           intcon	equ	0xFF2
 18656                           postinc0	equ	0xFEE
 18657                           wreg	equ	0xFE8
 18658                           indf2	equ	0xFDF
 18659                           postinc2	equ	0xFDE
 18660                           postdec2	equ	0xFDD
 18661                           plusw2	equ	0xFDB
 18662                           fsr2h	equ	0xFDA
 18663                           fsr2l	equ	0xFD9
 18664                           status	equ	0xFD8
 18665                           
 18666 ;; *************** function __doprnt *****************
 18667 ;; Defined at:
 18668 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 18669 ;; Parameters:    Size  Location     Type
 18670 ;;  pb              2   61[BANK0 ] PTR struct __prbuf
 18671 ;;		 -> sprintf@pb(4), printf@pb(4), 
 18672 ;;  f               2   63[BANK0 ] PTR const unsigned char 
 18673 ;;		 -> STR_86(5), STR_85(5), STR_84(5), STR_83(19), 
 18674 ;;		 -> STR_82(5), STR_81(5), STR_80(5), STR_79(20), 
 18675 ;;		 -> STR_78(4), STR_77(23), STR_76(8), STR_75(29), 
 18676 ;;		 -> STR_74(41), STR_73(8), STR_72(25), STR_68(7), 
 18677 ;;		 -> STR_67(6), STR_65(26), STR_64(28), STR_62(10), 
 18678 ;;		 -> STR_60(10), STR_58(6), STR_56(6), STR_54(6), 
 18679 ;;		 -> STR_53(8), STR_51(6), STR_49(6), STR_47(6), 
 18680 ;;		 -> STR_45(6), STR_43(6), STR_41(6), STR_39(6), 
 18681 ;;		 -> STR_37(6), STR_35(6), STR_33(17), STR_21(17), 
 18682 ;;		 -> STR_12(7), STR_7(18), 
 18683 ;;  ap              2   65[BANK0 ] PTR PTR void 
 18684 ;;		 -> sprintf@ap(2), printf@ap(2), 
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;  tmpval          4   90[BANK0 ] struct .
 18687 ;;  val             4   86[BANK0 ] unsigned long 
 18688 ;;  fval            3   94[BANK0 ] unsigned long 
 18689 ;;  prec            2   97[BANK0 ] int 
 18690 ;;  exp             2   84[BANK0 ] int 
 18691 ;;  ccnt            2   82[BANK0 ] int 
 18692 ;;  flag            2   80[BANK0 ] unsigned short 
 18693 ;;  cp              2   78[BANK0 ] PTR const unsigned char 
 18694 ;;		 -> asctime@buf(27), ?_sprintf(2), ?_printf(2), STR_87(7), 
 18695 ;;		 -> Display_Data@buffer(20), tx_buffer(40), NULL(0), 
 18696 ;;  len             2   76[BANK0 ] unsigned int 
 18697 ;;  width           2    0        int 
 18698 ;;  c               1   99[BANK0 ] char 
 18699 ;;  d               1    0        unsigned char 
 18700 ;; Return value:  Size  Location     Type
 18701 ;;                  2   61[BANK0 ] int 
 18702 ;; Registers used:
 18703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18704 ;; Tracked objects:
 18705 ;;		On entry : 0/0
 18706 ;;		On exit  : 0/0
 18707 ;;		Unchanged: 0/0
 18708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18709 ;;      Params:         0       6       0       0       0       0       0
 18710 ;;      Locals:         0      27       0       0       0       0       0
 18711 ;;      Temps:          0       6       0       0       0       0       0
 18712 ;;      Totals:         0      39       0       0       0       0       0
 18713 ;;Total ram usage:       39 bytes
 18714 ;; Hardware stack levels used:    1
 18715 ;; Hardware stack levels required when called:    4
 18716 ;; This function calls:
 18717 ;;		Absolute function
 18718 ;;		___awdiv
 18719 ;;		___ftadd
 18720 ;;		___ftge
 18721 ;;		___ftmul
 18722 ;;		___ftneg
 18723 ;;		___ftsub
 18724 ;;		___fttol
 18725 ;;		___lldiv
 18726 ;;		___llmod
 18727 ;;		___lltoft
 18728 ;;		___wmul
 18729 ;;		__div_to_l_
 18730 ;;		__tdiv_to_l_
 18731 ;;		_fround
 18732 ;;		_isdigit
 18733 ;;		_putch
 18734 ;;		_scale
 18735 ;; This function is called by:
 18736 ;;		_printf
 18737 ;;		_sprintf
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text118
 18742  0001B6                     __ptext118:
 18743                           	opt stack 0
 18744  0001B6                     __doprnt:
 18745                           	opt stack 0
 18746  0001B6  FFFF               	dw	65535	; assembler added errata NOP
 18747                           
 18748                           ;doprnt.c: 499: signed char c;
 18749                           ;doprnt.c: 501: int width;
 18750                           ;doprnt.c: 504: int prec;
 18751                           ;doprnt.c: 508: unsigned short flag;
 18752                           ;doprnt.c: 510: int ccnt = 0;
 18753                           
 18754                           ; BSR set to: 0
 18755                           ;incstack = 0
 18756  0001B8  0E00               	movlw	0
 18757  0001BA  0100               	movlb	0	; () banked
 18758  0001BC  6FB3               	movwf	(__doprnt@ccnt+1)& (0+255),b
 18759  0001BE  0E00               	movlw	0
 18760  0001C0  6FB2               	movwf	__doprnt@ccnt& (0+255),b
 18761                           
 18762                           ;doprnt.c: 515: char d;
 18763                           ;doprnt.c: 516: double fval;
 18764                           ;doprnt.c: 517: int exp;
 18765                           ;doprnt.c: 523: union {
 18766                           ;doprnt.c: 524: unsigned long vd;
 18767                           ;doprnt.c: 525: double integ;
 18768                           ;doprnt.c: 526: } tmpval;
 18769                           ;doprnt.c: 528: unsigned long val;
 18770                           ;doprnt.c: 529: unsigned len;
 18771                           ;doprnt.c: 530: const char * cp;
 18772                           ;doprnt.c: 536: while(c = *f++) {
 18773  0001C2  EF5B  F008         	goto	u10150
 18774  0001C6  FFFF               	dw	65535	; assembler added errata NOP
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;doprnt.c: 538: if(c != '%')
 18778                           
 18779                           ; BSR set to: 0
 18780  0001C8  0E25               	movlw	37
 18781  0001CA  0100               	movlb	0	; () banked
 18782  0001CC  19C3               	xorwf	__doprnt@c& (0+255),w,b
 18783  0001CE  B4D8               	btfsc	status,2,c
 18784  0001D0  D03F               	goto	l1217
 18785                           
 18786                           ; BSR set to: 0
 18787                           ;doprnt.c: 540: {
 18788                           ;doprnt.c: 541: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
 18789  0001D2  0100               	movlb	0	; () banked
 18790  0001D4  EE20 F002          	lfsr	2,2
 18791  0001D8  519D               	movf	__doprnt@pb& (0+255),w,b
 18792  0001DA  26D9               	addwf	fsr2l,f,c
 18793  0001DC  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 18794  0001DE  22DA               	addwfc	fsr2h,f,c
 18795  0001E0  50DE               	movf	postinc2,w,c
 18796  0001E2  10DE               	iorwf	postinc2,w,c
 18797  0001E4  B4D8               	btfsc	status,2,c
 18798  0001E6  D018               	goto	l1218
 18799                           
 18800                           ; BSR set to: 0
 18801  0001E8  0100               	movlb	0	; () banked
 18802  0001EA  EE20 F002          	lfsr	2,2
 18803  0001EE  519D               	movf	__doprnt@pb& (0+255),w,b
 18804  0001F0  26D9               	addwf	fsr2l,f,c
 18805  0001F2  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 18806  0001F4  22DA               	addwfc	fsr2h,f,c
 18807  0001F6  D801               	call	u9538
 18808  0001F8  D025               	goto	l9732
 18809  0001FA                     u9538:
 18810  0001FA  FFFF               	dw	65535	; assembler added errata NOP
 18811  0001FC  0005               	push	
 18812  0001FE  6EFA               	movwf	pclath,c
 18813  000200  50DE               	movf	postinc2,w,c
 18814  000202  6EFD               	movwf	tosl,c
 18815  000204  50DE               	movf	postinc2,w,c
 18816  000206  6EFE               	movwf	tosh,c
 18817  000208  50F8               	movf	tblptru,w,c
 18818  00020A  6EFF               	movwf	tosu,c
 18819  00020C  50FA               	movf	pclath,w,c
 18820  00020E  0100               	movlb	0	; () banked
 18821  000210  51C3               	movf	__doprnt@c& (0+255),w,b
 18822  000212  0012               	return		;indir
 18823  000214  FFFF               	dw	65535	; errata NOP
 18824  000216  D016               	goto	l9732
 18825  000218                     l1218:
 18826  000218  FFFF               	dw	65535	; assembler added errata NOP
 18827                           
 18828                           ; BSR set to: 0
 18829                           
 18830                           ; BSR set to: 0
 18831  00021A  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 18832  00021E  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 18833  000222  CFDE F0A3          	movff	postinc2,??__doprnt
 18834  000226  CFDD F0A4          	movff	postdec2,??__doprnt+1
 18835  00022A  C0A3  FFD9         	movff	??__doprnt,fsr2l
 18836  00022E  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 18837  000232  C0C3  FFDF         	movff	__doprnt@c,indf2
 18838                           
 18839                           ; BSR set to: 0
 18840  000236  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 18841  00023A  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 18842  00023E  2ADE               	incf	postinc2,f,c
 18843  000240  0E00               	movlw	0
 18844  000242  22DD               	addwfc	postdec2,f,c
 18845  000244                     l9732:
 18846  000244  FFFF               	dw	65535	; assembler added errata NOP
 18847                           
 18848                           ; BSR set to: 0
 18849  000246  0100               	movlb	0	; () banked
 18850  000248  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 18851  00024A  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 18852                           
 18853                           ; BSR set to: 0
 18854                           ;doprnt.c: 542: continue;
 18855  00024C  EF5B  F008         	goto	u10150
 18856  000250                     l1217:
 18857  000250  FFFF               	dw	65535	; assembler added errata NOP
 18858                           
 18859                           ; BSR set to: 0
 18860                           ;doprnt.c: 543: }
 18861                           ;doprnt.c: 548: flag = 0;
 18862                           
 18863                           ; BSR set to: 0
 18864  000252  0E00               	movlw	0
 18865  000254  0100               	movlb	0	; () banked
 18866  000256  6FB1               	movwf	(__doprnt@flag+1)& (0+255),b
 18867  000258  0E00               	movlw	0
 18868  00025A  6FB0               	movwf	__doprnt@flag& (0+255),b
 18869                           
 18870                           ; BSR set to: 0
 18871                           ;doprnt.c: 611: if(*f == '.') {
 18872  00025C  C09F  FFF6         	movff	__doprnt@f,tblptrl
 18873  000260  C0A0  FFF7         	movff	__doprnt@f+1,tblptrh
 18874  000264                     	if	0	;tblptru may be non-zero
 18875  000264                     	endif
 18876  000264                     	if	0	;tblptru may be non-zero
 18877  000264                     	endif
 18878  000264  0008               	tblrd		*
 18879  000266  FFFF               	dw	65535	; errata NOP
 18880  000268  50F5               	movf	tablat,w,c
 18881  00026A  0A2E               	xorlw	46
 18882  00026C  A4D8               	btfss	status,2,c
 18883  00026E  D038               	goto	l1220
 18884                           
 18885                           ; BSR set to: 0
 18886                           ;doprnt.c: 612: flag |= 0x4000;
 18887  000270  0100               	movlb	0	; () banked
 18888  000272  8DB1               	bsf	(__doprnt@flag+1)& (0+255),6,b
 18889                           
 18890                           ;doprnt.c: 613: f++;
 18891  000274  0100               	movlb	0	; () banked
 18892  000276  4B9F               	infsnz	__doprnt@f& (0+255),f,b
 18893  000278  2BA0               	incf	(__doprnt@f+1)& (0+255),f,b
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;doprnt.c: 620: {
 18897                           ;doprnt.c: 621: prec = 0;
 18898  00027A  0E00               	movlw	0
 18899  00027C  0100               	movlb	0	; () banked
 18900  00027E  6FC2               	movwf	(__doprnt@prec+1)& (0+255),b
 18901  000280  0E00               	movlw	0
 18902  000282  6FC1               	movwf	__doprnt@prec& (0+255),b
 18903                           
 18904                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 18905  000284  D020               	goto	l1221
 18906  000286  FFFF               	dw	65535	; assembler added errata NOP
 18907                           
 18908                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 18909                           
 18910                           ; BSR set to: 0
 18911  000288  C0C1  F027         	movff	__doprnt@prec,___wmul@multiplier
 18912  00028C  C0C2  F028         	movff	__doprnt@prec+1,___wmul@multiplier+1
 18913  000290  0E00               	movlw	0
 18914  000292  6E2A               	movwf	___wmul@multiplicand+1,c
 18915  000294  0E0A               	movlw	10
 18916  000296  6E29               	movwf	___wmul@multiplicand,c
 18917  000298  EC74  F029         	call	___wmul
 18918  00029C  C09F  FFF6         	movff	__doprnt@f,tblptrl
 18919  0002A0  C0A0  FFF7         	movff	__doprnt@f+1,tblptrh
 18920  0002A4                     	if	0	;tblptru may be non-zero
 18921  0002A4                     	endif
 18922  0002A4                     	if	0	;tblptru may be non-zero
 18923  0002A4                     	endif
 18924  0002A4  0008               	tblrd		*
 18925  0002A6  FFFF               	dw	65535	; errata NOP
 18926  0002A8  50F5               	movf	tablat,w,c
 18927  0002AA  2627               	addwf	?___wmul,f,c
 18928  0002AC  0E00               	movlw	0
 18929  0002AE  2228               	addwfc	?___wmul+1,f,c
 18930  0002B0  0ED0               	movlw	208
 18931  0002B2  2427               	addwf	?___wmul,w,c
 18932  0002B4  0100               	movlb	0	; () banked
 18933  0002B6  6FC1               	movwf	__doprnt@prec& (0+255),b
 18934  0002B8  0EFF               	movlw	255
 18935  0002BA  2028               	addwfc	?___wmul+1,w,c
 18936  0002BC  0100               	movlb	0	; () banked
 18937  0002BE  6FC2               	movwf	(__doprnt@prec+1)& (0+255),b
 18938                           
 18939                           ; BSR set to: 0
 18940  0002C0  0100               	movlb	0	; () banked
 18941  0002C2  4B9F               	infsnz	__doprnt@f& (0+255),f,b
 18942  0002C4  2BA0               	incf	(__doprnt@f+1)& (0+255),f,b
 18943  0002C6                     l1221:
 18944  0002C6  FFFF               	dw	65535	; assembler added errata NOP
 18945                           
 18946                           ; BSR set to: 0
 18947                           
 18948                           ; BSR set to: 0
 18949  0002C8  C09F  FFF6         	movff	__doprnt@f,tblptrl
 18950  0002CC  C0A0  FFF7         	movff	__doprnt@f+1,tblptrh
 18951  0002D0                     	if	0	;tblptru may be non-zero
 18952  0002D0                     	endif
 18953  0002D0                     	if	0	;tblptru may be non-zero
 18954  0002D0                     	endif
 18955  0002D0  0008               	tblrd		*
 18956  0002D2  FFFF               	dw	65535	; errata NOP
 18957  0002D4  50F5               	movf	tablat,w,c
 18958  0002D6  ECEE  F028         	call	_isdigit
 18959  0002DA  A0D8               	btfss	status,0,c
 18960  0002DC  D0E2               	goto	l1225
 18961  0002DE  D7D3               	goto	l1222
 18962  0002E0                     l1220:
 18963  0002E0  FFFF               	dw	65535	; assembler added errata NOP
 18964                           
 18965                           ;doprnt.c: 626: prec = 0;
 18966  0002E2  0E00               	movlw	0
 18967  0002E4  0100               	movlb	0	; () banked
 18968  0002E6  6FC2               	movwf	(__doprnt@prec+1)& (0+255),b
 18969  0002E8  0E00               	movlw	0
 18970  0002EA  6FC1               	movwf	__doprnt@prec& (0+255),b
 18971                           
 18972                           ; BSR set to: 0
 18973                           ;doprnt.c: 628: flag |= 0x1000;
 18974  0002EC  0100               	movlb	0	; () banked
 18975  0002EE  89B1               	bsf	(__doprnt@flag+1)& (0+255),4,b
 18976                           
 18977                           ; BSR set to: 0
 18978                           ;doprnt.c: 630: }
 18979                           ;doprnt.c: 635: switch(c = *f++) {
 18980  0002F0  D0D8               	goto	l1225
 18981  0002F2  FFFF               	dw	65535	; assembler added errata NOP
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;doprnt.c: 663: flag |= 0x400;
 18985                           
 18986                           ; BSR set to: 0
 18987  0002F4  0100               	movlb	0	; () banked
 18988  0002F6  85B1               	bsf	(__doprnt@flag+1)& (0+255),2,b
 18989                           
 18990                           ; BSR set to: 0
 18991                           ;doprnt.c: 698: case 'i':
 18992                           ;doprnt.c: 699: break;
 18993                           
 18994                           ; BSR set to: 0
 18995                           
 18996                           ;doprnt.c: 697: case 'd':
 18997                           
 18998                           ;doprnt.c: 664: break;
 18999  0002F8  D0F4               	goto	l1229
 19000  0002FA  FFFF               	dw	65535	; assembler added errata NOP
 19001                           
 19002                           ; BSR set to: 0
 19003                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19004                           
 19005                           ; BSR set to: 0
 19006  0002FC  C0A1  FFD9         	movff	__doprnt@ap,fsr2l
 19007  000300  C0A2  FFDA         	movff	__doprnt@ap+1,fsr2h
 19008  000304  CFDF F0A3          	movff	indf2,??__doprnt
 19009  000308  0E02               	movlw	2
 19010  00030A  26DE               	addwf	postinc2,f,c
 19011  00030C  CFDF F0A4          	movff	indf2,??__doprnt+1
 19012  000310  0E00               	movlw	0
 19013  000312  22DD               	addwfc	postdec2,f,c
 19014  000314  C0A3  FFD9         	movff	??__doprnt,fsr2l
 19015  000318  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 19016  00031C  CFDE F0AE          	movff	postinc2,__doprnt@cp
 19017  000320  CFDD F0AF          	movff	postdec2,__doprnt@cp+1
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;doprnt.c: 740: if(!cp)
 19021  000324  0100               	movlb	0	; () banked
 19022  000326  51AE               	movf	__doprnt@cp& (0+255),w,b
 19023  000328  0100               	movlb	0	; () banked
 19024  00032A  11AF               	iorwf	(__doprnt@cp+1)& (0+255),w,b
 19025  00032C  A4D8               	btfss	status,2,c
 19026  00032E  D006               	goto	l1233
 19027                           
 19028                           ; BSR set to: 0
 19029                           ;doprnt.c: 741: cp = "(null)";
 19030  000330  0E62               	movlw	low STR_87
 19031  000332  0100               	movlb	0	; () banked
 19032  000334  6FAE               	movwf	__doprnt@cp& (0+255),b
 19033  000336  0E7F               	movlw	high STR_87
 19034  000338  0100               	movlb	0	; () banked
 19035  00033A  6FAF               	movwf	(__doprnt@cp+1)& (0+255),b
 19036  00033C                     l1233:
 19037  00033C  FFFF               	dw	65535	; assembler added errata NOP
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;doprnt.c: 745: len = 0;
 19041                           
 19042                           ; BSR set to: 0
 19043  00033E  0E00               	movlw	0
 19044  000340  0100               	movlb	0	; () banked
 19045  000342  6FAD               	movwf	(__doprnt@len+1)& (0+255),b
 19046  000344  0E00               	movlw	0
 19047  000346  6FAC               	movwf	__doprnt@len& (0+255),b
 19048                           
 19049                           ;doprnt.c: 746: while(cp[len])
 19050  000348  D004               	goto	l1234
 19051  00034A  FFFF               	dw	65535	; assembler added errata NOP
 19052                           
 19053                           ;doprnt.c: 747: len++;
 19054                           
 19055                           ; BSR set to: 0
 19056  00034C  0100               	movlb	0	; () banked
 19057  00034E  4BAC               	infsnz	__doprnt@len& (0+255),f,b
 19058  000350  2BAD               	incf	(__doprnt@len+1)& (0+255),f,b
 19059  000352                     l1234:
 19060  000352  FFFF               	dw	65535	; assembler added errata NOP
 19061                           
 19062                           ; BSR set to: 0
 19063                           
 19064                           ; BSR set to: 0
 19065  000354  0100               	movlb	0	; () banked
 19066  000356  51AC               	movf	__doprnt@len& (0+255),w,b
 19067  000358  0100               	movlb	0	; () banked
 19068  00035A  25AE               	addwf	__doprnt@cp& (0+255),w,b
 19069  00035C  0100               	movlb	0	; () banked
 19070  00035E  6FA3               	movwf	??__doprnt& (0+255),b
 19071  000360  0100               	movlb	0	; () banked
 19072  000362  51AD               	movf	(__doprnt@len+1)& (0+255),w,b
 19073  000364  0100               	movlb	0	; () banked
 19074  000366  21AF               	addwfc	(__doprnt@cp+1)& (0+255),w,b
 19075  000368  0100               	movlb	0	; () banked
 19076  00036A  6FA4               	movwf	(??__doprnt+1)& (0+255),b
 19077  00036C  C0A3  FFF6         	movff	??__doprnt,tblptrl
 19078  000370  C0A4  FFF7         	movff	??__doprnt+1,tblptrh
 19079  000374  6AF8               	clrf	tblptru,c
 19080  000376  0E05               	movlw	(high __ramtop+-1)
 19081  000378  64F7               	cpfsgt	tblptrh,c
 19082  00037A  D004               	bra	u9577
 19083  00037C  0008               	tblrd		*
 19084  00037E  FFFF               	dw	65535	; errata NOP
 19085  000380  50F5               	movf	tablat,w,c
 19086  000382  D005               	bra	u9570
 19087  000384                     u9577:
 19088  000384  CFF6 FFE1          	movff	tblptrl,fsr1l
 19089  000388  CFF7 FFE2          	movff	tblptrh,fsr1h
 19090  00038C  50E7               	movf	indf1,w,c
 19091  00038E                     u9570:
 19092  00038E  0900               	iorlw	0
 19093  000390  A4D8               	btfss	status,2,c
 19094  000392  D7DB               	goto	l1235
 19095                           
 19096                           ;doprnt.c: 753: if(prec && prec < len)
 19097  000394  0100               	movlb	0	; () banked
 19098  000396  51C1               	movf	__doprnt@prec& (0+255),w,b
 19099  000398  0100               	movlb	0	; () banked
 19100  00039A  11C2               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 19101  00039C  B4D8               	btfsc	status,2,c
 19102  00039E  D073               	goto	l1241
 19103                           
 19104                           ; BSR set to: 0
 19105  0003A0  0100               	movlb	0	; () banked
 19106  0003A2  51AC               	movf	__doprnt@len& (0+255),w,b
 19107  0003A4  0100               	movlb	0	; () banked
 19108  0003A6  5DC1               	subwf	__doprnt@prec& (0+255),w,b
 19109  0003A8  0100               	movlb	0	; () banked
 19110  0003AA  51AD               	movf	(__doprnt@len+1)& (0+255),w,b
 19111  0003AC  0100               	movlb	0	; () banked
 19112  0003AE  59C2               	subwfb	(__doprnt@prec+1)& (0+255),w,b
 19113  0003B0  B0D8               	btfsc	status,0,c
 19114  0003B2  D069               	goto	l1241
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;doprnt.c: 754: len = prec;
 19118  0003B4  C0C1  F0AC         	movff	__doprnt@prec,__doprnt@len
 19119  0003B8  C0C2  F0AD         	movff	__doprnt@prec+1,__doprnt@len+1
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;doprnt.c: 767: while(len--)
 19123  0003BC  D064               	goto	l1241
 19124  0003BE  FFFF               	dw	65535	; assembler added errata NOP
 19125  0003C0                     l9772:
 19126                           
 19127                           ; BSR set to: 0
 19128                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)),(++ccnt); else ((*pb->ptr++ = *cp++),(++c
      +                          cnt));
 19129  0003C0  0100               	movlb	0	; () banked
 19130  0003C2  EE20 F002          	lfsr	2,2
 19131  0003C6  519D               	movf	__doprnt@pb& (0+255),w,b
 19132  0003C8  26D9               	addwf	fsr2l,f,c
 19133  0003CA  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19134  0003CC  22DA               	addwfc	fsr2h,f,c
 19135  0003CE  50DE               	movf	postinc2,w,c
 19136  0003D0  10DE               	iorwf	postinc2,w,c
 19137  0003D2  B4D8               	btfsc	status,2,c
 19138  0003D4  D02B               	goto	l1240
 19139                           
 19140                           ; BSR set to: 0
 19141  0003D6  0100               	movlb	0	; () banked
 19142  0003D8  EE20 F002          	lfsr	2,2
 19143  0003DC  519D               	movf	__doprnt@pb& (0+255),w,b
 19144  0003DE  26D9               	addwf	fsr2l,f,c
 19145  0003E0  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19146  0003E2  22DA               	addwfc	fsr2h,f,c
 19147  0003E4  D801               	call	u9628
 19148  0003E6  D01D               	goto	u9629
 19149  0003E8                     u9628:
 19150  0003E8  FFFF               	dw	65535	; assembler added errata NOP
 19151  0003EA  0005               	push	
 19152  0003EC  6EFA               	movwf	pclath,c
 19153  0003EE  50DE               	movf	postinc2,w,c
 19154  0003F0  6EFD               	movwf	tosl,c
 19155  0003F2  50DE               	movf	postinc2,w,c
 19156  0003F4  6EFE               	movwf	tosh,c
 19157  0003F6  50F8               	movf	tblptru,w,c
 19158  0003F8  6EFF               	movwf	tosu,c
 19159  0003FA  50FA               	movf	pclath,w,c
 19160  0003FC  C0AE  FFF6         	movff	__doprnt@cp,tblptrl
 19161  000400  C0AF  FFF7         	movff	__doprnt@cp+1,tblptrh
 19162  000404  6AF8               	clrf	tblptru,c
 19163  000406  0E05               	movlw	(high __ramtop+-1)
 19164  000408  64F7               	cpfsgt	tblptrh,c
 19165  00040A  D004               	bra	u9637
 19166  00040C  0008               	tblrd		*
 19167  00040E  FFFF               	dw	65535	; errata NOP
 19168  000410  50F5               	movf	tablat,w,c
 19169  000412  D005               	bra	u9630
 19170  000414                     u9637:
 19171  000414  CFF6 FFE1          	movff	tblptrl,fsr1l
 19172  000418  CFF7 FFE2          	movff	tblptrh,fsr1h
 19173  00041C  50E7               	movf	indf1,w,c
 19174  00041E                     u9630:
 19175  00041E  0012               	return		;indir
 19176  000420  FFFF               	dw	65535	; errata NOP
 19177  000422                     u9629:
 19178  000422  FFFF               	dw	65535	; assembler added errata NOP
 19179  000424  0100               	movlb	0	; () banked
 19180  000426  4BAE               	infsnz	__doprnt@cp& (0+255),f,b
 19181  000428  2BAF               	incf	(__doprnt@cp+1)& (0+255),f,b
 19182  00042A  D029               	goto	l9786
 19183  00042C                     l1240:
 19184  00042C  FFFF               	dw	65535	; assembler added errata NOP
 19185                           
 19186                           ; BSR set to: 0
 19187                           
 19188                           ; BSR set to: 0
 19189  00042E  C0AE  FFF6         	movff	__doprnt@cp,tblptrl
 19190  000432  C0AF  FFF7         	movff	__doprnt@cp+1,tblptrh
 19191  000436  6AF8               	clrf	tblptru,c
 19192  000438  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 19193  00043C  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 19194  000440  CFDE F0A3          	movff	postinc2,??__doprnt
 19195  000444  CFDD F0A4          	movff	postdec2,??__doprnt+1
 19196  000448  C0A3  FFD9         	movff	??__doprnt,fsr2l
 19197  00044C  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 19198  000450  0E05               	movlw	(high __ramtop+-1)
 19199  000452  64F7               	cpfsgt	tblptrh,c
 19200  000454  D004               	bra	u9647
 19201  000456  0008               	tblrd		*
 19202  000458  FFFF               	dw	65535	; errata NOP
 19203  00045A  50F5               	movf	tablat,w,c
 19204  00045C  D005               	bra	u9640
 19205  00045E                     u9647:
 19206  00045E  CFF6 FFE1          	movff	tblptrl,fsr1l
 19207  000462  CFF7 FFE2          	movff	tblptrh,fsr1h
 19208  000466  50E7               	movf	indf1,w,c
 19209  000468                     u9640:
 19210  000468  6EDF               	movwf	indf2,c
 19211  00046A  0100               	movlb	0	; () banked
 19212  00046C  4BAE               	infsnz	__doprnt@cp& (0+255),f,b
 19213  00046E  2BAF               	incf	(__doprnt@cp+1)& (0+255),f,b
 19214                           
 19215                           ; BSR set to: 0
 19216  000470  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 19217  000474  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 19218  000478  2ADE               	incf	postinc2,f,c
 19219  00047A  0E00               	movlw	0
 19220  00047C  22DD               	addwfc	postdec2,f,c
 19221  00047E                     l9786:
 19222  00047E  FFFF               	dw	65535	; assembler added errata NOP
 19223                           
 19224                           ; BSR set to: 0
 19225  000480  0100               	movlb	0	; () banked
 19226  000482  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 19227  000484  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 19228  000486                     l1241:
 19229  000486  FFFF               	dw	65535	; assembler added errata NOP
 19230                           
 19231                           ; BSR set to: 0
 19232                           
 19233                           ; BSR set to: 0
 19234                           
 19235                           ; BSR set to: 0
 19236  000488  0100               	movlb	0	; () banked
 19237  00048A  07AC               	decf	__doprnt@len& (0+255),f,b
 19238  00048C  A0D8               	btfss	status,0,c
 19239  00048E  07AD               	decf	(__doprnt@len+1)& (0+255),f,b
 19240  000490  0100               	movlb	0	; () banked
 19241  000492  29AC               	incf	__doprnt@len& (0+255),w,b
 19242  000494  E195               	bnz	l9772
 19243  000496  0100               	movlb	0	; () banked
 19244  000498  29AD               	incf	(__doprnt@len+1)& (0+255),w,b
 19245  00049A  B4D8               	btfsc	status,2,c
 19246  00049C  EF5B  F008         	goto	u10150
 19247  0004A0  D78E               	goto	l1239
 19248  0004A2                     l1225:
 19249  0004A2  FFFF               	dw	65535	; assembler added errata NOP
 19250                           
 19251                           ; BSR set to: 0
 19252  0004A4  C09F  FFF6         	movff	__doprnt@f,tblptrl
 19253  0004A8  C0A0  FFF7         	movff	__doprnt@f+1,tblptrh
 19254  0004AC  0100               	movlb	0	; () banked
 19255  0004AE  4B9F               	infsnz	__doprnt@f& (0+255),f,b
 19256  0004B0  2BA0               	incf	(__doprnt@f+1)& (0+255),f,b
 19257  0004B2                     	if	0	;tblptru may be non-zero
 19258  0004B2                     	endif
 19259  0004B2                     	if	0	;tblptru may be non-zero
 19260  0004B2                     	endif
 19261  0004B2  0008               	tblrd		*
 19262  0004B4  FFFF               	dw	65535	; errata NOP
 19263  0004B6  CFF5 F0C3          	movff	tablat,__doprnt@c
 19264  0004BA  0100               	movlb	0	; () banked
 19265  0004BC  51C3               	movf	__doprnt@c& (0+255),w,b
 19266                           
 19267                           ; Switch size 1, requested type "space"
 19268                           ; Number of cases is 5, Range of values is 0 to 115
 19269                           ; switch strategies available:
 19270                           ; Name         Instructions Cycles
 19271                           ; simple_byte           16     9 (average)
 19272                           ;	Chosen strategy is simple_byte
 19273  0004BE  0A00               	xorlw	0	; case 0
 19274  0004C0  B4D8               	btfsc	status,2,c
 19275  0004C2  EF6C  F008         	goto	u10160
 19276  0004C6  0A64               	xorlw	100	; case 100
 19277  0004C8  B4D8               	btfsc	status,2,c
 19278  0004CA  D00B               	goto	l1229
 19279  0004CC  0A02               	xorlw	2	; case 102
 19280  0004CE  B4D8               	btfsc	status,2,c
 19281  0004D0  D710               	goto	l1228
 19282  0004D2  0A0F               	xorlw	15	; case 105
 19283  0004D4  B4D8               	btfsc	status,2,c
 19284  0004D6  D005               	goto	l1229
 19285  0004D8  0A1A               	xorlw	26	; case 115
 19286  0004DA  B4D8               	btfsc	status,2,c
 19287  0004DC  D70E               	goto	l1232
 19288  0004DE  EF5B  F008         	goto	u10150
 19289  0004E2                     l1229:
 19290  0004E2  FFFF               	dw	65535	; assembler added errata NOP
 19291                           
 19292                           ; BSR set to: 0
 19293                           ;doprnt.c: 825: if(flag & (0x700)) {
 19294                           
 19295                           ; BSR set to: 0
 19296  0004E4  0E07               	movlw	7
 19297  0004E6  0100               	movlb	0	; () banked
 19298  0004E8  15B1               	andwf	(__doprnt@flag+1)& (0+255),w,b
 19299  0004EA  B4D8               	btfsc	status,2,c
 19300  0004EC  EFF2  F006         	goto	l1244
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;doprnt.c: 827: if(flag & 0x1000)
 19304  0004F0  0100               	movlb	0	; () banked
 19305  0004F2  A9B1               	btfss	(__doprnt@flag+1)& (0+255),4,b
 19306  0004F4  D005               	goto	l1245
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;doprnt.c: 829: prec = 6;
 19310  0004F6  0E00               	movlw	0
 19311  0004F8  0100               	movlb	0	; () banked
 19312  0004FA  6FC2               	movwf	(__doprnt@prec+1)& (0+255),b
 19313  0004FC  0E06               	movlw	6
 19314  0004FE  6FC1               	movwf	__doprnt@prec& (0+255),b
 19315  000500                     l1245:
 19316  000500  FFFF               	dw	65535	; assembler added errata NOP
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 19320                           
 19321                           ; BSR set to: 0
 19322  000502  C0A1  FFD9         	movff	__doprnt@ap,fsr2l
 19323  000506  C0A2  FFDA         	movff	__doprnt@ap+1,fsr2h
 19324  00050A  CFDF F0A3          	movff	indf2,??__doprnt
 19325  00050E  0E03               	movlw	3
 19326  000510  26DE               	addwf	postinc2,f,c
 19327  000512  CFDF F0A4          	movff	indf2,??__doprnt+1
 19328  000516  0E00               	movlw	0
 19329  000518  22DD               	addwfc	postdec2,f,c
 19330  00051A  C0A3  FFD9         	movff	??__doprnt,fsr2l
 19331  00051E  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 19332  000522  CFDE F0BE          	movff	postinc2,__doprnt@fval
 19333  000526  CFDE F0BF          	movff	postinc2,__doprnt@fval+1
 19334  00052A  CFDD F0C0          	movff	postdec2,__doprnt@fval+2
 19335                           
 19336                           ; BSR set to: 0
 19337                           ;doprnt.c: 831: if(fval < 0.0) {
 19338  00052E  0100               	movlb	0	; () banked
 19339  000530  AFC0               	btfss	(__doprnt@fval+2)& (0+255),7,b
 19340  000532  D011               	goto	l1246
 19341                           
 19342                           ; BSR set to: 0
 19343                           ;doprnt.c: 832: fval = -fval;
 19344  000534  C0BE  F01C         	movff	__doprnt@fval,___ftneg@f1
 19345  000538  C0BF  F01D         	movff	__doprnt@fval+1,___ftneg@f1+1
 19346  00053C  C0C0  F01E         	movff	__doprnt@fval+2,___ftneg@f1+2
 19347  000540  EC5F  F029         	call	___ftneg
 19348  000544  C01C  F0BE         	movff	?___ftneg,__doprnt@fval
 19349  000548  C01D  F0BF         	movff	?___ftneg+1,__doprnt@fval+1
 19350  00054C  C01E  F0C0         	movff	?___ftneg+2,__doprnt@fval+2
 19351                           
 19352                           ;doprnt.c: 833: flag |= 0x03;
 19353  000550  0E03               	movlw	3
 19354  000552  0100               	movlb	0	; () banked
 19355  000554  13B0               	iorwf	__doprnt@flag& (0+255),f,b
 19356  000556                     l1246:
 19357  000556  FFFF               	dw	65535	; assembler added errata NOP
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;doprnt.c: 834: }
 19361                           ;doprnt.c: 835: exp = 0;
 19362                           
 19363                           ; BSR set to: 0
 19364  000558  0E00               	movlw	0
 19365  00055A  0100               	movlb	0	; () banked
 19366  00055C  6FB5               	movwf	(__doprnt@exp+1)& (0+255),b
 19367  00055E  0E00               	movlw	0
 19368  000560  6FB4               	movwf	__doprnt@exp& (0+255),b
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;doprnt.c: 836: if( fval!=0) {
 19372  000562  0100               	movlb	0	; () banked
 19373  000564  51BE               	movf	__doprnt@fval& (0+255),w,b
 19374  000566  0100               	movlb	0	; () banked
 19375  000568  11BF               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 19376  00056A  0100               	movlb	0	; () banked
 19377  00056C  11C0               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 19378  00056E  B4D8               	btfsc	status,2,c
 19379  000570  D095               	goto	l1251
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 19383  000572  0E82               	movlw	130
 19384  000574  0100               	movlb	0	; () banked
 19385  000576  6FA3               	movwf	??__doprnt& (0+255),b
 19386  000578  0EFF               	movlw	255
 19387  00057A  0100               	movlb	0	; () banked
 19388  00057C  6FA4               	movwf	(??__doprnt+1)& (0+255),b
 19389  00057E  C0BE  F0A5         	movff	__doprnt@fval,??__doprnt+2
 19390  000582  C0BF  F0A6         	movff	__doprnt@fval+1,??__doprnt+3
 19391  000586  C0C0  F0A7         	movff	__doprnt@fval+2,??__doprnt+4
 19392  00058A  C0C1  F0A8         	movff	__doprnt@fval+3,??__doprnt+5
 19393  00058E  0E10               	movlw	16
 19394  000590  D007               	goto	u9700
 19395  000592                     u9705:
 19396  000592  FFFF               	dw	65535	; assembler added errata NOP
 19397  000594  0100               	movlb	0	; () banked
 19398  000596  90D8               	bcf	status,0,c
 19399  000598  33A8               	rrcf	(??__doprnt+5)& (0+255),f,b
 19400  00059A  33A7               	rrcf	(??__doprnt+4)& (0+255),f,b
 19401  00059C  33A6               	rrcf	(??__doprnt+3)& (0+255),f,b
 19402  00059E  33A5               	rrcf	(??__doprnt+2)& (0+255),f,b
 19403  0005A0                     u9700:
 19404  0005A0  FFFF               	dw	65535	; assembler added errata NOP
 19405  0005A2  2EE8               	decfsz	wreg,f,c
 19406  0005A4  D7F6               	goto	u9705
 19407  0005A6  0100               	movlb	0	; () banked
 19408  0005A8  51A5               	movf	(??__doprnt+2)& (0+255),w,b
 19409  0005AA  0100               	movlb	0	; () banked
 19410  0005AC  25A3               	addwf	??__doprnt& (0+255),w,b
 19411  0005AE  0100               	movlb	0	; () banked
 19412  0005B0  6FB4               	movwf	__doprnt@exp& (0+255),b
 19413  0005B2  0E00               	movlw	0
 19414  0005B4  0100               	movlb	0	; () banked
 19415  0005B6  21A4               	addwfc	(??__doprnt+1)& (0+255),w,b
 19416  0005B8  0100               	movlb	0	; () banked
 19417  0005BA  6FB5               	movwf	(__doprnt@exp+1)& (0+255),b
 19418                           
 19419                           ; BSR set to: 0
 19420                           ;doprnt.c: 838: exp--;
 19421  0005BC  0100               	movlb	0	; () banked
 19422  0005BE  07B4               	decf	__doprnt@exp& (0+255),f,b
 19423  0005C0  A0D8               	btfss	status,0,c
 19424  0005C2  07B5               	decf	(__doprnt@exp+1)& (0+255),f,b
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;doprnt.c: 839: exp *= 3;
 19428  0005C4  C0B4  F027         	movff	__doprnt@exp,___wmul@multiplier
 19429  0005C8  C0B5  F028         	movff	__doprnt@exp+1,___wmul@multiplier+1
 19430  0005CC  0E00               	movlw	0
 19431  0005CE  6E2A               	movwf	___wmul@multiplicand+1,c
 19432  0005D0  0E03               	movlw	3
 19433  0005D2  6E29               	movwf	___wmul@multiplicand,c
 19434  0005D4  EC74  F029         	call	___wmul	;wreg free
 19435  0005D8  C027  F0B4         	movff	?___wmul,__doprnt@exp
 19436  0005DC  C028  F0B5         	movff	?___wmul+1,__doprnt@exp+1
 19437                           
 19438                           ;doprnt.c: 840: exp /= 10;
 19439  0005E0  C0B4  F01F         	movff	__doprnt@exp,___awdiv@dividend
 19440  0005E4  C0B5  F020         	movff	__doprnt@exp+1,___awdiv@dividend+1
 19441  0005E8  0E00               	movlw	0
 19442  0005EA  6E22               	movwf	___awdiv@divisor+1,c
 19443  0005EC  0E0A               	movlw	10
 19444  0005EE  6E21               	movwf	___awdiv@divisor,c
 19445  0005F0  ECAA  F031         	call	___awdiv	;wreg free
 19446  0005F4  C01F  F0B4         	movff	?___awdiv,__doprnt@exp
 19447  0005F8  C020  F0B5         	movff	?___awdiv+1,__doprnt@exp+1
 19448                           
 19449                           ;doprnt.c: 841: if(exp < 0)
 19450  0005FC  0100               	movlb	0	; () banked
 19451  0005FE  AFB5               	btfss	(__doprnt@exp+1)& (0+255),7,b
 19452  000600  D004               	goto	l1248
 19453                           
 19454                           ; BSR set to: 0
 19455                           ;doprnt.c: 842: exp--;
 19456  000602  0100               	movlb	0	; () banked
 19457  000604  07B4               	decf	__doprnt@exp& (0+255),f,b
 19458  000606  A0D8               	btfss	status,0,c
 19459  000608  07B5               	decf	(__doprnt@exp+1)& (0+255),f,b
 19460  00060A                     l1248:
 19461  00060A  FFFF               	dw	65535	; assembler added errata NOP
 19462                           
 19463                           ; BSR set to: 0
 19464                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 19465                           
 19466                           ; BSR set to: 0
 19467  00060C  0100               	movlb	0	; () banked
 19468  00060E  51B4               	movf	__doprnt@exp& (0+255),w,b
 19469  000610  0800               	sublw	0
 19470  000612  EC1B  F010         	call	_scale
 19471  000616  C087  F0BA         	movff	?_scale,__doprnt@tmpval
 19472  00061A  C088  F0BB         	movff	?_scale+1,__doprnt@tmpval+1
 19473  00061E  C089  F0BC         	movff	?_scale+2,__doprnt@tmpval+2
 19474                           
 19475                           ;doprnt.c: 847: tmpval.integ *= fval;
 19476  000622  C0BA  F078         	movff	__doprnt@tmpval,___ftmul@f1
 19477  000626  C0BB  F079         	movff	__doprnt@tmpval+1,___ftmul@f1+1
 19478  00062A  C0BC  F07A         	movff	__doprnt@tmpval+2,___ftmul@f1+2
 19479  00062E  C0BE  F07B         	movff	__doprnt@fval,___ftmul@f2
 19480  000632  C0BF  F07C         	movff	__doprnt@fval+1,___ftmul@f2+1
 19481  000636  C0C0  F07D         	movff	__doprnt@fval+2,___ftmul@f2+2
 19482  00063A  EC53  F03C         	call	___ftmul	;wreg free
 19483  00063E  C078  F0BA         	movff	?___ftmul,__doprnt@tmpval
 19484  000642  C079  F0BB         	movff	?___ftmul+1,__doprnt@tmpval+1
 19485  000646  C07A  F0BC         	movff	?___ftmul+2,__doprnt@tmpval+2
 19486                           
 19487                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 19488  00064A  C0BA  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19489  00064E  C0BB  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19490  000652  C0BC  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19491  000656  0E00               	movlw	0
 19492  000658  6E22               	movwf	___ftge@ff2,c
 19493  00065A  0E80               	movlw	128
 19494  00065C  6E23               	movwf	___ftge@ff2+1,c
 19495  00065E  0E3F               	movlw	63
 19496  000660  6E24               	movwf	___ftge@ff2+2,c
 19497  000662  ECF6  F031         	call	___ftge	;wreg free
 19498  000666  B0D8               	btfsc	status,0,c
 19499  000668  D005               	goto	l1249
 19500                           
 19501                           ;doprnt.c: 849: exp--;
 19502  00066A  0100               	movlb	0	; () banked
 19503  00066C  07B4               	decf	__doprnt@exp& (0+255),f,b
 19504  00066E  A0D8               	btfss	status,0,c
 19505  000670  07B5               	decf	(__doprnt@exp+1)& (0+255),f,b
 19506  000672  D014               	goto	l1251
 19507  000674                     l1249:
 19508  000674  FFFF               	dw	65535	; assembler added errata NOP
 19509                           
 19510                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 19511                           
 19512                           ; BSR set to: 0
 19513  000676  C0BA  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19514  00067A  C0BB  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19515  00067E  C0BC  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19516  000682  0E00               	movlw	0
 19517  000684  6E22               	movwf	___ftge@ff2,c
 19518  000686  0E20               	movlw	32
 19519  000688  6E23               	movwf	___ftge@ff2+1,c
 19520  00068A  0E41               	movlw	65
 19521  00068C  6E24               	movwf	___ftge@ff2+2,c
 19522  00068E  ECF6  F031         	call	___ftge	;wreg free
 19523  000692  A0D8               	btfss	status,0,c
 19524  000694  D003               	goto	l1251
 19525                           
 19526                           ;doprnt.c: 851: exp++;
 19527  000696  0100               	movlb	0	; () banked
 19528  000698  4BB4               	infsnz	__doprnt@exp& (0+255),f,b
 19529  00069A  2BB5               	incf	(__doprnt@exp+1)& (0+255),f,b
 19530  00069C                     l1251:
 19531  00069C  FFFF               	dw	65535	; assembler added errata NOP
 19532                           
 19533                           ;doprnt.c: 852: }
 19534                           ;doprnt.c: 1112: if(prec <= 12)
 19535                           
 19536                           ; BSR set to: 0
 19537                           
 19538                           ; BSR set to: 0
 19539                           
 19540                           ; BSR set to: 0
 19541  00069E  0100               	movlb	0	; () banked
 19542  0006A0  BFC2               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 19543  0006A2  D008               	goto	u9740
 19544  0006A4  0100               	movlb	0	; () banked
 19545  0006A6  51C2               	movf	(__doprnt@prec+1)& (0+255),w,b
 19546  0006A8  E11F               	bnz	l9840
 19547  0006AA  0E0D               	movlw	13
 19548  0006AC  0100               	movlb	0	; () banked
 19549  0006AE  5DC1               	subwf	__doprnt@prec& (0+255),w,b
 19550  0006B0  B0D8               	btfsc	status,0,c
 19551  0006B2  D019               	goto	l1252
 19552  0006B4                     u9740:
 19553  0006B4  FFFF               	dw	65535	; assembler added errata NOP
 19554                           
 19555                           ; BSR set to: 0
 19556                           ;doprnt.c: 1113: fval += fround(prec);
 19557  0006B6  C0BE  F060         	movff	__doprnt@fval,___ftadd@f1
 19558  0006BA  C0BF  F061         	movff	__doprnt@fval+1,___ftadd@f1+1
 19559  0006BE  C0C0  F062         	movff	__doprnt@fval+2,___ftadd@f1+2
 19560  0006C2  0100               	movlb	0	; () banked
 19561  0006C4  51C1               	movf	__doprnt@prec& (0+255),w,b
 19562  0006C6  EC8F  F018         	call	_fround
 19563  0006CA  C087  F063         	movff	?_fround,___ftadd@f2
 19564  0006CE  C088  F064         	movff	?_fround+1,___ftadd@f2+1
 19565  0006D2  C089  F065         	movff	?_fround+2,___ftadd@f2+2
 19566  0006D6  ECD0  F019         	call	___ftadd	;wreg free
 19567  0006DA  C060  F0BE         	movff	?___ftadd,__doprnt@fval
 19568  0006DE  C061  F0BF         	movff	?___ftadd+1,__doprnt@fval+1
 19569  0006E2  C062  F0C0         	movff	?___ftadd+2,__doprnt@fval+2
 19570  0006E6                     l1252:
 19571  0006E6  FFFF               	dw	65535	; assembler added errata NOP
 19572  0006E8                     l9840:
 19573                           
 19574                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 19575  0006E8  0100               	movlb	0	; () banked
 19576  0006EA  BFB5               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 19577  0006EC  D008               	goto	u9750
 19578  0006EE  0100               	movlb	0	; () banked
 19579  0006F0  51B5               	movf	(__doprnt@exp+1)& (0+255),w,b
 19580  0006F2  E12C               	bnz	l9848
 19581  0006F4  0E0A               	movlw	10
 19582  0006F6  0100               	movlb	0	; () banked
 19583  0006F8  5DB4               	subwf	__doprnt@exp& (0+255),w,b
 19584  0006FA  B0D8               	btfsc	status,0,c
 19585  0006FC  D026               	goto	u9780
 19586  0006FE                     u9750:
 19587  0006FE  FFFF               	dw	65535	; assembler added errata NOP
 19588                           
 19589                           ; BSR set to: 0
 19590  000700  0100               	movlb	0	; () banked
 19591  000702  51BE               	movf	__doprnt@fval& (0+255),w,b
 19592  000704  0100               	movlb	0	; () banked
 19593  000706  11BF               	iorwf	(__doprnt@fval+1)& (0+255),w,b
 19594  000708  0100               	movlb	0	; () banked
 19595  00070A  11C0               	iorwf	(__doprnt@fval+2)& (0+255),w,b
 19596  00070C  B4D8               	btfsc	status,2,c
 19597  00070E  D062               	goto	l1253
 19598                           
 19599                           ; BSR set to: 0
 19600  000710  C0BE  F08E         	movff	__doprnt@fval,___fttol@f1
 19601  000714  C0BF  F08F         	movff	__doprnt@fval+1,___fttol@f1+1
 19602  000718  C0C0  F090         	movff	__doprnt@fval+2,___fttol@f1+2
 19603  00071C  EC16  F03B         	call	___fttol	;wreg free
 19604  000720  0100               	movlb	0	; () banked
 19605  000722  518E               	movf	?___fttol& (0+255),w,b
 19606  000724  0100               	movlb	0	; () banked
 19607  000726  118F               	iorwf	(?___fttol+1)& (0+255),w,b
 19608  000728  0100               	movlb	0	; () banked
 19609  00072A  1190               	iorwf	(?___fttol+2)& (0+255),w,b
 19610  00072C  0100               	movlb	0	; () banked
 19611  00072E  1191               	iorwf	(?___fttol+3)& (0+255),w,b
 19612  000730  A4D8               	btfss	status,2,c
 19613  000732  D050               	goto	l1253
 19614                           
 19615                           ; BSR set to: 0
 19616  000734  0100               	movlb	0	; () banked
 19617  000736  BFB5               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 19618  000738  D04D               	goto	l1253
 19619  00073A  0100               	movlb	0	; () banked
 19620  00073C  51B5               	movf	(__doprnt@exp+1)& (0+255),w,b
 19621  00073E  E106               	bnz	l9848
 19622  000740  0E02               	movlw	2
 19623  000742  0100               	movlb	0	; () banked
 19624  000744  5DB4               	subwf	__doprnt@exp& (0+255),w,b
 19625  000746  A0D8               	btfss	status,0,c
 19626  000748  D045               	goto	l1253
 19627  00074A                     u9780:
 19628  00074A  FFFF               	dw	65535	; assembler added errata NOP
 19629  00074C                     l9848:
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 19633  00074C  C0BA  F01F         	movff	__doprnt@tmpval,___ftge@ff1
 19634  000750  C0BB  F020         	movff	__doprnt@tmpval+1,___ftge@ff1+1
 19635  000754  C0BC  F021         	movff	__doprnt@tmpval+2,___ftge@ff1+2
 19636  000758  0E70               	movlw	112
 19637  00075A  6E22               	movwf	___ftge@ff2,c
 19638  00075C  0E89               	movlw	137
 19639  00075E  6E23               	movwf	___ftge@ff2+1,c
 19640  000760  0E40               	movlw	64
 19641  000762  6E24               	movwf	___ftge@ff2+2,c
 19642  000764  ECF6  F031         	call	___ftge	;wreg free
 19643  000768  B0D8               	btfsc	status,0,c
 19644  00076A  D003               	goto	l1256
 19645                           
 19646                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 19647  00076C  0100               	movlb	0	; () banked
 19648  00076E  0EF7               	movlw	247
 19649  000770  D003               	goto	L19
 19650  000772                     l1256:
 19651  000772  FFFF               	dw	65535	; assembler added errata NOP
 19652                           
 19653                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 19654                           
 19655                           ; BSR set to: 0
 19656  000774  0100               	movlb	0	; () banked
 19657  000776  0EF8               	movlw	248
 19658  000778                     L19:
 19659  000778  FFFF               	dw	65535	; assembler added errata NOP
 19660  00077A  27B4               	addwf	__doprnt@exp& (0+255),f,b
 19661  00077C  0EFF               	movlw	255
 19662  00077E  23B5               	addwfc	(__doprnt@exp+1)& (0+255),f,b
 19663                           
 19664                           ; BSR set to: 0
 19665                           ;doprnt.c: 1124: }
 19666                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 19667                           
 19668                           ; BSR set to: 0
 19669  000780  0100               	movlb	0	; () banked
 19670  000782  51B4               	movf	__doprnt@exp& (0+255),w,b
 19671  000784  EC1B  F010         	call	_scale
 19672  000788  C087  F0BA         	movff	?_scale,__doprnt@tmpval
 19673  00078C  C088  F0BB         	movff	?_scale+1,__doprnt@tmpval+1
 19674  000790  C089  F0BC         	movff	?_scale+2,__doprnt@tmpval+2
 19675                           
 19676                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 19677  000794  C0BE  F019         	movff	__doprnt@fval,__tdiv_to_l_@f1
 19678  000798  C0BF  F01A         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
 19679  00079C  C0C0  F01B         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
 19680  0007A0  C0BA  F01C         	movff	__doprnt@tmpval,__tdiv_to_l_@f2
 19681  0007A4  C0BB  F01D         	movff	__doprnt@tmpval+1,__tdiv_to_l_@f2+1
 19682  0007A8  C0BC  F01E         	movff	__doprnt@tmpval+2,__tdiv_to_l_@f2+2
 19683  0007AC  EC71  F01F         	call	__tdiv_to_l_	;wreg free
 19684  0007B0  C019  F0B6         	movff	?__tdiv_to_l_,__doprnt@val
 19685  0007B4  C01A  F0B7         	movff	?__tdiv_to_l_+1,__doprnt@val+1
 19686  0007B8  C01B  F0B8         	movff	?__tdiv_to_l_+2,__doprnt@val+2
 19687  0007BC  C01C  F0B9         	movff	?__tdiv_to_l_+3,__doprnt@val+3
 19688                           
 19689                           ;doprnt.c: 1129: fval = 0.0;
 19690  0007C0  0E00               	movlw	0
 19691  0007C2  0100               	movlb	0	; () banked
 19692  0007C4  6FBE               	movwf	__doprnt@fval& (0+255),b
 19693  0007C6  0E00               	movlw	0
 19694  0007C8  0100               	movlb	0	; () banked
 19695  0007CA  6FBF               	movwf	(__doprnt@fval+1)& (0+255),b
 19696  0007CC  0E00               	movlw	0
 19697  0007CE  0100               	movlb	0	; () banked
 19698  0007D0  6FC0               	movwf	(__doprnt@fval+2)& (0+255),b
 19699                           
 19700                           ;doprnt.c: 1130: } else {
 19701  0007D2  D034               	goto	l1262
 19702  0007D4                     l1253:
 19703  0007D4  FFFF               	dw	65535	; assembler added errata NOP
 19704                           
 19705                           ; BSR set to: 0
 19706                           ;doprnt.c: 1131: val = (unsigned long)fval;
 19707                           
 19708                           ; BSR set to: 0
 19709  0007D6  C0BE  F08E         	movff	__doprnt@fval,___fttol@f1
 19710  0007DA  C0BF  F08F         	movff	__doprnt@fval+1,___fttol@f1+1
 19711  0007DE  C0C0  F090         	movff	__doprnt@fval+2,___fttol@f1+2
 19712  0007E2  EC16  F03B         	call	___fttol	;wreg free
 19713  0007E6  C08E  F0B6         	movff	?___fttol,__doprnt@val
 19714  0007EA  C08F  F0B7         	movff	?___fttol+1,__doprnt@val+1
 19715  0007EE  C090  F0B8         	movff	?___fttol+2,__doprnt@val+2
 19716  0007F2  C091  F0B9         	movff	?___fttol+3,__doprnt@val+3
 19717                           
 19718                           ;doprnt.c: 1132: fval -= (double)val;
 19719  0007F6  C0BE  F069         	movff	__doprnt@fval,___ftsub@f1
 19720  0007FA  C0BF  F06A         	movff	__doprnt@fval+1,___ftsub@f1+1
 19721  0007FE  C0C0  F06B         	movff	__doprnt@fval+2,___ftsub@f1+2
 19722  000802  C0B6  F021         	movff	__doprnt@val,___lltoft@c
 19723  000806  C0B7  F022         	movff	__doprnt@val+1,___lltoft@c+1
 19724  00080A  C0B8  F023         	movff	__doprnt@val+2,___lltoft@c+2
 19725  00080E  C0B9  F024         	movff	__doprnt@val+3,___lltoft@c+3
 19726  000812  EC97  F02D         	call	___lltoft	;wreg free
 19727  000816  C021  F06C         	movff	?___lltoft,___ftsub@f2
 19728  00081A  C022  F06D         	movff	?___lltoft+1,___ftsub@f2+1
 19729  00081E  C023  F06E         	movff	?___lltoft+2,___ftsub@f2+2
 19730  000822  EC63  F02C         	call	___ftsub	;wreg free
 19731  000826  C069  F0BE         	movff	?___ftsub,__doprnt@fval
 19732  00082A  C06A  F0BF         	movff	?___ftsub+1,__doprnt@fval+1
 19733  00082E  C06B  F0C0         	movff	?___ftsub+2,__doprnt@fval+2
 19734                           
 19735                           ;doprnt.c: 1133: exp = 0;
 19736  000832  0E00               	movlw	0
 19737  000834  0100               	movlb	0	; () banked
 19738  000836  6FB5               	movwf	(__doprnt@exp+1)& (0+255),b
 19739  000838  0E00               	movlw	0
 19740  00083A  6FB4               	movwf	__doprnt@exp& (0+255),b
 19741  00083C                     l1262:
 19742  00083C  FFFF               	dw	65535	; assembler added errata NOP
 19743                           
 19744                           ; BSR set to: 0
 19745                           ;doprnt.c: 1134: }
 19746                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 19747                           
 19748                           ; BSR set to: 0
 19749  00083E  0E01               	movlw	1
 19750  000840  0100               	movlb	0	; () banked
 19751  000842  6FC3               	movwf	__doprnt@c& (0+255),b
 19752  000844                     l9868:
 19753  000844  FFFF               	dw	65535	; assembler added errata NOP
 19754                           
 19755                           ; BSR set to: 0
 19756  000846  0E0A               	movlw	10
 19757  000848  0100               	movlb	0	; () banked
 19758  00084A  19C3               	xorwf	__doprnt@c& (0+255),w,b
 19759  00084C  B4D8               	btfsc	status,2,c
 19760  00084E  D022               	goto	u9820
 19761                           
 19762                           ; BSR set to: 0
 19763                           ;doprnt.c: 1137: if(val < dpowers[c])
 19764                           
 19765                           ; BSR set to: 0
 19766                           
 19767                           ; BSR set to: 0
 19768  000850  0100               	movlb	0	; () banked
 19769  000852  51C3               	movf	__doprnt@c& (0+255),w,b
 19770  000854  0D04               	mullw	4
 19771  000856  0E23               	movlw	low _dpowers
 19772  000858  24F3               	addwf	prodl,w,c
 19773  00085A  6EF6               	movwf	tblptrl,c
 19774  00085C  0E7D               	movlw	high _dpowers
 19775  00085E  20F4               	addwfc	prodh,w,c
 19776  000860  6EF7               	movwf	tblptrh,c
 19777  000862                     	if	0	;There are less than 3 active tblptr bytes
 19778  000862                     	endif
 19779  000862  0009               	tblrd		*+
 19780  000864  FFFF               	dw	65535	; errata NOP
 19781  000866  50F5               	movf	tablat,w,c
 19782  000868  0100               	movlb	0	; () banked
 19783  00086A  5DB6               	subwf	__doprnt@val& (0+255),w,b
 19784  00086C  0009               	tblrd		*+
 19785  00086E  FFFF               	dw	65535	; errata NOP
 19786  000870  50F5               	movf	tablat,w,c
 19787  000872  0100               	movlb	0	; () banked
 19788  000874  59B7               	subwfb	(__doprnt@val+1)& (0+255),w,b
 19789  000876  0009               	tblrd		*+
 19790  000878  FFFF               	dw	65535	; errata NOP
 19791  00087A  50F5               	movf	tablat,w,c
 19792  00087C  0100               	movlb	0	; () banked
 19793  00087E  59B8               	subwfb	(__doprnt@val+2)& (0+255),w,b
 19794  000880  0009               	tblrd		*+
 19795  000882  FFFF               	dw	65535	; errata NOP
 19796  000884  50F5               	movf	tablat,w,c
 19797  000886  0100               	movlb	0	; () banked
 19798  000888  59B9               	subwfb	(__doprnt@val+3)& (0+255),w,b
 19799  00088A  A0D8               	btfss	status,0,c
 19800  00088C  D003               	goto	u9820
 19801                           
 19802                           ; BSR set to: 0
 19803                           
 19804                           ; BSR set to: 0
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;doprnt.c: 1138: break;
 19808  00088E  0100               	movlb	0	; () banked
 19809  000890  2BC3               	incf	__doprnt@c& (0+255),f,b
 19810  000892  D7D8               	goto	l9868
 19811  000894                     u9820:
 19812  000894  FFFF               	dw	65535	; assembler added errata NOP
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;doprnt.c: 1175: {
 19816                           ;doprnt.c: 1188: if(flag & 0x03)
 19817                           
 19818                           ; BSR set to: 0
 19819  000896  0E03               	movlw	3
 19820  000898  0100               	movlb	0	; () banked
 19821  00089A  15B0               	andwf	__doprnt@flag& (0+255),w,b
 19822  00089C  0100               	movlb	0	; () banked
 19823  00089E  6FA3               	movwf	??__doprnt& (0+255),b
 19824  0008A0  0E00               	movlw	0
 19825  0008A2  0100               	movlb	0	; () banked
 19826  0008A4  15B1               	andwf	(__doprnt@flag+1)& (0+255),w,b
 19827  0008A6  0100               	movlb	0	; () banked
 19828  0008A8  6FA4               	movwf	(??__doprnt+1)& (0+255),b
 19829  0008AA  0100               	movlb	0	; () banked
 19830  0008AC  51A3               	movf	??__doprnt& (0+255),w,b
 19831  0008AE  0100               	movlb	0	; () banked
 19832  0008B0  11A4               	iorwf	(??__doprnt+1)& (0+255),w,b
 19833  0008B2  B4D8               	btfsc	status,2,c
 19834  0008B4  D0B8               	goto	l1272
 19835                           
 19836                           ; BSR set to: 0
 19837                           ;doprnt.c: 1190: if(pb->func) (pb->func('-')),(++ccnt); else ((*pb->ptr++ = '-'),(++ccnt
      +                          ));
 19838  0008B6  0100               	movlb	0	; () banked
 19839  0008B8  EE20 F002          	lfsr	2,2
 19840  0008BC  519D               	movf	__doprnt@pb& (0+255),w,b
 19841  0008BE  26D9               	addwf	fsr2l,f,c
 19842  0008C0  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19843  0008C2  22DA               	addwfc	fsr2h,f,c
 19844  0008C4  50DE               	movf	postinc2,w,c
 19845  0008C6  10DE               	iorwf	postinc2,w,c
 19846  0008C8  B4D8               	btfsc	status,2,c
 19847  0008CA  D017               	goto	l1267
 19848                           
 19849                           ; BSR set to: 0
 19850  0008CC  0100               	movlb	0	; () banked
 19851  0008CE  EE20 F002          	lfsr	2,2
 19852  0008D2  519D               	movf	__doprnt@pb& (0+255),w,b
 19853  0008D4  26D9               	addwf	fsr2l,f,c
 19854  0008D6  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19855  0008D8  22DA               	addwfc	fsr2h,f,c
 19856  0008DA  D801               	call	u9858
 19857  0008DC  D0A0               	goto	l9906
 19858  0008DE                     u9858:
 19859  0008DE  FFFF               	dw	65535	; assembler added errata NOP
 19860  0008E0  0005               	push	
 19861  0008E2  6EFA               	movwf	pclath,c
 19862  0008E4  50DE               	movf	postinc2,w,c
 19863  0008E6  6EFD               	movwf	tosl,c
 19864  0008E8  50DE               	movf	postinc2,w,c
 19865  0008EA  6EFE               	movwf	tosh,c
 19866  0008EC  50F8               	movf	tblptru,w,c
 19867  0008EE  6EFF               	movwf	tosu,c
 19868  0008F0  50FA               	movf	pclath,w,c
 19869  0008F2  0E2D               	movlw	45
 19870  0008F4  0012               	return		;indir
 19871  0008F6  FFFF               	dw	65535	; errata NOP
 19872  0008F8  D092               	goto	l9906
 19873  0008FA                     l1267:
 19874  0008FA  FFFF               	dw	65535	; assembler added errata NOP
 19875                           
 19876                           ; BSR set to: 0
 19877                           
 19878                           ; BSR set to: 0
 19879  0008FC  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 19880  000900  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 19881  000904  CFDE F0A3          	movff	postinc2,??__doprnt
 19882  000908  CFDD F0A4          	movff	postdec2,??__doprnt+1
 19883  00090C  C0A3  FFD9         	movff	??__doprnt,fsr2l
 19884  000910  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 19885  000914  0E2D               	movlw	45
 19886  000916  D07A               	goto	L30
 19887  000918  FFFF               	dw	65535	; assembler added errata NOP
 19888                           
 19889                           ; BSR set to: 0
 19890                           ;doprnt.c: 1200: {
 19891                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 19892                           
 19893                           ; BSR set to: 0
 19894  00091A  C0B6  F019         	movff	__doprnt@val,___lldiv@dividend
 19895  00091E  C0B7  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 19896  000922  C0B8  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 19897  000926  C0B9  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 19898  00092A  0100               	movlb	0	; () banked
 19899  00092C  51C3               	movf	__doprnt@c& (0+255),w,b
 19900  00092E  0D04               	mullw	4
 19901  000930  0E23               	movlw	low _dpowers
 19902  000932  24F3               	addwf	prodl,w,c
 19903  000934  6EF6               	movwf	tblptrl,c
 19904  000936  0E7D               	movlw	high _dpowers
 19905  000938  20F4               	addwfc	prodh,w,c
 19906  00093A  6EF7               	movwf	tblptrh,c
 19907  00093C                     	if	0	;There are less than 3 active tblptr bytes
 19908  00093C                     	endif
 19909  00093C  0009               	tblrd		*+
 19910  00093E  FFFF               	dw	65535	; errata NOP
 19911  000940  CFF5 F01D          	movff	tablat,___lldiv@divisor
 19912  000944  0009               	tblrd		*+
 19913  000946  FFFF               	dw	65535	; errata NOP
 19914  000948  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 19915  00094C  0009               	tblrd		*+
 19916  00094E  FFFF               	dw	65535	; errata NOP
 19917  000950  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 19918  000954  000A               	tblrd		*-
 19919  000956  FFFF               	dw	65535	; errata NOP
 19920  000958  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 19921  00095C  EC19  F031         	call	___lldiv
 19922  000960  C019  F0BA         	movff	?___lldiv,__doprnt@tmpval
 19923  000964  C01A  F0BB         	movff	?___lldiv+1,__doprnt@tmpval+1
 19924  000968  C01B  F0BC         	movff	?___lldiv+2,__doprnt@tmpval+2
 19925  00096C  C01C  F0BD         	movff	?___lldiv+3,__doprnt@tmpval+3
 19926                           
 19927                           ;doprnt.c: 1202: tmpval.vd %= 10;
 19928  000970  C0BA  F026         	movff	__doprnt@tmpval,___llmod@dividend
 19929  000974  C0BB  F027         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 19930  000978  C0BC  F028         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 19931  00097C  C0BD  F029         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 19932  000980  0E0A               	movlw	10
 19933  000982  6E2A               	movwf	___llmod@divisor,c
 19934  000984  0E00               	movlw	0
 19935  000986  6E2B               	movwf	___llmod@divisor+1,c
 19936  000988  0E00               	movlw	0
 19937  00098A  6E2C               	movwf	___llmod@divisor+2,c
 19938  00098C  0E00               	movlw	0
 19939  00098E  6E2D               	movwf	___llmod@divisor+3,c
 19940  000990  EC9D  F02E         	call	___llmod	;wreg free
 19941  000994  C026  F0BA         	movff	?___llmod,__doprnt@tmpval
 19942  000998  C027  F0BB         	movff	?___llmod+1,__doprnt@tmpval+1
 19943  00099C  C028  F0BC         	movff	?___llmod+2,__doprnt@tmpval+2
 19944  0009A0  C029  F0BD         	movff	?___llmod+3,__doprnt@tmpval+3
 19945                           
 19946                           ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)),(++ccnt); else ((*pb->ptr++ = 
      +                          '0' + tmpval.vd),(++ccnt));
 19947  0009A4  0100               	movlb	0	; () banked
 19948  0009A6  EE20 F002          	lfsr	2,2
 19949  0009AA  519D               	movf	__doprnt@pb& (0+255),w,b
 19950  0009AC  26D9               	addwf	fsr2l,f,c
 19951  0009AE  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19952  0009B0  22DA               	addwfc	fsr2h,f,c
 19953  0009B2  50DE               	movf	postinc2,w,c
 19954  0009B4  10DE               	iorwf	postinc2,w,c
 19955  0009B6  B4D8               	btfsc	status,2,c
 19956  0009B8  D019               	goto	l1271
 19957                           
 19958                           ; BSR set to: 0
 19959  0009BA  0100               	movlb	0	; () banked
 19960  0009BC  EE20 F002          	lfsr	2,2
 19961  0009C0  519D               	movf	__doprnt@pb& (0+255),w,b
 19962  0009C2  26D9               	addwf	fsr2l,f,c
 19963  0009C4  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 19964  0009C6  22DA               	addwfc	fsr2h,f,c
 19965  0009C8  D801               	call	u9878
 19966  0009CA  D029               	goto	l9906
 19967  0009CC                     u9878:
 19968  0009CC  FFFF               	dw	65535	; assembler added errata NOP
 19969  0009CE  0005               	push	
 19970  0009D0  6EFA               	movwf	pclath,c
 19971  0009D2  50DE               	movf	postinc2,w,c
 19972  0009D4  6EFD               	movwf	tosl,c
 19973  0009D6  50DE               	movf	postinc2,w,c
 19974  0009D8  6EFE               	movwf	tosh,c
 19975  0009DA  50F8               	movf	tblptru,w,c
 19976  0009DC  6EFF               	movwf	tosu,c
 19977  0009DE  50FA               	movf	pclath,w,c
 19978  0009E0  0100               	movlb	0	; () banked
 19979  0009E2  51BA               	movf	__doprnt@tmpval& (0+255),w,b
 19980  0009E4  0F30               	addlw	48
 19981  0009E6  0012               	return		;indir
 19982  0009E8  FFFF               	dw	65535	; errata NOP
 19983  0009EA  D019               	goto	l9906
 19984  0009EC                     l1271:
 19985  0009EC  FFFF               	dw	65535	; assembler added errata NOP
 19986                           
 19987                           ; BSR set to: 0
 19988                           
 19989                           ; BSR set to: 0
 19990  0009EE  0100               	movlb	0	; () banked
 19991  0009F0  51BA               	movf	__doprnt@tmpval& (0+255),w,b
 19992  0009F2  0F30               	addlw	48
 19993  0009F4  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 19994  0009F8  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 19995  0009FC  CFDE F0A3          	movff	postinc2,??__doprnt
 19996  000A00  CFDD F0A4          	movff	postdec2,??__doprnt+1
 19997  000A04  C0A3  FFD9         	movff	??__doprnt,fsr2l
 19998  000A08  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 19999  000A0C                     L30:
 20000  000A0C  FFFF               	dw	65535	; assembler added errata NOP
 20001  000A0E  6EDF               	movwf	indf2,c
 20002  000A10  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20003  000A14  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20004  000A18  2ADE               	incf	postinc2,f,c
 20005  000A1A  0E00               	movlw	0
 20006  000A1C  22DD               	addwfc	postdec2,f,c
 20007  000A1E                     l9906:
 20008  000A1E  FFFF               	dw	65535	; assembler added errata NOP
 20009                           
 20010                           ; BSR set to: 0
 20011  000A20  0100               	movlb	0	; () banked
 20012  000A22  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20013  000A24  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20014  000A26                     l1272:
 20015  000A26  FFFF               	dw	65535	; assembler added errata NOP
 20016                           
 20017                           ; BSR set to: 0
 20018                           
 20019                           ; BSR set to: 0
 20020                           
 20021                           ; BSR set to: 0
 20022  000A28  0100               	movlb	0	; () banked
 20023  000A2A  07C3               	decf	__doprnt@c& (0+255),f,b
 20024  000A2C  0100               	movlb	0	; () banked
 20025  000A2E  29C3               	incf	__doprnt@c& (0+255),w,b
 20026  000A30  B4D8               	btfsc	status,2,c
 20027  000A32  D042               	goto	l1274
 20028  000A34  D771               	goto	l1270
 20029  000A36  FFFF               	dw	65535	; assembler added errata NOP
 20030  000A38                     l9910:
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;doprnt.c: 1208: if(pb->func) (pb->func('0')),(++ccnt); else ((*pb->ptr++ = '0'),(++ccnt
      +                          ));
 20034  000A38  0100               	movlb	0	; () banked
 20035  000A3A  EE20 F002          	lfsr	2,2
 20036  000A3E  519D               	movf	__doprnt@pb& (0+255),w,b
 20037  000A40  26D9               	addwf	fsr2l,f,c
 20038  000A42  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20039  000A44  22DA               	addwfc	fsr2h,f,c
 20040  000A46  50DE               	movf	postinc2,w,c
 20041  000A48  10DE               	iorwf	postinc2,w,c
 20042  000A4A  B4D8               	btfsc	status,2,c
 20043  000A4C  D017               	goto	l1276
 20044                           
 20045                           ; BSR set to: 0
 20046  000A4E  0100               	movlb	0	; () banked
 20047  000A50  EE20 F002          	lfsr	2,2
 20048  000A54  519D               	movf	__doprnt@pb& (0+255),w,b
 20049  000A56  26D9               	addwf	fsr2l,f,c
 20050  000A58  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20051  000A5A  22DA               	addwfc	fsr2h,f,c
 20052  000A5C  D801               	call	u9908
 20053  000A5E  D024               	goto	l9920
 20054  000A60                     u9908:
 20055  000A60  FFFF               	dw	65535	; assembler added errata NOP
 20056  000A62  0005               	push	
 20057  000A64  6EFA               	movwf	pclath,c
 20058  000A66  50DE               	movf	postinc2,w,c
 20059  000A68  6EFD               	movwf	tosl,c
 20060  000A6A  50DE               	movf	postinc2,w,c
 20061  000A6C  6EFE               	movwf	tosh,c
 20062  000A6E  50F8               	movf	tblptru,w,c
 20063  000A70  6EFF               	movwf	tosu,c
 20064  000A72  50FA               	movf	pclath,w,c
 20065  000A74  0E30               	movlw	48
 20066  000A76  0012               	return		;indir
 20067  000A78  FFFF               	dw	65535	; errata NOP
 20068  000A7A  D016               	goto	l9920
 20069  000A7C                     l1276:
 20070  000A7C  FFFF               	dw	65535	; assembler added errata NOP
 20071                           
 20072                           ; BSR set to: 0
 20073                           
 20074                           ; BSR set to: 0
 20075  000A7E  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20076  000A82  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20077  000A86  CFDE F0A3          	movff	postinc2,??__doprnt
 20078  000A8A  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20079  000A8E  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20080  000A92  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20081  000A96  0E30               	movlw	48
 20082  000A98  6EDF               	movwf	indf2,c
 20083                           
 20084                           ; BSR set to: 0
 20085  000A9A  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20086  000A9E  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20087  000AA2  2ADE               	incf	postinc2,f,c
 20088  000AA4  0E00               	movlw	0
 20089  000AA6  22DD               	addwfc	postdec2,f,c
 20090  000AA8                     l9920:
 20091  000AA8  FFFF               	dw	65535	; assembler added errata NOP
 20092                           
 20093                           ; BSR set to: 0
 20094  000AAA  0100               	movlb	0	; () banked
 20095  000AAC  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20096  000AAE  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20097                           
 20098                           ; BSR set to: 0
 20099                           ;doprnt.c: 1209: exp--;
 20100                           
 20101                           ; BSR set to: 0
 20102  000AB0  0100               	movlb	0	; () banked
 20103  000AB2  07B4               	decf	__doprnt@exp& (0+255),f,b
 20104  000AB4  A0D8               	btfss	status,0,c
 20105  000AB6  07B5               	decf	(__doprnt@exp+1)& (0+255),f,b
 20106  000AB8                     l1274:
 20107  000AB8  FFFF               	dw	65535	; assembler added errata NOP
 20108                           
 20109                           ; BSR set to: 0
 20110                           
 20111                           ; BSR set to: 0
 20112  000ABA  0100               	movlb	0	; () banked
 20113  000ABC  BFB5               	btfsc	(__doprnt@exp+1)& (0+255),7,b
 20114  000ABE  D007               	goto	u9910
 20115  000AC0  0100               	movlb	0	; () banked
 20116  000AC2  51B5               	movf	(__doprnt@exp+1)& (0+255),w,b
 20117  000AC4  E1B9               	bnz	l9910
 20118  000AC6  0100               	movlb	0	; () banked
 20119  000AC8  05B4               	decf	__doprnt@exp& (0+255),w,b
 20120  000ACA  B0D8               	btfsc	status,0,c
 20121  000ACC  D7B4               	goto	l1275
 20122  000ACE                     u9910:
 20123  000ACE  FFFF               	dw	65535	; assembler added errata NOP
 20124                           
 20125                           ; BSR set to: 0
 20126                           ;doprnt.c: 1210: }
 20127                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 20128                           
 20129                           ; BSR set to: 0
 20130  000AD0  0100               	movlb	0	; () banked
 20131  000AD2  BFC2               	btfsc	(__doprnt@prec+1)& (0+255),7,b
 20132  000AD4  D00C               	goto	l1279
 20133  000AD6  0100               	movlb	0	; () banked
 20134  000AD8  51C2               	movf	(__doprnt@prec+1)& (0+255),w,b
 20135  000ADA  E105               	bnz	u9920
 20136  000ADC  0E09               	movlw	9
 20137  000ADE  0100               	movlb	0	; () banked
 20138  000AE0  5DC1               	subwf	__doprnt@prec& (0+255),w,b
 20139  000AE2  A0D8               	btfss	status,0,c
 20140  000AE4  D004               	goto	l1279
 20141  000AE6                     u9920:
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 20145  000AE6  0E08               	movlw	8
 20146  000AE8  0100               	movlb	0	; () banked
 20147  000AEA  6FC3               	movwf	__doprnt@c& (0+255),b
 20148  000AEC  D003               	goto	l1280
 20149  000AEE                     l1279:
 20150  000AEE  FFFF               	dw	65535	; assembler added errata NOP
 20151                           
 20152                           ; BSR set to: 0
 20153                           ;doprnt.c: 1213: else
 20154                           ;doprnt.c: 1214: c = prec;
 20155  000AF0  C0C1  F0C3         	movff	__doprnt@prec,__doprnt@c
 20156  000AF4                     l1280:
 20157  000AF4  FFFF               	dw	65535	; assembler added errata NOP
 20158                           
 20159                           ; BSR set to: 0
 20160                           ;doprnt.c: 1215: prec -= c;
 20161                           
 20162                           ; BSR set to: 0
 20163  000AF6  0100               	movlb	0	; () banked
 20164  000AF8  51C3               	movf	__doprnt@c& (0+255),w,b
 20165  000AFA  0100               	movlb	0	; () banked
 20166  000AFC  5FC1               	subwf	__doprnt@prec& (0+255),f,b
 20167  000AFE  0E00               	movlw	0
 20168  000B00  0100               	movlb	0	; () banked
 20169  000B02  BFC3               	btfsc	__doprnt@c& (0+255),7,b
 20170  000B04  0EFF               	movlw	255
 20171  000B06  0100               	movlb	0	; () banked
 20172  000B08  5BC2               	subwfb	(__doprnt@prec+1)& (0+255),f,b
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;doprnt.c: 1219: if(c)
 20176  000B0A  0100               	movlb	0	; () banked
 20177  000B0C  51C3               	movf	__doprnt@c& (0+255),w,b
 20178  000B0E  0100               	movlb	0	; () banked
 20179  000B10  B4D8               	btfsc	status,2,c
 20180  000B12  D03C               	goto	l1283
 20181                           
 20182                           ; BSR set to: 0
 20183                           ;doprnt.c: 1221: if(pb->func) (pb->func('.')),(++ccnt); else ((*pb->ptr++ = '.'),(++ccnt
      +                          ));
 20184  000B14  0100               	movlb	0	; () banked
 20185  000B16  EE20 F002          	lfsr	2,2
 20186  000B1A  519D               	movf	__doprnt@pb& (0+255),w,b
 20187  000B1C  26D9               	addwf	fsr2l,f,c
 20188  000B1E  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20189  000B20  22DA               	addwfc	fsr2h,f,c
 20190  000B22  50DE               	movf	postinc2,w,c
 20191  000B24  10DE               	iorwf	postinc2,w,c
 20192  000B26  B4D8               	btfsc	status,2,c
 20193  000B28  D017               	goto	l1282
 20194                           
 20195                           ; BSR set to: 0
 20196  000B2A  0100               	movlb	0	; () banked
 20197  000B2C  EE20 F002          	lfsr	2,2
 20198  000B30  519D               	movf	__doprnt@pb& (0+255),w,b
 20199  000B32  26D9               	addwf	fsr2l,f,c
 20200  000B34  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20201  000B36  22DA               	addwfc	fsr2h,f,c
 20202  000B38  D801               	call	u9958
 20203  000B3A  D024               	goto	l9944
 20204  000B3C                     u9958:
 20205  000B3C  FFFF               	dw	65535	; assembler added errata NOP
 20206  000B3E  0005               	push	
 20207  000B40  6EFA               	movwf	pclath,c
 20208  000B42  50DE               	movf	postinc2,w,c
 20209  000B44  6EFD               	movwf	tosl,c
 20210  000B46  50DE               	movf	postinc2,w,c
 20211  000B48  6EFE               	movwf	tosh,c
 20212  000B4A  50F8               	movf	tblptru,w,c
 20213  000B4C  6EFF               	movwf	tosu,c
 20214  000B4E  50FA               	movf	pclath,w,c
 20215  000B50  0E2E               	movlw	46
 20216  000B52  0012               	return		;indir
 20217  000B54  FFFF               	dw	65535	; errata NOP
 20218  000B56  D016               	goto	l9944
 20219  000B58                     l1282:
 20220  000B58  FFFF               	dw	65535	; assembler added errata NOP
 20221                           
 20222                           ; BSR set to: 0
 20223                           
 20224                           ; BSR set to: 0
 20225  000B5A  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20226  000B5E  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20227  000B62  CFDE F0A3          	movff	postinc2,??__doprnt
 20228  000B66  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20229  000B6A  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20230  000B6E  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20231  000B72  0E2E               	movlw	46
 20232  000B74  6EDF               	movwf	indf2,c
 20233                           
 20234                           ; BSR set to: 0
 20235  000B76  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20236  000B7A  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20237  000B7E  2ADE               	incf	postinc2,f,c
 20238  000B80  0E00               	movlw	0
 20239  000B82  22DD               	addwfc	postdec2,f,c
 20240  000B84                     l9944:
 20241  000B84  FFFF               	dw	65535	; assembler added errata NOP
 20242                           
 20243                           ; BSR set to: 0
 20244  000B86  0100               	movlb	0	; () banked
 20245  000B88  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20246  000B8A  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20247  000B8C                     l1283:
 20248  000B8C  FFFF               	dw	65535	; assembler added errata NOP
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 20252                           
 20253                           ; BSR set to: 0
 20254                           
 20255                           ; BSR set to: 0
 20256  000B8E  0100               	movlb	0	; () banked
 20257  000B90  51C3               	movf	__doprnt@c& (0+255),w,b
 20258  000B92  EC1B  F010         	call	_scale
 20259  000B96  C087  F0A9         	movff	?_scale,__doprnt$3549
 20260  000B9A  C088  F0AA         	movff	?_scale+1,__doprnt$3549+1
 20261  000B9E  C089  F0AB         	movff	?_scale+2,__doprnt$3549+2
 20262                           
 20263                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 20264  000BA2  C0BE  F07B         	movff	__doprnt@fval,___ftmul@f2
 20265  000BA6  C0BF  F07C         	movff	__doprnt@fval+1,___ftmul@f2+1
 20266  000BAA  C0C0  F07D         	movff	__doprnt@fval+2,___ftmul@f2+2
 20267  000BAE  C0A9  F078         	movff	__doprnt$3549,___ftmul@f1
 20268  000BB2  C0AA  F079         	movff	__doprnt$3549+1,___ftmul@f1+1
 20269  000BB6  C0AB  F07A         	movff	__doprnt$3549+2,___ftmul@f1+2
 20270  000BBA  EC53  F03C         	call	___ftmul	;wreg free
 20271  000BBE  C078  F08E         	movff	?___ftmul,___fttol@f1
 20272  000BC2  C079  F08F         	movff	?___ftmul+1,___fttol@f1+1
 20273  000BC6  C07A  F090         	movff	?___ftmul+2,___fttol@f1+2
 20274  000BCA  EC16  F03B         	call	___fttol	;wreg free
 20275  000BCE  C08E  F0B6         	movff	?___fttol,__doprnt@val
 20276  000BD2  C08F  F0B7         	movff	?___fttol+1,__doprnt@val+1
 20277  000BD6  C090  F0B8         	movff	?___fttol+2,__doprnt@val+2
 20278  000BDA  C091  F0B9         	movff	?___fttol+3,__doprnt@val+3
 20279                           
 20280                           ;doprnt.c: 1228: while(c--) {
 20281  000BDE  D0B1               	goto	l1284
 20282  000BE0  FFFF               	dw	65535	; assembler added errata NOP
 20283                           
 20284                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 20285  000BE2  C0B6  F019         	movff	__doprnt@val,___lldiv@dividend
 20286  000BE6  C0B7  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 20287  000BEA  C0B8  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 20288  000BEE  C0B9  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 20289  000BF2  0100               	movlb	0	; () banked
 20290  000BF4  51C3               	movf	__doprnt@c& (0+255),w,b
 20291  000BF6  0D04               	mullw	4
 20292  000BF8  0E23               	movlw	low _dpowers
 20293  000BFA  24F3               	addwf	prodl,w,c
 20294  000BFC  6EF6               	movwf	tblptrl,c
 20295  000BFE  0E7D               	movlw	high _dpowers
 20296  000C00  20F4               	addwfc	prodh,w,c
 20297  000C02  6EF7               	movwf	tblptrh,c
 20298  000C04                     	if	0	;There are less than 3 active tblptr bytes
 20299  000C04                     	endif
 20300  000C04  0009               	tblrd		*+
 20301  000C06  FFFF               	dw	65535	; errata NOP
 20302  000C08  CFF5 F01D          	movff	tablat,___lldiv@divisor
 20303  000C0C  0009               	tblrd		*+
 20304  000C0E  FFFF               	dw	65535	; errata NOP
 20305  000C10  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 20306  000C14  0009               	tblrd		*+
 20307  000C16  FFFF               	dw	65535	; errata NOP
 20308  000C18  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 20309  000C1C  000A               	tblrd		*-
 20310  000C1E  FFFF               	dw	65535	; errata NOP
 20311  000C20  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 20312  000C24  EC19  F031         	call	___lldiv	;wreg free
 20313  000C28  C019  F0BA         	movff	?___lldiv,__doprnt@tmpval
 20314  000C2C  C01A  F0BB         	movff	?___lldiv+1,__doprnt@tmpval+1
 20315  000C30  C01B  F0BC         	movff	?___lldiv+2,__doprnt@tmpval+2
 20316  000C34  C01C  F0BD         	movff	?___lldiv+3,__doprnt@tmpval+3
 20317                           
 20318                           ;doprnt.c: 1230: tmpval.vd %= 10;
 20319  000C38  C0BA  F026         	movff	__doprnt@tmpval,___llmod@dividend
 20320  000C3C  C0BB  F027         	movff	__doprnt@tmpval+1,___llmod@dividend+1
 20321  000C40  C0BC  F028         	movff	__doprnt@tmpval+2,___llmod@dividend+2
 20322  000C44  C0BD  F029         	movff	__doprnt@tmpval+3,___llmod@dividend+3
 20323  000C48  0E0A               	movlw	10
 20324  000C4A  6E2A               	movwf	___llmod@divisor,c
 20325  000C4C  0E00               	movlw	0
 20326  000C4E  6E2B               	movwf	___llmod@divisor+1,c
 20327  000C50  0E00               	movlw	0
 20328  000C52  6E2C               	movwf	___llmod@divisor+2,c
 20329  000C54  0E00               	movlw	0
 20330  000C56  6E2D               	movwf	___llmod@divisor+3,c
 20331  000C58  EC9D  F02E         	call	___llmod	;wreg free
 20332  000C5C  C026  F0BA         	movff	?___llmod,__doprnt@tmpval
 20333  000C60  C027  F0BB         	movff	?___llmod+1,__doprnt@tmpval+1
 20334  000C64  C028  F0BC         	movff	?___llmod+2,__doprnt@tmpval+2
 20335  000C68  C029  F0BD         	movff	?___llmod+3,__doprnt@tmpval+3
 20336                           
 20337                           ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)),(++ccnt); else ((*pb->ptr++ = 
      +                          '0' + tmpval.vd),(++ccnt));
 20338  000C6C  0100               	movlb	0	; () banked
 20339  000C6E  EE20 F002          	lfsr	2,2
 20340  000C72  519D               	movf	__doprnt@pb& (0+255),w,b
 20341  000C74  26D9               	addwf	fsr2l,f,c
 20342  000C76  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20343  000C78  22DA               	addwfc	fsr2h,f,c
 20344  000C7A  50DE               	movf	postinc2,w,c
 20345  000C7C  10DE               	iorwf	postinc2,w,c
 20346  000C7E  B4D8               	btfsc	status,2,c
 20347  000C80  D019               	goto	l1286
 20348                           
 20349                           ; BSR set to: 0
 20350  000C82  0100               	movlb	0	; () banked
 20351  000C84  EE20 F002          	lfsr	2,2
 20352  000C88  519D               	movf	__doprnt@pb& (0+255),w,b
 20353  000C8A  26D9               	addwf	fsr2l,f,c
 20354  000C8C  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20355  000C8E  22DA               	addwfc	fsr2h,f,c
 20356  000C90  D801               	call	u9978
 20357  000C92  D028               	goto	l9962
 20358  000C94                     u9978:
 20359  000C94  FFFF               	dw	65535	; assembler added errata NOP
 20360  000C96  0005               	push	
 20361  000C98  6EFA               	movwf	pclath,c
 20362  000C9A  50DE               	movf	postinc2,w,c
 20363  000C9C  6EFD               	movwf	tosl,c
 20364  000C9E  50DE               	movf	postinc2,w,c
 20365  000CA0  6EFE               	movwf	tosh,c
 20366  000CA2  50F8               	movf	tblptru,w,c
 20367  000CA4  6EFF               	movwf	tosu,c
 20368  000CA6  50FA               	movf	pclath,w,c
 20369  000CA8  0100               	movlb	0	; () banked
 20370  000CAA  51BA               	movf	__doprnt@tmpval& (0+255),w,b
 20371  000CAC  0F30               	addlw	48
 20372  000CAE  0012               	return		;indir
 20373  000CB0  FFFF               	dw	65535	; errata NOP
 20374  000CB2  D018               	goto	l9962
 20375  000CB4                     l1286:
 20376  000CB4  FFFF               	dw	65535	; assembler added errata NOP
 20377                           
 20378                           ; BSR set to: 0
 20379                           
 20380                           ; BSR set to: 0
 20381  000CB6  0100               	movlb	0	; () banked
 20382  000CB8  51BA               	movf	__doprnt@tmpval& (0+255),w,b
 20383  000CBA  0F30               	addlw	48
 20384  000CBC  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20385  000CC0  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20386  000CC4  CFDE F0A3          	movff	postinc2,??__doprnt
 20387  000CC8  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20388  000CCC  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20389  000CD0  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20390  000CD4  6EDF               	movwf	indf2,c
 20391  000CD6  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20392  000CDA  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20393  000CDE  2ADE               	incf	postinc2,f,c
 20394  000CE0  0E00               	movlw	0
 20395  000CE2  22DD               	addwfc	postdec2,f,c
 20396  000CE4                     l9962:
 20397  000CE4  FFFF               	dw	65535	; assembler added errata NOP
 20398                           
 20399                           ; BSR set to: 0
 20400  000CE6  0100               	movlb	0	; () banked
 20401  000CE8  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20402  000CEA  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20403                           
 20404                           ; BSR set to: 0
 20405                           ;doprnt.c: 1232: val %= dpowers[c];
 20406                           
 20407                           ; BSR set to: 0
 20408  000CEC  C0B6  F026         	movff	__doprnt@val,___llmod@dividend
 20409  000CF0  C0B7  F027         	movff	__doprnt@val+1,___llmod@dividend+1
 20410  000CF4  C0B8  F028         	movff	__doprnt@val+2,___llmod@dividend+2
 20411  000CF8  C0B9  F029         	movff	__doprnt@val+3,___llmod@dividend+3
 20412  000CFC  0100               	movlb	0	; () banked
 20413  000CFE  51C3               	movf	__doprnt@c& (0+255),w,b
 20414  000D00  0D04               	mullw	4
 20415  000D02  0E23               	movlw	low _dpowers
 20416  000D04  24F3               	addwf	prodl,w,c
 20417  000D06  6EF6               	movwf	tblptrl,c
 20418  000D08  0E7D               	movlw	high _dpowers
 20419  000D0A  20F4               	addwfc	prodh,w,c
 20420  000D0C  6EF7               	movwf	tblptrh,c
 20421  000D0E                     	if	0	;There are less than 3 active tblptr bytes
 20422  000D0E                     	endif
 20423  000D0E  0009               	tblrd		*+
 20424  000D10  FFFF               	dw	65535	; errata NOP
 20425  000D12  CFF5 F02A          	movff	tablat,___llmod@divisor
 20426  000D16  0009               	tblrd		*+
 20427  000D18  FFFF               	dw	65535	; errata NOP
 20428  000D1A  CFF5 F02B          	movff	tablat,___llmod@divisor+1
 20429  000D1E  0009               	tblrd		*+
 20430  000D20  FFFF               	dw	65535	; errata NOP
 20431  000D22  CFF5 F02C          	movff	tablat,___llmod@divisor+2
 20432  000D26  000A               	tblrd		*-
 20433  000D28  FFFF               	dw	65535	; errata NOP
 20434  000D2A  CFF5 F02D          	movff	tablat,___llmod@divisor+3
 20435  000D2E  EC9D  F02E         	call	___llmod
 20436  000D32  C026  F0B6         	movff	?___llmod,__doprnt@val
 20437  000D36  C027  F0B7         	movff	?___llmod+1,__doprnt@val+1
 20438  000D3A  C028  F0B8         	movff	?___llmod+2,__doprnt@val+2
 20439  000D3E  C029  F0B9         	movff	?___llmod+3,__doprnt@val+3
 20440  000D42                     l1284:
 20441  000D42  FFFF               	dw	65535	; assembler added errata NOP
 20442  000D44  0100               	movlb	0	; () banked
 20443  000D46  07C3               	decf	__doprnt@c& (0+255),f,b
 20444  000D48  0100               	movlb	0	; () banked
 20445  000D4A  29C3               	incf	__doprnt@c& (0+255),w,b
 20446  000D4C  B4D8               	btfsc	status,2,c
 20447  000D4E  D042               	goto	l1289
 20448  000D50  D747               	goto	l1285
 20449  000D52  FFFF               	dw	65535	; assembler added errata NOP
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;doprnt.c: 1236: if(pb->func) (pb->func('0')),(++ccnt); else ((*pb->ptr++ = '0'),(++ccnt
      +                          ));
 20453                           
 20454                           ; BSR set to: 0
 20455  000D54  0100               	movlb	0	; () banked
 20456  000D56  EE20 F002          	lfsr	2,2
 20457  000D5A  519D               	movf	__doprnt@pb& (0+255),w,b
 20458  000D5C  26D9               	addwf	fsr2l,f,c
 20459  000D5E  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20460  000D60  22DA               	addwfc	fsr2h,f,c
 20461  000D62  50DE               	movf	postinc2,w,c
 20462  000D64  10DE               	iorwf	postinc2,w,c
 20463  000D66  B4D8               	btfsc	status,2,c
 20464  000D68  D017               	goto	l1291
 20465                           
 20466                           ; BSR set to: 0
 20467  000D6A  0100               	movlb	0	; () banked
 20468  000D6C  EE20 F002          	lfsr	2,2
 20469  000D70  519D               	movf	__doprnt@pb& (0+255),w,b
 20470  000D72  26D9               	addwf	fsr2l,f,c
 20471  000D74  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20472  000D76  22DA               	addwfc	fsr2h,f,c
 20473  000D78  D801               	call	u10008
 20474  000D7A  D024               	goto	l9978
 20475  000D7C                     u10008:
 20476  000D7C  FFFF               	dw	65535	; assembler added errata NOP
 20477  000D7E  0005               	push	
 20478  000D80  6EFA               	movwf	pclath,c
 20479  000D82  50DE               	movf	postinc2,w,c
 20480  000D84  6EFD               	movwf	tosl,c
 20481  000D86  50DE               	movf	postinc2,w,c
 20482  000D88  6EFE               	movwf	tosh,c
 20483  000D8A  50F8               	movf	tblptru,w,c
 20484  000D8C  6EFF               	movwf	tosu,c
 20485  000D8E  50FA               	movf	pclath,w,c
 20486  000D90  0E30               	movlw	48
 20487  000D92  0012               	return		;indir
 20488  000D94  FFFF               	dw	65535	; errata NOP
 20489  000D96  D016               	goto	l9978
 20490  000D98                     l1291:
 20491  000D98  FFFF               	dw	65535	; assembler added errata NOP
 20492                           
 20493                           ; BSR set to: 0
 20494                           
 20495                           ; BSR set to: 0
 20496  000D9A  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20497  000D9E  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20498  000DA2  CFDE F0A3          	movff	postinc2,??__doprnt
 20499  000DA6  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20500  000DAA  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20501  000DAE  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20502  000DB2  0E30               	movlw	48
 20503  000DB4  6EDF               	movwf	indf2,c
 20504                           
 20505                           ; BSR set to: 0
 20506  000DB6  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20507  000DBA  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20508  000DBE  2ADE               	incf	postinc2,f,c
 20509  000DC0  0E00               	movlw	0
 20510  000DC2  22DD               	addwfc	postdec2,f,c
 20511  000DC4                     l9978:
 20512  000DC4  FFFF               	dw	65535	; assembler added errata NOP
 20513                           
 20514                           ; BSR set to: 0
 20515  000DC6  0100               	movlb	0	; () banked
 20516  000DC8  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20517  000DCA  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20518                           
 20519                           ; BSR set to: 0
 20520                           ;doprnt.c: 1237: prec--;
 20521                           
 20522                           ; BSR set to: 0
 20523  000DCC  0100               	movlb	0	; () banked
 20524  000DCE  07C1               	decf	__doprnt@prec& (0+255),f,b
 20525  000DD0  A0D8               	btfss	status,0,c
 20526  000DD2  07C2               	decf	(__doprnt@prec+1)& (0+255),f,b
 20527  000DD4                     l1289:
 20528  000DD4  FFFF               	dw	65535	; assembler added errata NOP
 20529                           
 20530                           ; BSR set to: 0
 20531                           
 20532                           ; BSR set to: 0
 20533  000DD6  0100               	movlb	0	; () banked
 20534  000DD8  51C1               	movf	__doprnt@prec& (0+255),w,b
 20535  000DDA  0100               	movlb	0	; () banked
 20536  000DDC  11C2               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 20537  000DDE  B4D8               	btfsc	status,2,c
 20538  000DE0  D16A               	goto	u10150
 20539  000DE2  D7B7               	goto	l1290
 20540  000DE4                     l1244:
 20541  000DE4  FFFF               	dw	65535	; assembler added errata NOP
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;doprnt.c: 1246: }
 20545                           ;doprnt.c: 1253: {
 20546                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 20547                           
 20548                           ; BSR set to: 0
 20549  000DE6  C0A1  FFD9         	movff	__doprnt@ap,fsr2l
 20550  000DEA  C0A2  FFDA         	movff	__doprnt@ap+1,fsr2h
 20551  000DEE  CFDF F0A3          	movff	indf2,??__doprnt
 20552  000DF2  0E02               	movlw	2
 20553  000DF4  26DE               	addwf	postinc2,f,c
 20554  000DF6  CFDF F0A4          	movff	indf2,??__doprnt+1
 20555  000DFA  0E00               	movlw	0
 20556  000DFC  22DD               	addwfc	postdec2,f,c
 20557  000DFE  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20558  000E02  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20559  000E06  CFDE F0B6          	movff	postinc2,__doprnt@val
 20560  000E0A  CFDD F0B7          	movff	postdec2,__doprnt@val+1
 20561  000E0E  0100               	movlb	0	; () banked
 20562  000E10  0E00               	movlw	0
 20563  000E12  BFB7               	btfsc	(__doprnt@val+1)& (0+255),7,b
 20564  000E14  0EFF               	movlw	-1
 20565  000E16  6FB8               	movwf	(__doprnt@val+2)& (0+255),b
 20566  000E18  6FB9               	movwf	(__doprnt@val+3)& (0+255),b
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;doprnt.c: 1261: if((long)val < 0) {
 20570  000E1A  0100               	movlb	0	; () banked
 20571  000E1C  AFB9               	btfss	(__doprnt@val+3)& (0+255),7,b
 20572  000E1E  D00C               	goto	l1294
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;doprnt.c: 1262: flag |= 0x03;
 20576  000E20  0E03               	movlw	3
 20577  000E22  0100               	movlb	0	; () banked
 20578  000E24  13B0               	iorwf	__doprnt@flag& (0+255),f,b
 20579                           
 20580                           ; BSR set to: 0
 20581                           ;doprnt.c: 1263: val = -val;
 20582  000E26  0100               	movlb	0	; () banked
 20583  000E28  1FB9               	comf	(__doprnt@val+3)& (0+255),f,b
 20584  000E2A  1FB8               	comf	(__doprnt@val+2)& (0+255),f,b
 20585  000E2C  1FB7               	comf	(__doprnt@val+1)& (0+255),f,b
 20586  000E2E  6DB6               	negf	__doprnt@val& (0+255),b
 20587  000E30  0E00               	movlw	0
 20588  000E32  23B7               	addwfc	(__doprnt@val+1)& (0+255),f,b
 20589  000E34  23B8               	addwfc	(__doprnt@val+2)& (0+255),f,b
 20590  000E36  23B9               	addwfc	(__doprnt@val+3)& (0+255),f,b
 20591  000E38                     l1294:
 20592  000E38  FFFF               	dw	65535	; assembler added errata NOP
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;doprnt.c: 1264: }
 20596                           ;doprnt.c: 1266: }
 20597                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 20598                           
 20599                           ; BSR set to: 0
 20600  000E3A  0100               	movlb	0	; () banked
 20601  000E3C  51C1               	movf	__doprnt@prec& (0+255),w,b
 20602  000E3E  0100               	movlb	0	; () banked
 20603  000E40  11C2               	iorwf	(__doprnt@prec+1)& (0+255),w,b
 20604  000E42  A4D8               	btfss	status,2,c
 20605  000E44  D00D               	goto	l1295
 20606                           
 20607                           ; BSR set to: 0
 20608  000E46  0100               	movlb	0	; () banked
 20609  000E48  51B6               	movf	__doprnt@val& (0+255),w,b
 20610  000E4A  0100               	movlb	0	; () banked
 20611  000E4C  11B7               	iorwf	(__doprnt@val+1)& (0+255),w,b
 20612  000E4E  0100               	movlb	0	; () banked
 20613  000E50  11B8               	iorwf	(__doprnt@val+2)& (0+255),w,b
 20614  000E52  0100               	movlb	0	; () banked
 20615  000E54  11B9               	iorwf	(__doprnt@val+3)& (0+255),w,b
 20616  000E56  A4D8               	btfss	status,2,c
 20617  000E58  D003               	goto	l1295
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;doprnt.c: 1291: prec++;
 20621  000E5A  0100               	movlb	0	; () banked
 20622  000E5C  4BC1               	infsnz	__doprnt@prec& (0+255),f,b
 20623  000E5E  2BC2               	incf	(__doprnt@prec+1)& (0+255),f,b
 20624  000E60                     l1295:
 20625  000E60  FFFF               	dw	65535	; assembler added errata NOP
 20626                           
 20627                           ; BSR set to: 0
 20628                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20629                           
 20630                           ; BSR set to: 0
 20631  000E62  0E01               	movlw	1
 20632  000E64  0100               	movlb	0	; () banked
 20633  000E66  6FC3               	movwf	__doprnt@c& (0+255),b
 20634  000E68                     l10000:
 20635  000E68  FFFF               	dw	65535	; assembler added errata NOP
 20636                           
 20637                           ; BSR set to: 0
 20638  000E6A  0E0A               	movlw	10
 20639  000E6C  0100               	movlb	0	; () banked
 20640  000E6E  19C3               	xorwf	__doprnt@c& (0+255),w,b
 20641  000E70  B4D8               	btfsc	status,2,c
 20642  000E72  D022               	goto	u10070
 20643                           
 20644                           ; BSR set to: 0
 20645                           ;doprnt.c: 1306: if(val < dpowers[c])
 20646                           
 20647                           ; BSR set to: 0
 20648                           
 20649                           ; BSR set to: 0
 20650  000E74  0100               	movlb	0	; () banked
 20651  000E76  51C3               	movf	__doprnt@c& (0+255),w,b
 20652  000E78  0D04               	mullw	4
 20653  000E7A  0E23               	movlw	low _dpowers
 20654  000E7C  24F3               	addwf	prodl,w,c
 20655  000E7E  6EF6               	movwf	tblptrl,c
 20656  000E80  0E7D               	movlw	high _dpowers
 20657  000E82  20F4               	addwfc	prodh,w,c
 20658  000E84  6EF7               	movwf	tblptrh,c
 20659  000E86                     	if	0	;There are less than 3 active tblptr bytes
 20660  000E86                     	endif
 20661  000E86  0009               	tblrd		*+
 20662  000E88  FFFF               	dw	65535	; errata NOP
 20663  000E8A  50F5               	movf	tablat,w,c
 20664  000E8C  0100               	movlb	0	; () banked
 20665  000E8E  5DB6               	subwf	__doprnt@val& (0+255),w,b
 20666  000E90  0009               	tblrd		*+
 20667  000E92  FFFF               	dw	65535	; errata NOP
 20668  000E94  50F5               	movf	tablat,w,c
 20669  000E96  0100               	movlb	0	; () banked
 20670  000E98  59B7               	subwfb	(__doprnt@val+1)& (0+255),w,b
 20671  000E9A  0009               	tblrd		*+
 20672  000E9C  FFFF               	dw	65535	; errata NOP
 20673  000E9E  50F5               	movf	tablat,w,c
 20674  000EA0  0100               	movlb	0	; () banked
 20675  000EA2  59B8               	subwfb	(__doprnt@val+2)& (0+255),w,b
 20676  000EA4  0009               	tblrd		*+
 20677  000EA6  FFFF               	dw	65535	; errata NOP
 20678  000EA8  50F5               	movf	tablat,w,c
 20679  000EAA  0100               	movlb	0	; () banked
 20680  000EAC  59B9               	subwfb	(__doprnt@val+3)& (0+255),w,b
 20681  000EAE  A0D8               	btfss	status,0,c
 20682  000EB0  D003               	goto	u10070
 20683                           
 20684                           ; BSR set to: 0
 20685                           
 20686                           ; BSR set to: 0
 20687                           
 20688                           ; BSR set to: 0
 20689                           ;doprnt.c: 1307: break;
 20690  000EB2  0100               	movlb	0	; () banked
 20691  000EB4  2BC3               	incf	__doprnt@c& (0+255),f,b
 20692  000EB6  D7D8               	goto	l10000
 20693  000EB8                     u10070:
 20694  000EB8  FFFF               	dw	65535	; assembler added errata NOP
 20695                           
 20696                           ; BSR set to: 0
 20697                           ;doprnt.c: 1339: if(c < prec)
 20698                           
 20699                           ; BSR set to: 0
 20700  000EBA  0E80               	movlw	128
 20701  000EBC  0100               	movlb	0	; () banked
 20702  000EBE  BFC3               	btfsc	__doprnt@c& (0+255),7,b
 20703  000EC0  0E7F               	movlw	127
 20704  000EC2  0100               	movlb	0	; () banked
 20705  000EC4  6FA3               	movwf	??__doprnt& (0+255),b
 20706  000EC6  0100               	movlb	0	; () banked
 20707  000EC8  51C1               	movf	__doprnt@prec& (0+255),w,b
 20708  000ECA  0100               	movlb	0	; () banked
 20709  000ECC  5DC3               	subwf	__doprnt@c& (0+255),w,b
 20710  000ECE  0100               	movlb	0	; () banked
 20711  000ED0  51C2               	movf	(__doprnt@prec+1)& (0+255),w,b
 20712  000ED2  0A80               	xorlw	128
 20713  000ED4  0100               	movlb	0	; () banked
 20714  000ED6  59A3               	subwfb	??__doprnt& (0+255),w,b
 20715  000ED8  B0D8               	btfsc	status,0,c
 20716  000EDA  D003               	goto	l1299
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;doprnt.c: 1340: c = prec;
 20720  000EDC  C0C1  F0C3         	movff	__doprnt@prec,__doprnt@c
 20721  000EE0  D019               	goto	l1301
 20722  000EE2                     l1299:
 20723  000EE2  FFFF               	dw	65535	; assembler added errata NOP
 20724                           
 20725                           ; BSR set to: 0
 20726                           ;doprnt.c: 1341: else if(prec < c)
 20727                           
 20728                           ; BSR set to: 0
 20729  000EE4  0100               	movlb	0	; () banked
 20730  000EE6  51C2               	movf	(__doprnt@prec+1)& (0+255),w,b
 20731  000EE8  0A80               	xorlw	128
 20732  000EEA  0100               	movlb	0	; () banked
 20733  000EEC  6FA3               	movwf	??__doprnt& (0+255),b
 20734  000EEE  0100               	movlb	0	; () banked
 20735  000EF0  51C3               	movf	__doprnt@c& (0+255),w,b
 20736  000EF2  0100               	movlb	0	; () banked
 20737  000EF4  5DC1               	subwf	__doprnt@prec& (0+255),w,b
 20738  000EF6  0E80               	movlw	128
 20739  000EF8  0100               	movlb	0	; () banked
 20740  000EFA  BFC3               	btfsc	__doprnt@c& (0+255),7,b
 20741  000EFC  0E7F               	movlw	127
 20742  000EFE  0100               	movlb	0	; () banked
 20743  000F00  59A3               	subwfb	??__doprnt& (0+255),w,b
 20744  000F02  B0D8               	btfsc	status,0,c
 20745  000F04  D007               	goto	l1301
 20746                           
 20747                           ; BSR set to: 0
 20748                           ;doprnt.c: 1342: prec = c;
 20749  000F06  0100               	movlb	0	; () banked
 20750  000F08  51C3               	movf	__doprnt@c& (0+255),w,b
 20751  000F0A  0100               	movlb	0	; () banked
 20752  000F0C  6FC1               	movwf	__doprnt@prec& (0+255),b
 20753  000F0E  6BC2               	clrf	(__doprnt@prec+1)& (0+255),b
 20754  000F10  BFC1               	btfsc	__doprnt@prec& (0+255),7,b
 20755  000F12  07C2               	decf	(__doprnt@prec+1)& (0+255),f,b
 20756  000F14                     l1301:
 20757  000F14  FFFF               	dw	65535	; assembler added errata NOP
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;doprnt.c: 1422: {
 20761                           ;doprnt.c: 1438: if(flag & 0x03)
 20762                           
 20763                           ; BSR set to: 0
 20764                           
 20765                           ; BSR set to: 0
 20766  000F16  0E03               	movlw	3
 20767  000F18  0100               	movlb	0	; () banked
 20768  000F1A  15B0               	andwf	__doprnt@flag& (0+255),w,b
 20769  000F1C  0100               	movlb	0	; () banked
 20770  000F1E  6FA3               	movwf	??__doprnt& (0+255),b
 20771  000F20  0E00               	movlw	0
 20772  000F22  0100               	movlb	0	; () banked
 20773  000F24  15B1               	andwf	(__doprnt@flag+1)& (0+255),w,b
 20774  000F26  0100               	movlb	0	; () banked
 20775  000F28  6FA4               	movwf	(??__doprnt+1)& (0+255),b
 20776  000F2A  0100               	movlb	0	; () banked
 20777  000F2C  51A3               	movf	??__doprnt& (0+255),w,b
 20778  000F2E  0100               	movlb	0	; () banked
 20779  000F30  11A4               	iorwf	(??__doprnt+1)& (0+255),w,b
 20780  000F32  B4D8               	btfsc	status,2,c
 20781  000F34  D0B4               	goto	l1308
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')),(++ccnt); else ((*pb->ptr++ = '-'),(++ccnt
      +                          ));
 20785  000F36  0100               	movlb	0	; () banked
 20786  000F38  EE20 F002          	lfsr	2,2
 20787  000F3C  519D               	movf	__doprnt@pb& (0+255),w,b
 20788  000F3E  26D9               	addwf	fsr2l,f,c
 20789  000F40  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20790  000F42  22DA               	addwfc	fsr2h,f,c
 20791  000F44  50DE               	movf	postinc2,w,c
 20792  000F46  10DE               	iorwf	postinc2,w,c
 20793  000F48  B4D8               	btfsc	status,2,c
 20794  000F4A  D017               	goto	l1303
 20795                           
 20796                           ; BSR set to: 0
 20797  000F4C  0100               	movlb	0	; () banked
 20798  000F4E  EE20 F002          	lfsr	2,2
 20799  000F52  519D               	movf	__doprnt@pb& (0+255),w,b
 20800  000F54  26D9               	addwf	fsr2l,f,c
 20801  000F56  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20802  000F58  22DA               	addwfc	fsr2h,f,c
 20803  000F5A  D801               	call	u10128
 20804  000F5C  D09C               	goto	l10046
 20805  000F5E                     u10128:
 20806  000F5E  FFFF               	dw	65535	; assembler added errata NOP
 20807  000F60  0005               	push	
 20808  000F62  6EFA               	movwf	pclath,c
 20809  000F64  50DE               	movf	postinc2,w,c
 20810  000F66  6EFD               	movwf	tosl,c
 20811  000F68  50DE               	movf	postinc2,w,c
 20812  000F6A  6EFE               	movwf	tosh,c
 20813  000F6C  50F8               	movf	tblptru,w,c
 20814  000F6E  6EFF               	movwf	tosu,c
 20815  000F70  50FA               	movf	pclath,w,c
 20816  000F72  0E2D               	movlw	45
 20817  000F74  0012               	return		;indir
 20818  000F76  FFFF               	dw	65535	; errata NOP
 20819  000F78  D08E               	goto	l10046
 20820  000F7A                     l1303:
 20821  000F7A  FFFF               	dw	65535	; assembler added errata NOP
 20822                           
 20823                           ; BSR set to: 0
 20824                           
 20825                           ; BSR set to: 0
 20826  000F7C  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20827  000F80  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20828  000F84  CFDE F0A3          	movff	postinc2,??__doprnt
 20829  000F88  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20830  000F8C  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20831  000F90  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20832  000F94  0E2D               	movlw	45
 20833  000F96  6EDF               	movwf	indf2,c
 20834  000F98  D076               	goto	L31
 20835  000F9A  FFFF               	dw	65535	; assembler added errata NOP
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;doprnt.c: 1478: {
 20839                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20840                           
 20841                           ; BSR set to: 0
 20842  000F9C  C0C1  F0A3         	movff	__doprnt@prec,??__doprnt
 20843  000FA0  C0C2  F0A4         	movff	__doprnt@prec+1,??__doprnt+1
 20844  000FA4  0100               	movlb	0	; () banked
 20845  000FA6  90D8               	bcf	status,0,c
 20846  000FA8  37A3               	rlcf	??__doprnt& (0+255),f,b
 20847  000FAA  37A4               	rlcf	(??__doprnt+1)& (0+255),f,b
 20848  000FAC  0100               	movlb	0	; () banked
 20849  000FAE  90D8               	bcf	status,0,c
 20850  000FB0  37A3               	rlcf	??__doprnt& (0+255),f,b
 20851  000FB2  37A4               	rlcf	(??__doprnt+1)& (0+255),f,b
 20852  000FB4  0E23               	movlw	low _dpowers
 20853  000FB6  0100               	movlb	0	; () banked
 20854  000FB8  25A3               	addwf	??__doprnt& (0+255),w,b
 20855  000FBA  6EF6               	movwf	tblptrl,c
 20856  000FBC  0E7D               	movlw	high _dpowers
 20857  000FBE  21A4               	addwfc	(??__doprnt+1)& (0+255),w,b
 20858  000FC0  6EF7               	movwf	tblptrh,c
 20859  000FC2                     	if	0	;There are less than 3 active tblptr bytes
 20860  000FC2                     	endif
 20861  000FC2  0009               	tblrd		*+
 20862  000FC4  FFFF               	dw	65535	; errata NOP
 20863  000FC6  CFF5 F01D          	movff	tablat,___lldiv@divisor
 20864  000FCA  0009               	tblrd		*+
 20865  000FCC  FFFF               	dw	65535	; errata NOP
 20866  000FCE  CFF5 F01E          	movff	tablat,___lldiv@divisor+1
 20867  000FD2  0009               	tblrd		*+
 20868  000FD4  FFFF               	dw	65535	; errata NOP
 20869  000FD6  CFF5 F01F          	movff	tablat,___lldiv@divisor+2
 20870  000FDA  000A               	tblrd		*-
 20871  000FDC  FFFF               	dw	65535	; errata NOP
 20872  000FDE  CFF5 F020          	movff	tablat,___lldiv@divisor+3
 20873  000FE2  C0B6  F019         	movff	__doprnt@val,___lldiv@dividend
 20874  000FE6  C0B7  F01A         	movff	__doprnt@val+1,___lldiv@dividend+1
 20875  000FEA  C0B8  F01B         	movff	__doprnt@val+2,___lldiv@dividend+2
 20876  000FEE  C0B9  F01C         	movff	__doprnt@val+3,___lldiv@dividend+3
 20877  000FF2  EC19  F031         	call	___lldiv
 20878  000FF6  C019  F026         	movff	?___lldiv,___llmod@dividend
 20879  000FFA  C01A  F027         	movff	?___lldiv+1,___llmod@dividend+1
 20880  000FFE  C01B  F028         	movff	?___lldiv+2,___llmod@dividend+2
 20881  001002  C01C  F029         	movff	?___lldiv+3,___llmod@dividend+3
 20882  001006  0E0A               	movlw	10
 20883  001008  6E2A               	movwf	___llmod@divisor,c
 20884  00100A  0E00               	movlw	0
 20885  00100C  6E2B               	movwf	___llmod@divisor+1,c
 20886  00100E  0E00               	movlw	0
 20887  001010  6E2C               	movwf	___llmod@divisor+2,c
 20888  001012  0E00               	movlw	0
 20889  001014  6E2D               	movwf	___llmod@divisor+3,c
 20890  001016  EC9D  F02E         	call	___llmod	;wreg free
 20891  00101A  5026               	movf	?___llmod,w,c
 20892  00101C  0F30               	addlw	48
 20893  00101E  0100               	movlb	0	; () banked
 20894  001020  6FC3               	movwf	__doprnt@c& (0+255),b
 20895                           
 20896                           ; BSR set to: 0
 20897                           ;doprnt.c: 1523: }
 20898                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
 20899  001022  0100               	movlb	0	; () banked
 20900  001024  EE20 F002          	lfsr	2,2
 20901  001028  519D               	movf	__doprnt@pb& (0+255),w,b
 20902  00102A  26D9               	addwf	fsr2l,f,c
 20903  00102C  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20904  00102E  22DA               	addwfc	fsr2h,f,c
 20905  001030  50DE               	movf	postinc2,w,c
 20906  001032  10DE               	iorwf	postinc2,w,c
 20907  001034  B4D8               	btfsc	status,2,c
 20908  001036  D018               	goto	l1307
 20909                           
 20910                           ; BSR set to: 0
 20911  001038  0100               	movlb	0	; () banked
 20912  00103A  EE20 F002          	lfsr	2,2
 20913  00103E  519D               	movf	__doprnt@pb& (0+255),w,b
 20914  001040  26D9               	addwf	fsr2l,f,c
 20915  001042  519E               	movf	(__doprnt@pb+1)& (0+255),w,b
 20916  001044  22DA               	addwfc	fsr2h,f,c
 20917  001046  D801               	call	u10148
 20918  001048  D026               	goto	l10046
 20919  00104A                     u10148:
 20920  00104A  FFFF               	dw	65535	; assembler added errata NOP
 20921  00104C  0005               	push	
 20922  00104E  6EFA               	movwf	pclath,c
 20923  001050  50DE               	movf	postinc2,w,c
 20924  001052  6EFD               	movwf	tosl,c
 20925  001054  50DE               	movf	postinc2,w,c
 20926  001056  6EFE               	movwf	tosh,c
 20927  001058  50F8               	movf	tblptru,w,c
 20928  00105A  6EFF               	movwf	tosu,c
 20929  00105C  50FA               	movf	pclath,w,c
 20930  00105E  0100               	movlb	0	; () banked
 20931  001060  51C3               	movf	__doprnt@c& (0+255),w,b
 20932  001062  0012               	return		;indir
 20933  001064  FFFF               	dw	65535	; errata NOP
 20934  001066  D017               	goto	l10046
 20935  001068                     l1307:
 20936  001068  FFFF               	dw	65535	; assembler added errata NOP
 20937                           
 20938                           ; BSR set to: 0
 20939                           
 20940                           ; BSR set to: 0
 20941  00106A  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20942  00106E  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20943  001072  CFDE F0A3          	movff	postinc2,??__doprnt
 20944  001076  CFDD F0A4          	movff	postdec2,??__doprnt+1
 20945  00107A  C0A3  FFD9         	movff	??__doprnt,fsr2l
 20946  00107E  C0A4  FFDA         	movff	??__doprnt+1,fsr2h
 20947  001082  C0C3  FFDF         	movff	__doprnt@c,indf2
 20948  001086                     L31:
 20949  001086  FFFF               	dw	65535	; assembler added errata NOP
 20950                           
 20951                           ; BSR set to: 0
 20952  001088  C09D  FFD9         	movff	__doprnt@pb,fsr2l
 20953  00108C  C09E  FFDA         	movff	__doprnt@pb+1,fsr2h
 20954  001090  2ADE               	incf	postinc2,f,c
 20955  001092  0E00               	movlw	0
 20956  001094  22DD               	addwfc	postdec2,f,c
 20957  001096                     l10046:
 20958  001096  FFFF               	dw	65535	; assembler added errata NOP
 20959                           
 20960                           ; BSR set to: 0
 20961  001098  0100               	movlb	0	; () banked
 20962  00109A  4BB2               	infsnz	__doprnt@ccnt& (0+255),f,b
 20963  00109C  2BB3               	incf	(__doprnt@ccnt+1)& (0+255),f,b
 20964  00109E                     l1308:
 20965  00109E  FFFF               	dw	65535	; assembler added errata NOP
 20966                           
 20967                           ; BSR set to: 0
 20968                           
 20969                           ; BSR set to: 0
 20970                           
 20971                           ; BSR set to: 0
 20972  0010A0  0100               	movlb	0	; () banked
 20973  0010A2  07C1               	decf	__doprnt@prec& (0+255),f,b
 20974  0010A4  A0D8               	btfss	status,0,c
 20975  0010A6  07C2               	decf	(__doprnt@prec+1)& (0+255),f,b
 20976  0010A8  0100               	movlb	0	; () banked
 20977  0010AA  29C1               	incf	__doprnt@prec& (0+255),w,b
 20978  0010AC  E103               	bnz	u10151
 20979  0010AE  0100               	movlb	0	; () banked
 20980  0010B0  29C2               	incf	(__doprnt@prec+1)& (0+255),w,b
 20981  0010B2  A4D8               	btfss	status,2,c
 20982  0010B4                     u10151:
 20983  0010B4  D772               	goto	l1306
 20984  0010B6                     u10150:
 20985  0010B6  FFFF               	dw	65535	; assembler added errata NOP
 20986                           
 20987                           ; BSR set to: 0
 20988                           
 20989                           ; BSR set to: 0
 20990                           
 20991                           ; BSR set to: 0
 20992  0010B8  C09F  FFF6         	movff	__doprnt@f,tblptrl
 20993  0010BC  C0A0  FFF7         	movff	__doprnt@f+1,tblptrh
 20994  0010C0  0100               	movlb	0	; () banked
 20995  0010C2  4B9F               	infsnz	__doprnt@f& (0+255),f,b
 20996  0010C4  2BA0               	incf	(__doprnt@f+1)& (0+255),f,b
 20997  0010C6                     	if	0	;tblptru may be non-zero
 20998  0010C6                     	endif
 20999  0010C6                     	if	0	;tblptru may be non-zero
 21000  0010C6                     	endif
 21001  0010C6  0008               	tblrd		*
 21002  0010C8  FFFF               	dw	65535	; errata NOP
 21003  0010CA  CFF5 F0C3          	movff	tablat,__doprnt@c
 21004  0010CE  0100               	movlb	0	; () banked
 21005  0010D0  51C3               	movf	__doprnt@c& (0+255),w,b
 21006  0010D2  A4D8               	btfss	status,2,c
 21007  0010D4  EFE3  F000         	goto	l1216
 21008  0010D8                     u10160:
 21009  0010D8  FFFF               	dw	65535	; assembler added errata NOP
 21010                           
 21011                           ; BSR set to: 0
 21012                           ;doprnt.c: 1540: return ccnt;
 21013                           
 21014                           ; BSR set to: 0
 21015                           ;doprnt.c: 1525: }
 21016                           ;doprnt.c: 1533: }
 21017                           ;doprnt.c: 1535: alldone:
 21018  0010DA  C0B2  F09D         	movff	__doprnt@ccnt,?__doprnt
 21019  0010DE  C0B3  F09E         	movff	__doprnt@ccnt+1,?__doprnt+1
 21020                           
 21021                           ; BSR set to: 0
 21022  0010E2  0012               	return		;funcret
 21023  0010E4  FFFF               	dw	65535	; errata NOP
 21024  0010E6                     __end_of__doprnt:
 21025                           	opt stack 0
 21026                           tosu	equ	0xFFF
 21027                           tosh	equ	0xFFE
 21028                           tosl	equ	0xFFD
 21029                           pclath	equ	0xFFA
 21030                           tblptru	equ	0xFF8
 21031                           tblptrh	equ	0xFF7
 21032                           tblptrl	equ	0xFF6
 21033                           tablat	equ	0xFF5
 21034                           prodh	equ	0xFF4
 21035                           prodl	equ	0xFF3
 21036                           intcon	equ	0xFF2
 21037                           postinc0	equ	0xFEE
 21038                           wreg	equ	0xFE8
 21039                           indf1	equ	0xFE7
 21040                           fsr1h	equ	0xFE2
 21041                           fsr1l	equ	0xFE1
 21042                           indf2	equ	0xFDF
 21043                           postinc2	equ	0xFDE
 21044                           postdec2	equ	0xFDD
 21045                           plusw2	equ	0xFDB
 21046                           fsr2h	equ	0xFDA
 21047                           fsr2l	equ	0xFD9
 21048                           status	equ	0xFD8
 21049                           
 21050 ;; *************** function _scale *****************
 21051 ;; Defined at:
 21052 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 21053 ;; Parameters:    Size  Location     Type
 21054 ;;  scl             1    wreg     char 
 21055 ;; Auto vars:     Size  Location     Type
 21056 ;;  scl             1   45[BANK0 ] char 
 21057 ;; Return value:  Size  Location     Type
 21058 ;;                  3   39[BANK0 ] char 
 21059 ;; Registers used:
 21060 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21061 ;; Tracked objects:
 21062 ;;		On entry : 0/0
 21063 ;;		On exit  : 0/0
 21064 ;;		Unchanged: 0/0
 21065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21066 ;;      Params:         0       3       0       0       0       0       0
 21067 ;;      Locals:         0       4       0       0       0       0       0
 21068 ;;      Temps:          0       0       0       0       0       0       0
 21069 ;;      Totals:         0       7       0       0       0       0       0
 21070 ;;Total ram usage:        7 bytes
 21071 ;; Hardware stack levels used:    1
 21072 ;; Hardware stack levels required when called:    3
 21073 ;; This function calls:
 21074 ;;		___awdiv
 21075 ;;		___awmod
 21076 ;;		___ftmul
 21077 ;;		___wmul
 21078 ;; This function is called by:
 21079 ;;		__doprnt
 21080 ;; This function uses a non-reentrant model
 21081 ;;
 21082                           
 21083                           	psect	text119
 21084  002036                     __ptext119:
 21085                           	opt stack 0
 21086  002036                     _scale:
 21087                           	opt stack 0
 21088  002036  FFFF               	dw	65535	; assembler added errata NOP
 21089                           
 21090                           ; BSR set to: 0
 21091                           ;incstack = 0
 21092                           ;scale@scl stored from wreg
 21093  002038  0100               	movlb	0	; () banked
 21094  00203A  6F8D               	movwf	scale@scl& (0+255),b
 21095                           
 21096                           ;doprnt.c: 428: if(scl < 0) {
 21097  00203C  0100               	movlb	0	; () banked
 21098  00203E  AF8D               	btfss	scale@scl& (0+255),7,b
 21099  002040  D110               	goto	l1205
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;doprnt.c: 429: scl = -scl;
 21103  002042  0100               	movlb	0	; () banked
 21104  002044  6D8D               	negf	scale@scl& (0+255),b
 21105                           
 21106                           ;doprnt.c: 430: if(scl>=110)
 21107  002046  0100               	movlb	0	; () banked
 21108  002048  518D               	movf	scale@scl& (0+255),w,b
 21109  00204A  0A80               	xorlw	128
 21110  00204C  0F12               	addlw	-238
 21111  00204E  A0D8               	btfss	status,0,c
 21112  002050  D097               	goto	l1206
 21113                           
 21114                           ; BSR set to: 0
 21115                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 21116  002052  0E00               	movlw	0
 21117  002054  6E2A               	movwf	___wmul@multiplicand+1,c
 21118  002056  0E03               	movlw	3
 21119  002058  6E29               	movwf	___wmul@multiplicand,c
 21120  00205A  0E00               	movlw	0
 21121  00205C  6E22               	movwf	___awdiv@divisor+1,c
 21122  00205E  0E0A               	movlw	10
 21123  002060  6E21               	movwf	___awdiv@divisor,c
 21124  002062  0E00               	movlw	0
 21125  002064  6E1C               	movwf	___awmod@divisor+1,c
 21126  002066  0E64               	movlw	100
 21127  002068  6E1B               	movwf	___awmod@divisor,c
 21128  00206A  0100               	movlb	0	; () banked
 21129  00206C  518D               	movf	scale@scl& (0+255),w,b
 21130  00206E  6E19               	movwf	___awmod@dividend,c
 21131  002070  6A1A               	clrf	___awmod@dividend+1,c
 21132  002072  BE19               	btfsc	___awmod@dividend,7,c
 21133  002074  061A               	decf	___awmod@dividend+1,f,c
 21134  002076  EC0D  F030         	call	___awmod
 21135  00207A  C019  F01F         	movff	?___awmod,___awdiv@dividend
 21136  00207E  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 21137  002082  ECAA  F031         	call	___awdiv	;wreg free
 21138  002086  0E09               	movlw	9
 21139  002088  241F               	addwf	?___awdiv,w,c
 21140  00208A  6E27               	movwf	___wmul@multiplier,c
 21141  00208C  0E00               	movlw	0
 21142  00208E  2020               	addwfc	?___awdiv+1,w,c
 21143  002090  6E28               	movwf	___wmul@multiplier+1,c
 21144  002092  EC74  F029         	call	___wmul	;wreg free
 21145  002096  0E72               	movlw	low __npowers_
 21146  002098  2427               	addwf	?___wmul,w,c
 21147  00209A  6EF6               	movwf	tblptrl,c
 21148  00209C  0E7D               	movlw	high __npowers_
 21149  00209E  2028               	addwfc	?___wmul+1,w,c
 21150  0020A0  6EF7               	movwf	tblptrh,c
 21151  0020A2                     	if	0	;There are less than 3 active tblptr bytes
 21152  0020A2                     	endif
 21153  0020A2  0009               	tblrd		*+
 21154  0020A4  FFFF               	dw	65535	; errata NOP
 21155  0020A6  CFF5 F07B          	movff	tablat,___ftmul@f2
 21156  0020AA  0009               	tblrd		*+
 21157  0020AC  FFFF               	dw	65535	; errata NOP
 21158  0020AE  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21159  0020B2  000A               	tblrd		*-
 21160  0020B4  FFFF               	dw	65535	; errata NOP
 21161  0020B6  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21162  0020BA  0E00               	movlw	0
 21163  0020BC  6E22               	movwf	___awdiv@divisor+1,c
 21164  0020BE  0E64               	movlw	100
 21165  0020C0  6E21               	movwf	___awdiv@divisor,c
 21166  0020C2  0100               	movlb	0	; () banked
 21167  0020C4  518D               	movf	scale@scl& (0+255),w,b
 21168  0020C6  6E1F               	movwf	___awdiv@dividend,c
 21169  0020C8  6A20               	clrf	___awdiv@dividend+1,c
 21170  0020CA  BE1F               	btfsc	___awdiv@dividend,7,c
 21171  0020CC  0620               	decf	___awdiv@dividend+1,f,c
 21172  0020CE  ECAA  F031         	call	___awdiv	;wreg free
 21173  0020D2  0E12               	movlw	18
 21174  0020D4  241F               	addwf	?___awdiv,w,c
 21175  0020D6  6E27               	movwf	___wmul@multiplier,c
 21176  0020D8  0E00               	movlw	0
 21177  0020DA  2020               	addwfc	?___awdiv+1,w,c
 21178  0020DC  6E28               	movwf	___wmul@multiplier+1,c
 21179  0020DE  0E00               	movlw	0
 21180  0020E0  6E2A               	movwf	___wmul@multiplicand+1,c
 21181  0020E2  0E03               	movlw	3
 21182  0020E4  6E29               	movwf	___wmul@multiplicand,c
 21183  0020E6  EC74  F029         	call	___wmul	;wreg free
 21184  0020EA  0E72               	movlw	low __npowers_
 21185  0020EC  2427               	addwf	?___wmul,w,c
 21186  0020EE  6EF6               	movwf	tblptrl,c
 21187  0020F0  0E7D               	movlw	high __npowers_
 21188  0020F2  2028               	addwfc	?___wmul+1,w,c
 21189  0020F4  6EF7               	movwf	tblptrh,c
 21190  0020F6                     	if	0	;There are less than 3 active tblptr bytes
 21191  0020F6                     	endif
 21192  0020F6  0009               	tblrd		*+
 21193  0020F8  FFFF               	dw	65535	; errata NOP
 21194  0020FA  CFF5 F078          	movff	tablat,___ftmul@f1
 21195  0020FE  0009               	tblrd		*+
 21196  002100  FFFF               	dw	65535	; errata NOP
 21197  002102  CFF5 F079          	movff	tablat,___ftmul@f1+1
 21198  002106  000A               	tblrd		*-
 21199  002108  FFFF               	dw	65535	; errata NOP
 21200  00210A  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 21201  00210E  EC53  F03C         	call	___ftmul	;wreg free
 21202  002112  C078  F08A         	movff	?___ftmul,_scale$3548
 21203  002116  C079  F08B         	movff	?___ftmul+1,_scale$3548+1
 21204  00211A  C07A  F08C         	movff	?___ftmul+2,_scale$3548+2
 21205                           
 21206                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 21207  00211E  C08A  F078         	movff	_scale$3548,___ftmul@f1
 21208  002122  C08B  F079         	movff	_scale$3548+1,___ftmul@f1+1
 21209  002126  C08C  F07A         	movff	_scale$3548+2,___ftmul@f1+2
 21210  00212A  0E00               	movlw	0
 21211  00212C  6E2A               	movwf	___wmul@multiplicand+1,c
 21212  00212E  0E03               	movlw	3
 21213  002130  6E29               	movwf	___wmul@multiplicand,c
 21214  002132  0E00               	movlw	0
 21215  002134  6E1C               	movwf	___awmod@divisor+1,c
 21216  002136  0E0A               	movlw	10
 21217  002138  6E1B               	movwf	___awmod@divisor,c
 21218  00213A  0100               	movlb	0	; () banked
 21219  00213C  518D               	movf	scale@scl& (0+255),w,b
 21220  00213E  6E19               	movwf	___awmod@dividend,c
 21221  002140  6A1A               	clrf	___awmod@dividend+1,c
 21222  002142  BE19               	btfsc	___awmod@dividend,7,c
 21223  002144  061A               	decf	___awmod@dividend+1,f,c
 21224  002146  EC0D  F030         	call	___awmod	;wreg free
 21225  00214A  C019  F027         	movff	?___awmod,___wmul@multiplier
 21226  00214E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21227  002152  EC74  F029         	call	___wmul	;wreg free
 21228  002156  0E72               	movlw	low __npowers_
 21229  002158  2427               	addwf	?___wmul,w,c
 21230  00215A  6EF6               	movwf	tblptrl,c
 21231  00215C  0E7D               	movlw	high __npowers_
 21232  00215E  2028               	addwfc	?___wmul+1,w,c
 21233  002160  6EF7               	movwf	tblptrh,c
 21234  002162                     	if	0	;There are less than 3 active tblptr bytes
 21235  002162                     	endif
 21236  002162  0009               	tblrd		*+
 21237  002164  FFFF               	dw	65535	; errata NOP
 21238  002166  CFF5 F07B          	movff	tablat,___ftmul@f2
 21239  00216A  0009               	tblrd		*+
 21240  00216C  FFFF               	dw	65535	; errata NOP
 21241  00216E  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21242  002172  000A               	tblrd		*-
 21243  002174  FFFF               	dw	65535	; errata NOP
 21244  002176  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21245  00217A  EC53  F03C         	call	___ftmul	;wreg free
 21246  00217E  D16A               	goto	L23
 21247  002180                     l1206:
 21248  002180  FFFF               	dw	65535	; assembler added errata NOP
 21249                           
 21250                           ;doprnt.c: 432: else if(scl > 10)
 21251  002182  0100               	movlb	0	; () banked
 21252  002184  518D               	movf	scale@scl& (0+255),w,b
 21253  002186  0A80               	xorlw	128
 21254  002188  0F75               	addlw	-139
 21255  00218A  A0D8               	btfss	status,0,c
 21256  00218C  D055               	goto	l1209
 21257                           
 21258                           ; BSR set to: 0
 21259                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 21260  00218E  0E00               	movlw	0
 21261  002190  6E22               	movwf	___awdiv@divisor+1,c
 21262  002192  0E0A               	movlw	10
 21263  002194  6E21               	movwf	___awdiv@divisor,c
 21264  002196  0100               	movlb	0	; () banked
 21265  002198  518D               	movf	scale@scl& (0+255),w,b
 21266  00219A  6E1F               	movwf	___awdiv@dividend,c
 21267  00219C  6A20               	clrf	___awdiv@dividend+1,c
 21268  00219E  BE1F               	btfsc	___awdiv@dividend,7,c
 21269  0021A0  0620               	decf	___awdiv@dividend+1,f,c
 21270  0021A2  ECAA  F031         	call	___awdiv	;wreg free
 21271  0021A6  0E09               	movlw	9
 21272  0021A8  241F               	addwf	?___awdiv,w,c
 21273  0021AA  6E27               	movwf	___wmul@multiplier,c
 21274  0021AC  0E00               	movlw	0
 21275  0021AE  2020               	addwfc	?___awdiv+1,w,c
 21276  0021B0  6E28               	movwf	___wmul@multiplier+1,c
 21277  0021B2  0E00               	movlw	0
 21278  0021B4  6E2A               	movwf	___wmul@multiplicand+1,c
 21279  0021B6  0E03               	movlw	3
 21280  0021B8  6E29               	movwf	___wmul@multiplicand,c
 21281  0021BA  EC74  F029         	call	___wmul	;wreg free
 21282  0021BE  0E72               	movlw	low __npowers_
 21283  0021C0  2427               	addwf	?___wmul,w,c
 21284  0021C2  6EF6               	movwf	tblptrl,c
 21285  0021C4  0E7D               	movlw	high __npowers_
 21286  0021C6  2028               	addwfc	?___wmul+1,w,c
 21287  0021C8  6EF7               	movwf	tblptrh,c
 21288  0021CA                     	if	0	;There are less than 3 active tblptr bytes
 21289  0021CA                     	endif
 21290  0021CA  0009               	tblrd		*+
 21291  0021CC  FFFF               	dw	65535	; errata NOP
 21292  0021CE  CFF5 F078          	movff	tablat,___ftmul@f1
 21293  0021D2  0009               	tblrd		*+
 21294  0021D4  FFFF               	dw	65535	; errata NOP
 21295  0021D6  CFF5 F079          	movff	tablat,___ftmul@f1+1
 21296  0021DA  000A               	tblrd		*-
 21297  0021DC  FFFF               	dw	65535	; errata NOP
 21298  0021DE  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 21299  0021E2  0E00               	movlw	0
 21300  0021E4  6E2A               	movwf	___wmul@multiplicand+1,c
 21301  0021E6  0E03               	movlw	3
 21302  0021E8  6E29               	movwf	___wmul@multiplicand,c
 21303  0021EA  0E00               	movlw	0
 21304  0021EC  6E1C               	movwf	___awmod@divisor+1,c
 21305  0021EE  0E0A               	movlw	10
 21306  0021F0  6E1B               	movwf	___awmod@divisor,c
 21307  0021F2  0100               	movlb	0	; () banked
 21308  0021F4  518D               	movf	scale@scl& (0+255),w,b
 21309  0021F6  6E19               	movwf	___awmod@dividend,c
 21310  0021F8  6A1A               	clrf	___awmod@dividend+1,c
 21311  0021FA  BE19               	btfsc	___awmod@dividend,7,c
 21312  0021FC  061A               	decf	___awmod@dividend+1,f,c
 21313  0021FE  EC0D  F030         	call	___awmod	;wreg free
 21314  002202  C019  F027         	movff	?___awmod,___wmul@multiplier
 21315  002206  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21316  00220A  EC74  F029         	call	___wmul	;wreg free
 21317  00220E  0E72               	movlw	low __npowers_
 21318  002210  2427               	addwf	?___wmul,w,c
 21319  002212  6EF6               	movwf	tblptrl,c
 21320  002214  0E7D               	movlw	high __npowers_
 21321  002216  2028               	addwfc	?___wmul+1,w,c
 21322  002218  6EF7               	movwf	tblptrh,c
 21323  00221A                     	if	0	;There are less than 3 active tblptr bytes
 21324  00221A                     	endif
 21325  00221A  0009               	tblrd		*+
 21326  00221C  FFFF               	dw	65535	; errata NOP
 21327  00221E  CFF5 F07B          	movff	tablat,___ftmul@f2
 21328  002222  0009               	tblrd		*+
 21329  002224  FFFF               	dw	65535	; errata NOP
 21330  002226  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21331  00222A  000A               	tblrd		*-
 21332  00222C  FFFF               	dw	65535	; errata NOP
 21333  00222E  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21334  002232  EC53  F03C         	call	___ftmul	;wreg free
 21335  002236  D10E               	goto	L23
 21336  002238                     l1209:
 21337  002238  FFFF               	dw	65535	; assembler added errata NOP
 21338                           
 21339                           ;doprnt.c: 434: return _npowers_[scl];
 21340  00223A  0100               	movlb	0	; () banked
 21341  00223C  518D               	movf	scale@scl& (0+255),w,b
 21342  00223E  0D03               	mullw	3
 21343  002240  0E72               	movlw	low __npowers_
 21344  002242  24F3               	addwf	prodl,w,c
 21345  002244  6EF6               	movwf	tblptrl,c
 21346  002246  0E7D               	movlw	high __npowers_
 21347  002248  20F4               	addwfc	prodh,w,c
 21348  00224A  6EF7               	movwf	tblptrh,c
 21349  00224C                     	if	0	;There are less than 3 active tblptr bytes
 21350  00224C                     	endif
 21351  00224C  0009               	tblrd		*+
 21352  00224E  FFFF               	dw	65535	; errata NOP
 21353  002250  CFF5 F087          	movff	tablat,?_scale
 21354  002254  0009               	tblrd		*+
 21355  002256  FFFF               	dw	65535	; errata NOP
 21356  002258  CFF5 F088          	movff	tablat,?_scale+1
 21357  00225C  000A               	tblrd		*-
 21358  00225E  FFFF               	dw	65535	; errata NOP
 21359  002260  D115               	goto	L22
 21360  002262                     l1205:
 21361  002262  FFFF               	dw	65535	; assembler added errata NOP
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;doprnt.c: 435: }
 21365                           ;doprnt.c: 436: if(scl>=110)
 21366                           
 21367                           ; BSR set to: 0
 21368  002264  0100               	movlb	0	; () banked
 21369  002266  518D               	movf	scale@scl& (0+255),w,b
 21370  002268  0A80               	xorlw	128
 21371  00226A  0F12               	addlw	-238
 21372  00226C  A0D8               	btfss	status,0,c
 21373  00226E  D097               	goto	l1210
 21374                           
 21375                           ; BSR set to: 0
 21376                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 21377  002270  0E00               	movlw	0
 21378  002272  6E2A               	movwf	___wmul@multiplicand+1,c
 21379  002274  0E03               	movlw	3
 21380  002276  6E29               	movwf	___wmul@multiplicand,c
 21381  002278  0E00               	movlw	0
 21382  00227A  6E22               	movwf	___awdiv@divisor+1,c
 21383  00227C  0E0A               	movlw	10
 21384  00227E  6E21               	movwf	___awdiv@divisor,c
 21385  002280  0E00               	movlw	0
 21386  002282  6E1C               	movwf	___awmod@divisor+1,c
 21387  002284  0E64               	movlw	100
 21388  002286  6E1B               	movwf	___awmod@divisor,c
 21389  002288  0100               	movlb	0	; () banked
 21390  00228A  518D               	movf	scale@scl& (0+255),w,b
 21391  00228C  6E19               	movwf	___awmod@dividend,c
 21392  00228E  6A1A               	clrf	___awmod@dividend+1,c
 21393  002290  BE19               	btfsc	___awmod@dividend,7,c
 21394  002292  061A               	decf	___awmod@dividend+1,f,c
 21395  002294  EC0D  F030         	call	___awmod	;wreg free
 21396  002298  C019  F01F         	movff	?___awmod,___awdiv@dividend
 21397  00229C  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 21398  0022A0  ECAA  F031         	call	___awdiv	;wreg free
 21399  0022A4  0E09               	movlw	9
 21400  0022A6  241F               	addwf	?___awdiv,w,c
 21401  0022A8  6E27               	movwf	___wmul@multiplier,c
 21402  0022AA  0E00               	movlw	0
 21403  0022AC  2020               	addwfc	?___awdiv+1,w,c
 21404  0022AE  6E28               	movwf	___wmul@multiplier+1,c
 21405  0022B0  EC74  F029         	call	___wmul	;wreg free
 21406  0022B4  0E4B               	movlw	low __powers_
 21407  0022B6  2427               	addwf	?___wmul,w,c
 21408  0022B8  6EF6               	movwf	tblptrl,c
 21409  0022BA  0E7D               	movlw	high __powers_
 21410  0022BC  2028               	addwfc	?___wmul+1,w,c
 21411  0022BE  6EF7               	movwf	tblptrh,c
 21412  0022C0                     	if	0	;There are less than 3 active tblptr bytes
 21413  0022C0                     	endif
 21414  0022C0  0009               	tblrd		*+
 21415  0022C2  FFFF               	dw	65535	; errata NOP
 21416  0022C4  CFF5 F07B          	movff	tablat,___ftmul@f2
 21417  0022C8  0009               	tblrd		*+
 21418  0022CA  FFFF               	dw	65535	; errata NOP
 21419  0022CC  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21420  0022D0  000A               	tblrd		*-
 21421  0022D2  FFFF               	dw	65535	; errata NOP
 21422  0022D4  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21423  0022D8  0E00               	movlw	0
 21424  0022DA  6E22               	movwf	___awdiv@divisor+1,c
 21425  0022DC  0E64               	movlw	100
 21426  0022DE  6E21               	movwf	___awdiv@divisor,c
 21427  0022E0  0100               	movlb	0	; () banked
 21428  0022E2  518D               	movf	scale@scl& (0+255),w,b
 21429  0022E4  6E1F               	movwf	___awdiv@dividend,c
 21430  0022E6  6A20               	clrf	___awdiv@dividend+1,c
 21431  0022E8  BE1F               	btfsc	___awdiv@dividend,7,c
 21432  0022EA  0620               	decf	___awdiv@dividend+1,f,c
 21433  0022EC  ECAA  F031         	call	___awdiv	;wreg free
 21434  0022F0  0E12               	movlw	18
 21435  0022F2  241F               	addwf	?___awdiv,w,c
 21436  0022F4  6E27               	movwf	___wmul@multiplier,c
 21437  0022F6  0E00               	movlw	0
 21438  0022F8  2020               	addwfc	?___awdiv+1,w,c
 21439  0022FA  6E28               	movwf	___wmul@multiplier+1,c
 21440  0022FC  0E00               	movlw	0
 21441  0022FE  6E2A               	movwf	___wmul@multiplicand+1,c
 21442  002300  0E03               	movlw	3
 21443  002302  6E29               	movwf	___wmul@multiplicand,c
 21444  002304  EC74  F029         	call	___wmul	;wreg free
 21445  002308  0E4B               	movlw	low __powers_
 21446  00230A  2427               	addwf	?___wmul,w,c
 21447  00230C  6EF6               	movwf	tblptrl,c
 21448  00230E  0E7D               	movlw	high __powers_
 21449  002310  2028               	addwfc	?___wmul+1,w,c
 21450  002312  6EF7               	movwf	tblptrh,c
 21451  002314                     	if	0	;There are less than 3 active tblptr bytes
 21452  002314                     	endif
 21453  002314  0009               	tblrd		*+
 21454  002316  FFFF               	dw	65535	; errata NOP
 21455  002318  CFF5 F078          	movff	tablat,___ftmul@f1
 21456  00231C  0009               	tblrd		*+
 21457  00231E  FFFF               	dw	65535	; errata NOP
 21458  002320  CFF5 F079          	movff	tablat,___ftmul@f1+1
 21459  002324  000A               	tblrd		*-
 21460  002326  FFFF               	dw	65535	; errata NOP
 21461  002328  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 21462  00232C  EC53  F03C         	call	___ftmul	;wreg free
 21463  002330  C078  F08A         	movff	?___ftmul,_scale$3548
 21464  002334  C079  F08B         	movff	?___ftmul+1,_scale$3548+1
 21465  002338  C07A  F08C         	movff	?___ftmul+2,_scale$3548+2
 21466                           
 21467                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 21468  00233C  C08A  F078         	movff	_scale$3548,___ftmul@f1
 21469  002340  C08B  F079         	movff	_scale$3548+1,___ftmul@f1+1
 21470  002344  C08C  F07A         	movff	_scale$3548+2,___ftmul@f1+2
 21471  002348  0E00               	movlw	0
 21472  00234A  6E2A               	movwf	___wmul@multiplicand+1,c
 21473  00234C  0E03               	movlw	3
 21474  00234E  6E29               	movwf	___wmul@multiplicand,c
 21475  002350  0E00               	movlw	0
 21476  002352  6E1C               	movwf	___awmod@divisor+1,c
 21477  002354  0E0A               	movlw	10
 21478  002356  6E1B               	movwf	___awmod@divisor,c
 21479  002358  0100               	movlb	0	; () banked
 21480  00235A  518D               	movf	scale@scl& (0+255),w,b
 21481  00235C  6E19               	movwf	___awmod@dividend,c
 21482  00235E  6A1A               	clrf	___awmod@dividend+1,c
 21483  002360  BE19               	btfsc	___awmod@dividend,7,c
 21484  002362  061A               	decf	___awmod@dividend+1,f,c
 21485  002364  EC0D  F030         	call	___awmod	;wreg free
 21486  002368  C019  F027         	movff	?___awmod,___wmul@multiplier
 21487  00236C  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21488  002370  EC74  F029         	call	___wmul	;wreg free
 21489  002374  0E4B               	movlw	low __powers_
 21490  002376  2427               	addwf	?___wmul,w,c
 21491  002378  6EF6               	movwf	tblptrl,c
 21492  00237A  0E7D               	movlw	high __powers_
 21493  00237C  2028               	addwfc	?___wmul+1,w,c
 21494  00237E  6EF7               	movwf	tblptrh,c
 21495  002380                     	if	0	;There are less than 3 active tblptr bytes
 21496  002380                     	endif
 21497  002380  0009               	tblrd		*+
 21498  002382  FFFF               	dw	65535	; errata NOP
 21499  002384  CFF5 F07B          	movff	tablat,___ftmul@f2
 21500  002388  0009               	tblrd		*+
 21501  00238A  FFFF               	dw	65535	; errata NOP
 21502  00238C  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21503  002390  000A               	tblrd		*-
 21504  002392  FFFF               	dw	65535	; errata NOP
 21505  002394  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21506  002398  EC53  F03C         	call	___ftmul	;wreg free
 21507  00239C  D05B               	goto	L23
 21508  00239E                     l1210:
 21509  00239E  FFFF               	dw	65535	; assembler added errata NOP
 21510                           
 21511                           ;doprnt.c: 438: else if(scl > 10)
 21512  0023A0  0100               	movlb	0	; () banked
 21513  0023A2  518D               	movf	scale@scl& (0+255),w,b
 21514  0023A4  0A80               	xorlw	128
 21515  0023A6  0F75               	addlw	-139
 21516  0023A8  A0D8               	btfss	status,0,c
 21517  0023AA  D05C               	goto	l1212
 21518                           
 21519                           ; BSR set to: 0
 21520                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 21521  0023AC  0E00               	movlw	0
 21522  0023AE  6E22               	movwf	___awdiv@divisor+1,c
 21523  0023B0  0E0A               	movlw	10
 21524  0023B2  6E21               	movwf	___awdiv@divisor,c
 21525  0023B4  0100               	movlb	0	; () banked
 21526  0023B6  518D               	movf	scale@scl& (0+255),w,b
 21527  0023B8  6E1F               	movwf	___awdiv@dividend,c
 21528  0023BA  6A20               	clrf	___awdiv@dividend+1,c
 21529  0023BC  BE1F               	btfsc	___awdiv@dividend,7,c
 21530  0023BE  0620               	decf	___awdiv@dividend+1,f,c
 21531  0023C0  ECAA  F031         	call	___awdiv	;wreg free
 21532  0023C4  0E09               	movlw	9
 21533  0023C6  241F               	addwf	?___awdiv,w,c
 21534  0023C8  6E27               	movwf	___wmul@multiplier,c
 21535  0023CA  0E00               	movlw	0
 21536  0023CC  2020               	addwfc	?___awdiv+1,w,c
 21537  0023CE  6E28               	movwf	___wmul@multiplier+1,c
 21538  0023D0  0E00               	movlw	0
 21539  0023D2  6E2A               	movwf	___wmul@multiplicand+1,c
 21540  0023D4  0E03               	movlw	3
 21541  0023D6  6E29               	movwf	___wmul@multiplicand,c
 21542  0023D8  EC74  F029         	call	___wmul	;wreg free
 21543  0023DC  0E4B               	movlw	low __powers_
 21544  0023DE  2427               	addwf	?___wmul,w,c
 21545  0023E0  6EF6               	movwf	tblptrl,c
 21546  0023E2  0E7D               	movlw	high __powers_
 21547  0023E4  2028               	addwfc	?___wmul+1,w,c
 21548  0023E6  6EF7               	movwf	tblptrh,c
 21549  0023E8                     	if	0	;There are less than 3 active tblptr bytes
 21550  0023E8                     	endif
 21551  0023E8  0009               	tblrd		*+
 21552  0023EA  FFFF               	dw	65535	; errata NOP
 21553  0023EC  CFF5 F078          	movff	tablat,___ftmul@f1
 21554  0023F0  0009               	tblrd		*+
 21555  0023F2  FFFF               	dw	65535	; errata NOP
 21556  0023F4  CFF5 F079          	movff	tablat,___ftmul@f1+1
 21557  0023F8  000A               	tblrd		*-
 21558  0023FA  FFFF               	dw	65535	; errata NOP
 21559  0023FC  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 21560  002400  0E00               	movlw	0
 21561  002402  6E2A               	movwf	___wmul@multiplicand+1,c
 21562  002404  0E03               	movlw	3
 21563  002406  6E29               	movwf	___wmul@multiplicand,c
 21564  002408  0E00               	movlw	0
 21565  00240A  6E1C               	movwf	___awmod@divisor+1,c
 21566  00240C  0E0A               	movlw	10
 21567  00240E  6E1B               	movwf	___awmod@divisor,c
 21568  002410  0100               	movlb	0	; () banked
 21569  002412  518D               	movf	scale@scl& (0+255),w,b
 21570  002414  6E19               	movwf	___awmod@dividend,c
 21571  002416  6A1A               	clrf	___awmod@dividend+1,c
 21572  002418  BE19               	btfsc	___awmod@dividend,7,c
 21573  00241A  061A               	decf	___awmod@dividend+1,f,c
 21574  00241C  EC0D  F030         	call	___awmod	;wreg free
 21575  002420  C019  F027         	movff	?___awmod,___wmul@multiplier
 21576  002424  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21577  002428  EC74  F029         	call	___wmul	;wreg free
 21578  00242C  0E4B               	movlw	low __powers_
 21579  00242E  2427               	addwf	?___wmul,w,c
 21580  002430  6EF6               	movwf	tblptrl,c
 21581  002432  0E7D               	movlw	high __powers_
 21582  002434  2028               	addwfc	?___wmul+1,w,c
 21583  002436  6EF7               	movwf	tblptrh,c
 21584  002438                     	if	0	;There are less than 3 active tblptr bytes
 21585  002438                     	endif
 21586  002438  0009               	tblrd		*+
 21587  00243A  FFFF               	dw	65535	; errata NOP
 21588  00243C  CFF5 F07B          	movff	tablat,___ftmul@f2
 21589  002440  0009               	tblrd		*+
 21590  002442  FFFF               	dw	65535	; errata NOP
 21591  002444  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21592  002448  000A               	tblrd		*-
 21593  00244A  FFFF               	dw	65535	; errata NOP
 21594  00244C  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21595  002450  EC53  F03C         	call	___ftmul	;wreg free
 21596  002454                     L23:
 21597  002454  FFFF               	dw	65535	; assembler added errata NOP
 21598  002456  C078  F087         	movff	?___ftmul,?_scale
 21599  00245A  C079  F088         	movff	?___ftmul+1,?_scale+1
 21600  00245E  C07A  F089         	movff	?___ftmul+2,?_scale+2
 21601  002462  D017               	goto	l9102
 21602  002464                     l1212:
 21603  002464  FFFF               	dw	65535	; assembler added errata NOP
 21604                           
 21605                           ;doprnt.c: 440: return _powers_[scl];
 21606  002466  0100               	movlb	0	; () banked
 21607  002468  518D               	movf	scale@scl& (0+255),w,b
 21608  00246A  0D03               	mullw	3
 21609  00246C  0E4B               	movlw	low __powers_
 21610  00246E  24F3               	addwf	prodl,w,c
 21611  002470  6EF6               	movwf	tblptrl,c
 21612  002472  0E7D               	movlw	high __powers_
 21613  002474  20F4               	addwfc	prodh,w,c
 21614  002476  6EF7               	movwf	tblptrh,c
 21615  002478                     	if	0	;There are less than 3 active tblptr bytes
 21616  002478                     	endif
 21617  002478  0009               	tblrd		*+
 21618  00247A  FFFF               	dw	65535	; errata NOP
 21619  00247C  CFF5 F087          	movff	tablat,?_scale
 21620  002480  0009               	tblrd		*+
 21621  002482  FFFF               	dw	65535	; errata NOP
 21622  002484  CFF5 F088          	movff	tablat,?_scale+1
 21623  002488  000A               	tblrd		*-
 21624  00248A  FFFF               	dw	65535	; errata NOP
 21625  00248C                     L22:
 21626  00248C  FFFF               	dw	65535	; assembler added errata NOP
 21627  00248E  CFF5 F089          	movff	tablat,?_scale+2
 21628  002492                     l9102:
 21629  002492  FFFF               	dw	65535	; assembler added errata NOP
 21630                           
 21631                           ; BSR set to: 0
 21632  002494  0012               	return		;funcret
 21633  002496  FFFF               	dw	65535	; errata NOP
 21634  002498                     __end_of_scale:
 21635                           	opt stack 0
 21636                           tosu	equ	0xFFF
 21637                           tosh	equ	0xFFE
 21638                           tosl	equ	0xFFD
 21639                           pclath	equ	0xFFA
 21640                           tblptru	equ	0xFF8
 21641                           tblptrh	equ	0xFF7
 21642                           tblptrl	equ	0xFF6
 21643                           tablat	equ	0xFF5
 21644                           prodh	equ	0xFF4
 21645                           prodl	equ	0xFF3
 21646                           intcon	equ	0xFF2
 21647                           postinc0	equ	0xFEE
 21648                           wreg	equ	0xFE8
 21649                           indf1	equ	0xFE7
 21650                           fsr1h	equ	0xFE2
 21651                           fsr1l	equ	0xFE1
 21652                           indf2	equ	0xFDF
 21653                           postinc2	equ	0xFDE
 21654                           postdec2	equ	0xFDD
 21655                           plusw2	equ	0xFDB
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660 ;; *************** function _putch *****************
 21661 ;; Defined at:
 21662 ;;		line 65 in file "USART.c"
 21663 ;; Parameters:    Size  Location     Type
 21664 ;;  byte            1    wreg     unsigned char 
 21665 ;; Auto vars:     Size  Location     Type
 21666 ;;  byte            1   24[COMRAM] unsigned char 
 21667 ;; Return value:  Size  Location     Type
 21668 ;;                  1    wreg      void 
 21669 ;; Registers used:
 21670 ;;		wreg
 21671 ;; Tracked objects:
 21672 ;;		On entry : 0/0
 21673 ;;		On exit  : 0/0
 21674 ;;		Unchanged: 0/0
 21675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21676 ;;      Params:         0       0       0       0       0       0       0
 21677 ;;      Locals:         1       0       0       0       0       0       0
 21678 ;;      Temps:          0       0       0       0       0       0       0
 21679 ;;      Totals:         1       0       0       0       0       0       0
 21680 ;;Total ram usage:        1 bytes
 21681 ;; Hardware stack levels used:    1
 21682 ;; Hardware stack levels required when called:    1
 21683 ;; This function calls:
 21684 ;;		Nothing
 21685 ;; This function is called by:
 21686 ;;		_printf
 21687 ;;		__doprnt
 21688 ;; This function uses a non-reentrant model
 21689 ;;
 21690                           
 21691                           	psect	text120
 21692  004DBA                     __ptext120:
 21693                           	opt stack 0
 21694  004DBA                     _putch:
 21695                           	opt stack 0
 21696  004DBA  FFFF               	dw	65535	; assembler added errata NOP
 21697                           
 21698                           ;incstack = 0
 21699                           ;putch@byte stored from wreg
 21700  004DBC  6E19               	movwf	putch@byte,c
 21701  004DBE  FFFF               	dw	65535	; assembler added errata NOP
 21702                           
 21703                           ;USART.c: 68: continue;
 21704                           
 21705                           ;USART.c: 67: while (!PIR1bits.TXIF)
 21706  004DC0  A89E               	btfss	3998,4,c	;volatile
 21707  004DC2  D7FD               	goto	l9040
 21708                           
 21709                           ;USART.c: 69: TXREG = byte;
 21710  004DC4  C019  FFAD         	movff	putch@byte,4013	;volatile
 21711  004DC8  0012               	return		;funcret
 21712  004DCA  FFFF               	dw	65535	; errata NOP
 21713  004DCC                     __end_of_putch:
 21714                           	opt stack 0
 21715                           tosu	equ	0xFFF
 21716                           tosh	equ	0xFFE
 21717                           tosl	equ	0xFFD
 21718                           pclath	equ	0xFFA
 21719                           tblptru	equ	0xFF8
 21720                           tblptrh	equ	0xFF7
 21721                           tblptrl	equ	0xFF6
 21722                           tablat	equ	0xFF5
 21723                           prodh	equ	0xFF4
 21724                           prodl	equ	0xFF3
 21725                           intcon	equ	0xFF2
 21726                           postinc0	equ	0xFEE
 21727                           wreg	equ	0xFE8
 21728                           indf1	equ	0xFE7
 21729                           fsr1h	equ	0xFE2
 21730                           fsr1l	equ	0xFE1
 21731                           indf2	equ	0xFDF
 21732                           postinc2	equ	0xFDE
 21733                           postdec2	equ	0xFDD
 21734                           plusw2	equ	0xFDB
 21735                           fsr2h	equ	0xFDA
 21736                           fsr2l	equ	0xFD9
 21737                           status	equ	0xFD8
 21738                           
 21739 ;; *************** function _isdigit *****************
 21740 ;; Defined at:
 21741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
 21742 ;; Parameters:    Size  Location     Type
 21743 ;;  c               1    wreg     unsigned char 
 21744 ;; Auto vars:     Size  Location     Type
 21745 ;;  c               1   26[COMRAM] unsigned char 
 21746 ;; Return value:  Size  Location     Type
 21747 ;;		None               void
 21748 ;; Registers used:
 21749 ;;		wreg, status,2, status,0
 21750 ;; Tracked objects:
 21751 ;;		On entry : 0/0
 21752 ;;		On exit  : 0/0
 21753 ;;		Unchanged: 0/0
 21754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21755 ;;      Params:         0       0       0       0       0       0       0
 21756 ;;      Locals:         2       0       0       0       0       0       0
 21757 ;;      Temps:          1       0       0       0       0       0       0
 21758 ;;      Totals:         3       0       0       0       0       0       0
 21759 ;;Total ram usage:        3 bytes
 21760 ;; Hardware stack levels used:    1
 21761 ;; Hardware stack levels required when called:    1
 21762 ;; This function calls:
 21763 ;;		Nothing
 21764 ;; This function is called by:
 21765 ;;		__doprnt
 21766 ;;		_strtod
 21767 ;;		_atoi
 21768 ;; This function uses a non-reentrant model
 21769 ;;
 21770                           
 21771                           	psect	text121
 21772  0051DC                     __ptext121:
 21773                           	opt stack 0
 21774  0051DC                     _isdigit:
 21775                           	opt stack 0
 21776  0051DC  FFFF               	dw	65535	; assembler added errata NOP
 21777                           
 21778                           ;incstack = 0
 21779                           ;isdigit@c stored from wreg
 21780  0051DE  6E1B               	movwf	isdigit@c,c
 21781  0051E0  0E00               	movlw	0
 21782  0051E2  6E1A               	movwf	_isdigit$2871,c
 21783  0051E4  0E3A               	movlw	58
 21784  0051E6  601B               	cpfslt	isdigit@c,c
 21785  0051E8  D005               	goto	l1782
 21786  0051EA  0E2F               	movlw	47
 21787  0051EC  641B               	cpfsgt	isdigit@c,c
 21788  0051EE  D002               	goto	l1782
 21789  0051F0  0E01               	movlw	1
 21790  0051F2  6E1A               	movwf	_isdigit$2871,c
 21791  0051F4                     l1782:
 21792  0051F4  FFFF               	dw	65535	; assembler added errata NOP
 21793  0051F6  C01A  F019         	movff	_isdigit$2871,??_isdigit
 21794  0051FA  3019               	rrcf	??_isdigit,w,c
 21795  0051FC  0012               	return		;funcret
 21796  0051FE  FFFF               	dw	65535	; errata NOP
 21797  005200                     __end_of_isdigit:
 21798                           	opt stack 0
 21799                           tosu	equ	0xFFF
 21800                           tosh	equ	0xFFE
 21801                           tosl	equ	0xFFD
 21802                           pclath	equ	0xFFA
 21803                           tblptru	equ	0xFF8
 21804                           tblptrh	equ	0xFF7
 21805                           tblptrl	equ	0xFF6
 21806                           tablat	equ	0xFF5
 21807                           prodh	equ	0xFF4
 21808                           prodl	equ	0xFF3
 21809                           intcon	equ	0xFF2
 21810                           postinc0	equ	0xFEE
 21811                           wreg	equ	0xFE8
 21812                           indf1	equ	0xFE7
 21813                           fsr1h	equ	0xFE2
 21814                           fsr1l	equ	0xFE1
 21815                           indf2	equ	0xFDF
 21816                           postinc2	equ	0xFDE
 21817                           postdec2	equ	0xFDD
 21818                           plusw2	equ	0xFDB
 21819                           fsr2h	equ	0xFDA
 21820                           fsr2l	equ	0xFD9
 21821                           status	equ	0xFD8
 21822                           
 21823 ;; *************** function _fround *****************
 21824 ;; Defined at:
 21825 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 21826 ;; Parameters:    Size  Location     Type
 21827 ;;  prec            1    wreg     unsigned char 
 21828 ;; Auto vars:     Size  Location     Type
 21829 ;;  prec            1   48[BANK0 ] unsigned char 
 21830 ;; Return value:  Size  Location     Type
 21831 ;;                  3   39[BANK0 ] unsigned char 
 21832 ;; Registers used:
 21833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21834 ;; Tracked objects:
 21835 ;;		On entry : 0/0
 21836 ;;		On exit  : 0/0
 21837 ;;		Unchanged: 0/0
 21838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21839 ;;      Params:         0       3       0       0       0       0       0
 21840 ;;      Locals:         0       7       0       0       0       0       0
 21841 ;;      Temps:          0       0       0       0       0       0       0
 21842 ;;      Totals:         0      10       0       0       0       0       0
 21843 ;;Total ram usage:       10 bytes
 21844 ;; Hardware stack levels used:    1
 21845 ;; Hardware stack levels required when called:    3
 21846 ;; This function calls:
 21847 ;;		___awdiv
 21848 ;;		___awmod
 21849 ;;		___ftmul
 21850 ;;		___wmul
 21851 ;; This function is called by:
 21852 ;;		__doprnt
 21853 ;; This function uses a non-reentrant model
 21854 ;;
 21855                           
 21856                           	psect	text122
 21857  00311E                     __ptext122:
 21858                           	opt stack 0
 21859  00311E                     _fround:
 21860                           	opt stack 0
 21861  00311E  FFFF               	dw	65535	; assembler added errata NOP
 21862                           
 21863                           ;incstack = 0
 21864                           ;fround@prec stored from wreg
 21865  003120  0100               	movlb	0	; () banked
 21866  003122  6F90               	movwf	fround@prec& (0+255),b
 21867                           
 21868                           ;doprnt.c: 413: if(prec>=110)
 21869  003124  0E6D               	movlw	109
 21870  003126  0100               	movlb	0	; () banked
 21871  003128  6590               	cpfsgt	fround@prec& (0+255),b
 21872  00312A  D0A5               	goto	l1199
 21873                           
 21874                           ; BSR set to: 0
 21875                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 21876  00312C  0E00               	movlw	0
 21877  00312E  6E2A               	movwf	___wmul@multiplicand+1,c
 21878  003130  0E03               	movlw	3
 21879  003132  6E29               	movwf	___wmul@multiplicand,c
 21880  003134  0E00               	movlw	0
 21881  003136  6E22               	movwf	___awdiv@divisor+1,c
 21882  003138  0E0A               	movlw	10
 21883  00313A  6E21               	movwf	___awdiv@divisor,c
 21884  00313C  0E00               	movlw	0
 21885  00313E  6E1C               	movwf	___awmod@divisor+1,c
 21886  003140  0E64               	movlw	100
 21887  003142  6E1B               	movwf	___awmod@divisor,c
 21888  003144  C090  F019         	movff	fround@prec,___awmod@dividend
 21889  003148  6A1A               	clrf	___awmod@dividend+1,c
 21890  00314A  EC0D  F030         	call	___awmod	;wreg free
 21891  00314E  C019  F01F         	movff	?___awmod,___awdiv@dividend
 21892  003152  C01A  F020         	movff	?___awmod+1,___awdiv@dividend+1
 21893  003156  ECAA  F031         	call	___awdiv	;wreg free
 21894  00315A  0E09               	movlw	9
 21895  00315C  241F               	addwf	?___awdiv,w,c
 21896  00315E  6E27               	movwf	___wmul@multiplier,c
 21897  003160  0E00               	movlw	0
 21898  003162  2020               	addwfc	?___awdiv+1,w,c
 21899  003164  6E28               	movwf	___wmul@multiplier+1,c
 21900  003166  EC74  F029         	call	___wmul	;wreg free
 21901  00316A  0E72               	movlw	low __npowers_
 21902  00316C  2427               	addwf	?___wmul,w,c
 21903  00316E  6EF6               	movwf	tblptrl,c
 21904  003170  0E7D               	movlw	high __npowers_
 21905  003172  2028               	addwfc	?___wmul+1,w,c
 21906  003174  6EF7               	movwf	tblptrh,c
 21907  003176                     	if	0	;There are less than 3 active tblptr bytes
 21908  003176                     	endif
 21909  003176  0009               	tblrd		*+
 21910  003178  FFFF               	dw	65535	; errata NOP
 21911  00317A  CFF5 F07B          	movff	tablat,___ftmul@f2
 21912  00317E  0009               	tblrd		*+
 21913  003180  FFFF               	dw	65535	; errata NOP
 21914  003182  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21915  003186  000A               	tblrd		*-
 21916  003188  FFFF               	dw	65535	; errata NOP
 21917  00318A  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21918  00318E  0E00               	movlw	0
 21919  003190  6E22               	movwf	___awdiv@divisor+1,c
 21920  003192  0E64               	movlw	100
 21921  003194  6E21               	movwf	___awdiv@divisor,c
 21922  003196  C090  F01F         	movff	fround@prec,___awdiv@dividend
 21923  00319A  6A20               	clrf	___awdiv@dividend+1,c
 21924  00319C  ECAA  F031         	call	___awdiv	;wreg free
 21925  0031A0  0E12               	movlw	18
 21926  0031A2  241F               	addwf	?___awdiv,w,c
 21927  0031A4  6E27               	movwf	___wmul@multiplier,c
 21928  0031A6  0E00               	movlw	0
 21929  0031A8  2020               	addwfc	?___awdiv+1,w,c
 21930  0031AA  6E28               	movwf	___wmul@multiplier+1,c
 21931  0031AC  0E00               	movlw	0
 21932  0031AE  6E2A               	movwf	___wmul@multiplicand+1,c
 21933  0031B0  0E03               	movlw	3
 21934  0031B2  6E29               	movwf	___wmul@multiplicand,c
 21935  0031B4  EC74  F029         	call	___wmul	;wreg free
 21936  0031B8  0E72               	movlw	low __npowers_
 21937  0031BA  2427               	addwf	?___wmul,w,c
 21938  0031BC  6EF6               	movwf	tblptrl,c
 21939  0031BE  0E7D               	movlw	high __npowers_
 21940  0031C0  2028               	addwfc	?___wmul+1,w,c
 21941  0031C2  6EF7               	movwf	tblptrh,c
 21942  0031C4                     	if	0	;There are less than 3 active tblptr bytes
 21943  0031C4                     	endif
 21944  0031C4  0009               	tblrd		*+
 21945  0031C6  FFFF               	dw	65535	; errata NOP
 21946  0031C8  CFF5 F078          	movff	tablat,___ftmul@f1
 21947  0031CC  0009               	tblrd		*+
 21948  0031CE  FFFF               	dw	65535	; errata NOP
 21949  0031D0  CFF5 F079          	movff	tablat,___ftmul@f1+1
 21950  0031D4  000A               	tblrd		*-
 21951  0031D6  FFFF               	dw	65535	; errata NOP
 21952  0031D8  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 21953  0031DC  EC53  F03C         	call	___ftmul	;wreg free
 21954  0031E0  C078  F08D         	movff	?___ftmul,_fround$3546
 21955  0031E4  C079  F08E         	movff	?___ftmul+1,_fround$3546+1
 21956  0031E8  C07A  F08F         	movff	?___ftmul+2,_fround$3546+2
 21957                           
 21958                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 21959  0031EC  0E00               	movlw	0
 21960  0031EE  6E2A               	movwf	___wmul@multiplicand+1,c
 21961  0031F0  0E03               	movlw	3
 21962  0031F2  6E29               	movwf	___wmul@multiplicand,c
 21963  0031F4  0E00               	movlw	0
 21964  0031F6  6E1C               	movwf	___awmod@divisor+1,c
 21965  0031F8  0E0A               	movlw	10
 21966  0031FA  6E1B               	movwf	___awmod@divisor,c
 21967  0031FC  C090  F019         	movff	fround@prec,___awmod@dividend
 21968  003200  6A1A               	clrf	___awmod@dividend+1,c
 21969  003202  EC0D  F030         	call	___awmod	;wreg free
 21970  003206  C019  F027         	movff	?___awmod,___wmul@multiplier
 21971  00320A  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 21972  00320E  EC74  F029         	call	___wmul	;wreg free
 21973  003212  0E72               	movlw	low __npowers_
 21974  003214  2427               	addwf	?___wmul,w,c
 21975  003216  6EF6               	movwf	tblptrl,c
 21976  003218  0E7D               	movlw	high __npowers_
 21977  00321A  2028               	addwfc	?___wmul+1,w,c
 21978  00321C  6EF7               	movwf	tblptrh,c
 21979  00321E                     	if	0	;There are less than 3 active tblptr bytes
 21980  00321E                     	endif
 21981  00321E  0009               	tblrd		*+
 21982  003220  FFFF               	dw	65535	; errata NOP
 21983  003222  CFF5 F07B          	movff	tablat,___ftmul@f2
 21984  003226  0009               	tblrd		*+
 21985  003228  FFFF               	dw	65535	; errata NOP
 21986  00322A  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 21987  00322E  000A               	tblrd		*-
 21988  003230  FFFF               	dw	65535	; errata NOP
 21989  003232  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 21990  003236  C08D  F078         	movff	_fround$3546,___ftmul@f1
 21991  00323A  C08E  F079         	movff	_fround$3546+1,___ftmul@f1+1
 21992  00323E  C08F  F07A         	movff	_fround$3546+2,___ftmul@f1+2
 21993  003242  EC53  F03C         	call	___ftmul	;wreg free
 21994  003246  C078  F08A         	movff	?___ftmul,_fround$3547
 21995  00324A  C079  F08B         	movff	?___ftmul+1,_fround$3547+1
 21996  00324E  C07A  F08C         	movff	?___ftmul+2,_fround$3547+2
 21997                           
 21998                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 21999  003252  C08A  F078         	movff	_fround$3547,___ftmul@f1
 22000  003256  C08B  F079         	movff	_fround$3547+1,___ftmul@f1+1
 22001  00325A  C08C  F07A         	movff	_fround$3547+2,___ftmul@f1+2
 22002  00325E  0E00               	movlw	0
 22003  003260  0100               	movlb	0	; () banked
 22004  003262  6F7B               	movwf	___ftmul@f2& (0+255),b
 22005  003264  0E00               	movlw	0
 22006  003266  0100               	movlb	0	; () banked
 22007  003268  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 22008  00326A  0E3F               	movlw	63
 22009  00326C  0100               	movlb	0	; () banked
 22010  00326E  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 22011  003270  EC53  F03C         	call	___ftmul	;wreg free
 22012  003274  D08C               	goto	L25
 22013  003276                     l1199:
 22014  003276  FFFF               	dw	65535	; assembler added errata NOP
 22015                           
 22016                           ;doprnt.c: 415: else if(prec > 10)
 22017  003278  0E0A               	movlw	10
 22018  00327A  0100               	movlb	0	; () banked
 22019  00327C  6590               	cpfsgt	fround@prec& (0+255),b
 22020  00327E  D066               	goto	l1202
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 22024  003280  0E00               	movlw	0
 22025  003282  6E2A               	movwf	___wmul@multiplicand+1,c
 22026  003284  0E03               	movlw	3
 22027  003286  6E29               	movwf	___wmul@multiplicand,c
 22028  003288  0E00               	movlw	0
 22029  00328A  6E1C               	movwf	___awmod@divisor+1,c
 22030  00328C  0E0A               	movlw	10
 22031  00328E  6E1B               	movwf	___awmod@divisor,c
 22032  003290  C090  F019         	movff	fround@prec,___awmod@dividend
 22033  003294  6A1A               	clrf	___awmod@dividend+1,c
 22034  003296  EC0D  F030         	call	___awmod	;wreg free
 22035  00329A  C019  F027         	movff	?___awmod,___wmul@multiplier
 22036  00329E  C01A  F028         	movff	?___awmod+1,___wmul@multiplier+1
 22037  0032A2  EC74  F029         	call	___wmul	;wreg free
 22038  0032A6  0E72               	movlw	low __npowers_
 22039  0032A8  2427               	addwf	?___wmul,w,c
 22040  0032AA  6EF6               	movwf	tblptrl,c
 22041  0032AC  0E7D               	movlw	high __npowers_
 22042  0032AE  2028               	addwfc	?___wmul+1,w,c
 22043  0032B0  6EF7               	movwf	tblptrh,c
 22044  0032B2                     	if	0	;There are less than 3 active tblptr bytes
 22045  0032B2                     	endif
 22046  0032B2  0009               	tblrd		*+
 22047  0032B4  FFFF               	dw	65535	; errata NOP
 22048  0032B6  CFF5 F07B          	movff	tablat,___ftmul@f2
 22049  0032BA  0009               	tblrd		*+
 22050  0032BC  FFFF               	dw	65535	; errata NOP
 22051  0032BE  CFF5 F07C          	movff	tablat,___ftmul@f2+1
 22052  0032C2  000A               	tblrd		*-
 22053  0032C4  FFFF               	dw	65535	; errata NOP
 22054  0032C6  CFF5 F07D          	movff	tablat,___ftmul@f2+2
 22055  0032CA  0E00               	movlw	0
 22056  0032CC  6E22               	movwf	___awdiv@divisor+1,c
 22057  0032CE  0E0A               	movlw	10
 22058  0032D0  6E21               	movwf	___awdiv@divisor,c
 22059  0032D2  C090  F01F         	movff	fround@prec,___awdiv@dividend
 22060  0032D6  6A20               	clrf	___awdiv@dividend+1,c
 22061  0032D8  ECAA  F031         	call	___awdiv	;wreg free
 22062  0032DC  0E09               	movlw	9
 22063  0032DE  241F               	addwf	?___awdiv,w,c
 22064  0032E0  6E27               	movwf	___wmul@multiplier,c
 22065  0032E2  0E00               	movlw	0
 22066  0032E4  2020               	addwfc	?___awdiv+1,w,c
 22067  0032E6  6E28               	movwf	___wmul@multiplier+1,c
 22068  0032E8  0E00               	movlw	0
 22069  0032EA  6E2A               	movwf	___wmul@multiplicand+1,c
 22070  0032EC  0E03               	movlw	3
 22071  0032EE  6E29               	movwf	___wmul@multiplicand,c
 22072  0032F0  EC74  F029         	call	___wmul	;wreg free
 22073  0032F4  0E72               	movlw	low __npowers_
 22074  0032F6  2427               	addwf	?___wmul,w,c
 22075  0032F8  6EF6               	movwf	tblptrl,c
 22076  0032FA  0E7D               	movlw	high __npowers_
 22077  0032FC  2028               	addwfc	?___wmul+1,w,c
 22078  0032FE  6EF7               	movwf	tblptrh,c
 22079  003300                     	if	0	;There are less than 3 active tblptr bytes
 22080  003300                     	endif
 22081  003300  0009               	tblrd		*+
 22082  003302  FFFF               	dw	65535	; errata NOP
 22083  003304  CFF5 F078          	movff	tablat,___ftmul@f1
 22084  003308  0009               	tblrd		*+
 22085  00330A  FFFF               	dw	65535	; errata NOP
 22086  00330C  CFF5 F079          	movff	tablat,___ftmul@f1+1
 22087  003310  000A               	tblrd		*-
 22088  003312  FFFF               	dw	65535	; errata NOP
 22089  003314  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 22090  003318  EC53  F03C         	call	___ftmul	;wreg free
 22091  00331C  C078  F08D         	movff	?___ftmul,_fround$3546
 22092  003320  C079  F08E         	movff	?___ftmul+1,_fround$3546+1
 22093  003324  C07A  F08F         	movff	?___ftmul+2,_fround$3546+2
 22094                           
 22095                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 22096  003328  C08D  F078         	movff	_fround$3546,___ftmul@f1
 22097  00332C  C08E  F079         	movff	_fround$3546+1,___ftmul@f1+1
 22098  003330  C08F  F07A         	movff	_fround$3546+2,___ftmul@f1+2
 22099  003334  0E00               	movlw	0
 22100  003336  0100               	movlb	0	; () banked
 22101  003338  6F7B               	movwf	___ftmul@f2& (0+255),b
 22102  00333A  0E00               	movlw	0
 22103  00333C  0100               	movlb	0	; () banked
 22104  00333E  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 22105  003340  0E3F               	movlw	63
 22106  003342  0100               	movlb	0	; () banked
 22107  003344  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 22108  003346  EC53  F03C         	call	___ftmul	;wreg free
 22109  00334A  D021               	goto	L25
 22110  00334C                     l1202:
 22111  00334C  FFFF               	dw	65535	; assembler added errata NOP
 22112                           
 22113                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 22114  00334E  0100               	movlb	0	; () banked
 22115  003350  5190               	movf	fround@prec& (0+255),w,b
 22116  003352  0D03               	mullw	3
 22117  003354  0E72               	movlw	low __npowers_
 22118  003356  24F3               	addwf	prodl,w,c
 22119  003358  6EF6               	movwf	tblptrl,c
 22120  00335A  0E7D               	movlw	high __npowers_
 22121  00335C  20F4               	addwfc	prodh,w,c
 22122  00335E  6EF7               	movwf	tblptrh,c
 22123  003360                     	if	0	;There are less than 3 active tblptr bytes
 22124  003360                     	endif
 22125  003360  0009               	tblrd		*+
 22126  003362  FFFF               	dw	65535	; errata NOP
 22127  003364  CFF5 F078          	movff	tablat,___ftmul@f1
 22128  003368  0009               	tblrd		*+
 22129  00336A  FFFF               	dw	65535	; errata NOP
 22130  00336C  CFF5 F079          	movff	tablat,___ftmul@f1+1
 22131  003370  000A               	tblrd		*-
 22132  003372  FFFF               	dw	65535	; errata NOP
 22133  003374  CFF5 F07A          	movff	tablat,___ftmul@f1+2
 22134  003378  0E00               	movlw	0
 22135  00337A  0100               	movlb	0	; () banked
 22136  00337C  6F7B               	movwf	___ftmul@f2& (0+255),b
 22137  00337E  0E00               	movlw	0
 22138  003380  0100               	movlb	0	; () banked
 22139  003382  6F7C               	movwf	(___ftmul@f2+1)& (0+255),b
 22140  003384  0E3F               	movlw	63
 22141  003386  0100               	movlb	0	; () banked
 22142  003388  6F7D               	movwf	(___ftmul@f2+2)& (0+255),b
 22143  00338A  EC53  F03C         	call	___ftmul	;wreg free
 22144  00338E                     L25:
 22145  00338E  FFFF               	dw	65535	; assembler added errata NOP
 22146  003390  C078  F087         	movff	?___ftmul,?_fround
 22147  003394  C079  F088         	movff	?___ftmul+1,?_fround+1
 22148  003398  C07A  F089         	movff	?___ftmul+2,?_fround+2
 22149  00339C  0012               	return		;funcret
 22150  00339E  FFFF               	dw	65535	; errata NOP
 22151  0033A0                     __end_of_fround:
 22152                           	opt stack 0
 22153                           tosu	equ	0xFFF
 22154                           tosh	equ	0xFFE
 22155                           tosl	equ	0xFFD
 22156                           pclath	equ	0xFFA
 22157                           tblptru	equ	0xFF8
 22158                           tblptrh	equ	0xFF7
 22159                           tblptrl	equ	0xFF6
 22160                           tablat	equ	0xFF5
 22161                           prodh	equ	0xFF4
 22162                           prodl	equ	0xFF3
 22163                           intcon	equ	0xFF2
 22164                           postinc0	equ	0xFEE
 22165                           wreg	equ	0xFE8
 22166                           indf1	equ	0xFE7
 22167                           fsr1h	equ	0xFE2
 22168                           fsr1l	equ	0xFE1
 22169                           indf2	equ	0xFDF
 22170                           postinc2	equ	0xFDE
 22171                           postdec2	equ	0xFDD
 22172                           plusw2	equ	0xFDB
 22173                           fsr2h	equ	0xFDA
 22174                           fsr2l	equ	0xFD9
 22175                           status	equ	0xFD8
 22176                           
 22177 ;; *************** function ___wmul *****************
 22178 ;; Defined at:
 22179 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 22180 ;; Parameters:    Size  Location     Type
 22181 ;;  multiplier      2   38[COMRAM] unsigned int 
 22182 ;;  multiplicand    2   40[COMRAM] unsigned int 
 22183 ;; Auto vars:     Size  Location     Type
 22184 ;;  product         2   42[COMRAM] unsigned int 
 22185 ;; Return value:  Size  Location     Type
 22186 ;;                  2   38[COMRAM] unsigned int 
 22187 ;; Registers used:
 22188 ;;		wreg, status,2, status,0, prodl, prodh
 22189 ;; Tracked objects:
 22190 ;;		On entry : 0/0
 22191 ;;		On exit  : 0/0
 22192 ;;		Unchanged: 0/0
 22193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22194 ;;      Params:         4       0       0       0       0       0       0
 22195 ;;      Locals:         2       0       0       0       0       0       0
 22196 ;;      Temps:          0       0       0       0       0       0       0
 22197 ;;      Totals:         6       0       0       0       0       0       0
 22198 ;;Total ram usage:        6 bytes
 22199 ;; Hardware stack levels used:    1
 22200 ;; Hardware stack levels required when called:    1
 22201 ;; This function calls:
 22202 ;;		Nothing
 22203 ;; This function is called by:
 22204 ;;		_bcdTOint
 22205 ;;		_intTObcd
 22206 ;;		_fround
 22207 ;;		_scale
 22208 ;;		__doprnt
 22209 ;;		_atoi
 22210 ;;		_months_to_days
 22211 ;;		_asctime
 22212 ;; This function uses a non-reentrant model
 22213 ;;
 22214                           
 22215                           	psect	text123
 22216  0052E8                     __ptext123:
 22217                           	opt stack 0
 22218  0052E8                     ___wmul:
 22219                           	opt stack 0
 22220  0052E8  FFFF               	dw	65535	; assembler added errata NOP
 22221                           
 22222                           ;incstack = 0
 22223  0052EA  5027               	movf	___wmul@multiplier,w,c
 22224  0052EC  0229               	mulwf	___wmul@multiplicand,c
 22225  0052EE  CFF3 F02B          	movff	prodl,___wmul@product
 22226  0052F2  CFF4 F02C          	movff	prodh,___wmul@product+1
 22227  0052F6  5027               	movf	___wmul@multiplier,w,c
 22228  0052F8  022A               	mulwf	___wmul@multiplicand+1,c
 22229  0052FA  50F3               	movf	prodl,w,c
 22230  0052FC  262C               	addwf	___wmul@product+1,f,c
 22231  0052FE  5028               	movf	___wmul@multiplier+1,w,c
 22232  005300  0229               	mulwf	___wmul@multiplicand,c
 22233  005302  50F3               	movf	prodl,w,c
 22234  005304  262C               	addwf	___wmul@product+1,f,c
 22235  005306  C02B  F027         	movff	___wmul@product,?___wmul
 22236  00530A  C02C  F028         	movff	___wmul@product+1,?___wmul+1
 22237  00530E  0012               	return		;funcret
 22238  005310  FFFF               	dw	65535	; errata NOP
 22239  005312                     __end_of___wmul:
 22240                           	opt stack 0
 22241                           tosu	equ	0xFFF
 22242                           tosh	equ	0xFFE
 22243                           tosl	equ	0xFFD
 22244                           pclath	equ	0xFFA
 22245                           tblptru	equ	0xFF8
 22246                           tblptrh	equ	0xFF7
 22247                           tblptrl	equ	0xFF6
 22248                           tablat	equ	0xFF5
 22249                           prodh	equ	0xFF4
 22250                           prodl	equ	0xFF3
 22251                           intcon	equ	0xFF2
 22252                           postinc0	equ	0xFEE
 22253                           wreg	equ	0xFE8
 22254                           indf1	equ	0xFE7
 22255                           fsr1h	equ	0xFE2
 22256                           fsr1l	equ	0xFE1
 22257                           indf2	equ	0xFDF
 22258                           postinc2	equ	0xFDE
 22259                           postdec2	equ	0xFDD
 22260                           plusw2	equ	0xFDB
 22261                           fsr2h	equ	0xFDA
 22262                           fsr2l	equ	0xFD9
 22263                           status	equ	0xFD8
 22264                           
 22265 ;; *************** function ___awmod *****************
 22266 ;; Defined at:
 22267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 22268 ;; Parameters:    Size  Location     Type
 22269 ;;  dividend        2   24[COMRAM] int 
 22270 ;;  divisor         2   26[COMRAM] int 
 22271 ;; Auto vars:     Size  Location     Type
 22272 ;;  sign            1   29[COMRAM] unsigned char 
 22273 ;;  counter         1   28[COMRAM] unsigned char 
 22274 ;; Return value:  Size  Location     Type
 22275 ;;                  2   24[COMRAM] int 
 22276 ;; Registers used:
 22277 ;;		wreg, status,2, status,0
 22278 ;; Tracked objects:
 22279 ;;		On entry : 0/0
 22280 ;;		On exit  : 0/0
 22281 ;;		Unchanged: 0/0
 22282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22283 ;;      Params:         4       0       0       0       0       0       0
 22284 ;;      Locals:         2       0       0       0       0       0       0
 22285 ;;      Temps:          0       0       0       0       0       0       0
 22286 ;;      Totals:         6       0       0       0       0       0       0
 22287 ;;Total ram usage:        6 bytes
 22288 ;; Hardware stack levels used:    1
 22289 ;; Hardware stack levels required when called:    1
 22290 ;; This function calls:
 22291 ;;		Nothing
 22292 ;; This function is called by:
 22293 ;;		_intTObcd
 22294 ;;		_fround
 22295 ;;		_scale
 22296 ;;		_gmtime
 22297 ;;		_put2d
 22298 ;;		_asctime
 22299 ;; This function uses a non-reentrant model
 22300 ;;
 22301                           
 22302                           	psect	text124
 22303  00601A                     __ptext124:
 22304                           	opt stack 0
 22305  00601A                     ___awmod:
 22306                           	opt stack 0
 22307  00601A  FFFF               	dw	65535	; assembler added errata NOP
 22308                           
 22309                           ;incstack = 0
 22310  00601C  0E00               	movlw	0
 22311  00601E  6E1E               	movwf	___awmod@sign,c
 22312  006020  AE1A               	btfss	___awmod@dividend+1,7,c
 22313  006022  D006               	goto	l1568
 22314  006024  6C19               	negf	___awmod@dividend,c
 22315  006026  1E1A               	comf	___awmod@dividend+1,f,c
 22316  006028  B0D8               	btfsc	status,0,c
 22317  00602A  2A1A               	incf	___awmod@dividend+1,f,c
 22318  00602C  0E01               	movlw	1
 22319  00602E  6E1E               	movwf	___awmod@sign,c
 22320  006030                     l1568:
 22321  006030  FFFF               	dw	65535	; assembler added errata NOP
 22322  006032  AE1C               	btfss	___awmod@divisor+1,7,c
 22323  006034  D004               	goto	l1569
 22324  006036  6C1B               	negf	___awmod@divisor,c
 22325  006038  1E1C               	comf	___awmod@divisor+1,f,c
 22326  00603A  B0D8               	btfsc	status,0,c
 22327  00603C  2A1C               	incf	___awmod@divisor+1,f,c
 22328  00603E                     l1569:
 22329  00603E  FFFF               	dw	65535	; assembler added errata NOP
 22330  006040  501B               	movf	___awmod@divisor,w,c
 22331  006042  101C               	iorwf	___awmod@divisor+1,w,c
 22332  006044  B4D8               	btfsc	status,2,c
 22333  006046  D01C               	goto	l1576
 22334  006048  0E01               	movlw	1
 22335  00604A  6E1D               	movwf	___awmod@counter,c
 22336  00604C  D005               	goto	l1571
 22337  00604E  FFFF               	dw	65535	; assembler added errata NOP
 22338  006050  90D8               	bcf	status,0,c
 22339  006052  361B               	rlcf	___awmod@divisor,f,c
 22340  006054  361C               	rlcf	___awmod@divisor+1,f,c
 22341  006056  2A1D               	incf	___awmod@counter,f,c
 22342  006058                     l1571:
 22343  006058  FFFF               	dw	65535	; assembler added errata NOP
 22344  00605A  AE1C               	btfss	___awmod@divisor+1,7,c
 22345  00605C  D7F8               	goto	l1572
 22346  00605E                     u8410:
 22347  00605E  FFFF               	dw	65535	; assembler added errata NOP
 22348  006060  501B               	movf	___awmod@divisor,w,c
 22349  006062  5C19               	subwf	___awmod@dividend,w,c
 22350  006064  501C               	movf	___awmod@divisor+1,w,c
 22351  006066  581A               	subwfb	___awmod@dividend+1,w,c
 22352  006068  A0D8               	btfss	status,0,c
 22353  00606A  D004               	goto	l1575
 22354  00606C  501B               	movf	___awmod@divisor,w,c
 22355  00606E  5E19               	subwf	___awmod@dividend,f,c
 22356  006070  501C               	movf	___awmod@divisor+1,w,c
 22357  006072  5A1A               	subwfb	___awmod@dividend+1,f,c
 22358  006074                     l1575:
 22359  006074  FFFF               	dw	65535	; assembler added errata NOP
 22360  006076  90D8               	bcf	status,0,c
 22361  006078  321C               	rrcf	___awmod@divisor+1,f,c
 22362  00607A  321B               	rrcf	___awmod@divisor,f,c
 22363  00607C  2E1D               	decfsz	___awmod@counter,f,c
 22364  00607E  D7EF               	goto	u8410
 22365  006080                     l1576:
 22366  006080  FFFF               	dw	65535	; assembler added errata NOP
 22367  006082  501E               	movf	___awmod@sign,w,c
 22368  006084  B4D8               	btfsc	status,2,c
 22369  006086  D004               	goto	l1577
 22370  006088  6C19               	negf	___awmod@dividend,c
 22371  00608A  1E1A               	comf	___awmod@dividend+1,f,c
 22372  00608C  B0D8               	btfsc	status,0,c
 22373  00608E  2A1A               	incf	___awmod@dividend+1,f,c
 22374  006090                     l1577:
 22375  006090  FFFF               	dw	65535	; assembler added errata NOP
 22376  006092  C019  F019         	movff	___awmod@dividend,?___awmod
 22377  006096  C01A  F01A         	movff	___awmod@dividend+1,?___awmod+1
 22378  00609A  0012               	return		;funcret
 22379  00609C  FFFF               	dw	65535	; errata NOP
 22380  00609E                     __end_of___awmod:
 22381                           	opt stack 0
 22382                           tosu	equ	0xFFF
 22383                           tosh	equ	0xFFE
 22384                           tosl	equ	0xFFD
 22385                           pclath	equ	0xFFA
 22386                           tblptru	equ	0xFF8
 22387                           tblptrh	equ	0xFF7
 22388                           tblptrl	equ	0xFF6
 22389                           tablat	equ	0xFF5
 22390                           prodh	equ	0xFF4
 22391                           prodl	equ	0xFF3
 22392                           intcon	equ	0xFF2
 22393                           postinc0	equ	0xFEE
 22394                           wreg	equ	0xFE8
 22395                           indf1	equ	0xFE7
 22396                           fsr1h	equ	0xFE2
 22397                           fsr1l	equ	0xFE1
 22398                           indf2	equ	0xFDF
 22399                           postinc2	equ	0xFDE
 22400                           postdec2	equ	0xFDD
 22401                           plusw2	equ	0xFDB
 22402                           fsr2h	equ	0xFDA
 22403                           fsr2l	equ	0xFD9
 22404                           status	equ	0xFD8
 22405                           
 22406 ;; *************** function ___awdiv *****************
 22407 ;; Defined at:
 22408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 22409 ;; Parameters:    Size  Location     Type
 22410 ;;  dividend        2   30[COMRAM] int 
 22411 ;;  divisor         2   32[COMRAM] int 
 22412 ;; Auto vars:     Size  Location     Type
 22413 ;;  quotient        2   36[COMRAM] int 
 22414 ;;  sign            1   35[COMRAM] unsigned char 
 22415 ;;  counter         1   34[COMRAM] unsigned char 
 22416 ;; Return value:  Size  Location     Type
 22417 ;;                  2   30[COMRAM] int 
 22418 ;; Registers used:
 22419 ;;		wreg, status,2, status,0
 22420 ;; Tracked objects:
 22421 ;;		On entry : 0/0
 22422 ;;		On exit  : 0/0
 22423 ;;		Unchanged: 0/0
 22424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22425 ;;      Params:         4       0       0       0       0       0       0
 22426 ;;      Locals:         4       0       0       0       0       0       0
 22427 ;;      Temps:          0       0       0       0       0       0       0
 22428 ;;      Totals:         8       0       0       0       0       0       0
 22429 ;;Total ram usage:        8 bytes
 22430 ;; Hardware stack levels used:    1
 22431 ;; Hardware stack levels required when called:    1
 22432 ;; This function calls:
 22433 ;;		Nothing
 22434 ;; This function is called by:
 22435 ;;		_intTObcd
 22436 ;;		_fround
 22437 ;;		_scale
 22438 ;;		__doprnt
 22439 ;;		_asctime
 22440 ;; This function uses a non-reentrant model
 22441 ;;
 22442                           
 22443                           	psect	text125
 22444  006354                     __ptext125:
 22445                           	opt stack 0
 22446  006354                     ___awdiv:
 22447                           	opt stack 0
 22448  006354  FFFF               	dw	65535	; assembler added errata NOP
 22449                           
 22450                           ;incstack = 0
 22451  006356  0E00               	movlw	0
 22452  006358  6E24               	movwf	___awdiv@sign,c
 22453  00635A  AE22               	btfss	___awdiv@divisor+1,7,c
 22454  00635C  D006               	goto	l1555
 22455  00635E  6C21               	negf	___awdiv@divisor,c
 22456  006360  1E22               	comf	___awdiv@divisor+1,f,c
 22457  006362  B0D8               	btfsc	status,0,c
 22458  006364  2A22               	incf	___awdiv@divisor+1,f,c
 22459  006366  0E01               	movlw	1
 22460  006368  6E24               	movwf	___awdiv@sign,c
 22461  00636A                     l1555:
 22462  00636A  FFFF               	dw	65535	; assembler added errata NOP
 22463  00636C  AE20               	btfss	___awdiv@dividend+1,7,c
 22464  00636E  D006               	goto	l1556
 22465  006370  6C1F               	negf	___awdiv@dividend,c
 22466  006372  1E20               	comf	___awdiv@dividend+1,f,c
 22467  006374  B0D8               	btfsc	status,0,c
 22468  006376  2A20               	incf	___awdiv@dividend+1,f,c
 22469  006378  0E01               	movlw	1
 22470  00637A  1A24               	xorwf	___awdiv@sign,f,c
 22471  00637C                     l1556:
 22472  00637C  FFFF               	dw	65535	; assembler added errata NOP
 22473  00637E  0E00               	movlw	0
 22474  006380  6E26               	movwf	___awdiv@quotient+1,c
 22475  006382  0E00               	movlw	0
 22476  006384  6E25               	movwf	___awdiv@quotient,c
 22477  006386  5021               	movf	___awdiv@divisor,w,c
 22478  006388  1022               	iorwf	___awdiv@divisor+1,w,c
 22479  00638A  B4D8               	btfsc	status,2,c
 22480  00638C  D020               	goto	l1563
 22481  00638E  0E01               	movlw	1
 22482  006390  6E23               	movwf	___awdiv@counter,c
 22483  006392  D005               	goto	l1558
 22484  006394  FFFF               	dw	65535	; assembler added errata NOP
 22485  006396  90D8               	bcf	status,0,c
 22486  006398  3621               	rlcf	___awdiv@divisor,f,c
 22487  00639A  3622               	rlcf	___awdiv@divisor+1,f,c
 22488  00639C  2A23               	incf	___awdiv@counter,f,c
 22489  00639E                     l1558:
 22490  00639E  FFFF               	dw	65535	; assembler added errata NOP
 22491  0063A0  AE22               	btfss	___awdiv@divisor+1,7,c
 22492  0063A2  D7F8               	goto	l1559
 22493  0063A4                     u8350:
 22494  0063A4  FFFF               	dw	65535	; assembler added errata NOP
 22495  0063A6  90D8               	bcf	status,0,c
 22496  0063A8  3625               	rlcf	___awdiv@quotient,f,c
 22497  0063AA  3626               	rlcf	___awdiv@quotient+1,f,c
 22498  0063AC  5021               	movf	___awdiv@divisor,w,c
 22499  0063AE  5C1F               	subwf	___awdiv@dividend,w,c
 22500  0063B0  5022               	movf	___awdiv@divisor+1,w,c
 22501  0063B2  5820               	subwfb	___awdiv@dividend+1,w,c
 22502  0063B4  A0D8               	btfss	status,0,c
 22503  0063B6  D005               	goto	l1562
 22504  0063B8  5021               	movf	___awdiv@divisor,w,c
 22505  0063BA  5E1F               	subwf	___awdiv@dividend,f,c
 22506  0063BC  5022               	movf	___awdiv@divisor+1,w,c
 22507  0063BE  5A20               	subwfb	___awdiv@dividend+1,f,c
 22508  0063C0  8025               	bsf	___awdiv@quotient,0,c
 22509  0063C2                     l1562:
 22510  0063C2  FFFF               	dw	65535	; assembler added errata NOP
 22511  0063C4  90D8               	bcf	status,0,c
 22512  0063C6  3222               	rrcf	___awdiv@divisor+1,f,c
 22513  0063C8  3221               	rrcf	___awdiv@divisor,f,c
 22514  0063CA  2E23               	decfsz	___awdiv@counter,f,c
 22515  0063CC  D7EB               	goto	u8350
 22516  0063CE                     l1563:
 22517  0063CE  FFFF               	dw	65535	; assembler added errata NOP
 22518  0063D0  5024               	movf	___awdiv@sign,w,c
 22519  0063D2  B4D8               	btfsc	status,2,c
 22520  0063D4  D004               	goto	l1564
 22521  0063D6  6C25               	negf	___awdiv@quotient,c
 22522  0063D8  1E26               	comf	___awdiv@quotient+1,f,c
 22523  0063DA  B0D8               	btfsc	status,0,c
 22524  0063DC  2A26               	incf	___awdiv@quotient+1,f,c
 22525  0063DE                     l1564:
 22526  0063DE  FFFF               	dw	65535	; assembler added errata NOP
 22527  0063E0  C025  F01F         	movff	___awdiv@quotient,?___awdiv
 22528  0063E4  C026  F020         	movff	___awdiv@quotient+1,?___awdiv+1
 22529  0063E8  0012               	return		;funcret
 22530  0063EA  FFFF               	dw	65535	; errata NOP
 22531  0063EC                     __end_of___awdiv:
 22532                           	opt stack 0
 22533                           tosu	equ	0xFFF
 22534                           tosh	equ	0xFFE
 22535                           tosl	equ	0xFFD
 22536                           pclath	equ	0xFFA
 22537                           tblptru	equ	0xFF8
 22538                           tblptrh	equ	0xFF7
 22539                           tblptrl	equ	0xFF6
 22540                           tablat	equ	0xFF5
 22541                           prodh	equ	0xFF4
 22542                           prodl	equ	0xFF3
 22543                           intcon	equ	0xFF2
 22544                           postinc0	equ	0xFEE
 22545                           wreg	equ	0xFE8
 22546                           indf1	equ	0xFE7
 22547                           fsr1h	equ	0xFE2
 22548                           fsr1l	equ	0xFE1
 22549                           indf2	equ	0xFDF
 22550                           postinc2	equ	0xFDE
 22551                           postdec2	equ	0xFDD
 22552                           plusw2	equ	0xFDB
 22553                           fsr2h	equ	0xFDA
 22554                           fsr2l	equ	0xFD9
 22555                           status	equ	0xFD8
 22556                           
 22557 ;; *************** function __tdiv_to_l_ *****************
 22558 ;; Defined at:
 22559 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 22560 ;; Parameters:    Size  Location     Type
 22561 ;;  f1              3   24[COMRAM] float 
 22562 ;;  f2              3   27[COMRAM] float 
 22563 ;; Auto vars:     Size  Location     Type
 22564 ;;  quot            4   33[COMRAM] unsigned long 
 22565 ;;  exp1            1   38[COMRAM] unsigned char 
 22566 ;;  cntr            1   37[COMRAM] unsigned char 
 22567 ;; Return value:  Size  Location     Type
 22568 ;;                  4   24[COMRAM] unsigned long 
 22569 ;; Registers used:
 22570 ;;		wreg, status,2, status,0
 22571 ;; Tracked objects:
 22572 ;;		On entry : 0/0
 22573 ;;		On exit  : 0/0
 22574 ;;		Unchanged: 0/0
 22575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22576 ;;      Params:         6       0       0       0       0       0       0
 22577 ;;      Locals:         6       0       0       0       0       0       0
 22578 ;;      Temps:          3       0       0       0       0       0       0
 22579 ;;      Totals:        15       0       0       0       0       0       0
 22580 ;;Total ram usage:       15 bytes
 22581 ;; Hardware stack levels used:    1
 22582 ;; Hardware stack levels required when called:    1
 22583 ;; This function calls:
 22584 ;;		Nothing
 22585 ;; This function is called by:
 22586 ;;		__doprnt
 22587 ;; This function uses a non-reentrant model
 22588 ;;
 22589                           
 22590                           	psect	text126
 22591  003EE2                     __ptext126:
 22592                           	opt stack 0
 22593  003EE2                     __tdiv_to_l_:
 22594                           	opt stack 0
 22595  003EE2  FFFF               	dw	65535	; assembler added errata NOP
 22596                           
 22597                           ;incstack = 0
 22598  003EE4  C01B  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 22599  003EE8  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 22600  003EEA  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 22601  003EEC  341A               	rlcf	__tdiv_to_l_@f1+1,w,c
 22602  003EEE  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 22603  003EF0  E301               	bnc	u8691
 22604  003EF2  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 22605  003EF4                     u8691:
 22606  003EF4  501F               	movf	??__tdiv_to_l_,w,c
 22607  003EF6  6E27               	movwf	__tdiv_to_l_@exp1,c
 22608  003EF8  5027               	movf	__tdiv_to_l_@exp1,w,c
 22609  003EFA  B4D8               	btfsc	status,2,c
 22610  003EFC  D05A               	goto	u8760
 22611  003EFE  C01E  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 22612  003F02  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 22613  003F04  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 22614  003F06  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
 22615  003F08  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
 22616  003F0A  E301               	bnc	u8711
 22617  003F0C  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 22618  003F0E                     u8711:
 22619  003F0E  501F               	movf	??__tdiv_to_l_,w,c
 22620  003F10  6E26               	movwf	__tdiv_to_l_@cntr,c
 22621  003F12  5026               	movf	__tdiv_to_l_@cntr,w,c
 22622  003F14  B4D8               	btfsc	status,2,c
 22623  003F16  D04D               	goto	u8760
 22624  003F18  8E1A               	bsf	__tdiv_to_l_@f1+1,7,c
 22625  003F1A  0EFF               	movlw	255
 22626  003F1C  1619               	andwf	__tdiv_to_l_@f1,f,c
 22627  003F1E  0EFF               	movlw	255
 22628  003F20  161A               	andwf	__tdiv_to_l_@f1+1,f,c
 22629  003F22  0E00               	movlw	0
 22630  003F24  161B               	andwf	__tdiv_to_l_@f1+2,f,c
 22631  003F26  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
 22632  003F28  0EFF               	movlw	255
 22633  003F2A  161C               	andwf	__tdiv_to_l_@f2,f,c
 22634  003F2C  0EFF               	movlw	255
 22635  003F2E  161D               	andwf	__tdiv_to_l_@f2+1,f,c
 22636  003F30  0E00               	movlw	0
 22637  003F32  161E               	andwf	__tdiv_to_l_@f2+2,f,c
 22638  003F34  0E00               	movlw	0
 22639  003F36  6E22               	movwf	__tdiv_to_l_@quot,c
 22640  003F38  0E00               	movlw	0
 22641  003F3A  6E23               	movwf	__tdiv_to_l_@quot+1,c
 22642  003F3C  0E00               	movlw	0
 22643  003F3E  6E24               	movwf	__tdiv_to_l_@quot+2,c
 22644  003F40  0E00               	movlw	0
 22645  003F42  6E25               	movwf	__tdiv_to_l_@quot+3,c
 22646  003F44  0E7F               	movlw	127
 22647  003F46  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 22648  003F48  5026               	movf	__tdiv_to_l_@cntr,w,c
 22649  003F4A  0F98               	addlw	152
 22650  003F4C  5E27               	subwf	__tdiv_to_l_@exp1,f,c
 22651  003F4E  0E18               	movlw	24
 22652  003F50  6E26               	movwf	__tdiv_to_l_@cntr,c
 22653  003F52                     l1725:
 22654  003F52  FFFF               	dw	65535	; assembler added errata NOP
 22655  003F54  90D8               	bcf	status,0,c
 22656  003F56  3622               	rlcf	__tdiv_to_l_@quot,f,c
 22657  003F58  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 22658  003F5A  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 22659  003F5C  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 22660  003F5E  501C               	movf	__tdiv_to_l_@f2,w,c
 22661  003F60  5C19               	subwf	__tdiv_to_l_@f1,w,c
 22662  003F62  501D               	movf	__tdiv_to_l_@f2+1,w,c
 22663  003F64  581A               	subwfb	__tdiv_to_l_@f1+1,w,c
 22664  003F66  501E               	movf	__tdiv_to_l_@f2+2,w,c
 22665  003F68  581B               	subwfb	__tdiv_to_l_@f1+2,w,c
 22666  003F6A  A0D8               	btfss	status,0,c
 22667  003F6C  D007               	goto	l1726
 22668  003F6E  501C               	movf	__tdiv_to_l_@f2,w,c
 22669  003F70  5E19               	subwf	__tdiv_to_l_@f1,f,c
 22670  003F72  501D               	movf	__tdiv_to_l_@f2+1,w,c
 22671  003F74  5A1A               	subwfb	__tdiv_to_l_@f1+1,f,c
 22672  003F76  501E               	movf	__tdiv_to_l_@f2+2,w,c
 22673  003F78  5A1B               	subwfb	__tdiv_to_l_@f1+2,f,c
 22674  003F7A  8022               	bsf	__tdiv_to_l_@quot,0,c
 22675  003F7C                     l1726:
 22676  003F7C  FFFF               	dw	65535	; assembler added errata NOP
 22677  003F7E  90D8               	bcf	status,0,c
 22678  003F80  3619               	rlcf	__tdiv_to_l_@f1,f,c
 22679  003F82  361A               	rlcf	__tdiv_to_l_@f1+1,f,c
 22680  003F84  361B               	rlcf	__tdiv_to_l_@f1+2,f,c
 22681  003F86  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
 22682  003F88  D7E4               	goto	l1725
 22683  003F8A  AE27               	btfss	__tdiv_to_l_@exp1,7,c
 22684  003F8C  D00E               	goto	l1728
 22685  003F8E  5027               	movf	__tdiv_to_l_@exp1,w,c
 22686  003F90  0A80               	xorlw	128
 22687  003F92  0F97               	addlw	151
 22688  003F94  A0D8               	btfss	status,0,c
 22689  003F96  D00D               	goto	u8760
 22690  003F98  FFFF               	dw	65535	; assembler added errata NOP
 22691  003F9A  90D8               	bcf	status,0,c
 22692  003F9C  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
 22693  003F9E  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
 22694  003FA0  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
 22695  003FA2  3222               	rrcf	__tdiv_to_l_@quot,f,c
 22696  003FA4  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
 22697  003FA6  D7F8               	goto	l1729
 22698  003FA8  D019               	goto	u8770
 22699  003FAA                     l1728:
 22700  003FAA  FFFF               	dw	65535	; assembler added errata NOP
 22701  003FAC  0E17               	movlw	23
 22702  003FAE  6427               	cpfsgt	__tdiv_to_l_@exp1,c
 22703  003FB0  D011               	goto	l1734
 22704  003FB2                     u8760:
 22705  003FB2  FFFF               	dw	65535	; assembler added errata NOP
 22706  003FB4  0E00               	movlw	0
 22707  003FB6  6E19               	movwf	?__tdiv_to_l_,c
 22708  003FB8  0E00               	movlw	0
 22709  003FBA  6E1A               	movwf	?__tdiv_to_l_+1,c
 22710  003FBC  0E00               	movlw	0
 22711  003FBE  6E1B               	movwf	?__tdiv_to_l_+2,c
 22712  003FC0  0E00               	movlw	0
 22713  003FC2  6E1C               	movwf	?__tdiv_to_l_+3,c
 22714  003FC4  D014               	goto	l1723
 22715  003FC6  FFFF               	dw	65535	; assembler added errata NOP
 22716  003FC8  90D8               	bcf	status,0,c
 22717  003FCA  3622               	rlcf	__tdiv_to_l_@quot,f,c
 22718  003FCC  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
 22719  003FCE  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
 22720  003FD0  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
 22721  003FD2  0627               	decf	__tdiv_to_l_@exp1,f,c
 22722  003FD4                     l1734:
 22723  003FD4  FFFF               	dw	65535	; assembler added errata NOP
 22724  003FD6  5027               	movf	__tdiv_to_l_@exp1,w,c
 22725  003FD8  A4D8               	btfss	status,2,c
 22726  003FDA  D7F5               	goto	l1735
 22727  003FDC                     u8770:
 22728  003FDC  FFFF               	dw	65535	; assembler added errata NOP
 22729  003FDE  C022  F019         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 22730  003FE2  C023  F01A         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 22731  003FE6  C024  F01B         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 22732  003FEA  C025  F01C         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 22733  003FEE                     l1723:
 22734  003FEE  FFFF               	dw	65535	; assembler added errata NOP
 22735  003FF0  0012               	return		;funcret
 22736  003FF2  FFFF               	dw	65535	; errata NOP
 22737  003FF4                     __end_of__tdiv_to_l_:
 22738                           	opt stack 0
 22739                           tosu	equ	0xFFF
 22740                           tosh	equ	0xFFE
 22741                           tosl	equ	0xFFD
 22742                           pclath	equ	0xFFA
 22743                           tblptru	equ	0xFF8
 22744                           tblptrh	equ	0xFF7
 22745                           tblptrl	equ	0xFF6
 22746                           tablat	equ	0xFF5
 22747                           prodh	equ	0xFF4
 22748                           prodl	equ	0xFF3
 22749                           intcon	equ	0xFF2
 22750                           postinc0	equ	0xFEE
 22751                           wreg	equ	0xFE8
 22752                           indf1	equ	0xFE7
 22753                           fsr1h	equ	0xFE2
 22754                           fsr1l	equ	0xFE1
 22755                           indf2	equ	0xFDF
 22756                           postinc2	equ	0xFDE
 22757                           postdec2	equ	0xFDD
 22758                           plusw2	equ	0xFDB
 22759                           fsr2h	equ	0xFDA
 22760                           fsr2l	equ	0xFD9
 22761                           status	equ	0xFD8
 22762                           
 22763 ;; *************** function __div_to_l_ *****************
 22764 ;; Defined at:
 22765 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 22766 ;; Parameters:    Size  Location     Type
 22767 ;;  f1              3   24[COMRAM] unsigned long 
 22768 ;;  f2              3   27[COMRAM] unsigned long 
 22769 ;; Auto vars:     Size  Location     Type
 22770 ;;  quot            4   30[COMRAM] unsigned long 
 22771 ;;  exp1            1   35[COMRAM] unsigned char 
 22772 ;;  cntr            1   34[COMRAM] unsigned char 
 22773 ;; Return value:  Size  Location     Type
 22774 ;;                  4   24[COMRAM] unsigned long 
 22775 ;; Registers used:
 22776 ;;		wreg, status,2, status,0
 22777 ;; Tracked objects:
 22778 ;;		On entry : 0/0
 22779 ;;		On exit  : 0/0
 22780 ;;		Unchanged: 0/0
 22781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22782 ;;      Params:         6       0       0       0       0       0       0
 22783 ;;      Locals:         6       0       0       0       0       0       0
 22784 ;;      Temps:          0       0       0       0       0       0       0
 22785 ;;      Totals:        12       0       0       0       0       0       0
 22786 ;;Total ram usage:       12 bytes
 22787 ;; Hardware stack levels used:    1
 22788 ;; Hardware stack levels required when called:    1
 22789 ;; This function calls:
 22790 ;;		Nothing
 22791 ;; This function is called by:
 22792 ;;		__doprnt
 22793 ;; This function uses a non-reentrant model
 22794 ;;
 22795                           
 22796                           	psect	text127
 22797  00719C                     __ptext127:
 22798                           	opt stack 0
 22799  00719C                     __div_to_l_:
 22800                           	opt stack 0
 22801  00719C  FFFF               	dw	65535	; assembler added errata NOP
 22802                           
 22803                           ;incstack = 0
 22804  00719E  341B               	rlcf	__div_to_l_@f1+2,w,c
 22805  0071A0  341C               	rlcf	__div_to_l_@f1+3,w,c
 22806  0071A2  6E24               	movwf	__div_to_l_@exp1,c
 22807  0071A4  5024               	movf	__div_to_l_@exp1,w,c
 22808  0071A6  B4D8               	btfsc	status,2,c
 22809  0071A8  D05C               	goto	u8830
 22810  0071AA  341E               	rlcf	__div_to_l_@f2+2,w,c
 22811  0071AC  341F               	rlcf	__div_to_l_@f2+3,w,c
 22812  0071AE  6E23               	movwf	__div_to_l_@cntr,c
 22813  0071B0  5023               	movf	__div_to_l_@cntr,w,c
 22814  0071B2  B4D8               	btfsc	status,2,c
 22815  0071B4  D056               	goto	u8830
 22816  0071B6  8E1B               	bsf	__div_to_l_@f1+2,7,c
 22817  0071B8  0EFF               	movlw	255
 22818  0071BA  1619               	andwf	__div_to_l_@f1,f,c
 22819  0071BC  0EFF               	movlw	255
 22820  0071BE  161A               	andwf	__div_to_l_@f1+1,f,c
 22821  0071C0  0EFF               	movlw	255
 22822  0071C2  161B               	andwf	__div_to_l_@f1+2,f,c
 22823  0071C4  0E00               	movlw	0
 22824  0071C6  161C               	andwf	__div_to_l_@f1+3,f,c
 22825  0071C8  8E1E               	bsf	__div_to_l_@f2+2,7,c
 22826  0071CA  0EFF               	movlw	255
 22827  0071CC  161C               	andwf	__div_to_l_@f2,f,c
 22828  0071CE  0EFF               	movlw	255
 22829  0071D0  161D               	andwf	__div_to_l_@f2+1,f,c
 22830  0071D2  0EFF               	movlw	255
 22831  0071D4  161E               	andwf	__div_to_l_@f2+2,f,c
 22832  0071D6  0E00               	movlw	0
 22833  0071D8  161F               	andwf	__div_to_l_@f2+3,f,c
 22834  0071DA  0E00               	movlw	0
 22835  0071DC  6E1F               	movwf	__div_to_l_@quot,c
 22836  0071DE  0E00               	movlw	0
 22837  0071E0  6E20               	movwf	__div_to_l_@quot+1,c
 22838  0071E2  0E00               	movlw	0
 22839  0071E4  6E21               	movwf	__div_to_l_@quot+2,c
 22840  0071E6  0E00               	movlw	0
 22841  0071E8  6E22               	movwf	__div_to_l_@quot+3,c
 22842  0071EA  0E7F               	movlw	127
 22843  0071EC  5E24               	subwf	__div_to_l_@exp1,f,c
 22844  0071EE  5023               	movf	__div_to_l_@cntr,w,c
 22845  0071F0  0FA0               	addlw	160
 22846  0071F2  5E24               	subwf	__div_to_l_@exp1,f,c
 22847  0071F4  0E20               	movlw	32
 22848  0071F6  6E23               	movwf	__div_to_l_@cntr,c
 22849  0071F8  FFFF               	dw	65535	; assembler added errata NOP
 22850  0071FA  90D8               	bcf	status,0,c
 22851  0071FC  361F               	rlcf	__div_to_l_@quot,f,c
 22852  0071FE  3620               	rlcf	__div_to_l_@quot+1,f,c
 22853  007200  3621               	rlcf	__div_to_l_@quot+2,f,c
 22854  007202  3622               	rlcf	__div_to_l_@quot+3,f,c
 22855  007204  501C               	movf	__div_to_l_@f2,w,c
 22856  007206  5C19               	subwf	__div_to_l_@f1,w,c
 22857  007208  501D               	movf	__div_to_l_@f2+1,w,c
 22858  00720A  581A               	subwfb	__div_to_l_@f1+1,w,c
 22859  00720C  501E               	movf	__div_to_l_@f2+2,w,c
 22860  00720E  581B               	subwfb	__div_to_l_@f1+2,w,c
 22861  007210  501F               	movf	__div_to_l_@f2+3,w,c
 22862  007212  581C               	subwfb	__div_to_l_@f1+3,w,c
 22863  007214  A0D8               	btfss	status,0,c
 22864  007216  D009               	goto	l1622
 22865  007218  501C               	movf	__div_to_l_@f2,w,c
 22866  00721A  5E19               	subwf	__div_to_l_@f1,f,c
 22867  00721C  501D               	movf	__div_to_l_@f2+1,w,c
 22868  00721E  5A1A               	subwfb	__div_to_l_@f1+1,f,c
 22869  007220  501E               	movf	__div_to_l_@f2+2,w,c
 22870  007222  5A1B               	subwfb	__div_to_l_@f1+2,f,c
 22871  007224  501F               	movf	__div_to_l_@f2+3,w,c
 22872  007226  5A1C               	subwfb	__div_to_l_@f1+3,f,c
 22873  007228  801F               	bsf	__div_to_l_@quot,0,c
 22874  00722A                     l1622:
 22875  00722A  FFFF               	dw	65535	; assembler added errata NOP
 22876  00722C  90D8               	bcf	status,0,c
 22877  00722E  3619               	rlcf	__div_to_l_@f1,f,c
 22878  007230  361A               	rlcf	__div_to_l_@f1+1,f,c
 22879  007232  361B               	rlcf	__div_to_l_@f1+2,f,c
 22880  007234  361C               	rlcf	__div_to_l_@f1+3,f,c
 22881  007236  2E23               	decfsz	__div_to_l_@cntr,f,c
 22882  007238  D7DF               	goto	l1621
 22883  00723A  AE24               	btfss	__div_to_l_@exp1,7,c
 22884  00723C  D00E               	goto	l1624
 22885  00723E  5024               	movf	__div_to_l_@exp1,w,c
 22886  007240  0A80               	xorlw	128
 22887  007242  0F9F               	addlw	159
 22888  007244  A0D8               	btfss	status,0,c
 22889  007246  D00D               	goto	u8830
 22890  007248  FFFF               	dw	65535	; assembler added errata NOP
 22891  00724A  90D8               	bcf	status,0,c
 22892  00724C  3222               	rrcf	__div_to_l_@quot+3,f,c
 22893  00724E  3221               	rrcf	__div_to_l_@quot+2,f,c
 22894  007250  3220               	rrcf	__div_to_l_@quot+1,f,c
 22895  007252  321F               	rrcf	__div_to_l_@quot,f,c
 22896  007254  3E24               	incfsz	__div_to_l_@exp1,f,c
 22897  007256  D7F8               	goto	l1625
 22898  007258  D019               	goto	u8840
 22899  00725A                     l1624:
 22900  00725A  FFFF               	dw	65535	; assembler added errata NOP
 22901  00725C  0E1F               	movlw	31
 22902  00725E  6424               	cpfsgt	__div_to_l_@exp1,c
 22903  007260  D011               	goto	l1630
 22904  007262                     u8830:
 22905  007262  FFFF               	dw	65535	; assembler added errata NOP
 22906  007264  0E00               	movlw	0
 22907  007266  6E19               	movwf	?__div_to_l_,c
 22908  007268  0E00               	movlw	0
 22909  00726A  6E1A               	movwf	?__div_to_l_+1,c
 22910  00726C  0E00               	movlw	0
 22911  00726E  6E1B               	movwf	?__div_to_l_+2,c
 22912  007270  0E00               	movlw	0
 22913  007272  6E1C               	movwf	?__div_to_l_+3,c
 22914  007274  D014               	goto	l1619
 22915  007276  FFFF               	dw	65535	; assembler added errata NOP
 22916  007278  90D8               	bcf	status,0,c
 22917  00727A  361F               	rlcf	__div_to_l_@quot,f,c
 22918  00727C  3620               	rlcf	__div_to_l_@quot+1,f,c
 22919  00727E  3621               	rlcf	__div_to_l_@quot+2,f,c
 22920  007280  3622               	rlcf	__div_to_l_@quot+3,f,c
 22921  007282  0624               	decf	__div_to_l_@exp1,f,c
 22922  007284                     l1630:
 22923  007284  FFFF               	dw	65535	; assembler added errata NOP
 22924  007286  5024               	movf	__div_to_l_@exp1,w,c
 22925  007288  A4D8               	btfss	status,2,c
 22926  00728A  D7F5               	goto	l1631
 22927  00728C                     u8840:
 22928  00728C  FFFF               	dw	65535	; assembler added errata NOP
 22929  00728E  C01F  F019         	movff	__div_to_l_@quot,?__div_to_l_
 22930  007292  C020  F01A         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 22931  007296  C021  F01B         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 22932  00729A  C022  F01C         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 22933  00729E                     l1619:
 22934  00729E  FFFF               	dw	65535	; assembler added errata NOP
 22935  0072A0  0012               	return		;funcret
 22936  0072A2  FFFF               	dw	65535	; errata NOP
 22937  0072A4                     __end_of__div_to_l_:
 22938                           	opt stack 0
 22939                           tosu	equ	0xFFF
 22940                           tosh	equ	0xFFE
 22941                           tosl	equ	0xFFD
 22942                           pclath	equ	0xFFA
 22943                           tblptru	equ	0xFF8
 22944                           tblptrh	equ	0xFF7
 22945                           tblptrl	equ	0xFF6
 22946                           tablat	equ	0xFF5
 22947                           prodh	equ	0xFF4
 22948                           prodl	equ	0xFF3
 22949                           intcon	equ	0xFF2
 22950                           postinc0	equ	0xFEE
 22951                           wreg	equ	0xFE8
 22952                           indf1	equ	0xFE7
 22953                           fsr1h	equ	0xFE2
 22954                           fsr1l	equ	0xFE1
 22955                           indf2	equ	0xFDF
 22956                           postinc2	equ	0xFDE
 22957                           postdec2	equ	0xFDD
 22958                           plusw2	equ	0xFDB
 22959                           fsr2h	equ	0xFDA
 22960                           fsr2l	equ	0xFD9
 22961                           status	equ	0xFD8
 22962                           
 22963 ;; *************** function ___lltoft *****************
 22964 ;; Defined at:
 22965 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
 22966 ;; Parameters:    Size  Location     Type
 22967 ;;  c               4   32[COMRAM] unsigned long 
 22968 ;; Auto vars:     Size  Location     Type
 22969 ;;  exp             1   40[COMRAM] unsigned char 
 22970 ;; Return value:  Size  Location     Type
 22971 ;;                  3   32[COMRAM] float 
 22972 ;; Registers used:
 22973 ;;		wreg, status,2, status,0, cstack
 22974 ;; Tracked objects:
 22975 ;;		On entry : 0/0
 22976 ;;		On exit  : 0/0
 22977 ;;		Unchanged: 0/0
 22978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22979 ;;      Params:         4       0       0       0       0       0       0
 22980 ;;      Locals:         1       0       0       0       0       0       0
 22981 ;;      Temps:          4       0       0       0       0       0       0
 22982 ;;      Totals:         9       0       0       0       0       0       0
 22983 ;;Total ram usage:        9 bytes
 22984 ;; Hardware stack levels used:    1
 22985 ;; Hardware stack levels required when called:    2
 22986 ;; This function calls:
 22987 ;;		___ftpack
 22988 ;; This function is called by:
 22989 ;;		__doprnt
 22990 ;; This function uses a non-reentrant model
 22991 ;;
 22992                           
 22993                           	psect	text128
 22994  005B2E                     __ptext128:
 22995                           	opt stack 0
 22996  005B2E                     ___lltoft:
 22997                           	opt stack 0
 22998  005B2E  FFFF               	dw	65535	; assembler added errata NOP
 22999                           
 23000                           ;incstack = 0
 23001  005B30  0E8E               	movlw	142
 23002  005B32  6E29               	movwf	___lltoft@exp,c
 23003  005B34  D007               	goto	l1834
 23004  005B36  FFFF               	dw	65535	; assembler added errata NOP
 23005  005B38  90D8               	bcf	status,0,c
 23006  005B3A  3224               	rrcf	___lltoft@c+3,f,c
 23007  005B3C  3223               	rrcf	___lltoft@c+2,f,c
 23008  005B3E  3222               	rrcf	___lltoft@c+1,f,c
 23009  005B40  3221               	rrcf	___lltoft@c,f,c
 23010  005B42  2A29               	incf	___lltoft@exp,f,c
 23011  005B44                     l1834:
 23012  005B44  FFFF               	dw	65535	; assembler added errata NOP
 23013  005B46  0E00               	movlw	0
 23014  005B48  1421               	andwf	___lltoft@c,w,c
 23015  005B4A  6E25               	movwf	??___lltoft& (0+255),c
 23016  005B4C  0E00               	movlw	0
 23017  005B4E  1422               	andwf	___lltoft@c+1,w,c
 23018  005B50  6E26               	movwf	(??___lltoft+1)& (0+255),c
 23019  005B52  0E00               	movlw	0
 23020  005B54  1423               	andwf	___lltoft@c+2,w,c
 23021  005B56  6E27               	movwf	(??___lltoft+2)& (0+255),c
 23022  005B58  0EFF               	movlw	255
 23023  005B5A  1424               	andwf	___lltoft@c+3,w,c
 23024  005B5C  6E28               	movwf	(??___lltoft+3)& (0+255),c
 23025  005B5E  5025               	movf	??___lltoft,w,c
 23026  005B60  1026               	iorwf	??___lltoft+1,w,c
 23027  005B62  1027               	iorwf	??___lltoft+2,w,c
 23028  005B64  1028               	iorwf	??___lltoft+3,w,c
 23029  005B66  A4D8               	btfss	status,2,c
 23030  005B68  D7E6               	goto	l1835
 23031  005B6A  C021  F019         	movff	___lltoft@c,___ftpack@arg
 23032  005B6E  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
 23033  005B72  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
 23034  005B76  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
 23035  005B7A  0E00               	movlw	0
 23036  005B7C  6E1D               	movwf	___ftpack@sign,c
 23037  005B7E  ECCD  F034         	call	___ftpack	;wreg free
 23038  005B82  C019  F021         	movff	?___ftpack,?___lltoft
 23039  005B86  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
 23040  005B8A  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
 23041  005B8E  0012               	return		;funcret
 23042  005B90  FFFF               	dw	65535	; errata NOP
 23043  005B92                     __end_of___lltoft:
 23044                           	opt stack 0
 23045                           tosu	equ	0xFFF
 23046                           tosh	equ	0xFFE
 23047                           tosl	equ	0xFFD
 23048                           pclath	equ	0xFFA
 23049                           tblptru	equ	0xFF8
 23050                           tblptrh	equ	0xFF7
 23051                           tblptrl	equ	0xFF6
 23052                           tablat	equ	0xFF5
 23053                           prodh	equ	0xFF4
 23054                           prodl	equ	0xFF3
 23055                           intcon	equ	0xFF2
 23056                           postinc0	equ	0xFEE
 23057                           wreg	equ	0xFE8
 23058                           indf1	equ	0xFE7
 23059                           fsr1h	equ	0xFE2
 23060                           fsr1l	equ	0xFE1
 23061                           indf2	equ	0xFDF
 23062                           postinc2	equ	0xFDE
 23063                           postdec2	equ	0xFDD
 23064                           plusw2	equ	0xFDB
 23065                           fsr2h	equ	0xFDA
 23066                           fsr2l	equ	0xFD9
 23067                           status	equ	0xFD8
 23068                           
 23069 ;; *************** function ___llmod *****************
 23070 ;; Defined at:
 23071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 23072 ;; Parameters:    Size  Location     Type
 23073 ;;  dividend        4   37[COMRAM] unsigned long 
 23074 ;;  divisor         4   41[COMRAM] unsigned long 
 23075 ;; Auto vars:     Size  Location     Type
 23076 ;;  counter         1   45[COMRAM] unsigned char 
 23077 ;; Return value:  Size  Location     Type
 23078 ;;                  4   37[COMRAM] unsigned long 
 23079 ;; Registers used:
 23080 ;;		wreg, status,2, status,0
 23081 ;; Tracked objects:
 23082 ;;		On entry : 0/0
 23083 ;;		On exit  : 0/0
 23084 ;;		Unchanged: 0/0
 23085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23086 ;;      Params:         8       0       0       0       0       0       0
 23087 ;;      Locals:         1       0       0       0       0       0       0
 23088 ;;      Temps:          0       0       0       0       0       0       0
 23089 ;;      Totals:         9       0       0       0       0       0       0
 23090 ;;Total ram usage:        9 bytes
 23091 ;; Hardware stack levels used:    1
 23092 ;; Hardware stack levels required when called:    1
 23093 ;; This function calls:
 23094 ;;		Nothing
 23095 ;; This function is called by:
 23096 ;;		__doprnt
 23097 ;; This function uses a non-reentrant model
 23098 ;;
 23099                           
 23100                           	psect	text129
 23101  005D3A                     __ptext129:
 23102                           	opt stack 0
 23103  005D3A                     ___llmod:
 23104                           	opt stack 0
 23105  005D3A  FFFF               	dw	65535	; assembler added errata NOP
 23106                           
 23107                           ;incstack = 0
 23108  005D3C  502A               	movf	___llmod@divisor,w,c
 23109  005D3E  102B               	iorwf	___llmod@divisor+1,w,c
 23110  005D40  102C               	iorwf	___llmod@divisor+2,w,c
 23111  005D42  102D               	iorwf	___llmod@divisor+3,w,c
 23112  005D44  B4D8               	btfsc	status,2,c
 23113  005D46  D028               	goto	l1828
 23114  005D48  0E01               	movlw	1
 23115  005D4A  6E2E               	movwf	___llmod@counter,c
 23116  005D4C  D007               	goto	l1823
 23117  005D4E  FFFF               	dw	65535	; assembler added errata NOP
 23118  005D50  90D8               	bcf	status,0,c
 23119  005D52  362A               	rlcf	___llmod@divisor,f,c
 23120  005D54  362B               	rlcf	___llmod@divisor+1,f,c
 23121  005D56  362C               	rlcf	___llmod@divisor+2,f,c
 23122  005D58  362D               	rlcf	___llmod@divisor+3,f,c
 23123  005D5A  2A2E               	incf	___llmod@counter,f,c
 23124  005D5C                     l1823:
 23125  005D5C  FFFF               	dw	65535	; assembler added errata NOP
 23126  005D5E  AE2D               	btfss	___llmod@divisor+3,7,c
 23127  005D60  D7F6               	goto	l1824
 23128  005D62                     u9270:
 23129  005D62  FFFF               	dw	65535	; assembler added errata NOP
 23130  005D64  502A               	movf	___llmod@divisor,w,c
 23131  005D66  5C26               	subwf	___llmod@dividend,w,c
 23132  005D68  502B               	movf	___llmod@divisor+1,w,c
 23133  005D6A  5827               	subwfb	___llmod@dividend+1,w,c
 23134  005D6C  502C               	movf	___llmod@divisor+2,w,c
 23135  005D6E  5828               	subwfb	___llmod@dividend+2,w,c
 23136  005D70  502D               	movf	___llmod@divisor+3,w,c
 23137  005D72  5829               	subwfb	___llmod@dividend+3,w,c
 23138  005D74  A0D8               	btfss	status,0,c
 23139  005D76  D008               	goto	l1827
 23140  005D78  502A               	movf	___llmod@divisor,w,c
 23141  005D7A  5E26               	subwf	___llmod@dividend,f,c
 23142  005D7C  502B               	movf	___llmod@divisor+1,w,c
 23143  005D7E  5A27               	subwfb	___llmod@dividend+1,f,c
 23144  005D80  502C               	movf	___llmod@divisor+2,w,c
 23145  005D82  5A28               	subwfb	___llmod@dividend+2,f,c
 23146  005D84  502D               	movf	___llmod@divisor+3,w,c
 23147  005D86  5A29               	subwfb	___llmod@dividend+3,f,c
 23148  005D88                     l1827:
 23149  005D88  FFFF               	dw	65535	; assembler added errata NOP
 23150  005D8A  90D8               	bcf	status,0,c
 23151  005D8C  322D               	rrcf	___llmod@divisor+3,f,c
 23152  005D8E  322C               	rrcf	___llmod@divisor+2,f,c
 23153  005D90  322B               	rrcf	___llmod@divisor+1,f,c
 23154  005D92  322A               	rrcf	___llmod@divisor,f,c
 23155  005D94  2E2E               	decfsz	___llmod@counter,f,c
 23156  005D96  D7E5               	goto	u9270
 23157  005D98                     l1828:
 23158  005D98  FFFF               	dw	65535	; assembler added errata NOP
 23159  005D9A  C026  F026         	movff	___llmod@dividend,?___llmod
 23160  005D9E  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 23161  005DA2  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 23162  005DA6  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 23163  005DAA  0012               	return		;funcret
 23164  005DAC  FFFF               	dw	65535	; errata NOP
 23165  005DAE                     __end_of___llmod:
 23166                           	opt stack 0
 23167                           tosu	equ	0xFFF
 23168                           tosh	equ	0xFFE
 23169                           tosl	equ	0xFFD
 23170                           pclath	equ	0xFFA
 23171                           tblptru	equ	0xFF8
 23172                           tblptrh	equ	0xFF7
 23173                           tblptrl	equ	0xFF6
 23174                           tablat	equ	0xFF5
 23175                           prodh	equ	0xFF4
 23176                           prodl	equ	0xFF3
 23177                           intcon	equ	0xFF2
 23178                           postinc0	equ	0xFEE
 23179                           wreg	equ	0xFE8
 23180                           indf1	equ	0xFE7
 23181                           fsr1h	equ	0xFE2
 23182                           fsr1l	equ	0xFE1
 23183                           indf2	equ	0xFDF
 23184                           postinc2	equ	0xFDE
 23185                           postdec2	equ	0xFDD
 23186                           plusw2	equ	0xFDB
 23187                           fsr2h	equ	0xFDA
 23188                           fsr2l	equ	0xFD9
 23189                           status	equ	0xFD8
 23190                           
 23191 ;; *************** function ___lldiv *****************
 23192 ;; Defined at:
 23193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 23194 ;; Parameters:    Size  Location     Type
 23195 ;;  dividend        4   24[COMRAM] unsigned long 
 23196 ;;  divisor         4   28[COMRAM] unsigned long 
 23197 ;; Auto vars:     Size  Location     Type
 23198 ;;  quotient        4   32[COMRAM] unsigned long 
 23199 ;;  counter         1   36[COMRAM] unsigned char 
 23200 ;; Return value:  Size  Location     Type
 23201 ;;                  4   24[COMRAM] unsigned long 
 23202 ;; Registers used:
 23203 ;;		wreg, status,2, status,0
 23204 ;; Tracked objects:
 23205 ;;		On entry : 0/0
 23206 ;;		On exit  : 0/0
 23207 ;;		Unchanged: 0/0
 23208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23209 ;;      Params:         8       0       0       0       0       0       0
 23210 ;;      Locals:         5       0       0       0       0       0       0
 23211 ;;      Temps:          0       0       0       0       0       0       0
 23212 ;;      Totals:        13       0       0       0       0       0       0
 23213 ;;Total ram usage:       13 bytes
 23214 ;; Hardware stack levels used:    1
 23215 ;; Hardware stack levels required when called:    1
 23216 ;; This function calls:
 23217 ;;		Nothing
 23218 ;; This function is called by:
 23219 ;;		__doprnt
 23220 ;; This function uses a non-reentrant model
 23221 ;;
 23222                           
 23223                           	psect	text130
 23224  006232                     __ptext130:
 23225                           	opt stack 0
 23226  006232                     ___lldiv:
 23227                           	opt stack 0
 23228  006232  FFFF               	dw	65535	; assembler added errata NOP
 23229                           
 23230                           ;incstack = 0
 23231  006234  0E00               	movlw	0
 23232  006236  6E21               	movwf	___lldiv@quotient,c
 23233  006238  0E00               	movlw	0
 23234  00623A  6E22               	movwf	___lldiv@quotient+1,c
 23235  00623C  0E00               	movlw	0
 23236  00623E  6E23               	movwf	___lldiv@quotient+2,c
 23237  006240  0E00               	movlw	0
 23238  006242  6E24               	movwf	___lldiv@quotient+3,c
 23239  006244  501D               	movf	___lldiv@divisor,w,c
 23240  006246  101E               	iorwf	___lldiv@divisor+1,w,c
 23241  006248  101F               	iorwf	___lldiv@divisor+2,w,c
 23242  00624A  1020               	iorwf	___lldiv@divisor+3,w,c
 23243  00624C  B4D8               	btfsc	status,2,c
 23244  00624E  D02E               	goto	l1818
 23245  006250  0E01               	movlw	1
 23246  006252  6E25               	movwf	___lldiv@counter,c
 23247  006254  D007               	goto	l1813
 23248  006256  FFFF               	dw	65535	; assembler added errata NOP
 23249  006258  90D8               	bcf	status,0,c
 23250  00625A  361D               	rlcf	___lldiv@divisor,f,c
 23251  00625C  361E               	rlcf	___lldiv@divisor+1,f,c
 23252  00625E  361F               	rlcf	___lldiv@divisor+2,f,c
 23253  006260  3620               	rlcf	___lldiv@divisor+3,f,c
 23254  006262  2A25               	incf	___lldiv@counter,f,c
 23255  006264                     l1813:
 23256  006264  FFFF               	dw	65535	; assembler added errata NOP
 23257  006266  AE20               	btfss	___lldiv@divisor+3,7,c
 23258  006268  D7F6               	goto	l1814
 23259  00626A                     u9240:
 23260  00626A  FFFF               	dw	65535	; assembler added errata NOP
 23261  00626C  90D8               	bcf	status,0,c
 23262  00626E  3621               	rlcf	___lldiv@quotient,f,c
 23263  006270  3622               	rlcf	___lldiv@quotient+1,f,c
 23264  006272  3623               	rlcf	___lldiv@quotient+2,f,c
 23265  006274  3624               	rlcf	___lldiv@quotient+3,f,c
 23266  006276  501D               	movf	___lldiv@divisor,w,c
 23267  006278  5C19               	subwf	___lldiv@dividend,w,c
 23268  00627A  501E               	movf	___lldiv@divisor+1,w,c
 23269  00627C  581A               	subwfb	___lldiv@dividend+1,w,c
 23270  00627E  501F               	movf	___lldiv@divisor+2,w,c
 23271  006280  581B               	subwfb	___lldiv@dividend+2,w,c
 23272  006282  5020               	movf	___lldiv@divisor+3,w,c
 23273  006284  581C               	subwfb	___lldiv@dividend+3,w,c
 23274  006286  A0D8               	btfss	status,0,c
 23275  006288  D009               	goto	l1817
 23276  00628A  501D               	movf	___lldiv@divisor,w,c
 23277  00628C  5E19               	subwf	___lldiv@dividend,f,c
 23278  00628E  501E               	movf	___lldiv@divisor+1,w,c
 23279  006290  5A1A               	subwfb	___lldiv@dividend+1,f,c
 23280  006292  501F               	movf	___lldiv@divisor+2,w,c
 23281  006294  5A1B               	subwfb	___lldiv@dividend+2,f,c
 23282  006296  5020               	movf	___lldiv@divisor+3,w,c
 23283  006298  5A1C               	subwfb	___lldiv@dividend+3,f,c
 23284  00629A  8021               	bsf	___lldiv@quotient,0,c
 23285  00629C                     l1817:
 23286  00629C  FFFF               	dw	65535	; assembler added errata NOP
 23287  00629E  90D8               	bcf	status,0,c
 23288  0062A0  3220               	rrcf	___lldiv@divisor+3,f,c
 23289  0062A2  321F               	rrcf	___lldiv@divisor+2,f,c
 23290  0062A4  321E               	rrcf	___lldiv@divisor+1,f,c
 23291  0062A6  321D               	rrcf	___lldiv@divisor,f,c
 23292  0062A8  2E25               	decfsz	___lldiv@counter,f,c
 23293  0062AA  D7DF               	goto	u9240
 23294  0062AC                     l1818:
 23295  0062AC  FFFF               	dw	65535	; assembler added errata NOP
 23296  0062AE  C021  F019         	movff	___lldiv@quotient,?___lldiv
 23297  0062B2  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 23298  0062B6  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 23299  0062BA  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 23300  0062BE  0012               	return		;funcret
 23301  0062C0  FFFF               	dw	65535	; errata NOP
 23302  0062C2                     __end_of___lldiv:
 23303                           	opt stack 0
 23304                           tosu	equ	0xFFF
 23305                           tosh	equ	0xFFE
 23306                           tosl	equ	0xFFD
 23307                           pclath	equ	0xFFA
 23308                           tblptru	equ	0xFF8
 23309                           tblptrh	equ	0xFF7
 23310                           tblptrl	equ	0xFF6
 23311                           tablat	equ	0xFF5
 23312                           prodh	equ	0xFF4
 23313                           prodl	equ	0xFF3
 23314                           intcon	equ	0xFF2
 23315                           postinc0	equ	0xFEE
 23316                           wreg	equ	0xFE8
 23317                           indf1	equ	0xFE7
 23318                           fsr1h	equ	0xFE2
 23319                           fsr1l	equ	0xFE1
 23320                           indf2	equ	0xFDF
 23321                           postinc2	equ	0xFDE
 23322                           postdec2	equ	0xFDD
 23323                           plusw2	equ	0xFDB
 23324                           fsr2h	equ	0xFDA
 23325                           fsr2l	equ	0xFD9
 23326                           status	equ	0xFD8
 23327                           
 23328 ;; *************** function ___fttol *****************
 23329 ;; Defined at:
 23330 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
 23331 ;; Parameters:    Size  Location     Type
 23332 ;;  f1              3   46[BANK0 ] float 
 23333 ;; Auto vars:     Size  Location     Type
 23334 ;;  lval            4   56[BANK0 ] unsigned long 
 23335 ;;  exp1            1   60[BANK0 ] unsigned char 
 23336 ;;  sign1           1   55[BANK0 ] unsigned char 
 23337 ;; Return value:  Size  Location     Type
 23338 ;;                  4   46[BANK0 ] long 
 23339 ;; Registers used:
 23340 ;;		wreg, status,2, status,0
 23341 ;; Tracked objects:
 23342 ;;		On entry : 0/0
 23343 ;;		On exit  : 0/0
 23344 ;;		Unchanged: 0/0
 23345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23346 ;;      Params:         0       4       0       0       0       0       0
 23347 ;;      Locals:         0       6       0       0       0       0       0
 23348 ;;      Temps:          0       5       0       0       0       0       0
 23349 ;;      Totals:         0      15       0       0       0       0       0
 23350 ;;Total ram usage:       15 bytes
 23351 ;; Hardware stack levels used:    1
 23352 ;; Hardware stack levels required when called:    1
 23353 ;; This function calls:
 23354 ;;		Nothing
 23355 ;; This function is called by:
 23356 ;;		__doprnt
 23357 ;; This function uses a non-reentrant model
 23358 ;;
 23359                           
 23360                           	psect	text131
 23361  00762C                     __ptext131:
 23362                           	opt stack 0
 23363  00762C                     ___fttol:
 23364                           	opt stack 0
 23365  00762C  FFFF               	dw	65535	; assembler added errata NOP
 23366                           
 23367                           ;incstack = 0
 23368  00762E  C090  F092         	movff	___fttol@f1+2,??___fttol
 23369  007632  0100               	movlb	0	; () banked
 23370  007634  6B93               	clrf	(??___fttol+1)& (0+255),b
 23371  007636  6B94               	clrf	(??___fttol+2)& (0+255),b
 23372  007638  0100               	movlb	0	; () banked
 23373  00763A  358F               	rlcf	(___fttol@f1+1)& (0+255),w,b
 23374  00763C  0100               	movlb	0	; () banked
 23375  00763E  3792               	rlcf	??___fttol& (0+255),f,b
 23376  007640  E301               	bnc	u9151
 23377  007642  8193               	bsf	(??___fttol+1)& (0+255),0,b
 23378  007644                     u9151:
 23379  007644  0100               	movlb	0	; () banked
 23380  007646  5192               	movf	??___fttol& (0+255),w,b
 23381  007648  0100               	movlb	0	; () banked
 23382  00764A  6F9C               	movwf	___fttol@exp1& (0+255),b
 23383  00764C  0100               	movlb	0	; () banked
 23384  00764E  519C               	movf	___fttol@exp1& (0+255),w,b
 23385  007650  B4D8               	btfsc	status,2,c
 23386  007652  D051               	goto	u9200
 23387                           
 23388                           ; BSR set to: 0
 23389                           
 23390                           ; BSR set to: 0
 23391                           
 23392                           ; BSR set to: 0
 23393                           
 23394                           ; BSR set to: 0
 23395  007654  0E17               	movlw	23
 23396  007656  0100               	movlb	0	; () banked
 23397  007658  6F92               	movwf	??___fttol& (0+255),b
 23398  00765A  C08E  F093         	movff	___fttol@f1,??___fttol+1
 23399  00765E  C08F  F094         	movff	___fttol@f1+1,??___fttol+2
 23400  007662  C090  F095         	movff	___fttol@f1+2,??___fttol+3
 23401  007666  0100               	movlb	0	; () banked
 23402  007668  2992               	incf	??___fttol& (0+255),w,b
 23403  00766A  0100               	movlb	0	; () banked
 23404  00766C  6F96               	movwf	(??___fttol+4)& (0+255),b
 23405  00766E  D006               	goto	u9170
 23406  007670                     u9175:
 23407  007670  FFFF               	dw	65535	; assembler added errata NOP
 23408  007672  0100               	movlb	0	; () banked
 23409  007674  90D8               	bcf	status,0,c
 23410  007676  3395               	rrcf	(??___fttol+3)& (0+255),f,b
 23411  007678  3394               	rrcf	(??___fttol+2)& (0+255),f,b
 23412  00767A  3393               	rrcf	(??___fttol+1)& (0+255),f,b
 23413  00767C                     u9170:
 23414  00767C  FFFF               	dw	65535	; assembler added errata NOP
 23415  00767E  0100               	movlb	0	; () banked
 23416  007680  2F96               	decfsz	(??___fttol+4)& (0+255),f,b
 23417  007682  D7F6               	goto	u9175
 23418  007684  0100               	movlb	0	; () banked
 23419  007686  5193               	movf	(??___fttol+1)& (0+255),w,b
 23420  007688  0100               	movlb	0	; () banked
 23421  00768A  6F97               	movwf	___fttol@sign1& (0+255),b
 23422                           
 23423                           ; BSR set to: 0
 23424  00768C  0100               	movlb	0	; () banked
 23425  00768E  8F8F               	bsf	(___fttol@f1+1)& (0+255),7,b
 23426                           
 23427                           ; BSR set to: 0
 23428  007690  0EFF               	movlw	255
 23429  007692  0100               	movlb	0	; () banked
 23430  007694  178E               	andwf	___fttol@f1& (0+255),f,b
 23431  007696  0EFF               	movlw	255
 23432  007698  0100               	movlb	0	; () banked
 23433  00769A  178F               	andwf	(___fttol@f1+1)& (0+255),f,b
 23434  00769C  0E00               	movlw	0
 23435  00769E  0100               	movlb	0	; () banked
 23436  0076A0  1790               	andwf	(___fttol@f1+2)& (0+255),f,b
 23437                           
 23438                           ; BSR set to: 0
 23439  0076A2  0100               	movlb	0	; () banked
 23440  0076A4  518E               	movf	___fttol@f1& (0+255),w,b
 23441  0076A6  0100               	movlb	0	; () banked
 23442  0076A8  6F98               	movwf	___fttol@lval& (0+255),b
 23443  0076AA  0100               	movlb	0	; () banked
 23444  0076AC  518F               	movf	(___fttol@f1+1)& (0+255),w,b
 23445  0076AE  0100               	movlb	0	; () banked
 23446  0076B0  6F99               	movwf	(___fttol@lval+1)& (0+255),b
 23447  0076B2  0100               	movlb	0	; () banked
 23448  0076B4  5190               	movf	(___fttol@f1+2)& (0+255),w,b
 23449  0076B6  0100               	movlb	0	; () banked
 23450  0076B8  6F9A               	movwf	(___fttol@lval+2)& (0+255),b
 23451  0076BA  0100               	movlb	0	; () banked
 23452  0076BC  6B9B               	clrf	(___fttol@lval+3)& (0+255),b
 23453                           
 23454                           ; BSR set to: 0
 23455  0076BE  0E8E               	movlw	142
 23456  0076C0  0100               	movlb	0	; () banked
 23457  0076C2  5F9C               	subwf	___fttol@exp1& (0+255),f,b
 23458                           
 23459                           ; BSR set to: 0
 23460  0076C4  0100               	movlb	0	; () banked
 23461  0076C6  AF9C               	btfss	___fttol@exp1& (0+255),7,b
 23462  0076C8  D011               	goto	l1769
 23463                           
 23464                           ; BSR set to: 0
 23465  0076CA  0100               	movlb	0	; () banked
 23466  0076CC  519C               	movf	___fttol@exp1& (0+255),w,b
 23467  0076CE  0A80               	xorlw	128
 23468  0076D0  0F8F               	addlw	143
 23469  0076D2  A0D8               	btfss	status,0,c
 23470  0076D4  D010               	goto	u9200
 23471  0076D6  FFFF               	dw	65535	; assembler added errata NOP
 23472                           
 23473                           ; BSR set to: 0
 23474                           
 23475                           ; BSR set to: 0
 23476                           
 23477                           ; BSR set to: 0
 23478  0076D8  0100               	movlb	0	; () banked
 23479  0076DA  90D8               	bcf	status,0,c
 23480  0076DC  339B               	rrcf	(___fttol@lval+3)& (0+255),f,b
 23481  0076DE  339A               	rrcf	(___fttol@lval+2)& (0+255),f,b
 23482  0076E0  3399               	rrcf	(___fttol@lval+1)& (0+255),f,b
 23483  0076E2  3398               	rrcf	___fttol@lval& (0+255),f,b
 23484                           
 23485                           ; BSR set to: 0
 23486  0076E4  0100               	movlb	0	; () banked
 23487  0076E6  3F9C               	incfsz	___fttol@exp1& (0+255),f,b
 23488  0076E8  D7F6               	goto	l1770
 23489                           
 23490                           ; BSR set to: 0
 23491  0076EA  D01F               	goto	u9210
 23492  0076EC                     l1769:
 23493  0076EC  FFFF               	dw	65535	; assembler added errata NOP
 23494                           
 23495                           ; BSR set to: 0
 23496                           
 23497                           ; BSR set to: 0
 23498  0076EE  0E17               	movlw	23
 23499  0076F0  0100               	movlb	0	; () banked
 23500  0076F2  659C               	cpfsgt	___fttol@exp1& (0+255),b
 23501  0076F4  D014               	goto	l1775
 23502  0076F6                     u9200:
 23503  0076F6  FFFF               	dw	65535	; assembler added errata NOP
 23504                           
 23505                           ; BSR set to: 0
 23506  0076F8  0E00               	movlw	0
 23507  0076FA  0100               	movlb	0	; () banked
 23508  0076FC  6F8E               	movwf	?___fttol& (0+255),b
 23509  0076FE  0E00               	movlw	0
 23510  007700  6F8F               	movwf	(?___fttol+1)& (0+255),b
 23511  007702  0E00               	movlw	0
 23512  007704  6F90               	movwf	(?___fttol+2)& (0+255),b
 23513  007706  0E00               	movlw	0
 23514  007708  6F91               	movwf	(?___fttol+3)& (0+255),b
 23515                           
 23516                           ; BSR set to: 0
 23517  00770A  D027               	goto	l9476
 23518  00770C  FFFF               	dw	65535	; assembler added errata NOP
 23519                           
 23520                           ; BSR set to: 0
 23521                           
 23522                           ; BSR set to: 0
 23523  00770E  0100               	movlb	0	; () banked
 23524  007710  90D8               	bcf	status,0,c
 23525  007712  3798               	rlcf	___fttol@lval& (0+255),f,b
 23526  007714  3799               	rlcf	(___fttol@lval+1)& (0+255),f,b
 23527  007716  379A               	rlcf	(___fttol@lval+2)& (0+255),f,b
 23528  007718  379B               	rlcf	(___fttol@lval+3)& (0+255),f,b
 23529  00771A  0100               	movlb	0	; () banked
 23530  00771C  079C               	decf	___fttol@exp1& (0+255),f,b
 23531  00771E                     l1775:
 23532  00771E  FFFF               	dw	65535	; assembler added errata NOP
 23533                           
 23534                           ; BSR set to: 0
 23535                           
 23536                           ; BSR set to: 0
 23537  007720  0100               	movlb	0	; () banked
 23538  007722  519C               	movf	___fttol@exp1& (0+255),w,b
 23539  007724  0100               	movlb	0	; () banked
 23540  007726  A4D8               	btfss	status,2,c
 23541  007728  D7F1               	goto	l1776
 23542  00772A                     u9210:
 23543  00772A  FFFF               	dw	65535	; assembler added errata NOP
 23544                           
 23545                           ; BSR set to: 0
 23546                           
 23547                           ; BSR set to: 0
 23548                           
 23549                           ; BSR set to: 0
 23550  00772C  0100               	movlb	0	; () banked
 23551  00772E  5197               	movf	___fttol@sign1& (0+255),w,b
 23552  007730  0100               	movlb	0	; () banked
 23553  007732  B4D8               	btfsc	status,2,c
 23554  007734  D009               	goto	l1778
 23555                           
 23556                           ; BSR set to: 0
 23557  007736  0100               	movlb	0	; () banked
 23558  007738  1F9B               	comf	(___fttol@lval+3)& (0+255),f,b
 23559  00773A  1F9A               	comf	(___fttol@lval+2)& (0+255),f,b
 23560  00773C  1F99               	comf	(___fttol@lval+1)& (0+255),f,b
 23561  00773E  6D98               	negf	___fttol@lval& (0+255),b
 23562  007740  0E00               	movlw	0
 23563  007742  2399               	addwfc	(___fttol@lval+1)& (0+255),f,b
 23564  007744  239A               	addwfc	(___fttol@lval+2)& (0+255),f,b
 23565  007746  239B               	addwfc	(___fttol@lval+3)& (0+255),f,b
 23566  007748                     l1778:
 23567  007748  FFFF               	dw	65535	; assembler added errata NOP
 23568                           
 23569                           ; BSR set to: 0
 23570                           
 23571                           ; BSR set to: 0
 23572  00774A  C098  F08E         	movff	___fttol@lval,?___fttol
 23573  00774E  C099  F08F         	movff	___fttol@lval+1,?___fttol+1
 23574  007752  C09A  F090         	movff	___fttol@lval+2,?___fttol+2
 23575  007756  C09B  F091         	movff	___fttol@lval+3,?___fttol+3
 23576  00775A                     l9476:
 23577  00775A  FFFF               	dw	65535	; assembler added errata NOP
 23578                           
 23579                           ; BSR set to: 0
 23580                           
 23581                           ; BSR set to: 0
 23582  00775C  0012               	return		;funcret
 23583  00775E  FFFF               	dw	65535	; errata NOP
 23584  007760                     __end_of___fttol:
 23585                           	opt stack 0
 23586                           tosu	equ	0xFFF
 23587                           tosh	equ	0xFFE
 23588                           tosl	equ	0xFFD
 23589                           pclath	equ	0xFFA
 23590                           tblptru	equ	0xFF8
 23591                           tblptrh	equ	0xFF7
 23592                           tblptrl	equ	0xFF6
 23593                           tablat	equ	0xFF5
 23594                           prodh	equ	0xFF4
 23595                           prodl	equ	0xFF3
 23596                           intcon	equ	0xFF2
 23597                           postinc0	equ	0xFEE
 23598                           wreg	equ	0xFE8
 23599                           indf1	equ	0xFE7
 23600                           fsr1h	equ	0xFE2
 23601                           fsr1l	equ	0xFE1
 23602                           indf2	equ	0xFDF
 23603                           postinc2	equ	0xFDE
 23604                           postdec2	equ	0xFDD
 23605                           plusw2	equ	0xFDB
 23606                           fsr2h	equ	0xFDA
 23607                           fsr2l	equ	0xFD9
 23608                           status	equ	0xFD8
 23609                           
 23610 ;; *************** function ___ftsub *****************
 23611 ;; Defined at:
 23612 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
 23613 ;; Parameters:    Size  Location     Type
 23614 ;;  f1              3    9[BANK0 ] float 
 23615 ;;  f2              3   12[BANK0 ] float 
 23616 ;; Auto vars:     Size  Location     Type
 23617 ;;		None
 23618 ;; Return value:  Size  Location     Type
 23619 ;;                  3    9[BANK0 ] float 
 23620 ;; Registers used:
 23621 ;;		wreg, status,2, status,0, cstack
 23622 ;; Tracked objects:
 23623 ;;		On entry : 0/0
 23624 ;;		On exit  : 0/0
 23625 ;;		Unchanged: 0/0
 23626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23627 ;;      Params:         0       6       0       0       0       0       0
 23628 ;;      Locals:         0       0       0       0       0       0       0
 23629 ;;      Temps:          0       0       0       0       0       0       0
 23630 ;;      Totals:         0       6       0       0       0       0       0
 23631 ;;Total ram usage:        6 bytes
 23632 ;; Hardware stack levels used:    1
 23633 ;; Hardware stack levels required when called:    3
 23634 ;; This function calls:
 23635 ;;		___ftadd
 23636 ;; This function is called by:
 23637 ;;		__doprnt
 23638 ;; This function uses a non-reentrant model
 23639 ;;
 23640                           
 23641                           	psect	text132
 23642  0058C6                     __ptext132:
 23643                           	opt stack 0
 23644  0058C6                     ___ftsub:
 23645                           	opt stack 0
 23646  0058C6  FFFF               	dw	65535	; assembler added errata NOP
 23647                           
 23648                           ; BSR set to: 0
 23649                           ;incstack = 0
 23650  0058C8  0100               	movlb	0	; () banked
 23651  0058CA  516C               	movf	___ftsub@f2& (0+255),w,b
 23652  0058CC  0100               	movlb	0	; () banked
 23653  0058CE  116D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 23654  0058D0  0100               	movlb	0	; () banked
 23655  0058D2  116E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 23656  0058D4  B4D8               	btfsc	status,2,c
 23657  0058D6  D009               	goto	l1763
 23658                           
 23659                           ; BSR set to: 0
 23660  0058D8  0E00               	movlw	0
 23661  0058DA  0100               	movlb	0	; () banked
 23662  0058DC  1B6C               	xorwf	___ftsub@f2& (0+255),f,b
 23663  0058DE  0E00               	movlw	0
 23664  0058E0  0100               	movlb	0	; () banked
 23665  0058E2  1B6D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 23666  0058E4  0E80               	movlw	128
 23667  0058E6  0100               	movlb	0	; () banked
 23668  0058E8  1B6E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 23669  0058EA                     l1763:
 23670  0058EA  FFFF               	dw	65535	; assembler added errata NOP
 23671                           
 23672                           ; BSR set to: 0
 23673                           
 23674                           ; BSR set to: 0
 23675  0058EC  C069  F060         	movff	___ftsub@f1,___ftadd@f1
 23676  0058F0  C06A  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
 23677  0058F4  C06B  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
 23678  0058F8  C06C  F063         	movff	___ftsub@f2,___ftadd@f2
 23679  0058FC  C06D  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
 23680  005900  C06E  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
 23681  005904  ECD0  F019         	call	___ftadd	;wreg free
 23682  005908  C060  F069         	movff	?___ftadd,?___ftsub
 23683  00590C  C061  F06A         	movff	?___ftadd+1,?___ftsub+1
 23684  005910  C062  F06B         	movff	?___ftadd+2,?___ftsub+2
 23685  005914  0012               	return		;funcret
 23686  005916  FFFF               	dw	65535	; errata NOP
 23687  005918                     __end_of___ftsub:
 23688                           	opt stack 0
 23689                           tosu	equ	0xFFF
 23690                           tosh	equ	0xFFE
 23691                           tosl	equ	0xFFD
 23692                           pclath	equ	0xFFA
 23693                           tblptru	equ	0xFF8
 23694                           tblptrh	equ	0xFF7
 23695                           tblptrl	equ	0xFF6
 23696                           tablat	equ	0xFF5
 23697                           prodh	equ	0xFF4
 23698                           prodl	equ	0xFF3
 23699                           intcon	equ	0xFF2
 23700                           postinc0	equ	0xFEE
 23701                           wreg	equ	0xFE8
 23702                           indf1	equ	0xFE7
 23703                           fsr1h	equ	0xFE2
 23704                           fsr1l	equ	0xFE1
 23705                           indf2	equ	0xFDF
 23706                           postinc2	equ	0xFDE
 23707                           postdec2	equ	0xFDD
 23708                           plusw2	equ	0xFDB
 23709                           fsr2h	equ	0xFDA
 23710                           fsr2l	equ	0xFD9
 23711                           status	equ	0xFD8
 23712                           
 23713 ;; *************** function _get_min *****************
 23714 ;; Defined at:
 23715 ;;		line 95 in file "Get_Voltages.c"
 23716 ;; Parameters:    Size  Location     Type
 23717 ;;		None
 23718 ;; Auto vars:     Size  Location     Type
 23719 ;;		None
 23720 ;; Return value:  Size  Location     Type
 23721 ;;                  3   24[COMRAM] float 
 23722 ;; Registers used:
 23723 ;;		None
 23724 ;; Tracked objects:
 23725 ;;		On entry : 0/0
 23726 ;;		On exit  : 0/0
 23727 ;;		Unchanged: 0/0
 23728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23729 ;;      Params:         3       0       0       0       0       0       0
 23730 ;;      Locals:         0       0       0       0       0       0       0
 23731 ;;      Temps:          0       0       0       0       0       0       0
 23732 ;;      Totals:         3       0       0       0       0       0       0
 23733 ;;Total ram usage:        3 bytes
 23734 ;; Hardware stack levels used:    1
 23735 ;; Hardware stack levels required when called:    1
 23736 ;; This function calls:
 23737 ;;		Nothing
 23738 ;; This function is called by:
 23739 ;;		_Display_Data
 23740 ;; This function uses a non-reentrant model
 23741 ;;
 23742                           
 23743                           	psect	text133
 23744  004DA8                     __ptext133:
 23745                           	opt stack 0
 23746  004DA8                     _get_min:
 23747                           	opt stack 0
 23748  004DA8  FFFF               	dw	65535	; assembler added errata NOP
 23749                           
 23750                           ;Get_Voltages.c: 96: return min;
 23751                           
 23752                           ;incstack = 0
 23753  004DAA  C125  F019         	movff	_min,?_get_min
 23754  004DAE  C126  F01A         	movff	_min+1,?_get_min+1
 23755  004DB2  C127  F01B         	movff	_min+2,?_get_min+2
 23756  004DB6  0012               	return		;funcret
 23757  004DB8  FFFF               	dw	65535	; errata NOP
 23758  004DBA                     __end_of_get_min:
 23759                           	opt stack 0
 23760                           tosu	equ	0xFFF
 23761                           tosh	equ	0xFFE
 23762                           tosl	equ	0xFFD
 23763                           pclath	equ	0xFFA
 23764                           tblptru	equ	0xFF8
 23765                           tblptrh	equ	0xFF7
 23766                           tblptrl	equ	0xFF6
 23767                           tablat	equ	0xFF5
 23768                           prodh	equ	0xFF4
 23769                           prodl	equ	0xFF3
 23770                           intcon	equ	0xFF2
 23771                           postinc0	equ	0xFEE
 23772                           wreg	equ	0xFE8
 23773                           indf1	equ	0xFE7
 23774                           fsr1h	equ	0xFE2
 23775                           fsr1l	equ	0xFE1
 23776                           indf2	equ	0xFDF
 23777                           postinc2	equ	0xFDE
 23778                           postdec2	equ	0xFDD
 23779                           plusw2	equ	0xFDB
 23780                           fsr2h	equ	0xFDA
 23781                           fsr2l	equ	0xFD9
 23782                           status	equ	0xFD8
 23783                           
 23784 ;; *************** function _get_max *****************
 23785 ;; Defined at:
 23786 ;;		line 91 in file "Get_Voltages.c"
 23787 ;; Parameters:    Size  Location     Type
 23788 ;;		None
 23789 ;; Auto vars:     Size  Location     Type
 23790 ;;		None
 23791 ;; Return value:  Size  Location     Type
 23792 ;;                  3   24[COMRAM] float 
 23793 ;; Registers used:
 23794 ;;		None
 23795 ;; Tracked objects:
 23796 ;;		On entry : 0/0
 23797 ;;		On exit  : 0/0
 23798 ;;		Unchanged: 0/0
 23799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23800 ;;      Params:         3       0       0       0       0       0       0
 23801 ;;      Locals:         0       0       0       0       0       0       0
 23802 ;;      Temps:          0       0       0       0       0       0       0
 23803 ;;      Totals:         3       0       0       0       0       0       0
 23804 ;;Total ram usage:        3 bytes
 23805 ;; Hardware stack levels used:    1
 23806 ;; Hardware stack levels required when called:    1
 23807 ;; This function calls:
 23808 ;;		Nothing
 23809 ;; This function is called by:
 23810 ;;		_Display_Data
 23811 ;; This function uses a non-reentrant model
 23812 ;;
 23813                           
 23814                           	psect	text134
 23815  004D96                     __ptext134:
 23816                           	opt stack 0
 23817  004D96                     _get_max:
 23818                           	opt stack 0
 23819  004D96  FFFF               	dw	65535	; assembler added errata NOP
 23820                           
 23821                           ;Get_Voltages.c: 92: return max;
 23822                           
 23823                           ;incstack = 0
 23824  004D98  C122  F019         	movff	_max,?_get_max
 23825  004D9C  C123  F01A         	movff	_max+1,?_get_max+1
 23826  004DA0  C124  F01B         	movff	_max+2,?_get_max+2
 23827  004DA4  0012               	return		;funcret
 23828  004DA6  FFFF               	dw	65535	; errata NOP
 23829  004DA8                     __end_of_get_max:
 23830                           	opt stack 0
 23831                           tosu	equ	0xFFF
 23832                           tosh	equ	0xFFE
 23833                           tosl	equ	0xFFD
 23834                           pclath	equ	0xFFA
 23835                           tblptru	equ	0xFF8
 23836                           tblptrh	equ	0xFF7
 23837                           tblptrl	equ	0xFF6
 23838                           tablat	equ	0xFF5
 23839                           prodh	equ	0xFF4
 23840                           prodl	equ	0xFF3
 23841                           intcon	equ	0xFF2
 23842                           postinc0	equ	0xFEE
 23843                           wreg	equ	0xFE8
 23844                           indf1	equ	0xFE7
 23845                           fsr1h	equ	0xFE2
 23846                           fsr1l	equ	0xFE1
 23847                           indf2	equ	0xFDF
 23848                           postinc2	equ	0xFDE
 23849                           postdec2	equ	0xFDD
 23850                           plusw2	equ	0xFDB
 23851                           fsr2h	equ	0xFDA
 23852                           fsr2l	equ	0xFD9
 23853                           status	equ	0xFD8
 23854                           
 23855 ;; *************** function _LCD_WriteStr *****************
 23856 ;; Defined at:
 23857 ;;		line 23 in file "LCD2S.c"
 23858 ;; Parameters:    Size  Location     Type
 23859 ;;  Str             2   26[COMRAM] PTR unsigned char 
 23860 ;;		 -> Display_Data@buffer(20), STR_71(54), 
 23861 ;;  Str_Size        1   28[COMRAM] unsigned char 
 23862 ;; Auto vars:     Size  Location     Type
 23863 ;;  stat            1   30[COMRAM] unsigned char 
 23864 ;;  i               1   29[COMRAM] unsigned char 
 23865 ;; Return value:  Size  Location     Type
 23866 ;;                  1    wreg      void 
 23867 ;; Registers used:
 23868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23869 ;; Tracked objects:
 23870 ;;		On entry : 0/0
 23871 ;;		On exit  : 0/0
 23872 ;;		Unchanged: 0/0
 23873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23874 ;;      Params:         3       0       0       0       0       0       0
 23875 ;;      Locals:         2       0       0       0       0       0       0
 23876 ;;      Temps:          0       0       0       0       0       0       0
 23877 ;;      Totals:         5       0       0       0       0       0       0
 23878 ;;Total ram usage:        5 bytes
 23879 ;; Hardware stack levels used:    1
 23880 ;; Hardware stack levels required when called:    2
 23881 ;; This function calls:
 23882 ;;		_CloseI2C
 23883 ;;		_IdleI2C
 23884 ;;		_OpenI2C
 23885 ;;		_StartI2C
 23886 ;;		_StopI2C
 23887 ;;		_Wait_AckI2C
 23888 ;;		_WriteI2C
 23889 ;; This function is called by:
 23890 ;;		_main
 23891 ;;		_Display_Data
 23892 ;; This function uses a non-reentrant model
 23893 ;;
 23894                           
 23895                           	psect	text135
 23896  006122                     __ptext135:
 23897                           	opt stack 0
 23898  006122                     _LCD_WriteStr:
 23899                           	opt stack 0
 23900  006122  FFFF               	dw	65535	; assembler added errata NOP
 23901                           
 23902                           ;LCD2S.c: 25: char stat=0,i=0;
 23903                           
 23904                           ;incstack = 0
 23905  006124  0E00               	movlw	0
 23906  006126  6E1F               	movwf	LCD_WriteStr@stat,c
 23907  006128  0E00               	movlw	0
 23908  00612A  6E1E               	movwf	LCD_WriteStr@i,c
 23909                           
 23910                           ;LCD2S.c: 27: OpenI2C(8, 0xC0);
 23911  00612C  0EC0               	movlw	192
 23912  00612E  6E19               	movwf	OpenI2C@slew,c
 23913  006130  0E08               	movlw	8
 23914  006132  ECCB  F028         	call	_OpenI2C
 23915                           
 23916                           ;LCD2S.c: 28: SSPADD=0x18;
 23917  006136  0E18               	movlw	24
 23918  006138  6EC8               	movwf	4040,c	;volatile
 23919                           
 23920                           ;LCD2S.c: 29: IdleI2C();
 23921  00613A  ECDC  F028         	call	_IdleI2C	;wreg free
 23922                           
 23923                           ;LCD2S.c: 32: StartI2C();
 23924  00613E  EC35  F028         	call	_StartI2C	;wreg free
 23925                           
 23926                           ;LCD2S.c: 33: stat=WriteI2C(0x50);
 23927  006142  0E50               	movlw	80
 23928  006144  EC9E  F029         	call	_WriteI2C
 23929  006148  6E1F               	movwf	LCD_WriteStr@stat,c
 23930                           
 23931                           ;LCD2S.c: 34: stat+=Wait_AckI2C();
 23932  00614A  EC21  F028         	call	_Wait_AckI2C	;wreg free
 23933  00614E  261F               	addwf	LCD_WriteStr@stat,f,c
 23934                           
 23935                           ;LCD2S.c: 37: stat+=WriteI2C(0x80);
 23936  006150  0E80               	movlw	128
 23937  006152  EC9E  F029         	call	_WriteI2C
 23938  006156  261F               	addwf	LCD_WriteStr@stat,f,c
 23939                           
 23940                           ;LCD2S.c: 38: stat+=Wait_AckI2C();
 23941  006158  EC21  F028         	call	_Wait_AckI2C	;wreg free
 23942  00615C  D019               	goto	L26
 23943  00615E  FFFF               	dw	65535	; assembler added errata NOP
 23944                           
 23945                           ;LCD2S.c: 42: stat+=WriteI2C(*Str++);
 23946  006160  C01B  FFF6         	movff	LCD_WriteStr@Str,tblptrl
 23947  006164  C01C  FFF7         	movff	LCD_WriteStr@Str+1,tblptrh
 23948  006168  6AF8               	clrf	tblptru,c
 23949  00616A  0E05               	movlw	(high __ramtop+-1)
 23950  00616C  64F7               	cpfsgt	tblptrh,c
 23951  00616E  D004               	bra	u11137
 23952  006170  0008               	tblrd		*
 23953  006172  FFFF               	dw	65535	; errata NOP
 23954  006174  50F5               	movf	tablat,w,c
 23955  006176  D005               	bra	u11130
 23956  006178                     u11137:
 23957  006178  CFF6 FFE1          	movff	tblptrl,fsr1l
 23958  00617C  CFF7 FFE2          	movff	tblptrh,fsr1h
 23959  006180  50E7               	movf	indf1,w,c
 23960  006182                     u11130:
 23961  006182  EC9E  F029         	call	_WriteI2C
 23962  006186  261F               	addwf	LCD_WriteStr@stat,f,c
 23963  006188  4A1B               	infsnz	LCD_WriteStr@Str,f,c
 23964  00618A  2A1C               	incf	LCD_WriteStr@Str+1,f,c
 23965                           
 23966                           ;LCD2S.c: 43: stat+=Wait_AckI2C();
 23967  00618C  EC21  F028         	call	_Wait_AckI2C	;wreg free
 23968  006190                     L26:
 23969  006190  FFFF               	dw	65535	; assembler added errata NOP
 23970  006192  261F               	addwf	LCD_WriteStr@stat,f,c
 23971  006194  061D               	decf	LCD_WriteStr@Str_Size,f,c
 23972  006196  281D               	incf	LCD_WriteStr@Str_Size,w,c
 23973  006198  A4D8               	btfss	status,2,c
 23974  00619A  D7E1               	goto	l747
 23975                           
 23976                           ;LCD2S.c: 44: }
 23977                           ;LCD2S.c: 45: StopI2C();
 23978  00619C  EC42  F028         	call	_StopI2C	;wreg free
 23979                           
 23980                           ;LCD2S.c: 46: CloseI2C();
 23981  0061A0  EC93  F026         	call	_CloseI2C	;wreg free
 23982  0061A4  0012               	return		;funcret
 23983  0061A6  FFFF               	dw	65535	; errata NOP
 23984  0061A8                     __end_of_LCD_WriteStr:
 23985                           	opt stack 0
 23986                           tosu	equ	0xFFF
 23987                           tosh	equ	0xFFE
 23988                           tosl	equ	0xFFD
 23989                           pclath	equ	0xFFA
 23990                           tblptru	equ	0xFF8
 23991                           tblptrh	equ	0xFF7
 23992                           tblptrl	equ	0xFF6
 23993                           tablat	equ	0xFF5
 23994                           prodh	equ	0xFF4
 23995                           prodl	equ	0xFF3
 23996                           intcon	equ	0xFF2
 23997                           postinc0	equ	0xFEE
 23998                           wreg	equ	0xFE8
 23999                           indf1	equ	0xFE7
 24000                           fsr1h	equ	0xFE2
 24001                           fsr1l	equ	0xFE1
 24002                           indf2	equ	0xFDF
 24003                           postinc2	equ	0xFDE
 24004                           postdec2	equ	0xFDD
 24005                           plusw2	equ	0xFDB
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function _LCD_SetCursor_Position *****************
 24011 ;; Defined at:
 24012 ;;		line 177 in file "LCD2S.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  row             1    wreg     unsigned char 
 24015 ;;  column          1   26[COMRAM] unsigned char 
 24016 ;; Auto vars:     Size  Location     Type
 24017 ;;  row             1   27[COMRAM] unsigned char 
 24018 ;; Return value:  Size  Location     Type
 24019 ;;                  1    wreg      void 
 24020 ;; Registers used:
 24021 ;;		wreg, status,2, status,0, cstack
 24022 ;; Tracked objects:
 24023 ;;		On entry : 0/0
 24024 ;;		On exit  : 0/0
 24025 ;;		Unchanged: 0/0
 24026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24027 ;;      Params:         1       0       0       0       0       0       0
 24028 ;;      Locals:         1       0       0       0       0       0       0
 24029 ;;      Temps:          0       0       0       0       0       0       0
 24030 ;;      Totals:         2       0       0       0       0       0       0
 24031 ;;Total ram usage:        2 bytes
 24032 ;; Hardware stack levels used:    1
 24033 ;; Hardware stack levels required when called:    2
 24034 ;; This function calls:
 24035 ;;		_CloseI2C
 24036 ;;		_IdleI2C
 24037 ;;		_OpenI2C
 24038 ;;		_StartI2C
 24039 ;;		_StopI2C
 24040 ;;		_Wait_AckI2C
 24041 ;;		_WriteI2C
 24042 ;; This function is called by:
 24043 ;;		_Display_Data
 24044 ;; This function uses a non-reentrant model
 24045 ;;
 24046                           
 24047                           	psect	text136
 24048  005794                     __ptext136:
 24049                           	opt stack 0
 24050  005794                     _LCD_SetCursor_Position:
 24051                           	opt stack 0
 24052  005794  FFFF               	dw	65535	; assembler added errata NOP
 24053                           
 24054                           ;incstack = 0
 24055                           ;LCD_SetCursor_Position@row stored from wreg
 24056  005796  6E1C               	movwf	LCD_SetCursor_Position@row,c
 24057                           
 24058                           ;LCD2S.c: 179: OpenI2C(8, 0xC0);
 24059  005798  0EC0               	movlw	192
 24060  00579A  6E19               	movwf	OpenI2C@slew,c
 24061  00579C  0E08               	movlw	8
 24062  00579E  ECCB  F028         	call	_OpenI2C
 24063                           
 24064                           ;LCD2S.c: 180: IdleI2C();
 24065  0057A2  ECDC  F028         	call	_IdleI2C	;wreg free
 24066                           
 24067                           ;LCD2S.c: 181: StartI2C();
 24068  0057A6  EC35  F028         	call	_StartI2C	;wreg free
 24069                           
 24070                           ;LCD2S.c: 182: WriteI2C(0x50);
 24071  0057AA  0E50               	movlw	80
 24072  0057AC  EC9E  F029         	call	_WriteI2C
 24073                           
 24074                           ;LCD2S.c: 183: Wait_AckI2C();
 24075  0057B0  EC21  F028         	call	_Wait_AckI2C	;wreg free
 24076                           
 24077                           ;LCD2S.c: 184: WriteI2C(0x8a);
 24078  0057B4  0E8A               	movlw	138
 24079  0057B6  EC9E  F029         	call	_WriteI2C
 24080                           
 24081                           ;LCD2S.c: 185: Wait_AckI2C();
 24082  0057BA  EC21  F028         	call	_Wait_AckI2C	;wreg free
 24083                           
 24084                           ;LCD2S.c: 186: WriteI2C(row);
 24085  0057BE  501C               	movf	LCD_SetCursor_Position@row,w,c
 24086  0057C0  EC9E  F029         	call	_WriteI2C
 24087                           
 24088                           ;LCD2S.c: 187: Wait_AckI2C();
 24089  0057C4  EC21  F028         	call	_Wait_AckI2C	;wreg free
 24090                           
 24091                           ;LCD2S.c: 188: WriteI2C(column);
 24092  0057C8  501B               	movf	LCD_SetCursor_Position@column,w,c
 24093  0057CA  EC9E  F029         	call	_WriteI2C
 24094                           
 24095                           ;LCD2S.c: 189: Wait_AckI2C();
 24096  0057CE  EC21  F028         	call	_Wait_AckI2C	;wreg free
 24097                           
 24098                           ;LCD2S.c: 190: StopI2C();
 24099  0057D2  EC42  F028         	call	_StopI2C	;wreg free
 24100                           
 24101                           ;LCD2S.c: 191: CloseI2C();
 24102  0057D6  EC93  F026         	call	_CloseI2C	;wreg free
 24103  0057DA  0012               	return		;funcret
 24104  0057DC  FFFF               	dw	65535	; errata NOP
 24105  0057DE                     __end_of_LCD_SetCursor_Position:
 24106                           	opt stack 0
 24107                           tosu	equ	0xFFF
 24108                           tosh	equ	0xFFE
 24109                           tosl	equ	0xFFD
 24110                           pclath	equ	0xFFA
 24111                           tblptru	equ	0xFF8
 24112                           tblptrh	equ	0xFF7
 24113                           tblptrl	equ	0xFF6
 24114                           tablat	equ	0xFF5
 24115                           prodh	equ	0xFF4
 24116                           prodl	equ	0xFF3
 24117                           intcon	equ	0xFF2
 24118                           postinc0	equ	0xFEE
 24119                           wreg	equ	0xFE8
 24120                           indf1	equ	0xFE7
 24121                           fsr1h	equ	0xFE2
 24122                           fsr1l	equ	0xFE1
 24123                           indf2	equ	0xFDF
 24124                           postinc2	equ	0xFDE
 24125                           postdec2	equ	0xFDD
 24126                           plusw2	equ	0xFDB
 24127                           fsr2h	equ	0xFDA
 24128                           fsr2l	equ	0xFD9
 24129                           status	equ	0xFD8
 24130                           
 24131 ;; *************** function _WriteI2C *****************
 24132 ;; Defined at:
 24133 ;;		line 64 in file "i2c_FRM.c"
 24134 ;; Parameters:    Size  Location     Type
 24135 ;;  data_out        1    wreg     unsigned char 
 24136 ;; Auto vars:     Size  Location     Type
 24137 ;;  data_out        1   24[COMRAM] unsigned char 
 24138 ;;  IE_stat         1   25[COMRAM] unsigned char 
 24139 ;; Return value:  Size  Location     Type
 24140 ;;                  1    wreg      unsigned char 
 24141 ;; Registers used:
 24142 ;;		wreg
 24143 ;; Tracked objects:
 24144 ;;		On entry : 0/0
 24145 ;;		On exit  : 0/0
 24146 ;;		Unchanged: 0/0
 24147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24148 ;;      Params:         0       0       0       0       0       0       0
 24149 ;;      Locals:         2       0       0       0       0       0       0
 24150 ;;      Temps:          0       0       0       0       0       0       0
 24151 ;;      Totals:         2       0       0       0       0       0       0
 24152 ;;Total ram usage:        2 bytes
 24153 ;; Hardware stack levels used:    1
 24154 ;; Hardware stack levels required when called:    1
 24155 ;; This function calls:
 24156 ;;		Nothing
 24157 ;; This function is called by:
 24158 ;;		_WriteStr_I2C
 24159 ;;		_ReadStr_I2C
 24160 ;;		_I2C_Send
 24161 ;;		_LCD_WriteStr
 24162 ;;		_LCD_SetBackLight_Brightness
 24163 ;;		_LCD_SetContrast
 24164 ;;		_LCD_SetCursor_Position
 24165 ;; This function uses a non-reentrant model
 24166 ;;
 24167                           
 24168                           	psect	text137
 24169  00533C                     __ptext137:
 24170                           	opt stack 0
 24171  00533C                     _WriteI2C:
 24172                           	opt stack 0
 24173  00533C  FFFF               	dw	65535	; assembler added errata NOP
 24174                           
 24175                           ;incstack = 0
 24176                           ;WriteI2C@data_out stored from wreg
 24177  00533E  6E19               	movwf	WriteI2C@data_out,c
 24178                           
 24179                           ;i2c_FRM.c: 65: char IE_stat;
 24180                           ;i2c_FRM.c: 66: SSPBUF = data_out;
 24181  005340  C019  FFC9         	movff	WriteI2C@data_out,4041	;volatile
 24182                           
 24183                           ;i2c_FRM.c: 67: if (SSPCON1bits.WCOL)
 24184  005344  AEC6               	btfss	4038,7,c	;volatile
 24185  005346  D002               	goto	l539
 24186                           
 24187                           ;i2c_FRM.c: 68: return ( -1);
 24188  005348  0EFF               	movlw	255
 24189  00534A  D00B               	goto	l8634
 24190  00534C                     l539:
 24191  00534C  FFFF               	dw	65535	; assembler added errata NOP
 24192                           
 24193                           ;i2c_FRM.c: 69: else {
 24194                           ;i2c_FRM.c: 71: IE_stat = INTCON;
 24195  00534E  CFF2 F01A          	movff	intcon,WriteI2C@IE_stat	;volatile
 24196                           
 24197                           ;i2c_FRM.c: 72: INTCONbits.GIE = 0;
 24198  005352  9EF2               	bcf	intcon,7,c	;volatile
 24199                           
 24200                           ;i2c_FRM.c: 73: PIR1bits.SSPIF = 0;
 24201  005354  969E               	bcf	3998,3,c	;volatile
 24202  005356  FFFF               	dw	65535	; assembler added errata NOP
 24203  005358  A69E               	btfss	3998,3,c	;volatile
 24204  00535A  D7FD               	goto	l543
 24205                           
 24206                           ;i2c_FRM.c: 75: INTCON = IE_stat;
 24207  00535C  C01A  FFF2         	movff	WriteI2C@IE_stat,intcon	;volatile
 24208                           
 24209                           ;i2c_FRM.c: 76: return ( 0);
 24210  005360  0E00               	movlw	0
 24211  005362                     l8634:
 24212  005362  FFFF               	dw	65535	; assembler added errata NOP
 24213  005364  0012               	return		;funcret
 24214  005366  FFFF               	dw	65535	; errata NOP
 24215  005368                     __end_of_WriteI2C:
 24216                           	opt stack 0
 24217                           tosu	equ	0xFFF
 24218                           tosh	equ	0xFFE
 24219                           tosl	equ	0xFFD
 24220                           pclath	equ	0xFFA
 24221                           tblptru	equ	0xFF8
 24222                           tblptrh	equ	0xFF7
 24223                           tblptrl	equ	0xFF6
 24224                           tablat	equ	0xFF5
 24225                           prodh	equ	0xFF4
 24226                           prodl	equ	0xFF3
 24227                           intcon	equ	0xFF2
 24228                           postinc0	equ	0xFEE
 24229                           wreg	equ	0xFE8
 24230                           indf1	equ	0xFE7
 24231                           fsr1h	equ	0xFE2
 24232                           fsr1l	equ	0xFE1
 24233                           indf2	equ	0xFDF
 24234                           postinc2	equ	0xFDE
 24235                           postdec2	equ	0xFDD
 24236                           plusw2	equ	0xFDB
 24237                           fsr2h	equ	0xFDA
 24238                           fsr2l	equ	0xFD9
 24239                           status	equ	0xFD8
 24240                           
 24241 ;; *************** function _Wait_AckI2C *****************
 24242 ;; Defined at:
 24243 ;;		line 87 in file "i2c_FRM.c"
 24244 ;; Parameters:    Size  Location     Type
 24245 ;;		None
 24246 ;; Auto vars:     Size  Location     Type
 24247 ;;		None
 24248 ;; Return value:  Size  Location     Type
 24249 ;;                  1    wreg      unsigned char 
 24250 ;; Registers used:
 24251 ;;		wreg
 24252 ;; Tracked objects:
 24253 ;;		On entry : 0/0
 24254 ;;		On exit  : 0/0
 24255 ;;		Unchanged: 0/0
 24256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24257 ;;      Params:         0       0       0       0       0       0       0
 24258 ;;      Locals:         0       0       0       0       0       0       0
 24259 ;;      Temps:          0       0       0       0       0       0       0
 24260 ;;      Totals:         0       0       0       0       0       0       0
 24261 ;;Total ram usage:        0 bytes
 24262 ;; Hardware stack levels used:    1
 24263 ;; Hardware stack levels required when called:    1
 24264 ;; This function calls:
 24265 ;;		Nothing
 24266 ;; This function is called by:
 24267 ;;		_WriteStr_I2C
 24268 ;;		_ReadStr_I2C
 24269 ;;		_I2C_Send
 24270 ;;		_LCD_WriteStr
 24271 ;;		_LCD_SetBackLight_Brightness
 24272 ;;		_LCD_SetContrast
 24273 ;;		_LCD_SetCursor_Position
 24274 ;; This function uses a non-reentrant model
 24275 ;;
 24276                           
 24277                           	psect	text138
 24278  005042                     __ptext138:
 24279                           	opt stack 0
 24280  005042                     _Wait_AckI2C:
 24281                           	opt stack 0
 24282  005042  FFFF               	dw	65535	; assembler added errata NOP
 24283                           
 24284                           ;i2c_FRM.c: 89: if(SSPCON2bits.ACKSTAT)
 24285                           
 24286                           ;incstack = 0
 24287  005044  ACC5               	btfss	4037,6,c	;volatile
 24288  005046  D002               	goto	l547
 24289                           
 24290                           ;i2c_FRM.c: 90: return(-1);
 24291  005048  0EFF               	movlw	255
 24292  00504A  D002               	goto	l8646
 24293  00504C                     l547:
 24294  00504C  FFFF               	dw	65535	; assembler added errata NOP
 24295                           
 24296                           ;i2c_FRM.c: 91: else
 24297                           ;i2c_FRM.c: 92: return(0);
 24298  00504E  0E00               	movlw	0
 24299  005050                     l8646:
 24300  005050  FFFF               	dw	65535	; assembler added errata NOP
 24301  005052  0012               	return		;funcret
 24302  005054  FFFF               	dw	65535	; errata NOP
 24303  005056                     __end_of_Wait_AckI2C:
 24304                           	opt stack 0
 24305                           tosu	equ	0xFFF
 24306                           tosh	equ	0xFFE
 24307                           tosl	equ	0xFFD
 24308                           pclath	equ	0xFFA
 24309                           tblptru	equ	0xFF8
 24310                           tblptrh	equ	0xFF7
 24311                           tblptrl	equ	0xFF6
 24312                           tablat	equ	0xFF5
 24313                           prodh	equ	0xFF4
 24314                           prodl	equ	0xFF3
 24315                           intcon	equ	0xFF2
 24316                           postinc0	equ	0xFEE
 24317                           wreg	equ	0xFE8
 24318                           indf1	equ	0xFE7
 24319                           fsr1h	equ	0xFE2
 24320                           fsr1l	equ	0xFE1
 24321                           indf2	equ	0xFDF
 24322                           postinc2	equ	0xFDE
 24323                           postdec2	equ	0xFDD
 24324                           plusw2	equ	0xFDB
 24325                           fsr2h	equ	0xFDA
 24326                           fsr2l	equ	0xFD9
 24327                           status	equ	0xFD8
 24328                           
 24329 ;; *************** function _StopI2C *****************
 24330 ;; Defined at:
 24331 ;;		line 159 in file "i2c_FRM.c"
 24332 ;; Parameters:    Size  Location     Type
 24333 ;;		None
 24334 ;; Auto vars:     Size  Location     Type
 24335 ;;  IE_stat         1   24[COMRAM] unsigned char 
 24336 ;; Return value:  Size  Location     Type
 24337 ;;                  1    wreg      void 
 24338 ;; Registers used:
 24339 ;;		None
 24340 ;; Tracked objects:
 24341 ;;		On entry : 0/0
 24342 ;;		On exit  : 0/0
 24343 ;;		Unchanged: 0/0
 24344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24345 ;;      Params:         0       0       0       0       0       0       0
 24346 ;;      Locals:         1       0       0       0       0       0       0
 24347 ;;      Temps:          0       0       0       0       0       0       0
 24348 ;;      Totals:         1       0       0       0       0       0       0
 24349 ;;Total ram usage:        1 bytes
 24350 ;; Hardware stack levels used:    1
 24351 ;; Hardware stack levels required when called:    1
 24352 ;; This function calls:
 24353 ;;		Nothing
 24354 ;; This function is called by:
 24355 ;;		_WriteStr_I2C
 24356 ;;		_ReadStr_I2C
 24357 ;;		_I2C_Send
 24358 ;;		_LCD_WriteStr
 24359 ;;		_LCD_SetBackLight_Brightness
 24360 ;;		_LCD_SetContrast
 24361 ;;		_LCD_SetCursor_Position
 24362 ;; This function uses a non-reentrant model
 24363 ;;
 24364                           
 24365                           	psect	text139
 24366  005084                     __ptext139:
 24367                           	opt stack 0
 24368  005084                     _StopI2C:
 24369                           	opt stack 0
 24370  005084  FFFF               	dw	65535	; assembler added errata NOP
 24371                           
 24372                           ;i2c_FRM.c: 160: char IE_stat;
 24373                           ;i2c_FRM.c: 162: IE_stat = INTCON;
 24374                           
 24375                           ;incstack = 0
 24376  005086  CFF2 F019          	movff	intcon,StopI2C@IE_stat	;volatile
 24377                           
 24378                           ;i2c_FRM.c: 163: INTCONbits.GIE = 0;
 24379  00508A  9EF2               	bcf	intcon,7,c	;volatile
 24380                           
 24381                           ;i2c_FRM.c: 164: SSPCON2bits.PEN = 1;
 24382  00508C  84C5               	bsf	4037,2,c	;volatile
 24383                           
 24384                           ;i2c_FRM.c: 165: PIR1bits.SSPIF = 0;
 24385  00508E  969E               	bcf	3998,3,c	;volatile
 24386  005090  FFFF               	dw	65535	; assembler added errata NOP
 24387  005092  A69E               	btfss	3998,3,c	;volatile
 24388  005094  D7FD               	goto	l571
 24389                           
 24390                           ;i2c_FRM.c: 167: INTCON = IE_stat;
 24391  005096  C019  FFF2         	movff	StopI2C@IE_stat,intcon	;volatile
 24392  00509A  0012               	return		;funcret
 24393  00509C  FFFF               	dw	65535	; errata NOP
 24394  00509E                     __end_of_StopI2C:
 24395                           	opt stack 0
 24396                           tosu	equ	0xFFF
 24397                           tosh	equ	0xFFE
 24398                           tosl	equ	0xFFD
 24399                           pclath	equ	0xFFA
 24400                           tblptru	equ	0xFF8
 24401                           tblptrh	equ	0xFF7
 24402                           tblptrl	equ	0xFF6
 24403                           tablat	equ	0xFF5
 24404                           prodh	equ	0xFF4
 24405                           prodl	equ	0xFF3
 24406                           intcon	equ	0xFF2
 24407                           postinc0	equ	0xFEE
 24408                           wreg	equ	0xFE8
 24409                           indf1	equ	0xFE7
 24410                           fsr1h	equ	0xFE2
 24411                           fsr1l	equ	0xFE1
 24412                           indf2	equ	0xFDF
 24413                           postinc2	equ	0xFDE
 24414                           postdec2	equ	0xFDD
 24415                           plusw2	equ	0xFDB
 24416                           fsr2h	equ	0xFDA
 24417                           fsr2l	equ	0xFD9
 24418                           status	equ	0xFD8
 24419                           
 24420 ;; *************** function _StartI2C *****************
 24421 ;; Defined at:
 24422 ;;		line 47 in file "i2c_FRM.c"
 24423 ;; Parameters:    Size  Location     Type
 24424 ;;		None
 24425 ;; Auto vars:     Size  Location     Type
 24426 ;;  IE_stat         1   24[COMRAM] unsigned char 
 24427 ;; Return value:  Size  Location     Type
 24428 ;;                  1    wreg      void 
 24429 ;; Registers used:
 24430 ;;		None
 24431 ;; Tracked objects:
 24432 ;;		On entry : 0/0
 24433 ;;		On exit  : 0/0
 24434 ;;		Unchanged: 0/0
 24435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24436 ;;      Params:         0       0       0       0       0       0       0
 24437 ;;      Locals:         1       0       0       0       0       0       0
 24438 ;;      Temps:          0       0       0       0       0       0       0
 24439 ;;      Totals:         1       0       0       0       0       0       0
 24440 ;;Total ram usage:        1 bytes
 24441 ;; Hardware stack levels used:    1
 24442 ;; Hardware stack levels required when called:    1
 24443 ;; This function calls:
 24444 ;;		Nothing
 24445 ;; This function is called by:
 24446 ;;		_WriteStr_I2C
 24447 ;;		_ReadStr_I2C
 24448 ;;		_I2C_Send
 24449 ;;		_LCD_WriteStr
 24450 ;;		_LCD_SetBackLight_Brightness
 24451 ;;		_LCD_SetContrast
 24452 ;;		_LCD_SetCursor_Position
 24453 ;; This function uses a non-reentrant model
 24454 ;;
 24455                           
 24456                           	psect	text140
 24457  00506A                     __ptext140:
 24458                           	opt stack 0
 24459  00506A                     _StartI2C:
 24460                           	opt stack 0
 24461  00506A  FFFF               	dw	65535	; assembler added errata NOP
 24462                           
 24463                           ;i2c_FRM.c: 48: char IE_stat;
 24464                           ;i2c_FRM.c: 50: IE_stat = INTCON;
 24465                           
 24466                           ;incstack = 0
 24467  00506C  CFF2 F019          	movff	intcon,StartI2C@IE_stat	;volatile
 24468                           
 24469                           ;i2c_FRM.c: 51: INTCONbits.GIE = 0;
 24470  005070  9EF2               	bcf	intcon,7,c	;volatile
 24471                           
 24472                           ;i2c_FRM.c: 52: SSPCON2bits.SEN = 1;
 24473  005072  80C5               	bsf	4037,0,c	;volatile
 24474                           
 24475                           ;i2c_FRM.c: 53: PIR1bits.SSPIF = 0;
 24476  005074  969E               	bcf	3998,3,c	;volatile
 24477  005076  FFFF               	dw	65535	; assembler added errata NOP
 24478  005078  A69E               	btfss	3998,3,c	;volatile
 24479  00507A  D7FD               	goto	l534
 24480                           
 24481                           ;i2c_FRM.c: 55: INTCON = IE_stat;
 24482  00507C  C019  FFF2         	movff	StartI2C@IE_stat,intcon	;volatile
 24483  005080  0012               	return		;funcret
 24484  005082  FFFF               	dw	65535	; errata NOP
 24485  005084                     __end_of_StartI2C:
 24486                           	opt stack 0
 24487                           tosu	equ	0xFFF
 24488                           tosh	equ	0xFFE
 24489                           tosl	equ	0xFFD
 24490                           pclath	equ	0xFFA
 24491                           tblptru	equ	0xFF8
 24492                           tblptrh	equ	0xFF7
 24493                           tblptrl	equ	0xFF6
 24494                           tablat	equ	0xFF5
 24495                           prodh	equ	0xFF4
 24496                           prodl	equ	0xFF3
 24497                           intcon	equ	0xFF2
 24498                           postinc0	equ	0xFEE
 24499                           wreg	equ	0xFE8
 24500                           indf1	equ	0xFE7
 24501                           fsr1h	equ	0xFE2
 24502                           fsr1l	equ	0xFE1
 24503                           indf2	equ	0xFDF
 24504                           postinc2	equ	0xFDE
 24505                           postdec2	equ	0xFDD
 24506                           plusw2	equ	0xFDB
 24507                           fsr2h	equ	0xFDA
 24508                           fsr2l	equ	0xFD9
 24509                           status	equ	0xFD8
 24510                           
 24511 ;; *************** function _OpenI2C *****************
 24512 ;; Defined at:
 24513 ;;		line 12 in file "i2c_FRM.c"
 24514 ;; Parameters:    Size  Location     Type
 24515 ;;  sync_mode       1    wreg     unsigned char 
 24516 ;;  slew            1   24[COMRAM] unsigned char 
 24517 ;; Auto vars:     Size  Location     Type
 24518 ;;  sync_mode       1   25[COMRAM] unsigned char 
 24519 ;; Return value:  Size  Location     Type
 24520 ;;                  1    wreg      void 
 24521 ;; Registers used:
 24522 ;;		wreg, status,2, status,0
 24523 ;; Tracked objects:
 24524 ;;		On entry : 0/0
 24525 ;;		On exit  : 0/0
 24526 ;;		Unchanged: 0/0
 24527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24528 ;;      Params:         1       0       0       0       0       0       0
 24529 ;;      Locals:         1       0       0       0       0       0       0
 24530 ;;      Temps:          0       0       0       0       0       0       0
 24531 ;;      Totals:         2       0       0       0       0       0       0
 24532 ;;Total ram usage:        2 bytes
 24533 ;; Hardware stack levels used:    1
 24534 ;; Hardware stack levels required when called:    1
 24535 ;; This function calls:
 24536 ;;		Nothing
 24537 ;; This function is called by:
 24538 ;;		_WriteStr_I2C
 24539 ;;		_ReadStr_I2C
 24540 ;;		_I2C_Send
 24541 ;;		_LCD_WriteStr
 24542 ;;		_LCD_SetBackLight_Brightness
 24543 ;;		_LCD_SetContrast
 24544 ;;		_LCD_SetCursor_Position
 24545 ;;		_main
 24546 ;; This function uses a non-reentrant model
 24547 ;;
 24548                           
 24549                           	psect	text141
 24550  005196                     __ptext141:
 24551                           	opt stack 0
 24552  005196                     _OpenI2C:
 24553                           	opt stack 0
 24554  005196  FFFF               	dw	65535	; assembler added errata NOP
 24555                           
 24556                           ;incstack = 0
 24557                           ;OpenI2C@sync_mode stored from wreg
 24558  005198  6E1A               	movwf	OpenI2C@sync_mode,c
 24559                           
 24560                           ;i2c_FRM.c: 14: SSPSTAT &= 0x3F;
 24561  00519A  0E3F               	movlw	63
 24562  00519C  16C7               	andwf	4039,f,c	;volatile
 24563                           
 24564                           ;i2c_FRM.c: 15: SSPCON1 = 0x00;
 24565  00519E  0E00               	movlw	0
 24566  0051A0  6EC6               	movwf	4038,c	;volatile
 24567                           
 24568                           ;i2c_FRM.c: 16: SSPCON2 = 0x00;
 24569  0051A2  0E00               	movlw	0
 24570  0051A4  6EC5               	movwf	4037,c	;volatile
 24571                           
 24572                           ;i2c_FRM.c: 17: SSPCON1 |= sync_mode;
 24573  0051A6  501A               	movf	OpenI2C@sync_mode,w,c
 24574  0051A8  12C6               	iorwf	4038,f,c	;volatile
 24575                           
 24576                           ;i2c_FRM.c: 18: SSPSTAT |= slew;
 24577  0051AA  5019               	movf	OpenI2C@slew,w,c
 24578  0051AC  12C7               	iorwf	4039,f,c	;volatile
 24579                           
 24580                           ;i2c_FRM.c: 20: DDRCbits.RC3 = 1;
 24581  0051AE  8694               	bsf	3988,3,c	;volatile
 24582                           
 24583                           ;i2c_FRM.c: 21: DDRCbits.RC4 = 1;
 24584  0051B0  8894               	bsf	3988,4,c	;volatile
 24585                           
 24586                           ;i2c_FRM.c: 23: SSPCON1 |= 0x20;
 24587  0051B2  8AC6               	bsf	4038,5,c	;volatile
 24588  0051B4  0012               	return		;funcret
 24589  0051B6  FFFF               	dw	65535	; errata NOP
 24590  0051B8                     __end_of_OpenI2C:
 24591                           	opt stack 0
 24592                           tosu	equ	0xFFF
 24593                           tosh	equ	0xFFE
 24594                           tosl	equ	0xFFD
 24595                           pclath	equ	0xFFA
 24596                           tblptru	equ	0xFF8
 24597                           tblptrh	equ	0xFF7
 24598                           tblptrl	equ	0xFF6
 24599                           tablat	equ	0xFF5
 24600                           prodh	equ	0xFF4
 24601                           prodl	equ	0xFF3
 24602                           intcon	equ	0xFF2
 24603                           postinc0	equ	0xFEE
 24604                           wreg	equ	0xFE8
 24605                           indf1	equ	0xFE7
 24606                           fsr1h	equ	0xFE2
 24607                           fsr1l	equ	0xFE1
 24608                           indf2	equ	0xFDF
 24609                           postinc2	equ	0xFDE
 24610                           postdec2	equ	0xFDD
 24611                           plusw2	equ	0xFDB
 24612                           fsr2h	equ	0xFDA
 24613                           fsr2l	equ	0xFD9
 24614                           status	equ	0xFD8
 24615                           
 24616 ;; *************** function _IdleI2C *****************
 24617 ;; Defined at:
 24618 ;;		line 33 in file "i2c_FRM.c"
 24619 ;; Parameters:    Size  Location     Type
 24620 ;;		None
 24621 ;; Auto vars:     Size  Location     Type
 24622 ;;		None
 24623 ;; Return value:  Size  Location     Type
 24624 ;;                  1    wreg      void 
 24625 ;; Registers used:
 24626 ;;		wreg, status,2, status,0
 24627 ;; Tracked objects:
 24628 ;;		On entry : 0/0
 24629 ;;		On exit  : 0/0
 24630 ;;		Unchanged: 0/0
 24631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24632 ;;      Params:         0       0       0       0       0       0       0
 24633 ;;      Locals:         0       0       0       0       0       0       0
 24634 ;;      Temps:          1       0       0       0       0       0       0
 24635 ;;      Totals:         1       0       0       0       0       0       0
 24636 ;;Total ram usage:        1 bytes
 24637 ;; Hardware stack levels used:    1
 24638 ;; Hardware stack levels required when called:    1
 24639 ;; This function calls:
 24640 ;;		Nothing
 24641 ;; This function is called by:
 24642 ;;		_WriteStr_I2C
 24643 ;;		_ReadStr_I2C
 24644 ;;		_I2C_Send
 24645 ;;		_LCD_WriteStr
 24646 ;;		_LCD_SetBackLight_Brightness
 24647 ;;		_LCD_SetContrast
 24648 ;;		_LCD_SetCursor_Position
 24649 ;; This function uses a non-reentrant model
 24650 ;;
 24651                           
 24652                           	psect	text142
 24653  0051B8                     __ptext142:
 24654                           	opt stack 0
 24655  0051B8                     _IdleI2C:
 24656                           	opt stack 0
 24657  0051B8  FFFF               	dw	65535	; assembler added errata NOP
 24658                           
 24659                           ;i2c_FRM.c: 36: continue;
 24660                           
 24661                           ;i2c_FRM.c: 35: while ( ( SSPCON2 & 0x1F ) | ( SSPSTATbits.R_W ) )
 24662                           
 24663                           ;incstack = 0
 24664  0051BA  A4C7               	btfss	4039,2,c	;volatile
 24665  0051BC  D003               	goto	u7940
 24666  0051BE  6A19               	clrf	??_IdleI2C& (0+255),c
 24667  0051C0  2A19               	incf	??_IdleI2C& (0+255),f,c
 24668  0051C2  D002               	goto	u7948
 24669  0051C4                     u7940:
 24670  0051C4  FFFF               	dw	65535	; assembler added errata NOP
 24671  0051C6  6A19               	clrf	??_IdleI2C& (0+255),c
 24672  0051C8                     u7948:
 24673  0051C8  FFFF               	dw	65535	; assembler added errata NOP
 24674  0051CA  50C5               	movf	4037,w,c	;volatile
 24675  0051CC  0B1F               	andlw	31
 24676  0051CE  1019               	iorwf	??_IdleI2C,w,c
 24677  0051D0  0900               	iorlw	0
 24678  0051D2  B4D8               	btfsc	status,2,c
 24679  0051D4  0012               	return		;funcret
 24680  0051D6  FFFF               	dw	65535	; assembler added errata NOP
 24681  0051D8  D7EF               	goto	_IdleI2C
 24682  0051DA  FFFF               	dw	65535	; errata NOP
 24683  0051DC                     __end_of_IdleI2C:
 24684                           	opt stack 0
 24685                           tosu	equ	0xFFF
 24686                           tosh	equ	0xFFE
 24687                           tosl	equ	0xFFD
 24688                           pclath	equ	0xFFA
 24689                           tblptru	equ	0xFF8
 24690                           tblptrh	equ	0xFF7
 24691                           tblptrl	equ	0xFF6
 24692                           tablat	equ	0xFF5
 24693                           prodh	equ	0xFF4
 24694                           prodl	equ	0xFF3
 24695                           intcon	equ	0xFF2
 24696                           postinc0	equ	0xFEE
 24697                           wreg	equ	0xFE8
 24698                           indf1	equ	0xFE7
 24699                           fsr1h	equ	0xFE2
 24700                           fsr1l	equ	0xFE1
 24701                           indf2	equ	0xFDF
 24702                           postinc2	equ	0xFDE
 24703                           postdec2	equ	0xFDD
 24704                           plusw2	equ	0xFDB
 24705                           fsr2h	equ	0xFDA
 24706                           fsr2l	equ	0xFD9
 24707                           status	equ	0xFD8
 24708                           
 24709 ;; *************** function _CloseI2C *****************
 24710 ;; Defined at:
 24711 ;;		line 179 in file "i2c_FRM.c"
 24712 ;; Parameters:    Size  Location     Type
 24713 ;;		None
 24714 ;; Auto vars:     Size  Location     Type
 24715 ;;		None
 24716 ;; Return value:  Size  Location     Type
 24717 ;;                  1    wreg      void 
 24718 ;; Registers used:
 24719 ;;		status,2, status,0
 24720 ;; Tracked objects:
 24721 ;;		On entry : 0/0
 24722 ;;		On exit  : 0/0
 24723 ;;		Unchanged: 0/0
 24724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24725 ;;      Params:         0       0       0       0       0       0       0
 24726 ;;      Locals:         0       0       0       0       0       0       0
 24727 ;;      Temps:          0       0       0       0       0       0       0
 24728 ;;      Totals:         0       0       0       0       0       0       0
 24729 ;;Total ram usage:        0 bytes
 24730 ;; Hardware stack levels used:    1
 24731 ;; Hardware stack levels required when called:    1
 24732 ;; This function calls:
 24733 ;;		Nothing
 24734 ;; This function is called by:
 24735 ;;		_WriteStr_I2C
 24736 ;;		_ReadStr_I2C
 24737 ;;		_I2C_Send
 24738 ;;		_LCD_WriteStr
 24739 ;;		_LCD_SetBackLight_Brightness
 24740 ;;		_LCD_SetContrast
 24741 ;;		_LCD_SetCursor_Position
 24742 ;; This function uses a non-reentrant model
 24743 ;;
 24744                           
 24745                           	psect	text143
 24746  004D26                     __ptext143:
 24747                           	opt stack 0
 24748  004D26                     _CloseI2C:
 24749                           	opt stack 0
 24750  004D26  FFFF               	dw	65535	; assembler added errata NOP
 24751                           
 24752                           ;i2c_FRM.c: 181: SSPCON1 &= 0xDF;
 24753                           
 24754                           ;incstack = 0
 24755  004D28  9AC6               	bcf	4038,5,c	;volatile
 24756  004D2A  0012               	return		;funcret
 24757  004D2C  FFFF               	dw	65535	; errata NOP
 24758  004D2E                     __end_of_CloseI2C:
 24759                           	opt stack 0
 24760                           tosu	equ	0xFFF
 24761                           tosh	equ	0xFFE
 24762                           tosl	equ	0xFFD
 24763                           pclath	equ	0xFFA
 24764                           tblptru	equ	0xFF8
 24765                           tblptrh	equ	0xFF7
 24766                           tblptrl	equ	0xFF6
 24767                           tablat	equ	0xFF5
 24768                           prodh	equ	0xFF4
 24769                           prodl	equ	0xFF3
 24770                           intcon	equ	0xFF2
 24771                           postinc0	equ	0xFEE
 24772                           wreg	equ	0xFE8
 24773                           indf1	equ	0xFE7
 24774                           fsr1h	equ	0xFE2
 24775                           fsr1l	equ	0xFE1
 24776                           indf2	equ	0xFDF
 24777                           postinc2	equ	0xFDE
 24778                           postdec2	equ	0xFDD
 24779                           plusw2	equ	0xFDB
 24780                           fsr2h	equ	0xFDA
 24781                           fsr2l	equ	0xFD9
 24782                           status	equ	0xFD8
 24783                           
 24784 ;; *************** function _Get_Voltage_Vin *****************
 24785 ;; Defined at:
 24786 ;;		line 139 in file "Get_Voltages.c"
 24787 ;; Parameters:    Size  Location     Type
 24788 ;;		None
 24789 ;; Auto vars:     Size  Location     Type
 24790 ;;		None
 24791 ;; Return value:  Size  Location     Type
 24792 ;;                  3   24[COMRAM] float 
 24793 ;; Registers used:
 24794 ;;		None
 24795 ;; Tracked objects:
 24796 ;;		On entry : 0/0
 24797 ;;		On exit  : 0/0
 24798 ;;		Unchanged: 0/0
 24799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24800 ;;      Params:         3       0       0       0       0       0       0
 24801 ;;      Locals:         0       0       0       0       0       0       0
 24802 ;;      Temps:          0       0       0       0       0       0       0
 24803 ;;      Totals:         3       0       0       0       0       0       0
 24804 ;;Total ram usage:        3 bytes
 24805 ;; Hardware stack levels used:    1
 24806 ;; Hardware stack levels required when called:    1
 24807 ;; This function calls:
 24808 ;;		Nothing
 24809 ;; This function is called by:
 24810 ;;		_reset_var
 24811 ;;		_get_list
 24812 ;;		_main
 24813 ;;		_Display_Data
 24814 ;;		_reset_max_min
 24815 ;; This function uses a non-reentrant model
 24816 ;;
 24817                           
 24818                           	psect	text144
 24819  004D84                     __ptext144:
 24820                           	opt stack 0
 24821  004D84                     _Get_Voltage_Vin:
 24822                           	opt stack 0
 24823  004D84  FFFF               	dw	65535	; assembler added errata NOP
 24824                           
 24825                           ;Get_Voltages.c: 141: return Vin;
 24826                           
 24827                           ;incstack = 0
 24828  004D86  C033  F019         	movff	_Vin,?_Get_Voltage_Vin
 24829  004D8A  C034  F01A         	movff	_Vin+1,?_Get_Voltage_Vin+1
 24830  004D8E  C035  F01B         	movff	_Vin+2,?_Get_Voltage_Vin+2
 24831  004D92  0012               	return		;funcret
 24832  004D94  FFFF               	dw	65535	; errata NOP
 24833  004D96                     __end_of_Get_Voltage_Vin:
 24834                           	opt stack 0
 24835                           tosu	equ	0xFFF
 24836                           tosh	equ	0xFFE
 24837                           tosl	equ	0xFFD
 24838                           pclath	equ	0xFFA
 24839                           tblptru	equ	0xFF8
 24840                           tblptrh	equ	0xFF7
 24841                           tblptrl	equ	0xFF6
 24842                           tablat	equ	0xFF5
 24843                           prodh	equ	0xFF4
 24844                           prodl	equ	0xFF3
 24845                           intcon	equ	0xFF2
 24846                           postinc0	equ	0xFEE
 24847                           wreg	equ	0xFE8
 24848                           indf1	equ	0xFE7
 24849                           fsr1h	equ	0xFE2
 24850                           fsr1l	equ	0xFE1
 24851                           indf2	equ	0xFDF
 24852                           postinc2	equ	0xFDE
 24853                           postdec2	equ	0xFDD
 24854                           plusw2	equ	0xFDB
 24855                           fsr2h	equ	0xFDA
 24856                           fsr2l	equ	0xFD9
 24857                           status	equ	0xFD8
 24858                           
 24859 ;; *************** function _Control_Loop *****************
 24860 ;; Defined at:
 24861 ;;		line 265 in file "main.c"
 24862 ;; Parameters:    Size  Location     Type
 24863 ;;		None
 24864 ;; Auto vars:     Size  Location     Type
 24865 ;;  Control_Out     3   54[BANK0 ] float 
 24866 ;;  voltage         3   51[BANK0 ] float 
 24867 ;; Return value:  Size  Location     Type
 24868 ;;                  1    wreg      void 
 24869 ;; Registers used:
 24870 ;;		wreg, status,2, status,0, cstack
 24871 ;; Tracked objects:
 24872 ;;		On entry : 0/0
 24873 ;;		On exit  : 0/0
 24874 ;;		Unchanged: 0/0
 24875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24876 ;;      Params:         0       0       0       0       0       0       0
 24877 ;;      Locals:         0       6       0       0       0       0       0
 24878 ;;      Temps:          0       0       0       0       0       0       0
 24879 ;;      Totals:         0       6       0       0       0       0       0
 24880 ;;Total ram usage:        6 bytes
 24881 ;; Hardware stack levels used:    1
 24882 ;; Hardware stack levels required when called:    4
 24883 ;; This function calls:
 24884 ;;		_Get_Control_Voltage
 24885 ;;		_PID_Controller
 24886 ;;		___ftge
 24887 ;;		___ftneg
 24888 ;;		_get_PID_deadband
 24889 ;; This function is called by:
 24890 ;;		_main
 24891 ;; This function uses a non-reentrant model
 24892 ;;
 24893                           
 24894                           	psect	text145
 24895  006A5E                     __ptext145:
 24896                           	opt stack 0
 24897  006A5E                     _Control_Loop:
 24898                           	opt stack 0
 24899  006A5E  FFFF               	dw	65535	; assembler added errata NOP
 24900                           
 24901                           ;main.c: 267: float voltage, Control_Out;
 24902                           ;main.c: 269: voltage = Get_Control_Voltage();
 24903                           
 24904                           ;incstack = 0
 24905  006A60  EC52  F039         	call	_Get_Control_Voltage	;wreg free
 24906  006A64  C078  F093         	movff	?_Get_Control_Voltage,Control_Loop@voltage
 24907  006A68  C079  F094         	movff	?_Get_Control_Voltage+1,Control_Loop@voltage+1
 24908  006A6C  C07A  F095         	movff	?_Get_Control_Voltage+2,Control_Loop@voltage+2
 24909                           
 24910                           ;main.c: 270: Control_Out = PID_Controller(voltage);
 24911  006A70  C093  F087         	movff	Control_Loop@voltage,PID_Controller@val
 24912  006A74  C094  F088         	movff	Control_Loop@voltage+1,PID_Controller@val+1
 24913  006A78  C095  F089         	movff	Control_Loop@voltage+2,PID_Controller@val+2
 24914  006A7C  EC85  F01E         	call	_PID_Controller	;wreg free
 24915  006A80  C087  F096         	movff	?_PID_Controller,Control_Loop@Control_Out
 24916  006A84  C088  F097         	movff	?_PID_Controller+1,Control_Loop@Control_Out+1
 24917  006A88  C089  F098         	movff	?_PID_Controller+2,Control_Loop@Control_Out+2
 24918                           
 24919                           ;main.c: 272: if (voltage != 0.0) {
 24920  006A8C  0100               	movlb	0	; () banked
 24921  006A8E  5193               	movf	Control_Loop@voltage& (0+255),w,b
 24922  006A90  0100               	movlb	0	; () banked
 24923  006A92  1194               	iorwf	(Control_Loop@voltage+1)& (0+255),w,b
 24924  006A94  0100               	movlb	0	; () banked
 24925  006A96  1195               	iorwf	(Control_Loop@voltage+2)& (0+255),w,b
 24926  006A98  B4D8               	btfsc	status,2,c
 24927  006A9A  D03D               	goto	l1012
 24928                           
 24929                           ; BSR set to: 0
 24930                           ;main.c: 273: if (Control_Out > get_PID_deadband()) {
 24931  006A9C  ECB9  F026         	call	_get_PID_deadband	;wreg free
 24932  006AA0  C019  F01F         	movff	?_get_PID_deadband,___ftge@ff1
 24933  006AA4  C01A  F020         	movff	?_get_PID_deadband+1,___ftge@ff1+1
 24934  006AA8  C01B  F021         	movff	?_get_PID_deadband+2,___ftge@ff1+2
 24935  006AAC  C096  F022         	movff	Control_Loop@Control_Out,___ftge@ff2
 24936  006AB0  C097  F023         	movff	Control_Loop@Control_Out+1,___ftge@ff2+1
 24937  006AB4  C098  F024         	movff	Control_Loop@Control_Out+2,___ftge@ff2+2
 24938  006AB8  ECF6  F031         	call	___ftge	;wreg free
 24939  006ABC  B0D8               	btfsc	status,0,c
 24940  006ABE  D007               	goto	l1010
 24941                           
 24942                           ;main.c: 274: Outputs.led14 = 1;
 24943  006AC0  0100               	movlb	0	; () banked
 24944  006AC2  8BEF               	bsf	(_Outputs+2)& (0+255),5,b
 24945                           
 24946                           ;main.c: 275: Outputs.led13 = 0;
 24947  006AC4  0100               	movlb	0	; () banked
 24948  006AC6  99EF               	bcf	(_Outputs+2)& (0+255),4,b
 24949                           
 24950                           ;main.c: 276: Outputs.rly1 = 1;
 24951  006AC8  0100               	movlb	0	; () banked
 24952  006ACA  81EE               	bsf	(_Outputs+1)& (0+255),0,b
 24953  006ACC  D02B               	goto	L32
 24954  006ACE                     l1010:
 24955  006ACE  FFFF               	dw	65535	; assembler added errata NOP
 24956                           
 24957                           ; BSR set to: 0
 24958  006AD0  C096  F01F         	movff	Control_Loop@Control_Out,___ftge@ff1
 24959  006AD4  C097  F020         	movff	Control_Loop@Control_Out+1,___ftge@ff1+1
 24960  006AD8  C098  F021         	movff	Control_Loop@Control_Out+2,___ftge@ff1+2
 24961  006ADC  ECB9  F026         	call	_get_PID_deadband	;wreg free
 24962  006AE0  C019  F01C         	movff	?_get_PID_deadband,___ftneg@f1
 24963  006AE4  C01A  F01D         	movff	?_get_PID_deadband+1,___ftneg@f1+1
 24964  006AE8  C01B  F01E         	movff	?_get_PID_deadband+2,___ftneg@f1+2
 24965  006AEC  EC5F  F029         	call	___ftneg	;wreg free
 24966  006AF0  C01C  F022         	movff	?___ftneg,___ftge@ff2
 24967  006AF4  C01D  F023         	movff	?___ftneg+1,___ftge@ff2+1
 24968  006AF8  C01E  F024         	movff	?___ftneg+2,___ftge@ff2+2
 24969  006AFC  ECF6  F031         	call	___ftge	;wreg free
 24970  006B00  B0D8               	btfsc	status,0,c
 24971  006B02  D009               	goto	l1012
 24972                           
 24973                           ;main.c: 279: Outputs.led14 = 0;
 24974  006B04  0100               	movlb	0	; () banked
 24975  006B06  9BEF               	bcf	(_Outputs+2)& (0+255),5,b
 24976                           
 24977                           ;main.c: 280: Outputs.led13 = 1;
 24978  006B08  0100               	movlb	0	; () banked
 24979  006B0A  89EF               	bsf	(_Outputs+2)& (0+255),4,b
 24980                           
 24981                           ;main.c: 281: Outputs.rly1 = 0;
 24982  006B0C  0100               	movlb	0	; () banked
 24983  006B0E  91EE               	bcf	(_Outputs+1)& (0+255),0,b
 24984                           
 24985                           ;main.c: 282: Outputs.rly2 = 1;
 24986  006B10  0100               	movlb	0	; () banked
 24987  006B12  83EE               	bsf	(_Outputs+1)& (0+255),1,b
 24988                           
 24989                           ;main.c: 283: } else {
 24990  006B14  D00A               	goto	l1014
 24991  006B16                     l1012:
 24992  006B16  FFFF               	dw	65535	; assembler added errata NOP
 24993                           
 24994                           ; BSR set to: 0
 24995                           ;main.c: 290: Outputs.led14 = 0;
 24996                           
 24997                           ; BSR set to: 0
 24998                           ;main.c: 288: }
 24999                           ;main.c: 289: } else {
 25000                           
 25001                           ; BSR set to: 0
 25002                           
 25003                           ;main.c: 287: Outputs.rly2 = 0;
 25004                           
 25005                           ;main.c: 286: Outputs.rly1 = 0;
 25006                           
 25007                           ;main.c: 285: Outputs.led13 = 0;
 25008                           
 25009                           ;main.c: 284: Outputs.led14 = 0;
 25010  006B18  0100               	movlb	0	; () banked
 25011  006B1A  9BEF               	bcf	(_Outputs+2)& (0+255),5,b
 25012                           
 25013                           ;main.c: 291: Outputs.led13 = 0;
 25014  006B1C  0100               	movlb	0	; () banked
 25015  006B1E  99EF               	bcf	(_Outputs+2)& (0+255),4,b
 25016                           
 25017                           ;main.c: 292: Outputs.rly1 = 0;
 25018  006B20  0100               	movlb	0	; () banked
 25019  006B22  91EE               	bcf	(_Outputs+1)& (0+255),0,b
 25020  006B24                     L32:
 25021  006B24  FFFF               	dw	65535	; assembler added errata NOP
 25022                           
 25023                           ;main.c: 293: Outputs.rly2 = 0;
 25024  006B26  0100               	movlb	0	; () banked
 25025  006B28  93EE               	bcf	(_Outputs+1)& (0+255),1,b
 25026  006B2A                     l1014:
 25027  006B2A  FFFF               	dw	65535	; assembler added errata NOP
 25028                           
 25029                           ; BSR set to: 0
 25030                           
 25031                           ; BSR set to: 0
 25032  006B2C  0012               	return		;funcret
 25033  006B2E  FFFF               	dw	65535	; errata NOP
 25034  006B30                     __end_of_Control_Loop:
 25035                           	opt stack 0
 25036                           tosu	equ	0xFFF
 25037                           tosh	equ	0xFFE
 25038                           tosl	equ	0xFFD
 25039                           pclath	equ	0xFFA
 25040                           tblptru	equ	0xFF8
 25041                           tblptrh	equ	0xFF7
 25042                           tblptrl	equ	0xFF6
 25043                           tablat	equ	0xFF5
 25044                           prodh	equ	0xFF4
 25045                           prodl	equ	0xFF3
 25046                           intcon	equ	0xFF2
 25047                           postinc0	equ	0xFEE
 25048                           wreg	equ	0xFE8
 25049                           indf1	equ	0xFE7
 25050                           fsr1h	equ	0xFE2
 25051                           fsr1l	equ	0xFE1
 25052                           indf2	equ	0xFDF
 25053                           postinc2	equ	0xFDE
 25054                           postdec2	equ	0xFDD
 25055                           plusw2	equ	0xFDB
 25056                           fsr2h	equ	0xFDA
 25057                           fsr2l	equ	0xFD9
 25058                           status	equ	0xFD8
 25059                           
 25060 ;; *************** function _get_PID_deadband *****************
 25061 ;; Defined at:
 25062 ;;		line 50 in file "PID_Controller.c"
 25063 ;; Parameters:    Size  Location     Type
 25064 ;;		None
 25065 ;; Auto vars:     Size  Location     Type
 25066 ;;		None
 25067 ;; Return value:  Size  Location     Type
 25068 ;;                  3   24[COMRAM] float 
 25069 ;; Registers used:
 25070 ;;		None
 25071 ;; Tracked objects:
 25072 ;;		On entry : 0/0
 25073 ;;		On exit  : 0/0
 25074 ;;		Unchanged: 0/0
 25075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25076 ;;      Params:         3       0       0       0       0       0       0
 25077 ;;      Locals:         0       0       0       0       0       0       0
 25078 ;;      Temps:          0       0       0       0       0       0       0
 25079 ;;      Totals:         3       0       0       0       0       0       0
 25080 ;;Total ram usage:        3 bytes
 25081 ;; Hardware stack levels used:    1
 25082 ;; Hardware stack levels required when called:    1
 25083 ;; This function calls:
 25084 ;;		Nothing
 25085 ;; This function is called by:
 25086 ;;		_get_list
 25087 ;;		_Save_Variables
 25088 ;;		_Control_Loop
 25089 ;; This function uses a non-reentrant model
 25090 ;;
 25091                           
 25092                           	psect	text146
 25093  004D72                     __ptext146:
 25094                           	opt stack 0
 25095  004D72                     _get_PID_deadband:
 25096                           	opt stack 0
 25097  004D72  FFFF               	dw	65535	; assembler added errata NOP
 25098                           
 25099                           ;PID_Controller.c: 51: return deadband;
 25100                           
 25101                           ; BSR set to: 0
 25102                           ;incstack = 0
 25103  004D74  C104  F019         	movff	_deadband,?_get_PID_deadband
 25104  004D78  C105  F01A         	movff	_deadband+1,?_get_PID_deadband+1
 25105  004D7C  C106  F01B         	movff	_deadband+2,?_get_PID_deadband+2
 25106  004D80  0012               	return		;funcret
 25107  004D82  FFFF               	dw	65535	; errata NOP
 25108  004D84                     __end_of_get_PID_deadband:
 25109                           	opt stack 0
 25110                           tosu	equ	0xFFF
 25111                           tosh	equ	0xFFE
 25112                           tosl	equ	0xFFD
 25113                           pclath	equ	0xFFA
 25114                           tblptru	equ	0xFF8
 25115                           tblptrh	equ	0xFF7
 25116                           tblptrl	equ	0xFF6
 25117                           tablat	equ	0xFF5
 25118                           prodh	equ	0xFF4
 25119                           prodl	equ	0xFF3
 25120                           intcon	equ	0xFF2
 25121                           postinc0	equ	0xFEE
 25122                           wreg	equ	0xFE8
 25123                           indf1	equ	0xFE7
 25124                           fsr1h	equ	0xFE2
 25125                           fsr1l	equ	0xFE1
 25126                           indf2	equ	0xFDF
 25127                           postinc2	equ	0xFDE
 25128                           postdec2	equ	0xFDD
 25129                           plusw2	equ	0xFDB
 25130                           fsr2h	equ	0xFDA
 25131                           fsr2l	equ	0xFD9
 25132                           status	equ	0xFD8
 25133                           
 25134 ;; *************** function ___ftge *****************
 25135 ;; Defined at:
 25136 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
 25137 ;; Parameters:    Size  Location     Type
 25138 ;;  ff1             3   30[COMRAM] float 
 25139 ;;  ff2             3   33[COMRAM] float 
 25140 ;; Auto vars:     Size  Location     Type
 25141 ;;		None
 25142 ;; Return value:  Size  Location     Type
 25143 ;;		None               void
 25144 ;; Registers used:
 25145 ;;		wreg, status,2, status,0
 25146 ;; Tracked objects:
 25147 ;;		On entry : 0/0
 25148 ;;		On exit  : 0/0
 25149 ;;		Unchanged: 0/0
 25150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25151 ;;      Params:         6       0       0       0       0       0       0
 25152 ;;      Locals:         0       0       0       0       0       0       0
 25153 ;;      Temps:          3       0       0       0       0       0       0
 25154 ;;      Totals:         9       0       0       0       0       0       0
 25155 ;;Total ram usage:        9 bytes
 25156 ;; Hardware stack levels used:    1
 25157 ;; Hardware stack levels required when called:    1
 25158 ;; This function calls:
 25159 ;;		Nothing
 25160 ;; This function is called by:
 25161 ;;		_Check_VL_N
 25162 ;;		_Get_Voltage_Data
 25163 ;;		_Control_Loop
 25164 ;;		__doprnt
 25165 ;;		_strtod
 25166 ;; This function uses a non-reentrant model
 25167 ;;
 25168                           
 25169                           	psect	text147
 25170  0063EC                     __ptext147:
 25171                           	opt stack 0
 25172  0063EC                     ___ftge:
 25173                           	opt stack 0
 25174  0063EC  FFFF               	dw	65535	; assembler added errata NOP
 25175                           
 25176                           ;incstack = 0
 25177  0063EE  AE21               	btfss	___ftge@ff1+2,7,c
 25178  0063F0  D016               	goto	l1739
 25179  0063F2  C01F  F025         	movff	___ftge@ff1,??___ftge
 25180  0063F6  C020  F026         	movff	___ftge@ff1+1,??___ftge+1
 25181  0063FA  C021  F027         	movff	___ftge@ff1+2,??___ftge+2
 25182  0063FE  1E25               	comf	??___ftge,f,c
 25183  006400  1E26               	comf	??___ftge+1,f,c
 25184  006402  1E27               	comf	??___ftge+2,f,c
 25185  006404  2A25               	incf	??___ftge,f,c
 25186  006406  0E00               	movlw	0
 25187  006408  2226               	addwfc	??___ftge+1,f,c
 25188  00640A  2227               	addwfc	??___ftge+2,f,c
 25189  00640C  0E00               	movlw	0
 25190  00640E  2425               	addwf	??___ftge,w,c
 25191  006410  6E1F               	movwf	___ftge@ff1,c
 25192  006412  0E00               	movlw	0
 25193  006414  2026               	addwfc	??___ftge+1,w,c
 25194  006416  6E20               	movwf	___ftge@ff1+1,c
 25195  006418  0E80               	movlw	128
 25196  00641A  2027               	addwfc	??___ftge+2,w,c
 25197  00641C  6E21               	movwf	___ftge@ff1+2,c
 25198  00641E                     l1739:
 25199  00641E  FFFF               	dw	65535	; assembler added errata NOP
 25200  006420  AE24               	btfss	___ftge@ff2+2,7,c
 25201  006422  D016               	goto	l1740
 25202  006424  C022  F025         	movff	___ftge@ff2,??___ftge
 25203  006428  C023  F026         	movff	___ftge@ff2+1,??___ftge+1
 25204  00642C  C024  F027         	movff	___ftge@ff2+2,??___ftge+2
 25205  006430  1E25               	comf	??___ftge,f,c
 25206  006432  1E26               	comf	??___ftge+1,f,c
 25207  006434  1E27               	comf	??___ftge+2,f,c
 25208  006436  2A25               	incf	??___ftge,f,c
 25209  006438  0E00               	movlw	0
 25210  00643A  2226               	addwfc	??___ftge+1,f,c
 25211  00643C  2227               	addwfc	??___ftge+2,f,c
 25212  00643E  0E00               	movlw	0
 25213  006440  2425               	addwf	??___ftge,w,c
 25214  006442  6E22               	movwf	___ftge@ff2,c
 25215  006444  0E00               	movlw	0
 25216  006446  2026               	addwfc	??___ftge+1,w,c
 25217  006448  6E23               	movwf	___ftge@ff2+1,c
 25218  00644A  0E80               	movlw	128
 25219  00644C  2027               	addwfc	??___ftge+2,w,c
 25220  00644E  6E24               	movwf	___ftge@ff2+2,c
 25221  006450                     l1740:
 25222  006450  FFFF               	dw	65535	; assembler added errata NOP
 25223  006452  0E00               	movlw	0
 25224  006454  1A1F               	xorwf	___ftge@ff1,f,c
 25225  006456  0E00               	movlw	0
 25226  006458  1A20               	xorwf	___ftge@ff1+1,f,c
 25227  00645A  0E80               	movlw	128
 25228  00645C  1A21               	xorwf	___ftge@ff1+2,f,c
 25229  00645E  0E00               	movlw	0
 25230  006460  1A22               	xorwf	___ftge@ff2,f,c
 25231  006462  0E00               	movlw	0
 25232  006464  1A23               	xorwf	___ftge@ff2+1,f,c
 25233  006466  0E80               	movlw	128
 25234  006468  1A24               	xorwf	___ftge@ff2+2,f,c
 25235  00646A  5022               	movf	___ftge@ff2,w,c
 25236  00646C  5C1F               	subwf	___ftge@ff1,w,c
 25237  00646E  5023               	movf	___ftge@ff2+1,w,c
 25238  006470  5820               	subwfb	___ftge@ff1+1,w,c
 25239  006472  5024               	movf	___ftge@ff2+2,w,c
 25240  006474  5821               	subwfb	___ftge@ff1+2,w,c
 25241  006476  B0D8               	btfsc	status,0,c
 25242  006478  D002               	goto	l8510
 25243  00647A  90D8               	bcf	status,0,c
 25244  00647C  D002               	goto	l8512
 25245  00647E                     l8510:
 25246  00647E  FFFF               	dw	65535	; assembler added errata NOP
 25247  006480  80D8               	bsf	status,0,c
 25248  006482                     l8512:
 25249  006482  FFFF               	dw	65535	; assembler added errata NOP
 25250  006484  0012               	return		;funcret
 25251  006486  FFFF               	dw	65535	; errata NOP
 25252  006488                     __end_of___ftge:
 25253                           	opt stack 0
 25254                           tosu	equ	0xFFF
 25255                           tosh	equ	0xFFE
 25256                           tosl	equ	0xFFD
 25257                           pclath	equ	0xFFA
 25258                           tblptru	equ	0xFF8
 25259                           tblptrh	equ	0xFF7
 25260                           tblptrl	equ	0xFF6
 25261                           tablat	equ	0xFF5
 25262                           prodh	equ	0xFF4
 25263                           prodl	equ	0xFF3
 25264                           intcon	equ	0xFF2
 25265                           postinc0	equ	0xFEE
 25266                           wreg	equ	0xFE8
 25267                           indf1	equ	0xFE7
 25268                           fsr1h	equ	0xFE2
 25269                           fsr1l	equ	0xFE1
 25270                           indf2	equ	0xFDF
 25271                           postinc2	equ	0xFDE
 25272                           postdec2	equ	0xFDD
 25273                           plusw2	equ	0xFDB
 25274                           fsr2h	equ	0xFDA
 25275                           fsr2l	equ	0xFD9
 25276                           status	equ	0xFD8
 25277                           
 25278 ;; *************** function _PID_Controller *****************
 25279 ;; Defined at:
 25280 ;;		line 55 in file "PID_Controller.c"
 25281 ;; Parameters:    Size  Location     Type
 25282 ;;  val             3   39[BANK0 ] float 
 25283 ;; Auto vars:     Size  Location     Type
 25284 ;;  abs_error       3    0        float 
 25285 ;; Return value:  Size  Location     Type
 25286 ;;                  3   39[BANK0 ] float 
 25287 ;; Registers used:
 25288 ;;		wreg, status,2, status,0, cstack
 25289 ;; Tracked objects:
 25290 ;;		On entry : 0/0
 25291 ;;		On exit  : 0/0
 25292 ;;		Unchanged: 0/0
 25293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25294 ;;      Params:         0       3       0       0       0       0       0
 25295 ;;      Locals:         0       9       0       0       0       0       0
 25296 ;;      Temps:          0       0       0       0       0       0       0
 25297 ;;      Totals:         0      12       0       0       0       0       0
 25298 ;;Total ram usage:       12 bytes
 25299 ;; Hardware stack levels used:    1
 25300 ;; Hardware stack levels required when called:    3
 25301 ;; This function calls:
 25302 ;;		___ftadd
 25303 ;;		___ftdiv
 25304 ;;		___ftmul
 25305 ;;		___ftneg
 25306 ;; This function is called by:
 25307 ;;		_Control_Loop
 25308 ;; This function uses a non-reentrant model
 25309 ;;
 25310                           
 25311                           	psect	text148
 25312  003D0A                     __ptext148:
 25313                           	opt stack 0
 25314  003D0A                     _PID_Controller:
 25315                           	opt stack 0
 25316  003D0A  FFFF               	dw	65535	; assembler added errata NOP
 25317                           
 25318                           ;PID_Controller.c: 56: float abs_error;
 25319                           ;PID_Controller.c: 59: error = setpoint - val;
 25320                           
 25321                           ;incstack = 0
 25322  003D0C  C087  F01C         	movff	PID_Controller@val,___ftneg@f1
 25323  003D10  C088  F01D         	movff	PID_Controller@val+1,___ftneg@f1+1
 25324  003D14  C089  F01E         	movff	PID_Controller@val+2,___ftneg@f1+2
 25325  003D18  EC5F  F029         	call	___ftneg	;wreg free
 25326  003D1C  C01C  F060         	movff	?___ftneg,___ftadd@f1
 25327  003D20  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 25328  003D24  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 25329  003D28  C107  F063         	movff	_setpoint,___ftadd@f2
 25330  003D2C  C108  F064         	movff	_setpoint+1,___ftadd@f2+1
 25331  003D30  C109  F065         	movff	_setpoint+2,___ftadd@f2+2
 25332  003D34  ECD0  F019         	call	___ftadd	;wreg free
 25333  003D38  C060  F0F1         	movff	?___ftadd,_error
 25334  003D3C  C061  F0F2         	movff	?___ftadd+1,_error+1
 25335  003D40  C062  F0F3         	movff	?___ftadd+2,_error+2
 25336                           
 25337                           ;PID_Controller.c: 60: if(ti!=0){
 25338  003D44  5030               	movf	_ti,w,c
 25339  003D46  1031               	iorwf	_ti+1,w,c
 25340  003D48  1032               	iorwf	_ti+2,w,c
 25341  003D4A  B4D8               	btfsc	status,2,c
 25342  003D4C  D037               	goto	l1100
 25343                           
 25344                           ;PID_Controller.c: 61: integral = (last_integral + error * T_sample*ti);
 25345  003D4E  C119  F07B         	movff	_T_sample,___ftmul@f2
 25346  003D52  C11A  F07C         	movff	_T_sample+1,___ftmul@f2+1
 25347  003D56  C11B  F07D         	movff	_T_sample+2,___ftmul@f2+2
 25348  003D5A  C0F1  F078         	movff	_error,___ftmul@f1
 25349  003D5E  C0F2  F079         	movff	_error+1,___ftmul@f1+1
 25350  003D62  C0F3  F07A         	movff	_error+2,___ftmul@f1+2
 25351  003D66  EC53  F03C         	call	___ftmul	;wreg free
 25352  003D6A  C078  F08A         	movff	?___ftmul,_PID_Controller$3543
 25353  003D6E  C079  F08B         	movff	?___ftmul+1,_PID_Controller$3543+1
 25354  003D72  C07A  F08C         	movff	?___ftmul+2,_PID_Controller$3543+2
 25355                           
 25356                           ;PID_Controller.c: 61: integral = (last_integral + error * T_sample*ti);
 25357  003D76  C030  F07B         	movff	_ti,___ftmul@f2
 25358  003D7A  C031  F07C         	movff	_ti+1,___ftmul@f2+1
 25359  003D7E  C032  F07D         	movff	_ti+2,___ftmul@f2+2
 25360  003D82  C08A  F078         	movff	_PID_Controller$3543,___ftmul@f1
 25361  003D86  C08B  F079         	movff	_PID_Controller$3543+1,___ftmul@f1+1
 25362  003D8A  C08C  F07A         	movff	_PID_Controller$3543+2,___ftmul@f1+2
 25363  003D8E  EC53  F03C         	call	___ftmul	;wreg free
 25364  003D92  C078  F060         	movff	?___ftmul,___ftadd@f1
 25365  003D96  C079  F061         	movff	?___ftmul+1,___ftadd@f1+1
 25366  003D9A  C07A  F062         	movff	?___ftmul+2,___ftadd@f1+2
 25367  003D9E  C10A  F063         	movff	_last_integral,___ftadd@f2
 25368  003DA2  C10B  F064         	movff	_last_integral+1,___ftadd@f2+1
 25369  003DA6  C10C  F065         	movff	_last_integral+2,___ftadd@f2+2
 25370  003DAA  ECD0  F019         	call	___ftadd	;wreg free
 25371  003DAE  C060  F113         	movff	?___ftadd,_integral
 25372  003DB2  C061  F114         	movff	?___ftadd+1,_integral+1
 25373  003DB6  C062  F115         	movff	?___ftadd+2,_integral+2
 25374                           
 25375                           ;PID_Controller.c: 62: }
 25376  003DBA  D00A               	goto	l1101
 25377  003DBC                     l1100:
 25378  003DBC  FFFF               	dw	65535	; assembler added errata NOP
 25379                           
 25380                           ;PID_Controller.c: 63: else{
 25381                           ;PID_Controller.c: 64: integral=0.0;
 25382  003DBE  0E00               	movlw	0
 25383  003DC0  0101               	movlb	1	; () banked
 25384  003DC2  6F13               	movwf	_integral& (0+255),b
 25385  003DC4  0E00               	movlw	0
 25386  003DC6  0101               	movlb	1	; () banked
 25387  003DC8  6F14               	movwf	(_integral+1)& (0+255),b
 25388  003DCA  0E00               	movlw	0
 25389  003DCC  0101               	movlb	1	; () banked
 25390  003DCE  6F15               	movwf	(_integral+2)& (0+255),b
 25391  003DD0                     l1101:
 25392  003DD0  FFFF               	dw	65535	; assembler added errata NOP
 25393                           
 25394                           ;PID_Controller.c: 65: }
 25395                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25396                           
 25397                           ; BSR set to: 1
 25398  003DD2  C119  F06C         	movff	_T_sample,___ftdiv@f2
 25399  003DD6  C11A  F06D         	movff	_T_sample+1,___ftdiv@f2+1
 25400  003DDA  C11B  F06E         	movff	_T_sample+2,___ftdiv@f2+2
 25401  003DDE  C11C  F07B         	movff	_td,___ftmul@f2
 25402  003DE2  C11D  F07C         	movff	_td+1,___ftmul@f2+1
 25403  003DE6  C11E  F07D         	movff	_td+2,___ftmul@f2+2
 25404  003DEA  C0F1  F063         	movff	_error,___ftadd@f2
 25405  003DEE  C0F2  F064         	movff	_error+1,___ftadd@f2+1
 25406  003DF2  C0F3  F065         	movff	_error+2,___ftadd@f2+2
 25407  003DF6  C10D  F01C         	movff	_last_error,___ftneg@f1
 25408  003DFA  C10E  F01D         	movff	_last_error+1,___ftneg@f1+1
 25409  003DFE  C10F  F01E         	movff	_last_error+2,___ftneg@f1+2
 25410  003E02  EC5F  F029         	call	___ftneg	;wreg free
 25411  003E06  C01C  F060         	movff	?___ftneg,___ftadd@f1
 25412  003E0A  C01D  F061         	movff	?___ftneg+1,___ftadd@f1+1
 25413  003E0E  C01E  F062         	movff	?___ftneg+2,___ftadd@f1+2
 25414  003E12  ECD0  F019         	call	___ftadd	;wreg free
 25415  003E16  C060  F078         	movff	?___ftadd,___ftmul@f1
 25416  003E1A  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 25417  003E1E  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 25418  003E22  EC53  F03C         	call	___ftmul	;wreg free
 25419  003E26  C078  F069         	movff	?___ftmul,___ftdiv@f1
 25420  003E2A  C079  F06A         	movff	?___ftmul+1,___ftdiv@f1+1
 25421  003E2E  C07A  F06B         	movff	?___ftmul+2,___ftdiv@f1+2
 25422  003E32  ECB0  F03B         	call	___ftdiv	;wreg free
 25423  003E36  C069  F08D         	movff	?___ftdiv,_PID_Controller$3544
 25424  003E3A  C06A  F08E         	movff	?___ftdiv+1,_PID_Controller$3544+1
 25425  003E3E  C06B  F08F         	movff	?___ftdiv+2,_PID_Controller$3544+2
 25426                           
 25427                           ;PID_Controller.c: 65: }
 25428                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25429  003E42  C0F1  F063         	movff	_error,___ftadd@f2
 25430  003E46  C0F2  F064         	movff	_error+1,___ftadd@f2+1
 25431  003E4A  C0F3  F065         	movff	_error+2,___ftadd@f2+2
 25432  003E4E  C08D  F060         	movff	_PID_Controller$3544,___ftadd@f1
 25433  003E52  C08E  F061         	movff	_PID_Controller$3544+1,___ftadd@f1+1
 25434  003E56  C08F  F062         	movff	_PID_Controller$3544+2,___ftadd@f1+2
 25435  003E5A  ECD0  F019         	call	___ftadd	;wreg free
 25436  003E5E  C060  F090         	movff	?___ftadd,_PID_Controller$3545
 25437  003E62  C061  F091         	movff	?___ftadd+1,_PID_Controller$3545+1
 25438  003E66  C062  F092         	movff	?___ftadd+2,_PID_Controller$3545+2
 25439                           
 25440                           ;PID_Controller.c: 65: }
 25441                           ;PID_Controller.c: 66: output = Kp * (error + integral + td * (error - last_error) / T_s
      +                          ample);
 25442  003E6A  C113  F063         	movff	_integral,___ftadd@f2
 25443  003E6E  C114  F064         	movff	_integral+1,___ftadd@f2+1
 25444  003E72  C115  F065         	movff	_integral+2,___ftadd@f2+2
 25445  003E76  C090  F060         	movff	_PID_Controller$3545,___ftadd@f1
 25446  003E7A  C091  F061         	movff	_PID_Controller$3545+1,___ftadd@f1+1
 25447  003E7E  C092  F062         	movff	_PID_Controller$3545+2,___ftadd@f1+2
 25448  003E82  ECD0  F019         	call	___ftadd	;wreg free
 25449  003E86  C060  F078         	movff	?___ftadd,___ftmul@f1
 25450  003E8A  C061  F079         	movff	?___ftadd+1,___ftmul@f1+1
 25451  003E8E  C062  F07A         	movff	?___ftadd+2,___ftmul@f1+2
 25452  003E92  C11F  F07B         	movff	_Kp,___ftmul@f2
 25453  003E96  C120  F07C         	movff	_Kp+1,___ftmul@f2+1
 25454  003E9A  C121  F07D         	movff	_Kp+2,___ftmul@f2+2
 25455  003E9E  EC53  F03C         	call	___ftmul	;wreg free
 25456  003EA2  C078  F116         	movff	?___ftmul,_output
 25457  003EA6  C079  F117         	movff	?___ftmul+1,_output+1
 25458  003EAA  C07A  F118         	movff	?___ftmul+2,_output+2
 25459                           
 25460                           ;PID_Controller.c: 67: last_output = output;
 25461  003EAE  C116  F110         	movff	_output,_last_output
 25462  003EB2  C117  F111         	movff	_output+1,_last_output+1
 25463  003EB6  C118  F112         	movff	_output+2,_last_output+2
 25464                           
 25465                           ;PID_Controller.c: 68: last_error = error;
 25466  003EBA  C0F1  F10D         	movff	_error,_last_error
 25467  003EBE  C0F2  F10E         	movff	_error+1,_last_error+1
 25468  003EC2  C0F3  F10F         	movff	_error+2,_last_error+2
 25469                           
 25470                           ;PID_Controller.c: 69: last_integral = integral;
 25471  003EC6  C113  F10A         	movff	_integral,_last_integral
 25472  003ECA  C114  F10B         	movff	_integral+1,_last_integral+1
 25473  003ECE  C115  F10C         	movff	_integral+2,_last_integral+2
 25474                           
 25475                           ;PID_Controller.c: 70: return output;
 25476  003ED2  C116  F087         	movff	_output,?_PID_Controller
 25477  003ED6  C117  F088         	movff	_output+1,?_PID_Controller+1
 25478  003EDA  C118  F089         	movff	_output+2,?_PID_Controller+2
 25479  003EDE  0012               	return		;funcret
 25480  003EE0  FFFF               	dw	65535	; errata NOP
 25481  003EE2                     __end_of_PID_Controller:
 25482                           	opt stack 0
 25483                           tosu	equ	0xFFF
 25484                           tosh	equ	0xFFE
 25485                           tosl	equ	0xFFD
 25486                           pclath	equ	0xFFA
 25487                           tblptru	equ	0xFF8
 25488                           tblptrh	equ	0xFF7
 25489                           tblptrl	equ	0xFF6
 25490                           tablat	equ	0xFF5
 25491                           prodh	equ	0xFF4
 25492                           prodl	equ	0xFF3
 25493                           intcon	equ	0xFF2
 25494                           postinc0	equ	0xFEE
 25495                           wreg	equ	0xFE8
 25496                           indf1	equ	0xFE7
 25497                           fsr1h	equ	0xFE2
 25498                           fsr1l	equ	0xFE1
 25499                           indf2	equ	0xFDF
 25500                           postinc2	equ	0xFDE
 25501                           postdec2	equ	0xFDD
 25502                           plusw2	equ	0xFDB
 25503                           fsr2h	equ	0xFDA
 25504                           fsr2l	equ	0xFD9
 25505                           status	equ	0xFD8
 25506                           
 25507 ;; *************** function ___ftneg *****************
 25508 ;; Defined at:
 25509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
 25510 ;; Parameters:    Size  Location     Type
 25511 ;;  f1              3   27[COMRAM] float 
 25512 ;; Auto vars:     Size  Location     Type
 25513 ;;		None
 25514 ;; Return value:  Size  Location     Type
 25515 ;;                  3   27[COMRAM] float 
 25516 ;; Registers used:
 25517 ;;		wreg, status,2, status,0
 25518 ;; Tracked objects:
 25519 ;;		On entry : 0/0
 25520 ;;		On exit  : 0/0
 25521 ;;		Unchanged: 0/0
 25522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25523 ;;      Params:         3       0       0       0       0       0       0
 25524 ;;      Locals:         0       0       0       0       0       0       0
 25525 ;;      Temps:          0       0       0       0       0       0       0
 25526 ;;      Totals:         3       0       0       0       0       0       0
 25527 ;;Total ram usage:        3 bytes
 25528 ;; Hardware stack levels used:    1
 25529 ;; Hardware stack levels required when called:    1
 25530 ;; This function calls:
 25531 ;;		Nothing
 25532 ;; This function is called by:
 25533 ;;		_LowPass_VL1
 25534 ;;		_LowPass_VL2
 25535 ;;		_LowPass_VL3
 25536 ;;		_LowPass_Vin
 25537 ;;		_Get_Voltage_Data
 25538 ;;		_Control_Loop
 25539 ;;		_PID_Controller
 25540 ;;		__doprnt
 25541 ;;		_strtod
 25542 ;; This function uses a non-reentrant model
 25543 ;;
 25544                           
 25545                           	psect	text149
 25546  0052BE                     __ptext149:
 25547                           	opt stack 0
 25548  0052BE                     ___ftneg:
 25549                           	opt stack 0
 25550  0052BE  FFFF               	dw	65535	; assembler added errata NOP
 25551                           
 25552                           ;incstack = 0
 25553  0052C0  501C               	movf	___ftneg@f1,w,c
 25554  0052C2  101D               	iorwf	___ftneg@f1+1,w,c
 25555  0052C4  101E               	iorwf	___ftneg@f1+2,w,c
 25556  0052C6  B4D8               	btfsc	status,2,c
 25557  0052C8  D006               	goto	l1757
 25558  0052CA  0E00               	movlw	0
 25559  0052CC  1A1C               	xorwf	___ftneg@f1,f,c
 25560  0052CE  0E00               	movlw	0
 25561  0052D0  1A1D               	xorwf	___ftneg@f1+1,f,c
 25562  0052D2  0E80               	movlw	128
 25563  0052D4  1A1E               	xorwf	___ftneg@f1+2,f,c
 25564  0052D6                     l1757:
 25565  0052D6  FFFF               	dw	65535	; assembler added errata NOP
 25566  0052D8  C01C  F01C         	movff	___ftneg@f1,?___ftneg
 25567  0052DC  C01D  F01D         	movff	___ftneg@f1+1,?___ftneg+1
 25568  0052E0  C01E  F01E         	movff	___ftneg@f1+2,?___ftneg+2
 25569  0052E4  0012               	return		;funcret
 25570  0052E6  FFFF               	dw	65535	; errata NOP
 25571  0052E8                     __end_of___ftneg:
 25572                           	opt stack 0
 25573                           tosu	equ	0xFFF
 25574                           tosh	equ	0xFFE
 25575                           tosl	equ	0xFFD
 25576                           pclath	equ	0xFFA
 25577                           tblptru	equ	0xFF8
 25578                           tblptrh	equ	0xFF7
 25579                           tblptrl	equ	0xFF6
 25580                           tablat	equ	0xFF5
 25581                           prodh	equ	0xFF4
 25582                           prodl	equ	0xFF3
 25583                           intcon	equ	0xFF2
 25584                           postinc0	equ	0xFEE
 25585                           wreg	equ	0xFE8
 25586                           indf1	equ	0xFE7
 25587                           fsr1h	equ	0xFE2
 25588                           fsr1l	equ	0xFE1
 25589                           indf2	equ	0xFDF
 25590                           postinc2	equ	0xFDE
 25591                           postdec2	equ	0xFDD
 25592                           plusw2	equ	0xFDB
 25593                           fsr2h	equ	0xFDA
 25594                           fsr2l	equ	0xFD9
 25595                           status	equ	0xFD8
 25596                           
 25597 ;; *************** function ___ftmul *****************
 25598 ;; Defined at:
 25599 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
 25600 ;; Parameters:    Size  Location     Type
 25601 ;;  f1              3   24[BANK0 ] float 
 25602 ;;  f2              3   27[BANK0 ] float 
 25603 ;; Auto vars:     Size  Location     Type
 25604 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
 25605 ;;  sign            1   38[BANK0 ] unsigned char 
 25606 ;;  cntr            1   37[BANK0 ] unsigned char 
 25607 ;;  exp             1   33[BANK0 ] unsigned char 
 25608 ;; Return value:  Size  Location     Type
 25609 ;;                  3   24[BANK0 ] float 
 25610 ;; Registers used:
 25611 ;;		wreg, status,2, status,0, cstack
 25612 ;; Tracked objects:
 25613 ;;		On entry : 0/0
 25614 ;;		On exit  : 0/0
 25615 ;;		Unchanged: 0/0
 25616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25617 ;;      Params:         0       6       0       0       0       0       0
 25618 ;;      Locals:         0       6       0       0       0       0       0
 25619 ;;      Temps:          0       3       0       0       0       0       0
 25620 ;;      Totals:         0      15       0       0       0       0       0
 25621 ;;Total ram usage:       15 bytes
 25622 ;; Hardware stack levels used:    1
 25623 ;; Hardware stack levels required when called:    2
 25624 ;; This function calls:
 25625 ;;		___ftpack
 25626 ;; This function is called by:
 25627 ;;		_LowPass_VL1
 25628 ;;		_LowPass_VL2
 25629 ;;		_LowPass_VL3
 25630 ;;		_LowPass_Vin
 25631 ;;		_Get_Voltage_Data
 25632 ;;		_PID_Controller
 25633 ;;		_fround
 25634 ;;		_scale
 25635 ;;		__doprnt
 25636 ;;		_strtod
 25637 ;; This function uses a non-reentrant model
 25638 ;;
 25639                           
 25640                           	psect	text150
 25641  0078A6                     __ptext150:
 25642                           	opt stack 0
 25643  0078A6                     ___ftmul:
 25644                           	opt stack 0
 25645  0078A6  FFFF               	dw	65535	; assembler added errata NOP
 25646                           
 25647                           ;incstack = 0
 25648  0078A8  C07A  F07E         	movff	___ftmul@f1+2,??___ftmul
 25649  0078AC  0100               	movlb	0	; () banked
 25650  0078AE  6B7F               	clrf	(??___ftmul+1)& (0+255),b
 25651  0078B0  6B80               	clrf	(??___ftmul+2)& (0+255),b
 25652  0078B2  0100               	movlb	0	; () banked
 25653  0078B4  3579               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 25654  0078B6  0100               	movlb	0	; () banked
 25655  0078B8  377E               	rlcf	??___ftmul& (0+255),f,b
 25656  0078BA  E301               	bnc	u8261
 25657  0078BC  817F               	bsf	(??___ftmul+1)& (0+255),0,b
 25658  0078BE                     u8261:
 25659  0078BE  0100               	movlb	0	; () banked
 25660  0078C0  517E               	movf	??___ftmul& (0+255),w,b
 25661  0078C2  0100               	movlb	0	; () banked
 25662  0078C4  6F81               	movwf	___ftmul@exp& (0+255),b
 25663  0078C6  0100               	movlb	0	; () banked
 25664  0078C8  5181               	movf	___ftmul@exp& (0+255),w,b
 25665  0078CA  B4D8               	btfsc	status,2,c
 25666  0078CC  D013               	goto	u8290
 25667                           
 25668                           ; BSR set to: 0
 25669                           
 25670                           ; BSR set to: 0
 25671                           
 25672                           ; BSR set to: 0
 25673                           
 25674                           ; BSR set to: 0
 25675  0078CE  C07D  F07E         	movff	___ftmul@f2+2,??___ftmul
 25676  0078D2  0100               	movlb	0	; () banked
 25677  0078D4  6B7F               	clrf	(??___ftmul+1)& (0+255),b
 25678  0078D6  6B80               	clrf	(??___ftmul+2)& (0+255),b
 25679  0078D8  0100               	movlb	0	; () banked
 25680  0078DA  357C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 25681  0078DC  0100               	movlb	0	; () banked
 25682  0078DE  377E               	rlcf	??___ftmul& (0+255),f,b
 25683  0078E0  E301               	bnc	u8281
 25684  0078E2  817F               	bsf	(??___ftmul+1)& (0+255),0,b
 25685  0078E4                     u8281:
 25686  0078E4  0100               	movlb	0	; () banked
 25687  0078E6  517E               	movf	??___ftmul& (0+255),w,b
 25688  0078E8  0100               	movlb	0	; () banked
 25689  0078EA  6F86               	movwf	___ftmul@sign& (0+255),b
 25690  0078EC  0100               	movlb	0	; () banked
 25691  0078EE  5186               	movf	___ftmul@sign& (0+255),w,b
 25692  0078F0  A4D8               	btfss	status,2,c
 25693  0078F2  D00B               	goto	l1748
 25694  0078F4                     u8290:
 25695  0078F4  FFFF               	dw	65535	; assembler added errata NOP
 25696                           
 25697                           ; BSR set to: 0
 25698  0078F6  0E00               	movlw	0
 25699  0078F8  0100               	movlb	0	; () banked
 25700  0078FA  6F78               	movwf	?___ftmul& (0+255),b
 25701  0078FC  0E00               	movlw	0
 25702  0078FE  0100               	movlb	0	; () banked
 25703  007900  6F79               	movwf	(?___ftmul+1)& (0+255),b
 25704  007902  0E00               	movlw	0
 25705  007904  0100               	movlb	0	; () banked
 25706  007906  6F7A               	movwf	(?___ftmul+2)& (0+255),b
 25707                           
 25708                           ; BSR set to: 0
 25709  007908  D079               	goto	l8780
 25710  00790A                     l1748:
 25711  00790A  FFFF               	dw	65535	; assembler added errata NOP
 25712                           
 25713                           ; BSR set to: 0
 25714                           
 25715                           ; BSR set to: 0
 25716  00790C  0100               	movlb	0	; () banked
 25717  00790E  5186               	movf	___ftmul@sign& (0+255),w,b
 25718  007910  0F7B               	addlw	123
 25719  007912  0100               	movlb	0	; () banked
 25720  007914  2781               	addwf	___ftmul@exp& (0+255),f,b
 25721                           
 25722                           ; BSR set to: 0
 25723  007916  C07A  F086         	movff	___ftmul@f1+2,___ftmul@sign
 25724  00791A  0100               	movlb	0	; () banked
 25725  00791C  517D               	movf	(___ftmul@f2+2)& (0+255),w,b
 25726  00791E  0100               	movlb	0	; () banked
 25727  007920  1B86               	xorwf	___ftmul@sign& (0+255),f,b
 25728  007922  0E80               	movlw	128
 25729  007924  0100               	movlb	0	; () banked
 25730  007926  1786               	andwf	___ftmul@sign& (0+255),f,b
 25731                           
 25732                           ; BSR set to: 0
 25733  007928  0100               	movlb	0	; () banked
 25734  00792A  8F79               	bsf	(___ftmul@f1+1)& (0+255),7,b
 25735                           
 25736                           ; BSR set to: 0
 25737  00792C  0100               	movlb	0	; () banked
 25738  00792E  8F7C               	bsf	(___ftmul@f2+1)& (0+255),7,b
 25739                           
 25740                           ; BSR set to: 0
 25741  007930  0EFF               	movlw	255
 25742  007932  0100               	movlb	0	; () banked
 25743  007934  177B               	andwf	___ftmul@f2& (0+255),f,b
 25744  007936  0EFF               	movlw	255
 25745  007938  0100               	movlb	0	; () banked
 25746  00793A  177C               	andwf	(___ftmul@f2+1)& (0+255),f,b
 25747  00793C  0E00               	movlw	0
 25748  00793E  0100               	movlb	0	; () banked
 25749  007940  177D               	andwf	(___ftmul@f2+2)& (0+255),f,b
 25750                           
 25751                           ; BSR set to: 0
 25752  007942  0E00               	movlw	0
 25753  007944  0100               	movlb	0	; () banked
 25754  007946  6F82               	movwf	___ftmul@f3_as_product& (0+255),b
 25755  007948  0E00               	movlw	0
 25756  00794A  0100               	movlb	0	; () banked
 25757  00794C  6F83               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 25758  00794E  0E00               	movlw	0
 25759  007950  0100               	movlb	0	; () banked
 25760  007952  6F84               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 25761                           
 25762                           ; BSR set to: 0
 25763  007954  0E07               	movlw	7
 25764  007956  0100               	movlb	0	; () banked
 25765  007958  6F85               	movwf	___ftmul@cntr& (0+255),b
 25766  00795A  FFFF               	dw	65535	; assembler added errata NOP
 25767                           
 25768                           ; BSR set to: 0
 25769                           
 25770                           ; BSR set to: 0
 25771  00795C  0100               	movlb	0	; () banked
 25772  00795E  A178               	btfss	___ftmul@f1& (0+255),0,b
 25773  007960  D00C               	goto	l1750
 25774                           
 25775                           ; BSR set to: 0
 25776  007962  0100               	movlb	0	; () banked
 25777  007964  517B               	movf	___ftmul@f2& (0+255),w,b
 25778  007966  0100               	movlb	0	; () banked
 25779  007968  2782               	addwf	___ftmul@f3_as_product& (0+255),f,b
 25780  00796A  0100               	movlb	0	; () banked
 25781  00796C  517C               	movf	(___ftmul@f2+1)& (0+255),w,b
 25782  00796E  0100               	movlb	0	; () banked
 25783  007970  2383               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 25784  007972  0100               	movlb	0	; () banked
 25785  007974  517D               	movf	(___ftmul@f2+2)& (0+255),w,b
 25786  007976  0100               	movlb	0	; () banked
 25787  007978  2384               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 25788  00797A                     l1750:
 25789  00797A  FFFF               	dw	65535	; assembler added errata NOP
 25790                           
 25791                           ; BSR set to: 0
 25792                           
 25793                           ; BSR set to: 0
 25794  00797C  0100               	movlb	0	; () banked
 25795  00797E  90D8               	bcf	status,0,c
 25796  007980  337A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 25797  007982  3379               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 25798  007984  3378               	rrcf	___ftmul@f1& (0+255),f,b
 25799  007986  0100               	movlb	0	; () banked
 25800  007988  90D8               	bcf	status,0,c
 25801  00798A  377B               	rlcf	___ftmul@f2& (0+255),f,b
 25802  00798C  377C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 25803  00798E  377D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 25804                           
 25805                           ; BSR set to: 0
 25806  007990  0100               	movlb	0	; () banked
 25807  007992  2F85               	decfsz	___ftmul@cntr& (0+255),f,b
 25808  007994  D7E2               	goto	l1749
 25809                           
 25810                           ; BSR set to: 0
 25811                           
 25812                           ; BSR set to: 0
 25813  007996  0E09               	movlw	9
 25814  007998  0100               	movlb	0	; () banked
 25815  00799A  6F85               	movwf	___ftmul@cntr& (0+255),b
 25816  00799C  FFFF               	dw	65535	; assembler added errata NOP
 25817                           
 25818                           ; BSR set to: 0
 25819                           
 25820                           ; BSR set to: 0
 25821  00799E  0100               	movlb	0	; () banked
 25822  0079A0  A178               	btfss	___ftmul@f1& (0+255),0,b
 25823  0079A2  D00C               	goto	l1753
 25824                           
 25825                           ; BSR set to: 0
 25826  0079A4  0100               	movlb	0	; () banked
 25827  0079A6  517B               	movf	___ftmul@f2& (0+255),w,b
 25828  0079A8  0100               	movlb	0	; () banked
 25829  0079AA  2782               	addwf	___ftmul@f3_as_product& (0+255),f,b
 25830  0079AC  0100               	movlb	0	; () banked
 25831  0079AE  517C               	movf	(___ftmul@f2+1)& (0+255),w,b
 25832  0079B0  0100               	movlb	0	; () banked
 25833  0079B2  2383               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 25834  0079B4  0100               	movlb	0	; () banked
 25835  0079B6  517D               	movf	(___ftmul@f2+2)& (0+255),w,b
 25836  0079B8  0100               	movlb	0	; () banked
 25837  0079BA  2384               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 25838  0079BC                     l1753:
 25839  0079BC  FFFF               	dw	65535	; assembler added errata NOP
 25840                           
 25841                           ; BSR set to: 0
 25842                           
 25843                           ; BSR set to: 0
 25844  0079BE  0100               	movlb	0	; () banked
 25845  0079C0  90D8               	bcf	status,0,c
 25846  0079C2  337A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 25847  0079C4  3379               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 25848  0079C6  3378               	rrcf	___ftmul@f1& (0+255),f,b
 25849  0079C8  0100               	movlb	0	; () banked
 25850  0079CA  90D8               	bcf	status,0,c
 25851  0079CC  3384               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 25852  0079CE  3383               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 25853  0079D0  3382               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 25854                           
 25855                           ; BSR set to: 0
 25856  0079D2  0100               	movlb	0	; () banked
 25857  0079D4  2F85               	decfsz	___ftmul@cntr& (0+255),f,b
 25858  0079D6  D7E2               	goto	l1752
 25859                           
 25860                           ; BSR set to: 0
 25861                           
 25862                           ; BSR set to: 0
 25863  0079D8  C082  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
 25864  0079DC  C083  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 25865  0079E0  C084  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 25866  0079E4  C081  F01C         	movff	___ftmul@exp,___ftpack@exp
 25867  0079E8  C086  F01D         	movff	___ftmul@sign,___ftpack@sign
 25868  0079EC  ECCD  F034         	call	___ftpack	;wreg free
 25869  0079F0  C019  F078         	movff	?___ftpack,?___ftmul
 25870  0079F4  C01A  F079         	movff	?___ftpack+1,?___ftmul+1
 25871  0079F8  C01B  F07A         	movff	?___ftpack+2,?___ftmul+2
 25872  0079FC                     l8780:
 25873  0079FC  FFFF               	dw	65535	; assembler added errata NOP
 25874  0079FE  0012               	return		;funcret
 25875  007A00  FFFF               	dw	65535	; errata NOP
 25876  007A02                     __end_of___ftmul:
 25877                           	opt stack 0
 25878                           tosu	equ	0xFFF
 25879                           tosh	equ	0xFFE
 25880                           tosl	equ	0xFFD
 25881                           pclath	equ	0xFFA
 25882                           tblptru	equ	0xFF8
 25883                           tblptrh	equ	0xFF7
 25884                           tblptrl	equ	0xFF6
 25885                           tablat	equ	0xFF5
 25886                           prodh	equ	0xFF4
 25887                           prodl	equ	0xFF3
 25888                           intcon	equ	0xFF2
 25889                           postinc0	equ	0xFEE
 25890                           wreg	equ	0xFE8
 25891                           indf1	equ	0xFE7
 25892                           fsr1h	equ	0xFE2
 25893                           fsr1l	equ	0xFE1
 25894                           indf2	equ	0xFDF
 25895                           postinc2	equ	0xFDE
 25896                           postdec2	equ	0xFDD
 25897                           plusw2	equ	0xFDB
 25898                           fsr2h	equ	0xFDA
 25899                           fsr2l	equ	0xFD9
 25900                           status	equ	0xFD8
 25901                           
 25902 ;; *************** function _Get_Control_Voltage *****************
 25903 ;; Defined at:
 25904 ;;		line 145 in file "Get_Voltages.c"
 25905 ;; Parameters:    Size  Location     Type
 25906 ;;		None
 25907 ;; Auto vars:     Size  Location     Type
 25908 ;;  volt            3   29[BANK0 ] float 
 25909 ;;  count           1   28[BANK0 ] unsigned char 
 25910 ;; Return value:  Size  Location     Type
 25911 ;;                  3   24[BANK0 ] float 
 25912 ;; Registers used:
 25913 ;;		wreg, status,2, status,0, cstack
 25914 ;; Tracked objects:
 25915 ;;		On entry : 0/0
 25916 ;;		On exit  : 0/0
 25917 ;;		Unchanged: 0/0
 25918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25919 ;;      Params:         0       3       0       0       0       0       0
 25920 ;;      Locals:         0       4       0       0       0       0       0
 25921 ;;      Temps:          0       1       0       0       0       0       0
 25922 ;;      Totals:         0       8       0       0       0       0       0
 25923 ;;Total ram usage:        8 bytes
 25924 ;; Hardware stack levels used:    1
 25925 ;; Hardware stack levels required when called:    3
 25926 ;; This function calls:
 25927 ;;		_Get_Voltage_VL1
 25928 ;;		_Get_Voltage_VL2
 25929 ;;		_Get_Voltage_VL3
 25930 ;;		___ftadd
 25931 ;;		___ftdiv
 25932 ;;		___lbtoft
 25933 ;; This function is called by:
 25934 ;;		_get_list
 25935 ;;		_Control_Loop
 25936 ;; This function uses a non-reentrant model
 25937 ;;
 25938                           
 25939                           	psect	text151
 25940  0072A4                     __ptext151:
 25941                           	opt stack 0
 25942  0072A4                     _Get_Control_Voltage:
 25943                           	opt stack 0
 25944  0072A4  FFFF               	dw	65535	; assembler added errata NOP
 25945                           
 25946                           ;Get_Voltages.c: 147: float volt=0.0;
 25947                           
 25948                           ;incstack = 0
 25949  0072A6  0E00               	movlw	0
 25950  0072A8  0100               	movlb	0	; () banked
 25951  0072AA  6F7D               	movwf	Get_Control_Voltage@volt& (0+255),b
 25952  0072AC  0E00               	movlw	0
 25953  0072AE  0100               	movlb	0	; () banked
 25954  0072B0  6F7E               	movwf	(Get_Control_Voltage@volt+1)& (0+255),b
 25955  0072B2  0E00               	movlw	0
 25956  0072B4  0100               	movlb	0	; () banked
 25957  0072B6  6F7F               	movwf	(Get_Control_Voltage@volt+2)& (0+255),b
 25958                           
 25959                           ;Get_Voltages.c: 148: char count=3;
 25960  0072B8  0E03               	movlw	3
 25961  0072BA  0100               	movlb	0	; () banked
 25962  0072BC  6F7C               	movwf	Get_Control_Voltage@count& (0+255),b
 25963                           
 25964                           ; BSR set to: 0
 25965                           ;Get_Voltages.c: 150: if(status.data&0b00000011){
 25966  0072BE  C045  F07B         	movff	_status,??_Get_Control_Voltage
 25967  0072C2  0E03               	movlw	3
 25968  0072C4  0100               	movlb	0	; () banked
 25969  0072C6  177B               	andwf	??_Get_Control_Voltage& (0+255),f,b
 25970  0072C8  B4D8               	btfsc	status,2,c
 25971  0072CA  D003               	goto	l464
 25972                           
 25973                           ; BSR set to: 0
 25974                           ;Get_Voltages.c: 151: count--;
 25975  0072CC  0100               	movlb	0	; () banked
 25976  0072CE  077C               	decf	Get_Control_Voltage@count& (0+255),f,b
 25977                           
 25978                           ;Get_Voltages.c: 152: }
 25979  0072D0  D017               	goto	l465
 25980  0072D2                     l464:
 25981  0072D2  FFFF               	dw	65535	; assembler added errata NOP
 25982                           
 25983                           ; BSR set to: 0
 25984                           ;Get_Voltages.c: 153: else{
 25985                           ;Get_Voltages.c: 154: volt=volt+Get_Voltage_VL1();
 25986                           
 25987                           ; BSR set to: 0
 25988  0072D4  EC9E  F026         	call	_Get_Voltage_VL1	;wreg free
 25989  0072D8  C019  F060         	movff	?_Get_Voltage_VL1,___ftadd@f1
 25990  0072DC  C01A  F061         	movff	?_Get_Voltage_VL1+1,___ftadd@f1+1
 25991  0072E0  C01B  F062         	movff	?_Get_Voltage_VL1+2,___ftadd@f1+2
 25992  0072E4  C07D  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 25993  0072E8  C07E  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 25994  0072EC  C07F  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 25995  0072F0  ECD0  F019         	call	___ftadd	;wreg free
 25996  0072F4  C060  F07D         	movff	?___ftadd,Get_Control_Voltage@volt
 25997  0072F8  C061  F07E         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 25998  0072FC  C062  F07F         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 25999  007300                     l465:
 26000  007300  FFFF               	dw	65535	; assembler added errata NOP
 26001                           
 26002                           ;Get_Voltages.c: 155: }
 26003                           ;Get_Voltages.c: 157: if(status.data&0b00001100){
 26004  007302  C045  F07B         	movff	_status,??_Get_Control_Voltage
 26005  007306  0E0C               	movlw	12
 26006  007308  0100               	movlb	0	; () banked
 26007  00730A  177B               	andwf	??_Get_Control_Voltage& (0+255),f,b
 26008  00730C  B4D8               	btfsc	status,2,c
 26009  00730E  D003               	goto	l466
 26010                           
 26011                           ; BSR set to: 0
 26012                           ;Get_Voltages.c: 158: count--;
 26013  007310  0100               	movlb	0	; () banked
 26014  007312  077C               	decf	Get_Control_Voltage@count& (0+255),f,b
 26015                           
 26016                           ;Get_Voltages.c: 159: }
 26017  007314  D017               	goto	l467
 26018  007316                     l466:
 26019  007316  FFFF               	dw	65535	; assembler added errata NOP
 26020                           
 26021                           ; BSR set to: 0
 26022                           ;Get_Voltages.c: 160: else{
 26023                           ;Get_Voltages.c: 161: volt=volt+Get_Voltage_VL2();
 26024                           
 26025                           ; BSR set to: 0
 26026  007318  ECA7  F026         	call	_Get_Voltage_VL2	;wreg free
 26027  00731C  C019  F060         	movff	?_Get_Voltage_VL2,___ftadd@f1
 26028  007320  C01A  F061         	movff	?_Get_Voltage_VL2+1,___ftadd@f1+1
 26029  007324  C01B  F062         	movff	?_Get_Voltage_VL2+2,___ftadd@f1+2
 26030  007328  C07D  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 26031  00732C  C07E  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 26032  007330  C07F  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 26033  007334  ECD0  F019         	call	___ftadd	;wreg free
 26034  007338  C060  F07D         	movff	?___ftadd,Get_Control_Voltage@volt
 26035  00733C  C061  F07E         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 26036  007340  C062  F07F         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 26037  007344                     l467:
 26038  007344  FFFF               	dw	65535	; assembler added errata NOP
 26039                           
 26040                           ;Get_Voltages.c: 162: }
 26041                           ;Get_Voltages.c: 164: if(status.data&0b00110000){
 26042  007346  C045  F07B         	movff	_status,??_Get_Control_Voltage
 26043  00734A  0E30               	movlw	48
 26044  00734C  0100               	movlb	0	; () banked
 26045  00734E  177B               	andwf	??_Get_Control_Voltage& (0+255),f,b
 26046  007350  B4D8               	btfsc	status,2,c
 26047  007352  D003               	goto	l468
 26048                           
 26049                           ; BSR set to: 0
 26050                           ;Get_Voltages.c: 165: count--;
 26051  007354  0100               	movlb	0	; () banked
 26052  007356  077C               	decf	Get_Control_Voltage@count& (0+255),f,b
 26053                           
 26054                           ;Get_Voltages.c: 166: }
 26055  007358  D017               	goto	l469
 26056  00735A                     l468:
 26057  00735A  FFFF               	dw	65535	; assembler added errata NOP
 26058                           
 26059                           ; BSR set to: 0
 26060                           ;Get_Voltages.c: 167: else{
 26061                           ;Get_Voltages.c: 168: volt=volt+Get_Voltage_VL3();
 26062                           
 26063                           ; BSR set to: 0
 26064  00735C  ECB0  F026         	call	_Get_Voltage_VL3	;wreg free
 26065  007360  C019  F060         	movff	?_Get_Voltage_VL3,___ftadd@f1
 26066  007364  C01A  F061         	movff	?_Get_Voltage_VL3+1,___ftadd@f1+1
 26067  007368  C01B  F062         	movff	?_Get_Voltage_VL3+2,___ftadd@f1+2
 26068  00736C  C07D  F063         	movff	Get_Control_Voltage@volt,___ftadd@f2
 26069  007370  C07E  F064         	movff	Get_Control_Voltage@volt+1,___ftadd@f2+1
 26070  007374  C07F  F065         	movff	Get_Control_Voltage@volt+2,___ftadd@f2+2
 26071  007378  ECD0  F019         	call	___ftadd	;wreg free
 26072  00737C  C060  F07D         	movff	?___ftadd,Get_Control_Voltage@volt
 26073  007380  C061  F07E         	movff	?___ftadd+1,Get_Control_Voltage@volt+1
 26074  007384  C062  F07F         	movff	?___ftadd+2,Get_Control_Voltage@volt+2
 26075  007388                     l469:
 26076  007388  FFFF               	dw	65535	; assembler added errata NOP
 26077                           
 26078                           ;Get_Voltages.c: 169: }
 26079                           ;Get_Voltages.c: 170: volt=volt/(float)count;
 26080  00738A  C07D  F069         	movff	Get_Control_Voltage@volt,___ftdiv@f1
 26081  00738E  C07E  F06A         	movff	Get_Control_Voltage@volt+1,___ftdiv@f1+1
 26082  007392  C07F  F06B         	movff	Get_Control_Voltage@volt+2,___ftdiv@f1+2
 26083  007396  0100               	movlb	0	; () banked
 26084  007398  517C               	movf	Get_Control_Voltage@count& (0+255),w,b
 26085  00739A  EC37  F029         	call	___lbtoft
 26086  00739E  C021  F06C         	movff	?___lbtoft,___ftdiv@f2
 26087  0073A2  C022  F06D         	movff	?___lbtoft+1,___ftdiv@f2+1
 26088  0073A6  C023  F06E         	movff	?___lbtoft+2,___ftdiv@f2+2
 26089  0073AA  ECB0  F03B         	call	___ftdiv	;wreg free
 26090  0073AE  C069  F07D         	movff	?___ftdiv,Get_Control_Voltage@volt
 26091  0073B2  C06A  F07E         	movff	?___ftdiv+1,Get_Control_Voltage@volt+1
 26092  0073B6  C06B  F07F         	movff	?___ftdiv+2,Get_Control_Voltage@volt+2
 26093                           
 26094                           ;Get_Voltages.c: 171: return volt;
 26095  0073BA  C07D  F078         	movff	Get_Control_Voltage@volt,?_Get_Control_Voltage
 26096  0073BE  C07E  F079         	movff	Get_Control_Voltage@volt+1,?_Get_Control_Voltage+1
 26097  0073C2  C07F  F07A         	movff	Get_Control_Voltage@volt+2,?_Get_Control_Voltage+2
 26098  0073C6  0012               	return		;funcret
 26099  0073C8  FFFF               	dw	65535	; errata NOP
 26100  0073CA                     __end_of_Get_Control_Voltage:
 26101                           	opt stack 0
 26102                           tosu	equ	0xFFF
 26103                           tosh	equ	0xFFE
 26104                           tosl	equ	0xFFD
 26105                           pclath	equ	0xFFA
 26106                           tblptru	equ	0xFF8
 26107                           tblptrh	equ	0xFF7
 26108                           tblptrl	equ	0xFF6
 26109                           tablat	equ	0xFF5
 26110                           prodh	equ	0xFF4
 26111                           prodl	equ	0xFF3
 26112                           intcon	equ	0xFF2
 26113                           postinc0	equ	0xFEE
 26114                           wreg	equ	0xFE8
 26115                           indf1	equ	0xFE7
 26116                           fsr1h	equ	0xFE2
 26117                           fsr1l	equ	0xFE1
 26118                           indf2	equ	0xFDF
 26119                           postinc2	equ	0xFDE
 26120                           postdec2	equ	0xFDD
 26121                           plusw2	equ	0xFDB
 26122                           fsr2h	equ	0xFDA
 26123                           fsr2l	equ	0xFD9
 26124                           status	equ	0xFD8
 26125                           
 26126 ;; *************** function ___lbtoft *****************
 26127 ;; Defined at:
 26128 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lbtoft.c"
 26129 ;; Parameters:    Size  Location     Type
 26130 ;;  c               1    wreg     unsigned char 
 26131 ;; Auto vars:     Size  Location     Type
 26132 ;;  c               1   35[COMRAM] unsigned char 
 26133 ;; Return value:  Size  Location     Type
 26134 ;;                  3   32[COMRAM] float 
 26135 ;; Registers used:
 26136 ;;		wreg, status,2, status,0, cstack
 26137 ;; Tracked objects:
 26138 ;;		On entry : 0/0
 26139 ;;		On exit  : 0/0
 26140 ;;		Unchanged: 0/0
 26141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26142 ;;      Params:         3       0       0       0       0       0       0
 26143 ;;      Locals:         1       0       0       0       0       0       0
 26144 ;;      Temps:          0       0       0       0       0       0       0
 26145 ;;      Totals:         4       0       0       0       0       0       0
 26146 ;;Total ram usage:        4 bytes
 26147 ;; Hardware stack levels used:    1
 26148 ;; Hardware stack levels required when called:    2
 26149 ;; This function calls:
 26150 ;;		___ftpack
 26151 ;; This function is called by:
 26152 ;;		_Get_Control_Voltage
 26153 ;; This function uses a non-reentrant model
 26154 ;;
 26155                           
 26156                           	psect	text152
 26157  00526E                     __ptext152:
 26158                           	opt stack 0
 26159  00526E                     ___lbtoft:
 26160                           	opt stack 0
 26161  00526E  FFFF               	dw	65535	; assembler added errata NOP
 26162                           
 26163                           ;incstack = 0
 26164                           ;___lbtoft@c stored from wreg
 26165  005270  6E24               	movwf	___lbtoft@c,c
 26166  005272  5024               	movf	___lbtoft@c,w,c
 26167  005274  6E19               	movwf	___ftpack@arg,c
 26168  005276  6A1A               	clrf	___ftpack@arg+1,c
 26169  005278  6A1B               	clrf	___ftpack@arg+2,c
 26170  00527A  0E8E               	movlw	142
 26171  00527C  6E1C               	movwf	___ftpack@exp,c
 26172  00527E  0E00               	movlw	0
 26173  005280  6E1D               	movwf	___ftpack@sign,c
 26174  005282  ECCD  F034         	call	___ftpack	;wreg free
 26175  005286  C019  F021         	movff	?___ftpack,?___lbtoft
 26176  00528A  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
 26177  00528E  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
 26178  005292  0012               	return		;funcret
 26179  005294  FFFF               	dw	65535	; errata NOP
 26180  005296                     __end_of___lbtoft:
 26181                           	opt stack 0
 26182                           tosu	equ	0xFFF
 26183                           tosh	equ	0xFFE
 26184                           tosl	equ	0xFFD
 26185                           pclath	equ	0xFFA
 26186                           tblptru	equ	0xFF8
 26187                           tblptrh	equ	0xFF7
 26188                           tblptrl	equ	0xFF6
 26189                           tablat	equ	0xFF5
 26190                           prodh	equ	0xFF4
 26191                           prodl	equ	0xFF3
 26192                           intcon	equ	0xFF2
 26193                           postinc0	equ	0xFEE
 26194                           wreg	equ	0xFE8
 26195                           indf1	equ	0xFE7
 26196                           fsr1h	equ	0xFE2
 26197                           fsr1l	equ	0xFE1
 26198                           indf2	equ	0xFDF
 26199                           postinc2	equ	0xFDE
 26200                           postdec2	equ	0xFDD
 26201                           plusw2	equ	0xFDB
 26202                           fsr2h	equ	0xFDA
 26203                           fsr2l	equ	0xFD9
 26204                           status	equ	0xFD8
 26205                           
 26206 ;; *************** function ___ftdiv *****************
 26207 ;; Defined at:
 26208 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
 26209 ;; Parameters:    Size  Location     Type
 26210 ;;  f1              3    9[BANK0 ] float 
 26211 ;;  f2              3   12[BANK0 ] float 
 26212 ;; Auto vars:     Size  Location     Type
 26213 ;;  f3              3   19[BANK0 ] float 
 26214 ;;  sign            1   23[BANK0 ] unsigned char 
 26215 ;;  exp             1   22[BANK0 ] unsigned char 
 26216 ;;  cntr            1   18[BANK0 ] unsigned char 
 26217 ;; Return value:  Size  Location     Type
 26218 ;;                  3    9[BANK0 ] float 
 26219 ;; Registers used:
 26220 ;;		wreg, status,2, status,0, cstack
 26221 ;; Tracked objects:
 26222 ;;		On entry : 0/0
 26223 ;;		On exit  : 0/0
 26224 ;;		Unchanged: 0/0
 26225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26226 ;;      Params:         0       6       0       0       0       0       0
 26227 ;;      Locals:         0       6       0       0       0       0       0
 26228 ;;      Temps:          0       3       0       0       0       0       0
 26229 ;;      Totals:         0      15       0       0       0       0       0
 26230 ;;Total ram usage:       15 bytes
 26231 ;; Hardware stack levels used:    1
 26232 ;; Hardware stack levels required when called:    2
 26233 ;; This function calls:
 26234 ;;		___ftpack
 26235 ;; This function is called by:
 26236 ;;		_Get_Control_Voltage
 26237 ;;		_Get_Voltage_Data
 26238 ;;		_PID_Controller
 26239 ;;		_strtod
 26240 ;; This function uses a non-reentrant model
 26241 ;;
 26242                           
 26243                           	psect	text153
 26244  007760                     __ptext153:
 26245                           	opt stack 0
 26246  007760                     ___ftdiv:
 26247                           	opt stack 0
 26248  007760  FFFF               	dw	65535	; assembler added errata NOP
 26249                           
 26250                           ;incstack = 0
 26251  007762  C06B  F06F         	movff	___ftdiv@f1+2,??___ftdiv
 26252  007766  0100               	movlb	0	; () banked
 26253  007768  6B70               	clrf	(??___ftdiv+1)& (0+255),b
 26254  00776A  6B71               	clrf	(??___ftdiv+2)& (0+255),b
 26255  00776C  0100               	movlb	0	; () banked
 26256  00776E  356A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 26257  007770  0100               	movlb	0	; () banked
 26258  007772  376F               	rlcf	??___ftdiv& (0+255),f,b
 26259  007774  E301               	bnc	u8991
 26260  007776  8170               	bsf	(??___ftdiv+1)& (0+255),0,b
 26261  007778                     u8991:
 26262  007778  0100               	movlb	0	; () banked
 26263  00777A  516F               	movf	??___ftdiv& (0+255),w,b
 26264  00777C  0100               	movlb	0	; () banked
 26265  00777E  6F76               	movwf	___ftdiv@exp& (0+255),b
 26266  007780  0100               	movlb	0	; () banked
 26267  007782  5176               	movf	___ftdiv@exp& (0+255),w,b
 26268  007784  B4D8               	btfsc	status,2,c
 26269  007786  D013               	goto	u9020
 26270                           
 26271                           ; BSR set to: 0
 26272                           
 26273                           ; BSR set to: 0
 26274                           
 26275                           ; BSR set to: 0
 26276                           
 26277                           ; BSR set to: 0
 26278  007788  C06E  F06F         	movff	___ftdiv@f2+2,??___ftdiv
 26279  00778C  0100               	movlb	0	; () banked
 26280  00778E  6B70               	clrf	(??___ftdiv+1)& (0+255),b
 26281  007790  6B71               	clrf	(??___ftdiv+2)& (0+255),b
 26282  007792  0100               	movlb	0	; () banked
 26283  007794  356D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 26284  007796  0100               	movlb	0	; () banked
 26285  007798  376F               	rlcf	??___ftdiv& (0+255),f,b
 26286  00779A  E301               	bnc	u9011
 26287  00779C  8170               	bsf	(??___ftdiv+1)& (0+255),0,b
 26288  00779E                     u9011:
 26289  00779E  0100               	movlb	0	; () banked
 26290  0077A0  516F               	movf	??___ftdiv& (0+255),w,b
 26291  0077A2  0100               	movlb	0	; () banked
 26292  0077A4  6F77               	movwf	___ftdiv@sign& (0+255),b
 26293  0077A6  0100               	movlb	0	; () banked
 26294  0077A8  5177               	movf	___ftdiv@sign& (0+255),w,b
 26295  0077AA  A4D8               	btfss	status,2,c
 26296  0077AC  D00B               	goto	l1716
 26297  0077AE                     u9020:
 26298  0077AE  FFFF               	dw	65535	; assembler added errata NOP
 26299                           
 26300                           ; BSR set to: 0
 26301  0077B0  0E00               	movlw	0
 26302  0077B2  0100               	movlb	0	; () banked
 26303  0077B4  6F69               	movwf	?___ftdiv& (0+255),b
 26304  0077B6  0E00               	movlw	0
 26305  0077B8  0100               	movlb	0	; () banked
 26306  0077BA  6F6A               	movwf	(?___ftdiv+1)& (0+255),b
 26307  0077BC  0E00               	movlw	0
 26308  0077BE  0100               	movlb	0	; () banked
 26309  0077C0  6F6B               	movwf	(?___ftdiv+2)& (0+255),b
 26310                           
 26311                           ; BSR set to: 0
 26312  0077C2  D06E               	goto	l9372
 26313  0077C4                     l1716:
 26314  0077C4  FFFF               	dw	65535	; assembler added errata NOP
 26315                           
 26316                           ; BSR set to: 0
 26317                           
 26318                           ; BSR set to: 0
 26319  0077C6  0E00               	movlw	0
 26320  0077C8  0100               	movlb	0	; () banked
 26321  0077CA  6F73               	movwf	___ftdiv@f3& (0+255),b
 26322  0077CC  0E00               	movlw	0
 26323  0077CE  0100               	movlb	0	; () banked
 26324  0077D0  6F74               	movwf	(___ftdiv@f3+1)& (0+255),b
 26325  0077D2  0E00               	movlw	0
 26326  0077D4  0100               	movlb	0	; () banked
 26327  0077D6  6F75               	movwf	(___ftdiv@f3+2)& (0+255),b
 26328                           
 26329                           ; BSR set to: 0
 26330  0077D8  0100               	movlb	0	; () banked
 26331  0077DA  5177               	movf	___ftdiv@sign& (0+255),w,b
 26332  0077DC  0F89               	addlw	137
 26333  0077DE  0100               	movlb	0	; () banked
 26334  0077E0  5F76               	subwf	___ftdiv@exp& (0+255),f,b
 26335                           
 26336                           ; BSR set to: 0
 26337  0077E2  C06B  F077         	movff	___ftdiv@f1+2,___ftdiv@sign
 26338                           
 26339                           ; BSR set to: 0
 26340  0077E6  0100               	movlb	0	; () banked
 26341  0077E8  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26342  0077EA  0100               	movlb	0	; () banked
 26343  0077EC  1B77               	xorwf	___ftdiv@sign& (0+255),f,b
 26344                           
 26345                           ; BSR set to: 0
 26346  0077EE  0E80               	movlw	128
 26347  0077F0  0100               	movlb	0	; () banked
 26348  0077F2  1777               	andwf	___ftdiv@sign& (0+255),f,b
 26349                           
 26350                           ; BSR set to: 0
 26351  0077F4  0100               	movlb	0	; () banked
 26352  0077F6  8F6A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 26353                           
 26354                           ; BSR set to: 0
 26355  0077F8  0EFF               	movlw	255
 26356  0077FA  0100               	movlb	0	; () banked
 26357  0077FC  1769               	andwf	___ftdiv@f1& (0+255),f,b
 26358  0077FE  0EFF               	movlw	255
 26359  007800  0100               	movlb	0	; () banked
 26360  007802  176A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 26361  007804  0E00               	movlw	0
 26362  007806  0100               	movlb	0	; () banked
 26363  007808  176B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 26364                           
 26365                           ; BSR set to: 0
 26366  00780A  0100               	movlb	0	; () banked
 26367  00780C  8F6D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 26368                           
 26369                           ; BSR set to: 0
 26370  00780E  0EFF               	movlw	255
 26371  007810  0100               	movlb	0	; () banked
 26372  007812  176C               	andwf	___ftdiv@f2& (0+255),f,b
 26373  007814  0EFF               	movlw	255
 26374  007816  0100               	movlb	0	; () banked
 26375  007818  176D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 26376  00781A  0E00               	movlw	0
 26377  00781C  0100               	movlb	0	; () banked
 26378  00781E  176E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 26379                           
 26380                           ; BSR set to: 0
 26381  007820  0E18               	movlw	24
 26382  007822  0100               	movlb	0	; () banked
 26383  007824  6F72               	movwf	___ftdiv@cntr& (0+255),b
 26384  007826  FFFF               	dw	65535	; assembler added errata NOP
 26385                           
 26386                           ; BSR set to: 0
 26387                           
 26388                           ; BSR set to: 0
 26389  007828  0100               	movlb	0	; () banked
 26390  00782A  90D8               	bcf	status,0,c
 26391  00782C  3773               	rlcf	___ftdiv@f3& (0+255),f,b
 26392  00782E  3774               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 26393  007830  3775               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 26394                           
 26395                           ; BSR set to: 0
 26396  007832  0100               	movlb	0	; () banked
 26397  007834  516C               	movf	___ftdiv@f2& (0+255),w,b
 26398  007836  0100               	movlb	0	; () banked
 26399  007838  5D69               	subwf	___ftdiv@f1& (0+255),w,b
 26400  00783A  0100               	movlb	0	; () banked
 26401  00783C  516D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 26402  00783E  0100               	movlb	0	; () banked
 26403  007840  596A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 26404  007842  0100               	movlb	0	; () banked
 26405  007844  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26406  007846  0100               	movlb	0	; () banked
 26407  007848  596B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 26408  00784A  A0D8               	btfss	status,0,c
 26409  00784C  D00E               	goto	l1718
 26410                           
 26411                           ; BSR set to: 0
 26412  00784E  0100               	movlb	0	; () banked
 26413  007850  516C               	movf	___ftdiv@f2& (0+255),w,b
 26414  007852  0100               	movlb	0	; () banked
 26415  007854  5F69               	subwf	___ftdiv@f1& (0+255),f,b
 26416  007856  0100               	movlb	0	; () banked
 26417  007858  516D               	movf	(___ftdiv@f2+1)& (0+255),w,b
 26418  00785A  0100               	movlb	0	; () banked
 26419  00785C  5B6A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 26420  00785E  0100               	movlb	0	; () banked
 26421  007860  516E               	movf	(___ftdiv@f2+2)& (0+255),w,b
 26422  007862  0100               	movlb	0	; () banked
 26423  007864  5B6B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 26424                           
 26425                           ; BSR set to: 0
 26426  007866  0100               	movlb	0	; () banked
 26427  007868  8173               	bsf	___ftdiv@f3& (0+255),0,b
 26428  00786A                     l1718:
 26429  00786A  FFFF               	dw	65535	; assembler added errata NOP
 26430                           
 26431                           ; BSR set to: 0
 26432  00786C  0100               	movlb	0	; () banked
 26433  00786E  90D8               	bcf	status,0,c
 26434  007870  3769               	rlcf	___ftdiv@f1& (0+255),f,b
 26435  007872  376A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 26436  007874  376B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 26437                           
 26438                           ; BSR set to: 0
 26439  007876  0100               	movlb	0	; () banked
 26440  007878  2F72               	decfsz	___ftdiv@cntr& (0+255),f,b
 26441  00787A  D7D5               	goto	l1717
 26442                           
 26443                           ; BSR set to: 0
 26444                           
 26445                           ; BSR set to: 0
 26446  00787C  C073  F019         	movff	___ftdiv@f3,___ftpack@arg
 26447  007880  C074  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
 26448  007884  C075  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
 26449  007888  C076  F01C         	movff	___ftdiv@exp,___ftpack@exp
 26450  00788C  C077  F01D         	movff	___ftdiv@sign,___ftpack@sign
 26451  007890  ECCD  F034         	call	___ftpack	;wreg free
 26452  007894  C019  F069         	movff	?___ftpack,?___ftdiv
 26453  007898  C01A  F06A         	movff	?___ftpack+1,?___ftdiv+1
 26454  00789C  C01B  F06B         	movff	?___ftpack+2,?___ftdiv+2
 26455  0078A0                     l9372:
 26456  0078A0  FFFF               	dw	65535	; assembler added errata NOP
 26457  0078A2  0012               	return		;funcret
 26458  0078A4  FFFF               	dw	65535	; errata NOP
 26459  0078A6                     __end_of___ftdiv:
 26460                           	opt stack 0
 26461                           tosu	equ	0xFFF
 26462                           tosh	equ	0xFFE
 26463                           tosl	equ	0xFFD
 26464                           pclath	equ	0xFFA
 26465                           tblptru	equ	0xFF8
 26466                           tblptrh	equ	0xFF7
 26467                           tblptrl	equ	0xFF6
 26468                           tablat	equ	0xFF5
 26469                           prodh	equ	0xFF4
 26470                           prodl	equ	0xFF3
 26471                           intcon	equ	0xFF2
 26472                           postinc0	equ	0xFEE
 26473                           wreg	equ	0xFE8
 26474                           indf1	equ	0xFE7
 26475                           fsr1h	equ	0xFE2
 26476                           fsr1l	equ	0xFE1
 26477                           indf2	equ	0xFDF
 26478                           postinc2	equ	0xFDE
 26479                           postdec2	equ	0xFDD
 26480                           plusw2	equ	0xFDB
 26481                           fsr2h	equ	0xFDA
 26482                           fsr2l	equ	0xFD9
 26483                           status	equ	0xFD8
 26484                           
 26485 ;; *************** function ___ftadd *****************
 26486 ;; Defined at:
 26487 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
 26488 ;; Parameters:    Size  Location     Type
 26489 ;;  f1              3    0[BANK0 ] float 
 26490 ;;  f2              3    3[BANK0 ] float 
 26491 ;; Auto vars:     Size  Location     Type
 26492 ;;  exp1            1    8[BANK0 ] unsigned char 
 26493 ;;  exp2            1    7[BANK0 ] unsigned char 
 26494 ;;  sign            1    6[BANK0 ] unsigned char 
 26495 ;; Return value:  Size  Location     Type
 26496 ;;                  3    0[BANK0 ] float 
 26497 ;; Registers used:
 26498 ;;		wreg, status,2, status,0, cstack
 26499 ;; Tracked objects:
 26500 ;;		On entry : 0/0
 26501 ;;		On exit  : 0/0
 26502 ;;		Unchanged: 0/0
 26503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26504 ;;      Params:         0       6       0       0       0       0       0
 26505 ;;      Locals:         0       3       0       0       0       0       0
 26506 ;;      Temps:          3       0       0       0       0       0       0
 26507 ;;      Totals:         3       9       0       0       0       0       0
 26508 ;;Total ram usage:       12 bytes
 26509 ;; Hardware stack levels used:    1
 26510 ;; Hardware stack levels required when called:    2
 26511 ;; This function calls:
 26512 ;;		___ftpack
 26513 ;; This function is called by:
 26514 ;;		_LowPass_VL1
 26515 ;;		_LowPass_VL2
 26516 ;;		_LowPass_VL3
 26517 ;;		_LowPass_Vin
 26518 ;;		_Get_Control_Voltage
 26519 ;;		_Get_Voltage_Data
 26520 ;;		_PID_Controller
 26521 ;;		__doprnt
 26522 ;;		___ftsub
 26523 ;; This function uses a non-reentrant model
 26524 ;;
 26525                           
 26526                           	psect	text154
 26527  0033A0                     __ptext154:
 26528                           	opt stack 0
 26529  0033A0                     ___ftadd:
 26530                           	opt stack 0
 26531  0033A0  FFFF               	dw	65535	; assembler added errata NOP
 26532                           
 26533                           ;incstack = 0
 26534  0033A2  C062  F02D         	movff	___ftadd@f1+2,??___ftadd
 26535  0033A6  6A2E               	clrf	(??___ftadd+1)& (0+255),c
 26536  0033A8  6A2F               	clrf	(??___ftadd+2)& (0+255),c
 26537  0033AA  0100               	movlb	0	; () banked
 26538  0033AC  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 26539  0033AE  362D               	rlcf	??___ftadd& (0+255),f,c
 26540  0033B0  E301               	bnc	u8051
 26541  0033B2  802E               	bsf	(??___ftadd+1)& (0+255),0,c
 26542  0033B4                     u8051:
 26543  0033B4  502D               	movf	??___ftadd,w,c
 26544  0033B6  0100               	movlb	0	; () banked
 26545  0033B8  6F68               	movwf	___ftadd@exp1& (0+255),b
 26546  0033BA  C065  F02D         	movff	___ftadd@f2+2,??___ftadd
 26547  0033BE  6A2E               	clrf	(??___ftadd+1)& (0+255),c
 26548  0033C0  6A2F               	clrf	(??___ftadd+2)& (0+255),c
 26549  0033C2  0100               	movlb	0	; () banked
 26550  0033C4  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 26551  0033C6  362D               	rlcf	??___ftadd& (0+255),f,c
 26552  0033C8  E301               	bnc	u8061
 26553  0033CA  802E               	bsf	(??___ftadd+1)& (0+255),0,c
 26554  0033CC                     u8061:
 26555  0033CC  502D               	movf	??___ftadd,w,c
 26556  0033CE  0100               	movlb	0	; () banked
 26557  0033D0  6F67               	movwf	___ftadd@exp2& (0+255),b
 26558                           
 26559                           ; BSR set to: 0
 26560  0033D2  0100               	movlb	0	; () banked
 26561  0033D4  5168               	movf	___ftadd@exp1& (0+255),w,b
 26562  0033D6  0100               	movlb	0	; () banked
 26563  0033D8  B4D8               	btfsc	status,2,c
 26564  0033DA  D00F               	goto	u8090
 26565                           
 26566                           ; BSR set to: 0
 26567  0033DC  0100               	movlb	0	; () banked
 26568  0033DE  5167               	movf	___ftadd@exp2& (0+255),w,b
 26569  0033E0  0100               	movlb	0	; () banked
 26570  0033E2  5D68               	subwf	___ftadd@exp1& (0+255),w,b
 26571  0033E4  B0D8               	btfsc	status,0,c
 26572  0033E6  D011               	goto	l1681
 26573                           
 26574                           ; BSR set to: 0
 26575  0033E8  0100               	movlb	0	; () banked
 26576  0033EA  5168               	movf	___ftadd@exp1& (0+255),w,b
 26577  0033EC  0800               	sublw	0
 26578  0033EE  0100               	movlb	0	; () banked
 26579  0033F0  2567               	addwf	___ftadd@exp2& (0+255),w,b
 26580  0033F2  6E2D               	movwf	??___ftadd& (0+255),c
 26581  0033F4  0E18               	movlw	24
 26582  0033F6  642D               	cpfsgt	??___ftadd,c
 26583  0033F8  D008               	goto	l1681
 26584  0033FA                     u8090:
 26585  0033FA  FFFF               	dw	65535	; assembler added errata NOP
 26586                           
 26587                           ; BSR set to: 0
 26588  0033FC  C063  F060         	movff	___ftadd@f2,?___ftadd
 26589  003400  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
 26590  003404  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
 26591  003408  D104               	goto	l8732
 26592  00340A                     l1681:
 26593  00340A  FFFF               	dw	65535	; assembler added errata NOP
 26594                           
 26595                           ; BSR set to: 0
 26596                           
 26597                           ; BSR set to: 0
 26598  00340C  0100               	movlb	0	; () banked
 26599  00340E  5167               	movf	___ftadd@exp2& (0+255),w,b
 26600  003410  0100               	movlb	0	; () banked
 26601  003412  B4D8               	btfsc	status,2,c
 26602  003414  D00F               	goto	u8120
 26603                           
 26604                           ; BSR set to: 0
 26605  003416  0100               	movlb	0	; () banked
 26606  003418  5168               	movf	___ftadd@exp1& (0+255),w,b
 26607  00341A  0100               	movlb	0	; () banked
 26608  00341C  5D67               	subwf	___ftadd@exp2& (0+255),w,b
 26609  00341E  B0D8               	btfsc	status,0,c
 26610  003420  D011               	goto	l1685
 26611                           
 26612                           ; BSR set to: 0
 26613  003422  0100               	movlb	0	; () banked
 26614  003424  5167               	movf	___ftadd@exp2& (0+255),w,b
 26615  003426  0800               	sublw	0
 26616  003428  0100               	movlb	0	; () banked
 26617  00342A  2568               	addwf	___ftadd@exp1& (0+255),w,b
 26618  00342C  6E2D               	movwf	??___ftadd& (0+255),c
 26619  00342E  0E18               	movlw	24
 26620  003430  642D               	cpfsgt	??___ftadd,c
 26621  003432  D008               	goto	l1685
 26622  003434                     u8120:
 26623  003434  FFFF               	dw	65535	; assembler added errata NOP
 26624                           
 26625                           ; BSR set to: 0
 26626  003436  C060  F060         	movff	___ftadd@f1,?___ftadd
 26627  00343A  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
 26628  00343E  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
 26629  003442  D0E7               	goto	l8732
 26630  003444                     l1685:
 26631  003444  FFFF               	dw	65535	; assembler added errata NOP
 26632                           
 26633                           ; BSR set to: 0
 26634                           
 26635                           ; BSR set to: 0
 26636  003446  0E06               	movlw	6
 26637  003448  0100               	movlb	0	; () banked
 26638  00344A  6F66               	movwf	___ftadd@sign& (0+255),b
 26639                           
 26640                           ; BSR set to: 0
 26641  00344C  0100               	movlb	0	; () banked
 26642  00344E  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
 26643  003450  D002               	goto	l1688
 26644                           
 26645                           ; BSR set to: 0
 26646  003452  0100               	movlb	0	; () banked
 26647  003454  8F66               	bsf	___ftadd@sign& (0+255),7,b
 26648  003456                     l1688:
 26649  003456  FFFF               	dw	65535	; assembler added errata NOP
 26650                           
 26651                           ; BSR set to: 0
 26652                           
 26653                           ; BSR set to: 0
 26654  003458  0100               	movlb	0	; () banked
 26655  00345A  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 26656  00345C  D002               	goto	l1689
 26657                           
 26658                           ; BSR set to: 0
 26659  00345E  0100               	movlb	0	; () banked
 26660  003460  8D66               	bsf	___ftadd@sign& (0+255),6,b
 26661  003462                     l1689:
 26662  003462  FFFF               	dw	65535	; assembler added errata NOP
 26663                           
 26664                           ; BSR set to: 0
 26665  003464  0100               	movlb	0	; () banked
 26666  003466  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
 26667                           
 26668                           ; BSR set to: 0
 26669  003468  0EFF               	movlw	255
 26670  00346A  0100               	movlb	0	; () banked
 26671  00346C  1760               	andwf	___ftadd@f1& (0+255),f,b
 26672  00346E  0EFF               	movlw	255
 26673  003470  0100               	movlb	0	; () banked
 26674  003472  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
 26675  003474  0E00               	movlw	0
 26676  003476  0100               	movlb	0	; () banked
 26677  003478  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
 26678  00347A  0100               	movlb	0	; () banked
 26679  00347C  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
 26680                           
 26681                           ; BSR set to: 0
 26682  00347E  0EFF               	movlw	255
 26683  003480  0100               	movlb	0	; () banked
 26684  003482  1763               	andwf	___ftadd@f2& (0+255),f,b
 26685  003484  0EFF               	movlw	255
 26686  003486  0100               	movlb	0	; () banked
 26687  003488  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
 26688  00348A  0E00               	movlw	0
 26689  00348C  0100               	movlb	0	; () banked
 26690  00348E  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
 26691                           
 26692                           ; BSR set to: 0
 26693  003490  0100               	movlb	0	; () banked
 26694  003492  5167               	movf	___ftadd@exp2& (0+255),w,b
 26695  003494  0100               	movlb	0	; () banked
 26696  003496  5D68               	subwf	___ftadd@exp1& (0+255),w,b
 26697  003498  B0D8               	btfsc	status,0,c
 26698  00349A  D027               	goto	l1690
 26699  00349C                     u8150:
 26700  00349C  FFFF               	dw	65535	; assembler added errata NOP
 26701                           
 26702                           ; BSR set to: 0
 26703                           
 26704                           ; BSR set to: 0
 26705  00349E  0100               	movlb	0	; () banked
 26706  0034A0  90D8               	bcf	status,0,c
 26707  0034A2  3763               	rlcf	___ftadd@f2& (0+255),f,b
 26708  0034A4  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 26709  0034A6  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 26710  0034A8  0100               	movlb	0	; () banked
 26711  0034AA  0767               	decf	___ftadd@exp2& (0+255),f,b
 26712                           
 26713                           ; BSR set to: 0
 26714  0034AC  0100               	movlb	0	; () banked
 26715  0034AE  5168               	movf	___ftadd@exp1& (0+255),w,b
 26716  0034B0  0100               	movlb	0	; () banked
 26717  0034B2  1967               	xorwf	___ftadd@exp2& (0+255),w,b
 26718  0034B4  B4D8               	btfsc	status,2,c
 26719  0034B6  D011               	goto	l1695
 26720                           
 26721                           ; BSR set to: 0
 26722  0034B8  0100               	movlb	0	; () banked
 26723  0034BA  0766               	decf	___ftadd@sign& (0+255),f,b
 26724  0034BC  C066  F02D         	movff	___ftadd@sign,??___ftadd
 26725  0034C0  0E07               	movlw	7
 26726  0034C2  162D               	andwf	??___ftadd,f,c
 26727  0034C4  B4D8               	btfsc	status,2,c
 26728  0034C6  D009               	goto	l1695
 26729  0034C8  D7E9               	goto	u8150
 26730  0034CA  FFFF               	dw	65535	; assembler added errata NOP
 26731                           
 26732                           ; BSR set to: 0
 26733                           
 26734                           ; BSR set to: 0
 26735  0034CC  0100               	movlb	0	; () banked
 26736  0034CE  90D8               	bcf	status,0,c
 26737  0034D0  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 26738  0034D2  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 26739  0034D4  3360               	rrcf	___ftadd@f1& (0+255),f,b
 26740  0034D6  0100               	movlb	0	; () banked
 26741  0034D8  2B68               	incf	___ftadd@exp1& (0+255),f,b
 26742  0034DA                     l1695:
 26743  0034DA  FFFF               	dw	65535	; assembler added errata NOP
 26744                           
 26745                           ; BSR set to: 0
 26746                           
 26747                           ; BSR set to: 0
 26748  0034DC  0100               	movlb	0	; () banked
 26749  0034DE  5167               	movf	___ftadd@exp2& (0+255),w,b
 26750  0034E0  0100               	movlb	0	; () banked
 26751  0034E2  1968               	xorwf	___ftadd@exp1& (0+255),w,b
 26752  0034E4  B4D8               	btfsc	status,2,c
 26753  0034E6  D02E               	goto	u8220
 26754  0034E8  D7F0               	goto	l1696
 26755  0034EA                     l1690:
 26756  0034EA  FFFF               	dw	65535	; assembler added errata NOP
 26757                           
 26758                           ; BSR set to: 0
 26759                           
 26760                           ; BSR set to: 0
 26761  0034EC  0100               	movlb	0	; () banked
 26762  0034EE  5168               	movf	___ftadd@exp1& (0+255),w,b
 26763  0034F0  0100               	movlb	0	; () banked
 26764  0034F2  5D67               	subwf	___ftadd@exp2& (0+255),w,b
 26765  0034F4  B0D8               	btfsc	status,0,c
 26766  0034F6  D026               	goto	u8220
 26767  0034F8                     u8190:
 26768  0034F8  FFFF               	dw	65535	; assembler added errata NOP
 26769                           
 26770                           ; BSR set to: 0
 26771                           
 26772                           ; BSR set to: 0
 26773  0034FA  0100               	movlb	0	; () banked
 26774  0034FC  90D8               	bcf	status,0,c
 26775  0034FE  3760               	rlcf	___ftadd@f1& (0+255),f,b
 26776  003500  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 26777  003502  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 26778  003504  0100               	movlb	0	; () banked
 26779  003506  0768               	decf	___ftadd@exp1& (0+255),f,b
 26780                           
 26781                           ; BSR set to: 0
 26782  003508  0100               	movlb	0	; () banked
 26783  00350A  5168               	movf	___ftadd@exp1& (0+255),w,b
 26784  00350C  0100               	movlb	0	; () banked
 26785  00350E  1967               	xorwf	___ftadd@exp2& (0+255),w,b
 26786  003510  B4D8               	btfsc	status,2,c
 26787  003512  D011               	goto	l1704
 26788                           
 26789                           ; BSR set to: 0
 26790  003514  0100               	movlb	0	; () banked
 26791  003516  0766               	decf	___ftadd@sign& (0+255),f,b
 26792  003518  C066  F02D         	movff	___ftadd@sign,??___ftadd
 26793  00351C  0E07               	movlw	7
 26794  00351E  162D               	andwf	??___ftadd,f,c
 26795  003520  B4D8               	btfsc	status,2,c
 26796  003522  D009               	goto	l1704
 26797  003524  D7E9               	goto	u8190
 26798  003526  FFFF               	dw	65535	; assembler added errata NOP
 26799                           
 26800                           ; BSR set to: 0
 26801                           
 26802                           ; BSR set to: 0
 26803  003528  0100               	movlb	0	; () banked
 26804  00352A  90D8               	bcf	status,0,c
 26805  00352C  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 26806  00352E  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 26807  003530  3363               	rrcf	___ftadd@f2& (0+255),f,b
 26808  003532  0100               	movlb	0	; () banked
 26809  003534  2B67               	incf	___ftadd@exp2& (0+255),f,b
 26810  003536                     l1704:
 26811  003536  FFFF               	dw	65535	; assembler added errata NOP
 26812                           
 26813                           ; BSR set to: 0
 26814                           
 26815                           ; BSR set to: 0
 26816  003538  0100               	movlb	0	; () banked
 26817  00353A  5167               	movf	___ftadd@exp2& (0+255),w,b
 26818  00353C  0100               	movlb	0	; () banked
 26819  00353E  1968               	xorwf	___ftadd@exp1& (0+255),w,b
 26820  003540  A4D8               	btfss	status,2,c
 26821  003542  D7F1               	goto	l1705
 26822  003544                     u8220:
 26823  003544  FFFF               	dw	65535	; assembler added errata NOP
 26824                           
 26825                           ; BSR set to: 0
 26826                           
 26827                           ; BSR set to: 0
 26828                           
 26829                           ; BSR set to: 0
 26830  003546  0100               	movlb	0	; () banked
 26831  003548  AF66               	btfss	___ftadd@sign& (0+255),7,b
 26832  00354A  D012               	goto	l1707
 26833                           
 26834                           ; BSR set to: 0
 26835  00354C  0EFF               	movlw	255
 26836  00354E  0100               	movlb	0	; () banked
 26837  003550  1B60               	xorwf	___ftadd@f1& (0+255),f,b
 26838  003552  0EFF               	movlw	255
 26839  003554  0100               	movlb	0	; () banked
 26840  003556  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 26841  003558  0EFF               	movlw	255
 26842  00355A  0100               	movlb	0	; () banked
 26843  00355C  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 26844  00355E  0E01               	movlw	1
 26845  003560  0100               	movlb	0	; () banked
 26846  003562  2760               	addwf	___ftadd@f1& (0+255),f,b
 26847  003564  0E00               	movlw	0
 26848  003566  0100               	movlb	0	; () banked
 26849  003568  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 26850  00356A  0E00               	movlw	0
 26851  00356C  0100               	movlb	0	; () banked
 26852  00356E  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 26853  003570                     l1707:
 26854  003570  FFFF               	dw	65535	; assembler added errata NOP
 26855                           
 26856                           ; BSR set to: 0
 26857  003572  0100               	movlb	0	; () banked
 26858  003574  AD66               	btfss	___ftadd@sign& (0+255),6,b
 26859  003576  D012               	goto	l1708
 26860                           
 26861                           ; BSR set to: 0
 26862  003578  0EFF               	movlw	255
 26863  00357A  0100               	movlb	0	; () banked
 26864  00357C  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 26865  00357E  0EFF               	movlw	255
 26866  003580  0100               	movlb	0	; () banked
 26867  003582  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 26868  003584  0EFF               	movlw	255
 26869  003586  0100               	movlb	0	; () banked
 26870  003588  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 26871  00358A  0E01               	movlw	1
 26872  00358C  0100               	movlb	0	; () banked
 26873  00358E  2763               	addwf	___ftadd@f2& (0+255),f,b
 26874  003590  0E00               	movlw	0
 26875  003592  0100               	movlb	0	; () banked
 26876  003594  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 26877  003596  0E00               	movlw	0
 26878  003598  0100               	movlb	0	; () banked
 26879  00359A  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 26880  00359C                     l1708:
 26881  00359C  FFFF               	dw	65535	; assembler added errata NOP
 26882                           
 26883                           ; BSR set to: 0
 26884                           
 26885                           ; BSR set to: 0
 26886  00359E  0E00               	movlw	0
 26887  0035A0  0100               	movlb	0	; () banked
 26888  0035A2  6F66               	movwf	___ftadd@sign& (0+255),b
 26889                           
 26890                           ; BSR set to: 0
 26891  0035A4  0100               	movlb	0	; () banked
 26892  0035A6  5160               	movf	___ftadd@f1& (0+255),w,b
 26893  0035A8  0100               	movlb	0	; () banked
 26894  0035AA  2763               	addwf	___ftadd@f2& (0+255),f,b
 26895  0035AC  0100               	movlb	0	; () banked
 26896  0035AE  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
 26897  0035B0  0100               	movlb	0	; () banked
 26898  0035B2  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 26899  0035B4  0100               	movlb	0	; () banked
 26900  0035B6  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
 26901  0035B8  0100               	movlb	0	; () banked
 26902  0035BA  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 26903                           
 26904                           ; BSR set to: 0
 26905  0035BC  0100               	movlb	0	; () banked
 26906  0035BE  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
 26907  0035C0  D015               	goto	l1709
 26908                           
 26909                           ; BSR set to: 0
 26910  0035C2  0EFF               	movlw	255
 26911  0035C4  0100               	movlb	0	; () banked
 26912  0035C6  1B63               	xorwf	___ftadd@f2& (0+255),f,b
 26913  0035C8  0EFF               	movlw	255
 26914  0035CA  0100               	movlb	0	; () banked
 26915  0035CC  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 26916  0035CE  0EFF               	movlw	255
 26917  0035D0  0100               	movlb	0	; () banked
 26918  0035D2  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 26919  0035D4  0E01               	movlw	1
 26920  0035D6  0100               	movlb	0	; () banked
 26921  0035D8  2763               	addwf	___ftadd@f2& (0+255),f,b
 26922  0035DA  0E00               	movlw	0
 26923  0035DC  0100               	movlb	0	; () banked
 26924  0035DE  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 26925  0035E0  0E00               	movlw	0
 26926  0035E2  0100               	movlb	0	; () banked
 26927  0035E4  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 26928                           
 26929                           ; BSR set to: 0
 26930  0035E6  0E01               	movlw	1
 26931  0035E8  0100               	movlb	0	; () banked
 26932  0035EA  6F66               	movwf	___ftadd@sign& (0+255),b
 26933  0035EC                     l1709:
 26934  0035EC  FFFF               	dw	65535	; assembler added errata NOP
 26935                           
 26936                           ; BSR set to: 0
 26937                           
 26938                           ; BSR set to: 0
 26939  0035EE  C063  F019         	movff	___ftadd@f2,___ftpack@arg
 26940  0035F2  C064  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
 26941  0035F6  C065  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
 26942  0035FA  C068  F01C         	movff	___ftadd@exp1,___ftpack@exp
 26943  0035FE  C066  F01D         	movff	___ftadd@sign,___ftpack@sign
 26944  003602  ECCD  F034         	call	___ftpack	;wreg free
 26945  003606  C019  F060         	movff	?___ftpack,?___ftadd
 26946  00360A  C01A  F061         	movff	?___ftpack+1,?___ftadd+1
 26947  00360E  C01B  F062         	movff	?___ftpack+2,?___ftadd+2
 26948  003612                     l8732:
 26949  003612  FFFF               	dw	65535	; assembler added errata NOP
 26950  003614  0012               	return		;funcret
 26951  003616  FFFF               	dw	65535	; errata NOP
 26952  003618                     __end_of___ftadd:
 26953                           	opt stack 0
 26954                           tosu	equ	0xFFF
 26955                           tosh	equ	0xFFE
 26956                           tosl	equ	0xFFD
 26957                           pclath	equ	0xFFA
 26958                           tblptru	equ	0xFF8
 26959                           tblptrh	equ	0xFF7
 26960                           tblptrl	equ	0xFF6
 26961                           tablat	equ	0xFF5
 26962                           prodh	equ	0xFF4
 26963                           prodl	equ	0xFF3
 26964                           intcon	equ	0xFF2
 26965                           postinc0	equ	0xFEE
 26966                           wreg	equ	0xFE8
 26967                           indf1	equ	0xFE7
 26968                           fsr1h	equ	0xFE2
 26969                           fsr1l	equ	0xFE1
 26970                           indf2	equ	0xFDF
 26971                           postinc2	equ	0xFDE
 26972                           postdec2	equ	0xFDD
 26973                           plusw2	equ	0xFDB
 26974                           fsr2h	equ	0xFDA
 26975                           fsr2l	equ	0xFD9
 26976                           status	equ	0xFD8
 26977                           
 26978 ;; *************** function ___ftpack *****************
 26979 ;; Defined at:
 26980 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
 26981 ;; Parameters:    Size  Location     Type
 26982 ;;  arg             3   24[COMRAM] unsigned um
 26983 ;;  exp             1   27[COMRAM] unsigned char 
 26984 ;;  sign            1   28[COMRAM] unsigned char 
 26985 ;; Auto vars:     Size  Location     Type
 26986 ;;		None
 26987 ;; Return value:  Size  Location     Type
 26988 ;;                  3   24[COMRAM] float 
 26989 ;; Registers used:
 26990 ;;		wreg, status,2, status,0
 26991 ;; Tracked objects:
 26992 ;;		On entry : 0/0
 26993 ;;		On exit  : 0/0
 26994 ;;		Unchanged: 0/0
 26995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26996 ;;      Params:         5       0       0       0       0       0       0
 26997 ;;      Locals:         0       0       0       0       0       0       0
 26998 ;;      Temps:          3       0       0       0       0       0       0
 26999 ;;      Totals:         8       0       0       0       0       0       0
 27000 ;;Total ram usage:        8 bytes
 27001 ;; Hardware stack levels used:    1
 27002 ;; Hardware stack levels required when called:    1
 27003 ;; This function calls:
 27004 ;;		Nothing
 27005 ;; This function is called by:
 27006 ;;		___altoft
 27007 ;;		___ftadd
 27008 ;;		___ftdiv
 27009 ;;		___ftmul
 27010 ;;		___lbtoft
 27011 ;;		___lltoft
 27012 ;;		___lwtoft
 27013 ;; This function uses a non-reentrant model
 27014 ;;
 27015                           
 27016                           	psect	text155
 27017  00699A                     __ptext155:
 27018                           	opt stack 0
 27019  00699A                     ___ftpack:
 27020                           	opt stack 0
 27021  00699A  FFFF               	dw	65535	; assembler added errata NOP
 27022                           
 27023                           ;incstack = 0
 27024  00699C  501C               	movf	___ftpack@exp,w,c
 27025  00699E  B4D8               	btfsc	status,2,c
 27026  0069A0  D005               	goto	u7810
 27027  0069A2  5019               	movf	___ftpack@arg,w,c
 27028  0069A4  101A               	iorwf	___ftpack@arg+1,w,c
 27029  0069A6  101B               	iorwf	___ftpack@arg+2,w,c
 27030  0069A8  A4D8               	btfss	status,2,c
 27031  0069AA  D00E               	goto	l1650
 27032  0069AC                     u7810:
 27033  0069AC  FFFF               	dw	65535	; assembler added errata NOP
 27034  0069AE  0E00               	movlw	0
 27035  0069B0  6E19               	movwf	?___ftpack,c
 27036  0069B2  0E00               	movlw	0
 27037  0069B4  6E1A               	movwf	?___ftpack+1,c
 27038  0069B6  0E00               	movlw	0
 27039  0069B8  6E1B               	movwf	?___ftpack+2,c
 27040  0069BA  D04E               	goto	l8564
 27041  0069BC  FFFF               	dw	65535	; assembler added errata NOP
 27042  0069BE  2A1C               	incf	___ftpack@exp,f,c
 27043  0069C0  90D8               	bcf	status,0,c
 27044  0069C2  321B               	rrcf	___ftpack@arg+2,f,c
 27045  0069C4  321A               	rrcf	___ftpack@arg+1,f,c
 27046  0069C6  3219               	rrcf	___ftpack@arg,f,c
 27047  0069C8                     l1650:
 27048  0069C8  FFFF               	dw	65535	; assembler added errata NOP
 27049  0069CA  0E00               	movlw	0
 27050  0069CC  1419               	andwf	___ftpack@arg,w,c
 27051  0069CE  6E1E               	movwf	??___ftpack& (0+255),c
 27052  0069D0  0E00               	movlw	0
 27053  0069D2  141A               	andwf	___ftpack@arg+1,w,c
 27054  0069D4  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 27055  0069D6  0EFE               	movlw	254
 27056  0069D8  141B               	andwf	___ftpack@arg+2,w,c
 27057  0069DA  6E20               	movwf	(??___ftpack+2)& (0+255),c
 27058  0069DC  501E               	movf	??___ftpack,w,c
 27059  0069DE  101F               	iorwf	??___ftpack+1,w,c
 27060  0069E0  1020               	iorwf	??___ftpack+2,w,c
 27061  0069E2  B4D8               	btfsc	status,2,c
 27062  0069E4  D00D               	goto	l1653
 27063  0069E6  D7EA               	goto	l1651
 27064  0069E8  FFFF               	dw	65535	; assembler added errata NOP
 27065  0069EA  2A1C               	incf	___ftpack@exp,f,c
 27066  0069EC  0E01               	movlw	1
 27067  0069EE  2619               	addwf	___ftpack@arg,f,c
 27068  0069F0  0E00               	movlw	0
 27069  0069F2  221A               	addwfc	___ftpack@arg+1,f,c
 27070  0069F4  0E00               	movlw	0
 27071  0069F6  221B               	addwfc	___ftpack@arg+2,f,c
 27072  0069F8  90D8               	bcf	status,0,c
 27073  0069FA  321B               	rrcf	___ftpack@arg+2,f,c
 27074  0069FC  321A               	rrcf	___ftpack@arg+1,f,c
 27075  0069FE  3219               	rrcf	___ftpack@arg,f,c
 27076  006A00                     l1653:
 27077  006A00  FFFF               	dw	65535	; assembler added errata NOP
 27078  006A02  0E00               	movlw	0
 27079  006A04  1419               	andwf	___ftpack@arg,w,c
 27080  006A06  6E1E               	movwf	??___ftpack& (0+255),c
 27081  006A08  0E00               	movlw	0
 27082  006A0A  141A               	andwf	___ftpack@arg+1,w,c
 27083  006A0C  6E1F               	movwf	(??___ftpack+1)& (0+255),c
 27084  006A0E  0EFF               	movlw	255
 27085  006A10  141B               	andwf	___ftpack@arg+2,w,c
 27086  006A12  6E20               	movwf	(??___ftpack+2)& (0+255),c
 27087  006A14  501E               	movf	??___ftpack,w,c
 27088  006A16  101F               	iorwf	??___ftpack+1,w,c
 27089  006A18  1020               	iorwf	??___ftpack+2,w,c
 27090  006A1A  B4D8               	btfsc	status,2,c
 27091  006A1C  D007               	goto	l1656
 27092  006A1E  D7E4               	goto	l1654
 27093  006A20  FFFF               	dw	65535	; assembler added errata NOP
 27094  006A22  061C               	decf	___ftpack@exp,f,c
 27095  006A24  90D8               	bcf	status,0,c
 27096  006A26  3619               	rlcf	___ftpack@arg,f,c
 27097  006A28  361A               	rlcf	___ftpack@arg+1,f,c
 27098  006A2A  361B               	rlcf	___ftpack@arg+2,f,c
 27099  006A2C                     l1656:
 27100  006A2C  FFFF               	dw	65535	; assembler added errata NOP
 27101  006A2E  BE1A               	btfsc	___ftpack@arg+1,7,c
 27102  006A30  D003               	goto	u7850
 27103  006A32  0E02               	movlw	2
 27104  006A34  601C               	cpfslt	___ftpack@exp,c
 27105  006A36  D7F4               	goto	l1657
 27106  006A38                     u7850:
 27107  006A38  FFFF               	dw	65535	; assembler added errata NOP
 27108  006A3A  A01C               	btfss	___ftpack@exp,0,c
 27109  006A3C  9E1A               	bcf	___ftpack@arg+1,7,c
 27110  006A3E  90D8               	bcf	status,0,c
 27111  006A40  321C               	rrcf	___ftpack@exp,f,c
 27112  006A42  501C               	movf	___ftpack@exp,w,c
 27113  006A44  121B               	iorwf	___ftpack@arg+2,f,c
 27114  006A46  501D               	movf	___ftpack@sign,w,c
 27115  006A48  A4D8               	btfss	status,2,c
 27116  006A4A  8E1B               	bsf	___ftpack@arg+2,7,c
 27117  006A4C  C019  F019         	movff	___ftpack@arg,?___ftpack
 27118  006A50  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
 27119  006A54  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
 27120  006A58                     l8564:
 27121  006A58  FFFF               	dw	65535	; assembler added errata NOP
 27122  006A5A  0012               	return		;funcret
 27123  006A5C  FFFF               	dw	65535	; errata NOP
 27124  006A5E                     __end_of___ftpack:
 27125                           	opt stack 0
 27126                           tosu	equ	0xFFF
 27127                           tosh	equ	0xFFE
 27128                           tosl	equ	0xFFD
 27129                           pclath	equ	0xFFA
 27130                           tblptru	equ	0xFF8
 27131                           tblptrh	equ	0xFF7
 27132                           tblptrl	equ	0xFF6
 27133                           tablat	equ	0xFF5
 27134                           prodh	equ	0xFF4
 27135                           prodl	equ	0xFF3
 27136                           intcon	equ	0xFF2
 27137                           postinc0	equ	0xFEE
 27138                           wreg	equ	0xFE8
 27139                           indf1	equ	0xFE7
 27140                           fsr1h	equ	0xFE2
 27141                           fsr1l	equ	0xFE1
 27142                           indf2	equ	0xFDF
 27143                           postinc2	equ	0xFDE
 27144                           postdec2	equ	0xFDD
 27145                           plusw2	equ	0xFDB
 27146                           fsr2h	equ	0xFDA
 27147                           fsr2l	equ	0xFD9
 27148                           status	equ	0xFD8
 27149                           
 27150 ;; *************** function _Get_Voltage_VL3 *****************
 27151 ;; Defined at:
 27152 ;;		line 133 in file "Get_Voltages.c"
 27153 ;; Parameters:    Size  Location     Type
 27154 ;;		None
 27155 ;; Auto vars:     Size  Location     Type
 27156 ;;		None
 27157 ;; Return value:  Size  Location     Type
 27158 ;;                  3   24[COMRAM] float 
 27159 ;; Registers used:
 27160 ;;		None
 27161 ;; Tracked objects:
 27162 ;;		On entry : 0/0
 27163 ;;		On exit  : 0/0
 27164 ;;		Unchanged: 0/0
 27165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27166 ;;      Params:         3       0       0       0       0       0       0
 27167 ;;      Locals:         0       0       0       0       0       0       0
 27168 ;;      Temps:          0       0       0       0       0       0       0
 27169 ;;      Totals:         3       0       0       0       0       0       0
 27170 ;;Total ram usage:        3 bytes
 27171 ;; Hardware stack levels used:    1
 27172 ;; Hardware stack levels required when called:    1
 27173 ;; This function calls:
 27174 ;;		Nothing
 27175 ;; This function is called by:
 27176 ;;		_Get_Control_Voltage
 27177 ;;		_Display_Data
 27178 ;; This function uses a non-reentrant model
 27179 ;;
 27180                           
 27181                           	psect	text156
 27182  004D60                     __ptext156:
 27183                           	opt stack 0
 27184  004D60                     _Get_Voltage_VL3:
 27185                           	opt stack 0
 27186  004D60  FFFF               	dw	65535	; assembler added errata NOP
 27187                           
 27188                           ;Get_Voltages.c: 135: return VL3;
 27189                           
 27190                           ;incstack = 0
 27191  004D62  C036  F019         	movff	_VL3,?_Get_Voltage_VL3
 27192  004D66  C037  F01A         	movff	_VL3+1,?_Get_Voltage_VL3+1
 27193  004D6A  C038  F01B         	movff	_VL3+2,?_Get_Voltage_VL3+2
 27194  004D6E  0012               	return		;funcret
 27195  004D70  FFFF               	dw	65535	; errata NOP
 27196  004D72                     __end_of_Get_Voltage_VL3:
 27197                           	opt stack 0
 27198                           tosu	equ	0xFFF
 27199                           tosh	equ	0xFFE
 27200                           tosl	equ	0xFFD
 27201                           pclath	equ	0xFFA
 27202                           tblptru	equ	0xFF8
 27203                           tblptrh	equ	0xFF7
 27204                           tblptrl	equ	0xFF6
 27205                           tablat	equ	0xFF5
 27206                           prodh	equ	0xFF4
 27207                           prodl	equ	0xFF3
 27208                           intcon	equ	0xFF2
 27209                           postinc0	equ	0xFEE
 27210                           wreg	equ	0xFE8
 27211                           indf1	equ	0xFE7
 27212                           fsr1h	equ	0xFE2
 27213                           fsr1l	equ	0xFE1
 27214                           indf2	equ	0xFDF
 27215                           postinc2	equ	0xFDE
 27216                           postdec2	equ	0xFDD
 27217                           plusw2	equ	0xFDB
 27218                           fsr2h	equ	0xFDA
 27219                           fsr2l	equ	0xFD9
 27220                           status	equ	0xFD8
 27221                           
 27222 ;; *************** function _Get_Voltage_VL2 *****************
 27223 ;; Defined at:
 27224 ;;		line 127 in file "Get_Voltages.c"
 27225 ;; Parameters:    Size  Location     Type
 27226 ;;		None
 27227 ;; Auto vars:     Size  Location     Type
 27228 ;;		None
 27229 ;; Return value:  Size  Location     Type
 27230 ;;                  3   24[COMRAM] float 
 27231 ;; Registers used:
 27232 ;;		None
 27233 ;; Tracked objects:
 27234 ;;		On entry : 0/0
 27235 ;;		On exit  : 0/0
 27236 ;;		Unchanged: 0/0
 27237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27238 ;;      Params:         3       0       0       0       0       0       0
 27239 ;;      Locals:         0       0       0       0       0       0       0
 27240 ;;      Temps:          0       0       0       0       0       0       0
 27241 ;;      Totals:         3       0       0       0       0       0       0
 27242 ;;Total ram usage:        3 bytes
 27243 ;; Hardware stack levels used:    1
 27244 ;; Hardware stack levels required when called:    1
 27245 ;; This function calls:
 27246 ;;		Nothing
 27247 ;; This function is called by:
 27248 ;;		_Get_Control_Voltage
 27249 ;;		_Display_Data
 27250 ;; This function uses a non-reentrant model
 27251 ;;
 27252                           
 27253                           	psect	text157
 27254  004D4E                     __ptext157:
 27255                           	opt stack 0
 27256  004D4E                     _Get_Voltage_VL2:
 27257                           	opt stack 0
 27258  004D4E  FFFF               	dw	65535	; assembler added errata NOP
 27259                           
 27260                           ;Get_Voltages.c: 129: return VL2;
 27261                           
 27262                           ;incstack = 0
 27263  004D50  C039  F019         	movff	_VL2,?_Get_Voltage_VL2
 27264  004D54  C03A  F01A         	movff	_VL2+1,?_Get_Voltage_VL2+1
 27265  004D58  C03B  F01B         	movff	_VL2+2,?_Get_Voltage_VL2+2
 27266  004D5C  0012               	return		;funcret
 27267  004D5E  FFFF               	dw	65535	; errata NOP
 27268  004D60                     __end_of_Get_Voltage_VL2:
 27269                           	opt stack 0
 27270                           tosu	equ	0xFFF
 27271                           tosh	equ	0xFFE
 27272                           tosl	equ	0xFFD
 27273                           pclath	equ	0xFFA
 27274                           tblptru	equ	0xFF8
 27275                           tblptrh	equ	0xFF7
 27276                           tblptrl	equ	0xFF6
 27277                           tablat	equ	0xFF5
 27278                           prodh	equ	0xFF4
 27279                           prodl	equ	0xFF3
 27280                           intcon	equ	0xFF2
 27281                           postinc0	equ	0xFEE
 27282                           wreg	equ	0xFE8
 27283                           indf1	equ	0xFE7
 27284                           fsr1h	equ	0xFE2
 27285                           fsr1l	equ	0xFE1
 27286                           indf2	equ	0xFDF
 27287                           postinc2	equ	0xFDE
 27288                           postdec2	equ	0xFDD
 27289                           plusw2	equ	0xFDB
 27290                           fsr2h	equ	0xFDA
 27291                           fsr2l	equ	0xFD9
 27292                           status	equ	0xFD8
 27293                           
 27294 ;; *************** function _Get_Voltage_VL1 *****************
 27295 ;; Defined at:
 27296 ;;		line 121 in file "Get_Voltages.c"
 27297 ;; Parameters:    Size  Location     Type
 27298 ;;		None
 27299 ;; Auto vars:     Size  Location     Type
 27300 ;;		None
 27301 ;; Return value:  Size  Location     Type
 27302 ;;                  3   24[COMRAM] float 
 27303 ;; Registers used:
 27304 ;;		None
 27305 ;; Tracked objects:
 27306 ;;		On entry : 0/0
 27307 ;;		On exit  : 0/0
 27308 ;;		Unchanged: 0/0
 27309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27310 ;;      Params:         3       0       0       0       0       0       0
 27311 ;;      Locals:         0       0       0       0       0       0       0
 27312 ;;      Temps:          0       0       0       0       0       0       0
 27313 ;;      Totals:         3       0       0       0       0       0       0
 27314 ;;Total ram usage:        3 bytes
 27315 ;; Hardware stack levels used:    1
 27316 ;; Hardware stack levels required when called:    1
 27317 ;; This function calls:
 27318 ;;		Nothing
 27319 ;; This function is called by:
 27320 ;;		_Get_Control_Voltage
 27321 ;;		_Display_Data
 27322 ;; This function uses a non-reentrant model
 27323 ;;
 27324                           
 27325                           	psect	text158
 27326  004D3C                     __ptext158:
 27327                           	opt stack 0
 27328  004D3C                     _Get_Voltage_VL1:
 27329                           	opt stack 0
 27330  004D3C  FFFF               	dw	65535	; assembler added errata NOP
 27331                           
 27332                           ;Get_Voltages.c: 123: return VL1;
 27333                           
 27334                           ;incstack = 0
 27335  004D3E  C03C  F019         	movff	_VL1,?_Get_Voltage_VL1
 27336  004D42  C03D  F01A         	movff	_VL1+1,?_Get_Voltage_VL1+1
 27337  004D46  C03E  F01B         	movff	_VL1+2,?_Get_Voltage_VL1+2
 27338  004D4A  0012               	return		;funcret
 27339  004D4C  FFFF               	dw	65535	; errata NOP
 27340  004D4E                     __end_of_Get_Voltage_VL1:
 27341                           	opt stack 0
 27342                           tosu	equ	0xFFF
 27343                           tosh	equ	0xFFE
 27344                           tosl	equ	0xFFD
 27345                           pclath	equ	0xFFA
 27346                           tblptru	equ	0xFF8
 27347                           tblptrh	equ	0xFF7
 27348                           tblptrl	equ	0xFF6
 27349                           tablat	equ	0xFF5
 27350                           prodh	equ	0xFF4
 27351                           prodl	equ	0xFF3
 27352                           intcon	equ	0xFF2
 27353                           postinc0	equ	0xFEE
 27354                           wreg	equ	0xFE8
 27355                           indf1	equ	0xFE7
 27356                           fsr1h	equ	0xFE2
 27357                           fsr1l	equ	0xFE1
 27358                           indf2	equ	0xFDF
 27359                           postinc2	equ	0xFDE
 27360                           postdec2	equ	0xFDD
 27361                           plusw2	equ	0xFDB
 27362                           fsr2h	equ	0xFDA
 27363                           fsr2l	equ	0xFD9
 27364                           status	equ	0xFD8
 27365                           
 27366 ;; *************** function _TimerInt *****************
 27367 ;; Defined at:
 27368 ;;		line 372 in file "main.c"
 27369 ;; Parameters:    Size  Location     Type
 27370 ;;		None
 27371 ;; Auto vars:     Size  Location     Type
 27372 ;;  stat            1   23[COMRAM] unsigned char 
 27373 ;; Return value:  Size  Location     Type
 27374 ;;                  1    wreg      void 
 27375 ;; Registers used:
 27376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27377 ;; Tracked objects:
 27378 ;;		On entry : 0/0
 27379 ;;		On exit  : 0/0
 27380 ;;		Unchanged: 0/0
 27381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27382 ;;      Params:         0       0       0       0       0       0       0
 27383 ;;      Locals:         1       0       0       0       0       0       0
 27384 ;;      Temps:         23       0       0       0       0       0       0
 27385 ;;      Totals:        24       0       0       0       0       0       0
 27386 ;;Total ram usage:       24 bytes
 27387 ;; Hardware stack levels used:    1
 27388 ;; This function calls:
 27389 ;;		Nothing
 27390 ;; This function is called by:
 27391 ;;		Interrupt level 2
 27392 ;; This function uses a non-reentrant model
 27393 ;;
 27394                           
 27395                           	psect	intcode
 27396  000008                     __pintcode:
 27397                           	opt stack 0
 27398  000008                     _TimerInt:
 27399                           	opt stack 0
 27400  000008  FFFF               	dw	65535	; assembler added errata NOP
 27401                           
 27402                           ;incstack = 0
 27403  00000A  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27404  00000C  CFFA F006          	movff	pclath,??_TimerInt+5
 27405  000010  CFFB F007          	movff	pclatu,??_TimerInt+6
 27406  000014  CFE9 F008          	movff	fsr0l,??_TimerInt+7
 27407  000018  CFEA F009          	movff	fsr0h,??_TimerInt+8
 27408  00001C  CFE1 F00A          	movff	fsr1l,??_TimerInt+9
 27409  000020  CFE2 F00B          	movff	fsr1h,??_TimerInt+10
 27410  000024  CFD9 F00C          	movff	fsr2l,??_TimerInt+11
 27411  000028  CFDA F00D          	movff	fsr2h,??_TimerInt+12
 27412  00002C  CFF3 F00E          	movff	prodl,??_TimerInt+13
 27413  000030  CFF4 F00F          	movff	prodh,??_TimerInt+14
 27414  000034  CFF6 F010          	movff	tblptrl,??_TimerInt+15
 27415  000038  CFF7 F011          	movff	tblptrh,??_TimerInt+16
 27416  00003C  CFF8 F012          	movff	tblptru,??_TimerInt+17
 27417  000040  CFF5 F013          	movff	tablat,??_TimerInt+18
 27418  000044  C047  F014         	movff	btemp,??_TimerInt+19
 27419  000048  C048  F015         	movff	btemp+1,??_TimerInt+20
 27420  00004C  C049  F016         	movff	btemp+2,??_TimerInt+21
 27421  000050  C04A  F017         	movff	btemp+3,??_TimerInt+22
 27422                           
 27423                           ;main.c: 374: char stat;
 27424                           ;main.c: 376: if (TMR0IE && TMR0IF) {
 27425  000054  BAF2               	btfsc	intcon,5,c	;volatile
 27426  000056  A4F2               	btfss	intcon,2,c	;volatile
 27427  000058  D008               	goto	i2l1041
 27428                           
 27429                           ;main.c: 377: TMR0IF = 0;
 27430  00005A  94F2               	bcf	intcon,2,c	;volatile
 27431                           
 27432                           ;main.c: 378: Int_Flag=1;
 27433  00005C  0E01               	movlw	1
 27434  00005E  0100               	movlb	0	; () banked
 27435  000060  6FFA               	movwf	_Int_Flag& (0+255),b
 27436                           
 27437                           ; BSR set to: 0
 27438                           ;main.c: 379: TMR0H=value.HSB;
 27439  000062  C0FC  FFD7         	movff	_value,4055	;volatile
 27440                           
 27441                           ; BSR set to: 0
 27442                           ;main.c: 380: TMR0L=value.LSB;
 27443  000066  C0FD  FFD6         	movff	_value+1,4054	;volatile
 27444  00006A                     i2l1041:
 27445  00006A  FFFF               	dw	65535	; assembler added errata NOP
 27446                           
 27447                           ;main.c: 381: }
 27448                           ;main.c: 382: if(TXIE && TXIF){
 27449                           
 27450                           ; BSR set to: 0
 27451  00006C  B89D               	btfsc	3997,4,c	;volatile
 27452  00006E  A89E               	btfss	3998,4,c	;volatile
 27453  000070  D026               	goto	i2l1045
 27454                           
 27455                           ;main.c: 384: if(tx_buffer[tx_pointer]!=(0)){
 27456  000072  5044               	movf	_tx_pointer,w,c
 27457  000074  0D01               	mullw	1
 27458  000076  0E52               	movlw	low _tx_buffer
 27459  000078  24F3               	addwf	prodl,w,c
 27460  00007A  6ED9               	movwf	fsr2l,c
 27461  00007C  0E01               	movlw	high _tx_buffer
 27462  00007E  20F4               	addwfc	prodh,w,c
 27463  000080  6EDA               	movwf	fsr2h,c
 27464  000082  50DF               	movf	indf2,w,c
 27465  000084  B4D8               	btfsc	status,2,c
 27466  000086  D012               	goto	i2l1043
 27467                           
 27468                           ;main.c: 385: TXREG=tx_buffer[tx_pointer++];
 27469  000088  5044               	movf	_tx_pointer,w,c
 27470  00008A  0D01               	mullw	1
 27471  00008C  0E52               	movlw	low _tx_buffer
 27472  00008E  24F3               	addwf	prodl,w,c
 27473  000090  6ED9               	movwf	fsr2l,c
 27474  000092  0E01               	movlw	high _tx_buffer
 27475  000094  20F4               	addwfc	prodh,w,c
 27476  000096  6EDA               	movwf	fsr2h,c
 27477  000098  50DF               	movf	indf2,w,c
 27478  00009A  6EAD               	movwf	4013,c	;volatile
 27479  00009C  2A44               	incf	_tx_pointer,f,c
 27480                           
 27481                           ;main.c: 386: if(tx_pointer>40){
 27482  00009E  0E28               	movlw	40
 27483  0000A0  6444               	cpfsgt	_tx_pointer,c
 27484  0000A2  D00D               	goto	i2l1045
 27485                           
 27486                           ;main.c: 387: tx_pointer=0;
 27487  0000A4  0E00               	movlw	0
 27488  0000A6  6E44               	movwf	_tx_pointer,c
 27489                           
 27490                           ;main.c: 388: tx_flag=3;
 27491  0000A8  0E03               	movlw	3
 27492  0000AA  D005               	goto	L28
 27493  0000AC                     i2l1043:
 27494  0000AC  FFFF               	dw	65535	; assembler added errata NOP
 27495                           
 27496                           ;main.c: 392: else {
 27497                           ;main.c: 393: TXREG==(0);
 27498                           
 27499                           ; BSR set to: 0
 27500  0000AE  50AD               	movf	4013,w,c	;volatile
 27501                           
 27502                           ;main.c: 394: tx_pointer=0;
 27503  0000B0  0E00               	movlw	0
 27504  0000B2  6E44               	movwf	_tx_pointer,c
 27505                           
 27506                           ;main.c: 395: tx_flag=2;
 27507  0000B4  0E02               	movlw	2
 27508  0000B6                     L28:
 27509  0000B6  FFFF               	dw	65535	; assembler added errata NOP
 27510  0000B8  0100               	movlb	0	; () banked
 27511  0000BA  6FF8               	movwf	_tx_flag& (0+255),b
 27512                           
 27513                           ; BSR set to: 0
 27514                           ;main.c: 396: TXIE=0;
 27515  0000BC  989D               	bcf	3997,4,c	;volatile
 27516  0000BE                     i2l1045:
 27517  0000BE  FFFF               	dw	65535	; assembler added errata NOP
 27518                           
 27519                           ;main.c: 397: }
 27520                           ;main.c: 398: }
 27521                           ;main.c: 400: if (RCIE && RCIF) {
 27522                           
 27523                           ; BSR set to: 0
 27524                           
 27525                           ; BSR set to: 0
 27526  0000C0  BA9D               	btfsc	3997,5,c	;volatile
 27527  0000C2  AA9E               	btfss	3998,5,c	;volatile
 27528  0000C4  D04E               	goto	i2l1051
 27529                           
 27530                           ;main.c: 401: stat = RCSTA & 0x06;
 27531  0000C6  50AB               	movf	4011,w,c	;volatile
 27532  0000C8  0B06               	andlw	6
 27533  0000CA  6E18               	movwf	TimerInt@stat,c
 27534                           
 27535                           ;main.c: 402: if (stat == 0) {
 27536  0000CC  5018               	movf	TimerInt@stat,w,c
 27537  0000CE  A4D8               	btfss	status,2,c
 27538  0000D0  D03F               	goto	i2l1047
 27539                           
 27540                           ;main.c: 403: rx_buffer[rx_pointer++] = RCREG;
 27541  0000D2  5046               	movf	_rx_pointer,w,c
 27542  0000D4  0D01               	mullw	1
 27543  0000D6  0E95               	movlw	low _rx_buffer
 27544  0000D8  24F3               	addwf	prodl,w,c
 27545  0000DA  6ED9               	movwf	fsr2l,c
 27546  0000DC  0E01               	movlw	high _rx_buffer
 27547  0000DE  20F4               	addwfc	prodh,w,c
 27548  0000E0  6EDA               	movwf	fsr2h,c
 27549  0000E2  CFAE FFDF          	movff	4014,indf2	;volatile
 27550  0000E6  2A46               	incf	_rx_pointer,f,c
 27551                           
 27552                           ;main.c: 404: if (rx_pointer > 20) {
 27553  0000E8  0E14               	movlw	20
 27554  0000EA  6446               	cpfsgt	_rx_pointer,c
 27555  0000EC  D001               	goto	i2l1048
 27556  0000EE  D033               	goto	i2l8504
 27557  0000F0                     i2l1048:
 27558  0000F0  FFFF               	dw	65535	; assembler added errata NOP
 27559                           
 27560                           ;main.c: 408: else if (rx_buffer[rx_pointer - 1] == 0x0d) {
 27561                           
 27562                           ; BSR set to: 0
 27563  0000F2  0EFF               	movlw	255
 27564  0000F4  6E01               	movwf	??_TimerInt& (0+255),c
 27565  0000F6  0EFF               	movlw	255
 27566  0000F8  6E02               	movwf	(??_TimerInt+1)& (0+255),c
 27567  0000FA  5046               	movf	_rx_pointer,w,c
 27568  0000FC  6E03               	movwf	(??_TimerInt+2)& (0+255),c
 27569  0000FE  6A04               	clrf	(??_TimerInt+3)& (0+255),c
 27570  000100  5001               	movf	??_TimerInt,w,c
 27571  000102  2603               	addwf	??_TimerInt+2,f,c
 27572  000104  5002               	movf	??_TimerInt+1,w,c
 27573  000106  2204               	addwfc	??_TimerInt+3,f,c
 27574  000108  0E95               	movlw	low _rx_buffer
 27575  00010A  2403               	addwf	??_TimerInt+2,w,c
 27576  00010C  6ED9               	movwf	fsr2l,c
 27577  00010E  0E01               	movlw	high _rx_buffer
 27578  000110  2004               	addwfc	??_TimerInt+3,w,c
 27579  000112  6EDA               	movwf	fsr2h,c
 27580  000114  0E0D               	movlw	13
 27581  000116  18DE               	xorwf	postinc2,w,c
 27582  000118  A4D8               	btfss	status,2,c
 27583  00011A  D023               	goto	i2l1051
 27584                           
 27585                           ;main.c: 409: rx_buffer[rx_pointer - 1] = (0);
 27586  00011C  0EFF               	movlw	255
 27587  00011E  6E01               	movwf	??_TimerInt& (0+255),c
 27588  000120  0EFF               	movlw	255
 27589  000122  6E02               	movwf	(??_TimerInt+1)& (0+255),c
 27590  000124  5046               	movf	_rx_pointer,w,c
 27591  000126  6E03               	movwf	(??_TimerInt+2)& (0+255),c
 27592  000128  6A04               	clrf	(??_TimerInt+3)& (0+255),c
 27593  00012A  5001               	movf	??_TimerInt,w,c
 27594  00012C  2603               	addwf	??_TimerInt+2,f,c
 27595  00012E  5002               	movf	??_TimerInt+1,w,c
 27596  000130  2204               	addwfc	??_TimerInt+3,f,c
 27597  000132  0E95               	movlw	low _rx_buffer
 27598  000134  2403               	addwf	??_TimerInt+2,w,c
 27599  000136  6ED9               	movwf	fsr2l,c
 27600  000138  0E01               	movlw	high _rx_buffer
 27601  00013A  2004               	addwfc	??_TimerInt+3,w,c
 27602  00013C  6EDA               	movwf	fsr2h,c
 27603  00013E  0E00               	movlw	0
 27604  000140  6EDF               	movwf	indf2,c
 27605                           
 27606                           ;main.c: 410: rx_flag = 1;
 27607  000142  0E01               	movlw	1
 27608  000144  0100               	movlb	0	; () banked
 27609  000146  6FF9               	movwf	_rx_flag& (0+255),b
 27610                           
 27611                           ; BSR set to: 0
 27612                           ;main.c: 411: rx_pointer = 0;
 27613  000148  0E00               	movlw	0
 27614  00014A  6E46               	movwf	_rx_pointer,c
 27615                           
 27616                           ; BSR set to: 0
 27617                           ;main.c: 412: RCIE = 0;
 27618  00014C  9A9D               	bcf	3997,5,c	;volatile
 27619                           
 27620                           ; BSR set to: 0
 27621                           ;main.c: 413: }
 27622                           ;main.c: 415: }
 27623                           
 27624                           ; BSR set to: 0
 27625  00014E  D009               	goto	i2l1051
 27626  000150                     i2l1047:
 27627  000150  FFFF               	dw	65535	; assembler added errata NOP
 27628                           
 27629                           ;main.c: 416: else {
 27630                           ;main.c: 417: RCSTAbits.CREN = 0;
 27631  000152  98AB               	bcf	4011,4,c	;volatile
 27632                           
 27633                           ;main.c: 418: RCSTAbits.CREN = 1;
 27634  000154  88AB               	bsf	4011,4,c	;volatile
 27635  000156                     i2l8504:
 27636  000156  FFFF               	dw	65535	; assembler added errata NOP
 27637                           
 27638                           ;main.c: 419: rx_pointer = 0;
 27639  000158  0E00               	movlw	0
 27640  00015A  6E46               	movwf	_rx_pointer,c
 27641                           
 27642                           ;main.c: 420: rx_flag = 3;
 27643  00015C  0E03               	movlw	3
 27644  00015E  0100               	movlb	0	; () banked
 27645  000160  6FF9               	movwf	_rx_flag& (0+255),b
 27646  000162                     i2l1051:
 27647  000162  FFFF               	dw	65535	; assembler added errata NOP
 27648                           
 27649                           ; BSR set to: 0
 27650                           
 27651                           ; BSR set to: 0
 27652  000164  C017  F04A         	movff	??_TimerInt+22,btemp+3
 27653  000168  C016  F049         	movff	??_TimerInt+21,btemp+2
 27654  00016C  C015  F048         	movff	??_TimerInt+20,btemp+1
 27655  000170  C014  F047         	movff	??_TimerInt+19,btemp
 27656  000174  C013  FFF5         	movff	??_TimerInt+18,tablat
 27657  000178  C012  FFF8         	movff	??_TimerInt+17,tblptru
 27658  00017C  C011  FFF7         	movff	??_TimerInt+16,tblptrh
 27659  000180  C010  FFF6         	movff	??_TimerInt+15,tblptrl
 27660  000184  C00F  FFF4         	movff	??_TimerInt+14,prodh
 27661  000188  C00E  FFF3         	movff	??_TimerInt+13,prodl
 27662  00018C  C00D  FFDA         	movff	??_TimerInt+12,fsr2h
 27663  000190  C00C  FFD9         	movff	??_TimerInt+11,fsr2l
 27664  000194  C00B  FFE2         	movff	??_TimerInt+10,fsr1h
 27665  000198  C00A  FFE1         	movff	??_TimerInt+9,fsr1l
 27666  00019C  C009  FFEA         	movff	??_TimerInt+8,fsr0h
 27667  0001A0  C008  FFE9         	movff	??_TimerInt+7,fsr0l
 27668  0001A4  C007  FFFB         	movff	??_TimerInt+6,pclatu
 27669  0001A8  C006  FFFA         	movff	??_TimerInt+5,pclath
 27670  0001AC  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27671  0001AE  0011               	retfie		f
 27672  0001B0  FFFF               	dw	65535	; errata NOP
 27673  0001B2                     __end_of_TimerInt:
 27674                           	opt stack 0
 27675                           tosu	equ	0xFFF
 27676                           tosh	equ	0xFFE
 27677                           tosl	equ	0xFFD
 27678                           pclatu	equ	0xFFB
 27679                           pclath	equ	0xFFA
 27680                           tblptru	equ	0xFF8
 27681                           tblptrh	equ	0xFF7
 27682                           tblptrl	equ	0xFF6
 27683                           tablat	equ	0xFF5
 27684                           prodh	equ	0xFF4
 27685                           prodl	equ	0xFF3
 27686                           intcon	equ	0xFF2
 27687                           postinc0	equ	0xFEE
 27688                           fsr0h	equ	0xFEA
 27689                           fsr0l	equ	0xFE9
 27690                           wreg	equ	0xFE8
 27691                           indf1	equ	0xFE7
 27692                           fsr1h	equ	0xFE2
 27693                           fsr1l	equ	0xFE1
 27694                           indf2	equ	0xFDF
 27695                           postinc2	equ	0xFDE
 27696                           postdec2	equ	0xFDD
 27697                           plusw2	equ	0xFDB
 27698                           fsr2h	equ	0xFDA
 27699                           fsr2l	equ	0xFD9
 27700                           status	equ	0xFD8
 27701                           tosu	equ	0xFFF
 27702                           tosh	equ	0xFFE
 27703                           tosl	equ	0xFFD
 27704                           pclatu	equ	0xFFB
 27705                           pclath	equ	0xFFA
 27706                           tblptru	equ	0xFF8
 27707                           tblptrh	equ	0xFF7
 27708                           tblptrl	equ	0xFF6
 27709                           tablat	equ	0xFF5
 27710                           prodh	equ	0xFF4
 27711                           prodl	equ	0xFF3
 27712                           intcon	equ	0xFF2
 27713                           postinc0	equ	0xFEE
 27714                           fsr0h	equ	0xFEA
 27715                           fsr0l	equ	0xFE9
 27716                           wreg	equ	0xFE8
 27717                           indf1	equ	0xFE7
 27718                           fsr1h	equ	0xFE2
 27719                           fsr1l	equ	0xFE1
 27720                           indf2	equ	0xFDF
 27721                           postinc2	equ	0xFDE
 27722                           postdec2	equ	0xFDD
 27723                           plusw2	equ	0xFDB
 27724                           fsr2h	equ	0xFDA
 27725                           fsr2l	equ	0xFD9
 27726                           status	equ	0xFD8
 27727                           
 27728                           	psect	rparam
 27729  0000                     tosu	equ	0xFFF
 27730                           tosh	equ	0xFFE
 27731                           tosl	equ	0xFFD
 27732                           pclatu	equ	0xFFB
 27733                           pclath	equ	0xFFA
 27734                           tblptru	equ	0xFF8
 27735                           tblptrh	equ	0xFF7
 27736                           tblptrl	equ	0xFF6
 27737                           tablat	equ	0xFF5
 27738                           prodh	equ	0xFF4
 27739                           prodl	equ	0xFF3
 27740                           intcon	equ	0xFF2
 27741                           postinc0	equ	0xFEE
 27742                           fsr0h	equ	0xFEA
 27743                           fsr0l	equ	0xFE9
 27744                           wreg	equ	0xFE8
 27745                           indf1	equ	0xFE7
 27746                           fsr1h	equ	0xFE2
 27747                           fsr1l	equ	0xFE1
 27748                           indf2	equ	0xFDF
 27749                           postinc2	equ	0xFDE
 27750                           postdec2	equ	0xFDD
 27751                           plusw2	equ	0xFDB
 27752                           fsr2h	equ	0xFDA
 27753                           fsr2l	equ	0xFD9
 27754                           status	equ	0xFD8
 27755                           
 27756                           	psect	temp
 27757  000047                     btemp:
 27758                           	opt stack 0
 27759  000047                     	ds	1
 27760  0000                     int$flags	set	btemp
 27761  0000                     wtemp6	set	btemp+1
 27762                           tosu	equ	0xFFF
 27763                           tosh	equ	0xFFE
 27764                           tosl	equ	0xFFD
 27765                           pclatu	equ	0xFFB
 27766                           pclath	equ	0xFFA
 27767                           tblptru	equ	0xFF8
 27768                           tblptrh	equ	0xFF7
 27769                           tblptrl	equ	0xFF6
 27770                           tablat	equ	0xFF5
 27771                           prodh	equ	0xFF4
 27772                           prodl	equ	0xFF3
 27773                           intcon	equ	0xFF2
 27774                           postinc0	equ	0xFEE
 27775                           fsr0h	equ	0xFEA
 27776                           fsr0l	equ	0xFE9
 27777                           wreg	equ	0xFE8
 27778                           indf1	equ	0xFE7
 27779                           fsr1h	equ	0xFE2
 27780                           fsr1l	equ	0xFE1
 27781                           indf2	equ	0xFDF
 27782                           postinc2	equ	0xFDE
 27783                           postdec2	equ	0xFDD
 27784                           plusw2	equ	0xFDB
 27785                           fsr2h	equ	0xFDA
 27786                           fsr2l	equ	0xFD9
 27787                           status	equ	0xFD8


Data Sizes:
    Strings     601
    Constant    130
    Data        2
    BSS         225
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      70
    BANK0           160    141     158
    BANK1           256     35     222
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    time_set$3538	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set$3537	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), NULL(NULL[0]), STR_1(CODE[2]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    asctime@cp	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    asctime@tim	PTR const struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    asctime@s	PTR const unsigned char  size(2) Largest target is 37
		 -> STR_89(CODE[37]), STR_88(CODE[22]), 

    put2d@cp	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), STR_69(CODE[2]), STR_1(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_66(CODE[7]), STR_63(CODE[5]), STR_61(CODE[5]), STR_59(CODE[5]), 
		 -> STR_57(CODE[4]), STR_55(CODE[3]), STR_52(CODE[5]), STR_50(CODE[4]), 
		 -> STR_48(CODE[4]), STR_46(CODE[3]), STR_44(CODE[9]), STR_42(CODE[9]), 
		 -> STR_40(CODE[9]), STR_38(CODE[3]), STR_36(CODE[3]), STR_34(CODE[3]), 
		 -> STR_32(CODE[5]), STR_31(CODE[5]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[3]), STR_27(CODE[9]), STR_26(CODE[9]), STR_25(CODE[12]), 
		 -> STR_24(CODE[3]), STR_23(CODE[3]), STR_22(CODE[3]), STR_20(CODE[6]), 
		 -> STR_19(CODE[6]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[10]), STR_8(CODE[9]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[6]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_84(CODE[5]), STR_83(CODE[19]), 
		 -> STR_82(CODE[5]), STR_81(CODE[5]), STR_80(CODE[5]), STR_79(CODE[20]), 
		 -> STR_68(CODE[7]), STR_67(CODE[6]), STR_65(CODE[26]), STR_64(CODE[28]), 
		 -> STR_62(CODE[10]), STR_60(CODE[10]), STR_58(CODE[6]), STR_56(CODE[6]), 
		 -> STR_54(CODE[6]), STR_53(CODE[8]), STR_51(CODE[6]), STR_49(CODE[6]), 
		 -> STR_47(CODE[6]), STR_45(CODE[6]), STR_43(CODE[6]), STR_41(CODE[6]), 
		 -> STR_39(CODE[6]), STR_37(CODE[6]), STR_35(CODE[6]), STR_33(CODE[17]), 
		 -> STR_21(CODE[17]), STR_12(CODE[7]), STR_7(CODE[18]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_78(CODE[4]), STR_77(CODE[23]), STR_76(CODE[8]), STR_75(CODE[29]), 
		 -> STR_74(CODE[41]), STR_73(CODE[8]), STR_72(CODE[25]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    mktime@timeptr	PTR struct tm size(2) Largest target is 18
		 -> time@DateTime(BANK0[18]), 

    sp__asctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    ctime@tp	PTR const long  size(2) Largest target is 4
		 -> main@sys_time(BANK1[4]), 

    gmtime@tp	PTR const long  size(2) Largest target is 4
		 -> localtime@t(BANK0[4]), 

    sp__gmtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    localtime@tp	PTR const long  size(2) Largest target is 4
		 -> reset_max_min@system_time(COMRAM[4]), main@sys_time(BANK1[4]), get_list@systime(BANK0[4]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    atof@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtod@s	PTR const unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    strtod@res	PTR PTR const unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> asctime@buf(BANK1[27]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_87(CODE[7]), 
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_86(CODE[5]), STR_85(CODE[5]), STR_84(CODE[5]), STR_83(CODE[19]), 
		 -> STR_82(CODE[5]), STR_81(CODE[5]), STR_80(CODE[5]), STR_79(CODE[20]), 
		 -> STR_78(CODE[4]), STR_77(CODE[23]), STR_76(CODE[8]), STR_75(CODE[29]), 
		 -> STR_74(CODE[41]), STR_73(CODE[8]), STR_72(CODE[25]), STR_68(CODE[7]), 
		 -> STR_67(CODE[6]), STR_65(CODE[26]), STR_64(CODE[28]), STR_62(CODE[10]), 
		 -> STR_60(CODE[10]), STR_58(CODE[6]), STR_56(CODE[6]), STR_54(CODE[6]), 
		 -> STR_53(CODE[8]), STR_51(CODE[6]), STR_49(CODE[6]), STR_47(CODE[6]), 
		 -> STR_45(CODE[6]), STR_43(CODE[6]), STR_41(CODE[6]), STR_39(CODE[6]), 
		 -> STR_37(CODE[6]), STR_35(CODE[6]), STR_33(CODE[17]), STR_21(CODE[17]), 
		 -> STR_12(CODE[7]), STR_7(CODE[18]), 

    S2473__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2473__prbuf$ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 40
		 -> Display_Data@buffer(BANK1[20]), tx_buffer(BANK1[40]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    sp__ctime	PTR unsigned char  size(2) Largest target is 27
		 -> asctime@buf(BANK1[27]), 

    main@p	PTR unsigned char  size(2) Largest target is 54
		 -> STR_71(CODE[54]), 

    LCD_WriteStr@Str	PTR unsigned char  size(2) Largest target is 54
		 -> Display_Data@buffer(BANK1[20]), STR_71(CODE[54]), 

    ReadStr_I2C@Str	PTR unsigned char  size(2) Largest target is 4
		 -> time@time(BANK0[3]), time@date(BANK0[4]), 

    WriteStr_I2C@Str	PTR unsigned char  size(2) Largest target is 4
		 -> time_set@hour(BANK0[3]), date_set@date(BANK0[4]), 

    rd_string_EE@buffer	PTR unsigned char  size(2) Largest target is 53
		 -> Get_Variables@data(BANK0[53]), 

    wr_string_EE@buffer	PTR unsigned char  size(2) Largest target is 53
		 -> Save_Variables@data(BANK0[53]), 

    time@t	PTR long  size(2) Largest target is 4
		 -> reset_max_min@system_time(COMRAM[4]), main@sys_time(BANK1[4]), get_list@systime(BANK0[4]), 

    set_date@Date_Data	PTR unsigned char  size(2) Largest target is 4
		 -> date_set@date(BANK0[4]), 

    set_time@Time_Data	PTR unsigned char  size(2) Largest target is 3
		 -> time_set@hour(BANK0[3]), 

    get_date@Date_Data	PTR unsigned char  size(2) Largest target is 4
		 -> time@date(BANK0[4]), 

    get_time@Time_Data	PTR unsigned char  size(2) Largest target is 3
		 -> time@time(BANK0[3]), 

    time_set@tim	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    time_set@ptr	PTR unsigned char [3] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    time_set@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_70(CODE[2]), 

    date_set@dat	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set@ptr	PTR unsigned char [5] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    date_set@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_69(CODE[2]), 

    sp__localtime	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    get_list@t	PTR struct tm size(2) Largest target is 18
		 -> gmtime@tim(BANK1[18]), 

    get_list@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    set_list@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    set_list@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    cal_analog@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    cal_analog@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    reset_var@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    lcd_display@data	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    lcd_display@var	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    read_command@rx_buff	PTR unsigned char  size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), 

    read_command@ptr	PTR unsigned char [3] size(2) Largest target is 20
		 -> rx_buffer(BANK1[20]), NULL(NULL[0]), 

    read_command@tx_buff	PTR unsigned char  size(2) Largest target is 40
		 -> tx_buffer(BANK1[40]), 

    buffer	PTR unsigned char  size(2) Largest target is 40
		 -> tx_buffer(BANK1[40]), NULL(NULL[0]), 

    read_command@sep_tok	PTR unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _time_set->_atoi
    _set_time->_WriteStr_I2C
    _date_set->_atoi
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _set_date->_WriteStr_I2C
    _WriteStr_I2C->_OpenI2C
    _WriteStr_I2C->_WriteI2C
    _intTObcd->_atoi
    _set_min->_Get_Voltage_Vin
    _set_max->_Get_Voltage_Vin
    _lcd_display->_atoi
    _atoi->___wmul
    _LCD_SetContrast->_OpenI2C
    _LCD_SetContrast->_WriteI2C
    _LCD_SetBackLight_Brightness->_OpenI2C
    _LCD_SetBackLight_Brightness->_WriteI2C
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    ___lwdiv->___wmul
    _isleap->___lwmod
    _get_time->_ReadStr_I2C
    _get_date->_ReadStr_I2C
    _ReadStr_I2C->_OpenI2C
    _ReadStr_I2C->_WriteI2C
    _bcdTOint->___wmul
    ___altoft->___ftpack
    _Save_Variables->_wr_string_EE
    _wr_string_EE->_wr_byte_EE
    _localtime->_gmtime
    _gmtime->___aldiv
    _dylen->___lwmod
    _put2d->___awdiv
    _OpenIO5R->_WriteIO5R
    _LCD_Clear->_I2C_Send
    _I2C_Send->_OpenI2C
    _I2C_Send->_WriteI2C
    _Get_Voltage_Data->___ftadd
    ___lwtoft->___ftpack
    _LowPass_Vin->___ftadd
    _LowPass_VL3->___ftadd
    _LowPass_VL2->___ftadd
    _LowPass_VL1->___ftadd
    _Check_VL_N->___ftge
    _Get_Variables->_rd_string_EE
    _rd_string_EE->_rd_byte_EE
    __doprnt->___ftadd
    _fround->___ftadd
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _LCD_WriteStr->_OpenI2C
    _LCD_WriteStr->_WriteI2C
    _LCD_SetCursor_Position->_OpenI2C
    _LCD_SetCursor_Position->_WriteI2C
    ___ftge->___ftneg
    _PID_Controller->___ftadd
    ___ftneg->_get_PID_deadband
    ___ftmul->___ftadd
    _Get_Control_Voltage->___ftadd
    ___lbtoft->___ftpack
    ___ftdiv->___ftadd
    ___ftadd->___wmul

Critical Paths under _TimerInt in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_read_command
    _read_command->_get_list
    _set_list->_sprintf
    _time_set->_intTObcd
    _date_set->_intTObcd
    _intTObcd->_atoi
    _reset_var->_sprintf
    _lcd_display->_atoi
    _get_list->_sprintf
    _time->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _cal_analog->_sprintf
    _atof->_strtod
    _strtod->___ftmul
    _printf->__doprnt
    _ctime->_asctime
    _asctime->_localtime
    _Get_Voltage_Data->_LowPass_VL1
    _Get_Voltage_Data->_LowPass_VL2
    _Get_Voltage_Data->_LowPass_VL3
    _Get_Voltage_Data->_LowPass_Vin
    _LowPass_Vin->___ftmul
    _LowPass_VL3->___ftmul
    _LowPass_VL2->___ftmul
    _LowPass_VL1->___ftmul
    _Display_Data->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    _Control_Loop->_PID_Controller
    _PID_Controller->___ftmul
    ___ftmul->___ftdiv
    _Get_Control_Voltage->___ftdiv
    ___ftdiv->___ftadd

Critical Paths under _TimerInt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Display_Data

Critical Paths under _TimerInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TimerInt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TimerInt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TimerInt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TimerInt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                44    44      0 1168160
                                            140 BANK0      1     1      0
                                             21 BANK1     14    14      0
                       _Control_Loop
                       _Display_Data
                      _Get_Variables
                   _Get_Voltage_Data
                    _Get_Voltage_Vin
                          _LCD_Clear
                       _LCD_WriteStr
                     _Manual_Control
                            _OpenADC
                            _OpenI2C
                           _OpenIO5R
                          _OpenUSART
                        _Open_Timer0
                  _Rd_Digital_Inputs
                     _Save_Variables
                 _Set_LP_RC_constant
                          _WriteIO5R
                    _check_V1_status
                    _check_V2_status
                    _check_V3_status
                              _ctime
                             _printf
                       _read_command
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                            _set_max
                         _set_max_VL
                            _set_min
                         _set_min_VL
                             _strlen
                               _time
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     220
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _read_command                                        16    12      4  734223
                                            134 BANK0      6     2      4
                                              0 BANK1     10    10      0
                         _cal_analog
                           _get_list
                        _lcd_display
                          _reset_var
                           _set_list
                            _sprintf
                             _strcmp
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _set_list                                             7     3      4  190082
                                            124 BANK0      7     3      4
                     _Save_Variables
                 _Set_LP_RC_constant
                               _atof
                           _date_set
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                         _set_max_VL
                         _set_min_VL
                            _sprintf
                             _strcmp
                           _time_set
 ---------------------------------------------------------------------------------
 (3) _time_set                                            23    21      2   23851
                                             11 BANK0     23    21      2
                               _atoi
                           _intTObcd
                           _set_time
                             _strtok
 ---------------------------------------------------------------------------------
 (4) _set_time                                             2     0      2    1734
                                             33 COMRAM     2     0      2
                       _WriteStr_I2C
 ---------------------------------------------------------------------------------
 (3) _date_set                                            30    28      2   24194
                                             11 BANK0     30    28      2
                               _atoi
                           _intTObcd
                           _set_date
                             _strtok
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    2959
                                             35 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (3) _strspn                                               7     3      4     797
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              7     3      4     797
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strchr                                               4     0      4     484
                                             24 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _set_date                                             2     0      2    1734
                                             33 COMRAM     2     0      2
                       _WriteStr_I2C
 ---------------------------------------------------------------------------------
 (5) _WriteStr_I2C                                         7     3      4    1613
                                             26 COMRAM     7     3      4
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _intTObcd                                             6     4      2   11620
                                              5 BANK0      6     4      2
                            ___awdiv
                            ___awmod
                             ___wmul
                               _atoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _reset_var                                            2     0      2  110803
                                            124 BANK0      2     0      2
                    _Get_Voltage_Vin
                            _set_max
                            _set_min
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _set_min                                              3     0      3     391
                                             27 COMRAM     3     0      3
                    _Get_Voltage_Vin (ARG)
 ---------------------------------------------------------------------------------
 (1) _set_max                                              3     0      3     391
                                             27 COMRAM     3     0      3
                    _Get_Voltage_Vin (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_display                                          6     2      4   17122
                                              5 BANK0      6     2      4
        _LCD_SetBackLight_Brightness
                    _LCD_SetContrast
                               _atoi
                             _strcmp
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    6805
                                             44 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _LCD_SetContrast                                      1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _LCD_SetBackLight_Brightness                          1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _get_list                                            10     8      2  160934
                                            124 BANK0     10     8      2
                _Get_Control_Voltage
                    _Get_Voltage_Vin
                 _get_LP_RC_Constant
                         _get_PID_Kp
                          _get_PID_T
                         _get_PID_Td
                         _get_PID_Ti
                   _get_PID_deadband
                     _get_PID_output
                   _get_PID_setpoint
                         _get_max_VL
                         _get_min_VL
                          _localtime
                            _sprintf
                             _strcmp
                               _time
 ---------------------------------------------------------------------------------
 (1) _time                                                27    25      2   25172
                                             44 BANK0     27    25      2
                           _bcdTOint
                           _get_date
                           _get_time
                             _mktime
 ---------------------------------------------------------------------------------
 (2) _mktime                                              14    10      4   13088
                                             30 BANK0     14    10      4
                             ___lmul
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (3) _ymd_to_scalar                                       16    10      6   11252
                                             14 BANK0     16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (4) _years_to_days                                       10     6      4    2391
                                              4 BANK0     10     6      4
                             ___lmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (4) _months_to_days                                       2     0      2    6914
                                              4 BANK0      2     0      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     781
                                             44 COMRAM     3     3      0
                                              0 BANK0      4     0      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _isleap                                               5     3      2    1172
                                             29 COMRAM     5     3      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _get_time                                             2     0      2    2108
                                             32 COMRAM     2     0      2
                        _ReadStr_I2C
 ---------------------------------------------------------------------------------
 (2) _get_date                                             2     0      2    2108
                                             32 COMRAM     2     0      2
                        _ReadStr_I2C
 ---------------------------------------------------------------------------------
 (3) _ReadStr_I2C                                          6     2      4    1987
                                             26 COMRAM     6     2      4
                             _AckI2C
                           _CloseI2C
                            _IdleI2C
                         _Not_AckI2C
                            _OpenI2C
                            _ReadI2C
                         _RestartI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _RestartI2C                                           1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Not_AckI2C                                           1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _AckI2C                                               1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcdTOint                                             7     5      2    6704
                                             44 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _get_PID_output                                       3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _cal_analog                                           7     3      4  141516
                                            124 BANK0      7     3      4
                     _Save_Variables
                               _atof
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    8053
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _atof                                                 3     0      3   27157
                                             51 BANK0      3     0      3
                             _strtod
 ---------------------------------------------------------------------------------
 (4) _strtod                                              12     8      4   25596
                                             39 BANK0     12     8      4
                           ___altoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                             ___lmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              3     3      0     130
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             32 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Save_Variables                                      53    53      0    1134
                                              0 BANK0     53    53      0
                 _get_LP_RC_Constant
                         _get_PID_Kp
                          _get_PID_T
                         _get_PID_Td
                         _get_PID_Ti
                   _get_PID_deadband
                   _get_PID_setpoint
                       _get_VL1_span
                       _get_VL1_zero
                       _get_VL2_span
                       _get_VL2_zero
                       _get_VL3_span
                       _get_VL3_zero
                       _get_Vin_span
                       _get_Vin_zero
                         _get_max_VL
                         _get_min_VL
                       _wr_string_EE
 ---------------------------------------------------------------------------------
 (4) _wr_string_EE                                         5     2      3     468
                                             26 COMRAM     5     2      3
                         _wr_byte_EE
 ---------------------------------------------------------------------------------
 (5) _wr_byte_EE                                           2     1      1     152
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _get_min_VL                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_max_VL                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_Vin_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_Vin_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL3_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL3_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL2_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL2_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL1_zero                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_VL1_span                                         3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_setpoint                                     3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Ti                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Td                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_T                                            3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_PID_Kp                                           3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _get_LP_RC_Constant                                   3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     6      4   96742
                                            100 BANK0     10     6      4
                            __doprnt
                              _ctime (ARG)
 ---------------------------------------------------------------------------------
 (1) _ctime                                                2     0      2   25885
                                             17 BANK0      2     0      2
                            _asctime
                          _localtime
 ---------------------------------------------------------------------------------
 (3) _localtime                                           10     8      2    8194
                                              0 BANK0     10     8      2
                             ___lmul
                             _gmtime
 ---------------------------------------------------------------------------------
 (4) _gmtime                                               9     7      2    6410
                                             38 COMRAM     9     7      2
                            ___aldiv
                            ___almod
                            ___awmod
                              _dylen
 ---------------------------------------------------------------------------------
 (5) _dylen                                                4     2      2    1315
                                             29 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     952
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___almod                                             10     2      8     973
                                             24 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     985
                                             24 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    1356
                                             24 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _asctime                                              7     5      2   17570
                                             10 BANK0      7     5      2
                            ___awdiv
                            ___awmod
                             ___wmul
                          _localtime (ARG)
                              _put2d
 ---------------------------------------------------------------------------------
 (3) _put2d                                                5     0      5    5486
                                             38 COMRAM     5     0      5
                            ___awdiv (ARG)
                            ___awmod
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _check_V3_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_V2_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_V1_status                                      1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Rd_Digital_Inputs                                    2     2      0     170
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Open_Timer0                                          6     3      3     341
                                             24 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _OpenUSART                                            3     1      2     338
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _OpenIO5R                                             0     0      0     474
                          _WriteIO5R
 ---------------------------------------------------------------------------------
 (1) _WriteIO5R                                            9     5      4     474
                                             24 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _OpenADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Manual_Control                                       0     0      0       0
                          _reset_PID
 ---------------------------------------------------------------------------------
 (2) _reset_PID                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     946
                           _I2C_Send
 ---------------------------------------------------------------------------------
 (2) _I2C_Send                                             1     1      0     946
                                             26 COMRAM     1     1      0
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (1) _Get_Voltage_Data                                     3     3      0  113515
                                             48 BANK0      3     3      0
                         _Check_VL_N
                 _Get_Analog_Channel
                        _LowPass_VL1
                        _LowPass_VL2
                        _LowPass_VL3
                        _LowPass_Vin
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3464
                                             32 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _LowPass_Vin                                          9     6      3   20034
                                             39 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL3                                          9     6      3   20034
                                             39 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL2                                          9     6      3   20034
                                             39 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _LowPass_VL1                                          9     6      3   20034
                                             39 BANK0      9     6      3
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) _Get_Analog_Channel                                   7     5      2     102
                                             24 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _Check_VL_N                                           3     0      3    2510
                                             39 COMRAM     3     0      3
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Get_Variables                                       55    53      2    6110
                                             30 COMRAM     2     0      2
                                              0 BANK0     53    53      0
                 _Set_LP_RC_constant
                       _rd_string_EE
                       _set_Deadband
                         _set_PID_Kd
                         _set_PID_Ki
                         _set_PID_Kp
                          _set_PID_T
                   _set_PID_setpoint
                       _set_VL1_span
                       _set_VL1_zero
                       _set_VL2_span
                       _set_VL2_zero
                       _set_VL3_span
                       _set_VL3_zero
                       _set_Vin_span
                       _set_Vin_zero
                         _set_max_VL
                         _set_min_VL
 ---------------------------------------------------------------------------------
 (1) _set_min_VL                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_max_VL                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Vin_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Vin_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL3_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL3_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL2_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL2_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL1_zero                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_VL1_span                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_setpoint                                     3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_T                                            3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Kp                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Ki                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_PID_Kd                                           3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _set_Deadband                                         3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _rd_string_EE                                         5     2      3     347
                                             25 COMRAM     5     2      3
                         _rd_byte_EE
 ---------------------------------------------------------------------------------
 (3) _rd_byte_EE                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Set_LP_RC_constant                                   3     0      3     301
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Display_Data                                        21    21      0  106983
                                              0 BANK1     21    21      0
                    _Get_Voltage_VL1
                    _Get_Voltage_VL2
                    _Get_Voltage_VL3
                    _Get_Voltage_Vin
             _LCD_SetCursor_Position
                       _LCD_WriteStr
                            _get_max
                            _get_min
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             24     8     16  101816
                                            100 BANK0     24     8     16
                _Get_Control_Voltage (ARG)
                    _Get_Voltage_VL1 (ARG)
                    _Get_Voltage_VL2 (ARG)
                    _Get_Voltage_VL3 (ARG)
                    _Get_Voltage_Vin (ARG)
                            __doprnt
                 _get_LP_RC_Constant (ARG)
                         _get_PID_Kp (ARG)
                          _get_PID_T (ARG)
                         _get_PID_Td (ARG)
                         _get_PID_Ti (ARG)
                   _get_PID_deadband (ARG)
                     _get_PID_output (ARG)
                   _get_PID_setpoint (ARG)
                            _get_max (ARG)
                         _get_max_VL (ARG)
                            _get_min (ARG)
                         _get_min_VL (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             42    36      6   95808
                                             61 BANK0     39    33      6
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   22148
                                             39 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   21869
                                             39 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    6012
                                             38 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    2713
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    2545
                                             30 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     634
                                             24 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     853
                                             24 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    3265
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     952
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     781
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     641
                                             46 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    8814
                                              9 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_min                                              3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _get_max                                              3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteStr                                         5     2      3    2624
                                             26 COMRAM     5     2      3
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _LCD_SetCursor_Position                               2     1      1    1697
                                             26 COMRAM     2     1      1
                           _CloseI2C
                            _IdleI2C
                            _OpenI2C
                           _StartI2C
                            _StopI2C
                        _Wait_AckI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             2     2      0      65
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Wait_AckI2C                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _StopI2C                                              1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _StartI2C                                             1     1      0      34
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _OpenI2C                                              2     1      1     782
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Get_Voltage_Vin                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _Control_Loop                                         6     6      0   45441
                                             51 BANK0      6     6      0
                _Get_Control_Voltage
                     _PID_Controller
                             ___ftge
                            ___ftneg
                   _get_PID_deadband
 ---------------------------------------------------------------------------------
 (4) _get_PID_deadband                                     3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2178
                                             30 COMRAM     9     3      6
                            ___ftneg (ARG)
                   _get_PID_deadband (ARG)
 ---------------------------------------------------------------------------------
 (2) _PID_Controller                                      15    12      3   25110
                                             39 BANK0     12     9      3
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3    1235
                                             27 COMRAM     3     0      3
                   _get_PID_deadband (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6   10181
                                             24 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Get_Control_Voltage                                  8     5      3   16788
                                             24 BANK0      8     5      3
                    _Get_Voltage_VL1
                    _Get_Voltage_VL2
                    _Get_Voltage_VL3
                            ___ftadd
                            ___ftdiv
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    3104
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    5073
                                              9 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    8398
                                             44 COMRAM     3     3      0
                                              0 BANK0      9     3      6
                    _Get_Voltage_VL1 (ARG)
                    _Get_Voltage_VL2 (ARG)
                    _Get_Voltage_VL3 (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3073
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL3                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL2                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _Get_Voltage_VL1                                      3     0      3       0
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _TimerInt                                            24    24      0      23
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Control_Loop
     _Get_Control_Voltage
       _Get_Voltage_VL1
       _Get_Voltage_VL2
       _Get_Voltage_VL3
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
     _PID_Controller
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     ___ftge
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       _get_PID_deadband (ARG)
     ___ftneg
       _get_PID_deadband (ARG)
     _get_PID_deadband
   _Display_Data
     _Get_Voltage_VL1
     _Get_Voltage_VL2
     _Get_Voltage_VL3
     _Get_Voltage_Vin
     _LCD_SetCursor_Position
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
     _LCD_WriteStr
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
     _get_max
     _get_min
     _sprintf
       _Get_Control_Voltage (ARG)
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       _Get_Voltage_Vin (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           _get_PID_deadband (ARG)
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
           _get_PID_deadband (ARG)
         ___ftsub *
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
       _get_PID_Kp (ARG)
       _get_PID_T (ARG)
       _get_PID_Td (ARG)
       _get_PID_Ti (ARG)
       _get_PID_deadband (ARG)
       _get_PID_output (ARG)
       _get_PID_setpoint (ARG)
       _get_max (ARG)
       _get_max_VL (ARG)
       _get_min (ARG)
       _get_min_VL (ARG)
   _Get_Variables
     _Set_LP_RC_constant
     _rd_string_EE
       _rd_byte_EE
     _set_Deadband
     _set_PID_Kd
     _set_PID_Ki
     _set_PID_Kp
     _set_PID_T
     _set_PID_setpoint
     _set_VL1_span
     _set_VL1_zero
     _set_VL2_span
     _set_VL2_zero
     _set_VL3_span
     _set_VL3_zero
     _set_Vin_span
     _set_Vin_zero
     _set_max_VL
     _set_min_VL
   _Get_Voltage_Data
     _Check_VL_N
       ___ftge
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         _get_PID_deadband (ARG)
     _Get_Analog_Channel
     _LowPass_VL1
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_VL2
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_VL3
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     _LowPass_Vin
       ___ftadd
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
         _get_PID_deadband (ARG)
     ___ftadd
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       _get_PID_deadband (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftadd (ARG)
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         _get_PID_deadband (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       _get_PID_deadband (ARG)
     ___lwtoft
       ___ftpack
   _Get_Voltage_Vin
   _LCD_Clear
     _I2C_Send
       _CloseI2C
       _IdleI2C
       _OpenI2C
       _StartI2C
       _StopI2C
       _Wait_AckI2C
       _WriteI2C
   _LCD_WriteStr
     _CloseI2C
     _IdleI2C
     _OpenI2C
     _StartI2C
     _StopI2C
     _Wait_AckI2C
     _WriteI2C
   _Manual_Control
     _reset_PID
   _OpenADC
   _OpenI2C
   _OpenIO5R
     _WriteIO5R
   _OpenUSART
   _Open_Timer0
   _Rd_Digital_Inputs
   _Save_Variables
     _get_LP_RC_Constant
     _get_PID_Kp
     _get_PID_T
     _get_PID_Td
     _get_PID_Ti
     _get_PID_deadband
     _get_PID_setpoint
     _get_VL1_span
     _get_VL1_zero
     _get_VL2_span
     _get_VL2_zero
     _get_VL3_span
     _get_VL3_zero
     _get_Vin_span
     _get_Vin_zero
     _get_max_VL
     _get_min_VL
     _wr_string_EE
       _wr_byte_EE
   _Set_LP_RC_constant
   _WriteIO5R
   _check_V1_status
   _check_V2_status
   _check_V3_status
   _ctime
     _asctime
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _localtime (ARG)
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
       _put2d (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
     _localtime
       ___lmul
       _gmtime
         ___aldiv
         ___almod
         ___awmod
         _dylen
           ___lwmod
   _printf
     __doprnt
       Absolute function(Fake) *
       ___awdiv *
         ___awmod (ARG)
       ___ftadd *
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge *
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         _get_PID_deadband (ARG)
       ___ftmul *
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _get_PID_deadband (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg *
         _get_PID_deadband (ARG)
       ___ftsub *
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol *
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv *
       ___llmod *
         ___lldiv (ARG)
       ___lltoft *
         ___ftpack
       ___wmul *
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ *
       __tdiv_to_l_ *
       _fround *
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftadd (ARG)
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit *
       _putch *
       _scale *
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _ctime (ARG)
       _asctime
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _localtime (ARG)
           ___lmul
           _gmtime
             ___aldiv
             ___almod
             ___awmod
             _dylen
               ___lwmod
         _put2d (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
       _localtime
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
   _read_command
     _cal_analog
       _Save_Variables
         _get_LP_RC_Constant
         _get_PID_Kp
         _get_PID_T
         _get_PID_Td
         _get_PID_Ti
         _get_PID_deadband
         _get_PID_setpoint
         _get_VL1_span
         _get_VL1_zero
         _get_VL2_span
         _get_VL2_zero
         _get_VL3_span
         _get_VL3_zero
         _get_Vin_span
         _get_Vin_zero
         _get_max_VL
         _get_min_VL
         _wr_string_EE
           _wr_byte_EE
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             _get_PID_deadband (ARG)
           ___lmul
           _isdigit
           _isspace
       _set_VL1_span
       _set_VL1_zero
       _set_VL2_span
       _set_VL2_zero
       _set_VL3_span
       _set_VL3_zero
       _set_Vin_span
       _set_Vin_zero
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     _Get_Voltage_VL1 (ARG)
                     _Get_Voltage_VL2 (ARG)
                     _Get_Voltage_VL3 (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                       _get_PID_deadband (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
     _get_list
       _Get_Control_Voltage
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Get_Voltage_Vin
       _get_LP_RC_Constant
       _get_PID_Kp
       _get_PID_T
       _get_PID_Td
       _get_PID_Ti
       _get_PID_deadband
       _get_PID_output
       _get_PID_setpoint
       _get_max_VL
       _get_min_VL
       _localtime
         ___lmul
         _gmtime
           ___aldiv
           ___almod
           ___awmod
           _dylen
             ___lwmod
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     _Get_Voltage_VL1 (ARG)
                     _Get_Voltage_VL2 (ARG)
                     _Get_Voltage_VL3 (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                       _get_PID_deadband (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
       _time
         _bcdTOint
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _get_date
           _ReadStr_I2C
             _AckI2C
             _CloseI2C
             _IdleI2C
             _Not_AckI2C
             _OpenI2C
             _ReadI2C
             _RestartI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _get_time
           _ReadStr_I2C
             _AckI2C
             _CloseI2C
             _IdleI2C
             _Not_AckI2C
             _OpenI2C
             _ReadI2C
             _RestartI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _mktime
           ___lmul
           _ymd_to_scalar
             _isleap
               ___lwmod
             _months_to_days
               ___lwdiv
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _years_to_days
               ___lmul
               ___lwdiv
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
     _lcd_display
       _LCD_SetBackLight_Brightness
         _CloseI2C
         _IdleI2C
         _OpenI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
       _LCD_SetContrast
         _CloseI2C
         _IdleI2C
         _OpenI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
       _atoi
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _isdigit
       _strcmp
     _reset_var
       _Get_Voltage_Vin
       _set_max
         _Get_Voltage_Vin (ARG)
       _set_min
         _Get_Voltage_Vin (ARG)
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     _Get_Voltage_VL1 (ARG)
                     _Get_Voltage_VL2 (ARG)
                     _Get_Voltage_VL3 (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                       _get_PID_deadband (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
     _set_list
       _Save_Variables
         _get_LP_RC_Constant
         _get_PID_Kp
         _get_PID_T
         _get_PID_Td
         _get_PID_Ti
         _get_PID_deadband
         _get_PID_setpoint
         _get_VL1_span
         _get_VL1_zero
         _get_VL2_span
         _get_VL2_zero
         _get_VL3_span
         _get_VL3_zero
         _get_Vin_span
         _get_Vin_zero
         _get_max_VL
         _get_min_VL
         _wr_string_EE
           _wr_byte_EE
       _Set_LP_RC_constant
       _atof
         _strtod
           ___altoft
             ___ftpack
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftge
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             _get_PID_deadband (ARG)
           ___lmul
           _isdigit
           _isspace
       _date_set
         _atoi
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _isdigit
         _intTObcd
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _atoi (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _isdigit
         _set_date
           _WriteStr_I2C
             _CloseI2C
             _IdleI2C
             _OpenI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _set_Deadband
       _set_PID_Kd
       _set_PID_Ki
       _set_PID_Kp
       _set_PID_T
       _set_PID_setpoint
       _set_max_VL
       _set_min_VL
       _sprintf
         _Get_Control_Voltage (ARG)
           _Get_Voltage_VL1
           _Get_Voltage_VL2
           _Get_Voltage_VL3
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
         _Get_Voltage_VL1 (ARG)
         _Get_Voltage_VL2 (ARG)
         _Get_Voltage_VL3 (ARG)
         _Get_Voltage_Vin (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___awdiv *
             ___awmod (ARG)
           ___ftadd *
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge *
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             _get_PID_deadband (ARG)
           ___ftmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg *
             _get_PID_deadband (ARG)
           ___ftsub *
             ___ftadd
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol *
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftdiv (ARG)
                   ___ftadd (ARG)
                     _Get_Voltage_VL1 (ARG)
                     _Get_Voltage_VL2 (ARG)
                     _Get_Voltage_VL3 (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftneg (ARG)
                       _get_PID_deadband (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           ___lltoft *
             ___ftpack
           ___wmul *
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_ *
           __tdiv_to_l_ *
           _fround *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit *
           _putch *
           _scale *
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _get_LP_RC_Constant (ARG)
         _get_PID_Kp (ARG)
         _get_PID_T (ARG)
         _get_PID_Td (ARG)
         _get_PID_Ti (ARG)
         _get_PID_deadband (ARG)
         _get_PID_output (ARG)
         _get_PID_setpoint (ARG)
         _get_max (ARG)
         _get_max_VL (ARG)
         _get_min (ARG)
         _get_min_VL (ARG)
       _strcmp
       _time_set
         _atoi
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _isdigit
         _intTObcd
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _atoi (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _isdigit
         _set_time
           _WriteStr_I2C
             _CloseI2C
             _IdleI2C
             _OpenI2C
             _StartI2C
             _StopI2C
             _Wait_AckI2C
             _WriteI2C
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
     _sprintf
       _Get_Control_Voltage (ARG)
         _Get_Voltage_VL1
         _Get_Voltage_VL2
         _Get_Voltage_VL3
         ___ftadd
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Get_Voltage_VL1 (ARG)
       _Get_Voltage_VL2 (ARG)
       _Get_Voltage_VL3 (ARG)
       _Get_Voltage_Vin (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           _Get_Voltage_VL1 (ARG)
           _Get_Voltage_VL2 (ARG)
           _Get_Voltage_VL3 (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge *
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           _get_PID_deadband (ARG)
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _get_PID_deadband (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
           _get_PID_deadband (ARG)
         ___ftsub *
           ___ftadd
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftdiv (ARG)
                 ___ftadd (ARG)
                   _Get_Voltage_VL1 (ARG)
                   _Get_Voltage_VL2 (ARG)
                   _Get_Voltage_VL3 (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftneg (ARG)
                     _get_PID_deadband (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             _Get_Voltage_VL1 (ARG)
             _Get_Voltage_VL2 (ARG)
             _Get_Voltage_VL3 (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftadd (ARG)
               _Get_Voltage_VL1 (ARG)
               _Get_Voltage_VL2 (ARG)
               _Get_Voltage_VL3 (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 _Get_Voltage_VL1 (ARG)
                 _Get_Voltage_VL2 (ARG)
                 _Get_Voltage_VL3 (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftneg (ARG)
                   _get_PID_deadband (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 _get_PID_deadband (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _get_PID_deadband (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _get_LP_RC_Constant (ARG)
       _get_PID_Kp (ARG)
       _get_PID_T (ARG)
       _get_PID_Td (ARG)
       _get_PID_Ti (ARG)
       _get_PID_deadband (ARG)
       _get_PID_output (ARG)
       _get_PID_setpoint (ARG)
       _get_max (ARG)
       _get_max_VL (ARG)
       _get_min (ARG)
       _get_min_VL (ARG)
     _strcmp
     _strtok
       _strcspn
         _strchr
       _strspn
         _strchr
   _set_Deadband
   _set_PID_Kd
   _set_PID_Ki
   _set_PID_Kp
   _set_PID_T
   _set_PID_setpoint
   _set_VL1_span
   _set_VL1_zero
   _set_VL2_span
   _set_VL2_zero
   _set_VL3_span
   _set_VL3_zero
   _set_Vin_span
   _set_Vin_zero
   _set_max
     _Get_Voltage_Vin (ARG)
   _set_max_VL
   _set_min
     _Get_Voltage_Vin (ARG)
   _set_min_VL
   _strlen
   _time
     _bcdTOint
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _get_date
       _ReadStr_I2C
         _AckI2C
         _CloseI2C
         _IdleI2C
         _Not_AckI2C
         _OpenI2C
         _ReadI2C
         _RestartI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
     _get_time
       _ReadStr_I2C
         _AckI2C
         _CloseI2C
         _IdleI2C
         _Not_AckI2C
         _OpenI2C
         _ReadI2C
         _RestartI2C
         _StartI2C
         _StopI2C
         _Wait_AckI2C
         _WriteI2C
     _mktime
       ___lmul
       _ymd_to_scalar
         _isleap
           ___lwmod
         _months_to_days
           ___lwdiv
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _years_to_days
           ___lmul
           ___lwdiv
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)

 _TimerInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     23      DE       6       86.7%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     8D      9E       4       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      46       1       74.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C2       9        0.0%
DATA                 0      0     1C2      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 15 16:53:37 2017

                                                  __size_of_Get_Analog_Channel 0040  
                                                                 ___altoft@exp 0029  
                                                                _years_to_days 6CEC  
                                                                  _SSPSTATbits 000FC7  
                                                                ___altoft@sign 002A  
                                                                           _Kp 011F  
                                                                           _k1 003F  
                                                                 ___awdiv@sign 0024  
                                                          months_to_days@month 0064  
                                                               ??_get_Vin_span 001C  
                                                                           _td 011C  
                                                                           _ti 0030  
                                                               ??_get_Vin_zero 001C  
                                                          ___wmul@multiplicand 0029  
                                                                 __CFG_CP0$OFF 000000  
                                                                 __CFG_CP1$OFF 000000  
                                                                 __CFG_CP2$OFF 000000  
                                                                 __CFG_CP3$OFF 000000  
                                                                  __CFG_OSC$HS 000000  
                                                                 ___ftadd@exp1 0068  
                                                                 ___ftadd@exp2 0067  
                                                                 ___ftadd@sign 0066  
                                                                          l200 1326  
                                                                          l120 7C94  
                                                                          l210 1458  
                                                                          l202 136E  
                                                                          l122 7CC8  
                                                                          l114 7BB0  
                                                                          l131 5F14  
                                                                          l220 16CC  
                                                                          l212 150E  
                                                                          l204 13C8  
                                                                          l124 7CFC  
                                                                          l116 7C34  
                                                                          l205 13AC  
                                                                          l125 7D1C  
                                                                          l150 3018  
                                                                          l142 2EE8  
                                                                          l214 15AA  
                                                                          l118 7C68  
                                                                          l303 53B6  
                                                                          l135 61DC  
                                                                          l152 3064  
                                                                          l144 2F34  
                                                                          l216 1684  
                                                                          l208 1410  
                                                                          l217 1628  
                                                                          l129 5EDA  
                                                                          l137 6210  
                                                                          l161 293A  
                                                                          l154 30B0  
                                                                          l146 2F80  
                                                                          l138 622C  
                                                                          l226 7A30  
                                                                          l234 6EE4  
                                                                          l171 2AB6  
                                                                          l163 2986  
                                                                          l156 30FC  
                                                                          l148 2FCC  
                                                                          l228 7AF6  
                                                                          l157 3118  
                                                                          l229 7B5A  
                                                                          l181 2BF2  
                                                                          l173 2B02  
                                                                          l165 29D2  
                                                                          l190 11BE  
                                                                          l182 2C0E  
                                                                          l175 2B4E  
                                                                          l167 2A1E  
                                                                          l600 7082  
                                                                          l192 1206  
                                                                          l601 7088  
                                                                          l265 6506  
                                                                          l177 2B9A  
                                                                          l169 2A6A  
                                                                          l194 124E  
                                                                          l186 112E  
                                                                          l266 64A0  
                                                                          l179 2BC6  
                                                                          l196 1296  
                                                                          l188 1176  
                                                                          l293 5448  
                                                                          l534 5076  
                                                                          l294 542E  
                                                                          l710 60EC  
                                                                          l198 12DE  
                                                                          l543 5356  
                                                                          l711 60F0  
                                                                          l287 54B4  
                                                                          l464 72D2  
                                                                          l480 17FC  
                                                                          l288 5498  
                                                                          l465 7300  
                                                                          l473 5992  
                                                                          l481 17E4  
                                                                          l553 50C4  
                                                                          l466 7316  
                                                                          l722 559E  
                                                                          l490 1A40  
                                                                          l482 1814  
                                                                          l467 7344  
                                                                          l571 5090  
                                                                          l547 504C  
                                                                          l539 534C  
                                                                          l491 1A28  
                                                                          l483 17EC  
                                                                          l468 735A  
                                                                          l476 59B8  
                                                                          l492 1A58  
                                                                          l484 17F2  
                                                                          l708 60C2  
                                                                          l580 50FC  
                                                                          l469 7388  
                                                                          l493 1A30  
                                                                          l485 191E  
                                                                          l565 50E0  
                                                                          l494 1A36  
                                                                          l486 1906  
                                                                          l495 1B60  
                                                                          l487 1936  
                                                                          l559 5116  
                                                                          l591 6FE0  
                                                                          l496 1B8E  
                                                                          l488 190E  
                                                                          l489 1914  
                                                                          l593 6FF8  
                                                                          l594 7012  
                                                                          l586 5D08  
                                                                          l747 615E  
                                                                          l595 702A  
                                                                          l596 704A  
                                                                          l599 7062  
                                                                          l980 264C  
                                                                          l982 27C0  
                                                                          l991 286A  
                                                                          l983 27C6  
                                                                          l992 2874  
                                                                          l993 28A4  
                                                                          l985 2802  
                                                                          l978 24F6  
                                                                          l987 27DE  
                                                                          l989 2812  
                                                                 __CFG_CPB$OFF 000000  
                                                                 __CFG_CPD$OFF 000000  
                                                                          _VL1 003C  
                                                                          _VL2 0039  
                                                                          _VL3 0036  
                                                                          _Vin 0033  
                                                                 __CFG_BOR$OFF 000000  
                                                                          _max 0122  
                                                                          _min 0125  
                                                                 __CFG_BORV$25 000000  
                                                                 ___awmod@sign 001E  
                                                                          prod 000FF3  
                                                                          tosl 000FFD  
                                                                          wreg 000FE8  
                                                    __end_of_Rd_Digital_Inputs 5248  
                                                                  get_list@var 00DC  
                                                                   _Check_VL_N 596C  
                                                                 __CFG_LVP$OFF 000000  
                                                                 ___ftdiv@cntr 0072  
                                                                 ___ftdiv@sign 0077  
                                                                 __CFG_WDT$OFF 000000  
                                                                         l1010 6ACE  
                                                                         l1100 3DBC  
                                                                         l1012 6B16  
                                                                         l1020 56A4  
                                                                         l1101 3DD0  
                                                                         l1021 56B6  
                                                                         l1014 6B2A  
                                                                         l1032 554E  
                                                                         l1025 5512  
                                                                         l1202 334C  
                                                                         l1210 239E  
                                                                         l1018 568A  
                                                                         l1034 5568  
                                                                         l1027 552C  
                                                                         l1035 5572  
                                                                         l1212 2464  
                                                                         l1220 02E0  
                                                                         l1028 5536  
                                                                         l1205 2262  
                                                                         l1301 0F14  
                                                                         l1221 02C6  
                                                                         l1206 2180  
                                                                         l1222 0286  
                                                                         l1134 538C  
                                                                         l1303 0F7A  
                                                                         l1135 5390  
                                                                         l1240 042C  
                                                                         l1232 02FA  
                                                                         l1216 01C6  
                                                                         l1160 5C12  
                                                                         l2120 5A28  
                                                                         l1209 2238  
                                                                         l1225 04A2  
                                                                         l1241 0486  
                                                                         l1233 033C  
                                                                         l1217 0250  
                                                                         l1306 0F9A  
                                                                         l1234 0352  
                                                                         l1218 0218  
                                                                         l1162 5C20  
                                                                         l2130 5A82  
                                                                         l1307 1068  
                                                                         l1251 069C  
                                                                         l1235 034A  
                                                                         l1163 5C24  
                                                                         l2107 5E0A  
                                                                         l1323 5AE2  
                                                                         l1308 109E  
                                                                         l1244 0DE4  
                                                                         l1252 06E6  
                                                                         l1228 02F2  
                                                                         l1164 5C2E  
                                                                         l2108 5E1E  
                                                                         l1324 5AF8  
                                                                         l1253 07D4  
                                                                         l1245 0500  
                                                                         l1229 04E2  
                                                                         l1165 5C32  
                                                                         l1270 0918  
                                                                         l1262 083C  
                                                                         l1246 0556  
                                                                         l1166 5C3E  
                                                                         l1510 1EA2  
                                                                         l1271 09EC  
                                                                         l1239 03BE  
                                                                         l1167 5C42  
                                                                         l1511 1E6C  
                                                                         l2119 5A32  
                                                                         l1280 0AF4  
                                                                         l1272 0A26  
                                                                         l1256 0772  
                                                                         l1248 060A  
                                                                         l1168 5C4C  
                                                                         l1520 1F60  
                                                                         l1504 1DEA  
                                                                         l2056 5926  
                                                                         l2080 6980  
                                                                         l2064 575E  
                                                                         l1249 0674  
                                                                         l1169 5C50  
                                                                         l1521 1F2A  
                                                                         l1513 1EE6  
                                                                         l1505 1DF6  
                                                                         l2057 591C  
                                                                         l2129 5A8C  
                                                                         l2081 698A  
                                                                         l2065 5758  
                                                                         l1290 0D52  
                                                                         l1282 0B58  
                                                                         l1274 0AB8  
                                                                         l1370 6C76  
                                                                         l1610 3CAA  
                                                                         l1514 1EB2  
                                                                         l1506 1E22  
                                                                         l2138 5724  
                                                                         l1291 0D98  
                                                                         l1283 0B8C  
                                                                         l1275 0A36  
                                                                         l1267 08FA  
                                                                         l1371 6C68  
                                                                         l1523 1FA0  
                                                                         l1507 1E5E  
                                                                         l1284 0D42  
                                                                         l1276 0A7C  
                                                                         l1380 6838  
                                                                         l1524 1F6C  
                                                                         l2076 68EC  
                                                                         l1621 71F8  
                                                                         l1285 0BE0  
                                                                         l1381 684E  
                                                                         l1509 1F1A  
                                                                         l2077 6900  
                                                                         l1630 7284  
                                                                         l1622 722A  
                                                                         l1294 0E38  
                                                                         l1286 0CB4  
                                                                         l1374 6CAE  
                                                                         l1606 3C5E  
                                                                         l1526 1FFE  
                                                                         l1542 7152  
                                                                         l1631 7276  
                                                                         l1199 3276  
                                                                         l1295 0E60  
                                                                         l1279 0AEE  
                                                                         l1375 6CBE  
                                                                         l1367 6C2A  
                                                                         l1383 6870  
                                                                         l1607 3C3E  
                                                                         l1527 1FE4  
                                                                         l1543 7106  
                                                                         l2079 693E  
                                                                         l1704 3536  
                                                                         l1624 725A  
                                                                         l1376 6CD6  
                                                                         l1368 6C44  
                                                                         l1384 6862  
                                                                         l1528 2022  
                                                                         l1536 70AA  
                                                                         l1705 3526  
                                                                         l1625 7248  
                                                                         l1289 0DD4  
                                                                         l1609 3CC0  
                                                                         l1481 1BF2  
                                                                         l1545 718C  
                                                                         l1537 70A4  
                                                                         l1650 69C8  
                                                                         l1562 63C2  
                                                                         l1490 1C70  
                                                                         l1546 7196  
                                                                         l1651 69BC  
                                                                         l1707 3570  
                                                                         l1619 729E  
                                                                         l1723 3FEE  
                                                                         l1563 63CE  
                                                                         l1555 636A  
                                                                         l1571 6058  
                                                                         l1299 0EE2  
                                                                         l1387 689C  
                                                                         l1483 1C06  
                                                                         l1539 70F2  
                                                                         l1708 359C  
                                                                         l1716 77C4  
                                                                         l1740 6450  
                                                                         l1564 63DE  
                                                                         l1556 637C  
                                                                         l1572 604E  
                                                                         l1388 68AC  
                                                                         l1396 5FCC  
                                                                         l1492 1CDC  
                                                                         l1484 1C26  
                                                                         l1653 6A00  
                                                                         l1709 35EC  
                                                                         l1717 7826  
                                                                         l1813 6264  
                                                                         l1725 3F52  
                                                                         l1389 68C4  
                                                                         l1397 5FBE  
                                                                         l1485 1C44  
                                                                         l1901 6E6C  
                                                                         l1654 69E8  
                                                                         l1718 786A  
                                                                         l1750 797A  
                                                                         l1814 6256  
                                                                         l1734 3FD4  
                                                                         l1726 3F7C  
                                                                         l1558 639E  
                                                                         l1478 1BBE  
                                                                         l1823 5D5C  
                                                                         l1735 3FC6  
                                                                         l1559 6394  
                                                                         l1575 6074  
                                                                         l1479 1BB6  
                                                                         l1903 6E2A  
                                                                         l1656 6A2C  
                                                                         l1752 799C  
                                                                         l1824 5D4E  
                                                                         l1728 3FAA  
                                                                         l1576 6080  
                                                                         l1568 6030  
                                                                         l1496 1D2C  
                                                                         l1488 1CE6  
                                                                         l1912 2E86  
                                                                         l1657 6A20  
                                                                         l1681 340A  
                                                                         l1753 79BC  
                                                                         l1817 629C  
                                                                         l1729 3F98  
                                                                         l1577 6090  
                                                                         l1569 603E  
                                                                         l1489 1CD0  
                                                                         l1690 34EA  
                                                                         l1770 76D6  
                                                                         l1818 62AC  
                                                                         l1834 5B44  
                                                                         l1739 641E  
                                                                         l1763 58EA  
                                                                         l1827 5D88  
                                                                         l1835 5B36  
                                                                         l1595 5CBA  
                                                                         l1499 1D46  
                                                                         l1748 790A  
                                                                         l1828 5D98  
                                                                         l1685 3444  
                                                                         l1749 795A  
                                                                         l1757 52D6  
                                                                         l1909 2C68  
                                                                         l1782 51F4  
                                                                         l1870 5E82  
                                                                         l1695 34DA  
                                                                         l1775 771E  
                                                                         l1871 5E90  
                                                                         l1696 34CA  
                                                                         l1688 3456  
                                                                         l1776 770C  
                                                                         l1792 56D8  
                                                                         l1880 58AC  
                                                                         l1689 3462  
                                                                         l1769 76EC  
                                                                         l1793 56D0  
                                                                         l1881 58B8  
                                                                         l1778 7748  
                                                                         l1866 5E4C  
                                                                         l1787 53E6  
                                                                         l1891 5BEA  
                                                                         l1867 5E40  
                                                                         l1796 56F2  
                                                                         l1876 5890  
                                                                         l1797 56FC  
                                                                         l1877 5886  
                                                                         l9102 2492  
                                                                         l9040 4DBE  
                                                                         l8510 647E  
                                                                         l8512 6482  
                                                                         l8634 5362  
                                                                         l9610 714C  
                                                                         l8564 6A58  
                                                                         l8732 3612  
                                                                         l9372 78A0  
                                                                         l8646 5050  
                                                                         l8780 79FC  
                                                                         l9476 775A  
                                                                         l9732 0244  
                                                                         l9910 0A38  
                                                                         l9638 64A2  
                                                                         l9920 0AA8  
                                                                         l9840 06E8  
                                                                         l9906 0A1E  
                                                                         l9772 03C0  
                                                                         l9588 6994  
                                                                         STR_1 7FF8  
                                                                         l9944 0B84  
                                                                         l9848 074C  
                                                                         l8896 5746  
                                                                         STR_2 7F8F  
                                                                         STR_3 7F91  
                                                                         l9962 0CE4  
                                                                         l9786 047E  
                                                                         l8986 709A  
                                                                         STR_4 7FE1  
                                                                         STR_5 7FD5  
                                                                         l9868 0844  
                                                                         STR_6 7FD1  
                                                                         STR_7 7EE9  
                                                                         STR_8 7F51  
                                                                         STR_9 7F2C  
                                                                         l9978 0DC4  
                                                                         _RCIE 007CED  
                                                                         _RCIF 007CF5  
                                                                         u8120 3434  
                                                                         u8051 33B4  
                                                                         u9011 779E  
                                                                         u8220 3544  
                                                                         u9020 77AE  
                                                                         u9100 5CB0  
                                                                         u8061 33CC  
                                                                         u8150 349C  
                                                                         u9200 76F6  
                                                                         u8090 33FA  
                                                                         u9210 772A  
                                                                         u8410 605E  
                                                                         u9300 6E0C  
                                                                         u8261 78BE  
                                                                         u8190 34F8  
                                                                         u8350 63A4  
                                                                         u9070 53E0  
                                                                         u9151 7644  
                                                                         u9240 626A  
                                                                         u8281 78E4  
                                                                         u7810 69AC  
                                                                         u8290 78F4  
                                                                         u9170 767C  
                                                                         u9330 5AC2  
                                                                         u8460 5BE4  
                                                                         u9270 5D62  
                                                                         u9350 5A68  
                                                                         u9175 7670  
                                                                         u8711 3F0E  
                                                                         u7920 5896  
                                                                         u7850 6A38  
                                                                         u7940 51C4  
                                                                         u9700 05A0  
                                                                         u9460 651C  
                                                                         u8830 7262  
                                                                         u9630 041E  
                                                                         u8840 728C  
                                                                         u8760 3FB2  
                                                                         u9640 0468  
                                                                         u9480 2C38  
                                                                         u9705 0592  
                                                                         u8770 3FDC  
                                                                         u9570 038E  
                                                                         u9538 01FA  
                                                                         u7890 5E54  
                                                                         u9490 2C5A  
                                                                         u8691 3EF4  
                                                                         u9475 59E2  
                                                                         u7948 51C8  
                                                                         u9820 0894  
                                                                         u9740 06B4  
                                                                         u9628 03E8  
                                                                         u8940 6876  
                                                                         u9637 0414  
                                                                         u9629 0422  
                                                                         u9910 0ACE  
                                                                         u9750 06FE  
                                                                         u9647 045E  
                                         __size_of_LCD_SetBackLight_Brightness 0040  
                                                                         u9920 0AE6  
                                                                         u8880 6C7C  
                                                                         u9577 0384  
                                                                         u9908 0A60  
                                                                         u9780 074A  
                                                                         u8991 7778  
                                                                         u9858 08DE  
                                                                         u9958 0B3C  
                                                                         u9878 09CC  
                                                                         u9978 0C94  
                                                                         _TXIE 007CEC  
                                                                         _TXIF 007CF4  
                                                                 __CFG_PWRT$ON 000000  
                                                                 __CFG_STVR$ON 000000  
                                                                         _atof 5312  
                                                                         _atoi 70A0  
                                                        __size_of_WriteStr_I2C 0070  
                                                               ReadStr_I2C@Str 001C  
                                                                         _main 2498  
                                                              ?_PID_Controller 0087  
                                                                 ___ftpack@arg 0019  
                                                           __size_of_LCD_Clear 000C  
                                                                 ___ftpack@exp 001C  
                                                                         _time 6B30  
                                                                         fsr0h 000FEA  
                                                                         fsr1h 000FE2  
                                                                         fsr2h 000FDA  
                                                                         fsr0l 000FE9  
                                                                         indf1 000FE7  
                                                                         indf2 000FDF  
                                                                         fsr1l 000FE1  
                                                                         fsr2l 000FD9  
                                                             __end_of_I2C_Send 548E  
                                                                         btemp 0047  
                                                 __size_of_Get_Control_Voltage 0126  
                                                            ?_get_PID_deadband 0019  
                                                                         prodh 000FF4  
                                                                         prodl 000FF3  
                                                                         start 01B2  
                                                               ??_Control_Loop 0030  
                                                              __end_of_IdleI2C 51DC  
                                                              _LCD_SetContrast 5638  
                                                           ??_get_PID_deadband 001C  
                                                                ?_LCD_WriteStr 001B  
                                                                 ___ftmul@cntr 0085  
                                                                 ___param_bank 000000  
                                                                 ___ftmul@sign 0086  
                                                               ?_years_to_days 0064  
                                                              __end_of_ReadI2C 5126  
                                                              __end_of_OpenI2C 51B8  
                                                              __end_of_OpenADC 4D3C  
                                                                 ___fttol@exp1 009C  
                                                                 ___fttol@lval 0098  
                                                           Display_Data@buffer 01BB  
                                                                ??_ReadStr_I2C 001F  
                                                                __CFG_OSCS$OFF 000000  
                                                                        l10000 0E68  
                                                              __end_of_StopI2C 509E  
                                                                        l10046 1096  
                                                                        l10216 2030  
                                                                        l11520 280E  
                                                                        l11434 24DE  
                                                                        l10930 60B8  
                                                                        l11482 2634  
                                                                        l10916 59BC  
                                                                        l10768 16E6  
                                                              __end_of___aldiv 6CEC  
                                                                        ?_atof 0093  
                                                                        ?_atoi 002D  
                                                              __end_of___almod 68DA  
                                                                        ?_main 0001  
                                                       __size_of_ymd_to_scalar 00EA  
                                                               ReadI2C@IE_stat 0019  
                                                              __end_of___awdiv 63EC  
                                                              __end_of___lbdiv 5704  
                                                                        _EEADR 000FA9  
                                                              __end_of___ftadd 3618  
                                                                        STR_10 7FE5  
                                                                        STR_11 7FD9  
                                                                        STR_20 7F95  
                                                                        STR_12 7F69  
                                                                        STR_13 7FBE  
                                                                        STR_21 7EFB  
                                                                        STR_30 7FD9  
                                                                        STR_22 7FF5  
                                                                        STR_14 7FC3  
                                                                        STR_31 7F13  
                                                                        STR_23 7FF2  
                                                                        STR_15 7FC8  
                                                                        STR_24 7FEF  
                                                                        STR_16 7FAF  
                                                                        STR_32 7FA5  
                                                                        STR_40 7F3F  
                                                                        STR_41 7F77  
                                                                        STR_33 7EFB  
                                                                        STR_17 7FB4  
                                                                        STR_25 7F0C  
                                                                        STR_50 7FD9  
                                                                        STR_34 7FF5  
                                                                        STR_42 7F48  
                                                                        STR_18 7FB9  
                                                                        STR_26 7F48  
                                                                        STR_51 7F77  
                                                                        STR_43 7F77  
                                                                        STR_19 7F89  
                                                                        STR_35 7F77  
                                                                        STR_27 7F36  
                                                                        STR_44 7F36  
                                                                        STR_36 7FF2  
                                                                        STR_28 7FE9  
                                                                        STR_52 7FAA  
                                                                        STR_60 7F18  
                                                              __end_of___awmod 609E  
                                                                        STR_45 7F77  
                                                                        STR_37 7F77  
                                                                        STR_61 7F13  
                                                                        STR_29 7FE5  
                                                                        STR_53 7F5A  
                                                                        STR_46 7FE9  
                                                                        STR_38 7FEF  
                                                                        STR_70 7FFC  
                                                                        STR_54 7F83  
                                                                        STR_62 7F22  
                                                                        STR_39 7F77  
                                                                        STR_55 7FEC  
                                                                        STR_63 7FA0  
                                                                        STR_47 7F7D  
                                                                        STR_71 7DA5  
                                                                        STR_56 7F77  
                                                                        STR_48 7FE5  
                                                                        STR_80 7F9B  
                                                                        STR_72 7E7C  
                                                                        STR_64 7E46  
                                                                        STR_73 7EA4  
                                                                        STR_49 7F77  
                                                                        STR_81 7F9B  
                                                                        STR_57 7FDD  
                                                                        STR_65 7E62  
                                                                        STR_58 7F77  
                                                                        STR_82 7F9B  
                                                                        STR_66 7F70  
                                                                        STR_74 7DDB  
                                                                        STR_67 7F77  
                                                                        STR_59 7FA5  
                                                                        STR_83 7ED6  
                                                                        STR_75 7E29  
                                                                        STR_76 7EA4  
                                                                        STR_68 7F69  
                                                                        STR_84 7F9B  
                                                                        STR_85 7F9B  
                                                                        STR_69 7FFA  
                                                                        STR_77 7E95  
                                                                        STR_86 7F9B  
                                                                        STR_78 7FCD  
                                                                        ?_time 008C  
                                                                        STR_87 7F62  
                                                                        STR_79 7EC2  
                                                                        STR_88 7EAC  
                                                                        STR_89 7E04  
                                                              __end_of___ftdiv 78A6  
                                                              __end_of___ftneg 52E8  
                                                              __end_of___lldiv 62C2  
                                                                        u10008 0D7C  
                                                                        u10200 1BFE  
                                                                        u10300 1D3E  
                                                                        u10150 10B6  
                                                                        u10070 0EB8  
                                                                        u10151 10B4  
                                                                        u10160 10D8  
                                                                        u10128 0F5E  
                                                                        u11120 6112  
                                                                        u11130 6182  
                                                                        u10148 104A  
                                                              __end_of___ftmul 7A02  
                                                                        u10280 1D0E  
                                                                        u10600 7B5A  
                                                                        _T0CON 000FD5  
                                                                        u11137 6178  
                                                                        u10530 56DE  
                                                              ___awdiv@divisor 0021  
                                                                        u11430 2500  
                                                                        u10480 1FD2  
                                                                        u10560 595C  
                                                              __end_of___llmod 5DAE  
                                                                        u11530 28B4  
                                                                        u11450 266C  
                                                              __end_of___ftsub 5918  
                                                                        u11460 26AC  
                                                              __end_of___fttol 7760  
                                                                        u11536 28B8  
                                                                        u11557 2656  
                                                                        u11567 5594  
                                                              __end_of___lwdiv 5E9E  
                                                              __end_of___lwmod 58C6  
                                                              ___awdiv@counter 0023  
                                                                        _RCREG 000FAE  
                                                                        _RCSTA 000FAB  
                                                                        _TMR0H 000FD7  
                                                                        _TMR0L 000FD6  
                                                                        _SPBRG 000FAF  
                                                                        _PORTB 000F81  
                                                              __end_of__doprnt 10E6  
                                                                        _TRISA 000F92  
                                                                        _TRISB 000F93  
                                                                        _TRISC 000F94  
                                                                        _TXREG 000FAD  
                                                                        _TXSTA 000FAC  
                                                                __CFG_WRT0$OFF 000000  
                                                                __CFG_WRT1$OFF 000000  
                                                                __CFG_WRT2$OFF 000000  
                                                          ___lmul@multiplicand 001D  
                                                                __CFG_WRT3$OFF 000000  
                                                               _Manual_Control 509E  
                                                                 ___lltoft@exp 0029  
                                                               __CFG_EBTR0$OFF 000000  
                                                               __CFG_EBTR1$OFF 000000  
                                                               __CFG_EBTR2$OFF 000000  
                                                               __CFG_EBTR3$OFF 000000  
                                                              __end_of_asctime 3886  
                                                              __end_of_get_max 4DA8  
                                                              __end_of_get_min 4DBA  
                                                             _set_PID_setpoint 4E26  
                                                                __CFG_WRTB$OFF 000000  
                                                                __CFG_WRTC$OFF 000000  
                                                                __CFG_WRTD$OFF 000000  
                                                                 _WriteStr_I2C 5CCA  
                                                             ?_check_V1_status 0001  
                                                               __CFG_EBTRB$OFF 000000  
                                                             ?_check_V2_status 0001  
                                                            ?_get_PID_setpoint 0019  
                                                              __end_of_dpowers 7D4B  
                                                                        _ctime 5248  
                                                             ?_check_V3_status 0001  
                                                                        _dylen 5C5E  
                                                                        _error 00F1  
                                                                        _scale 2036  
                                                              __end_of_isdigit 5200  
                                                                        _put2d 5DAE  
                                                        __size_of_wr_string_EE 0036  
                                                                ___ftpack@sign 001D  
                                                                        _value 00FC  
                                                                        atoi@a 0063  
                                                                        atof@s 0093  
                                                                        atoi@s 002D  
                                                              ReadStr_I2C@stat 0020  
                                                                        _putch 4DBA  
                                                                        main@i 01DC  
                                                                        main@p 01D5  
                                                              __end_of_isspace 53F2  
                                                              __end_of_moninit 7DA5  
                                                           ??_get_PID_setpoint 001C  
                                                     ??_LCD_SetCursor_Position 001C  
                                                                        pclath 000FFA  
                                                              __end_of_set_max 5030  
                                                              __end_of_set_min 5042  
                                                                        tablat 000FF5  
                                                             ymd_to_scalar@day 0072  
                                                                        time@t 008C  
                                                                        plusw2 000FDB  
                                                                        status 000FD8  
                                                         __end_of_get_VL1_span 4F6A  
                                                                        wtemp6 0048  
                                                              __end_of_sprintf 5F9A  
                                                         __end_of_get_VL2_span 4F8E  
                                                         __end_of_get_VL1_zero 4F7C  
                                                         __end_of_get_VL3_span 4FB2  
                                                         __end_of_get_VL2_zero 4FA0  
                                                              __end_of_strcspn 5A76  
                                                         __end_of_get_VL3_zero 4FC4  
                                                              ___lbdiv@divisor 0019  
                                                              years_to_days@yr 0064  
                                                              ___lbdiv@counter 001B  
                                                               ??_LCD_WriteStr 001E  
                                                                ??_LowPass_VL1 0030  
                                                                ??_LowPass_VL2 0030  
                                                                ??_LowPass_VL3 0030  
                                                             __end_of_CloseI2C 4D2E  
                                                                 main@sys_time 01D8  
                                                                ??_LowPass_Vin 0030  
                                                              __initialization 57DE  
                                                                 __end_of_atof 533C  
                                                                 __end_of_atoi 719C  
                                                                 __end_of_main 28EE  
                                                                 __end_of_time 6C0C  
                                                            PID_Controller@val 0087  
                                                             __end_of_OpenIO5R 5424  
                                                                       ??_atof 0030  
                                                                       ??_atoi 0060  
                                                                       ??_main 00EC  
                                                                ___fttol@sign1 0097  
                                                                       ??_time 0030  
                                                            __end_of_LCD_Clear 4000  
                                                       __end_of_Manual_Control 50B8  
                                                                __activetblptr 000002  
                                                                 _wr_string_EE 548E  
                                                                ??_Open_Timer0 001C  
                                                                Open_Timer0@IE 0019  
                                                         __size_of__tdiv_to_l_ 0112  
                                                             __end_of_TimerInt 01B2  
                                                            get_date@Date_Data 0021  
                                                            set_date@Date_Data 0022  
                                                          __end_of_ReadStr_I2C 70A0  
                                                             __end_of_StartI2C 5084  
                                                   __size_of_Rd_Digital_Inputs 0024  
                                                         __end_of_Display_Data 3ADC  
                                                                   _Not_AckI2C 50EE  
                                                   Get_Analog_Channel@ADC_data 001D  
                                                               lcd_display@val 0069  
                                                               lcd_display@var 0065  
                                                                  ?_Check_VL_N 0028  
                                                                       _ADCON0 000FC2  
                                                                       _ADCON1 000FC1  
                                                                       ?_ctime 0071  
                                                                       ?_dylen 001E  
                                                             __end_of___altoft 601A  
                                                             ___llmod@dividend 0026  
                                                                       ?_scale 0087  
                                                                       _ADRESH 000FC4  
                                                                       _ADRESL 000FC3  
                                                                       _EEDATA 000FA8  
                                                             __end_of_bcdTOint 5A1C  
                                                                       _EECON2 000FA7  
                                                                       ?_put2d 0027  
                                                             ___awdiv@dividend 001F  
                                                             __end_of_WriteI2C 5368  
                                                                       ?_putch 0001  
                                                             __end_of___ftpack 6A5E  
                                                             __end_of___lbtoft 5296  
                                                             __end_of___lltoft 5B92  
                                                                  OpenI2C@slew 0019  
                                                                       i2l1041 006A  
                                                                       i2l1051 0162  
                                                                       i2l1043 00AC  
                                                                       i2l1045 00BE  
                                                                       i2l1047 0150  
                                                                       i2l1048 00F0  
                                                                       _INTCON 000FF2  
                                                                       i2l8504 0156  
                                                                ??_Wait_AckI2C 0019  
                                                             __end_of___lwtoft 52BE  
                                                                    ??_IdleI2C 0019  
                                                      __end_of_LCD_SetContrast 5678  
                                                         __end_of_get_Vin_span 4FD6  
                                                         __end_of_get_Vin_zero 4FE8  
                                                                       _AckI2C 50D2  
                                                                       _TMR0IE 007F95  
                                                                       _TMR0IF 007F92  
                                                               __CFG_WDTPS$128 000000  
                                                                _ymd_to_scalar 6DCC  
                                                                       _SSPADD 000FC8  
                                                        __end_of_Get_Variables 74FA  
                                                                       _SSPBUF 000FC9  
                                                             rd_string_EE@addr 001D  
                                                             wr_string_EE@addr 001E  
                                                                    ??_ReadI2C 0019  
                                                             __end_of_date_set 7B7A  
                                                                       _VL_max 012B  
                                                                       _VL_min 0128  
                                                                    ??_OpenI2C 001A  
                                                                    ??_OpenADC 0019  
                                                              ??_years_to_days 0068  
                                                                 __doprnt$3549 00A9  
                                                            Not_AckI2C@IE_stat 0019  
                                                                       _Inputs 00FB  
                                                                ?_read_command 00E6  
                                                             __end_of__powers_ 7D72  
                                                             __end_of_get_date 5142  
                                                                   _RestartI2C 50B8  
                                                             __end_of_get_list 16EE  
                                                         __size_of_lcd_display 007C  
                                                           __size_of_OpenUSART 0068  
                                                             __end_of_get_time 515E  
                                                   __end_of_get_LP_RC_Constant 4EFE  
                                                                    ??_StopI2C 0019  
                                                                       ___ftge 63EC  
                                                                       ___lmul 5AD0  
                                                      __size_of_get_PID_output 0012  
                                                                    ??___aldiv 0021  
                                                                    ??___almod 0021  
                                                        check_V2_status@status 0019  
                                                                       ___wmul 52E8  
                                                                    ??___awdiv 0023  
                                                                    ??___lbdiv 001A  
                                                                    ??___ftadd 002D  
                                                                    ??___awmod 001D  
                                                                    ??___ftdiv 006F  
                                                                    ??___ftneg 001F  
                                                             __end_of_intTObcd 652A  
                                                                    ??___lldiv 0021  
                                                                    ??___ftmul 007E  
                                                                    ??___llmod 002E  
                                                                    ??___ftsub 0030  
                                                                    ??___fttol 0092  
                                                                    ??___lwdiv 002D  
                                                                    ??___lwmod 001D  
                                                                       _buffer 00F6  
                                                                       _gmtime 3ADC  
                                                                    ??__doprnt 00A3  
                                                                       _fround 311E  
                                                                       _isleap 5B92  
                                                          __end_of_LowPass_VL1 65E6  
                                                          __end_of_LowPass_VL2 66A2  
                                                          __end_of_LowPass_VL3 675E  
                                                                       clear_0 57FC  
                                                                       clear_1 5808  
                                                                       clear_2 5814  
                                                             ___awdiv@quotient 0025  
                                                                       _mktime 2C14  
                                                              ___awmod@divisor 001B  
                                                          __end_of_LowPass_Vin 681A  
                                                                 __doprnt@ccnt 00B2  
                                                                 __doprnt@flag 00B0  
                                                              ___awmod@counter 001D  
                                                                       _printf 5828  
                                                                 __doprnt@fval 00BE  
                                                                    ??_asctime 0030  
                                                                 __doprnt@prec 00C1  
                                                                       _status 0045  
                                                                       _output 0116  
                                                                    ??_get_max 001C  
                                                                       _strchr 5704  
                                                                    ??_get_min 001C  
                                                                       _strcmp 5918  
                                                                       _strlen 574C  
                                                                       _strtod 1B96  
                                                                       _strtok 68DA  
                                                                       _strspn 5A76  
                                                             ??_Save_Variables 0020  
                                                        ___ftmul@f3_as_product 0082  
                                                              ?_Manual_Control 0001  
                                                             __end_of_set_date 517A  
                                                                    ??_isdigit 0019  
                                                             __end_of_set_list 2C14  
                                                                    ?_I2C_Send 0001  
                                                             __end_of_set_time 5196  
                                                           _Set_LP_RC_constant 4DCC  
                                                               wr_byte_EE@addr 001A  
                                                                       put2d@i 0029  
                                                               wr_byte_EE@data 0019  
                                                             __end_of_time_set 6FAA  
                                                                 __mediumconst 7D22  
                                                                    ??_isspace 0019  
                                                         __end_of_Control_Loop 6B30  
                                                                       tblptrh 000FF7  
                                                                       tblptrl 000FF6  
                                                                       tblptru 000FF8  
                                                                    ??_set_max 001F  
                                                                    ??_set_min 001F  
                                                        Get_Voltage_Data@check 0090  
                                                           intTObcd@resultbase 0069  
                                                                    ??_sprintf 00D4  
                                                                    ??_strcspn 0021  
                                                             ___lbdiv@dividend 001A  
                                                          __end_of_Open_Timer0 5396  
                                                                  localtime@tp 0060  
                                                          ?_Set_LP_RC_constant 0019  
                                                             years_to_days@ret 006A  
                                                                _last_integral 010A  
                                                               ?_ymd_to_scalar 006E  
                                              __size_of_LCD_SetCursor_Position 004A  
                                                                   __accesstop 0060  
                                                      __end_of__initialization 581A  
                                                                   ___altoft@c 0021  
                                                           __size_of_WriteIO5R 0084  
                                                             LCD_WriteStr@stat 001F  
                                                                   ___ftadd@f1 0060  
                                                                   ___ftadd@f2 0063  
                                                                   ___ftge@ff1 001F  
                                                                   ___ftge@ff2 0022  
                                                                ___rparam_used 000001  
                                                                   ___ftdiv@f1 0069  
                                                                   ___ftdiv@f2 006C  
                                                                   ___ftdiv@f3 0073  
                                                                   ___ftneg@f1 001C  
                                                               ??_read_command 00EA  
                                                                   ___lbtoft@c 0024  
                                                                   ___ftmul@f1 0078  
                                                                   ___ftmul@f2 007B  
                                                          __end_of_Wait_AckI2C 5056  
                                                                set_PID_Kd@val 0019  
                                                                   ___ftsub@f1 0069  
                                                                   ___ftsub@f2 006C  
                                                                   ___fttol@f1 008E  
                                                                set_PID_Ki@val 0019  
                                                               __pcstackCOMRAM 0001  
                                                              set_VL1_span@val 0019  
                                                                set_PID_Kp@val 0019  
                                                                 __pidataBANK0 0006  
                                                                rd_string_EE@i 001E  
                                                                   ___lltoft@c 0021  
                                                          __size_of_Check_VL_N 0056  
                                                                __end_of_ctime 526E  
                                                                __end_of_dylen 5CCA  
                                                         ??_Set_LP_RC_constant 001C  
                                                              set_Vin_span@val 0019  
                                                                __end_of_scale 2498  
                                                                __end_of_put2d 5E24  
                                                              set_VL2_span@val 0019  
                                                                __end_of_putch 4DCC  
                                                              set_VL1_zero@val 0019  
                                                                  _ReadStr_I2C 6FAA  
                                                                ?_rd_string_EE 001A  
                                                             ___lbdiv@quotient 001C  
                                                                   ___lwtoft@c 0021  
                                                              set_VL3_span@val 0019  
                                                    __size_of_Get_Voltage_Data 04A8  
                                                           __size_of_get_PID_T 0012  
                                                              set_Vin_zero@val 0019  
                                                          _Get_Control_Voltage 72A4  
                                                              set_VL2_zero@val 0019  
                                                                   __div_to_l_ 719C  
                                                                   _cal_analog 2E9C  
                                                             Open_Timer0@value 001A  
                                                                ?_set_VL1_span 0019  
                                                                ?_set_VL2_span 0019  
                                                                   ??_I2C_Send 001B  
                                                                ?_set_VL1_zero 0019  
                                                                ?_set_VL3_span 0019  
                                                                ?_set_VL2_zero 0019  
                                                                ?_set_VL3_zero 0019  
                                                      __size_of_months_to_days 0040  
                                                         __end_of_LCD_WriteStr 61A8  
                                                              set_VL3_zero@val 0019  
                                                                  ?_Not_AckI2C 0001  
                                                                    ?_CloseI2C 0001  
                                                                   __doprnt@ap 00A1  
                                                                   __doprnt@cp 00AE  
                                                            __end_of_OpenUSART 5C5E  
                                                                   __doprnt@pb 009D  
                                                             ??_PID_Controller 0030  
                                                                      ??_ctime 0030  
                                                                ?_set_Deadband 0019  
                                                              __div_to_l_@exp1 0024  
                                                              __div_to_l_@cntr 0023  
                                                        __size_of_get_VL1_span 0012  
                                                                      ??_dylen 0020  
                                                        __size_of_get_VL2_span 0012  
                                                                      ??_scale 0030  
                                                        __size_of_get_VL1_zero 0012  
                                                        __size_of_get_VL3_span 0012  
                                                        __size_of_get_VL2_zero 0012  
                                                                      ??_put2d 002C  
                                                        __size_of_get_VL3_zero 0012  
                                                              __div_to_l_@quot 001F  
                                                                      ??_putch 0019  
                                                                   __pbssBANK0 00ED  
                                                                   __pbssBANK1 0100  
                                                         Display_Data@buff_len 01CF  
                                                             ?_LCD_SetContrast 0001  
                                                                      ?_AckI2C 0001  
                                                         ?_Get_Control_Voltage 0078  
                                                                    ?_OpenIO5R 0001  
                                                                __div_to_l_@f1 0019  
                                                                __div_to_l_@f2 001C  
                                                   __end_of_Get_Analog_Channel 55B8  
                                                           __size_of_localtime 0092  
                                                                  _LowPass_VL1 652A  
                                                                  _LowPass_VL2 65E6  
                                                                  _LowPass_VL3 66A2  
                                                                  _LowPass_Vin 675E  
                                                      Control_Loop@Control_Out 0096  
                                                                  ?_RestartI2C 0001  
                                                     __end_of_set_PID_setpoint 4E38  
                                                                    ?_TimerInt 0001  
                                                                   _get_PID_Kp 4EFE  
                                                                   _get_PID_Td 4F22  
                                                                   _get_PID_Ti 4F34  
                                                                      ?___ftge 001F  
                                                           __size_of_set_PID_T 0012  
                                                                      ?___lmul 0019  
                                                              lcd_display@data 0067  
                                                                      ?___wmul 0027  
                                                                    ?_StartI2C 0001  
                                        LCD_SetBackLight_Brightness@brightness 001B  
                                          __end_of_LCD_SetBackLight_Brightness 5638  
                                                  _LCD_SetBackLight_Brightness 55F8  
                                                              bcdTOint@bcdByte 002D  
                                                               ??_rd_string_EE 001D  
                                                                    ?___altoft 0021  
                                                                      ?_gmtime 0027  
                                                       _LCD_SetCursor_Position 5794  
                                                                    ?_bcdTOint 002D  
                                                                      ?_fround 0087  
                                                                      ?_isleap 001E  
                                                               ___lmul@product 0021  
                                                     __size_of_Get_Voltage_VL1 0012  
                                                     __size_of_Get_Voltage_VL2 0012  
                                                     __size_of_Get_Voltage_VL3 0012  
                                                           __size_of_reset_PID 003C  
                                                                    ?_WriteI2C 0001  
                                                                      ?_mktime 007E  
                                                                    ?___ftpack 0019  
                                                            Get_Variables@data 0060  
                                                                    ?___lbtoft 0021  
                                                     __size_of_Get_Voltage_Vin 0012  
                                                                      ?_printf 00C4  
                                                           __size_of_reset_var 008A  
                                                                    ?___lltoft 0021  
                                                        __size_of_Display_Data 0256  
                                                            __end_of_WriteIO5R 6122  
                                                                      ?_strchr 0019  
                                                                      ?_strcmp 0019  
                                                    __size_of_get_PID_deadband 0012  
                                                                      ?_strlen 0019  
                                                                    ?___lwtoft 0021  
                                                                      ?_strtod 0087  
                                                                      ?_strtok 0024  
                                                                      ?_strspn 001D  
                                                                 _get_VL1_span 4F58  
                                                                 _get_VL2_span 4F7C  
                                                                ?_set_Vin_span 0019  
                                                               ??_set_VL1_span 001C  
                                                                 _get_VL1_zero 4F6A  
                                                                 _get_VL3_span 4FA0  
                                                               ??_set_VL2_span 001C  
                                                                 _get_VL2_zero 4F8E  
                                                                ?_set_Vin_zero 0019  
                                                               ??_set_VL1_zero 001C  
                                                               ??_set_VL3_span 001C  
                                                                 _get_VL3_zero 4FB2  
                                                               ??_set_VL2_zero 001C  
                                                               ??_set_VL3_zero 001C  
                                                                  _Open_Timer0 5368  
                                                                   _get_max_VL 4FE8  
                                                                    ?_date_set 006B  
                                                                   _get_min_VL 4FFA  
                                                               ??_set_Deadband 001C  
                                                        __size_of_get_Vin_span 0012  
                                                                   ??_CloseI2C 0019  
                                                        __size_of_get_Vin_zero 0012  
                                                                      _SSPCON1 000FC6  
                                                                      _SSPCON2 000FC5  
                                                                    ?_get_date 0021  
                                                              ??_ymd_to_scalar 0074  
                                                                AckI2C@IE_stat 0019  
                                                                    ?_get_list 00DC  
                                                                      _SSPSTAT 000FC7  
                                                                    ?_get_time 0021  
                                                                    ?_intTObcd 0065  
                                                                      _IdleI2C 51B8  
                                                                  _Wait_AckI2C 5042  
                                                    LCD_SetCursor_Position@row 001C  
                                                        ??_Get_Control_Voltage 007B  
                                                              __size_of_AckI2C 001C  
                                                            __end_of_get_PID_T 4F22  
                                                                      _ReadI2C 510A  
                                                                   ??_OpenIO5R 0022  
                                                                      _OpenI2C 5196  
                                                                      _OpenADC 4D2E  
                                                            __end_of__npowers_ 7D99  
                                                                      __Hparam 0000  
                                                                   _scale$3548 008A  
                                                                      __Lparam 0000  
                                                                    ?_set_date 0022  
                                                                    ?_set_list 00DC  
                                                                    ?_set_time 0022  
                                                    __size_of_get_PID_setpoint 0012  
                                                                   ??_TimerInt 0001  
                                                                 _Display_Data 3886  
                                                               _get_PID_output 500C  
                                                                    ?_time_set 006B  
                                                                      _StopI2C 5084  
                                                                      ___aldiv 6C0C  
                                                                   _last_error 010D  
                                                              StartI2C@IE_stat 0019  
                                                          __size_of_Not_AckI2C 001C  
                                                                      ___almod 681A  
                                                                   ??_StartI2C 0019  
                                                              __size_of___ftge 009C  
                                                                LCD_WriteStr@i 001E  
                                                                 _asctime$3550 006C  
                                                                      ___awdiv 6354  
                                                                      ___lbdiv 56BC  
                                                              __size_of___lmul 005E  
                                                                      _Outputs 00ED  
                                                                      ___ftadd 33A0  
                                                                      ___awmod 601A  
                                                                      ___ftdiv 7760  
                                                                      ___ftneg 52BE  
                                                                      ___lldiv 6232  
                                                              __size_of___wmul 002A  
                                                                      ___ftmul 78A6  
                                                                      ___llmod 5D3A  
                                                                      ___ftsub 58C6  
                                                                      ___fttol 762C  
                                                                      ___lwdiv 5E24  
                                                                      ___lwmod 5876  
                                                                   ??___altoft 0025  
                                                                      __doprnt 01B6  
                                                                   ??_bcdTOint 0060  
                                                                      __pcinit 57DE  
                                                                   ??_WriteI2C 0019  
                                                              __size_of_gmtime 022E  
                                                                   ??___ftpack 001E  
                                                                   ??___lbtoft 0024  
                                                              __size_of_fround 0282  
                                                              __size_of_isleap 0064  
                                                                      __ramtop 0600  
                                                        __size_of_Control_Loop 00D2  
                                                              __size_of_mktime 0288  
                                                                   ??___lltoft 0025  
                                                                 _get_Vin_span 4FC4  
                                                                      __ptext0 2498  
                                                                      __ptext1 574C  
                                                                      __ptext2 7B7A  
                                                                      __ptext3 28EE  
                                                                      __ptext4 6EB6  
                                                                      __ptext5 517A  
                                                                      __ptext6 7A02  
                                                                      __ptext7 68DA  
                                                                      __ptext8 5A76  
                                                                      __ptext9 5A1C  
                                                               ??_set_Vin_span 001C  
                                                                 _get_Vin_zero 4FD6  
                                                                      _asctime 3618  
                                                               ??_set_Vin_zero 001C  
                                                                   _rd_byte_EE 5056  
                                                             WriteStr_I2C@stat 0021  
                                                              __size_of_printf 004E  
                                                                      _get_max 4D96  
                                                                      _get_min 4DA8  
                                                                   ??___lwtoft 0024  
                                                              __size_of_strchr 0048  
                                                              __size_of_strcmp 0054  
                                                              __size_of_strlen 0048  
                                                                  ?__div_to_l_ 0019  
                                                              __size_of_strtod 04A0  
                                                              __size_of_strtok 00C0  
                                                              __size_of_strspn 005A  
                                                                      _dpowers 7D23  
                                                                  ?_cal_analog 00DC  
                                                                      _isdigit 51DC  
                                                             ___awmod@dividend 0019  
                                                             ___aldiv@dividend 0019  
                                                            __end_of_localtime 6354  
                                                                   ??_date_set 006D  
                                                                mktime@timeptr 007E  
                                                                      _isspace 53C4  
                                                         __end_of_read_command 7D22  
                                                                      _moninit 7D99  
                                                                      _set_max 501E  
                                                                      _set_min 5030  
                                                                    _LCD_Clear 3FF4  
                                                                 ??_Check_VL_N 002B  
                                                                      _rx_flag 00F9  
                                                                   _set_PID_Kd 4DF0  
                                                                   _set_PID_Ki 4E02  
                                                                   _set_PID_Kp 5200  
                                                          __size_of_RestartI2C 001A  
                                                            __end_of_set_PID_T 4E26  
                                                                      _tx_flag 00F8  
                                                                   ??_get_date 0023  
                                                                      _sprintf 5F1A  
                                                                  set_list@val 00E0  
                                                                  set_list@var 00DC  
                                                                      ctime@tp 0071  
                                                                   ??_get_list 00DE  
                                                                      _strcspn 5A1C  
                                                                   ??_get_time 0023  
                                                         end_of_initialization 581A  
                                                                   ??_intTObcd 002F  
                                                            __end_of_reset_PID 5500  
                                                                      dylen@yr 001E  
                                                                __Lmediumconst 7D22  
                                                            __end_of_reset_var 6232  
                                                     __size_of_check_V1_status 0044  
                                                     __size_of_check_V2_status 003C  
                                                                      put2d@cl 002A  
                                                                      put2d@cp 0027  
                                                     __size_of_check_V3_status 003C  
                                                                      put2d@ct 002B  
                                                       __end_of_get_PID_output 501E  
                                                              ___lldiv@divisor 001D  
                                                              set_Deadband@val 0019  
                                                              ___lldiv@counter 0025  
                                                                   ??_set_date 0024  
                                                                   _set_max_VL 4EC8  
                                                                   _set_min_VL 4EDA  
                                                                   ??_set_list 0030  
                                                                 _Control_Loop 6A5E  
                                                                   ??_set_time 0024  
                                                                  ?_get_PID_Kp 0019  
                                                                  ?_get_PID_Td 0019  
                                                                  ?_get_PID_Ti 0019  
                                                                    _RCSTAbits 000FAB  
                                                                   ??_time_set 006D  
                                                                      printf@f 00C4  
                                                             ___aldiv@quotient 0023  
                                                                      postdec2 000FDD  
                                                                      postinc0 000FEE  
                                                                      postinc2 000FDE  
                                                             ??_Manual_Control 0019  
                                                        check_V3_status@status 0019  
                                                               __tdiv_to_l_@f1 0019  
                                                               __tdiv_to_l_@f2 001C  
                                                           __end_of_Check_VL_N 59C2  
                                                                      strcmp@r 001E  
                                                                      strlen@s 0019  
                                                                ??__tdiv_to_l_ 001F  
                                                                      strtod@s 0087  
                                                                      strspn@i 0022  
                                                                  time_set@tim 006B  
                                                                  time_set@ptr 0075  
                                                        __size_of_LCD_WriteStr 0086  
                                                             _Get_Voltage_Data 16EE  
                                                                WriteIO5R@data 0019  
                                                                WriteIO5R@bits 0021  
                                                                WriteIO5R@temp 001D  
                                                           _get_LP_RC_Constant 4EEC  
                                                               _months_to_days 55B8  
                                                                   asctime@buf 017A  
                                                                  ?_get_max_VL 0019  
                                                                  ?_get_min_VL 0019  
                                                                   asctime@tim 006A  
                                                            ??_Get_Voltage_VL1 001C  
                                                            ??_Get_Voltage_VL2 001C  
                                                            ??_Get_Voltage_VL3 001C  
                                                                    _TRISBbits 000F93  
                                                                    _TRISCbits 000F94  
                                                            ??_Get_Voltage_Vin 001C  
                                                                   ?_LCD_Clear 0001  
                                                            __size_of_I2C_Send 0036  
                                                                intTObcd@total 0067  
                                                          ?_get_LP_RC_Constant 0019  
                                                         __end_of_rd_string_EE 5458  
                                                                   _rx_pointer 0046  
                                                                  ___ftdiv@exp 0076  
                                                                   _wr_byte_EE 5396  
                                                                    _TXSTAbits 000FAC  
                                                                ??_lcd_display 002F  
                                                               __end_of_AckI2C 50EE  
                                                         __end_of_set_VL1_span 4E4A  
                                                         __end_of_set_VL2_span 4E6E  
                                                         __end_of_set_VL1_zero 4E5C  
                                                         __end_of_set_VL3_span 4E92  
                                                         __end_of_set_VL2_zero 4E80  
                                                         __end_of_set_VL3_zero 4EA4  
                                                              ?_get_PID_output 0019  
                                                          __size_of__div_to_l_ 0108  
                                                           Get_Voltage_Data@v1 0091  
                                                          __size_of_cal_analog 0282  
                                                                   _tx_pointer 0044  
                                                                  ___ftmul@exp 0081  
                                                                 _LCD_WriteStr 6122  
                                                        __end_of_years_to_days 6DCC  
                                                         __end_of_set_Deadband 4DF0  
                                                         ??_get_LP_RC_Constant 001C  
                                                               __end_of___ftge 6488  
                                                               __end_of___lmul 5B2E  
                                                               __end_of___wmul 5312  
                                                                 ?_ReadStr_I2C 001B  
                                                               __end_of_gmtime 3D0A  
                                                                  ?_rd_byte_EE 0001  
                                                             _get_PID_deadband 4D72  
                                                               __end_of_fround 33A0  
                                                               __end_of_isleap 5BF6  
                                                       __end_of_months_to_days 55F8  
                                                               __end_of_mktime 2E9C  
                                                              ymd_to_scalar@mo 0070  
                                                               __end_of_printf 5876  
                                                              ymd_to_scalar@yr 006E  
                                                       __size_of_Get_Variables 0130  
                                                               __end_of_strchr 574C  
                                                               __end_of_strcmp 596C  
                                                               __end_of_strlen 5794  
                                                               __end_of_strtod 2036  
                                                               __end_of_strtok 699A  
                                                               __end_of_strspn 5AD0  
                                                          start_initialization 57DE  
                                                                 ??_Not_AckI2C 0019  
                                                          __end_of__tdiv_to_l_ 3FF4  
                                                              get_list@systime 00E0  
                                                                  ?_set_PID_Kd 0019  
                                                                  ?_set_PID_Ki 0019  
                                                                  ?_set_PID_Kp 0019  
                                                          __size_of_get_PID_Kp 0012  
                                                          __size_of_get_PID_Td 0012  
                                                          __size_of_get_PID_Ti 0012  
                                                             WriteI2C@data_out 0019  
                                                            __size_of_CloseI2C 0008  
                                                            Open_Timer0@config 001C  
                                                                    _OpenUSART 5BF6  
                                                                     ??_AckI2C 0019  
                                                              ___llmod@divisor 002A  
                                                         __end_of_set_Vin_span 4EB6  
                                                         __end_of_set_Vin_zero 4EC8  
                                                              ___llmod@counter 002E  
                                                                 ?_LowPass_VL1 0087  
                                                                 ?_LowPass_VL2 0087  
                                                                 ?_LowPass_VL3 0087  
                                                                  ?_set_max_VL 0019  
                                                            __size_of_OpenIO5R 0032  
                                                                  ?_set_min_VL 0019  
                                                                 ?_LowPass_Vin 0087  
                                                                 ??_RestartI2C 0019  
                                                             _get_PID_setpoint 4F46  
                                                             _LowPass_VL1$3539 008A  
                                                             _LowPass_VL2$3540 008A  
                                                             _LowPass_VL3$3541 008A  
                                                          __size_of_get_max_VL 0012  
                                                      ?_LCD_SetCursor_Position 001B  
                                                          __size_of_get_min_VL 0012  
                                                                     ??___ftge 0025  
                                                                     ??___lmul 0021  
                                                            ?_set_PID_setpoint 0019  
                                                                     ??___wmul 002B  
                                                            ??_check_V1_status 0019  
                                                            ??_check_V2_status 0019  
                                                           __end_of_Not_AckI2C 510A  
                                                                  __doprnt@len 00AC  
                                                          __end_of_lcd_display 5F1A  
                                                                  __doprnt@exp 00B4  
                                                                  __doprnt@val 00B6  
                                                            ??_check_V3_status 0019  
                                                                  __pdataBANK0 00FC  
                                                            __size_of_TimerInt 01AA  
                                                  __size_of_Set_LP_RC_constant 0012  
                                                                     ??_gmtime 0029  
                                                           ??_set_PID_setpoint 001C  
                                                                     ??_fround 0030  
                                                                     ??_isleap 0020  
                                                                     ??_mktime 0082  
                                                            __size_of_StartI2C 001A  
                                                        __size_of_read_command 01A8  
                                                                     ??_printf 0030  
                                                                     ??_strchr 001D  
                                                           _Get_Analog_Channel 5578  
                                                                     ??_strcmp 001D  
                                                                     ??_strlen 001B  
                                                                     ??_strtod 008B  
                                                                     ??_strtok 0028  
                                                                     ??_strspn 0021  
                                                              ?_months_to_days 0064  
                                                                   localtime@t 0066  
                                                            __size_of___altoft 0080  
                                                            __size_of_bcdTOint 005A  
                                                                   fround@prec 0090  
                                                              LCD_WriteStr@Str 001B  
                                                            __size_of_WriteI2C 002C  
                                                            __size_of___ftpack 00C4  
                                                            __size_of___lbtoft 0028  
                                                                 ?_Open_Timer0 0019  
                                                            __size_of___lltoft 0064  
                                                                  __pbssCOMRAM 0030  
                                                         WriteStr_I2C@Mod_Addr 0020  
                                                            __size_of___lwtoft 0028  
                                                                __pcstackBANK0 0060  
                                                                __pcstackBANK1 01BB  
                                                                    _WriteIO5R 609E  
                                                         WriteStr_I2C@Reg_Addr 001B  
                                                          _PID_Controller$3543 008A  
                                                          _PID_Controller$3544 008D  
                                                          _PID_Controller$3545 0090  
                                                                ?_WriteStr_I2C 001B  
                                                                 set_PID_T@val 0019  
                                                                  ??_LCD_Clear 001C  
                                                          ?_Get_Analog_Channel 0019  
                                                                 _isdigit$2871 001A  
                                                            __size_of_date_set 0178  
                                                           __end_of_RestartI2C 50D2  
                                                              Open_Timer0@data 001D  
                                                      __size_of_Save_Variables 0132  
                                                                     ?_IdleI2C 0001  
                                                            __size_of_get_date 001C  
                                                    Get_Analog_Channel@channel 001C  
                                                                 ?_Wait_AckI2C 0001  
                                                                   ?_OpenUSART 0019  
                                                            __size_of_get_list 0608  
                                                            __size_of_get_time 001C  
                                                                    __doprnt@c 00C3  
                                                                    __doprnt@f 009F  
                                                           Save_Variables@data 0060  
                                                                  ?_wr_byte_EE 0019  
                                                                     ?_ReadI2C 0001  
                                                            __size_of_intTObcd 00A2  
                                                                _Get_Variables 73CA  
                                                          __size_of_rd_byte_EE 0014  
                                                     Rd_Digital_Inputs@Temp_RD 001A  
                                                         WriteStr_I2C@Str_Size 001E  
                                                          ReadStr_I2C@Mod_Addr 001F  
                                                     Rd_Digital_Inputs@Port_RD 0019  
                                                                     ?_OpenI2C 0019  
                                                                     ?_OpenADC 0001  
                                                          ReadStr_I2C@Reg_Addr 001B  
                                               __end_of_LCD_SetCursor_Position 57DE  
                                                             _LowPass_Vin$3542 008A  
                                                             ___lwdiv@dividend 0060  
                                                                 _read_command 7B7A  
                                                                    _get_PID_T 4F10  
                                                         ??_Get_Analog_Channel 001B  
                                                 LCD_SetCursor_Position@column 001B  
                                                                    __pintcode 0008  
                                                                     ?_StopI2C 0001  
                                                     __size_of_LCD_SetContrast 0040  
                                                                __pmediumconst 7D22  
                                                                     ?___aldiv 0019  
                                                                     ?___almod 0019  
                                                                     ?___awdiv 001F  
                                                                    __ptext100 4EA4  
                                                                    __ptext101 4E92  
                                                                     ?___lbdiv 0019  
                                                                    __ptext110 4E02  
                                                                    __ptext102 4E80  
                                                                    __ptext111 4DF0  
                                                                    __ptext103 4E6E  
                                                                    __ptext120 4DBA  
                                                                    __ptext112 4DDE  
                                                                    __ptext104 4E5C  
                                                                    __ptext121 51DC  
                                                                    __ptext113 5424  
                                                                    __ptext105 4E4A  
                                                                    __ptext130 6232  
                                                                    __ptext122 311E  
                                                                    __ptext114 5056  
                                                                    __ptext106 4E38  
                                                                    __ptext131 762C  
                                                                    __ptext123 52E8  
                                                                    __ptext115 4DCC  
                                                                    __ptext107 4E26  
                                                                    __ptext140 506A  
                                                                    __ptext132 58C6  
                                                                    __ptext124 601A  
                                                                    __ptext116 3886  
                                                                    __ptext108 4E14  
                                                                    __ptext141 5196  
                                                                    __ptext133 4DA8  
                                                                    __ptext125 6354  
                                                                    __ptext117 5F1A  
                                                                    __ptext109 5200  
                                                                     ?___ftadd 0060  
                                                                    __ptext150 78A6  
                                                                    __ptext142 51B8  
                                                                    __ptext134 4D96  
                                                                    __ptext126 3EE2  
                                                                    __ptext118 01B6  
                                                                    __ptext151 72A4  
                                                                    __ptext143 4D26  
                                                                    __ptext135 6122  
                                                                    __ptext127 719C  
                                                                    __ptext119 2036  
                                                                    __ptext152 526E  
                                                                    __ptext144 4D84  
                                                                    __ptext136 5794  
                                                                    __ptext128 5B2E  
                                                                    __ptext153 7760  
                                                                    __ptext145 6A5E  
                                                                    __ptext137 533C  
                                                                    __ptext129 5D3A  
                                                                    __ptext154 33A0  
                                                                    __ptext146 4D72  
                                                                    __ptext138 5042  
                                                                    __ptext155 699A  
                                                                    __ptext147 63EC  
                                                                    __ptext139 5084  
                                                                    __ptext156 4D60  
                                                                    __ptext148 3D0A  
                                                                    __ptext157 4D4E  
                                                                    __ptext149 52BE  
                                                                    __ptext158 4D3C  
                                                                     ?___awmod 0019  
                                                                     ?___ftdiv 0069  
                                                                     ?___ftneg 001C  
                                                            __size_of_set_date 001C  
                                                                     ?___lldiv 0019  
                                                          __size_of_set_PID_Kd 0012  
                                                                     ?___ftmul 0078  
                                                          __size_of_set_PID_Ki 0012  
                                                          __size_of_set_PID_Kp 0024  
                                                                     ?___llmod 0026  
                                                                     ?___ftsub 0069  
                                                                    __npowers_ 7D72  
                                                                     ?___fttol 008E  
                                                                     ?___lwdiv 0060  
                                                            __size_of_set_list 0326  
                                                                     ?___lwmod 0019  
                                                                WriteStr_I2C@i 001F  
                                                            __size_of_set_time 001C  
                                                            __size_of_time_set 00F4  
                                                                     ?__doprnt 009D  
                                                           LCD_SetContrast@val 001B  
                                                             ___almod@dividend 0019  
                                                                  __tdiv_to_l_ 3EE2  
                                                                     ?_asctime 006A  
                                                                     ?_get_max 0019  
                                                                     ?_get_min 0019  
                                                          ReadStr_I2C@Str_Size 001E  
                                                                ?_wr_string_EE 001B  
                                                                 ??__div_to_l_ 001F  
                                                                 ??_cal_analog 0030  
                                                                     ?_isdigit 0001  
                                                                     _I2C_Send 5458  
                                                     Get_Control_Voltage@count 007C  
                                                               ??_WriteStr_I2C 001F  
                                                                     ?_isspace 0001  
                                                                   ?_WriteIO5R 0019  
                                                                     ?_set_max 001C  
                                                                     ?_set_min 001C  
                                                              LowPass_VL1@Vout 008D  
                                                              LowPass_VL2@Vout 008D  
                                                              LowPass_VL3@Vout 008D  
                                                        __size_of_rd_string_EE 0034  
                                                          __size_of_set_max_VL 0012  
                                                          __size_of_set_min_VL 0012  
                                                  __end_of_Get_Control_Voltage 73CA  
                                                             ___lwdiv@quotient 002E  
                                                                     _DDRCbits 000F94  
                                                               __size_of_ctime 0026  
                                                                     ?_sprintf 00C4  
                                                               __size_of_dylen 006C  
                                                              WriteStr_I2C@Str 001C  
                                                               __size_of_scale 0462  
                                                                     ?_strcspn 001D  
                                                               __size_of_put2d 0076  
                                                                    _localtime 62C2  
                                                               __size_of_putch 0012  
                                                            get_time@Time_Data 0021  
                                                        __size_of_set_VL1_span 0012  
                                                            set_time@Time_Data 0022  
                                                        __size_of_set_VL2_span 0012  
                                                        __size_of_set_VL1_zero 0012  
                                                        __size_of_set_VL3_span 0012  
                                                        __size_of_set_VL2_zero 0012  
                                                        __end_of_ymd_to_scalar 6EB6  
                                                        __size_of_set_VL3_zero 0012  
                                                                   set_max@val 001C  
                                                                   set_min@val 001C  
                                                                    date_set@i 0087  
                                                              ___aldiv@divisor 001D  
                                                              ___aldiv@counter 0021  
                                                                    _set_PID_T 4E14  
                                                               ___wmul@product 002B  
                                                     __end_of_Get_Voltage_Data 1B96  
                                                               ?_Get_Variables 001F  
                                                                     _LATCbits 000F8B  
                                                                set_max_VL@val 0019  
                                                        __size_of_set_Deadband 0012  
                                                                     _PIE1bits 000F9D  
                                                                  _lcd_display 5E9E  
                                                                    _reset_PID 54C4  
                                                      __size_of_PID_Controller 01D8  
                                                                 date_set@data 007B  
                                                                 date_set@date 0083  
                                                                     _PIR1bits 000F9E  
                                                           __end_of__div_to_l_ 72A4  
                                                                     _PIR2bits 000FA1  
                                                                    _reset_var 61A8  
                                                           __end_of_cal_analog 311E  
                                                                   ?_get_PID_T 0019  
                                                                 ??_get_PID_Kp 001C  
                                                                 ??_get_PID_Td 001C  
                                                                 ??_get_PID_Ti 001C  
                                                                set_min_VL@val 0019  
                                                                 time@DateTime 0095  
                                                                    _time_zone 00F4  
                                                              WriteI2C@IE_stat 001A  
                                                                  strtod@flags 008D  
                                                              _Get_Voltage_VL1 4D3C  
                                                              _Get_Voltage_VL2 4D4E  
                                                              _Get_Voltage_VL3 4D60  
                                                               StopI2C@IE_stat 0019  
                                                                     _VL1_last 014F  
                                                                     _VL2_last 014C  
                                                                  strtod@expon 008E  
                                                              _Get_Voltage_Vin 4D84  
                                                                     _VL3_last 0149  
                                                                     _VL1_span 0137  
                                                                     _VL2_span 0134  
                                                                     _VL1_zero 0143  
                                                                     _VL3_span 0131  
                                                                     _VL2_zero 0140  
                                                                     _VL3_zero 013D  
                                                              read_command@ptr 01BF  
                                                                    asctime@cp 006F  
                                                              time_set@sep_tok 007B  
                                                                    _rx_buffer 0195  
                                                                 _rd_string_EE 5424  
                                                               ??_wr_string_EE 001E  
                                                                   _ADCON0bits 000FC2  
                                                           rd_string_EE@buffer 001B  
                                                            ___wmul@multiplier 0027  
                                                           wr_string_EE@buffer 001C  
                                                           rd_string_EE@lenght 001A  
                                                           wr_string_EE@lenght 001B  
                                                         __size_of_ReadStr_I2C 00F6  
                                                                    get_list@t 00E4  
                                                                    _tx_buffer 0152  
                                                          __size_of_wr_byte_EE 002E  
                                                                    main@p_len 01D3  
                                                                 _set_VL1_span 4E38  
                                                                 _set_VL2_span 4E5C  
                                                                 _set_VL1_zero 4E4A  
                                                                 ??_get_max_VL 001C  
                                                                 _set_VL3_span 4E80  
                                                                 _set_VL2_zero 4E6E  
                                                              LowPass_Vin@Vout 008D  
                                                                 _set_VL3_zero 4E92  
                                                                 ??_get_min_VL 001C  
                                                                 _isspace$2874 001A  
                                                                     _CloseI2C 4D26  
                                                                 _set_Deadband 4DDE  
                                                            ___lmul@multiplier 0019  
                                                        __size_of_set_Vin_span 0012  
                                                                   ?_localtime 0060  
                                                        __size_of_set_Vin_zero 0012  
                                                           __end_of_get_PID_Kp 4F10  
                                                           __end_of_get_PID_Td 4F34  
                                                           __end_of_get_PID_Ti 4F46  
                                                             ??_get_PID_output 001C  
                                                                    intTObcd@v 0065  
                                                             OpenI2C@sync_mode 001A  
                                                                     _Int_Flag 00FA  
                                                                  ??_OpenUSART 001B  
                                                                   ?_set_PID_T 0019  
                                                             __size_of_IdleI2C 0024  
                                                     __end_of_get_PID_deadband 4D84  
                                                              OpenUSART@config 001B  
                                                                     _OpenIO5R 53F2  
                                                                   _EECON1bits 000FA6  
                                                             __size_of_ReadI2C 001C  
                                                                   ?_reset_PID 0001  
                                                                     _T_sample 0119  
                                                                     __Hrparam 0000  
                                                                    gmtime@tim 01A9  
                                                             __size_of_OpenI2C 0022  
                                                             __size_of_OpenADC 000E  
                                                                   ?_reset_var 00DC  
                                                        Set_LP_RC_constant@val 0019  
                                                                     __Lrparam 0000  
                                                                     _TimerInt 0008  
                                                                     _Vin_Span 012E  
                                                                 TimerInt@stat 0018  
                                                           __end_of_get_max_VL 4FFA  
                                                                     _StartI2C 506A  
                                                           __end_of_get_min_VL 500C  
                                                                     _Vin_last 0146  
                                                         __size_of_LowPass_VL1 00BC  
                                                         __size_of_LowPass_VL2 00BC  
                                                         __size_of_LowPass_VL3 00BC  
                                                             __size_of_StopI2C 001A  
                                                                     _Vin_zero 013A  
                                                         __size_of_LowPass_Vin 00BC  
                                                             __size_of___aldiv 00E0  
                                                             __size_of___almod 00C0  
                                                             __size_of___awdiv 0098  
                                                             __size_of___lbdiv 0048  
                                                             __size_of___ftadd 0278  
                                                             __size_of___awmod 0084  
                                                             __size_of___ftdiv 0146  
                                                             __size_of___ftneg 002A  
                                                             __size_of___lldiv 0090  
                                                                     ___altoft 5F9A  
                                                             __size_of___ftmul 015C  
                                                             __size_of___llmod 0074  
                                                             __size_of___ftsub 0052  
                                                             __size_of___fttol 0134  
                                                                     _bcdTOint 59C2  
                                                             __size_of___lwdiv 007A  
                                                             __size_of___lwmod 0050  
                                                                     _WriteI2C 533C  
                                                                     ___ftpack 699A  
                                                                     ___lbtoft 526E  
                                                                  _last_output 0110  
                                                             __size_of__doprnt 0F30  
                                                                  _fround$3546 008D  
                                                                  _fround$3547 008A  
                                                                     ___lltoft 5B2E  
                                                                 ??_rd_byte_EE 0019  
                                                              I2C_Send@command 001B  
                                                            ??_LCD_SetContrast 001B  
                                                                     ___lwtoft 5296  
                                                          Control_Loop@voltage 0093  
                                                                  _isleap$2937 0022  
                                                                     _deadband 0104  
                                                             __size_of_asctime 026E  
                                                                 _set_Vin_span 4EA4  
                                                             __size_of_get_max 0012  
                                                             __size_of_get_min 0012  
                                                                 _set_Vin_zero 4EB6  
                                                            RestartI2C@IE_stat 0019  
                                                                     _date_set 7A02  
                                                                  ??_WriteIO5R 001D  
                                                             __size_of_isdigit 0024  
                                                              ___lwdiv@divisor 0062  
                                                     __end_of_get_PID_setpoint 4F58  
                                                             __size_of_isspace 002E  
                                                              ___lwdiv@counter 002D  
                                                                 ??_set_PID_Kd 001C  
                                                                 ??_set_PID_Ki 001C  
                                                                 ??_set_PID_Kp 001C  
                                                         __size_of_Open_Timer0 002E  
                                                                     __ptext10 5704  
                                                                     __ptext11 515E  
                                                                     __ptext20 55F8  
                                                                     __ptext12 5CCA  
                                                                     __ptext21 10E6  
                                                                     __ptext13 6488  
                                                                     __ptext30 5126  
                                                                     __ptext22 6B30  
                                                                     __ptext14 61A8  
                                                                     __ptext31 6FAA  
                                                                     __ptext23 2C14  
                                                                     __ptext15 5030  
                                                                     __ptext40 5312  
                                                                     __ptext32 50B8  
                                                                     __ptext24 6DCC  
                                                                     __ptext16 501E  
                                                                     __ptext41 1B96  
                                                                     __ptext33 510A  
                                                                     __ptext25 6CEC  
                                                                     __ptext17 5E9E  
                                                                     __ptext50 4FC4  
                                                                     __ptext42 53C4  
                                                                     __ptext34 50EE  
                                                                     __ptext26 55B8  
                                                                     __ptext18 70A0  
                                                                     __ptext51 4FB2  
                                                                     __ptext43 5F9A  
                                                                     __ptext35 50D2  
                                                                     __ptext27 5E24  
                                                                     __ptext19 5638  
                                                                     __ptext60 4F10  
                                                                     __ptext52 4FA0  
                                                                     __ptext44 74FA  
                                                                     __ptext36 59C2  
                                                                     __ptext28 5B92  
                                                                     __ptext61 4EFE  
                                                                     __ptext53 4F8E  
                                                                     __ptext45 548E  
                                                                     __ptext37 500C  
                                                                     __ptext29 5142  
                                                                     __ptext70 6C0C  
                                                                     __ptext62 4EEC  
                                                                     __ptext54 4F7C  
                                                                     __ptext46 5396  
                                                                     __ptext38 2E9C  
                                                                     __ptext71 5AD0  
                                                                     __ptext63 5828  
                                                                     __ptext55 4F6A  
                                                                     __ptext47 4FFA  
                                                                     __ptext39 5918  
                                                                     __ptext80 5BF6  
                                                                     __ptext72 3618  
                                                                     __ptext64 5248  
                                                                     __ptext56 4F58  
                                                                     __ptext48 4FE8  
                                                                     __ptext81 53F2  
                                                                     __ptext73 5DAE  
                                                                     __ptext65 62C2  
                                                                     __ptext57 4F46  
                                                                     __ptext49 4FD6  
                                                                     __ptext90 675E  
                                                                     __ptext82 609E  
                                                                     __ptext74 56BC  
                                                                     __ptext66 3ADC  
                                                                     __ptext58 4F34  
                                                                     __ptext91 66A2  
                                                                     __ptext83 4D2E  
                                                                     __ptext75 553C  
                                                                     __ptext67 5C5E  
                                                                     __ptext59 4F22  
                                                                     __ptext92 65E6  
                                                                     __ptext84 509E  
                                                                     __ptext76 5500  
                                                                     __ptext68 5876  
                                                                     __ptext93 652A  
                                                                     __ptext85 54C4  
                                                                     __ptext77 5678  
                                                                     __ptext69 681A  
                                                                     __ptext94 5578  
                                                                     __ptext86 3FF4  
                                                                     __ptext78 5224  
                                                                     __ptext95 596C  
                                                                     __ptext87 5458  
                                                                     __ptext79 5368  
                                                                     __ptext96 73CA  
                                                                     __ptext88 16EE  
                                                                     __ptext97 4EDA  
                                                                     __ptext89 5296  
                                                                     __ptext98 4EC8  
                                                                     __ptext99 4EB6  
                                                             __size_of_set_max 0012  
                                                             __size_of_set_min 0012  
                                                                     __powers_ 7D4B  
                                                                     _get_date 5126  
                                                                     _get_list 10E6  
                                                                     _get_time 5142  
                                                              ___almod@divisor 001D  
                                                               _Save_Variables 74FA  
                                                             __size_of_sprintf 0080  
                                                              ___almod@counter 0021  
                                                              ??_Get_Variables 0021  
                                                             __size_of_strcspn 005A  
                                                                     _intTObcd 6488  
                                                      Get_Control_Voltage@volt 007D  
                                                              _check_V1_status 5678  
                                                               LowPass_VL1@val 0087  
                                                               LowPass_VL2@val 0087  
                                                               LowPass_VL3@val 0087  
                                                              _check_V2_status 5500  
                                                                __size_of_atof 002A  
                                                                __size_of_atoi 00FC  
                                                                __size_of_main 0456  
                                                              _check_V3_status 553C  
                                                                __size_of_time 00DC  
                                                                     _integral 0113  
                                                         __size_of_Wait_AckI2C 0014  
                                                      __end_of_Get_Voltage_VL1 4D4E  
                                                      __end_of_Get_Voltage_VL2 4D60  
                                                      __end_of_Get_Voltage_VL3 4D72  
                                                                 reset_var@var 00DC  
                                                           __end_of_rd_byte_EE 506A  
                                                      __end_of_Get_Voltage_Vin 4D96  
                                                              date_set@sep_tok 0079  
                                                                 ??_set_max_VL 001C  
                                                                  date_set@dat 006B  
                                                                 ??_set_min_VL 001C  
                                                                     _set_date 515E  
                                                         __end_of_WriteStr_I2C 5D3A  
                                                                  date_set@ptr 006F  
                                                                     _set_list 28EE  
                                                                  ??_get_PID_T 001C  
                                                                     _set_time 517A  
                                                                     _time_set 6EB6  
                                                                    time_set@i 0080  
                                                                   strtod@eexp 008C  
                                                                     _setpoint 0107  
                                                                     _timezone 0100  
                                                                     int$flags 0047  
                                                             ??_months_to_days 0030  
                                                                Check_VL_N@val 0028  
                                                                     asctime@s 006D  
                                                                     atoi@sign 0062  
                                                 ?_LCD_SetBackLight_Brightness 0001  
                                                           __end_of_set_PID_Kd 4E02  
                                                           __end_of_set_PID_Ki 4E14  
                                                           __end_of_set_PID_Kp 5224  
                                                  __size_of_get_LP_RC_Constant 0012  
                                                                 set_list@data 00DE  
                                                                     main@code 01D1  
                                                               __doprnt@tmpval 00BA  
                                                               LowPass_Vin@val 0087  
                                                                ?_get_VL1_span 0019  
                                                                ?_get_VL2_span 0019  
                                                                ?_get_VL1_zero 0019  
                                                                ?_get_VL3_span 0019  
                                                                ?_get_VL2_zero 0019  
                                                                ?_get_VL3_zero 0019  
                                                           _ymd_to_scalar$2950 0078  
                                                                    putch@byte 0019  
                                                                   _INTCONbits 000FF2  
                                                               OpenUSART@spbrg 0019  
                                                                     gmtime@tc 002C  
                                                                wr_string_EE@i 001F  
                                                                     gmtime@tp 0027  
                                                          set_PID_setpoint@val 0019  
                                                      __size_of_Manual_Control 001A  
                                                    __size_of_set_PID_setpoint 0012  
                                                       __end_of_Save_Variables 762C  
                                                                     isdigit@c 001B  
                                                                     scale@scl 008D  
                                                               cal_analog@data 00DE  
                                                       __size_of_years_to_days 00E0  
                                                           __end_of_set_max_VL 4EDA  
                                                                     isleap@yr 001E  
                                                           __end_of_set_min_VL 4EEC  
                                                                  ??_localtime 0062  
                                                                     intlevel2 4D24  
                                                                    sprintf@ap 00D6  
                                                                    sprintf@pb 00D8  
                                                             __tdiv_to_l_@exp1 0027  
                                                             __tdiv_to_l_@cntr 0026  
                                                                    sprintf@wh 00C4  
                                                             __tdiv_to_l_@quot 0022  
                                                                    strchr@chr 001B  
                                                                  ??_set_PID_T 001C  
                                                             ___lwmod@dividend 0019  
                                                                    strchr@ptr 0019  
                                                                     isspace@c 001B  
                                                             ___lldiv@dividend 0019  
                                                                     mktime@tt 0088  
                                                                 ??_wr_byte_EE 001A  
                                                         __end_of_wr_string_EE 54C4  
                                                                     time@date 0091  
                                                                    strcspn@s1 001D  
                                                                    strcspn@s2 001F  
                                                               _PID_Controller 3D0A  
                                                                     time@time 008E  
                                                          ymd_to_scalar@scalar 007A  
                                                                  ??_reset_PID 0019  
                                                                  ??_reset_var 0030  
                                                                ?_Display_Data 0001  
                                                        check_V1_status@status 0019  
                                                   __end_of_Set_LP_RC_constant 4DDE  
                                                                    strtod@res 0089  
                                                                read_command@i 01BD  
                                                                     printf@ap 00C8  
                                                                     printf@pb 00CA  
                                                                ?_get_Vin_span 0019  
                                                               ??_get_VL1_span 001C  
                                                                 ?__tdiv_to_l_ 0019  
                                                               ??_get_VL2_span 001C  
                                                                ?_get_Vin_zero 0019  
                                                               ??_get_VL1_zero 001C  
                                                               ??_get_VL3_span 001C  
                                                               ??_get_VL2_zero 001C  
                                                ??_LCD_SetBackLight_Brightness 001B  
                                                               ??_get_VL3_zero 001C  
                                                                cal_analog@val 00E0  
                                                                cal_analog@var 00DC  
                                                                     sprintf@f 00C6  
                                                          read_command@sep_tok 01BB  
                                                                     strcmp@s1 0019  
                                                                     strcmp@s2 001B  
                                                             ___lldiv@quotient 0021  
                                                              ___lwmod@divisor 001B  
                                                          read_command@rx_buff 00E6  
                                                                     strlen@cp 001D  
                                                              ___lwmod@counter 001D  
                                                           __end_of_wr_byte_EE 53C4  
                                                                     strcspn@i 0022  
                                                          read_command@tx_buff 00E8  
                                                                 ___aldiv@sign 0022  
                                                                 time_set@data 006F  
                                                      __end_of_check_V1_status 56BC  
                                                                     strtod@_u 008F  
                                                                     strtok@s1 0024  
                                                                     strtok@s2 0026  
                                                                 time_set@hour 007D  
                                                                     strspn@s1 001D  
                                                                     strspn@s2 001F  
                                                                  _SSPCON1bits 000FC6  
                                                                     strtok@sp 0042  
                                                      __end_of_check_V2_status 553C  
                                                                  _SSPCON2bits 000FC5  
                                                              ?_Save_Variables 0001  
                                                      __end_of_check_V3_status 5578  
                                                            _Rd_Digital_Inputs 5224  
                                                         LCD_WriteStr@Str_Size 001D  
                                                               rd_byte_EE@addr 0019  
                                                                main@BackLight 01D0  
                                                                 ___almod@sign 0022  
                                                           ?_Rd_Digital_Inputs 0001  
                                                       __end_of_PID_Controller 3EE2  
                                                            ?_Get_Voltage_Data 0001  
                                                                 ?_lcd_display 0065  
                                                             ?_Get_Voltage_VL1 0019  
                                                             ?_Get_Voltage_VL2 0019  
                                                             ?_Get_Voltage_VL3 0019  
                                                             ?_Get_Voltage_Vin 0019  
                                                               ??_Display_Data 0030  
                                                           ??_Get_Voltage_Data 0030  
                                                           main@voltage_status 01D7  
                                                                ?_Control_Loop 0001  
                                                          ??_Rd_Digital_Inputs 0019  
